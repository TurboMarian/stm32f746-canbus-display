
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025444  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004260  08025614  08025614  00035614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003cfc  08029874  08029874  00039874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00016998  0802d570  0802d570  0003d570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000001f0  08043f08  08043f08  00053f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080440f8  080440f8  000600fc  2**0
                  CONTENTS
  7 .ARM          00000008  080440f8  080440f8  000540f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08044100  08044100  000600fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08044100  08044100  00054100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08044114  08044114  00054114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  0804411c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ca30  200000fc  08044218  000600fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000cb2c  08044218  0006cb2c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000600fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005aa41  00000000  00000000  0006012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ee9b  00000000  00000000  000bab6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000040d8  00000000  00000000  000c9a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003ad0  00000000  00000000  000cdae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003aec7  00000000  00000000  000d15b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00041448  00000000  00000000  0010c477  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012ee86  00000000  00000000  0014d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0027c745  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011658  00000000  00000000  0027c840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080255fc 	.word	0x080255fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	080255fc 	.word	0x080255fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <vApplicationGetIdleTaskMemory+0x30>)
 8000de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000118 	.word	0x20000118
 8000e00:	20000170 	.word	0x20000170

08000e04 <SecondTask>:
   int	  tps;
   int	  batt_v;
} display_values;

void SecondTask(void const* argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		display_values dispVals = {rpm, clt, map, lambda, lambda_targ,};
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2230      	movs	r2, #48	; 0x30
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f023 fc74 	bl	8024702 <memset>
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <SecondTask+0x4c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <SecondTask+0x50>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <SecondTask+0x54>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <SecondTask+0x58>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <SecondTask+0x5c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	61bb      	str	r3, [r7, #24]
	    xQueueSend(messageQ, &dispVals,0);
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <SecondTask+0x60>)
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	f107 0108 	add.w	r1, r7, #8
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	f00b fd2e 	bl	800c8a4 <xQueueGenericSend>
		osDelay(150);
 8000e48:	2096      	movs	r0, #150	; 0x96
 8000e4a:	f00b fa3d 	bl	800c2c8 <osDelay>
	{
 8000e4e:	e7dd      	b.n	8000e0c <SecondTask+0x8>
 8000e50:	20000004 	.word	0x20000004
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	20000014 	.word	0x20000014
 8000e64:	20008688 	.word	0x20008688

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6e:	f002 fcc6 	bl	80037fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e72:	f000 f85f 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e76:	f001 f999 	bl	80021ac <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e7a:	f000 f917 	bl	80010ac <MX_ADC3_Init>
  MX_CRC_Init();
 8000e7e:	f000 fad1 	bl	8001424 <MX_CRC_Init>
  MX_DCMI_Init();
 8000e82:	f000 faf1 	bl	8001468 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e86:	f000 fb23 	bl	80014d0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e8a:	f001 f8e3 	bl	8002054 <MX_FMC_Init>
  MX_LTDC_Init();
 8000e8e:	f000 fb51 	bl	8001534 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000e92:	f000 fbd1 	bl	8001638 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000e96:	f000 fbfb 	bl	8001690 <MX_RTC_Init>
  MX_SAI2_Init();
 8000e9a:	f000 fca1 	bl	80017e0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000e9e:	f000 fd47 	bl	8001930 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000ea2:	f000 fd65 	bl	8001970 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000ea6:	f000 fd93 	bl	80019d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000eaa:	f000 fdcf 	bl	8001a4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eae:	f000 fe79 	bl	8001ba4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb2:	f000 feed 	bl	8001c90 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000eb6:	f000 ff61 	bl	8001d7c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000eba:	f000 ffd5 	bl	8001e68 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ebe:	f001 f825 	bl	8001f0c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ec2:	f001 f867 	bl	8001f94 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ec6:	f001 f895 	bl	8001ff4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000eca:	f00a feb9 	bl	800bc40 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000ece:	f000 f93f 	bl	8001150 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000ed2:	f00d ff27 	bl	800ed24 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <main+0xbc>)
 8000ed8:	f107 041c 	add.w	r4, r7, #28
 8000edc:	461d      	mov	r5, r3
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00b f99d 	bl	800c230 <osThreadCreate>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <main+0xc0>)
 8000efa:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <main+0xc4>)
 8000efe:	463c      	mov	r4, r7
 8000f00:	461d      	mov	r5, r3
 8000f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00b f98c 	bl	800c230 <osThreadCreate>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <main+0xc8>)
 8000f1c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f1e:	f00b f964 	bl	800c1ea <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0xba>
 8000f24:	08025620 	.word	0x08025620
 8000f28:	2000bfac 	.word	0x2000bfac
 8000f2c:	08025644 	.word	0x08025644
 8000f30:	2000bfa8 	.word	0x2000bfa8

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b4      	sub	sp, #208	; 0xd0
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f3e:	2230      	movs	r2, #48	; 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f023 fbdd 	bl	8024702 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2284      	movs	r2, #132	; 0x84
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f023 fbce 	bl	8024702 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f66:	f005 f91f 	bl	80061a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <SystemClock_Config+0x16c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <SystemClock_Config+0x16c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <SystemClock_Config+0x16c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <SystemClock_Config+0x170>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <SystemClock_Config+0x170>)
 8000f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <SystemClock_Config+0x170>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fbc:	2319      	movs	r3, #25
 8000fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fd0:	2309      	movs	r3, #9
 8000fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 fa06 	bl	80063ec <HAL_RCC_OscConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fe6:	f001 fb15 	bl	8002614 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fea:	f005 f8ed 	bl	80061c8 <HAL_PWREx_EnableOverDrive>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ff4:	f001 fb0e 	bl	8002614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800101a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800101e:	2106      	movs	r1, #6
 8001020:	4618      	mov	r0, r3
 8001022:	f005 fc87 	bl	8006934 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800102c:	f001 faf2 	bl	8002614 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <SystemClock_Config+0x174>)
 8001032:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001044:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001048:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800104a:	2305      	movs	r3, #5
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001052:	2303      	movs	r3, #3
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800105e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800106a:	2300      	movs	r3, #0
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800106e:	2300      	movs	r3, #0
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001072:	2300      	movs	r3, #0
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800107a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fe57 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x164>
  {
    Error_Handler();
 8001094:	f001 fabe 	bl	8002614 <Error_Handler>
  }
}
 8001098:	bf00      	nop
 800109a:	37d0      	adds	r7, #208	; 0xd0
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000
 80010a8:	01b00868 	.word	0x01b00868

080010ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_ADC3_Init+0x98>)
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <MX_ADC3_Init+0x9c>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_ADC3_Init+0x98>)
 80010c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_ADC3_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_ADC3_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_ADC3_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_ADC3_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_ADC3_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_ADC3_Init+0x98>)
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <MX_ADC3_Init+0xa0>)
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_ADC3_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_ADC3_Init+0x98>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_ADC3_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_ADC3_Init+0x98>)
 8001108:	2201      	movs	r2, #1
 800110a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_ADC3_Init+0x98>)
 800110e:	f002 fbc5 	bl	800389c <HAL_ADC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001118:	f001 fa7c 	bl	8002614 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111c:	2304      	movs	r3, #4
 800111e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001120:	2301      	movs	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_ADC3_Init+0x98>)
 800112e:	f002 fbf9 	bl	8003924 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001138:	f001 fa6c 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000c2f4 	.word	0x2000c2f4
 8001148:	40012200 	.word	0x40012200
 800114c:	0f000001 	.word	0x0f000001

08001150 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001158:	4a30      	ldr	r2, [pc, #192]	; (800121c <MX_CAN1_Init+0xcc>)
 800115a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MX_CAN1_Init+0xc8>)
 800115e:	2214      	movs	r2, #20
 8001160:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_CAN1_Init+0xc8>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001170:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001174:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <MX_CAN1_Init+0xc8>)
 800117e:	2200      	movs	r2, #0
 8001180:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001184:	2200      	movs	r2, #0
 8001186:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <MX_CAN1_Init+0xc8>)
 800118a:	2200      	movs	r2, #0
 800118c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001190:	2200      	movs	r2, #0
 8001192:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001196:	2200      	movs	r2, #0
 8001198:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_CAN1_Init+0xc8>)
 800119c:	2200      	movs	r2, #0
 800119e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011a0:	481d      	ldr	r0, [pc, #116]	; (8001218 <MX_CAN1_Init+0xc8>)
 80011a2:	f002 fe03 	bl	8003dac <HAL_CAN_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011ac:	f001 fa32 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011d4:	230e      	movs	r3, #14
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	4619      	mov	r1, r3
 80011dc:	480e      	ldr	r0, [pc, #56]	; (8001218 <MX_CAN1_Init+0xc8>)
 80011de:	f002 fee1 	bl	8003fa4 <HAL_CAN_ConfigFilter>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011e8:	f001 fa14 	bl	8002614 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <MX_CAN1_Init+0xc8>)
 80011ee:	f002 ffb9 	bl	8004164 <HAL_CAN_Start>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 80011f8:	f001 fa0c 	bl	8002614 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80011fc:	2102      	movs	r1, #2
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_CAN1_Init+0xc8>)
 8001200:	f003 f906 	bl	8004410 <HAL_CAN_ActivateNotification>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800120a:	f001 fa03 	bl	8002614 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000c574 	.word	0x2000c574
 800121c:	40006400 	.word	0x40006400

08001220 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001228:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800122a:	4a6f      	ldr	r2, [pc, #444]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800122c:	2100      	movs	r1, #0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f002 ffdc 	bl	80041ec <HAL_CAN_GetRxMessage>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800123a:	f001 f9eb 	bl	8002614 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001246:	d13c      	bne.n	80012c2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
 8001248:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d138      	bne.n	80012c2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
 8001250:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b08      	cmp	r3, #8
 8001256:	d134      	bne.n	80012c2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8001258:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001260:	785b      	ldrb	r3, [r3, #1]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	84fb      	strh	r3, [r7, #38]	; 0x26
	 int tps_in = RxData[2]* 0.5;
 800126c:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f96f 	bl	8000554 <__aeabi_i2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800127c:	f7ff f9d4 	bl	8000628 <__aeabi_dmul>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fbe0 	bl	8000a4c <__aeabi_d2iz>
 800128c:	4603      	mov	r3, r0
 800128e:	623b      	str	r3, [r7, #32]
	 int iat_in = RxData[3];
 8001290:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	61fb      	str	r3, [r7, #28]
	 uint16_t map_in = (RxData[4] << 0) | (RxData[7] << 8);
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800129e:	79db      	ldrb	r3, [r3, #7]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	837b      	strh	r3, [r7, #26]

	 rpm = rpm_in;
 80012aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ac:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80012ae:	6013      	str	r3, [r2, #0]
	 map = map_in;
 80012b0:	8b7b      	ldrh	r3, [r7, #26]
 80012b2:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80012b4:	6013      	str	r3, [r2, #0]
	 iat = iat_in;
 80012b6:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	6013      	str	r3, [r2, #0]
	 tps = tps_in;
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f240 6202 	movw	r2, #1538	; 0x602
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d130      	bne.n	8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d12c      	bne.n	8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d128      	bne.n	8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
  {

	 uint16_t vehicle_spd_in = (RxData[1] << 0) | (RxData[2] << 8);
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80012e6:	789b      	ldrb	r3, [r3, #2]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	833b      	strh	r3, [r7, #24]
	 uint8_t oil_tmp_in = RxData[3];
 80012f2:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80012f4:	78db      	ldrb	r3, [r3, #3]
 80012f6:	75fb      	strb	r3, [r7, #23]
	 uint8_t oil_press_in = RxData[4];
 80012f8:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	75bb      	strb	r3, [r7, #22]
	 uint8_t fuel_press_in = RxData[5];
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001300:	795b      	ldrb	r3, [r3, #5]
 8001302:	757b      	strb	r3, [r7, #21]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001306:	799b      	ldrb	r3, [r3, #6]
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800130c:	79db      	ldrb	r3, [r3, #7]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	827b      	strh	r3, [r7, #18]

	 vehicle_spd = vehicle_spd_in;
 8001318:	8b3b      	ldrh	r3, [r7, #24]
 800131a:	4a39      	ldr	r2, [pc, #228]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 800131c:	6013      	str	r3, [r2, #0]
	 oil_tmp = oil_tmp_in;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	4a38      	ldr	r2, [pc, #224]	; (8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8001322:	6013      	str	r3, [r2, #0]
	 oil_press = oil_press_in;
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	4a38      	ldr	r2, [pc, #224]	; (8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001328:	6013      	str	r3, [r2, #0]
	 clt = clt_in;
 800132a:	8a7b      	ldrh	r3, [r7, #18]
 800132c:	4a37      	ldr	r2, [pc, #220]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800132e:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f240 6203 	movw	r2, #1539	; 0x603
 8001338:	4293      	cmp	r3, r2
 800133a:	d118      	bne.n	800136e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d114      	bne.n	800136e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d110      	bne.n	800136e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
  {
	 uint8_t lambda_in = RxData[2];
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800134e:	789b      	ldrb	r3, [r3, #2]
 8001350:	747b      	strb	r3, [r7, #17]

	 uint8_t egt_1_in = RxData[4];
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001354:	791b      	ldrb	r3, [r3, #4]
 8001356:	743b      	strb	r3, [r7, #16]

	 lambda = lambda_in;
 8001358:	7c7b      	ldrb	r3, [r7, #17]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
	 egt = egt_1_in;
 8001368:	7c3b      	ldrb	r3, [r7, #16]
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800136c:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f240 6204 	movw	r2, #1540	; 0x604
 8001376:	4293      	cmp	r3, r2
 8001378:	d114      	bne.n	80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d110      	bne.n	80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d10c      	bne.n	80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001392:	78db      	ldrb	r3, [r3, #3]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	81fb      	strh	r3, [r7, #14]
	 batt_v = batt_in;
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80013a2:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013ac:	d116      	bne.n	80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d112      	bne.n	80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d10e      	bne.n	80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>
    {
  	 uint16_t lambda_targ_in = RxData[7];
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80013c0:	79db      	ldrb	r3, [r3, #7]
 80013c2:	81bb      	strh	r3, [r7, #12]
  	 lambda_targ = lambda_targ_in / 100.0f;
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ce:	eddf 6a13 	vldr	s13, [pc, #76]	; 800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
 80013d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80013d8:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80013dc:	bf00      	nop
 80013de:	372c      	adds	r7, #44	; 0x2c
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	2000c52c 	.word	0x2000c52c
 80013e8:	2000c610 	.word	0x2000c610
 80013ec:	3fe00000 	.word	0x3fe00000
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000008 	.word	0x20000008
 80013f8:	2000038c 	.word	0x2000038c
 80013fc:	20000394 	.word	0x20000394
 8001400:	20000380 	.word	0x20000380
 8001404:	20000384 	.word	0x20000384
 8001408:	20000388 	.word	0x20000388
 800140c:	2000000c 	.word	0x2000000c
 8001410:	20000010 	.word	0x20000010
 8001414:	20000390 	.word	0x20000390
 8001418:	20000398 	.word	0x20000398
 800141c:	42c80000 	.word	0x42c80000
 8001420:	20000014 	.word	0x20000014

08001424 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <MX_CRC_Init+0x3c>)
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <MX_CRC_Init+0x40>)
 800142c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_CRC_Init+0x3c>)
 8001430:	2200      	movs	r2, #0
 8001432:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <MX_CRC_Init+0x3c>)
 8001436:	2200      	movs	r2, #0
 8001438:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_CRC_Init+0x3c>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <MX_CRC_Init+0x3c>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_CRC_Init+0x3c>)
 8001448:	2201      	movs	r2, #1
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_CRC_Init+0x3c>)
 800144e:	f003 fb41 	bl	8004ad4 <HAL_CRC_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001458:	f001 f8dc 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000c124 	.word	0x2000c124
 8001464:	40023000 	.word	0x40023000

08001468 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_DCMI_Init+0x60>)
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <MX_DCMI_Init+0x64>)
 8001470:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_DCMI_Init+0x60>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_DCMI_Init+0x60>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_DCMI_Init+0x60>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_DCMI_Init+0x60>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_DCMI_Init+0x60>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_DCMI_Init+0x60>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_DCMI_Init+0x60>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_DCMI_Init+0x60>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_DCMI_Init+0x60>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_DCMI_Init+0x60>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_DCMI_Init+0x60>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_DCMI_Init+0x60>)
 80014b6:	f003 fbf7 	bl	8004ca8 <HAL_DCMI_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80014c0:	f001 f8a8 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000c33c 	.word	0x2000c33c
 80014cc:	50050000 	.word	0x50050000

080014d0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_DMA2D_Init+0x5c>)
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <MX_DMA2D_Init+0x60>)
 80014d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_DMA2D_Init+0x5c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_DMA2D_Init+0x5c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_DMA2D_Init+0x5c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_DMA2D_Init+0x5c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_DMA2D_Init+0x5c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_DMA2D_Init+0x5c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_DMA2D_Init+0x5c>)
 8001500:	2200      	movs	r2, #0
 8001502:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <MX_DMA2D_Init+0x5c>)
 8001506:	f003 fce3 	bl	8004ed0 <HAL_DMA2D_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001510:	f001 f880 	bl	8002614 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001514:	2101      	movs	r1, #1
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_DMA2D_Init+0x5c>)
 8001518:	f003 ffa4 	bl	8005464 <HAL_DMA2D_ConfigLayer>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001522:	f001 f877 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000c4ec 	.word	0x2000c4ec
 8001530:	4002b000 	.word	0x4002b000

08001534 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2234      	movs	r2, #52	; 0x34
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f023 f8de 	bl	8024702 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001548:	4a3a      	ldr	r2, [pc, #232]	; (8001634 <MX_LTDC_Init+0x100>)
 800154a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800154c:	4b38      	ldr	r3, [pc, #224]	; (8001630 <MX_LTDC_Init+0xfc>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <MX_LTDC_Init+0xfc>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800155e:	4b34      	ldr	r3, [pc, #208]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001566:	2228      	movs	r2, #40	; 0x28
 8001568:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <MX_LTDC_Init+0xfc>)
 800156c:	2209      	movs	r2, #9
 800156e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001572:	2235      	movs	r2, #53	; 0x35
 8001574:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001578:	220b      	movs	r2, #11
 800157a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_LTDC_Init+0xfc>)
 800157e:	f240 2215 	movw	r2, #533	; 0x215
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001586:	f240 121b 	movw	r2, #283	; 0x11b
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <MX_LTDC_Init+0xfc>)
 800158e:	f240 2235 	movw	r2, #565	; 0x235
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_LTDC_Init+0xfc>)
 8001596:	f240 121d 	movw	r2, #285	; 0x11d
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <MX_LTDC_Init+0xfc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_LTDC_Init+0xfc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <MX_LTDC_Init+0xfc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015b4:	481e      	ldr	r0, [pc, #120]	; (8001630 <MX_LTDC_Init+0xfc>)
 80015b6:	f004 fa5f 	bl	8005a78 <HAL_LTDC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015c0:	f001 f828 	bl	8002614 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80015c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80015d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015dc:	23ff      	movs	r3, #255	; 0xff
 80015de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015ea:	2305      	movs	r3, #5
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80015ee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80015f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80015fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_LTDC_Init+0xfc>)
 800161a:	f004 fbb5 	bl	8005d88 <HAL_LTDC_ConfigLayer>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001624:	f000 fff6 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3738      	adds	r7, #56	; 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000c24c 	.word	0x2000c24c
 8001634:	40016800 	.word	0x40016800

08001638 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_QUADSPI_Init+0x50>)
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <MX_QUADSPI_Init+0x54>)
 8001640:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_QUADSPI_Init+0x50>)
 8001644:	22ff      	movs	r2, #255	; 0xff
 8001646:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_QUADSPI_Init+0x50>)
 800164a:	2201      	movs	r2, #1
 800164c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_QUADSPI_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_QUADSPI_Init+0x50>)
 8001656:	2201      	movs	r2, #1
 8001658:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_QUADSPI_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_QUADSPI_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_QUADSPI_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_QUADSPI_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_QUADSPI_Init+0x50>)
 8001674:	f004 fdf8 	bl	8006268 <HAL_QSPI_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800167e:	f000 ffc9 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000c62c 	.word	0x2000c62c
 800168c:	a0001000 	.word	0xa0001000

08001690 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b092      	sub	sp, #72	; 0x48
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80016ac:	463b      	mov	r3, r7
 80016ae:	222c      	movs	r2, #44	; 0x2c
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f023 f825 	bl	8024702 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <MX_RTC_Init+0x148>)
 80016ba:	4a48      	ldr	r2, [pc, #288]	; (80017dc <MX_RTC_Init+0x14c>)
 80016bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <MX_RTC_Init+0x148>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016c4:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <MX_RTC_Init+0x148>)
 80016c6:	227f      	movs	r2, #127	; 0x7f
 80016c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016ca:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <MX_RTC_Init+0x148>)
 80016cc:	22ff      	movs	r2, #255	; 0xff
 80016ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016d0:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <MX_RTC_Init+0x148>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016d6:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <MX_RTC_Init+0x148>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016dc:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <MX_RTC_Init+0x148>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016e2:	483d      	ldr	r0, [pc, #244]	; (80017d8 <MX_RTC_Init+0x148>)
 80016e4:	f006 f84c 	bl	8007780 <HAL_RTC_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80016ee:	f000 ff91 	bl	8002614 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800170c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	4830      	ldr	r0, [pc, #192]	; (80017d8 <MX_RTC_Init+0x148>)
 8001716:	f006 f8af 	bl	8007878 <HAL_RTC_SetTime>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001720:	f000 ff78 	bl	8002614 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001724:	2301      	movs	r3, #1
 8001726:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800173c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001740:	2201      	movs	r2, #1
 8001742:	4619      	mov	r1, r3
 8001744:	4824      	ldr	r0, [pc, #144]	; (80017d8 <MX_RTC_Init+0x148>)
 8001746:	f006 f955 	bl	80079f4 <HAL_RTC_SetDate>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001750:	f000 ff60 	bl	8002614 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001754:	2300      	movs	r3, #0
 8001756:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001758:	2300      	movs	r3, #0
 800175a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800175c:	2300      	movs	r3, #0
 800175e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001778:	2301      	movs	r3, #1
 800177a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	2201      	movs	r2, #1
 8001788:	4619      	mov	r1, r3
 800178a:	4813      	ldr	r0, [pc, #76]	; (80017d8 <MX_RTC_Init+0x148>)
 800178c:	f006 f9da 	bl	8007b44 <HAL_RTC_SetAlarm>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001796:	f000 ff3d 	bl	8002614 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 80017a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	2201      	movs	r2, #1
 80017aa:	4619      	mov	r1, r3
 80017ac:	480a      	ldr	r0, [pc, #40]	; (80017d8 <MX_RTC_Init+0x148>)
 80017ae:	f006 f9c9 	bl	8007b44 <HAL_RTC_SetAlarm>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80017b8:	f000 ff2c 	bl	8002614 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80017bc:	2202      	movs	r2, #2
 80017be:	2100      	movs	r1, #0
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_RTC_Init+0x148>)
 80017c2:	f006 fb49 	bl	8007e58 <HAL_RTCEx_SetTimeStamp>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 80017cc:	f000 ff22 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3748      	adds	r7, #72	; 0x48
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000c40c 	.word	0x2000c40c
 80017dc:	40002800 	.word	0x40002800

080017e0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <MX_SAI2_Init+0x13c>)
 80017e6:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <MX_SAI2_Init+0x140>)
 80017e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80017ea:	4b4c      	ldr	r3, [pc, #304]	; (800191c <MX_SAI2_Init+0x13c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80017f0:	4b4a      	ldr	r3, [pc, #296]	; (800191c <MX_SAI2_Init+0x13c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <MX_SAI2_Init+0x13c>)
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <MX_SAI2_Init+0x13c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <MX_SAI2_Init+0x13c>)
 8001804:	2200      	movs	r2, #0
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <MX_SAI2_Init+0x13c>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <MX_SAI2_Init+0x13c>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <MX_SAI2_Init+0x13c>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800181a:	4b40      	ldr	r3, [pc, #256]	; (800191c <MX_SAI2_Init+0x13c>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <MX_SAI2_Init+0x13c>)
 8001822:	4a40      	ldr	r2, [pc, #256]	; (8001924 <MX_SAI2_Init+0x144>)
 8001824:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <MX_SAI2_Init+0x13c>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <MX_SAI2_Init+0x13c>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001832:	4b3a      	ldr	r3, [pc, #232]	; (800191c <MX_SAI2_Init+0x13c>)
 8001834:	2200      	movs	r2, #0
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <MX_SAI2_Init+0x13c>)
 800183a:	2200      	movs	r2, #0
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <MX_SAI2_Init+0x13c>)
 8001840:	2208      	movs	r2, #8
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <MX_SAI2_Init+0x13c>)
 8001846:	2201      	movs	r2, #1
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <MX_SAI2_Init+0x13c>)
 800184c:	2200      	movs	r2, #0
 800184e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <MX_SAI2_Init+0x13c>)
 8001852:	2200      	movs	r2, #0
 8001854:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <MX_SAI2_Init+0x13c>)
 8001858:	2200      	movs	r2, #0
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <MX_SAI2_Init+0x13c>)
 800185e:	2200      	movs	r2, #0
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <MX_SAI2_Init+0x13c>)
 8001864:	2200      	movs	r2, #0
 8001866:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <MX_SAI2_Init+0x13c>)
 800186a:	2201      	movs	r2, #1
 800186c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <MX_SAI2_Init+0x13c>)
 8001870:	2200      	movs	r2, #0
 8001872:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001874:	4829      	ldr	r0, [pc, #164]	; (800191c <MX_SAI2_Init+0x13c>)
 8001876:	f006 fb45 	bl	8007f04 <HAL_SAI_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001880:	f000 fec8 	bl	8002614 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <MX_SAI2_Init+0x148>)
 8001886:	4a29      	ldr	r2, [pc, #164]	; (800192c <MX_SAI2_Init+0x14c>)
 8001888:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <MX_SAI2_Init+0x148>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_SAI2_Init+0x148>)
 8001892:	2203      	movs	r2, #3
 8001894:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <MX_SAI2_Init+0x148>)
 8001898:	2240      	movs	r2, #64	; 0x40
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <MX_SAI2_Init+0x148>)
 800189e:	2200      	movs	r2, #0
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_SAI2_Init+0x148>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_SAI2_Init+0x148>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <MX_SAI2_Init+0x148>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_SAI2_Init+0x148>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <MX_SAI2_Init+0x148>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_SAI2_Init+0x148>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <MX_SAI2_Init+0x148>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_SAI2_Init+0x148>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MX_SAI2_Init+0x148>)
 80018d4:	2208      	movs	r2, #8
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_SAI2_Init+0x148>)
 80018da:	2201      	movs	r2, #1
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_SAI2_Init+0x148>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_SAI2_Init+0x148>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_SAI2_Init+0x148>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <MX_SAI2_Init+0x148>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_SAI2_Init+0x148>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <MX_SAI2_Init+0x148>)
 80018fe:	2201      	movs	r2, #1
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_SAI2_Init+0x148>)
 8001904:	2200      	movs	r2, #0
 8001906:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_SAI2_Init+0x148>)
 800190a:	f006 fafb 	bl	8007f04 <HAL_SAI_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001914:	f000 fe7e 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000c0a0 	.word	0x2000c0a0
 8001920:	40015c04 	.word	0x40015c04
 8001924:	0002ee00 	.word	0x0002ee00
 8001928:	2000bf24 	.word	0x2000bf24
 800192c:	40015c24 	.word	0x40015c24

08001930 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_SDMMC1_SD_Init+0x38>)
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <MX_SDMMC1_SD_Init+0x3c>)
 8001938:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_SDMMC1_SD_Init+0x38>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_SDMMC1_SD_Init+0x38>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_SDMMC1_SD_Init+0x38>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_SDMMC1_SD_Init+0x38>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <MX_SDMMC1_SD_Init+0x38>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <MX_SDMMC1_SD_Init+0x38>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	2000c148 	.word	0x2000c148
 800196c:	40012c00 	.word	0x40012c00

08001970 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 8001976:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800197a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 800197e:	2200      	movs	r2, #0
 8001980:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <MX_SPDIFRX_Init+0x5c>)
 80019ba:	f007 fd37 	bl	800942c <HAL_SPDIFRX_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80019c4:	f000 fe26 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000c054 	.word	0x2000c054

080019d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <MX_SPI2_Init+0x78>)
 80019d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a30:	f007 fd58 	bl	80094e4 <HAL_SPI_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a3a:	f000 fdeb 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000bfb0 	.word	0x2000bfb0
 8001a48:	40003800 	.word	0x40003800

08001a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b09a      	sub	sp, #104	; 0x68
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
 8001a7c:	615a      	str	r2, [r3, #20]
 8001a7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	222c      	movs	r2, #44	; 0x2c
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f022 fe3b 	bl	8024702 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a8c:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001a8e:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <MX_TIM1_Init+0x154>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ab6:	4839      	ldr	r0, [pc, #228]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001ab8:	f007 fda6 	bl	8009608 <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ac2:	f000 fda7 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001acc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4832      	ldr	r0, [pc, #200]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001ad4:	f008 f850 	bl	8009b78 <HAL_TIM_ConfigClockSource>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ade:	f000 fd99 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ae2:	482e      	ldr	r0, [pc, #184]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001ae4:	f007 fde6 	bl	80096b4 <HAL_TIM_PWM_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001aee:	f000 fd91 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001afe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4825      	ldr	r0, [pc, #148]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001b06:	f008 fcb1 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b10:	f000 fd80 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b14:	2360      	movs	r3, #96	; 0x60
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b34:	2200      	movs	r2, #0
 8001b36:	4619      	mov	r1, r3
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001b3a:	f007 ff05 	bl	8009948 <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001b44:	f000 fd66 	bl	8002614 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001b7e:	f008 fd03 	bl	800a588 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b88:	f000 fd44 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <MX_TIM1_Init+0x150>)
 8001b8e:	f001 fa3b 	bl	8003008 <HAL_TIM_MspPostInit>

}
 8001b92:	bf00      	nop
 8001b94:	3768      	adds	r7, #104	; 0x68
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000c42c 	.word	0x2000c42c
 8001ba0:	40010000 	.word	0x40010000

08001ba4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	; 0x38
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	615a      	str	r2, [r3, #20]
 8001bd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bfc:	4823      	ldr	r0, [pc, #140]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001bfe:	f007 fd03 	bl	8009608 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c08:	f000 fd04 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c16:	4619      	mov	r1, r3
 8001c18:	481c      	ldr	r0, [pc, #112]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001c1a:	f007 ffad 	bl	8009b78 <HAL_TIM_ConfigClockSource>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c24:	f000 fcf6 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001c2a:	f007 fd43 	bl	80096b4 <HAL_TIM_PWM_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c34:	f000 fcee 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4811      	ldr	r0, [pc, #68]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001c48:	f008 fc10 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c52:	f000 fcdf 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c56:	2360      	movs	r3, #96	; 0x60
 8001c58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001c6e:	f007 fe6b 	bl	8009948 <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c78:	f000 fccc 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <MX_TIM2_Init+0xe8>)
 8001c7e:	f001 f9c3 	bl	8003008 <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3738      	adds	r7, #56	; 0x38
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000c534 	.word	0x2000c534

08001c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	; 0x38
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001cc4:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <MX_TIM3_Init+0xe8>)
 8001cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ce6:	4823      	ldr	r0, [pc, #140]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001ce8:	f007 fc8e 	bl	8009608 <HAL_TIM_Base_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001cf2:	f000 fc8f 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d00:	4619      	mov	r1, r3
 8001d02:	481c      	ldr	r0, [pc, #112]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001d04:	f007 ff38 	bl	8009b78 <HAL_TIM_ConfigClockSource>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d0e:	f000 fc81 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d12:	4818      	ldr	r0, [pc, #96]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001d14:	f007 fcce 	bl	80096b4 <HAL_TIM_PWM_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d1e:	f000 fc79 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4810      	ldr	r0, [pc, #64]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001d32:	f008 fb9b 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d3c:	f000 fc6a 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d40:	2360      	movs	r3, #96	; 0x60
 8001d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001d58:	f007 fdf6 	bl	8009948 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d62:	f000 fc57 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <MX_TIM3_Init+0xe4>)
 8001d68:	f001 f94e 	bl	8003008 <HAL_TIM_MspPostInit>

}
 8001d6c:	bf00      	nop
 8001d6e:	3738      	adds	r7, #56	; 0x38
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000c20c 	.word	0x2000c20c
 8001d78:	40000400 	.word	0x40000400

08001d7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <MX_TIM5_Init+0xe8>)
 8001db2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dd2:	4823      	ldr	r0, [pc, #140]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001dd4:	f007 fc18 	bl	8009608 <HAL_TIM_Base_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001dde:	f000 fc19 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dec:	4619      	mov	r1, r3
 8001dee:	481c      	ldr	r0, [pc, #112]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001df0:	f007 fec2 	bl	8009b78 <HAL_TIM_ConfigClockSource>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001dfa:	f000 fc0b 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001dfe:	4818      	ldr	r0, [pc, #96]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001e00:	f007 fc58 	bl	80096b4 <HAL_TIM_PWM_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e0a:	f000 fc03 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4810      	ldr	r0, [pc, #64]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001e1e:	f008 fb25 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e28:	f000 fbf4 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2c:	2360      	movs	r3, #96	; 0x60
 8001e2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	220c      	movs	r2, #12
 8001e40:	4619      	mov	r1, r3
 8001e42:	4807      	ldr	r0, [pc, #28]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001e44:	f007 fd80 	bl	8009948 <HAL_TIM_PWM_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001e4e:	f000 fbe1 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <MX_TIM5_Init+0xe4>)
 8001e54:	f001 f8d8 	bl	8003008 <HAL_TIM_MspPostInit>

}
 8001e58:	bf00      	nop
 8001e5a:	3738      	adds	r7, #56	; 0x38
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000c1cc 	.word	0x2000c1cc
 8001e64:	40000c00 	.word	0x40000c00

08001e68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <MX_TIM8_Init+0xa0>)
 8001e8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001eb0:	4814      	ldr	r0, [pc, #80]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001eb2:	f007 fba9 	bl	8009608 <HAL_TIM_Base_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001ebc:	f000 fbaa 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001ece:	f007 fe53 	bl	8009b78 <HAL_TIM_ConfigClockSource>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001ed8:	f000 fb9c 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_TIM8_Init+0x9c>)
 8001eee:	f008 fabd 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001ef8:	f000 fb8c 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000c014 	.word	0x2000c014
 8001f08:	40010400 	.word	0x40010400

08001f0c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f26:	4a1a      	ldr	r2, [pc, #104]	; (8001f90 <MX_TIM12_Init+0x84>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f48:	4810      	ldr	r0, [pc, #64]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f4a:	f007 fbb3 	bl	80096b4 <HAL_TIM_PWM_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001f54:	f000 fb5e 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f58:	2360      	movs	r3, #96	; 0x60
 8001f5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4807      	ldr	r0, [pc, #28]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f70:	f007 fcea 	bl	8009948 <HAL_TIM_PWM_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001f7a:	f000 fb4b 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <MX_TIM12_Init+0x80>)
 8001f80:	f001 f842 	bl	8003008 <HAL_TIM_MspPostInit>

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000c59c 	.word	0x2000c59c
 8001f90:	40001800 	.word	0x40001800

08001f94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <MX_USART1_UART_Init+0x5c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_USART1_UART_Init+0x58>)
 8001fd8:	f008 fb72 	bl	800a6c0 <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fe2:	f000 fb17 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000c38c 	.word	0x2000c38c
 8001ff0:	40011000 	.word	0x40011000

08001ff4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_USART6_UART_Init+0x58>)
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <MX_USART6_UART_Init+0x5c>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_USART6_UART_Init+0x58>)
 8002000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002004:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART6_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_USART6_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART6_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART6_UART_Init+0x58>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART6_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART6_UART_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART6_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART6_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART6_UART_Init+0x58>)
 8002038:	f008 fb42 	bl	800a6c0 <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002042:	f000 fae7 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000c46c 	.word	0x2000c46c
 8002050:	40011400 	.word	0x40011400

08002054 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	615a      	str	r2, [r3, #20]
 800206a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <MX_FMC_Init+0x14c>)
 800206e:	4a4d      	ldr	r2, [pc, #308]	; (80021a4 <MX_FMC_Init+0x150>)
 8002070:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002072:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002078:	4b49      	ldr	r3, [pc, #292]	; (80021a0 <MX_FMC_Init+0x14c>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800207e:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002080:	2204      	movs	r2, #4
 8002082:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002084:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002086:	2210      	movs	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <MX_FMC_Init+0x14c>)
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002090:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002092:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002096:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002098:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <MX_FMC_Init+0x14c>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800209e:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <MX_FMC_Init+0x14c>)
 80020a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <MX_FMC_Init+0x14c>)
 80020a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80020ae:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <MX_FMC_Init+0x14c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80020b8:	2307      	movs	r3, #7
 80020ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80020bc:	2304      	movs	r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80020c0:	2307      	movs	r3, #7
 80020c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80020c4:	2303      	movs	r3, #3
 80020c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4832      	ldr	r0, [pc, #200]	; (80021a0 <MX_FMC_Init+0x14c>)
 80020d6:	f007 f929 	bl	800932c <HAL_SDRAM_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80020e0:	f000 fa98 	bl	8002614 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <MX_FMC_Init+0x154>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <MX_FMC_Init+0x154>)
 80020f0:	2210      	movs	r2, #16
 80020f2:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <MX_FMC_Init+0x154>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80020fa:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <MX_FMC_Init+0x154>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002104:	4928      	ldr	r1, [pc, #160]	; (80021a8 <MX_FMC_Init+0x154>)
 8002106:	4826      	ldr	r0, [pc, #152]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002108:	f007 f944 	bl	8009394 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800210c:	2001      	movs	r0, #1
 800210e:	f001 fba3 	bl	8003858 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002112:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <MX_FMC_Init+0x154>)
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <MX_FMC_Init+0x154>)
 800211a:	2210      	movs	r2, #16
 800211c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <MX_FMC_Init+0x154>)
 8002120:	2201      	movs	r2, #1
 8002122:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <MX_FMC_Init+0x154>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800212a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212e:	491e      	ldr	r1, [pc, #120]	; (80021a8 <MX_FMC_Init+0x154>)
 8002130:	481b      	ldr	r0, [pc, #108]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002132:	f007 f92f 	bl	8009394 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_FMC_Init+0x154>)
 8002138:	2203      	movs	r2, #3
 800213a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_FMC_Init+0x154>)
 800213e:	2210      	movs	r2, #16
 8002140:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_FMC_Init+0x154>)
 8002144:	2208      	movs	r2, #8
 8002146:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_FMC_Init+0x154>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800214e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002152:	4915      	ldr	r1, [pc, #84]	; (80021a8 <MX_FMC_Init+0x154>)
 8002154:	4812      	ldr	r0, [pc, #72]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002156:	f007 f91d 	bl	8009394 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800215a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800215e:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_FMC_Init+0x154>)
 8002162:	2204      	movs	r2, #4
 8002164:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_FMC_Init+0x154>)
 8002168:	2210      	movs	r2, #16
 800216a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_FMC_Init+0x154>)
 800216e:	2201      	movs	r2, #1
 8002170:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <MX_FMC_Init+0x154>)
 8002176:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217c:	490a      	ldr	r1, [pc, #40]	; (80021a8 <MX_FMC_Init+0x154>)
 800217e:	4808      	ldr	r0, [pc, #32]	; (80021a0 <MX_FMC_Init+0x14c>)
 8002180:	f007 f908 	bl	8009394 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002184:	f240 712b 	movw	r1, #1835	; 0x72b
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_FMC_Init+0x14c>)
 800218a:	f007 f92e 	bl	80093ea <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800218e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002192:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002196:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000c5dc 	.word	0x2000c5dc
 80021a4:	a0000140 	.word	0xa0000140
 80021a8:	20000370 	.word	0x20000370

080021ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b090      	sub	sp, #64	; 0x40
 80021b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021c2:	4baf      	ldr	r3, [pc, #700]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4aae      	ldr	r2, [pc, #696]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4bac      	ldr	r3, [pc, #688]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021da:	4ba9      	ldr	r3, [pc, #676]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4aa8      	ldr	r2, [pc, #672]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4ba6      	ldr	r3, [pc, #664]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4ba3      	ldr	r3, [pc, #652]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4aa2      	ldr	r2, [pc, #648]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4ba0      	ldr	r3, [pc, #640]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220a:	4b9d      	ldr	r3, [pc, #628]	; (8002480 <MX_GPIO_Init+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a9c      	ldr	r2, [pc, #624]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b9a      	ldr	r3, [pc, #616]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	4b97      	ldr	r3, [pc, #604]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a96      	ldr	r2, [pc, #600]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b94      	ldr	r3, [pc, #592]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4b91      	ldr	r3, [pc, #580]	; (8002480 <MX_GPIO_Init+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a90      	ldr	r2, [pc, #576]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002252:	4b8b      	ldr	r3, [pc, #556]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a8a      	ldr	r2, [pc, #552]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b88      	ldr	r3, [pc, #544]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800226a:	4b85      	ldr	r3, [pc, #532]	; (8002480 <MX_GPIO_Init+0x2d4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a84      	ldr	r2, [pc, #528]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b82      	ldr	r3, [pc, #520]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002282:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a7e      	ldr	r2, [pc, #504]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b7c      	ldr	r3, [pc, #496]	; (8002480 <MX_GPIO_Init+0x2d4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <MX_GPIO_Init+0x2d4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a78      	ldr	r2, [pc, #480]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b76      	ldr	r3, [pc, #472]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b2:	4b73      	ldr	r3, [pc, #460]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a72      	ldr	r2, [pc, #456]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b70      	ldr	r3, [pc, #448]	; (8002480 <MX_GPIO_Init+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2120      	movs	r1, #32
 80022ce:	486d      	ldr	r0, [pc, #436]	; (8002484 <MX_GPIO_Init+0x2d8>)
 80022d0:	f003 fbb8 	bl	8005a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	210c      	movs	r1, #12
 80022d8:	486b      	ldr	r0, [pc, #428]	; (8002488 <MX_GPIO_Init+0x2dc>)
 80022da:	f003 fbb3 	bl	8005a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
 80022e0:	2108      	movs	r1, #8
 80022e2:	486a      	ldr	r0, [pc, #424]	; (800248c <MX_GPIO_Init+0x2e0>)
 80022e4:	f003 fbae 	bl	8005a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ee:	4866      	ldr	r0, [pc, #408]	; (8002488 <MX_GPIO_Init+0x2dc>)
 80022f0:	f003 fba8 	bl	8005a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022fa:	4865      	ldr	r0, [pc, #404]	; (8002490 <MX_GPIO_Init+0x2e4>)
 80022fc:	f003 fba2 	bl	8005a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	21c8      	movs	r1, #200	; 0xc8
 8002304:	4863      	ldr	r0, [pc, #396]	; (8002494 <MX_GPIO_Init+0x2e8>)
 8002306:	f003 fb9d 	bl	8005a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800230a:	2308      	movs	r3, #8
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230e:	2300      	movs	r3, #0
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231a:	4619      	mov	r1, r3
 800231c:	485e      	ldr	r0, [pc, #376]	; (8002498 <MX_GPIO_Init+0x2ec>)
 800231e:	f003 f9cf 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002322:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002334:	230b      	movs	r3, #11
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233c:	4619      	mov	r1, r3
 800233e:	4855      	ldr	r0, [pc, #340]	; (8002494 <MX_GPIO_Init+0x2e8>)
 8002340:	f003 f9be 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002344:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002356:	230a      	movs	r3, #10
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	484e      	ldr	r0, [pc, #312]	; (800249c <MX_GPIO_Init+0x2f0>)
 8002362:	f003 f9ad 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236c:	2300      	movs	r3, #0
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	4849      	ldr	r0, [pc, #292]	; (80024a0 <MX_GPIO_Init+0x2f4>)
 800237c:	f003 f9a0 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002384:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <MX_GPIO_Init+0x2f8>)
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002390:	4619      	mov	r1, r3
 8002392:	483c      	ldr	r0, [pc, #240]	; (8002484 <MX_GPIO_Init+0x2d8>)
 8002394:	f003 f994 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002398:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023aa:	230a      	movs	r3, #10
 80023ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b2:	4619      	mov	r1, r3
 80023b4:	483c      	ldr	r0, [pc, #240]	; (80024a8 <MX_GPIO_Init+0x2fc>)
 80023b6:	f003 f983 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80023ba:	2320      	movs	r3, #32
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023be:	2301      	movs	r3, #1
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ce:	4619      	mov	r1, r3
 80023d0:	482c      	ldr	r0, [pc, #176]	; (8002484 <MX_GPIO_Init+0x2d8>)
 80023d2:	f003 f975 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80023d6:	f241 030c 	movw	r3, #4108	; 0x100c
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ec:	4619      	mov	r1, r3
 80023ee:	4826      	ldr	r0, [pc, #152]	; (8002488 <MX_GPIO_Init+0x2dc>)
 80023f0:	f003 f966 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80023f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002406:	4619      	mov	r1, r3
 8002408:	4828      	ldr	r0, [pc, #160]	; (80024ac <MX_GPIO_Init+0x300>)
 800240a:	f003 f959 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800240e:	2308      	movs	r3, #8
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	4819      	ldr	r0, [pc, #100]	; (800248c <MX_GPIO_Init+0x2e0>)
 8002426:	f003 f94b 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800242a:	2310      	movs	r3, #16
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2300      	movs	r3, #0
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	4811      	ldr	r0, [pc, #68]	; (8002484 <MX_GPIO_Init+0x2d8>)
 800243e:	f003 f93f 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002442:	f248 0304 	movw	r3, #32772	; 0x8004
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002454:	4619      	mov	r1, r3
 8002456:	480e      	ldr	r0, [pc, #56]	; (8002490 <MX_GPIO_Init+0x2e4>)
 8002458:	f003 f932 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800245c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002472:	4619      	mov	r1, r3
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <MX_GPIO_Init+0x2e4>)
 8002476:	f003 f923 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800247a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247e:	e017      	b.n	80024b0 <MX_GPIO_Init+0x304>
 8002480:	40023800 	.word	0x40023800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40022000 	.word	0x40022000
 800248c:	40022800 	.word	0x40022800
 8002490:	40021c00 	.word	0x40021c00
 8002494:	40021800 	.word	0x40021800
 8002498:	40021000 	.word	0x40021000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40022400 	.word	0x40022400
 80024a4:	10120000 	.word	0x10120000
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020800 	.word	0x40020800
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024b2:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <MX_GPIO_Init+0x418>)
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	4841      	ldr	r0, [pc, #260]	; (80025c8 <MX_GPIO_Init+0x41c>)
 80024c2:	f003 f8fd 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80024c6:	2310      	movs	r3, #16
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024d6:	230a      	movs	r3, #10
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	483a      	ldr	r0, [pc, #232]	; (80025cc <MX_GPIO_Init+0x420>)
 80024e2:	f003 f8ed 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80024e6:	23c8      	movs	r3, #200	; 0xc8
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fa:	4619      	mov	r1, r3
 80024fc:	4834      	ldr	r0, [pc, #208]	; (80025d0 <MX_GPIO_Init+0x424>)
 80024fe:	f003 f8df 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002502:	2305      	movs	r3, #5
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002512:	230a      	movs	r3, #10
 8002514:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251a:	4619      	mov	r1, r3
 800251c:	482d      	ldr	r0, [pc, #180]	; (80025d4 <MX_GPIO_Init+0x428>)
 800251e:	f003 f8cf 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002522:	2332      	movs	r3, #50	; 0x32
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002532:	230b      	movs	r3, #11
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253a:	4619      	mov	r1, r3
 800253c:	4825      	ldr	r0, [pc, #148]	; (80025d4 <MX_GPIO_Init+0x428>)
 800253e:	f003 f8bf 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002542:	2304      	movs	r3, #4
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002546:	2300      	movs	r3, #0
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800254e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002552:	4619      	mov	r1, r3
 8002554:	481e      	ldr	r0, [pc, #120]	; (80025d0 <MX_GPIO_Init+0x424>)
 8002556:	f003 f8b3 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800255a:	2386      	movs	r3, #134	; 0x86
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800256a:	230b      	movs	r3, #11
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002572:	4619      	mov	r1, r3
 8002574:	4818      	ldr	r0, [pc, #96]	; (80025d8 <MX_GPIO_Init+0x42c>)
 8002576:	f003 f8a3 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800257a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002580:	2312      	movs	r3, #18
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002584:	2301      	movs	r3, #1
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800258c:	2304      	movs	r3, #4
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002594:	4619      	mov	r1, r3
 8002596:	480d      	ldr	r0, [pc, #52]	; (80025cc <MX_GPIO_Init+0x420>)
 8002598:	f003 f892 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800259c:	2328      	movs	r3, #40	; 0x28
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025ac:	230a      	movs	r3, #10
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b4:	4619      	mov	r1, r3
 80025b6:	4808      	ldr	r0, [pc, #32]	; (80025d8 <MX_GPIO_Init+0x42c>)
 80025b8:	f003 f882 	bl	80056c0 <HAL_GPIO_Init>

}
 80025bc:	bf00      	nop
 80025be:	3740      	adds	r7, #64	; 0x40
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	10120000 	.word	0x10120000
 80025c8:	40022000 	.word	0x40022000
 80025cc:	40021c00 	.word	0x40021c00
 80025d0:	40021800 	.word	0x40021800
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020000 	.word	0x40020000

080025dc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 80025e4:	f00c fba4 	bl	800ed30 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f009 fe6d 	bl	800c2c8 <osDelay>
 80025ee:	e7fb      	b.n	80025e8 <StartDefaultTask+0xc>

080025f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002602:	f001 f909 	bl	8003818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40001000 	.word	0x40001000

08002614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <HAL_MspInit+0x4c>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_MspInit+0x4c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_MspInit+0x4c>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_MspInit+0x4c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	210f      	movs	r1, #15
 800265e:	f06f 0001 	mvn.w	r0, #1
 8002662:	f002 f9ff 	bl	8004a64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_ADC_MspInit+0xa4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d13c      	bne.n	8002710 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_ADC_MspInit+0xa8>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a20      	ldr	r2, [pc, #128]	; (800271c <HAL_ADC_MspInit+0xa8>)
 800269c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_ADC_MspInit+0xa8>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_ADC_MspInit+0xa8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_ADC_MspInit+0xa8>)
 80026b4:	f043 0320 	orr.w	r3, r3, #32
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_ADC_MspInit+0xa8>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_ADC_MspInit+0xa8>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <HAL_ADC_MspInit+0xa8>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_ADC_MspInit+0xa8>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80026de:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026e2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e4:	2303      	movs	r3, #3
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4619      	mov	r1, r3
 80026f2:	480b      	ldr	r0, [pc, #44]	; (8002720 <HAL_ADC_MspInit+0xac>)
 80026f4:	f002 ffe4 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80026f8:	2301      	movs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fc:	2303      	movs	r3, #3
 80026fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4806      	ldr	r0, [pc, #24]	; (8002724 <HAL_ADC_MspInit+0xb0>)
 800270c:	f002 ffd8 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40012200 	.word	0x40012200
 800271c:	40023800 	.word	0x40023800
 8002720:	40021400 	.word	0x40021400
 8002724:	40020000 	.word	0x40020000

08002728 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_CAN_MspInit+0x8c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d130      	bne.n	80027ac <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800274a:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_CAN_MspInit+0x90>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <HAL_CAN_MspInit+0x90>)
 8002750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_CAN_MspInit+0x90>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_CAN_MspInit+0x90>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <HAL_CAN_MspInit+0x90>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_CAN_MspInit+0x90>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800277a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800278c:	2309      	movs	r3, #9
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_CAN_MspInit+0x94>)
 8002798:	f002 ff92 	bl	80056c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2105      	movs	r1, #5
 80027a0:	2014      	movs	r0, #20
 80027a2:	f002 f95f 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80027a6:	2014      	movs	r0, #20
 80027a8:	f002 f978 	bl	8004a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40006400 	.word	0x40006400
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020400 	.word	0x40020400

080027c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_CRC_MspInit+0x38>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10b      	bne.n	80027ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_CRC_MspInit+0x3c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_CRC_MspInit+0x3c>)
 80027d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_CRC_MspInit+0x3c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023000 	.word	0x40023000
 80027fc:	40023800 	.word	0x40023800

08002800 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	; 0x38
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a50      	ldr	r2, [pc, #320]	; (8002960 <HAL_DCMI_MspInit+0x160>)
 800281e:	4293      	cmp	r3, r2
 8002820:	f040 809a 	bne.w	8002958 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002824:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	4a4e      	ldr	r2, [pc, #312]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6353      	str	r3, [r2, #52]	; 0x34
 8002830:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	623b      	str	r3, [r7, #32]
 800283a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800283c:	4b49      	ldr	r3, [pc, #292]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4a48      	ldr	r2, [pc, #288]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6313      	str	r3, [r2, #48]	; 0x30
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a42      	ldr	r2, [pc, #264]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b40      	ldr	r3, [pc, #256]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800286c:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4a3c      	ldr	r2, [pc, #240]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002876:	6313      	str	r3, [r2, #48]	; 0x30
 8002878:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002884:	4b37      	ldr	r3, [pc, #220]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4a36      	ldr	r2, [pc, #216]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800288a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288e:	6313      	str	r3, [r2, #48]	; 0x30
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4a30      	ldr	r2, [pc, #192]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6313      	str	r3, [r2, #48]	; 0x30
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_DCMI_MspInit+0x164>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80028b4:	2360      	movs	r3, #96	; 0x60
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028c4:	230d      	movs	r3, #13
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028cc:	4619      	mov	r1, r3
 80028ce:	4826      	ldr	r0, [pc, #152]	; (8002968 <HAL_DCMI_MspInit+0x168>)
 80028d0:	f002 fef6 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028d4:	2308      	movs	r3, #8
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028e4:	230d      	movs	r3, #13
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	4619      	mov	r1, r3
 80028ee:	481f      	ldr	r0, [pc, #124]	; (800296c <HAL_DCMI_MspInit+0x16c>)
 80028f0:	f002 fee6 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002906:	230d      	movs	r3, #13
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	4619      	mov	r1, r3
 8002910:	4817      	ldr	r0, [pc, #92]	; (8002970 <HAL_DCMI_MspInit+0x170>)
 8002912:	f002 fed5 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002916:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002928:	230d      	movs	r3, #13
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	4810      	ldr	r0, [pc, #64]	; (8002974 <HAL_DCMI_MspInit+0x174>)
 8002934:	f002 fec4 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002938:	2350      	movs	r3, #80	; 0x50
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002948:	230d      	movs	r3, #13
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4809      	ldr	r0, [pc, #36]	; (8002978 <HAL_DCMI_MspInit+0x178>)
 8002954:	f002 feb4 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	3738      	adds	r7, #56	; 0x38
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	50050000 	.word	0x50050000
 8002964:	40023800 	.word	0x40023800
 8002968:	40021000 	.word	0x40021000
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40021800 	.word	0x40021800
 8002974:	40021c00 	.word	0x40021c00
 8002978:	40020000 	.word	0x40020000

0800297c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_DMA2D_MspInit+0x44>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d113      	bne.n	80029b6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_DMA2D_MspInit+0x48>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_DMA2D_MspInit+0x48>)
 8002994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_DMA2D_MspInit+0x48>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2105      	movs	r1, #5
 80029aa:	205a      	movs	r0, #90	; 0x5a
 80029ac:	f002 f85a 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80029b0:	205a      	movs	r0, #90	; 0x5a
 80029b2:	f002 f873 	bl	8004a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	4002b000 	.word	0x4002b000
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_DMA2D_MspDeInit+0x2c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_DMA2D_MspDeInit+0x30>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_DMA2D_MspDeInit+0x30>)
 80029e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80029e6:	205a      	movs	r0, #90	; 0x5a
 80029e8:	f002 f866 	bl	8004ab8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	4002b000 	.word	0x4002b000
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a55      	ldr	r2, [pc, #340]	; (8002b70 <HAL_LTDC_MspInit+0x174>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 80a3 	bne.w	8002b66 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a20:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	4a53      	ldr	r2, [pc, #332]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2c:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a38:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a3e:	f043 0310 	orr.w	r3, r3, #16
 8002a42:	6313      	str	r3, [r2, #48]	; 0x30
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a50:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5c:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a68:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a41      	ldr	r2, [pc, #260]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a72:	6313      	str	r3, [r2, #48]	; 0x30
 8002a74:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a80:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a3b      	ldr	r2, [pc, #236]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	4a35      	ldr	r2, [pc, #212]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <HAL_LTDC_MspInit+0x178>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ac0:	230e      	movs	r3, #14
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	482b      	ldr	r0, [pc, #172]	; (8002b78 <HAL_LTDC_MspInit+0x17c>)
 8002acc:	f002 fdf8 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002ad0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ae2:	230e      	movs	r3, #14
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aea:	4619      	mov	r1, r3
 8002aec:	4823      	ldr	r0, [pc, #140]	; (8002b7c <HAL_LTDC_MspInit+0x180>)
 8002aee:	f002 fde7 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002af2:	23f7      	movs	r3, #247	; 0xf7
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b02:	230e      	movs	r3, #14
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	481c      	ldr	r0, [pc, #112]	; (8002b80 <HAL_LTDC_MspInit+0x184>)
 8002b0e:	f002 fdd7 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b24:	2309      	movs	r3, #9
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4815      	ldr	r0, [pc, #84]	; (8002b84 <HAL_LTDC_MspInit+0x188>)
 8002b30:	f002 fdc6 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002b34:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b46:	230e      	movs	r3, #14
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480d      	ldr	r0, [pc, #52]	; (8002b88 <HAL_LTDC_MspInit+0x18c>)
 8002b52:	f002 fdb5 	bl	80056c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2105      	movs	r1, #5
 8002b5a:	2058      	movs	r0, #88	; 0x58
 8002b5c:	f001 ff82 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b60:	2058      	movs	r0, #88	; 0x58
 8002b62:	f001 ff9b 	bl	8004a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3738      	adds	r7, #56	; 0x38
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40016800 	.word	0x40016800
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40022400 	.word	0x40022400
 8002b80:	40022800 	.word	0x40022800
 8002b84:	40021800 	.word	0x40021800
 8002b88:	40022000 	.word	0x40022000

08002b8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	; 0x30
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a3b      	ldr	r2, [pc, #236]	; (8002c98 <HAL_QSPI_MspInit+0x10c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d170      	bne.n	8002c90 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6393      	str	r3, [r2, #56]	; 0x38
 8002bba:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc6:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bcc:	f043 0310 	orr.w	r3, r3, #16
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b32      	ldr	r3, [pc, #200]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a2e      	ldr	r2, [pc, #184]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002bfc:	f043 0308 	orr.w	r3, r3, #8
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_QSPI_MspInit+0x110>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c1e:	2309      	movs	r3, #9
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002c22:	f107 031c 	add.w	r3, r7, #28
 8002c26:	4619      	mov	r1, r3
 8002c28:	481d      	ldr	r0, [pc, #116]	; (8002ca0 <HAL_QSPI_MspInit+0x114>)
 8002c2a:	f002 fd49 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002c2e:	2340      	movs	r3, #64	; 0x40
 8002c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c3e:	230a      	movs	r3, #10
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	4619      	mov	r1, r3
 8002c48:	4816      	ldr	r0, [pc, #88]	; (8002ca4 <HAL_QSPI_MspInit+0x118>)
 8002c4a:	f002 fd39 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c5e:	2309      	movs	r3, #9
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	4619      	mov	r1, r3
 8002c68:	480e      	ldr	r0, [pc, #56]	; (8002ca4 <HAL_QSPI_MspInit+0x118>)
 8002c6a:	f002 fd29 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002c6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c80:	2309      	movs	r3, #9
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c84:	f107 031c 	add.w	r3, r7, #28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <HAL_QSPI_MspInit+0x11c>)
 8002c8c:	f002 fd18 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002c90:	bf00      	nop
 8002c92:	3730      	adds	r7, #48	; 0x30
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	a0001000 	.word	0xa0001000
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020c00 	.word	0x40020c00

08002cac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <HAL_RTC_MspInit+0x2c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d105      	bne.n	8002cca <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_RTC_MspInit+0x30>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <HAL_RTC_MspInit+0x30>)
 8002cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40002800 	.word	0x40002800
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <HAL_SD_MspInit+0xb4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d144      	bne.n	8002d8c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d02:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_SD_MspInit+0xb8>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002d4a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002d4e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4619      	mov	r1, r3
 8002d66:	480d      	ldr	r0, [pc, #52]	; (8002d9c <HAL_SD_MspInit+0xbc>)
 8002d68:	f002 fcaa 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4619      	mov	r1, r3
 8002d86:	4806      	ldr	r0, [pc, #24]	; (8002da0 <HAL_SD_MspInit+0xc0>)
 8002d88:	f002 fc9a 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020c00 	.word	0x40020c00

08002da4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002dc4:	d127      	bne.n	8002e16 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_SPDIFRX_MspInit+0x7c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_SPDIFRX_MspInit+0x7c>)
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e06:	2308      	movs	r3, #8
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <HAL_SPDIFRX_MspInit+0x80>)
 8002e12:	f002 fc55 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e16:	bf00      	nop
 8002e18:	3728      	adds	r7, #40	; 0x28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020c00 	.word	0x40020c00

08002e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a25      	ldr	r2, [pc, #148]	; (8002edc <HAL_SPI_MspInit+0xb4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d144      	bne.n	8002ed4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e4a:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_SPI_MspInit+0xb8>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002e92:	2302      	movs	r3, #2
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <HAL_SPI_MspInit+0xbc>)
 8002eae:	f002 fc07 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002eb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ec4:	2305      	movs	r3, #5
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <HAL_SPI_MspInit+0xc0>)
 8002ed0:	f002 fbf6 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ed4:	bf00      	nop
 8002ed6:	3728      	adds	r7, #40	; 0x28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40003800 	.word	0x40003800
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40020400 	.word	0x40020400

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <HAL_TIM_Base_MspInit+0xc8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10c      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002efe:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f16:	e046      	b.n	8002fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d10c      	bne.n	8002f3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	69bb      	ldr	r3, [r7, #24]
}
 8002f3a:	e034      	b.n	8002fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_TIM_Base_MspInit+0xd0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10c      	bne.n	8002f60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697b      	ldr	r3, [r7, #20]
}
 8002f5e:	e022      	b.n	8002fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_TIM_Base_MspInit+0xd4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10c      	bne.n	8002f84 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
}
 8002f82:	e010      	b.n	8002fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000c00 	.word	0x40000c00
 8002fc4:	40010400 	.word	0x40010400

08002fc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_TIM_PWM_MspInit+0x38>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40001800 	.word	0x40001800
 8003004:	40023800 	.word	0x40023800

08003008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a56      	ldr	r2, [pc, #344]	; (8003180 <HAL_TIM_MspPostInit+0x178>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d11d      	bne.n	8003066 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a55      	ldr	r2, [pc, #340]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	2302      	movs	r3, #2
 800304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003054:	2301      	movs	r3, #1
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	4619      	mov	r1, r3
 800305e:	484a      	ldr	r0, [pc, #296]	; (8003188 <HAL_TIM_MspPostInit+0x180>)
 8003060:	f002 fb2e 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003064:	e087      	b.n	8003176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306e:	d11d      	bne.n	80030ac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	4b44      	ldr	r3, [pc, #272]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4a43      	ldr	r2, [pc, #268]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6313      	str	r3, [r2, #48]	; 0x30
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800309a:	2301      	movs	r3, #1
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	4838      	ldr	r0, [pc, #224]	; (8003188 <HAL_TIM_MspPostInit+0x180>)
 80030a6:	f002 fb0b 	bl	80056c0 <HAL_GPIO_Init>
}
 80030aa:	e064      	b.n	8003176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a36      	ldr	r2, [pc, #216]	; (800318c <HAL_TIM_MspPostInit+0x184>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11c      	bne.n	80030f0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a32      	ldr	r2, [pc, #200]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030ce:	2310      	movs	r3, #16
 80030d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030de:	2302      	movs	r3, #2
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4619      	mov	r1, r3
 80030e8:	4829      	ldr	r0, [pc, #164]	; (8003190 <HAL_TIM_MspPostInit+0x188>)
 80030ea:	f002 fae9 	bl	80056c0 <HAL_GPIO_Init>
}
 80030ee:	e042      	b.n	8003176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <HAL_TIM_MspPostInit+0x18c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d11c      	bne.n	8003134 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003112:	2301      	movs	r3, #1
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003122:	2302      	movs	r3, #2
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	481a      	ldr	r0, [pc, #104]	; (8003198 <HAL_TIM_MspPostInit+0x190>)
 800312e:	f002 fac7 	bl	80056c0 <HAL_GPIO_Init>
}
 8003132:	e020      	b.n	8003176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <HAL_TIM_MspPostInit+0x194>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d11b      	bne.n	8003176 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 8003144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <HAL_TIM_MspPostInit+0x17c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003156:	2340      	movs	r3, #64	; 0x40
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003166:	2309      	movs	r3, #9
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	480b      	ldr	r0, [pc, #44]	; (80031a0 <HAL_TIM_MspPostInit+0x198>)
 8003172:	f002 faa5 	bl	80056c0 <HAL_GPIO_Init>
}
 8003176:	bf00      	nop
 8003178:	3730      	adds	r7, #48	; 0x30
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40010000 	.word	0x40010000
 8003184:	40023800 	.word	0x40023800
 8003188:	40020000 	.word	0x40020000
 800318c:	40000400 	.word	0x40000400
 8003190:	40020400 	.word	0x40020400
 8003194:	40000c00 	.word	0x40000c00
 8003198:	40022000 	.word	0x40022000
 800319c:	40001800 	.word	0x40001800
 80031a0:	40021c00 	.word	0x40021c00

080031a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3c      	ldr	r2, [pc, #240]	; (80032b4 <HAL_UART_MspInit+0x110>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d145      	bne.n	8003252 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031c6:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a2f      	ldr	r2, [pc, #188]	; (80032b8 <HAL_UART_MspInit+0x114>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_UART_MspInit+0x114>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800321e:	2307      	movs	r3, #7
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003222:	f107 031c 	add.w	r3, r7, #28
 8003226:	4619      	mov	r1, r3
 8003228:	4824      	ldr	r0, [pc, #144]	; (80032bc <HAL_UART_MspInit+0x118>)
 800322a:	f002 fa49 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800322e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003240:	2307      	movs	r3, #7
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	4619      	mov	r1, r3
 800324a:	481d      	ldr	r0, [pc, #116]	; (80032c0 <HAL_UART_MspInit+0x11c>)
 800324c:	f002 fa38 	bl	80056c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003250:	e02c      	b.n	80032ac <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_UART_MspInit+0x120>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d127      	bne.n	80032ac <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_UART_MspInit+0x114>)
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_UART_MspInit+0x114>)
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	6453      	str	r3, [r2, #68]	; 0x44
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_UART_MspInit+0x114>)
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_UART_MspInit+0x114>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_UART_MspInit+0x114>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6313      	str	r3, [r2, #48]	; 0x30
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_UART_MspInit+0x114>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800328c:	23c0      	movs	r3, #192	; 0xc0
 800328e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003298:	2303      	movs	r3, #3
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800329c:	2308      	movs	r3, #8
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a0:	f107 031c 	add.w	r3, r7, #28
 80032a4:	4619      	mov	r1, r3
 80032a6:	4808      	ldr	r0, [pc, #32]	; (80032c8 <HAL_UART_MspInit+0x124>)
 80032a8:	f002 fa0a 	bl	80056c0 <HAL_GPIO_Init>
}
 80032ac:	bf00      	nop
 80032ae:	3730      	adds	r7, #48	; 0x30
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40011000 	.word	0x40011000
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020000 	.word	0x40020000
 80032c4:	40011400 	.word	0x40011400
 80032c8:	40020800 	.word	0x40020800

080032cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032e0:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <HAL_FMC_MspInit+0x100>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d16d      	bne.n	80033c4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80032e8:	4b38      	ldr	r3, [pc, #224]	; (80033cc <HAL_FMC_MspInit+0x100>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032ee:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_FMC_MspInit+0x104>)
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	4a37      	ldr	r2, [pc, #220]	; (80033d0 <HAL_FMC_MspInit+0x104>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6393      	str	r3, [r2, #56]	; 0x38
 80032fa:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <HAL_FMC_MspInit+0x104>)
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003306:	f64f 7383 	movw	r3, #65411	; 0xff83
 800330a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003318:	230c      	movs	r3, #12
 800331a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	4619      	mov	r1, r3
 8003320:	482c      	ldr	r0, [pc, #176]	; (80033d4 <HAL_FMC_MspInit+0x108>)
 8003322:	f002 f9cd 	bl	80056c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003326:	f248 1333 	movw	r3, #33075	; 0x8133
 800332a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003338:	230c      	movs	r3, #12
 800333a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4825      	ldr	r0, [pc, #148]	; (80033d8 <HAL_FMC_MspInit+0x10c>)
 8003342:	f002 f9bd 	bl	80056c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003346:	f24c 7303 	movw	r3, #50947	; 0xc703
 800334a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003354:	2303      	movs	r3, #3
 8003356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003358:	230c      	movs	r3, #12
 800335a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	4619      	mov	r1, r3
 8003360:	481e      	ldr	r0, [pc, #120]	; (80033dc <HAL_FMC_MspInit+0x110>)
 8003362:	f002 f9ad 	bl	80056c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003366:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800336a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003378:	230c      	movs	r3, #12
 800337a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4817      	ldr	r0, [pc, #92]	; (80033e0 <HAL_FMC_MspInit+0x114>)
 8003382:	f002 f99d 	bl	80056c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003386:	2328      	movs	r3, #40	; 0x28
 8003388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003396:	230c      	movs	r3, #12
 8003398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4811      	ldr	r0, [pc, #68]	; (80033e4 <HAL_FMC_MspInit+0x118>)
 80033a0:	f002 f98e 	bl	80056c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80033a4:	2308      	movs	r3, #8
 80033a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b0:	2303      	movs	r3, #3
 80033b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033b4:	230c      	movs	r3, #12
 80033b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	4619      	mov	r1, r3
 80033bc:	480a      	ldr	r0, [pc, #40]	; (80033e8 <HAL_FMC_MspInit+0x11c>)
 80033be:	f002 f97f 	bl	80056c0 <HAL_GPIO_Init>
 80033c2:	e000      	b.n	80033c6 <HAL_FMC_MspInit+0xfa>
    return;
 80033c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	2000039c 	.word	0x2000039c
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40021800 	.word	0x40021800
 80033dc:	40020c00 	.word	0x40020c00
 80033e0:	40021400 	.word	0x40021400
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40020800 	.word	0x40020800

080033ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80033f4:	f7ff ff6a 	bl	80032cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <HAL_SAI_MspInit+0xbc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d124      	bne.n	800345c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003412:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <HAL_SAI_MspInit+0xc0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <HAL_SAI_MspInit+0xc4>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <HAL_SAI_MspInit+0xc4>)
 8003420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003424:	6453      	str	r3, [r2, #68]	; 0x44
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_SAI_MspInit+0xc4>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_SAI_MspInit+0xc0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3301      	adds	r3, #1
 8003438:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <HAL_SAI_MspInit+0xc0>)
 800343a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800343c:	23f0      	movs	r3, #240	; 0xf0
 800343e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003448:	2300      	movs	r3, #0
 800344a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800344c:	230a      	movs	r3, #10
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	481c      	ldr	r0, [pc, #112]	; (80034c8 <HAL_SAI_MspInit+0xc8>)
 8003458:	f002 f932 	bl	80056c0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_SAI_MspInit+0xcc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d125      	bne.n	80034b2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_SAI_MspInit+0xc0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_SAI_MspInit+0xc4>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <HAL_SAI_MspInit+0xc4>)
 8003474:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003478:	6453      	str	r3, [r2, #68]	; 0x44
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_SAI_MspInit+0xc4>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_SAI_MspInit+0xc0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_SAI_MspInit+0xc0>)
 800348e:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034a2:	230a      	movs	r3, #10
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	4808      	ldr	r0, [pc, #32]	; (80034d0 <HAL_SAI_MspInit+0xd0>)
 80034ae:	f002 f907 	bl	80056c0 <HAL_GPIO_Init>

    }
}
 80034b2:	bf00      	nop
 80034b4:	3728      	adds	r7, #40	; 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40015c04 	.word	0x40015c04
 80034c0:	200003a0 	.word	0x200003a0
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40022000 	.word	0x40022000
 80034cc:	40015c24 	.word	0x40015c24
 80034d0:	40021800 	.word	0x40021800

080034d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80034e4:	2200      	movs	r2, #0
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	2036      	movs	r0, #54	; 0x36
 80034ea:	f001 fabb 	bl	8004a64 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80034ee:	2036      	movs	r0, #54	; 0x36
 80034f0:	f001 fad4 	bl	8004a9c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034f4:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <HAL_InitTick+0xa0>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <HAL_InitTick+0xa0>)
 80034fa:	f043 0310 	orr.w	r3, r3, #16
 80034fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_InitTick+0xa0>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800350c:	f107 0210 	add.w	r2, r7, #16
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f003 fbde 	bl	8006cd8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800351c:	f003 fbb4 	bl	8006c88 <HAL_RCC_GetPCLK1Freq>
 8003520:	4603      	mov	r3, r0
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_InitTick+0xa4>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	3b01      	subs	r3, #1
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_InitTick+0xa8>)
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_InitTick+0xac>)
 8003538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_InitTick+0xa8>)
 800353c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003540:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_InitTick+0xa8>)
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_InitTick+0xa8>)
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_InitTick+0xa8>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003554:	4809      	ldr	r0, [pc, #36]	; (800357c <HAL_InitTick+0xa8>)
 8003556:	f006 f857 	bl	8009608 <HAL_TIM_Base_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003560:	4806      	ldr	r0, [pc, #24]	; (800357c <HAL_InitTick+0xa8>)
 8003562:	f006 f87d 	bl	8009660 <HAL_TIM_Base_Start_IT>
 8003566:	4603      	mov	r3, r0
 8003568:	e000      	b.n	800356c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
}
 800356c:	4618      	mov	r0, r3
 800356e:	3730      	adds	r7, #48	; 0x30
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	431bde83 	.word	0x431bde83
 800357c:	2000c678 	.word	0x2000c678
 8003580:	40001000 	.word	0x40001000

08003584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <HardFault_Handler+0x4>

08003598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800359c:	e7fe      	b.n	800359c <MemManage_Handler+0x4>

0800359e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035a2:	e7fe      	b.n	80035a2 <BusFault_Handler+0x4>

080035a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <UsageFault_Handler+0x4>

080035aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <CAN1_RX0_IRQHandler+0x10>)
 80035be:	f000 ff4d 	bl	800445c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000c574 	.word	0x2000c574

080035cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <TIM6_DAC_IRQHandler+0x10>)
 80035d2:	f006 f89a 	bl	800970a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000c678 	.word	0x2000c678

080035e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80035e4:	4802      	ldr	r0, [pc, #8]	; (80035f0 <LTDC_IRQHandler+0x10>)
 80035e6:	f002 fb17 	bl	8005c18 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	2000c24c 	.word	0x2000c24c

080035f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <DMA2D_IRQHandler+0x10>)
 80035fa:	f001 fe22 	bl	8005242 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000c4ec 	.word	0x2000c4ec

08003608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
	return 1;
 800360c:	2301      	movs	r3, #1
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <_kill>:

int _kill(int pid, int sig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003622:	f021 f817 	bl	8024654 <__errno>
 8003626:	4602      	mov	r2, r0
 8003628:	2316      	movs	r3, #22
 800362a:	6013      	str	r3, [r2, #0]
	return -1;
 800362c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <_exit>:

void _exit (int status)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ffe7 	bl	8003618 <_kill>
	while (1) {}		/* Make sure we hang here */
 800364a:	e7fe      	b.n	800364a <_exit+0x12>

0800364c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	e00a      	b.n	8003674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800365e:	f3af 8000 	nop.w
 8003662:	4601      	mov	r1, r0
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	60ba      	str	r2, [r7, #8]
 800366a:	b2ca      	uxtb	r2, r1
 800366c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	dbf0      	blt.n	800365e <_read+0x12>
	}

return len;
 800367c:	687b      	ldr	r3, [r7, #4]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e009      	b.n	80036ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	60ba      	str	r2, [r7, #8]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3301      	adds	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	dbf1      	blt.n	8003698 <_write+0x12>
	}
	return len;
 80036b4:	687b      	ldr	r3, [r7, #4]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <_close>:

int _close(int file)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
	return -1;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036e6:	605a      	str	r2, [r3, #4]
	return 0;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_isatty>:

int _isatty(int file)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	return 1;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
	return 0;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <_sbrk+0x50>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <_sbrk+0x16>
		heap_end = &end;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <_sbrk+0x50>)
 800373a:	4a10      	ldr	r2, [pc, #64]	; (800377c <_sbrk+0x54>)
 800373c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <_sbrk+0x50>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <_sbrk+0x50>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	466a      	mov	r2, sp
 800374e:	4293      	cmp	r3, r2
 8003750:	d907      	bls.n	8003762 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003752:	f020 ff7f 	bl	8024654 <__errno>
 8003756:	4602      	mov	r2, r0
 8003758:	230c      	movs	r3, #12
 800375a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	e006      	b.n	8003770 <_sbrk+0x48>
	}

	heap_end += incr;
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <_sbrk+0x50>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	4a03      	ldr	r2, [pc, #12]	; (8003778 <_sbrk+0x50>)
 800376c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800376e:	68fb      	ldr	r3, [r7, #12]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200003a4 	.word	0x200003a4
 800377c:	2000cb30 	.word	0x2000cb30

08003780 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <SystemInit+0x28>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <SystemInit+0x28>)
 800378c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <SystemInit+0x28>)
 8003796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800379a:	609a      	str	r2, [r3, #8]
#endif
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037b2:	e003      	b.n	80037bc <LoopCopyDataInit>

080037b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ba:	3104      	adds	r1, #4

080037bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037bc:	480b      	ldr	r0, [pc, #44]	; (80037ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037c4:	d3f6      	bcc.n	80037b4 <CopyDataInit>
  ldr  r2, =_sbss
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037c8:	e002      	b.n	80037d0 <LoopFillZerobss>

080037ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037cc:	f842 3b04 	str.w	r3, [r2], #4

080037d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037d4:	d3f9      	bcc.n	80037ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037d6:	f7ff ffd3 	bl	8003780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037da:	f020 ff53 	bl	8024684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037de:	f7fd fb43 	bl	8000e68 <main>
  bx  lr    
 80037e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037e4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80037e8:	0804411c 	.word	0x0804411c
  ldr  r0, =_sdata
 80037ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037f0:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 80037f4:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 80037f8:	2000cb2c 	.word	0x2000cb2c

080037fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037fc:	e7fe      	b.n	80037fc <ADC_IRQHandler>

080037fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003802:	2003      	movs	r0, #3
 8003804:	f001 f923 	bl	8004a4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003808:	2000      	movs	r0, #0
 800380a:	f7ff fe63 	bl	80034d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800380e:	f7fe ff09 	bl	8002624 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_IncTick+0x20>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_IncTick+0x24>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <HAL_IncTick+0x24>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000020 	.word	0x20000020
 800383c:	2000c6b8 	.word	0x2000c6b8

08003840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_GetTick+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000c6b8 	.word	0x2000c6b8

08003858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff ffee 	bl	8003840 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d005      	beq.n	800387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_Delay+0x40>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800387e:	bf00      	nop
 8003880:	f7ff ffde 	bl	8003840 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8f7      	bhi.n	8003880 <HAL_Delay+0x28>
  {
  }
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000020 	.word	0x20000020

0800389c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e031      	b.n	8003916 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe feda 	bl	8002674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_ADC_Init+0x84>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f964 	bl	8003bb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
 8003906:	e001      	b.n	800390c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	ffffeefd 	.word	0xffffeefd

08003924 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1c>
 800393c:	2302      	movs	r3, #2
 800393e:	e12a      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x272>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b09      	cmp	r3, #9
 800394e:	d93a      	bls.n	80039c6 <HAL_ADC_ConfigChannel+0xa2>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003958:	d035      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68d9      	ldr	r1, [r3, #12]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	4613      	mov	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	3b1e      	subs	r3, #30
 8003970:	2207      	movs	r2, #7
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	400a      	ands	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a87      	ldr	r2, [pc, #540]	; (8003ba4 <HAL_ADC_ConfigChannel+0x280>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68d9      	ldr	r1, [r3, #12]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	061a      	lsls	r2, r3, #24
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800399e:	e035      	b.n	8003a0c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4618      	mov	r0, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4403      	add	r3, r0
 80039b8:	3b1e      	subs	r3, #30
 80039ba:	409a      	lsls	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039c4:	e022      	b.n	8003a0c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6919      	ldr	r1, [r3, #16]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	2207      	movs	r2, #7
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43da      	mvns	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	400a      	ands	r2, r1
 80039e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6919      	ldr	r1, [r3, #16]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	4618      	mov	r0, r3
 80039fc:	4603      	mov	r3, r0
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4403      	add	r3, r0
 8003a02:	409a      	lsls	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	d824      	bhi.n	8003a5e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	3b05      	subs	r3, #5
 8003a26:	221f      	movs	r2, #31
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	400a      	ands	r2, r1
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	4618      	mov	r0, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3b05      	subs	r3, #5
 8003a50:	fa00 f203 	lsl.w	r2, r0, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a5c:	e04c      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d824      	bhi.n	8003ab0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	3b23      	subs	r3, #35	; 0x23
 8003a78:	221f      	movs	r2, #31
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	400a      	ands	r2, r1
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	4618      	mov	r0, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3b23      	subs	r3, #35	; 0x23
 8003aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
 8003aae:	e023      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	3b41      	subs	r3, #65	; 0x41
 8003ac2:	221f      	movs	r2, #31
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	400a      	ands	r2, r1
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	4618      	mov	r0, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	3b41      	subs	r3, #65	; 0x41
 8003aec:	fa00 f203 	lsl.w	r2, r0, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <HAL_ADC_ConfigChannel+0x284>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10a      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1f4>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b0a:	d105      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_ADC_ConfigChannel+0x288>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a26      	ldr	r2, [pc, #152]	; (8003bac <HAL_ADC_ConfigChannel+0x288>)
 8003b12:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b16:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_ADC_ConfigChannel+0x284>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d109      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x212>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b12      	cmp	r3, #18
 8003b28:	d105      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_ADC_ConfigChannel+0x288>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <HAL_ADC_ConfigChannel+0x288>)
 8003b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b34:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_ADC_ConfigChannel+0x284>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d125      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x268>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_ADC_ConfigChannel+0x280>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x22e>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b11      	cmp	r3, #17
 8003b50:	d11c      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <HAL_ADC_ConfigChannel+0x288>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_ADC_ConfigChannel+0x288>)
 8003b58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b5c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <HAL_ADC_ConfigChannel+0x280>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d111      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_ADC_ConfigChannel+0x28c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_ADC_ConfigChannel+0x290>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0c9a      	lsrs	r2, r3, #18
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b7e:	e002      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f9      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	10000012 	.word	0x10000012
 8003ba8:	40012000 	.word	0x40012000
 8003bac:	40012300 	.word	0x40012300
 8003bb0:	20000018 	.word	0x20000018
 8003bb4:	431bde83 	.word	0x431bde83

08003bb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003bc0:	4b78      	ldr	r3, [pc, #480]	; (8003da4 <ADC_Init+0x1ec>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a77      	ldr	r2, [pc, #476]	; (8003da4 <ADC_Init+0x1ec>)
 8003bc6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003bca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003bcc:	4b75      	ldr	r3, [pc, #468]	; (8003da4 <ADC_Init+0x1ec>)
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4973      	ldr	r1, [pc, #460]	; (8003da4 <ADC_Init+0x1ec>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	021a      	lsls	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <ADC_Init+0x1f0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6899      	ldr	r1, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	e00f      	b.n	8003cb2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0202 	bic.w	r2, r2, #2
 8003cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	035a      	lsls	r2, r3, #13
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	e007      	b.n	8003d28 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	051a      	lsls	r2, r3, #20
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d6a:	025a      	lsls	r2, r3, #9
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6899      	ldr	r1, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	029a      	lsls	r2, r3, #10
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40012300 	.word	0x40012300
 8003da8:	0f000001 	.word	0x0f000001

08003dac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0ed      	b.n	8003f9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe fcac 	bl	8002728 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0202 	bic.w	r2, r2, #2
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de0:	f7ff fd2e 	bl	8003840 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003de6:	e012      	b.n	8003e0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003de8:	f7ff fd2a 	bl	8003840 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b0a      	cmp	r3, #10
 8003df4:	d90b      	bls.n	8003e0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2205      	movs	r2, #5
 8003e06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0c5      	b.n	8003f9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2c:	f7ff fd08 	bl	8003840 <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e32:	e012      	b.n	8003e5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e34:	f7ff fd04 	bl	8003840 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b0a      	cmp	r3, #10
 8003e40:	d90b      	bls.n	8003e5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2205      	movs	r2, #5
 8003e52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e09f      	b.n	8003f9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0e5      	beq.n	8003e34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7e1b      	ldrb	r3, [r3, #24]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d108      	bne.n	8003e82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e007      	b.n	8003e92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7e5b      	ldrb	r3, [r3, #25]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7e9b      	ldrb	r3, [r3, #26]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0220 	orr.w	r2, r2, #32
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e007      	b.n	8003ee6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0220 	bic.w	r2, r2, #32
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7edb      	ldrb	r3, [r3, #27]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d108      	bne.n	8003f00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0210 	bic.w	r2, r2, #16
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e007      	b.n	8003f10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0210 	orr.w	r2, r2, #16
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7f1b      	ldrb	r3, [r3, #28]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d108      	bne.n	8003f2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e007      	b.n	8003f3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0208 	bic.w	r2, r2, #8
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7f5b      	ldrb	r3, [r3, #29]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d108      	bne.n	8003f54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0204 	orr.w	r2, r2, #4
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e007      	b.n	8003f64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0204 	bic.w	r2, r2, #4
 8003f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	ea42 0103 	orr.w	r1, r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d003      	beq.n	8003fca <HAL_CAN_ConfigFilter+0x26>
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	f040 80be 	bne.w	8004146 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003fca:	4b65      	ldr	r3, [pc, #404]	; (8004160 <HAL_CAN_ConfigFilter+0x1bc>)
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fd4:	f043 0201 	orr.w	r2, r3, #1
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fe4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2201      	movs	r2, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	43db      	mvns	r3, r3
 800401c:	401a      	ands	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d123      	bne.n	8004074 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	43db      	mvns	r3, r3
 8004036:	401a      	ands	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800404e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3248      	adds	r2, #72	; 0x48
 8004054:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004068:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800406a:	6979      	ldr	r1, [r7, #20]
 800406c:	3348      	adds	r3, #72	; 0x48
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	440b      	add	r3, r1
 8004072:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d122      	bne.n	80040c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	431a      	orrs	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800409c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3248      	adds	r2, #72	; 0x48
 80040a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	3348      	adds	r3, #72	; 0x48
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	401a      	ands	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040dc:	e007      	b.n	80040ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	43db      	mvns	r3, r3
 8004100:	401a      	ands	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004108:	e007      	b.n	800411a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	431a      	orrs	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	431a      	orrs	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004138:	f023 0201 	bic.w	r2, r3, #1
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e006      	b.n	8004154 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40006400 	.word	0x40006400

08004164 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d12e      	bne.n	80041d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004190:	f7ff fb56 	bl	8003840 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004196:	e012      	b.n	80041be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004198:	f7ff fb52 	bl	8003840 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b0a      	cmp	r3, #10
 80041a4:	d90b      	bls.n	80041be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2205      	movs	r2, #5
 80041b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e012      	b.n	80041e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e006      	b.n	80041e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004200:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d003      	beq.n	8004210 <HAL_CAN_GetRxMessage+0x24>
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b02      	cmp	r3, #2
 800420c:	f040 80f3 	bne.w	80043f6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10e      	bne.n	8004234 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0e7      	b.n	8004404 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d107      	bne.n	8004252 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0d8      	b.n	8004404 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	331b      	adds	r3, #27
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	4413      	add	r3, r2
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0204 	and.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10c      	bne.n	800428a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	331b      	adds	r3, #27
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	4413      	add	r3, r2
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	0d5b      	lsrs	r3, r3, #21
 8004280:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e00b      	b.n	80042a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	331b      	adds	r3, #27
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	331b      	adds	r3, #27
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0202 	and.w	r2, r3, #2
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	331b      	adds	r3, #27
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	331b      	adds	r3, #27
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	331b      	adds	r3, #27
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	4413      	add	r3, r2
 800430a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4413      	add	r3, r2
 8004320:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	0a1a      	lsrs	r2, r3, #8
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0c1a      	lsrs	r2, r3, #16
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	3302      	adds	r3, #2
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4413      	add	r3, r2
 8004354:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0e1a      	lsrs	r2, r3, #24
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	3303      	adds	r3, #3
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3304      	adds	r3, #4
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0a1a      	lsrs	r2, r3, #8
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	3305      	adds	r3, #5
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	4413      	add	r3, r2
 80043a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0c1a      	lsrs	r2, r3, #16
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	3306      	adds	r3, #6
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0e1a      	lsrs	r2, r3, #24
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	3307      	adds	r3, #7
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0220 	orr.w	r2, r2, #32
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	e007      	b.n	80043f2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0220 	orr.w	r2, r2, #32
 80043f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e006      	b.n	8004404 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004420:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d002      	beq.n	800442e <HAL_CAN_ActivateNotification+0x1e>
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d109      	bne.n	8004442 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6959      	ldr	r1, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e006      	b.n	8004450 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07c      	beq.n	800459c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d023      	beq.n	80044f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2201      	movs	r2, #1
 80044b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f97d 	bl	80047be <HAL_CAN_TxMailbox0CompleteCallback>
 80044c4:	e016      	b.n	80044f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	e00c      	b.n	80044f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
 80044ec:	e002      	b.n	80044f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f983 	bl	80047fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d024      	beq.n	8004548 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004506:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f95d 	bl	80047d2 <HAL_CAN_TxMailbox1CompleteCallback>
 8004518:	e016      	b.n	8004548 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	e00c      	b.n	8004548 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	e002      	b.n	8004548 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f963 	bl	800480e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d024      	beq.n	800459c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800455a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f93d 	bl	80047e6 <HAL_CAN_TxMailbox2CompleteCallback>
 800456c:	e016      	b.n	800459c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
 8004580:	e00c      	b.n	800459c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
 8004594:	e002      	b.n	800459c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f943 	bl	8004822 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2210      	movs	r2, #16
 80045be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2208      	movs	r2, #8
 80045da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f92a 	bl	8004836 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fe10 	bl	8001220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800461a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2210      	movs	r2, #16
 8004622:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f90c 	bl	800485e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8f3 	bl	800484a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2210      	movs	r2, #16
 800467e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8f6 	bl	8004872 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2208      	movs	r2, #8
 80046a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8ef 	bl	8004886 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d075      	beq.n	800479e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d06c      	beq.n	8004796 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f043 0302 	orr.w	r3, r3, #2
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004716:	2b00      	cmp	r3, #0
 8004718:	d03d      	beq.n	8004796 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004720:	2b00      	cmp	r3, #0
 8004722:	d038      	beq.n	8004796 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800472a:	2b30      	cmp	r3, #48	; 0x30
 800472c:	d017      	beq.n	800475e <HAL_CAN_IRQHandler+0x302>
 800472e:	2b30      	cmp	r3, #48	; 0x30
 8004730:	d804      	bhi.n	800473c <HAL_CAN_IRQHandler+0x2e0>
 8004732:	2b10      	cmp	r3, #16
 8004734:	d009      	beq.n	800474a <HAL_CAN_IRQHandler+0x2ee>
 8004736:	2b20      	cmp	r3, #32
 8004738:	d00c      	beq.n	8004754 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800473a:	e024      	b.n	8004786 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800473c:	2b50      	cmp	r3, #80	; 0x50
 800473e:	d018      	beq.n	8004772 <HAL_CAN_IRQHandler+0x316>
 8004740:	2b60      	cmp	r3, #96	; 0x60
 8004742:	d01b      	beq.n	800477c <HAL_CAN_IRQHandler+0x320>
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d00f      	beq.n	8004768 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004748:	e01d      	b.n	8004786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	f043 0308 	orr.w	r3, r3, #8
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004752:	e018      	b.n	8004786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f043 0310 	orr.w	r3, r3, #16
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800475c:	e013      	b.n	8004786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	f043 0320 	orr.w	r3, r3, #32
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004766:	e00e      	b.n	8004786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004770:	e009      	b.n	8004786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800477a:	e004      	b.n	8004786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004784:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004794:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2204      	movs	r2, #4
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f872 	bl	800489a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047b6:	bf00      	nop
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <__NVIC_SetPriorityGrouping+0x40>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048cc:	4013      	ands	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <__NVIC_SetPriorityGrouping+0x44>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048de:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <__NVIC_SetPriorityGrouping+0x40>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	60d3      	str	r3, [r2, #12]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000ed00 	.word	0xe000ed00
 80048f4:	05fa0000 	.word	0x05fa0000

080048f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <__NVIC_GetPriorityGrouping+0x18>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	f003 0307 	and.w	r3, r3, #7
}
 8004906:	4618      	mov	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	2b00      	cmp	r3, #0
 8004924:	db0b      	blt.n	800493e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	f003 021f 	and.w	r2, r3, #31
 800492c:	4907      	ldr	r1, [pc, #28]	; (800494c <__NVIC_EnableIRQ+0x38>)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2001      	movs	r0, #1
 8004936:	fa00 f202 	lsl.w	r2, r0, r2
 800493a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	e000e100 	.word	0xe000e100

08004950 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	2b00      	cmp	r3, #0
 8004960:	db10      	blt.n	8004984 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	f003 021f 	and.w	r2, r3, #31
 8004968:	4909      	ldr	r1, [pc, #36]	; (8004990 <__NVIC_DisableIRQ+0x40>)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2001      	movs	r0, #1
 8004972:	fa00 f202 	lsl.w	r2, r0, r2
 8004976:	3320      	adds	r3, #32
 8004978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800497c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004980:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	e000e100 	.word	0xe000e100

08004994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db0a      	blt.n	80049be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	490c      	ldr	r1, [pc, #48]	; (80049e0 <__NVIC_SetPriority+0x4c>)
 80049ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	440b      	add	r3, r1
 80049b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049bc:	e00a      	b.n	80049d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	4908      	ldr	r1, [pc, #32]	; (80049e4 <__NVIC_SetPriority+0x50>)
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	3b04      	subs	r3, #4
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	440b      	add	r3, r1
 80049d2:	761a      	strb	r2, [r3, #24]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000e100 	.word	0xe000e100
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f1c3 0307 	rsb	r3, r3, #7
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	bf28      	it	cs
 8004a06:	2304      	movcs	r3, #4
 8004a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d902      	bls.n	8004a18 <NVIC_EncodePriority+0x30>
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3b03      	subs	r3, #3
 8004a16:	e000      	b.n	8004a1a <NVIC_EncodePriority+0x32>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43da      	mvns	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a30:	f04f 31ff 	mov.w	r1, #4294967295
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3a:	43d9      	mvns	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a40:	4313      	orrs	r3, r2
         );
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3724      	adds	r7, #36	; 0x24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff2a 	bl	80048b0 <__NVIC_SetPriorityGrouping>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a76:	f7ff ff3f 	bl	80048f8 <__NVIC_GetPriorityGrouping>
 8004a7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	6978      	ldr	r0, [r7, #20]
 8004a82:	f7ff ffb1 	bl	80049e8 <NVIC_EncodePriority>
 8004a86:	4602      	mov	r2, r0
 8004a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff ff80 	bl	8004994 <__NVIC_SetPriority>
}
 8004a94:	bf00      	nop
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff ff32 	bl	8004914 <__NVIC_EnableIRQ>
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff42 	bl	8004950 <__NVIC_DisableIRQ>
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e054      	b.n	8004b90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7f5b      	ldrb	r3, [r3, #29]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fd fe62 	bl	80027c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	791b      	ldrb	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <HAL_CRC_Init+0xc4>)
 8004b10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0218 	bic.w	r2, r2, #24
 8004b20:	609a      	str	r2, [r3, #8]
 8004b22:	e00c      	b.n	8004b3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f834 	bl	8004b9c <HAL_CRCEx_Polynomial_Set>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e028      	b.n	8004b90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	795b      	ldrb	r3, [r3, #5]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4e:	611a      	str	r2, [r3, #16]
 8004b50:	e004      	b.n	8004b5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6912      	ldr	r2, [r2, #16]
 8004b5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	04c11db7 	.word	0x04c11db7

08004b9c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004bac:	231f      	movs	r3, #31
 8004bae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004bb0:	bf00      	nop
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1e5a      	subs	r2, r3, #1
 8004bb6:	613a      	str	r2, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <HAL_CRCEx_Polynomial_Set+0x34>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b18      	cmp	r3, #24
 8004bd4:	d846      	bhi.n	8004c64 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <HAL_CRCEx_Polynomial_Set+0x40>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c6b 	.word	0x08004c6b
 8004be0:	08004c65 	.word	0x08004c65
 8004be4:	08004c65 	.word	0x08004c65
 8004be8:	08004c65 	.word	0x08004c65
 8004bec:	08004c65 	.word	0x08004c65
 8004bf0:	08004c65 	.word	0x08004c65
 8004bf4:	08004c65 	.word	0x08004c65
 8004bf8:	08004c65 	.word	0x08004c65
 8004bfc:	08004c59 	.word	0x08004c59
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004c65 	.word	0x08004c65
 8004c08:	08004c65 	.word	0x08004c65
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c65 	.word	0x08004c65
 8004c1c:	08004c4d 	.word	0x08004c4d
 8004c20:	08004c65 	.word	0x08004c65
 8004c24:	08004c65 	.word	0x08004c65
 8004c28:	08004c65 	.word	0x08004c65
 8004c2c:	08004c65 	.word	0x08004c65
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004c65 	.word	0x08004c65
 8004c38:	08004c65 	.word	0x08004c65
 8004c3c:	08004c41 	.word	0x08004c41
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d913      	bls.n	8004c6e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c4a:	e010      	b.n	8004c6e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	d90f      	bls.n	8004c72 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c56:	e00c      	b.n	8004c72 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b0f      	cmp	r3, #15
 8004c5c:	d90b      	bls.n	8004c76 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c62:	e008      	b.n	8004c76 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
      break;
 8004c68:	e006      	b.n	8004c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e004      	b.n	8004c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e002      	b.n	8004c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c76:	bf00      	nop
  }
  if (status == HAL_OK)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f023 0118 	bic.w	r1, r3, #24
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e069      	b.n	8004d8e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fd9a 	bl	8002800 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_DCMI_Init+0xf0>)
 8004cee:	400b      	ands	r3, r1
 8004cf0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d06:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d12:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d1e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d2a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d36:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d112      	bne.n	8004d6e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7f1b      	ldrb	r3, [r3, #28]
 8004d4c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7f5b      	ldrb	r3, [r3, #29]
 8004d52:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d54:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7f9b      	ldrb	r3, [r3, #30]
 8004d5a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d5c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7fdb      	ldrb	r3, [r3, #31]
 8004d64:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d6a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d6c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 021e 	orr.w	r2, r2, #30
 8004d7c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	ffe0f007 	.word	0xffe0f007

08004d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_DMA_Start_IT+0x26>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e048      	b.n	8004e54 <HAL_DMA_Start_IT+0xb8>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d137      	bne.n	8004e46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f842 	bl	8004e74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	223f      	movs	r2, #63	; 0x3f
 8004df6:	409a      	lsls	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0216 	orr.w	r2, r2, #22
 8004e0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e005      	b.n	8004e52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d108      	bne.n	8004eb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eb2:	e007      	b.n	8004ec4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e039      	b.n	8004f56 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fd fd40 	bl	800297c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	f023 0107 	bic.w	r1, r3, #7
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_DMA2D_Init+0x90>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68d1      	ldr	r1, [r2, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	ffffc000 	.word	0xffffc000

08004f64 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e05f      	b.n	8005036 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004f76:	4b32      	ldr	r3, [pc, #200]	; (8005040 <HAL_DMA2D_DeInit+0xdc>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d02e      	beq.n	8004fe0 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d107      	bne.n	8004fa0 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8c1 	bl	8005118 <HAL_DMA2D_Abort>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d021      	beq.n	8004fe0 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e04a      	b.n	8005036 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d108      	bne.n	8004fc0 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004fae:	2100      	movs	r1, #0
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f8f7 	bl	80051a4 <HAL_DMA2D_CLUTLoading_Abort>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d011      	beq.n	8004fe0 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e03a      	b.n	8005036 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d108      	bne.n	8004fe0 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004fce:	2101      	movs	r1, #1
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f8e7 	bl	80051a4 <HAL_DMA2D_CLUTLoading_Abort>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e02a      	b.n	8005036 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	223f      	movs	r2, #63	; 0x3f
 8004fee:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2200      	movs	r2, #0
 8005006:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fd fcd5 	bl	80029c8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800

08005044 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_DMA2D_Start_IT+0x1c>
 800505c:	2302      	movs	r3, #2
 800505e:	e020      	b.n	80050a2 <HAL_DMA2D_Start_IT+0x5e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fa84 	bl	8005588 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800508e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af02      	add	r7, sp, #8
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e024      	b.n	8005110 <HAL_DMA2D_BlendingStart_IT+0x66>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fa4d 	bl	8005588 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80050fc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 0205 	bic.w	r2, r3, #5
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0204 	orr.w	r2, r2, #4
 8005132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005134:	f7fe fb84 	bl	8003840 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800513a:	e017      	b.n	800516c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800513c:	f7fe fb80 	bl	8003840 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800514a:	d90f      	bls.n	800516c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2203      	movs	r2, #3
 800515c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e017      	b.n	800519c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e0      	bne.n	800513c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005188:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3324      	adds	r3, #36	; 0x24
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0204 	orr.w	r2, r2, #4
 80051c4:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d103      	bne.n	80051d4 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	331c      	adds	r3, #28
 80051d2:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80051d4:	f7fe fb34 	bl	8003840 <HAL_GetTick>
 80051d8:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80051da:	e017      	b.n	800520c <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80051dc:	f7fe fb30 	bl	8003840 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ea:	d90f      	bls.n	800520c <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2203      	movs	r2, #3
 80051fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e016      	b.n	800523a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e1      	bne.n	80051dc <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8005226:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d026      	beq.n	80052b2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d021      	beq.n	80052b2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800527c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2201      	movs	r2, #1
 8005290:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2204      	movs	r2, #4
 8005296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d026      	beq.n	800530a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d021      	beq.n	800530a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2220      	movs	r2, #32
 80052dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	f043 0202 	orr.w	r2, r3, #2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2204      	movs	r2, #4
 80052ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d026      	beq.n	8005362 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531a:	2b00      	cmp	r3, #0
 800531c:	d021      	beq.n	8005362 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800532c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2208      	movs	r2, #8
 8005334:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	f043 0204 	orr.w	r2, r3, #4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005384:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2204      	movs	r2, #4
 800538c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f853 	bl	800543a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d024      	beq.n	80053e8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01f      	beq.n	80053e8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053b6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2202      	movs	r2, #2
 80053be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01f      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01a      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800540a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2210      	movs	r2, #16
 8005412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f80e 	bl	800544e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_DMA2D_ConfigLayer+0x20>
 8005480:	2302      	movs	r3, #2
 8005482:	e079      	b.n	8005578 <HAL_DMA2D_ConfigLayer+0x114>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	3318      	adds	r3, #24
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	041b      	lsls	r3, r3, #16
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80054ae:	4b35      	ldr	r3, [pc, #212]	; (8005584 <HAL_DMA2D_ConfigLayer+0x120>)
 80054b0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b0a      	cmp	r3, #10
 80054b8:	d003      	beq.n	80054c2 <HAL_DMA2D_ConfigLayer+0x5e>
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d107      	bne.n	80054d2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e005      	b.n	80054de <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d120      	bne.n	8005526 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	ea02 0103 	and.w	r1, r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b0a      	cmp	r3, #10
 800550c:	d003      	beq.n	8005516 <HAL_DMA2D_ConfigLayer+0xb2>
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b09      	cmp	r3, #9
 8005514:	d127      	bne.n	8005566 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
 8005524:	e01f      	b.n	8005566 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	43db      	mvns	r3, r3
 8005530:	ea02 0103 	and.w	r1, r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	430a      	orrs	r2, r1
 800553c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b0a      	cmp	r3, #10
 800554e:	d003      	beq.n	8005558 <HAL_DMA2D_ConfigLayer+0xf4>
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b09      	cmp	r3, #9
 8005556:	d106      	bne.n	8005566 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005564:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	ff03000f 	.word	0xff03000f

08005588 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005588:	b480      	push	{r7}
 800558a:	b08b      	sub	sp, #44	; 0x2c
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	041a      	lsls	r2, r3, #16
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055c0:	d174      	bne.n	80056ac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d108      	bne.n	80055fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	e053      	b.n	80056a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d106      	bne.n	8005610 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
 800560e:	e048      	b.n	80056a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d111      	bne.n	800563c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	0cdb      	lsrs	r3, r3, #19
 800561c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	0a9b      	lsrs	r3, r3, #10
 8005622:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	08db      	lsrs	r3, r3, #3
 8005628:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	02db      	lsls	r3, r3, #11
 8005632:	4313      	orrs	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
 800563a:	e032      	b.n	80056a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d117      	bne.n	8005674 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	0fdb      	lsrs	r3, r3, #31
 8005648:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	0cdb      	lsrs	r3, r3, #19
 800564e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	0adb      	lsrs	r3, r3, #11
 8005654:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	08db      	lsrs	r3, r3, #3
 800565a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	029b      	lsls	r3, r3, #10
 8005664:	431a      	orrs	r2, r3
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	03db      	lsls	r3, r3, #15
 800566a:	4313      	orrs	r3, r2
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	e016      	b.n	80056a2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	0f1b      	lsrs	r3, r3, #28
 8005678:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	0d1b      	lsrs	r3, r3, #20
 800567e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	0b1b      	lsrs	r3, r3, #12
 8005684:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	011a      	lsls	r2, r3, #4
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	431a      	orrs	r2, r3
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	031b      	lsls	r3, r3, #12
 800569a:	4313      	orrs	r3, r2
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80056aa:	e003      	b.n	80056b4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	60da      	str	r2, [r3, #12]
}
 80056b4:	bf00      	nop
 80056b6:	372c      	adds	r7, #44	; 0x2c
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b089      	sub	sp, #36	; 0x24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	e175      	b.n	80059cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056e0:	2201      	movs	r2, #1
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	f040 8164 	bne.w	80059c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d00b      	beq.n	800571e <HAL_GPIO_Init+0x5e>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d007      	beq.n	800571e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005712:	2b11      	cmp	r3, #17
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b12      	cmp	r3, #18
 800571c:	d130      	bne.n	8005780 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	2203      	movs	r2, #3
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4313      	orrs	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005754:	2201      	movs	r2, #1
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 0201 	and.w	r2, r3, #1
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2203      	movs	r2, #3
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x100>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b12      	cmp	r3, #18
 80057be:	d123      	bne.n	8005808 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	08da      	lsrs	r2, r3, #3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3208      	adds	r2, #8
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	220f      	movs	r2, #15
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	08da      	lsrs	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3208      	adds	r2, #8
 8005802:	69b9      	ldr	r1, [r7, #24]
 8005804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0203 	and.w	r2, r3, #3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80be 	beq.w	80059c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800584a:	4b65      	ldr	r3, [pc, #404]	; (80059e0 <HAL_GPIO_Init+0x320>)
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	4a64      	ldr	r2, [pc, #400]	; (80059e0 <HAL_GPIO_Init+0x320>)
 8005850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005854:	6453      	str	r3, [r2, #68]	; 0x44
 8005856:	4b62      	ldr	r3, [pc, #392]	; (80059e0 <HAL_GPIO_Init+0x320>)
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005862:	4a60      	ldr	r2, [pc, #384]	; (80059e4 <HAL_GPIO_Init+0x324>)
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	3302      	adds	r3, #2
 800586a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	220f      	movs	r2, #15
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a57      	ldr	r2, [pc, #348]	; (80059e8 <HAL_GPIO_Init+0x328>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d037      	beq.n	80058fe <HAL_GPIO_Init+0x23e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a56      	ldr	r2, [pc, #344]	; (80059ec <HAL_GPIO_Init+0x32c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d031      	beq.n	80058fa <HAL_GPIO_Init+0x23a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a55      	ldr	r2, [pc, #340]	; (80059f0 <HAL_GPIO_Init+0x330>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d02b      	beq.n	80058f6 <HAL_GPIO_Init+0x236>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a54      	ldr	r2, [pc, #336]	; (80059f4 <HAL_GPIO_Init+0x334>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d025      	beq.n	80058f2 <HAL_GPIO_Init+0x232>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a53      	ldr	r2, [pc, #332]	; (80059f8 <HAL_GPIO_Init+0x338>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01f      	beq.n	80058ee <HAL_GPIO_Init+0x22e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a52      	ldr	r2, [pc, #328]	; (80059fc <HAL_GPIO_Init+0x33c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d019      	beq.n	80058ea <HAL_GPIO_Init+0x22a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a51      	ldr	r2, [pc, #324]	; (8005a00 <HAL_GPIO_Init+0x340>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_GPIO_Init+0x226>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <HAL_GPIO_Init+0x344>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00d      	beq.n	80058e2 <HAL_GPIO_Init+0x222>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a4f      	ldr	r2, [pc, #316]	; (8005a08 <HAL_GPIO_Init+0x348>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d007      	beq.n	80058de <HAL_GPIO_Init+0x21e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a4e      	ldr	r2, [pc, #312]	; (8005a0c <HAL_GPIO_Init+0x34c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <HAL_GPIO_Init+0x21a>
 80058d6:	2309      	movs	r3, #9
 80058d8:	e012      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058da:	230a      	movs	r3, #10
 80058dc:	e010      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058de:	2308      	movs	r3, #8
 80058e0:	e00e      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058e2:	2307      	movs	r3, #7
 80058e4:	e00c      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058e6:	2306      	movs	r3, #6
 80058e8:	e00a      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058ea:	2305      	movs	r3, #5
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058ee:	2304      	movs	r3, #4
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x240>
 80058fe:	2300      	movs	r3, #0
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005910:	4934      	ldr	r1, [pc, #208]	; (80059e4 <HAL_GPIO_Init+0x324>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800591e:	4b3c      	ldr	r3, [pc, #240]	; (8005a10 <HAL_GPIO_Init+0x350>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005942:	4a33      	ldr	r2, [pc, #204]	; (8005a10 <HAL_GPIO_Init+0x350>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005948:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <HAL_GPIO_Init+0x350>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800596c:	4a28      	ldr	r2, [pc, #160]	; (8005a10 <HAL_GPIO_Init+0x350>)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005972:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <HAL_GPIO_Init+0x350>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005996:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <HAL_GPIO_Init+0x350>)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800599c:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <HAL_GPIO_Init+0x350>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059c0:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <HAL_GPIO_Init+0x350>)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b0f      	cmp	r3, #15
 80059d0:	f67f ae86 	bls.w	80056e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	3724      	adds	r7, #36	; 0x24
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40023800 	.word	0x40023800
 80059e4:	40013800 	.word	0x40013800
 80059e8:	40020000 	.word	0x40020000
 80059ec:	40020400 	.word	0x40020400
 80059f0:	40020800 	.word	0x40020800
 80059f4:	40020c00 	.word	0x40020c00
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40021400 	.word	0x40021400
 8005a00:	40021800 	.word	0x40021800
 8005a04:	40021c00 	.word	0x40021c00
 8005a08:	40022000 	.word	0x40022000
 8005a0c:	40022400 	.word	0x40022400
 8005a10:	40013c00 	.word	0x40013c00

08005a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	887b      	ldrh	r3, [r7, #2]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e001      	b.n	8005a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	807b      	strh	r3, [r7, #2]
 8005a50:	4613      	mov	r3, r2
 8005a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a54:	787b      	ldrb	r3, [r7, #1]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a60:	e003      	b.n	8005a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a62:	887b      	ldrh	r3, [r7, #2]
 8005a64:	041a      	lsls	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	619a      	str	r2, [r3, #24]
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0bf      	b.n	8005c0a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc ffac 	bl	80029fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005aba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ad0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6899      	ldr	r1, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b4a      	ldr	r3, [pc, #296]	; (8005c14 <HAL_LTDC_Init+0x19c>)
 8005aec:	400b      	ands	r3, r1
 8005aee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	041b      	lsls	r3, r3, #16
 8005af6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6899      	ldr	r1, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68d9      	ldr	r1, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b3e      	ldr	r3, [pc, #248]	; (8005c14 <HAL_LTDC_Init+0x19c>)
 8005b1a:	400b      	ands	r3, r1
 8005b1c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68d9      	ldr	r1, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6919      	ldr	r1, [r3, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b33      	ldr	r3, [pc, #204]	; (8005c14 <HAL_LTDC_Init+0x19c>)
 8005b48:	400b      	ands	r3, r1
 8005b4a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6919      	ldr	r1, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6959      	ldr	r1, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <HAL_LTDC_Init+0x19c>)
 8005b76:	400b      	ands	r3, r1
 8005b78:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6959      	ldr	r1, [r3, #20]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0206 	orr.w	r2, r2, #6
 8005be6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	f000f800 	.word	0xf000f800

08005c18 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d023      	beq.n	8005c82 <HAL_LTDC_IRQHandler+0x6a>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01e      	beq.n	8005c82 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0204 	bic.w	r2, r2, #4
 8005c52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c62:	f043 0201 	orr.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f86f 	bl	8005d60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d023      	beq.n	8005cd4 <HAL_LTDC_IRQHandler+0xbc>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01e      	beq.n	8005cd4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0202 	bic.w	r2, r2, #2
 8005ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2202      	movs	r2, #2
 8005cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cb4:	f043 0202 	orr.w	r2, r3, #2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f846 	bl	8005d60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <HAL_LTDC_IRQHandler+0xfe>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d016      	beq.n	8005d16 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f00e fe07 	bl	8014924 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01b      	beq.n	8005d58 <HAL_LTDC_IRQHandler+0x140>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0208 	bic.w	r2, r2, #8
 8005d38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2208      	movs	r2, #8
 8005d40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f80e 	bl	8005d74 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d88:	b5b0      	push	{r4, r5, r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_LTDC_ConfigLayer+0x1a>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e02c      	b.n	8005dfc <HAL_LTDC_ConfigLayer+0x74>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2202      	movs	r2, #2
 8005dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2134      	movs	r1, #52	; 0x34
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	461d      	mov	r5, r3
 8005dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f849 	bl	8005e74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bdb0      	pop	{r4, r5, r7, pc}

08005e04 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_LTDC_ProgramLineEvent+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e023      	b.n	8005e64 <HAL_LTDC_ProgramLineEvent+0x60>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005e3c:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40016800 	.word	0x40016800

08005e74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e90:	4413      	add	r3, r2
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	01db      	lsls	r3, r3, #7
 8005ea0:	4413      	add	r3, r2
 8005ea2:	3384      	adds	r3, #132	; 0x84
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	01d2      	lsls	r2, r2, #7
 8005eb0:	440a      	add	r2, r1
 8005eb2:	3284      	adds	r2, #132	; 0x84
 8005eb4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005eb8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eca:	4413      	add	r3, r2
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	01db      	lsls	r3, r3, #7
 8005ed8:	440b      	add	r3, r1
 8005eda:	3384      	adds	r3, #132	; 0x84
 8005edc:	4619      	mov	r1, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ef2:	4413      	add	r3, r2
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	01db      	lsls	r3, r3, #7
 8005f02:	4413      	add	r3, r2
 8005f04:	3384      	adds	r3, #132	; 0x84
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	01d2      	lsls	r2, r2, #7
 8005f12:	440a      	add	r2, r1
 8005f14:	3284      	adds	r2, #132	; 0x84
 8005f16:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f2a:	4413      	add	r3, r2
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	01db      	lsls	r3, r3, #7
 8005f38:	440b      	add	r3, r1
 8005f3a:	3384      	adds	r3, #132	; 0x84
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	01db      	lsls	r3, r3, #7
 8005f4e:	4413      	add	r3, r2
 8005f50:	3384      	adds	r3, #132	; 0x84
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	6812      	ldr	r2, [r2, #0]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	01d2      	lsls	r2, r2, #7
 8005f5e:	440a      	add	r2, r1
 8005f60:	3284      	adds	r2, #132	; 0x84
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	01db      	lsls	r3, r3, #7
 8005f72:	4413      	add	r3, r2
 8005f74:	3384      	adds	r3, #132	; 0x84
 8005f76:	461a      	mov	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	061b      	lsls	r3, r3, #24
 8005f98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3384      	adds	r3, #132	; 0x84
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	01db      	lsls	r3, r3, #7
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3384      	adds	r3, #132	; 0x84
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	440b      	add	r3, r1
 8005fda:	3384      	adds	r3, #132	; 0x84
 8005fdc:	4619      	mov	r1, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4413      	add	r3, r2
 8005ff0:	3384      	adds	r3, #132	; 0x84
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	01d2      	lsls	r2, r2, #7
 8005ffe:	440a      	add	r2, r1
 8006000:	3284      	adds	r2, #132	; 0x84
 8006002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006006:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	01db      	lsls	r3, r3, #7
 8006012:	4413      	add	r3, r2
 8006014:	3384      	adds	r3, #132	; 0x84
 8006016:	461a      	mov	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	01db      	lsls	r3, r3, #7
 8006028:	4413      	add	r3, r2
 800602a:	3384      	adds	r3, #132	; 0x84
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	01db      	lsls	r3, r3, #7
 8006038:	440b      	add	r3, r1
 800603a:	3384      	adds	r3, #132	; 0x84
 800603c:	4619      	mov	r1, r3
 800603e:	4b58      	ldr	r3, [pc, #352]	; (80061a0 <LTDC_SetConfig+0x32c>)
 8006040:	4013      	ands	r3, r2
 8006042:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	68f9      	ldr	r1, [r7, #12]
 800604e:	6809      	ldr	r1, [r1, #0]
 8006050:	4608      	mov	r0, r1
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	01c9      	lsls	r1, r1, #7
 8006056:	4401      	add	r1, r0
 8006058:	3184      	adds	r1, #132	; 0x84
 800605a:	4313      	orrs	r3, r2
 800605c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	01db      	lsls	r3, r3, #7
 8006068:	4413      	add	r3, r2
 800606a:	3384      	adds	r3, #132	; 0x84
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	4413      	add	r3, r2
 800607a:	3384      	adds	r3, #132	; 0x84
 800607c:	461a      	mov	r2, r3
 800607e:	2300      	movs	r3, #0
 8006080:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	01db      	lsls	r3, r3, #7
 800608c:	4413      	add	r3, r2
 800608e:	3384      	adds	r3, #132	; 0x84
 8006090:	461a      	mov	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80060a0:	2304      	movs	r3, #4
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	e01b      	b.n	80060de <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d102      	bne.n	80060b4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80060ae:	2303      	movs	r3, #3
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	e014      	b.n	80060de <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d00b      	beq.n	80060d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d007      	beq.n	80060d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d003      	beq.n	80060d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	d102      	bne.n	80060da <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80060d4:	2302      	movs	r3, #2
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	e001      	b.n	80060de <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80060da:	2301      	movs	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	01db      	lsls	r3, r3, #7
 80060e8:	4413      	add	r3, r2
 80060ea:	3384      	adds	r3, #132	; 0x84
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	6812      	ldr	r2, [r2, #0]
 80060f2:	4611      	mov	r1, r2
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	01d2      	lsls	r2, r2, #7
 80060f8:	440a      	add	r2, r1
 80060fa:	3284      	adds	r2, #132	; 0x84
 80060fc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006100:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	041a      	lsls	r2, r3, #16
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	1acb      	subs	r3, r1, r3
 8006118:	69f9      	ldr	r1, [r7, #28]
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	3303      	adds	r3, #3
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	6809      	ldr	r1, [r1, #0]
 8006124:	4608      	mov	r0, r1
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	01c9      	lsls	r1, r1, #7
 800612a:	4401      	add	r1, r0
 800612c:	3184      	adds	r1, #132	; 0x84
 800612e:	4313      	orrs	r3, r2
 8006130:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	01db      	lsls	r3, r3, #7
 800613c:	4413      	add	r3, r2
 800613e:	3384      	adds	r3, #132	; 0x84
 8006140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4619      	mov	r1, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	01db      	lsls	r3, r3, #7
 800614c:	440b      	add	r3, r1
 800614e:	3384      	adds	r3, #132	; 0x84
 8006150:	4619      	mov	r1, r3
 8006152:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <LTDC_SetConfig+0x330>)
 8006154:	4013      	ands	r3, r2
 8006156:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	01db      	lsls	r3, r3, #7
 8006162:	4413      	add	r3, r2
 8006164:	3384      	adds	r3, #132	; 0x84
 8006166:	461a      	mov	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	4413      	add	r3, r2
 800617a:	3384      	adds	r3, #132	; 0x84
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	4611      	mov	r1, r2
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	01d2      	lsls	r2, r2, #7
 8006188:	440a      	add	r2, r1
 800618a:	3284      	adds	r2, #132	; 0x84
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	6013      	str	r3, [r2, #0]
}
 8006192:	bf00      	nop
 8006194:	3724      	adds	r7, #36	; 0x24
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	fffff8f8 	.word	0xfffff8f8
 80061a4:	fffff800 	.word	0xfffff800

080061a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b6:	6013      	str	r3, [r2, #0]
}
 80061b8:	bf00      	nop
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40007000 	.word	0x40007000

080061c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <HAL_PWREx_EnableOverDrive+0x98>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	4a22      	ldr	r2, [pc, #136]	; (8006260 <HAL_PWREx_EnableOverDrive+0x98>)
 80061d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061dc:	6413      	str	r3, [r2, #64]	; 0x40
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <HAL_PWREx_EnableOverDrive+0x98>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80061ea:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <HAL_PWREx_EnableOverDrive+0x9c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1d      	ldr	r2, [pc, #116]	; (8006264 <HAL_PWREx_EnableOverDrive+0x9c>)
 80061f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061f6:	f7fd fb23 	bl	8003840 <HAL_GetTick>
 80061fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061fc:	e009      	b.n	8006212 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061fe:	f7fd fb1f 	bl	8003840 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800620c:	d901      	bls.n	8006212 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e022      	b.n	8006258 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006212:	4b14      	ldr	r3, [pc, #80]	; (8006264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621e:	d1ee      	bne.n	80061fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006220:	4b10      	ldr	r3, [pc, #64]	; (8006264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a0f      	ldr	r2, [pc, #60]	; (8006264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800622a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800622c:	f7fd fb08 	bl	8003840 <HAL_GetTick>
 8006230:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006232:	e009      	b.n	8006248 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006234:	f7fd fb04 	bl	8003840 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006242:	d901      	bls.n	8006248 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e007      	b.n	8006258 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <HAL_PWREx_EnableOverDrive+0x9c>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006254:	d1ee      	bne.n	8006234 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40023800 	.word	0x40023800
 8006264:	40007000 	.word	0x40007000

08006268 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af02      	add	r7, sp, #8
 800626e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006270:	f7fd fae6 	bl	8003840 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e067      	b.n	8006350 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10b      	bne.n	80062a4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fc fc79 	bl	8002b8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800629a:	f241 3188 	movw	r1, #5000	; 0x1388
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f85e 	bl	8006360 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	021a      	lsls	r2, r3, #8
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	2120      	movs	r1, #32
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f856 	bl	800637c <QSPI_WaitFlagStateUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80062d4:	7afb      	ldrb	r3, [r7, #11]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d135      	bne.n	8006346 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <HAL_QSPI_Init+0xf0>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6852      	ldr	r2, [r2, #4]
 80062e8:	0611      	lsls	r1, r2, #24
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68d2      	ldr	r2, [r2, #12]
 80062ee:	4311      	orrs	r1, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	69d2      	ldr	r2, [r2, #28]
 80062f4:	4311      	orrs	r1, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6a12      	ldr	r2, [r2, #32]
 80062fa:	4311      	orrs	r1, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	430b      	orrs	r3, r1
 8006302:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <HAL_QSPI_Init+0xf4>)
 800630c:	4013      	ands	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6912      	ldr	r2, [r2, #16]
 8006312:	0411      	lsls	r1, r2, #16
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6952      	ldr	r2, [r2, #20]
 8006318:	4311      	orrs	r1, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6992      	ldr	r2, [r2, #24]
 800631e:	4311      	orrs	r1, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	430b      	orrs	r3, r1
 8006326:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800634e:	7afb      	ldrb	r3, [r7, #11]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	00ffff2f 	.word	0x00ffff2f
 800635c:	ffe0f8fe 	.word	0xffe0f8fe

08006360 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800638c:	e01a      	b.n	80063c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d016      	beq.n	80063c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fd fa53 	bl	8003840 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <QSPI_WaitFlagStateUntilTimeout+0x30>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2204      	movs	r2, #4
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	f043 0201 	orr.w	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e00e      	b.n	80063e2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d1d6      	bne.n	800638e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e291      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8087 	beq.w	800651e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006410:	4b96      	ldr	r3, [pc, #600]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b04      	cmp	r3, #4
 800641a:	d00c      	beq.n	8006436 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800641c:	4b93      	ldr	r3, [pc, #588]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 030c 	and.w	r3, r3, #12
 8006424:	2b08      	cmp	r3, #8
 8006426:	d112      	bne.n	800644e <HAL_RCC_OscConfig+0x62>
 8006428:	4b90      	ldr	r3, [pc, #576]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006434:	d10b      	bne.n	800644e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006436:	4b8d      	ldr	r3, [pc, #564]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d06c      	beq.n	800651c <HAL_RCC_OscConfig+0x130>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d168      	bne.n	800651c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e26b      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006456:	d106      	bne.n	8006466 <HAL_RCC_OscConfig+0x7a>
 8006458:	4b84      	ldr	r3, [pc, #528]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a83      	ldr	r2, [pc, #524]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800645e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e02e      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x9c>
 800646e:	4b7f      	ldr	r3, [pc, #508]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a7e      	ldr	r2, [pc, #504]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b7c      	ldr	r3, [pc, #496]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a7b      	ldr	r2, [pc, #492]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e01d      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0xc0>
 8006492:	4b76      	ldr	r3, [pc, #472]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a75      	ldr	r2, [pc, #468]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4b73      	ldr	r3, [pc, #460]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a72      	ldr	r2, [pc, #456]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 80064ac:	4b6f      	ldr	r3, [pc, #444]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a6e      	ldr	r2, [pc, #440]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4b6c      	ldr	r3, [pc, #432]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6b      	ldr	r2, [pc, #428]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80064be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fd f9b8 	bl	8003840 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fd f9b4 	bl	8003840 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e21f      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064e6:	4b61      	ldr	r3, [pc, #388]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0xe8>
 80064f2:	e014      	b.n	800651e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fd f9a4 	bl	8003840 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fd f9a0 	bl	8003840 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	; 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e20b      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800650e:	4b57      	ldr	r3, [pc, #348]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x110>
 800651a:	e000      	b.n	800651e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d069      	beq.n	80065fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800652a:	4b50      	ldr	r3, [pc, #320]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006536:	4b4d      	ldr	r3, [pc, #308]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b08      	cmp	r3, #8
 8006540:	d11c      	bne.n	800657c <HAL_RCC_OscConfig+0x190>
 8006542:	4b4a      	ldr	r3, [pc, #296]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d116      	bne.n	800657c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800654e:	4b47      	ldr	r3, [pc, #284]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_RCC_OscConfig+0x17a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d001      	beq.n	8006566 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e1df      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006566:	4b41      	ldr	r3, [pc, #260]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	493d      	ldr	r1, [pc, #244]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006576:	4313      	orrs	r3, r2
 8006578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657a:	e040      	b.n	80065fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d023      	beq.n	80065cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006584:	4b39      	ldr	r3, [pc, #228]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a38      	ldr	r2, [pc, #224]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fd f956 	bl	8003840 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006598:	f7fd f952 	bl	8003840 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e1bd      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065aa:	4b30      	ldr	r3, [pc, #192]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b6:	4b2d      	ldr	r3, [pc, #180]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4929      	ldr	r1, [pc, #164]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	600b      	str	r3, [r1, #0]
 80065ca:	e018      	b.n	80065fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065cc:	4b27      	ldr	r3, [pc, #156]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a26      	ldr	r2, [pc, #152]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fd f932 	bl	8003840 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e0:	f7fd f92e 	bl	8003840 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e199      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065f2:	4b1e      	ldr	r3, [pc, #120]	; (800666c <HAL_RCC_OscConfig+0x280>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d038      	beq.n	800667c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d019      	beq.n	8006646 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006612:	4b16      	ldr	r3, [pc, #88]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006616:	4a15      	ldr	r2, [pc, #84]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661e:	f7fd f90f 	bl	8003840 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006626:	f7fd f90b 	bl	8003840 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e176      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006638:	4b0c      	ldr	r3, [pc, #48]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800663a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f0      	beq.n	8006626 <HAL_RCC_OscConfig+0x23a>
 8006644:	e01a      	b.n	800667c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <HAL_RCC_OscConfig+0x280>)
 8006648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <HAL_RCC_OscConfig+0x280>)
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006652:	f7fd f8f5 	bl	8003840 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006658:	e00a      	b.n	8006670 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800665a:	f7fd f8f1 	bl	8003840 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d903      	bls.n	8006670 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e15c      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
 800666c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006670:	4b91      	ldr	r3, [pc, #580]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1ee      	bne.n	800665a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80a4 	beq.w	80067d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800668a:	4b8b      	ldr	r3, [pc, #556]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	4b88      	ldr	r3, [pc, #544]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	4a87      	ldr	r2, [pc, #540]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800669c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a0:	6413      	str	r3, [r2, #64]	; 0x40
 80066a2:	4b85      	ldr	r3, [pc, #532]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066b2:	4b82      	ldr	r3, [pc, #520]	; (80068bc <HAL_RCC_OscConfig+0x4d0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d118      	bne.n	80066f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066be:	4b7f      	ldr	r3, [pc, #508]	; (80068bc <HAL_RCC_OscConfig+0x4d0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a7e      	ldr	r2, [pc, #504]	; (80068bc <HAL_RCC_OscConfig+0x4d0>)
 80066c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ca:	f7fd f8b9 	bl	8003840 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d2:	f7fd f8b5 	bl	8003840 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b64      	cmp	r3, #100	; 0x64
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e120      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066e4:	4b75      	ldr	r3, [pc, #468]	; (80068bc <HAL_RCC_OscConfig+0x4d0>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d106      	bne.n	8006706 <HAL_RCC_OscConfig+0x31a>
 80066f8:	4b6f      	ldr	r3, [pc, #444]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	4a6e      	ldr	r2, [pc, #440]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6713      	str	r3, [r2, #112]	; 0x70
 8006704:	e02d      	b.n	8006762 <HAL_RCC_OscConfig+0x376>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0x33c>
 800670e:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	4a69      	ldr	r2, [pc, #420]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6713      	str	r3, [r2, #112]	; 0x70
 800671a:	4b67      	ldr	r3, [pc, #412]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	4a66      	ldr	r2, [pc, #408]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	6713      	str	r3, [r2, #112]	; 0x70
 8006726:	e01c      	b.n	8006762 <HAL_RCC_OscConfig+0x376>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b05      	cmp	r3, #5
 800672e:	d10c      	bne.n	800674a <HAL_RCC_OscConfig+0x35e>
 8006730:	4b61      	ldr	r3, [pc, #388]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006734:	4a60      	ldr	r2, [pc, #384]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006736:	f043 0304 	orr.w	r3, r3, #4
 800673a:	6713      	str	r3, [r2, #112]	; 0x70
 800673c:	4b5e      	ldr	r3, [pc, #376]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	4a5d      	ldr	r2, [pc, #372]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6713      	str	r3, [r2, #112]	; 0x70
 8006748:	e00b      	b.n	8006762 <HAL_RCC_OscConfig+0x376>
 800674a:	4b5b      	ldr	r3, [pc, #364]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a5a      	ldr	r2, [pc, #360]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
 8006756:	4b58      	ldr	r3, [pc, #352]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	4a57      	ldr	r2, [pc, #348]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800675c:	f023 0304 	bic.w	r3, r3, #4
 8006760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d015      	beq.n	8006796 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676a:	f7fd f869 	bl	8003840 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006770:	e00a      	b.n	8006788 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006772:	f7fd f865 	bl	8003840 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e0ce      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006788:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ee      	beq.n	8006772 <HAL_RCC_OscConfig+0x386>
 8006794:	e014      	b.n	80067c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006796:	f7fd f853 	bl	8003840 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679e:	f7fd f84f 	bl	8003840 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e0b8      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b4:	4b40      	ldr	r3, [pc, #256]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80067b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ee      	bne.n	800679e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d105      	bne.n	80067d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c6:	4b3c      	ldr	r3, [pc, #240]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	4a3b      	ldr	r2, [pc, #236]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80067cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80a4 	beq.w	8006924 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067dc:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d06b      	beq.n	80068c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d149      	bne.n	8006884 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f0:	4b31      	ldr	r3, [pc, #196]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80067f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fd f820 	bl	8003840 <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006804:	f7fd f81c 	bl	8003840 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e087      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006816:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	019b      	lsls	r3, r3, #6
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	3b01      	subs	r3, #1
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	4313      	orrs	r3, r2
 8006848:	4a1b      	ldr	r2, [pc, #108]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800684a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800684e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006850:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800685a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fc fff0 	bl	8003840 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006864:	f7fc ffec 	bl	8003840 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e057      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <HAL_RCC_OscConfig+0x478>
 8006882:	e04f      	b.n	8006924 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 800688a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fc ffd6 	bl	8003840 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006898:	f7fc ffd2 	bl	8003840 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e03d      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068aa:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <HAL_RCC_OscConfig+0x4cc>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <HAL_RCC_OscConfig+0x4ac>
 80068b6:	e035      	b.n	8006924 <HAL_RCC_OscConfig+0x538>
 80068b8:	40023800 	.word	0x40023800
 80068bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068c0:	4b1b      	ldr	r3, [pc, #108]	; (8006930 <HAL_RCC_OscConfig+0x544>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d028      	beq.n	8006920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d8:	429a      	cmp	r2, r3
 80068da:	d121      	bne.n	8006920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d11a      	bne.n	8006920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d111      	bne.n	8006920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d107      	bne.n	8006920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d001      	beq.n	8006924 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40023800 	.word	0x40023800

08006934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0d0      	b.n	8006aee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800694c:	4b6a      	ldr	r3, [pc, #424]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d910      	bls.n	800697c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695a:	4b67      	ldr	r3, [pc, #412]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 020f 	bic.w	r2, r3, #15
 8006962:	4965      	ldr	r1, [pc, #404]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800696a:	4b63      	ldr	r3, [pc, #396]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d001      	beq.n	800697c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0b8      	b.n	8006aee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d020      	beq.n	80069ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006994:	4b59      	ldr	r3, [pc, #356]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4a58      	ldr	r2, [pc, #352]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 800699a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800699e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069ac:	4b53      	ldr	r3, [pc, #332]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	4a52      	ldr	r2, [pc, #328]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 80069b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b8:	4b50      	ldr	r3, [pc, #320]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	494d      	ldr	r1, [pc, #308]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d040      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d107      	bne.n	80069ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069de:	4b47      	ldr	r3, [pc, #284]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d115      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e07f      	b.n	8006aee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d107      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f6:	4b41      	ldr	r3, [pc, #260]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e073      	b.n	8006aee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a06:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e06b      	b.n	8006aee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a16:	4b39      	ldr	r3, [pc, #228]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 0203 	bic.w	r2, r3, #3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4936      	ldr	r1, [pc, #216]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a28:	f7fc ff0a 	bl	8003840 <HAL_GetTick>
 8006a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2e:	e00a      	b.n	8006a46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a30:	f7fc ff06 	bl	8003840 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e053      	b.n	8006aee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a46:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 020c 	and.w	r2, r3, #12
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d1eb      	bne.n	8006a30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a58:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d210      	bcs.n	8006a88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a66:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f023 020f 	bic.w	r2, r3, #15
 8006a6e:	4922      	ldr	r1, [pc, #136]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a76:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d001      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e032      	b.n	8006aee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a94:	4b19      	ldr	r3, [pc, #100]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4916      	ldr	r1, [pc, #88]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	490e      	ldr	r1, [pc, #56]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ac6:	f000 f821 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8006aca:	4601      	mov	r1, r0
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <HAL_RCC_ClockConfig+0x1cc>)
 8006ad8:	5cd3      	ldrb	r3, [r2, r3]
 8006ada:	fa21 f303 	lsr.w	r3, r1, r3
 8006ade:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <HAL_RCC_ClockConfig+0x1d0>)
 8006ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <HAL_RCC_ClockConfig+0x1d4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fc fcf4 	bl	80034d4 <HAL_InitTick>

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40023c00 	.word	0x40023c00
 8006afc:	40023800 	.word	0x40023800
 8006b00:	08025cd0 	.word	0x08025cd0
 8006b04:	20000018 	.word	0x20000018
 8006b08:	2000001c 	.word	0x2000001c

08006b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	607b      	str	r3, [r7, #4]
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b22:	4b50      	ldr	r3, [pc, #320]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 030c 	and.w	r3, r3, #12
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d007      	beq.n	8006b3e <HAL_RCC_GetSysClockFreq+0x32>
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d008      	beq.n	8006b44 <HAL_RCC_GetSysClockFreq+0x38>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 808d 	bne.w	8006c52 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b38:	4b4b      	ldr	r3, [pc, #300]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b3a:	60bb      	str	r3, [r7, #8]
      break;
 8006b3c:	e08c      	b.n	8006c58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b3e:	4b4b      	ldr	r3, [pc, #300]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b40:	60bb      	str	r3, [r7, #8]
      break;
 8006b42:	e089      	b.n	8006c58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b44:	4b47      	ldr	r3, [pc, #284]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b4c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b4e:	4b45      	ldr	r3, [pc, #276]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d023      	beq.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b5a:	4b42      	ldr	r3, [pc, #264]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	099b      	lsrs	r3, r3, #6
 8006b60:	f04f 0400 	mov.w	r4, #0
 8006b64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	ea03 0501 	and.w	r5, r3, r1
 8006b70:	ea04 0602 	and.w	r6, r4, r2
 8006b74:	4a3d      	ldr	r2, [pc, #244]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b76:	fb02 f106 	mul.w	r1, r2, r6
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	fb02 f205 	mul.w	r2, r2, r5
 8006b80:	440a      	add	r2, r1
 8006b82:	493a      	ldr	r1, [pc, #232]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b84:	fba5 0101 	umull	r0, r1, r5, r1
 8006b88:	1853      	adds	r3, r2, r1
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f04f 0400 	mov.w	r4, #0
 8006b92:	461a      	mov	r2, r3
 8006b94:	4623      	mov	r3, r4
 8006b96:	f7f9 ff81 	bl	8000a9c <__aeabi_uldivmod>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e049      	b.n	8006c36 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ba2:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	099b      	lsrs	r3, r3, #6
 8006ba8:	f04f 0400 	mov.w	r4, #0
 8006bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	ea03 0501 	and.w	r5, r3, r1
 8006bb8:	ea04 0602 	and.w	r6, r4, r2
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	f04f 0400 	mov.w	r4, #0
 8006bc8:	0154      	lsls	r4, r2, #5
 8006bca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bce:	014b      	lsls	r3, r1, #5
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	1b49      	subs	r1, r1, r5
 8006bd6:	eb62 0206 	sbc.w	r2, r2, r6
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	f04f 0400 	mov.w	r4, #0
 8006be2:	0194      	lsls	r4, r2, #6
 8006be4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006be8:	018b      	lsls	r3, r1, #6
 8006bea:	1a5b      	subs	r3, r3, r1
 8006bec:	eb64 0402 	sbc.w	r4, r4, r2
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	00e2      	lsls	r2, r4, #3
 8006bfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bfe:	00d9      	lsls	r1, r3, #3
 8006c00:	460b      	mov	r3, r1
 8006c02:	4614      	mov	r4, r2
 8006c04:	195b      	adds	r3, r3, r5
 8006c06:	eb44 0406 	adc.w	r4, r4, r6
 8006c0a:	f04f 0100 	mov.w	r1, #0
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	02a2      	lsls	r2, r4, #10
 8006c14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c18:	0299      	lsls	r1, r3, #10
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	4621      	mov	r1, r4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f04f 0400 	mov.w	r4, #0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	f7f9 ff36 	bl	8000a9c <__aeabi_uldivmod>
 8006c30:	4603      	mov	r3, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006c36:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	0c1b      	lsrs	r3, r3, #16
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	3301      	adds	r3, #1
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	60bb      	str	r3, [r7, #8]
      break;
 8006c50:	e002      	b.n	8006c58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c52:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c54:	60bb      	str	r3, [r7, #8]
      break;
 8006c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c58:	68bb      	ldr	r3, [r7, #8]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40023800 	.word	0x40023800
 8006c68:	00f42400 	.word	0x00f42400
 8006c6c:	017d7840 	.word	0x017d7840

08006c70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c74:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c76:	681b      	ldr	r3, [r3, #0]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000018 	.word	0x20000018

08006c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c8c:	f7ff fff0 	bl	8006c70 <HAL_RCC_GetHCLKFreq>
 8006c90:	4601      	mov	r1, r0
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	0a9b      	lsrs	r3, r3, #10
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	4a03      	ldr	r2, [pc, #12]	; (8006cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ca0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	08025ce0 	.word	0x08025ce0

08006cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006cb4:	f7ff ffdc 	bl	8006c70 <HAL_RCC_GetHCLKFreq>
 8006cb8:	4601      	mov	r1, r0
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	0b5b      	lsrs	r3, r3, #13
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	4a03      	ldr	r2, [pc, #12]	; (8006cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cc6:	5cd3      	ldrb	r3, [r2, r3]
 8006cc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	08025ce0 	.word	0x08025ce0

08006cd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	220f      	movs	r2, #15
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ce8:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0203 	and.w	r2, r3, #3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d00:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	08db      	lsrs	r3, r3, #3
 8006d12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <HAL_RCC_GetClockConfig+0x60>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 020f 	and.w	r2, r3, #15
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	601a      	str	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40023800 	.word	0x40023800
 8006d38:	40023c00 	.word	0x40023c00

08006d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d012      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d64:	4b69      	ldr	r3, [pc, #420]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4a68      	ldr	r2, [pc, #416]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d6e:	6093      	str	r3, [r2, #8]
 8006d70:	4b66      	ldr	r3, [pc, #408]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	4964      	ldr	r1, [pc, #400]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006d86:	2301      	movs	r3, #1
 8006d88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d96:	4b5d      	ldr	r3, [pc, #372]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	4959      	ldr	r1, [pc, #356]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006db4:	d101      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d017      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006dd2:	4b4e      	ldr	r3, [pc, #312]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	494a      	ldr	r1, [pc, #296]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006df0:	d101      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006df2:	2301      	movs	r3, #1
 8006df4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 808b 	beq.w	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e20:	4b3a      	ldr	r3, [pc, #232]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	4a39      	ldr	r2, [pc, #228]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e2c:	4b37      	ldr	r3, [pc, #220]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e34:	60bb      	str	r3, [r7, #8]
 8006e36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e38:	4b35      	ldr	r3, [pc, #212]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a34      	ldr	r2, [pc, #208]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e44:	f7fc fcfc 	bl	8003840 <HAL_GetTick>
 8006e48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4c:	f7fc fcf8 	bl	8003840 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b64      	cmp	r3, #100	; 0x64
 8006e58:	d901      	bls.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e355      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e6a:	4b28      	ldr	r3, [pc, #160]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d035      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d02e      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e88:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e92:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea2:	4a1a      	ldr	r2, [pc, #104]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006eaa:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006eb0:	4b16      	ldr	r3, [pc, #88]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d114      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fc fcc0 	bl	8003840 <HAL_GetTick>
 8006ec0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec2:	e00a      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ec4:	f7fc fcbc 	bl	8003840 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e317      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0ee      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef2:	d111      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f00:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f02:	400b      	ands	r3, r1
 8006f04:	4901      	ldr	r1, [pc, #4]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	608b      	str	r3, [r1, #8]
 8006f0a:	e00b      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40007000 	.word	0x40007000
 8006f14:	0ffffcff 	.word	0x0ffffcff
 8006f18:	4bb0      	ldr	r3, [pc, #704]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	4aaf      	ldr	r2, [pc, #700]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f22:	6093      	str	r3, [r2, #8]
 8006f24:	4bad      	ldr	r3, [pc, #692]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f30:	49aa      	ldr	r1, [pc, #680]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d010      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f42:	4ba6      	ldr	r3, [pc, #664]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f48:	4aa4      	ldr	r2, [pc, #656]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006f52:	4ba2      	ldr	r3, [pc, #648]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	499f      	ldr	r1, [pc, #636]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f70:	4b9a      	ldr	r3, [pc, #616]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7e:	4997      	ldr	r1, [pc, #604]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f92:	4b92      	ldr	r3, [pc, #584]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa0:	498e      	ldr	r1, [pc, #568]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fb4:	4b89      	ldr	r3, [pc, #548]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc2:	4986      	ldr	r1, [pc, #536]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fd6:	4b81      	ldr	r3, [pc, #516]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	497d      	ldr	r1, [pc, #500]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ff8:	4b78      	ldr	r3, [pc, #480]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f023 0203 	bic.w	r2, r3, #3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	4975      	ldr	r1, [pc, #468]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800701a:	4b70      	ldr	r3, [pc, #448]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f023 020c 	bic.w	r2, r3, #12
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007028:	496c      	ldr	r1, [pc, #432]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800703c:	4b67      	ldr	r3, [pc, #412]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007042:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704a:	4964      	ldr	r1, [pc, #400]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800705e:	4b5f      	ldr	r3, [pc, #380]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007064:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706c:	495b      	ldr	r1, [pc, #364]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007080:	4b56      	ldr	r3, [pc, #344]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007086:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	4953      	ldr	r1, [pc, #332]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80070a2:	4b4e      	ldr	r3, [pc, #312]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	494a      	ldr	r1, [pc, #296]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80070c4:	4b45      	ldr	r3, [pc, #276]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d2:	4942      	ldr	r1, [pc, #264]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80070e6:	4b3d      	ldr	r3, [pc, #244]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f4:	4939      	ldr	r1, [pc, #228]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007108:	4b34      	ldr	r3, [pc, #208]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007116:	4931      	ldr	r1, [pc, #196]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d011      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800712a:	4b2c      	ldr	r3, [pc, #176]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007138:	4928      	ldr	r1, [pc, #160]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007148:	d101      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800714a:	2301      	movs	r3, #1
 800714c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800716a:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007178:	4918      	ldr	r1, [pc, #96]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800718c:	4b13      	ldr	r3, [pc, #76]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719c:	490f      	ldr	r1, [pc, #60]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d005      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071b2:	f040 80d8 	bne.w	8007366 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a08      	ldr	r2, [pc, #32]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071c2:	f7fc fb3d 	bl	8003840 <HAL_GetTick>
 80071c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071c8:	e00a      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071ca:	f7fc fb39 	bl	8003840 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b64      	cmp	r3, #100	; 0x64
 80071d6:	d903      	bls.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e196      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80071dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071e0:	4b6c      	ldr	r3, [pc, #432]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1ee      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d021      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11d      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007200:	4b64      	ldr	r3, [pc, #400]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800720e:	4b61      	ldr	r3, [pc, #388]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007214:	0e1b      	lsrs	r3, r3, #24
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	019a      	lsls	r2, r3, #6
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	431a      	orrs	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	061b      	lsls	r3, r3, #24
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	071b      	lsls	r3, r3, #28
 8007234:	4957      	ldr	r1, [pc, #348]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800725a:	2b00      	cmp	r3, #0
 800725c:	d02e      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007266:	d129      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007268:	4b4a      	ldr	r3, [pc, #296]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800726a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007276:	4b47      	ldr	r3, [pc, #284]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727c:	0f1b      	lsrs	r3, r3, #28
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	019a      	lsls	r2, r3, #6
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	041b      	lsls	r3, r3, #16
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	061b      	lsls	r3, r3, #24
 8007296:	431a      	orrs	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	071b      	lsls	r3, r3, #28
 800729c:	493d      	ldr	r1, [pc, #244]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072a4:	4b3b      	ldr	r3, [pc, #236]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072aa:	f023 021f 	bic.w	r2, r3, #31
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	3b01      	subs	r3, #1
 80072b4:	4937      	ldr	r1, [pc, #220]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01d      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072c8:	4b32      	ldr	r3, [pc, #200]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ce:	0e1b      	lsrs	r3, r3, #24
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072d6:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072dc:	0f1b      	lsrs	r3, r3, #28
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	019a      	lsls	r2, r3, #6
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	431a      	orrs	r2, r3
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	061b      	lsls	r3, r3, #24
 80072f6:	431a      	orrs	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	071b      	lsls	r3, r3, #28
 80072fc:	4925      	ldr	r1, [pc, #148]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d011      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	019a      	lsls	r2, r3, #6
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	071b      	lsls	r3, r3, #28
 800732c:	4919      	ldr	r1, [pc, #100]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007334:	4b17      	ldr	r3, [pc, #92]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a16      	ldr	r2, [pc, #88]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800733a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800733e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007340:	f7fc fa7e 	bl	8003840 <HAL_GetTick>
 8007344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007346:	e008      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007348:	f7fc fa7a 	bl	8003840 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b64      	cmp	r3, #100	; 0x64
 8007354:	d901      	bls.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e0d7      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800735a:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f0      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b01      	cmp	r3, #1
 800736a:	f040 80cd 	bne.w	8007508 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a08      	ldr	r2, [pc, #32]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800737a:	f7fc fa61 	bl	8003840 <HAL_GetTick>
 800737e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007380:	e00a      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007382:	f7fc fa5d 	bl	8003840 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b64      	cmp	r3, #100	; 0x64
 800738e:	d903      	bls.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e0ba      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007394:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007398:	4b5e      	ldr	r3, [pc, #376]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a4:	d0ed      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d02e      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12a      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073ce:	4b51      	ldr	r3, [pc, #324]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073dc:	4b4d      	ldr	r3, [pc, #308]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	0f1b      	lsrs	r3, r3, #28
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	019a      	lsls	r2, r3, #6
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	041b      	lsls	r3, r3, #16
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	061b      	lsls	r3, r3, #24
 80073fc:	431a      	orrs	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	071b      	lsls	r3, r3, #28
 8007402:	4944      	ldr	r1, [pc, #272]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007404:	4313      	orrs	r3, r2
 8007406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800740a:	4b42      	ldr	r3, [pc, #264]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800740c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007410:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	3b01      	subs	r3, #1
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	493d      	ldr	r1, [pc, #244]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d022      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007438:	d11d      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800743a:	4b36      	ldr	r3, [pc, #216]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007440:	0e1b      	lsrs	r3, r3, #24
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007448:	4b32      	ldr	r3, [pc, #200]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744e:	0f1b      	lsrs	r3, r3, #28
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	019a      	lsls	r2, r3, #6
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	431a      	orrs	r2, r3
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	061b      	lsls	r3, r3, #24
 8007468:	431a      	orrs	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	071b      	lsls	r3, r3, #28
 800746e:	4929      	ldr	r1, [pc, #164]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d028      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007490:	4b20      	ldr	r3, [pc, #128]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	019a      	lsls	r2, r3, #6
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	041b      	lsls	r3, r3, #16
 80074a8:	431a      	orrs	r2, r3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	061b      	lsls	r3, r3, #24
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	071b      	lsls	r3, r3, #28
 80074b6:	4917      	ldr	r1, [pc, #92]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4911      	ldr	r1, [pc, #68]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e0:	f7fc f9ae 	bl	8003840 <HAL_GetTick>
 80074e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074e8:	f7fc f9aa 	bl	8003840 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b64      	cmp	r3, #100	; 0x64
 80074f4:	d901      	bls.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e007      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074fa:	4b06      	ldr	r3, [pc, #24]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007506:	d1ef      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40023800 	.word	0x40023800

08007518 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007536:	f040 8086 	bne.w	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800753a:	4b8d      	ldr	r3, [pc, #564]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800753c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007540:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007548:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007550:	d03e      	beq.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007556:	d073      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d000      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800755c:	e074      	b.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800755e:	4b84      	ldr	r3, [pc, #528]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d108      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800756a:	4b81      	ldr	r3, [pc, #516]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007572:	4a80      	ldr	r2, [pc, #512]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007574:	fbb2 f3f3 	udiv	r3, r2, r3
 8007578:	613b      	str	r3, [r7, #16]
 800757a:	e007      	b.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800757c:	4b7c      	ldr	r3, [pc, #496]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007584:	4a7c      	ldr	r2, [pc, #496]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800758c:	4b78      	ldr	r3, [pc, #480]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	0e1b      	lsrs	r3, r3, #24
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800759a:	4b75      	ldr	r3, [pc, #468]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a0:	099b      	lsrs	r3, r3, #6
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	fb02 f203 	mul.w	r2, r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80075b4:	4b6e      	ldr	r3, [pc, #440]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ba:	0a1b      	lsrs	r3, r3, #8
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	3301      	adds	r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	617b      	str	r3, [r7, #20]
        break;
 80075ce:	e03b      	b.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075d0:	4b67      	ldr	r3, [pc, #412]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075dc:	4b64      	ldr	r3, [pc, #400]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e4:	4a63      	ldr	r2, [pc, #396]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80075e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	e007      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80075ee:	4b60      	ldr	r3, [pc, #384]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075f6:	4a60      	ldr	r2, [pc, #384]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80075fe:	4b5c      	ldr	r3, [pc, #368]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007604:	0e1b      	lsrs	r3, r3, #24
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800760c:	4b58      	ldr	r3, [pc, #352]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800760e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007612:	099b      	lsrs	r3, r3, #6
 8007614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	fb02 f203 	mul.w	r2, r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	fbb2 f3f3 	udiv	r3, r2, r3
 8007624:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007626:	4b52      	ldr	r3, [pc, #328]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	fbb2 f3f3 	udiv	r3, r2, r3
 800763c:	617b      	str	r3, [r7, #20]
        break;
 800763e:	e003      	b.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007640:	4b4e      	ldr	r3, [pc, #312]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007642:	617b      	str	r3, [r7, #20]
        break;
 8007644:	e000      	b.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007646:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800764e:	f040 8086 	bne.w	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007652:	4b47      	ldr	r3, [pc, #284]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007658:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007660:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007668:	d03e      	beq.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800766a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800766e:	d073      	beq.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d000      	beq.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007674:	e074      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007676:	4b3e      	ldr	r3, [pc, #248]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d108      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007682:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800768a:	4a3a      	ldr	r2, [pc, #232]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	613b      	str	r3, [r7, #16]
 8007692:	e007      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007694:	4b36      	ldr	r3, [pc, #216]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800769c:	4a36      	ldr	r2, [pc, #216]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80076a4:	4b32      	ldr	r3, [pc, #200]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076aa:	0e1b      	lsrs	r3, r3, #24
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80076b2:	4b2f      	ldr	r3, [pc, #188]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b8:	099b      	lsrs	r3, r3, #6
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	fb02 f203 	mul.w	r2, r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80076cc:	4b28      	ldr	r3, [pc, #160]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	f003 031f 	and.w	r3, r3, #31
 80076d8:	3301      	adds	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e4:	617b      	str	r3, [r7, #20]
        break;
 80076e6:	e03b      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076e8:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d108      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076f4:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	e007      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007706:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800770e:	4a1a      	ldr	r2, [pc, #104]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007716:	4b16      	ldr	r3, [pc, #88]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771c:	0e1b      	lsrs	r3, r3, #24
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007724:	4b12      	ldr	r3, [pc, #72]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800772a:	099b      	lsrs	r3, r3, #6
 800772c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	fb02 f203 	mul.w	r2, r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	fbb2 f3f3 	udiv	r3, r2, r3
 800773c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	617b      	str	r3, [r7, #20]
        break;
 8007756:	e003      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007758:	4b08      	ldr	r3, [pc, #32]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800775a:	617b      	str	r3, [r7, #20]
        break;
 800775c:	e000      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800775e:	bf00      	nop

  return frequency;
 8007760:	697b      	ldr	r3, [r7, #20]
}
 8007762:	4618      	mov	r0, r3
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	40023800 	.word	0x40023800
 8007774:	00f42400 	.word	0x00f42400
 8007778:	017d7840 	.word	0x017d7840
 800777c:	00bb8000 	.word	0x00bb8000

08007780 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e06b      	b.n	800786a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7f5b      	ldrb	r3, [r3, #29]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fb fa82 	bl	8002cac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	22ca      	movs	r2, #202	; 0xca
 80077b4:	625a      	str	r2, [r3, #36]	; 0x24
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2253      	movs	r2, #83	; 0x53
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fb00 	bl	8007dc4 <RTC_EnterInitMode>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	22ff      	movs	r2, #255	; 0xff
 80077d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2204      	movs	r2, #4
 80077d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e046      	b.n	800786a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6899      	ldr	r1, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b23      	ldr	r3, [pc, #140]	; (8007874 <HAL_RTC_Init+0xf4>)
 80077e8:	400b      	ands	r3, r1
 80077ea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6899      	ldr	r1, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	68d2      	ldr	r2, [r2, #12]
 8007812:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6919      	ldr	r1, [r3, #16]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	041a      	lsls	r2, r3, #16
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007836:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0208 	bic.w	r2, r2, #8
 8007846:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	22ff      	movs	r2, #255	; 0xff
 8007860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007868:	2300      	movs	r3, #0
  }
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	ff8fffbf 	.word	0xff8fffbf

08007878 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007878:	b590      	push	{r4, r7, lr}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	7f1b      	ldrb	r3, [r3, #28]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_RTC_SetTime+0x1c>
 8007890:	2302      	movs	r3, #2
 8007892:	e0a8      	b.n	80079e6 <HAL_RTC_SetTime+0x16e>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2202      	movs	r2, #2
 800789e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d126      	bne.n	80078f4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 faac 	bl	8007e1c <RTC_ByteToBcd2>
 80078c4:	4603      	mov	r3, r0
 80078c6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 faa5 	bl	8007e1c <RTC_ByteToBcd2>
 80078d2:	4603      	mov	r3, r0
 80078d4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078d6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	789b      	ldrb	r3, [r3, #2]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fa9d 	bl	8007e1c <RTC_ByteToBcd2>
 80078e2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078e4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	7b1b      	ldrb	r3, [r3, #12]
 80078ec:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	e018      	b.n	8007926 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007914:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800791a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	7b1b      	ldrb	r3, [r3, #12]
 8007920:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	22ca      	movs	r2, #202	; 0xca
 800792c:	625a      	str	r2, [r3, #36]	; 0x24
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2253      	movs	r2, #83	; 0x53
 8007934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 fa44 	bl	8007dc4 <RTC_EnterInitMode>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	22ff      	movs	r2, #255	; 0xff
 8007948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2204      	movs	r2, #4
 800794e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e045      	b.n	80079e6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	6979      	ldr	r1, [r7, #20]
 8007960:	4b23      	ldr	r3, [pc, #140]	; (80079f0 <HAL_RTC_SetTime+0x178>)
 8007962:	400b      	ands	r3, r1
 8007964:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007974:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6899      	ldr	r1, [r3, #8]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	691a      	ldr	r2, [r3, #16]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800799c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d111      	bne.n	80079d0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f9e1 	bl	8007d74 <HAL_RTC_WaitForSynchro>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	22ff      	movs	r2, #255	; 0xff
 80079be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2204      	movs	r2, #4
 80079c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e00a      	b.n	80079e6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	22ff      	movs	r2, #255	; 0xff
 80079d6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80079e4:	2300      	movs	r3, #0
  }
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd90      	pop	{r4, r7, pc}
 80079ee:	bf00      	nop
 80079f0:	007f7f7f 	.word	0x007f7f7f

080079f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	7f1b      	ldrb	r3, [r3, #28]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_RTC_SetDate+0x1c>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e092      	b.n	8007b36 <HAL_RTC_SetDate+0x142>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10e      	bne.n	8007a40 <HAL_RTC_SetDate+0x4c>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	f023 0310 	bic.w	r3, r3, #16
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	330a      	adds	r3, #10
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d11c      	bne.n	8007a80 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	78db      	ldrb	r3, [r3, #3]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f9e6 	bl	8007e1c <RTC_ByteToBcd2>
 8007a50:	4603      	mov	r3, r0
 8007a52:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f9df 	bl	8007e1c <RTC_ByteToBcd2>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a62:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	789b      	ldrb	r3, [r3, #2]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f9d7 	bl	8007e1c <RTC_ByteToBcd2>
 8007a6e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a70:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	e00e      	b.n	8007a9e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	78db      	ldrb	r3, [r3, #3]
 8007a84:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a8c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007a92:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	22ca      	movs	r2, #202	; 0xca
 8007aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2253      	movs	r2, #83	; 0x53
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f988 	bl	8007dc4 <RTC_EnterInitMode>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	22ff      	movs	r2, #255	; 0xff
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e031      	b.n	8007b36 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	6979      	ldr	r1, [r7, #20]
 8007ad8:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <HAL_RTC_SetDate+0x14c>)
 8007ada:	400b      	ands	r3, r1
 8007adc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d111      	bne.n	8007b20 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f939 	bl	8007d74 <HAL_RTC_WaitForSynchro>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	22ff      	movs	r2, #255	; 0xff
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2204      	movs	r2, #4
 8007b14:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e00a      	b.n	8007b36 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	22ff      	movs	r2, #255	; 0xff
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b34:	2300      	movs	r3, #0
  }
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd90      	pop	{r4, r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	00ffff3f 	.word	0x00ffff3f

08007b44 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b089      	sub	sp, #36	; 0x24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61fb      	str	r3, [r7, #28]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	7f1b      	ldrb	r3, [r3, #28]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_RTC_SetAlarm+0x24>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e101      	b.n	8007d6c <HAL_RTC_SetAlarm+0x228>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2202      	movs	r2, #2
 8007b72:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d137      	bne.n	8007bea <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f942 	bl	8007e1c <RTC_ByteToBcd2>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f93b 	bl	8007e1c <RTC_ByteToBcd2>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007baa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	789b      	ldrb	r3, [r3, #2]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f933 	bl	8007e1c <RTC_ByteToBcd2>
 8007bb6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007bb8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	7b1b      	ldrb	r3, [r3, #12]
 8007bc0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007bc2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f925 	bl	8007e1c <RTC_ByteToBcd2>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bd6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bde:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e023      	b.n	8007c32 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c0a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c10:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	7b1b      	ldrb	r3, [r3, #12]
 8007c16:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c18:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c20:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	22ca      	movs	r2, #202	; 0xca
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2253      	movs	r2, #83	; 0x53
 8007c4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c56:	d13f      	bne.n	8007cd8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c66:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c76:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c78:	f7fb fde2 	bl	8003840 <HAL_GetTick>
 8007c7c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007c7e:	e013      	b.n	8007ca8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c80:	f7fb fdde 	bl	8003840 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c8e:	d90b      	bls.n	8007ca8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	22ff      	movs	r2, #255	; 0xff
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e061      	b.n	8007d6c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0e4      	beq.n	8007c80 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd4:	609a      	str	r2, [r3, #8]
 8007cd6:	e03e      	b.n	8007d56 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ce6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cf6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cf8:	f7fb fda2 	bl	8003840 <HAL_GetTick>
 8007cfc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007cfe:	e013      	b.n	8007d28 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d00:	f7fb fd9e 	bl	8003840 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d0e:	d90b      	bls.n	8007d28 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e021      	b.n	8007d6c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0e4      	beq.n	8007d00 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d54:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	22ff      	movs	r2, #255	; 0xff
 8007d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3724      	adds	r7, #36	; 0x24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd90      	pop	{r4, r7, pc}

08007d74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d90:	f7fb fd56 	bl	8003840 <HAL_GetTick>
 8007d94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d96:	e009      	b.n	8007dac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d98:	f7fb fd52 	bl	8003840 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007da6:	d901      	bls.n	8007dac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e007      	b.n	8007dbc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0ee      	beq.n	8007d98 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d119      	bne.n	8007e12 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f04f 32ff 	mov.w	r2, #4294967295
 8007de6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007de8:	f7fb fd2a 	bl	8003840 <HAL_GetTick>
 8007dec:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dee:	e009      	b.n	8007e04 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007df0:	f7fb fd26 	bl	8003840 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dfe:	d901      	bls.n	8007e04 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e007      	b.n	8007e14 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0ee      	beq.n	8007df0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007e2a:	e005      	b.n	8007e38 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	3b0a      	subs	r3, #10
 8007e36:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d8f6      	bhi.n	8007e2c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	b2db      	uxtb	r3, r3
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	7f1b      	ldrb	r3, [r3, #28]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e03e      	b.n	8007ef2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	22ca      	movs	r2, #202	; 0xca
 8007e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2253      	movs	r2, #83	; 0x53
 8007ea2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0206 	bic.w	r2, r2, #6
 8007eb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eda:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	22ff      	movs	r2, #255	; 0xff
 8007ee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	fffff7f7 	.word	0xfffff7f7

08007f04 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e149      	b.n	80081b6 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fb fa62 	bl	8003400 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f94f 	bl	80081e8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d007      	beq.n	8007f62 <HAL_SAI_Init+0x5e>
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d302      	bcc.n	8007f5c <HAL_SAI_Init+0x58>
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d006      	beq.n	8007f68 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007f5a:	e008      	b.n	8007f6e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
      break;
 8007f60:	e005      	b.n	8007f6e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007f62:	2310      	movs	r3, #16
 8007f64:	61fb      	str	r3, [r7, #28]
      break;
 8007f66:	e002      	b.n	8007f6e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007f68:	2320      	movs	r3, #32
 8007f6a:	61fb      	str	r3, [r7, #28]
      break;
 8007f6c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d81d      	bhi.n	8007fb2 <HAL_SAI_Init+0xae>
 8007f76:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <HAL_SAI_Init+0x78>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007f8d 	.word	0x08007f8d
 8007f80:	08007f93 	.word	0x08007f93
 8007f84:	08007f9b 	.word	0x08007f9b
 8007f88:	08007fa3 	.word	0x08007fa3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007f90:	e010      	b.n	8007fb4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f96:	617b      	str	r3, [r7, #20]
      }
      break;
 8007f98:	e00c      	b.n	8007fb4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f9e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007fa0:	e008      	b.n	8007fb4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fa6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f043 0301 	orr.w	r3, r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007fb0:	e000      	b.n	8007fb4 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007fb2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a81      	ldr	r2, [pc, #516]	; (80081c0 <HAL_SAI_Init+0x2bc>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_SAI_Init+0xc4>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a80      	ldr	r2, [pc, #512]	; (80081c4 <HAL_SAI_Init+0x2c0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d103      	bne.n	8007fd0 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007fc8:	4a7f      	ldr	r2, [pc, #508]	; (80081c8 <HAL_SAI_Init+0x2c4>)
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	e002      	b.n	8007fd6 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007fd0:	4a7e      	ldr	r2, [pc, #504]	; (80081cc <HAL_SAI_Init+0x2c8>)
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d043      	beq.n	8008066 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a76      	ldr	r2, [pc, #472]	; (80081c0 <HAL_SAI_Init+0x2bc>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d004      	beq.n	8007ff6 <HAL_SAI_Init+0xf2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a74      	ldr	r2, [pc, #464]	; (80081c4 <HAL_SAI_Init+0x2c0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d104      	bne.n	8008000 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ff6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007ffa:	f7ff fa8d 	bl	8007518 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ffe:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a72      	ldr	r2, [pc, #456]	; (80081d0 <HAL_SAI_Init+0x2cc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d004      	beq.n	8008014 <HAL_SAI_Init+0x110>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a71      	ldr	r2, [pc, #452]	; (80081d4 <HAL_SAI_Init+0x2d0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d104      	bne.n	800801e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008014:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008018:	f7ff fa7e 	bl	8007518 <HAL_RCCEx_GetPeriphCLKFreq>
 800801c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	461a      	mov	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	025b      	lsls	r3, r3, #9
 8008030:	fbb2 f3f3 	udiv	r3, r2, r3
 8008034:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4a67      	ldr	r2, [pc, #412]	; (80081d8 <HAL_SAI_Init+0x2d4>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	08da      	lsrs	r2, r3, #3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008044:	68f9      	ldr	r1, [r7, #12]
 8008046:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <HAL_SAI_Init+0x2d4>)
 8008048:	fba3 2301 	umull	r2, r3, r3, r1
 800804c:	08da      	lsrs	r2, r3, #3
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	1aca      	subs	r2, r1, r3
 8008058:	2a08      	cmp	r2, #8
 800805a:	d904      	bls.n	8008066 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_SAI_Init+0x172>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d109      	bne.n	800808a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_SAI_Init+0x17e>
 800807e:	2300      	movs	r3, #0
 8008080:	e001      	b.n	8008086 <HAL_SAI_Init+0x182>
 8008082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	e008      	b.n	800809c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808e:	2b01      	cmp	r3, #1
 8008090:	d102      	bne.n	8008098 <HAL_SAI_Init+0x194>
 8008092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008096:	e000      	b.n	800809a <HAL_SAI_Init+0x196>
 8008098:	2300      	movs	r3, #0
 800809a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6819      	ldr	r1, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4b4d      	ldr	r3, [pc, #308]	; (80081dc <HAL_SAI_Init+0x2d8>)
 80080a8:	400b      	ands	r3, r1
 80080aa:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6819      	ldr	r1, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080c0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	431a      	orrs	r2, r3
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80080d4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080e0:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	051b      	lsls	r3, r3, #20
 80080e8:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6859      	ldr	r1, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	4b38      	ldr	r3, [pc, #224]	; (80081e0 <HAL_SAI_Init+0x2dc>)
 80080fe:	400b      	ands	r3, r1
 8008100:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6859      	ldr	r1, [r3, #4]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	699a      	ldr	r2, [r3, #24]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6899      	ldr	r1, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b2e      	ldr	r3, [pc, #184]	; (80081e4 <HAL_SAI_Init+0x2e0>)
 800812c:	400b      	ands	r3, r1
 800812e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6899      	ldr	r1, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008140:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008146:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800814c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008152:	3b01      	subs	r3, #1
 8008154:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008156:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68d9      	ldr	r1, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800816e:	400b      	ands	r3, r1
 8008170:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68d9      	ldr	r1, [r3, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008180:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008186:	041b      	lsls	r3, r3, #16
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818e:	3b01      	subs	r3, #1
 8008190:	021b      	lsls	r3, r3, #8
 8008192:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3720      	adds	r7, #32
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	40015804 	.word	0x40015804
 80081c4:	40015824 	.word	0x40015824
 80081c8:	40015800 	.word	0x40015800
 80081cc:	40015c00 	.word	0x40015c00
 80081d0:	40015c04 	.word	0x40015c04
 80081d4:	40015c24 	.word	0x40015c24
 80081d8:	cccccccd 	.word	0xcccccccd
 80081dc:	ff05c010 	.word	0xff05c010
 80081e0:	ffff1ff0 	.word	0xffff1ff0
 80081e4:	fff88000 	.word	0xfff88000

080081e8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80081e8:	b490      	push	{r4, r7}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80081f0:	4b16      	ldr	r3, [pc, #88]	; (800824c <SAI_Disable+0x64>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a16      	ldr	r2, [pc, #88]	; (8008250 <SAI_Disable+0x68>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	0b1b      	lsrs	r3, r3, #12
 80081fc:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008210:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008212:	4623      	mov	r3, r4
 8008214:	1e5c      	subs	r4, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	73fb      	strb	r3, [r7, #15]
      break;
 800822e:	e006      	b.n	800823e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e9      	bne.n	8008212 <SAI_Disable+0x2a>

  return status;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bc90      	pop	{r4, r7}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000018 	.word	0x20000018
 8008250:	95cbec1b 	.word	0x95cbec1b

08008254 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e022      	b.n	80082ac <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d105      	bne.n	800827e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7fa fd31 	bl	8002ce0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2203      	movs	r2, #3
 8008282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f814 	bl	80082b4 <HAL_SD_InitCard>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e00a      	b.n	80082ac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b08e      	sub	sp, #56	; 0x38
 80082b8:	af04      	add	r7, sp, #16
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082bc:	2300      	movs	r3, #0
 80082be:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80082d0:	2376      	movs	r3, #118	; 0x76
 80082d2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681d      	ldr	r5, [r3, #0]
 80082d8:	466c      	mov	r4, sp
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082e6:	f107 0308 	add.w	r3, r7, #8
 80082ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082ec:	4628      	mov	r0, r5
 80082ee:	f002 ff51 	bl	800b194 <SDMMC_Init>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80082f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e03b      	b.n	800837c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008312:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f002 ff74 	bl	800b206 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800832c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fde6 	bl	8008f00 <SD_PowerON>
 8008334:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e013      	b.n	800837c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fd05 	bl	8008d64 <SD_InitCard>
 800835a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3728      	adds	r7, #40	; 0x28
 8008380:	46bd      	mov	sp, r7
 8008382:	bdb0      	pop	{r4, r5, r7, pc}

08008384 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08c      	sub	sp, #48	; 0x30
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d107      	bne.n	80083ac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0cc      	b.n	8008546 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	f040 80c5 	bne.w	8008544 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	441a      	add	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d907      	bls.n	80083de <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e0b3      	b.n	8008546 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2203      	movs	r2, #3
 80083e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80083fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	4a53      	ldr	r2, [pc, #332]	; (8008550 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	4a52      	ldr	r2, [pc, #328]	; (8008554 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800840c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	2200      	movs	r2, #0
 8008414:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3380      	adds	r3, #128	; 0x80
 8008420:	4619      	mov	r1, r3
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	025b      	lsls	r3, r3, #9
 8008428:	089b      	lsrs	r3, r3, #2
 800842a:	f7fc fcb7 	bl	8004d9c <HAL_DMA_Start_IT>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d017      	beq.n	8008464 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008442:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a43      	ldr	r2, [pc, #268]	; (8008558 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800844a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e070      	b.n	8008546 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0208 	orr.w	r2, r2, #8
 8008472:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008478:	2b01      	cmp	r3, #1
 800847a:	d002      	beq.n	8008482 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	025b      	lsls	r3, r3, #9
 8008480:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800848a:	4618      	mov	r0, r3
 800848c:	f002 ff4e 	bl	800b32c <SDMMC_CmdBlockLength>
 8008490:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00f      	beq.n	80084b8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a2e      	ldr	r2, [pc, #184]	; (8008558 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e046      	b.n	8008546 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295
 80084bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	025b      	lsls	r3, r3, #9
 80084c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084c4:	2390      	movs	r3, #144	; 0x90
 80084c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084c8:	2302      	movs	r3, #2
 80084ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f107 0210 	add.w	r2, r7, #16
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f002 fef8 	bl	800b2d4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d90a      	bls.n	8008500 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2282      	movs	r2, #130	; 0x82
 80084ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084f6:	4618      	mov	r0, r3
 80084f8:	f002 ff5c 	bl	800b3b4 <SDMMC_CmdReadMultiBlock>
 80084fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084fe:	e009      	b.n	8008514 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2281      	movs	r2, #129	; 0x81
 8008504:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800850c:	4618      	mov	r0, r3
 800850e:	f002 ff2f 	bl	800b370 <SDMMC_CmdReadSingleBlock>
 8008512:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d012      	beq.n	8008540 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a0e      	ldr	r2, [pc, #56]	; (8008558 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	431a      	orrs	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e002      	b.n	8008546 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	e000      	b.n	8008546 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008544:	2302      	movs	r3, #2
  }
}
 8008546:	4618      	mov	r0, r3
 8008548:	3730      	adds	r7, #48	; 0x30
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	08008c4f 	.word	0x08008c4f
 8008554:	08008cc1 	.word	0x08008cc1
 8008558:	004005ff 	.word	0x004005ff

0800855c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08c      	sub	sp, #48	; 0x30
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d107      	bne.n	8008584 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e0cf      	b.n	8008724 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	f040 80c8 	bne.w	8008722 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d907      	bls.n	80085b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e0b6      	b.n	8008724 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2203      	movs	r2, #3
 80085ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 021a 	orr.w	r2, r2, #26
 80085d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	4a54      	ldr	r2, [pc, #336]	; (800872c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80085dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e2:	4a53      	ldr	r2, [pc, #332]	; (8008730 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80085e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	2200      	movs	r2, #0
 80085ec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d002      	beq.n	80085fc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80085f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f8:	025b      	lsls	r3, r3, #9
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008604:	4618      	mov	r0, r3
 8008606:	f002 fe91 	bl	800b32c <SDMMC_CmdBlockLength>
 800860a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00f      	beq.n	8008632 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a47      	ldr	r2, [pc, #284]	; (8008734 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	431a      	orrs	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e078      	b.n	8008724 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d90a      	bls.n	800864e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	22a0      	movs	r2, #160	; 0xa0
 800863c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008644:	4618      	mov	r0, r3
 8008646:	f002 fef9 	bl	800b43c <SDMMC_CmdWriteMultiBlock>
 800864a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800864c:	e009      	b.n	8008662 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2290      	movs	r2, #144	; 0x90
 8008652:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800865a:	4618      	mov	r0, r3
 800865c:	f002 fecc 	bl	800b3f8 <SDMMC_CmdWriteSingleBlock>
 8008660:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d012      	beq.n	800868e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a31      	ldr	r2, [pc, #196]	; (8008734 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	431a      	orrs	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e04a      	b.n	8008724 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f042 0208 	orr.w	r2, r2, #8
 800869c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3380      	adds	r3, #128	; 0x80
 80086aa:	461a      	mov	r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	025b      	lsls	r3, r3, #9
 80086b0:	089b      	lsrs	r3, r3, #2
 80086b2:	f7fc fb73 	bl	8004d9c <HAL_DMA_Start_IT>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01a      	beq.n	80086f2 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 021a 	bic.w	r2, r2, #26
 80086ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a18      	ldr	r2, [pc, #96]	; (8008734 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e018      	b.n	8008724 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086f2:	f04f 33ff 	mov.w	r3, #4294967295
 80086f6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	025b      	lsls	r3, r3, #9
 80086fc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80086fe:	2390      	movs	r3, #144	; 0x90
 8008700:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008706:	2300      	movs	r3, #0
 8008708:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800870a:	2301      	movs	r3, #1
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f107 0210 	add.w	r2, r7, #16
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f002 fddb 	bl	800b2d4 <SDMMC_ConfigData>

      return HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	e000      	b.n	8008724 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008722:	2302      	movs	r3, #2
  }
}
 8008724:	4618      	mov	r0, r3
 8008726:	3730      	adds	r7, #48	; 0x30
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	08008c25 	.word	0x08008c25
 8008730:	08008cc1 	.word	0x08008cc1
 8008734:	004005ff 	.word	0x004005ff

08008738 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800875a:	0f9b      	lsrs	r3, r3, #30
 800875c:	b2da      	uxtb	r2, r3
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008766:	0e9b      	lsrs	r3, r3, #26
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008778:	0e1b      	lsrs	r3, r3, #24
 800877a:	b2db      	uxtb	r3, r3
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	b2da      	uxtb	r2, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878a:	0c1b      	lsrs	r3, r3, #16
 800878c:	b2da      	uxtb	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008796:	0a1b      	lsrs	r3, r3, #8
 8008798:	b2da      	uxtb	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ac:	0d1b      	lsrs	r3, r3, #20
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b8:	0c1b      	lsrs	r3, r3, #16
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ca:	0bdb      	lsrs	r3, r3, #15
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087dc:	0b9b      	lsrs	r3, r3, #14
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ee:	0b5b      	lsrs	r3, r3, #13
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008800:	0b1b      	lsrs	r3, r3, #12
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	b2da      	uxtb	r2, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2200      	movs	r2, #0
 8008812:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008818:	2b00      	cmp	r3, #0
 800881a:	d163      	bne.n	80088e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008820:	009a      	lsls	r2, r3, #2
 8008822:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008826:	4013      	ands	r3, r2
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800882c:	0f92      	lsrs	r2, r2, #30
 800882e:	431a      	orrs	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008838:	0edb      	lsrs	r3, r3, #27
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	b2da      	uxtb	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884a:	0e1b      	lsrs	r3, r3, #24
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	b2da      	uxtb	r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800885c:	0d5b      	lsrs	r3, r3, #21
 800885e:	b2db      	uxtb	r3, r3
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	b2da      	uxtb	r2, r3
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886e:	0c9b      	lsrs	r3, r3, #18
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	b2da      	uxtb	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008880:	0bdb      	lsrs	r3, r3, #15
 8008882:	b2db      	uxtb	r3, r3
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	b2da      	uxtb	r2, r3
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	7e1b      	ldrb	r3, [r3, #24]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	3302      	adds	r3, #2
 80088a4:	2201      	movs	r2, #1
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80088ae:	fb02 f203 	mul.w	r2, r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	7a1b      	ldrb	r3, [r3, #8]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f003 030f 	and.w	r3, r3, #15
 80088c0:	2201      	movs	r2, #1
 80088c2:	409a      	lsls	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80088d0:	0a52      	lsrs	r2, r2, #9
 80088d2:	fb02 f203 	mul.w	r2, r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088e0:	661a      	str	r2, [r3, #96]	; 0x60
 80088e2:	e031      	b.n	8008948 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d11d      	bne.n	8008928 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f0:	041b      	lsls	r3, r3, #16
 80088f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fa:	0c1b      	lsrs	r3, r3, #16
 80088fc:	431a      	orrs	r2, r3
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	3301      	adds	r3, #1
 8008908:	029a      	lsls	r2, r3, #10
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800891c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	661a      	str	r2, [r3, #96]	; 0x60
 8008926:	e00f      	b.n	8008948 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a58      	ldr	r2, [pc, #352]	; (8008a90 <HAL_SD_GetCardCSD+0x344>)
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e09d      	b.n	8008a84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800894c:	0b9b      	lsrs	r3, r3, #14
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	b2da      	uxtb	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895e:	09db      	lsrs	r3, r3, #7
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008966:	b2da      	uxtb	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008976:	b2da      	uxtb	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008980:	0fdb      	lsrs	r3, r3, #31
 8008982:	b2da      	uxtb	r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898c:	0f5b      	lsrs	r3, r3, #29
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	b2da      	uxtb	r2, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	0e9b      	lsrs	r3, r3, #26
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	0d9b      	lsrs	r3, r3, #22
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	0d5b      	lsrs	r3, r3, #21
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	0bdb      	lsrs	r3, r3, #15
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a06:	0b9b      	lsrs	r3, r3, #14
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1a:	0b5b      	lsrs	r3, r3, #13
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	0b1b      	lsrs	r3, r3, #12
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a42:	0a9b      	lsrs	r3, r3, #10
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	0a1b      	lsrs	r3, r3, #8
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	004005ff 	.word	0x004005ff

08008a94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008aec:	b5b0      	push	{r4, r5, r7, lr}
 8008aee:	b08e      	sub	sp, #56	; 0x38
 8008af0:	af04      	add	r7, sp, #16
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2203      	movs	r2, #3
 8008afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d02e      	beq.n	8008b64 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b0c:	d106      	bne.n	8008b1c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
 8008b1a:	e029      	b.n	8008b70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b22:	d10a      	bne.n	8008b3a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 faa1 	bl	800906c <SD_WideBus_Enable>
 8008b2a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38
 8008b38:	e01a      	b.n	8008b70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fade 	bl	8009102 <SD_WideBus_Disable>
 8008b46:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
 8008b54:	e00c      	b.n	8008b70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
 8008b62:	e005      	b.n	8008b70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d009      	beq.n	8008b8c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a18      	ldr	r2, [pc, #96]	; (8008be0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e024      	b.n	8008bd6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681d      	ldr	r5, [r3, #0]
 8008bb2:	466c      	mov	r4, sp
 8008bb4:	f107 0318 	add.w	r3, r7, #24
 8008bb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bc0:	f107 030c 	add.w	r3, r7, #12
 8008bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f002 fae4 	bl	800b194 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3728      	adds	r7, #40	; 0x28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bde:	bf00      	nop
 8008be0:	004005ff 	.word	0x004005ff

08008be4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008bf0:	f107 030c 	add.w	r3, r7, #12
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa10 	bl	800901c <SD_SendStatus>
 8008bfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	0a5b      	lsrs	r3, r3, #9
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c1a:	693b      	ldr	r3, [r7, #16]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c60:	2b82      	cmp	r3, #130	; 0x82
 8008c62:	d111      	bne.n	8008c88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f002 fc09 	bl	800b480 <SDMMC_CmdStopTransfer>
 8008c6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7ff fd58 	bl	8008738 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0208 	bic.w	r2, r2, #8
 8008c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ca0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f003 f84f 	bl	800bd54 <HAL_SD_RxCpltCallback>
#endif
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fc f8c4 	bl	8004e5c <HAL_DMA_GetError>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d03e      	beq.n	8008d58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d002      	beq.n	8008cf6 <SD_DMAError+0x36>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d12d      	bne.n	8008d52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a19      	ldr	r2, [pc, #100]	; (8008d60 <SD_DMAError+0xa0>)
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d0c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008d1a:	6978      	ldr	r0, [r7, #20]
 8008d1c:	f7ff ff62 	bl	8008be4 <HAL_SD_GetCardState>
 8008d20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b06      	cmp	r3, #6
 8008d26:	d002      	beq.n	8008d2e <SD_DMAError+0x6e>
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d10a      	bne.n	8008d44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f002 fba4 	bl	800b480 <SDMMC_CmdStopTransfer>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f7ff fcf0 	bl	8008738 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008d58:	bf00      	nop
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	004005ff 	.word	0x004005ff

08008d64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d64:	b5b0      	push	{r4, r5, r7, lr}
 8008d66:	b094      	sub	sp, #80	; 0x50
 8008d68:	af04      	add	r7, sp, #16
 8008d6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f002 fa55 	bl	800b224 <SDMMC_GetPowerState>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d84:	e0b7      	b.n	8008ef6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d02f      	beq.n	8008dee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f002 fc7f 	bl	800b696 <SDMMC_CmdSendCID>
 8008d98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	e0a8      	b.n	8008ef6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f002 fa7f 	bl	800b2ae <SDMMC_GetResponse>
 8008db0:	4602      	mov	r2, r0
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2104      	movs	r1, #4
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f002 fa76 	bl	800b2ae <SDMMC_GetResponse>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2108      	movs	r1, #8
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f002 fa6d 	bl	800b2ae <SDMMC_GetResponse>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	210c      	movs	r1, #12
 8008de0:	4618      	mov	r0, r3
 8008de2:	f002 fa64 	bl	800b2ae <SDMMC_GetResponse>
 8008de6:	4602      	mov	r2, r0
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d00d      	beq.n	8008e12 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f107 020e 	add.w	r2, r7, #14
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f002 fc85 	bl	800b710 <SDMMC_CmdSetRelAdd>
 8008e06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <SD_InitCard+0xae>
    {
      return errorstate;
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e10:	e071      	b.n	8008ef6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d036      	beq.n	8008e88 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e1a:	89fb      	ldrh	r3, [r7, #14]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e2a:	041b      	lsls	r3, r3, #16
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f002 fc4f 	bl	800b6d2 <SDMMC_CmdSendCSD>
 8008e34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3e:	e05a      	b.n	8008ef6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 fa31 	bl	800b2ae <SDMMC_GetResponse>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2104      	movs	r1, #4
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f002 fa28 	bl	800b2ae <SDMMC_GetResponse>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2108      	movs	r1, #8
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f002 fa1f 	bl	800b2ae <SDMMC_GetResponse>
 8008e70:	4602      	mov	r2, r0
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	210c      	movs	r1, #12
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 fa16 	bl	800b2ae <SDMMC_GetResponse>
 8008e82:	4602      	mov	r2, r0
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2104      	movs	r1, #4
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f002 fa0d 	bl	800b2ae <SDMMC_GetResponse>
 8008e94:	4603      	mov	r3, r0
 8008e96:	0d1a      	lsrs	r2, r3, #20
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e9c:	f107 0310 	add.w	r3, r7, #16
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff fc52 	bl	800874c <HAL_SD_GetCardCSD>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008eb2:	e020      	b.n	8008ef6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6819      	ldr	r1, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebc:	041b      	lsls	r3, r3, #16
 8008ebe:	f04f 0400 	mov.w	r4, #0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	f002 fafc 	bl	800b4c4 <SDMMC_CmdSelDesel>
 8008ecc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <SD_InitCard+0x174>
  {
    return errorstate;
 8008ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed6:	e00e      	b.n	8008ef6 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681d      	ldr	r5, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	466c      	mov	r4, sp
 8008ee0:	f103 0210 	add.w	r2, r3, #16
 8008ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008eea:	3304      	adds	r3, #4
 8008eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f002 f950 	bl	800b194 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3740      	adds	r7, #64	; 0x40
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f002 faf6 	bl	800b50a <SDMMC_CmdGoIdleState>
 8008f1e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	e072      	b.n	8009010 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f002 fb09 	bl	800b546 <SDMMC_CmdOperCond>
 8008f34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00d      	beq.n	8008f58 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f002 fadf 	bl	800b50a <SDMMC_CmdGoIdleState>
 8008f4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	e05b      	b.n	8009010 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d137      	bne.n	8008fd6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 fb09 	bl	800b584 <SDMMC_CmdAppCommand>
 8008f72:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d02d      	beq.n	8008fd6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f7e:	e047      	b.n	8009010 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f002 fafc 	bl	800b584 <SDMMC_CmdAppCommand>
 8008f8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <SD_PowerON+0x98>
    {
      return errorstate;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	e03b      	b.n	8009010 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	491e      	ldr	r1, [pc, #120]	; (8009018 <SD_PowerON+0x118>)
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f002 fb12 	bl	800b5c8 <SDMMC_CmdAppOperCommand>
 8008fa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fb0:	e02e      	b.n	8009010 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f002 f978 	bl	800b2ae <SDMMC_GetResponse>
 8008fbe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	0fdb      	lsrs	r3, r3, #31
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <SD_PowerON+0xcc>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <SD_PowerON+0xce>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	613b      	str	r3, [r7, #16]

    count++;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d802      	bhi.n	8008fe6 <SD_PowerON+0xe6>
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0cc      	beq.n	8008f80 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d902      	bls.n	8008ff6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ff4:	e00c      	b.n	8009010 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	645a      	str	r2, [r3, #68]	; 0x44
 8009006:	e002      	b.n	800900e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	c1100000 	.word	0xc1100000

0800901c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800902c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009030:	e018      	b.n	8009064 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f002 fb87 	bl	800b752 <SDMMC_CmdSendStatus>
 8009044:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <SD_SendStatus+0x34>
  {
    return errorstate;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	e009      	b.n	8009064 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2100      	movs	r1, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f002 f929 	bl	800b2ae <SDMMC_GetResponse>
 800905c:	4602      	mov	r2, r0
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2100      	movs	r1, #0
 8009082:	4618      	mov	r0, r3
 8009084:	f002 f913 	bl	800b2ae <SDMMC_GetResponse>
 8009088:	4603      	mov	r3, r0
 800908a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800908e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009092:	d102      	bne.n	800909a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009098:	e02f      	b.n	80090fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800909a:	f107 030c 	add.w	r3, r7, #12
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f879 	bl	8009198 <SD_FindSCR>
 80090a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	e023      	b.n	80090fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d01c      	beq.n	80090f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c4:	041b      	lsls	r3, r3, #16
 80090c6:	4619      	mov	r1, r3
 80090c8:	4610      	mov	r0, r2
 80090ca:	f002 fa5b 	bl	800b584 <SDMMC_CmdAppCommand>
 80090ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	e00f      	b.n	80090fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2102      	movs	r1, #2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f002 fa95 	bl	800b610 <SDMMC_CmdBusWidth>
 80090e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	e003      	b.n	80090fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	e001      	b.n	80090fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	2300      	movs	r3, #0
 8009110:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2100      	movs	r1, #0
 8009118:	4618      	mov	r0, r3
 800911a:	f002 f8c8 	bl	800b2ae <SDMMC_GetResponse>
 800911e:	4603      	mov	r3, r0
 8009120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009128:	d102      	bne.n	8009130 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800912a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800912e:	e02f      	b.n	8009190 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009130:	f107 030c 	add.w	r3, r7, #12
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f82e 	bl	8009198 <SD_FindSCR>
 800913c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	e023      	b.n	8009190 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d01c      	beq.n	800918c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915a:	041b      	lsls	r3, r3, #16
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f002 fa10 	bl	800b584 <SDMMC_CmdAppCommand>
 8009164:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	e00f      	b.n	8009190 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2100      	movs	r1, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f002 fa4a 	bl	800b610 <SDMMC_CmdBusWidth>
 800917c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	e003      	b.n	8009190 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009188:	2300      	movs	r3, #0
 800918a:	e001      	b.n	8009190 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800918c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009198:	b590      	push	{r4, r7, lr}
 800919a:	b08f      	sub	sp, #60	; 0x3c
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091a2:	f7fa fb4d 	bl	8003840 <HAL_GetTick>
 80091a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80091ac:	2300      	movs	r3, #0
 80091ae:	60bb      	str	r3, [r7, #8]
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2108      	movs	r1, #8
 80091be:	4618      	mov	r0, r3
 80091c0:	f002 f8b4 	bl	800b32c <SDMMC_CmdBlockLength>
 80091c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	e0a9      	b.n	8009324 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f002 f9d1 	bl	800b584 <SDMMC_CmdAppCommand>
 80091e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	e09a      	b.n	8009324 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
 80091f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091f4:	2308      	movs	r3, #8
 80091f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80091f8:	2330      	movs	r3, #48	; 0x30
 80091fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091fc:	2302      	movs	r3, #2
 80091fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009200:	2300      	movs	r3, #0
 8009202:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009204:	2301      	movs	r3, #1
 8009206:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f107 0210 	add.w	r2, r7, #16
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f002 f85e 	bl	800b2d4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4618      	mov	r0, r3
 800921e:	f002 fa19 	bl	800b654 <SDMMC_CmdSendSCR>
 8009222:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d022      	beq.n	8009270 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	e07a      	b.n	8009324 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00e      	beq.n	800925a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	f107 0208 	add.w	r2, r7, #8
 8009248:	18d4      	adds	r4, r2, r3
 800924a:	4608      	mov	r0, r1
 800924c:	f001 ffce 	bl	800b1ec <SDMMC_ReadFIFO>
 8009250:	4603      	mov	r3, r0
 8009252:	6023      	str	r3, [r4, #0]
      index++;
 8009254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009256:	3301      	adds	r3, #1
 8009258:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800925a:	f7fa faf1 	bl	8003840 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009268:	d102      	bne.n	8009270 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800926a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800926e:	e059      	b.n	8009324 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009276:	f240 432a 	movw	r3, #1066	; 0x42a
 800927a:	4013      	ands	r3, r2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0d6      	beq.n	800922e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	f003 0308 	and.w	r3, r3, #8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2208      	movs	r2, #8
 8009294:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009296:	2308      	movs	r3, #8
 8009298:	e044      	b.n	8009324 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2202      	movs	r2, #2
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092b0:	2302      	movs	r3, #2
 80092b2:	e037      	b.n	8009324 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ba:	f003 0320 	and.w	r3, r3, #32
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2220      	movs	r2, #32
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092ca:	2320      	movs	r3, #32
 80092cc:	e02a      	b.n	8009324 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	061a      	lsls	r2, r3, #24
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	0a1b      	lsrs	r3, r3, #8
 80092ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	0e1b      	lsrs	r3, r3, #24
 80092f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	601a      	str	r2, [r3, #0]
    scr++;
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	3304      	adds	r3, #4
 80092fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	061a      	lsls	r2, r3, #24
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	021b      	lsls	r3, r3, #8
 8009308:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800930c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009316:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	0e1b      	lsrs	r3, r3, #24
 800931c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	373c      	adds	r7, #60	; 0x3c
 8009328:	46bd      	mov	sp, r7
 800932a:	bd90      	pop	{r4, r7, pc}

0800932c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e025      	b.n	800938c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	d106      	bne.n	800935a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7fa f849 	bl	80033ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2202      	movs	r2, #2
 800935e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3304      	adds	r3, #4
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f001 fdeb 	bl	800af48 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	461a      	mov	r2, r3
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	f001 fe55 	bl	800b02c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d101      	bne.n	80093b0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80093ac:	2302      	movs	r3, #2
 80093ae:	e018      	b.n	80093e2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 feb3 	bl	800b12c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d104      	bne.n	80093d8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2205      	movs	r2, #5
 80093d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80093d6:	e003      	b.n	80093e0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d101      	bne.n	8009404 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009400:	2302      	movs	r3, #2
 8009402:	e00e      	b.n	8009422 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f001 feab 	bl	800b16e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e04c      	b.n	80094d8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7f9 fca6 	bl	8002da4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0203 	bic.w	r2, r2, #3
 800946e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <HAL_SPDIFRX_Init+0xb4>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009488:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800948e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009494:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800949a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80094a0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80094a6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80094ac:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80094b2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80094b8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	fff88407 	.word	0xfff88407

080094e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e084      	b.n	8009600 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d106      	bne.n	8009516 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7f9 fc89 	bl	8002e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2202      	movs	r2, #2
 800951a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800952c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009536:	d902      	bls.n	800953e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009538:	2300      	movs	r3, #0
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	e002      	b.n	8009544 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800953e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009542:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800954c:	d007      	beq.n	800955e <HAL_SPI_Init+0x7a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009556:	d002      	beq.n	800955e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10b      	bne.n	800957e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800956e:	d903      	bls.n	8009578 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	631a      	str	r2, [r3, #48]	; 0x30
 8009576:	e002      	b.n	800957e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	431a      	orrs	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	431a      	orrs	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	ea42 0103 	orr.w	r1, r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	0c1b      	lsrs	r3, r3, #16
 80095be:	f003 0204 	and.w	r2, r3, #4
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	431a      	orrs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095cc:	431a      	orrs	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	ea42 0103 	orr.w	r1, r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	430a      	orrs	r2, r1
 80095de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69da      	ldr	r2, [r3, #28]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e01d      	b.n	8009656 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7f9 fc5c 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3304      	adds	r3, #4
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f000 fb78 	bl	8009d3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <HAL_TIM_Base_Start_IT+0x50>)
 8009680:	4013      	ands	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b06      	cmp	r3, #6
 8009688:	d00b      	beq.n	80096a2 <HAL_TIM_Base_Start_IT+0x42>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009690:	d007      	beq.n	80096a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0201 	orr.w	r2, r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	00010007 	.word	0x00010007

080096b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e01d      	b.n	8009702 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d106      	bne.n	80096e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7f9 fc74 	bl	8002fc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f000 fb22 	bl	8009d3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	2b02      	cmp	r3, #2
 800971e:	d122      	bne.n	8009766 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d11b      	bne.n	8009766 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f06f 0202 	mvn.w	r2, #2
 8009736:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	f003 0303 	and.w	r3, r3, #3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fad7 	bl	8009d00 <HAL_TIM_IC_CaptureCallback>
 8009752:	e005      	b.n	8009760 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fac9 	bl	8009cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fada 	bl	8009d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b04      	cmp	r3, #4
 8009772:	d122      	bne.n	80097ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b04      	cmp	r3, #4
 8009780:	d11b      	bne.n	80097ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f06f 0204 	mvn.w	r2, #4
 800978a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 faad 	bl	8009d00 <HAL_TIM_IC_CaptureCallback>
 80097a6:	e005      	b.n	80097b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fa9f 	bl	8009cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fab0 	bl	8009d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d122      	bne.n	800980e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f003 0308 	and.w	r3, r3, #8
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d11b      	bne.n	800980e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f06f 0208 	mvn.w	r2, #8
 80097de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2204      	movs	r2, #4
 80097e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa83 	bl	8009d00 <HAL_TIM_IC_CaptureCallback>
 80097fa:	e005      	b.n	8009808 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fa75 	bl	8009cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa86 	bl	8009d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0310 	and.w	r3, r3, #16
 8009818:	2b10      	cmp	r3, #16
 800981a:	d122      	bne.n	8009862 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f003 0310 	and.w	r3, r3, #16
 8009826:	2b10      	cmp	r3, #16
 8009828:	d11b      	bne.n	8009862 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f06f 0210 	mvn.w	r2, #16
 8009832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2208      	movs	r2, #8
 8009838:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fa59 	bl	8009d00 <HAL_TIM_IC_CaptureCallback>
 800984e:	e005      	b.n	800985c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fa4b 	bl	8009cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa5c 	bl	8009d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10e      	bne.n	800988e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b01      	cmp	r3, #1
 800987c:	d107      	bne.n	800988e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f06f 0201 	mvn.w	r2, #1
 8009886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7f8 feb1 	bl	80025f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009898:	2b80      	cmp	r3, #128	; 0x80
 800989a:	d10e      	bne.n	80098ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a6:	2b80      	cmp	r3, #128	; 0x80
 80098a8:	d107      	bne.n	80098ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 feef 	bl	800a698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c8:	d10e      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d4:	2b80      	cmp	r3, #128	; 0x80
 80098d6:	d107      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fee2 	bl	800a6ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f2:	2b40      	cmp	r3, #64	; 0x40
 80098f4:	d10e      	bne.n	8009914 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009900:	2b40      	cmp	r3, #64	; 0x40
 8009902:	d107      	bne.n	8009914 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800990c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa0a 	bl	8009d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b20      	cmp	r3, #32
 8009920:	d10e      	bne.n	8009940 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f003 0320 	and.w	r3, r3, #32
 800992c:	2b20      	cmp	r3, #32
 800992e:	d107      	bne.n	8009940 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f06f 0220 	mvn.w	r2, #32
 8009938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fea2 	bl	800a684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800995a:	2b01      	cmp	r3, #1
 800995c:	d101      	bne.n	8009962 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800995e:	2302      	movs	r3, #2
 8009960:	e105      	b.n	8009b6e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2202      	movs	r2, #2
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b14      	cmp	r3, #20
 8009976:	f200 80f0 	bhi.w	8009b5a <HAL_TIM_PWM_ConfigChannel+0x212>
 800997a:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099d5 	.word	0x080099d5
 8009984:	08009b5b 	.word	0x08009b5b
 8009988:	08009b5b 	.word	0x08009b5b
 800998c:	08009b5b 	.word	0x08009b5b
 8009990:	08009a15 	.word	0x08009a15
 8009994:	08009b5b 	.word	0x08009b5b
 8009998:	08009b5b 	.word	0x08009b5b
 800999c:	08009b5b 	.word	0x08009b5b
 80099a0:	08009a57 	.word	0x08009a57
 80099a4:	08009b5b 	.word	0x08009b5b
 80099a8:	08009b5b 	.word	0x08009b5b
 80099ac:	08009b5b 	.word	0x08009b5b
 80099b0:	08009a97 	.word	0x08009a97
 80099b4:	08009b5b 	.word	0x08009b5b
 80099b8:	08009b5b 	.word	0x08009b5b
 80099bc:	08009b5b 	.word	0x08009b5b
 80099c0:	08009ad9 	.word	0x08009ad9
 80099c4:	08009b5b 	.word	0x08009b5b
 80099c8:	08009b5b 	.word	0x08009b5b
 80099cc:	08009b5b 	.word	0x08009b5b
 80099d0:	08009b19 	.word	0x08009b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fa4e 	bl	8009e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f042 0208 	orr.w	r2, r2, #8
 80099ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0204 	bic.w	r2, r2, #4
 80099fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6999      	ldr	r1, [r3, #24]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	691a      	ldr	r2, [r3, #16]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	619a      	str	r2, [r3, #24]
      break;
 8009a12:	e0a3      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68b9      	ldr	r1, [r7, #8]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 faa0 	bl	8009f60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699a      	ldr	r2, [r3, #24]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6999      	ldr	r1, [r3, #24]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	021a      	lsls	r2, r3, #8
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	619a      	str	r2, [r3, #24]
      break;
 8009a54:	e082      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 faf7 	bl	800a050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 0208 	orr.w	r2, r2, #8
 8009a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0204 	bic.w	r2, r2, #4
 8009a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69d9      	ldr	r1, [r3, #28]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	691a      	ldr	r2, [r3, #16]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	430a      	orrs	r2, r1
 8009a92:	61da      	str	r2, [r3, #28]
      break;
 8009a94:	e062      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fb4d 	bl	800a13c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69da      	ldr	r2, [r3, #28]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69d9      	ldr	r1, [r3, #28]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	021a      	lsls	r2, r3, #8
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	61da      	str	r2, [r3, #28]
      break;
 8009ad6:	e041      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68b9      	ldr	r1, [r7, #8]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fb84 	bl	800a1ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0208 	orr.w	r2, r2, #8
 8009af2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0204 	bic.w	r2, r2, #4
 8009b02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	691a      	ldr	r2, [r3, #16]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b16:	e021      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fbb6 	bl	800a290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	021a      	lsls	r2, r3, #8
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b58:	e000      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009b5a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop

08009b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <HAL_TIM_ConfigClockSource+0x18>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e0a6      	b.n	8009cde <HAL_TIM_ConfigClockSource+0x166>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4b4f      	ldr	r3, [pc, #316]	; (8009ce8 <HAL_TIM_ConfigClockSource+0x170>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b40      	cmp	r3, #64	; 0x40
 8009bc6:	d067      	beq.n	8009c98 <HAL_TIM_ConfigClockSource+0x120>
 8009bc8:	2b40      	cmp	r3, #64	; 0x40
 8009bca:	d80b      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x6c>
 8009bcc:	2b10      	cmp	r3, #16
 8009bce:	d073      	beq.n	8009cb8 <HAL_TIM_ConfigClockSource+0x140>
 8009bd0:	2b10      	cmp	r3, #16
 8009bd2:	d802      	bhi.n	8009bda <HAL_TIM_ConfigClockSource+0x62>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d06f      	beq.n	8009cb8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009bd8:	e078      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	d06c      	beq.n	8009cb8 <HAL_TIM_ConfigClockSource+0x140>
 8009bde:	2b30      	cmp	r3, #48	; 0x30
 8009be0:	d06a      	beq.n	8009cb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009be2:	e073      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009be4:	2b70      	cmp	r3, #112	; 0x70
 8009be6:	d00d      	beq.n	8009c04 <HAL_TIM_ConfigClockSource+0x8c>
 8009be8:	2b70      	cmp	r3, #112	; 0x70
 8009bea:	d804      	bhi.n	8009bf6 <HAL_TIM_ConfigClockSource+0x7e>
 8009bec:	2b50      	cmp	r3, #80	; 0x50
 8009bee:	d033      	beq.n	8009c58 <HAL_TIM_ConfigClockSource+0xe0>
 8009bf0:	2b60      	cmp	r3, #96	; 0x60
 8009bf2:	d041      	beq.n	8009c78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009bf4:	e06a      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bfa:	d066      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x152>
 8009bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c00:	d017      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009c02:	e063      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	6899      	ldr	r1, [r3, #8]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f000 fc0a 	bl	800a42c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	609a      	str	r2, [r3, #8]
      break;
 8009c30:	e04c      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6818      	ldr	r0, [r3, #0]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6899      	ldr	r1, [r3, #8]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f000 fbf3 	bl	800a42c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689a      	ldr	r2, [r3, #8]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c54:	609a      	str	r2, [r3, #8]
      break;
 8009c56:	e039      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6818      	ldr	r0, [r3, #0]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	6859      	ldr	r1, [r3, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	461a      	mov	r2, r3
 8009c66:	f000 fb67 	bl	800a338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2150      	movs	r1, #80	; 0x50
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fbc0 	bl	800a3f6 <TIM_ITRx_SetConfig>
      break;
 8009c76:	e029      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6859      	ldr	r1, [r3, #4]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	461a      	mov	r2, r3
 8009c86:	f000 fb86 	bl	800a396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2160      	movs	r1, #96	; 0x60
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fbb0 	bl	800a3f6 <TIM_ITRx_SetConfig>
      break;
 8009c96:	e019      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	6859      	ldr	r1, [r3, #4]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	f000 fb47 	bl	800a338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2140      	movs	r1, #64	; 0x40
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 fba0 	bl	800a3f6 <TIM_ITRx_SetConfig>
      break;
 8009cb6:	e009      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	f000 fb97 	bl	800a3f6 <TIM_ITRx_SetConfig>
      break;
 8009cc8:	e000      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	fffeff88 	.word	0xfffeff88

08009cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a40      	ldr	r2, [pc, #256]	; (8009e50 <TIM_Base_SetConfig+0x114>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d013      	beq.n	8009d7c <TIM_Base_SetConfig+0x40>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d5a:	d00f      	beq.n	8009d7c <TIM_Base_SetConfig+0x40>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a3d      	ldr	r2, [pc, #244]	; (8009e54 <TIM_Base_SetConfig+0x118>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d00b      	beq.n	8009d7c <TIM_Base_SetConfig+0x40>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a3c      	ldr	r2, [pc, #240]	; (8009e58 <TIM_Base_SetConfig+0x11c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d007      	beq.n	8009d7c <TIM_Base_SetConfig+0x40>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a3b      	ldr	r2, [pc, #236]	; (8009e5c <TIM_Base_SetConfig+0x120>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d003      	beq.n	8009d7c <TIM_Base_SetConfig+0x40>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a3a      	ldr	r2, [pc, #232]	; (8009e60 <TIM_Base_SetConfig+0x124>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d108      	bne.n	8009d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a2f      	ldr	r2, [pc, #188]	; (8009e50 <TIM_Base_SetConfig+0x114>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d02b      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d9c:	d027      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a2c      	ldr	r2, [pc, #176]	; (8009e54 <TIM_Base_SetConfig+0x118>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d023      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a2b      	ldr	r2, [pc, #172]	; (8009e58 <TIM_Base_SetConfig+0x11c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d01f      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a2a      	ldr	r2, [pc, #168]	; (8009e5c <TIM_Base_SetConfig+0x120>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d01b      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a29      	ldr	r2, [pc, #164]	; (8009e60 <TIM_Base_SetConfig+0x124>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d017      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a28      	ldr	r2, [pc, #160]	; (8009e64 <TIM_Base_SetConfig+0x128>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d013      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a27      	ldr	r2, [pc, #156]	; (8009e68 <TIM_Base_SetConfig+0x12c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d00f      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a26      	ldr	r2, [pc, #152]	; (8009e6c <TIM_Base_SetConfig+0x130>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d00b      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a25      	ldr	r2, [pc, #148]	; (8009e70 <TIM_Base_SetConfig+0x134>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d007      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a24      	ldr	r2, [pc, #144]	; (8009e74 <TIM_Base_SetConfig+0x138>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d003      	beq.n	8009dee <TIM_Base_SetConfig+0xb2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a23      	ldr	r2, [pc, #140]	; (8009e78 <TIM_Base_SetConfig+0x13c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d108      	bne.n	8009e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <TIM_Base_SetConfig+0x114>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d003      	beq.n	8009e34 <TIM_Base_SetConfig+0xf8>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a0c      	ldr	r2, [pc, #48]	; (8009e60 <TIM_Base_SetConfig+0x124>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d103      	bne.n	8009e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	691a      	ldr	r2, [r3, #16]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	615a      	str	r2, [r3, #20]
}
 8009e42:	bf00      	nop
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40000400 	.word	0x40000400
 8009e58:	40000800 	.word	0x40000800
 8009e5c:	40000c00 	.word	0x40000c00
 8009e60:	40010400 	.word	0x40010400
 8009e64:	40014000 	.word	0x40014000
 8009e68:	40014400 	.word	0x40014400
 8009e6c:	40014800 	.word	0x40014800
 8009e70:	40001800 	.word	0x40001800
 8009e74:	40001c00 	.word	0x40001c00
 8009e78:	40002000 	.word	0x40002000

08009e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	f023 0201 	bic.w	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4b2b      	ldr	r3, [pc, #172]	; (8009f54 <TIM_OC1_SetConfig+0xd8>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f023 0302 	bic.w	r3, r3, #2
 8009ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a21      	ldr	r2, [pc, #132]	; (8009f58 <TIM_OC1_SetConfig+0xdc>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d003      	beq.n	8009ee0 <TIM_OC1_SetConfig+0x64>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a20      	ldr	r2, [pc, #128]	; (8009f5c <TIM_OC1_SetConfig+0xe0>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10c      	bne.n	8009efa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f023 0308 	bic.w	r3, r3, #8
 8009ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f023 0304 	bic.w	r3, r3, #4
 8009ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a16      	ldr	r2, [pc, #88]	; (8009f58 <TIM_OC1_SetConfig+0xdc>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d003      	beq.n	8009f0a <TIM_OC1_SetConfig+0x8e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a15      	ldr	r2, [pc, #84]	; (8009f5c <TIM_OC1_SetConfig+0xe0>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d111      	bne.n	8009f2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	621a      	str	r2, [r3, #32]
}
 8009f48:	bf00      	nop
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	fffeff8f 	.word	0xfffeff8f
 8009f58:	40010000 	.word	0x40010000
 8009f5c:	40010400 	.word	0x40010400

08009f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	f023 0210 	bic.w	r2, r3, #16
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4b2e      	ldr	r3, [pc, #184]	; (800a044 <TIM_OC2_SetConfig+0xe4>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	021b      	lsls	r3, r3, #8
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f023 0320 	bic.w	r3, r3, #32
 8009faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a23      	ldr	r2, [pc, #140]	; (800a048 <TIM_OC2_SetConfig+0xe8>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d003      	beq.n	8009fc8 <TIM_OC2_SetConfig+0x68>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a22      	ldr	r2, [pc, #136]	; (800a04c <TIM_OC2_SetConfig+0xec>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d10d      	bne.n	8009fe4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	011b      	lsls	r3, r3, #4
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a18      	ldr	r2, [pc, #96]	; (800a048 <TIM_OC2_SetConfig+0xe8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d003      	beq.n	8009ff4 <TIM_OC2_SetConfig+0x94>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a17      	ldr	r2, [pc, #92]	; (800a04c <TIM_OC2_SetConfig+0xec>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d113      	bne.n	800a01c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	4313      	orrs	r3, r2
 800a01a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	621a      	str	r2, [r3, #32]
}
 800a036:	bf00      	nop
 800a038:	371c      	adds	r7, #28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	feff8fff 	.word	0xfeff8fff
 800a048:	40010000 	.word	0x40010000
 800a04c:	40010400 	.word	0x40010400

0800a050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4b2d      	ldr	r3, [pc, #180]	; (800a130 <TIM_OC3_SetConfig+0xe0>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0303 	bic.w	r3, r3, #3
 800a086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a22      	ldr	r2, [pc, #136]	; (800a134 <TIM_OC3_SetConfig+0xe4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d003      	beq.n	800a0b6 <TIM_OC3_SetConfig+0x66>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a21      	ldr	r2, [pc, #132]	; (800a138 <TIM_OC3_SetConfig+0xe8>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d10d      	bne.n	800a0d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	021b      	lsls	r3, r3, #8
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a17      	ldr	r2, [pc, #92]	; (800a134 <TIM_OC3_SetConfig+0xe4>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d003      	beq.n	800a0e2 <TIM_OC3_SetConfig+0x92>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a16      	ldr	r2, [pc, #88]	; (800a138 <TIM_OC3_SetConfig+0xe8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d113      	bne.n	800a10a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	621a      	str	r2, [r3, #32]
}
 800a124:	bf00      	nop
 800a126:	371c      	adds	r7, #28
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	fffeff8f 	.word	0xfffeff8f
 800a134:	40010000 	.word	0x40010000
 800a138:	40010400 	.word	0x40010400

0800a13c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4b1e      	ldr	r3, [pc, #120]	; (800a1e0 <TIM_OC4_SetConfig+0xa4>)
 800a168:	4013      	ands	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	031b      	lsls	r3, r3, #12
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	4313      	orrs	r3, r2
 800a192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a13      	ldr	r2, [pc, #76]	; (800a1e4 <TIM_OC4_SetConfig+0xa8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d003      	beq.n	800a1a4 <TIM_OC4_SetConfig+0x68>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <TIM_OC4_SetConfig+0xac>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d109      	bne.n	800a1b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	019b      	lsls	r3, r3, #6
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	621a      	str	r2, [r3, #32]
}
 800a1d2:	bf00      	nop
 800a1d4:	371c      	adds	r7, #28
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	feff8fff 	.word	0xfeff8fff
 800a1e4:	40010000 	.word	0x40010000
 800a1e8:	40010400 	.word	0x40010400

0800a1ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4b1b      	ldr	r3, [pc, #108]	; (800a284 <TIM_OC5_SetConfig+0x98>)
 800a218:	4013      	ands	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a22c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	041b      	lsls	r3, r3, #16
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	4313      	orrs	r3, r2
 800a238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a12      	ldr	r2, [pc, #72]	; (800a288 <TIM_OC5_SetConfig+0x9c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d003      	beq.n	800a24a <TIM_OC5_SetConfig+0x5e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a11      	ldr	r2, [pc, #68]	; (800a28c <TIM_OC5_SetConfig+0xa0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d109      	bne.n	800a25e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	621a      	str	r2, [r3, #32]
}
 800a278:	bf00      	nop
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	fffeff8f 	.word	0xfffeff8f
 800a288:	40010000 	.word	0x40010000
 800a28c:	40010400 	.word	0x40010400

0800a290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4b1c      	ldr	r3, [pc, #112]	; (800a32c <TIM_OC6_SetConfig+0x9c>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	051b      	lsls	r3, r3, #20
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a13      	ldr	r2, [pc, #76]	; (800a330 <TIM_OC6_SetConfig+0xa0>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d003      	beq.n	800a2f0 <TIM_OC6_SetConfig+0x60>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a12      	ldr	r2, [pc, #72]	; (800a334 <TIM_OC6_SetConfig+0xa4>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d109      	bne.n	800a304 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	029b      	lsls	r3, r3, #10
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4313      	orrs	r3, r2
 800a302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	621a      	str	r2, [r3, #32]
}
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	feff8fff 	.word	0xfeff8fff
 800a330:	40010000 	.word	0x40010000
 800a334:	40010400 	.word	0x40010400

0800a338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f023 0201 	bic.w	r2, r3, #1
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f023 030a 	bic.w	r3, r3, #10
 800a374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	621a      	str	r2, [r3, #32]
}
 800a38a:	bf00      	nop
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a396:	b480      	push	{r7}
 800a398:	b087      	sub	sp, #28
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	f023 0210 	bic.w	r2, r3, #16
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	031b      	lsls	r3, r3, #12
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	011b      	lsls	r3, r3, #4
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	621a      	str	r2, [r3, #32]
}
 800a3ea:	bf00      	nop
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	f043 0307 	orr.w	r3, r3, #7
 800a418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	609a      	str	r2, [r3, #8]
}
 800a420:	bf00      	nop
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	021a      	lsls	r2, r3, #8
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	431a      	orrs	r2, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4313      	orrs	r3, r2
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	4313      	orrs	r3, r2
 800a458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	609a      	str	r2, [r3, #8]
}
 800a460:	bf00      	nop
 800a462:	371c      	adds	r7, #28
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a480:	2302      	movs	r3, #2
 800a482:	e06d      	b.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a30      	ldr	r2, [pc, #192]	; (800a56c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d004      	beq.n	800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a2f      	ldr	r2, [pc, #188]	; (800a570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d108      	bne.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a20      	ldr	r2, [pc, #128]	; (800a56c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d022      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f6:	d01d      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a1d      	ldr	r2, [pc, #116]	; (800a574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d018      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a1c      	ldr	r2, [pc, #112]	; (800a578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d013      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1a      	ldr	r2, [pc, #104]	; (800a57c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d00e      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a15      	ldr	r2, [pc, #84]	; (800a570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d009      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a16      	ldr	r2, [pc, #88]	; (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d004      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a15      	ldr	r2, [pc, #84]	; (800a584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d10c      	bne.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a53a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	4313      	orrs	r3, r2
 800a544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	40010000 	.word	0x40010000
 800a570:	40010400 	.word	0x40010400
 800a574:	40000400 	.word	0x40000400
 800a578:	40000800 	.word	0x40000800
 800a57c:	40000c00 	.word	0x40000c00
 800a580:	40014000 	.word	0x40014000
 800a584:	40001800 	.word	0x40001800

0800a588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d101      	bne.n	800a5a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	e065      	b.n	800a670 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	041b      	lsls	r3, r3, #16
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a16      	ldr	r2, [pc, #88]	; (800a67c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d004      	beq.n	800a632 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a14      	ldr	r2, [pc, #80]	; (800a680 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d115      	bne.n	800a65e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63c:	051b      	lsls	r3, r3, #20
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	40010000 	.word	0x40010000
 800a680:	40010400 	.word	0x40010400

0800a684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e040      	b.n	800a754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d106      	bne.n	800a6e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7f8 fd5e 	bl	80031a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2224      	movs	r2, #36	; 0x24
 800a6ec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 0201 	bic.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f82c 	bl	800a75c <UART_SetConfig>
 800a704:	4603      	mov	r3, r0
 800a706:	2b01      	cmp	r3, #1
 800a708:	d101      	bne.n	800a70e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e022      	b.n	800a754 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 faca 	bl	800acb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a72a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a73a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0201 	orr.w	r2, r2, #1
 800a74a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fb51 	bl	800adf4 <UART_CheckIdleState>
 800a752:	4603      	mov	r3, r0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a764:	2300      	movs	r3, #0
 800a766:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	431a      	orrs	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	431a      	orrs	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	4313      	orrs	r3, r2
 800a782:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	4bb1      	ldr	r3, [pc, #708]	; (800aa50 <UART_SetConfig+0x2f4>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	6812      	ldr	r2, [r2, #0]
 800a792:	6939      	ldr	r1, [r7, #16]
 800a794:	430b      	orrs	r3, r1
 800a796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a1b      	ldr	r3, [r3, #32]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a9f      	ldr	r2, [pc, #636]	; (800aa54 <UART_SetConfig+0x2f8>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d121      	bne.n	800a820 <UART_SetConfig+0xc4>
 800a7dc:	4b9e      	ldr	r3, [pc, #632]	; (800aa58 <UART_SetConfig+0x2fc>)
 800a7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e2:	f003 0303 	and.w	r3, r3, #3
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d816      	bhi.n	800a818 <UART_SetConfig+0xbc>
 800a7ea:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <UART_SetConfig+0x94>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a801 	.word	0x0800a801
 800a7f4:	0800a80d 	.word	0x0800a80d
 800a7f8:	0800a807 	.word	0x0800a807
 800a7fc:	0800a813 	.word	0x0800a813
 800a800:	2301      	movs	r3, #1
 800a802:	77fb      	strb	r3, [r7, #31]
 800a804:	e151      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a806:	2302      	movs	r3, #2
 800a808:	77fb      	strb	r3, [r7, #31]
 800a80a:	e14e      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a80c:	2304      	movs	r3, #4
 800a80e:	77fb      	strb	r3, [r7, #31]
 800a810:	e14b      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a812:	2308      	movs	r3, #8
 800a814:	77fb      	strb	r3, [r7, #31]
 800a816:	e148      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a818:	2310      	movs	r3, #16
 800a81a:	77fb      	strb	r3, [r7, #31]
 800a81c:	bf00      	nop
 800a81e:	e144      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a8d      	ldr	r2, [pc, #564]	; (800aa5c <UART_SetConfig+0x300>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d134      	bne.n	800a894 <UART_SetConfig+0x138>
 800a82a:	4b8b      	ldr	r3, [pc, #556]	; (800aa58 <UART_SetConfig+0x2fc>)
 800a82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a830:	f003 030c 	and.w	r3, r3, #12
 800a834:	2b0c      	cmp	r3, #12
 800a836:	d829      	bhi.n	800a88c <UART_SetConfig+0x130>
 800a838:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <UART_SetConfig+0xe4>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a875 	.word	0x0800a875
 800a844:	0800a88d 	.word	0x0800a88d
 800a848:	0800a88d 	.word	0x0800a88d
 800a84c:	0800a88d 	.word	0x0800a88d
 800a850:	0800a881 	.word	0x0800a881
 800a854:	0800a88d 	.word	0x0800a88d
 800a858:	0800a88d 	.word	0x0800a88d
 800a85c:	0800a88d 	.word	0x0800a88d
 800a860:	0800a87b 	.word	0x0800a87b
 800a864:	0800a88d 	.word	0x0800a88d
 800a868:	0800a88d 	.word	0x0800a88d
 800a86c:	0800a88d 	.word	0x0800a88d
 800a870:	0800a887 	.word	0x0800a887
 800a874:	2300      	movs	r3, #0
 800a876:	77fb      	strb	r3, [r7, #31]
 800a878:	e117      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a87a:	2302      	movs	r3, #2
 800a87c:	77fb      	strb	r3, [r7, #31]
 800a87e:	e114      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a880:	2304      	movs	r3, #4
 800a882:	77fb      	strb	r3, [r7, #31]
 800a884:	e111      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a886:	2308      	movs	r3, #8
 800a888:	77fb      	strb	r3, [r7, #31]
 800a88a:	e10e      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a88c:	2310      	movs	r3, #16
 800a88e:	77fb      	strb	r3, [r7, #31]
 800a890:	bf00      	nop
 800a892:	e10a      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a71      	ldr	r2, [pc, #452]	; (800aa60 <UART_SetConfig+0x304>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d120      	bne.n	800a8e0 <UART_SetConfig+0x184>
 800a89e:	4b6e      	ldr	r3, [pc, #440]	; (800aa58 <UART_SetConfig+0x2fc>)
 800a8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8a8:	2b10      	cmp	r3, #16
 800a8aa:	d00f      	beq.n	800a8cc <UART_SetConfig+0x170>
 800a8ac:	2b10      	cmp	r3, #16
 800a8ae:	d802      	bhi.n	800a8b6 <UART_SetConfig+0x15a>
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <UART_SetConfig+0x164>
 800a8b4:	e010      	b.n	800a8d8 <UART_SetConfig+0x17c>
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d005      	beq.n	800a8c6 <UART_SetConfig+0x16a>
 800a8ba:	2b30      	cmp	r3, #48	; 0x30
 800a8bc:	d009      	beq.n	800a8d2 <UART_SetConfig+0x176>
 800a8be:	e00b      	b.n	800a8d8 <UART_SetConfig+0x17c>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	77fb      	strb	r3, [r7, #31]
 800a8c4:	e0f1      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	77fb      	strb	r3, [r7, #31]
 800a8ca:	e0ee      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	77fb      	strb	r3, [r7, #31]
 800a8d0:	e0eb      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a8d2:	2308      	movs	r3, #8
 800a8d4:	77fb      	strb	r3, [r7, #31]
 800a8d6:	e0e8      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a8d8:	2310      	movs	r3, #16
 800a8da:	77fb      	strb	r3, [r7, #31]
 800a8dc:	bf00      	nop
 800a8de:	e0e4      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a5f      	ldr	r2, [pc, #380]	; (800aa64 <UART_SetConfig+0x308>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d120      	bne.n	800a92c <UART_SetConfig+0x1d0>
 800a8ea:	4b5b      	ldr	r3, [pc, #364]	; (800aa58 <UART_SetConfig+0x2fc>)
 800a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8f4:	2b40      	cmp	r3, #64	; 0x40
 800a8f6:	d00f      	beq.n	800a918 <UART_SetConfig+0x1bc>
 800a8f8:	2b40      	cmp	r3, #64	; 0x40
 800a8fa:	d802      	bhi.n	800a902 <UART_SetConfig+0x1a6>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <UART_SetConfig+0x1b0>
 800a900:	e010      	b.n	800a924 <UART_SetConfig+0x1c8>
 800a902:	2b80      	cmp	r3, #128	; 0x80
 800a904:	d005      	beq.n	800a912 <UART_SetConfig+0x1b6>
 800a906:	2bc0      	cmp	r3, #192	; 0xc0
 800a908:	d009      	beq.n	800a91e <UART_SetConfig+0x1c2>
 800a90a:	e00b      	b.n	800a924 <UART_SetConfig+0x1c8>
 800a90c:	2300      	movs	r3, #0
 800a90e:	77fb      	strb	r3, [r7, #31]
 800a910:	e0cb      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a912:	2302      	movs	r3, #2
 800a914:	77fb      	strb	r3, [r7, #31]
 800a916:	e0c8      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a918:	2304      	movs	r3, #4
 800a91a:	77fb      	strb	r3, [r7, #31]
 800a91c:	e0c5      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a91e:	2308      	movs	r3, #8
 800a920:	77fb      	strb	r3, [r7, #31]
 800a922:	e0c2      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a924:	2310      	movs	r3, #16
 800a926:	77fb      	strb	r3, [r7, #31]
 800a928:	bf00      	nop
 800a92a:	e0be      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a4d      	ldr	r2, [pc, #308]	; (800aa68 <UART_SetConfig+0x30c>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d124      	bne.n	800a980 <UART_SetConfig+0x224>
 800a936:	4b48      	ldr	r3, [pc, #288]	; (800aa58 <UART_SetConfig+0x2fc>)
 800a938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a93c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a944:	d012      	beq.n	800a96c <UART_SetConfig+0x210>
 800a946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a94a:	d802      	bhi.n	800a952 <UART_SetConfig+0x1f6>
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <UART_SetConfig+0x204>
 800a950:	e012      	b.n	800a978 <UART_SetConfig+0x21c>
 800a952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a956:	d006      	beq.n	800a966 <UART_SetConfig+0x20a>
 800a958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a95c:	d009      	beq.n	800a972 <UART_SetConfig+0x216>
 800a95e:	e00b      	b.n	800a978 <UART_SetConfig+0x21c>
 800a960:	2300      	movs	r3, #0
 800a962:	77fb      	strb	r3, [r7, #31]
 800a964:	e0a1      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a966:	2302      	movs	r3, #2
 800a968:	77fb      	strb	r3, [r7, #31]
 800a96a:	e09e      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a96c:	2304      	movs	r3, #4
 800a96e:	77fb      	strb	r3, [r7, #31]
 800a970:	e09b      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a972:	2308      	movs	r3, #8
 800a974:	77fb      	strb	r3, [r7, #31]
 800a976:	e098      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a978:	2310      	movs	r3, #16
 800a97a:	77fb      	strb	r3, [r7, #31]
 800a97c:	bf00      	nop
 800a97e:	e094      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a39      	ldr	r2, [pc, #228]	; (800aa6c <UART_SetConfig+0x310>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d124      	bne.n	800a9d4 <UART_SetConfig+0x278>
 800a98a:	4b33      	ldr	r3, [pc, #204]	; (800aa58 <UART_SetConfig+0x2fc>)
 800a98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a998:	d012      	beq.n	800a9c0 <UART_SetConfig+0x264>
 800a99a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a99e:	d802      	bhi.n	800a9a6 <UART_SetConfig+0x24a>
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <UART_SetConfig+0x258>
 800a9a4:	e012      	b.n	800a9cc <UART_SetConfig+0x270>
 800a9a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9aa:	d006      	beq.n	800a9ba <UART_SetConfig+0x25e>
 800a9ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9b0:	d009      	beq.n	800a9c6 <UART_SetConfig+0x26a>
 800a9b2:	e00b      	b.n	800a9cc <UART_SetConfig+0x270>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	77fb      	strb	r3, [r7, #31]
 800a9b8:	e077      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	77fb      	strb	r3, [r7, #31]
 800a9be:	e074      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a9c0:	2304      	movs	r3, #4
 800a9c2:	77fb      	strb	r3, [r7, #31]
 800a9c4:	e071      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a9c6:	2308      	movs	r3, #8
 800a9c8:	77fb      	strb	r3, [r7, #31]
 800a9ca:	e06e      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a9cc:	2310      	movs	r3, #16
 800a9ce:	77fb      	strb	r3, [r7, #31]
 800a9d0:	bf00      	nop
 800a9d2:	e06a      	b.n	800aaaa <UART_SetConfig+0x34e>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a25      	ldr	r2, [pc, #148]	; (800aa70 <UART_SetConfig+0x314>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d124      	bne.n	800aa28 <UART_SetConfig+0x2cc>
 800a9de:	4b1e      	ldr	r3, [pc, #120]	; (800aa58 <UART_SetConfig+0x2fc>)
 800a9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ec:	d012      	beq.n	800aa14 <UART_SetConfig+0x2b8>
 800a9ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f2:	d802      	bhi.n	800a9fa <UART_SetConfig+0x29e>
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d007      	beq.n	800aa08 <UART_SetConfig+0x2ac>
 800a9f8:	e012      	b.n	800aa20 <UART_SetConfig+0x2c4>
 800a9fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9fe:	d006      	beq.n	800aa0e <UART_SetConfig+0x2b2>
 800aa00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa04:	d009      	beq.n	800aa1a <UART_SetConfig+0x2be>
 800aa06:	e00b      	b.n	800aa20 <UART_SetConfig+0x2c4>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	77fb      	strb	r3, [r7, #31]
 800aa0c:	e04d      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa0e:	2302      	movs	r3, #2
 800aa10:	77fb      	strb	r3, [r7, #31]
 800aa12:	e04a      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa14:	2304      	movs	r3, #4
 800aa16:	77fb      	strb	r3, [r7, #31]
 800aa18:	e047      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa1a:	2308      	movs	r3, #8
 800aa1c:	77fb      	strb	r3, [r7, #31]
 800aa1e:	e044      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa20:	2310      	movs	r3, #16
 800aa22:	77fb      	strb	r3, [r7, #31]
 800aa24:	bf00      	nop
 800aa26:	e040      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a11      	ldr	r2, [pc, #68]	; (800aa74 <UART_SetConfig+0x318>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d139      	bne.n	800aaa6 <UART_SetConfig+0x34a>
 800aa32:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <UART_SetConfig+0x2fc>)
 800aa34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa40:	d027      	beq.n	800aa92 <UART_SetConfig+0x336>
 800aa42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa46:	d817      	bhi.n	800aa78 <UART_SetConfig+0x31c>
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01c      	beq.n	800aa86 <UART_SetConfig+0x32a>
 800aa4c:	e027      	b.n	800aa9e <UART_SetConfig+0x342>
 800aa4e:	bf00      	nop
 800aa50:	efff69f3 	.word	0xefff69f3
 800aa54:	40011000 	.word	0x40011000
 800aa58:	40023800 	.word	0x40023800
 800aa5c:	40004400 	.word	0x40004400
 800aa60:	40004800 	.word	0x40004800
 800aa64:	40004c00 	.word	0x40004c00
 800aa68:	40005000 	.word	0x40005000
 800aa6c:	40011400 	.word	0x40011400
 800aa70:	40007800 	.word	0x40007800
 800aa74:	40007c00 	.word	0x40007c00
 800aa78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa7c:	d006      	beq.n	800aa8c <UART_SetConfig+0x330>
 800aa7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa82:	d009      	beq.n	800aa98 <UART_SetConfig+0x33c>
 800aa84:	e00b      	b.n	800aa9e <UART_SetConfig+0x342>
 800aa86:	2300      	movs	r3, #0
 800aa88:	77fb      	strb	r3, [r7, #31]
 800aa8a:	e00e      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	77fb      	strb	r3, [r7, #31]
 800aa90:	e00b      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa92:	2304      	movs	r3, #4
 800aa94:	77fb      	strb	r3, [r7, #31]
 800aa96:	e008      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa98:	2308      	movs	r3, #8
 800aa9a:	77fb      	strb	r3, [r7, #31]
 800aa9c:	e005      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aa9e:	2310      	movs	r3, #16
 800aaa0:	77fb      	strb	r3, [r7, #31]
 800aaa2:	bf00      	nop
 800aaa4:	e001      	b.n	800aaaa <UART_SetConfig+0x34e>
 800aaa6:	2310      	movs	r3, #16
 800aaa8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aab2:	d17f      	bne.n	800abb4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aab4:	7ffb      	ldrb	r3, [r7, #31]
 800aab6:	2b08      	cmp	r3, #8
 800aab8:	d85c      	bhi.n	800ab74 <UART_SetConfig+0x418>
 800aaba:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <UART_SetConfig+0x364>)
 800aabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac0:	0800aae5 	.word	0x0800aae5
 800aac4:	0800ab05 	.word	0x0800ab05
 800aac8:	0800ab25 	.word	0x0800ab25
 800aacc:	0800ab75 	.word	0x0800ab75
 800aad0:	0800ab3d 	.word	0x0800ab3d
 800aad4:	0800ab75 	.word	0x0800ab75
 800aad8:	0800ab75 	.word	0x0800ab75
 800aadc:	0800ab75 	.word	0x0800ab75
 800aae0:	0800ab5d 	.word	0x0800ab5d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aae4:	f7fc f8d0 	bl	8006c88 <HAL_RCC_GetPCLK1Freq>
 800aae8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	005a      	lsls	r2, r3, #1
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	085b      	lsrs	r3, r3, #1
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	61bb      	str	r3, [r7, #24]
        break;
 800ab02:	e03a      	b.n	800ab7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab04:	f7fc f8d4 	bl	8006cb0 <HAL_RCC_GetPCLK2Freq>
 800ab08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	005a      	lsls	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	085b      	lsrs	r3, r3, #1
 800ab14:	441a      	add	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	61bb      	str	r3, [r7, #24]
        break;
 800ab22:	e02a      	b.n	800ab7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	085a      	lsrs	r2, r3, #1
 800ab2a:	4b5f      	ldr	r3, [pc, #380]	; (800aca8 <UART_SetConfig+0x54c>)
 800ab2c:	4413      	add	r3, r2
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6852      	ldr	r2, [r2, #4]
 800ab32:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	61bb      	str	r3, [r7, #24]
        break;
 800ab3a:	e01e      	b.n	800ab7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab3c:	f7fb ffe6 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 800ab40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	005a      	lsls	r2, r3, #1
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	441a      	add	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	61bb      	str	r3, [r7, #24]
        break;
 800ab5a:	e00e      	b.n	800ab7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	085b      	lsrs	r3, r3, #1
 800ab62:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	61bb      	str	r3, [r7, #24]
        break;
 800ab72:	e002      	b.n	800ab7a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	75fb      	strb	r3, [r7, #23]
        break;
 800ab78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b0f      	cmp	r3, #15
 800ab7e:	d916      	bls.n	800abae <UART_SetConfig+0x452>
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab86:	d212      	bcs.n	800abae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f023 030f 	bic.w	r3, r3, #15
 800ab90:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	085b      	lsrs	r3, r3, #1
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	f003 0307 	and.w	r3, r3, #7
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	897b      	ldrh	r3, [r7, #10]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	897a      	ldrh	r2, [r7, #10]
 800abaa:	60da      	str	r2, [r3, #12]
 800abac:	e070      	b.n	800ac90 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	75fb      	strb	r3, [r7, #23]
 800abb2:	e06d      	b.n	800ac90 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800abb4:	7ffb      	ldrb	r3, [r7, #31]
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	d859      	bhi.n	800ac6e <UART_SetConfig+0x512>
 800abba:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <UART_SetConfig+0x464>)
 800abbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc0:	0800abe5 	.word	0x0800abe5
 800abc4:	0800ac03 	.word	0x0800ac03
 800abc8:	0800ac21 	.word	0x0800ac21
 800abcc:	0800ac6f 	.word	0x0800ac6f
 800abd0:	0800ac39 	.word	0x0800ac39
 800abd4:	0800ac6f 	.word	0x0800ac6f
 800abd8:	0800ac6f 	.word	0x0800ac6f
 800abdc:	0800ac6f 	.word	0x0800ac6f
 800abe0:	0800ac57 	.word	0x0800ac57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe4:	f7fc f850 	bl	8006c88 <HAL_RCC_GetPCLK1Freq>
 800abe8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	085a      	lsrs	r2, r3, #1
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	441a      	add	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	61bb      	str	r3, [r7, #24]
        break;
 800ac00:	e038      	b.n	800ac74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac02:	f7fc f855 	bl	8006cb0 <HAL_RCC_GetPCLK2Freq>
 800ac06:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	085a      	lsrs	r2, r3, #1
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	441a      	add	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	61bb      	str	r3, [r7, #24]
        break;
 800ac1e:	e029      	b.n	800ac74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	085a      	lsrs	r2, r3, #1
 800ac26:	4b21      	ldr	r3, [pc, #132]	; (800acac <UART_SetConfig+0x550>)
 800ac28:	4413      	add	r3, r2
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	6852      	ldr	r2, [r2, #4]
 800ac2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	61bb      	str	r3, [r7, #24]
        break;
 800ac36:	e01d      	b.n	800ac74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac38:	f7fb ff68 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 800ac3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	085a      	lsrs	r2, r3, #1
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	441a      	add	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	61bb      	str	r3, [r7, #24]
        break;
 800ac54:	e00e      	b.n	800ac74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	61bb      	str	r3, [r7, #24]
        break;
 800ac6c:	e002      	b.n	800ac74 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	75fb      	strb	r3, [r7, #23]
        break;
 800ac72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	2b0f      	cmp	r3, #15
 800ac78:	d908      	bls.n	800ac8c <UART_SetConfig+0x530>
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac80:	d204      	bcs.n	800ac8c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	60da      	str	r2, [r3, #12]
 800ac8a:	e001      	b.n	800ac90 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	01e84800 	.word	0x01e84800
 800acac:	00f42400 	.word	0x00f42400

0800acb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	f003 0302 	and.w	r3, r3, #2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00a      	beq.n	800ad1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	f003 0310 	and.w	r3, r3, #16
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	f003 0320 	and.w	r3, r3, #32
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	430a      	orrs	r2, r1
 800ad82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01a      	beq.n	800adc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adae:	d10a      	bne.n	800adc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	605a      	str	r2, [r3, #4]
  }
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae02:	f7f8 fd1d 	bl	8003840 <HAL_GetTick>
 800ae06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0308 	and.w	r3, r3, #8
 800ae12:	2b08      	cmp	r3, #8
 800ae14:	d10e      	bne.n	800ae34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f814 	bl	800ae52 <UART_WaitOnFlagUntilTimeout>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	e00a      	b.n	800ae4a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2220      	movs	r2, #32
 800ae38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2220      	movs	r2, #32
 800ae3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	60f8      	str	r0, [r7, #12]
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	603b      	str	r3, [r7, #0]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae62:	e05d      	b.n	800af20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6a:	d059      	beq.n	800af20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae6c:	f7f8 fce8 	bl	8003840 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d302      	bcc.n	800ae82 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d11b      	bne.n	800aeba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689a      	ldr	r2, [r3, #8]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 0201 	bic.w	r2, r2, #1
 800aea0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e042      	b.n	800af40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d02b      	beq.n	800af20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aed6:	d123      	bne.n	800af20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aef0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f022 0201 	bic.w	r2, r2, #1
 800af00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2220      	movs	r2, #32
 800af06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2220      	movs	r2, #32
 800af0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2220      	movs	r2, #32
 800af12:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e00f      	b.n	800af40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	69da      	ldr	r2, [r3, #28]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	4013      	ands	r3, r2
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	bf0c      	ite	eq
 800af30:	2301      	moveq	r3, #1
 800af32:	2300      	movne	r3, #0
 800af34:	b2db      	uxtb	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	79fb      	ldrb	r3, [r7, #7]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d092      	beq.n	800ae64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d027      	beq.n	800afb2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	4b2f      	ldr	r3, [pc, #188]	; (800b028 <FMC_SDRAM_Init+0xe0>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af78:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800af7e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800af84:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800af8a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800af90:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800af96:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800af9c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800afa2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	e032      	b.n	800b018 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afbe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afc8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800afce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	4b12      	ldr	r3, [pc, #72]	; (800b028 <FMC_SDRAM_Init+0xe0>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afec:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800aff2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800aff8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800affe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b004:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	ffff8000 	.word	0xffff8000

0800b02c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d02e      	beq.n	800b0a4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b052:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	3b01      	subs	r3, #1
 800b060:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b062:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	3b01      	subs	r3, #1
 800b06a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b06c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	3b01      	subs	r3, #1
 800b074:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b076:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b080:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	3b01      	subs	r3, #1
 800b088:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b08a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	3b01      	subs	r3, #1
 800b092:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b094:	4313      	orrs	r3, r2
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	609a      	str	r2, [r3, #8]
 800b0a2:	e039      	b.n	800b118 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	4b1e      	ldr	r3, [pc, #120]	; (800b128 <FMC_SDRAM_Timing_Init+0xfc>)
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	697a      	ldr	r2, [r7, #20]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0d6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0e6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b0f0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b0fa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	3b01      	subs	r3, #1
 800b102:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b104:	4313      	orrs	r3, r2
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	4313      	orrs	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	ff0f0fff 	.word	0xff0f0fff

0800b12c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b144:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b14e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b156:	4313      	orrs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	695a      	ldr	r2, [r3, #20]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	431a      	orrs	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b194:	b084      	sub	sp, #16
 800b196:	b480      	push	{r7}
 800b198:	b085      	sub	sp, #20
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	f107 001c 	add.w	r0, r7, #28
 800b1a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b1aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b1ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b1b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b1b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b1ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b1be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	4b07      	ldr	r3, [pc, #28]	; (800b1e8 <SDMMC_Init+0x54>)
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	b004      	add	sp, #16
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	ffff8100 	.word	0xffff8100

0800b1ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2203      	movs	r2, #3
 800b212:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b214:	2002      	movs	r0, #2
 800b216:	f7f8 fb1f 	bl	8003858 <HAL_Delay>
  
  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0303 	and.w	r3, r3, #3
}
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b25e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b264:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b26a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4313      	orrs	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68da      	ldr	r2, [r3, #12]
 800b276:	4b06      	ldr	r3, [pc, #24]	; (800b290 <SDMMC_SendCommand+0x50>)
 800b278:	4013      	ands	r3, r2
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	fffff000 	.word	0xfffff000

0800b294 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	b2db      	uxtb	r3, r3
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3314      	adds	r3, #20
 800b2bc:	461a      	mov	r2, r3
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
}  
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2fa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b300:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b306:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	431a      	orrs	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0

}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b33a:	2310      	movs	r3, #16
 800b33c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b33e:	2340      	movs	r3, #64	; 0x40
 800b340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b342:	2300      	movs	r3, #0
 800b344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b34a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b34c:	f107 0308 	add.w	r3, r7, #8
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff ff74 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b358:	f241 3288 	movw	r2, #5000	; 0x1388
 800b35c:	2110      	movs	r1, #16
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa42 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b366:	69fb      	ldr	r3, [r7, #28]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3720      	adds	r7, #32
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b37e:	2311      	movs	r3, #17
 800b380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b382:	2340      	movs	r3, #64	; 0x40
 800b384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b386:	2300      	movs	r3, #0
 800b388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b38a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b38e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b390:	f107 0308 	add.w	r3, r7, #8
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff ff52 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a0:	2111      	movs	r1, #17
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fa20 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b3a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3aa:	69fb      	ldr	r3, [r7, #28]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3720      	adds	r7, #32
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b3c2:	2312      	movs	r3, #18
 800b3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c6:	2340      	movs	r3, #64	; 0x40
 800b3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d4:	f107 0308 	add.w	r3, r7, #8
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff ff30 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e4:	2112      	movs	r1, #18
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f9fe 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b3ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ee:	69fb      	ldr	r3, [r7, #28]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3720      	adds	r7, #32
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b406:	2318      	movs	r3, #24
 800b408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b40a:	2340      	movs	r3, #64	; 0x40
 800b40c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b418:	f107 0308 	add.w	r3, r7, #8
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7ff ff0e 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b424:	f241 3288 	movw	r2, #5000	; 0x1388
 800b428:	2118      	movs	r1, #24
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f9dc 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b432:	69fb      	ldr	r3, [r7, #28]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3720      	adds	r7, #32
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b088      	sub	sp, #32
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b44a:	2319      	movs	r3, #25
 800b44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b44e:	2340      	movs	r3, #64	; 0x40
 800b450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b452:	2300      	movs	r3, #0
 800b454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b45a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b45c:	f107 0308 	add.w	r3, r7, #8
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff feec 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b468:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46c:	2119      	movs	r1, #25
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f9ba 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b476:	69fb      	ldr	r3, [r7, #28]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b48c:	230c      	movs	r3, #12
 800b48e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b494:	2300      	movs	r3, #0
 800b496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b49c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b49e:	f107 0308 	add.w	r3, r7, #8
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff fecb 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b4aa:	4a05      	ldr	r2, [pc, #20]	; (800b4c0 <SDMMC_CmdStopTransfer+0x40>)
 800b4ac:	210c      	movs	r1, #12
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f99a 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3720      	adds	r7, #32
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	05f5e100 	.word	0x05f5e100

0800b4c4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	; 0x28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b4d4:	2307      	movs	r3, #7
 800b4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4d8:	2340      	movs	r3, #64	; 0x40
 800b4da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4e6:	f107 0310 	add.w	r3, r7, #16
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f7ff fea7 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f6:	2107      	movs	r1, #7
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f975 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b4fe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b502:	4618      	mov	r0, r3
 800b504:	3728      	adds	r7, #40	; 0x28
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b088      	sub	sp, #32
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b516:	2300      	movs	r3, #0
 800b518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b51a:	2300      	movs	r3, #0
 800b51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b526:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b528:	f107 0308 	add.w	r3, r7, #8
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff fe86 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f92f 	bl	800b798 <SDMMC_GetCmdError>
 800b53a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53c:	69fb      	ldr	r3, [r7, #28]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3720      	adds	r7, #32
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b088      	sub	sp, #32
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b54e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b554:	2308      	movs	r3, #8
 800b556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b558:	2340      	movs	r3, #64	; 0x40
 800b55a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b566:	f107 0308 	add.w	r3, r7, #8
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fe67 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fb18 	bl	800bba8 <SDMMC_GetCmdResp7>
 800b578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b57a:	69fb      	ldr	r3, [r7, #28]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b592:	2337      	movs	r3, #55	; 0x37
 800b594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b596:	2340      	movs	r3, #64	; 0x40
 800b598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b59a:	2300      	movs	r3, #0
 800b59c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b59e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5a4:	f107 0308 	add.w	r3, r7, #8
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff fe48 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b4:	2137      	movs	r1, #55	; 0x37
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f916 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b5bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5be:	69fb      	ldr	r3, [r7, #28]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3720      	adds	r7, #32
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b088      	sub	sp, #32
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <SDMMC_CmdAppOperCommand+0x44>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b5da:	2329      	movs	r3, #41	; 0x29
 800b5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5de:	2340      	movs	r3, #64	; 0x40
 800b5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fe24 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fa27 	bl	800ba4c <SDMMC_GetCmdResp3>
 800b5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b600:	69fb      	ldr	r3, [r7, #28]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	80100000 	.word	0x80100000

0800b610 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b61e:	2306      	movs	r3, #6
 800b620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b62a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b62e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff fe02 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b640:	2106      	movs	r1, #6
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8d0 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b64a:	69fb      	ldr	r3, [r7, #28]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b660:	2333      	movs	r3, #51	; 0x33
 800b662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b664:	2340      	movs	r3, #64	; 0x40
 800b666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b668:	2300      	movs	r3, #0
 800b66a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b66c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b670:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b672:	f107 0308 	add.w	r3, r7, #8
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff fde1 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b682:	2133      	movs	r1, #51	; 0x33
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f8af 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b68a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b68c:	69fb      	ldr	r3, [r7, #28]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3720      	adds	r7, #32
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b088      	sub	sp, #32
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6a6:	23c0      	movs	r3, #192	; 0xc0
 800b6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff fdc0 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f97d 	bl	800b9c0 <SDMMC_GetCmdResp2>
 800b6c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c8:	69fb      	ldr	r3, [r7, #28]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3720      	adds	r7, #32
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b088      	sub	sp, #32
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6e0:	2309      	movs	r3, #9
 800b6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6e4:	23c0      	movs	r3, #192	; 0xc0
 800b6e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6f2:	f107 0308 	add.w	r3, r7, #8
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff fda1 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f95e 	bl	800b9c0 <SDMMC_GetCmdResp2>
 800b704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b706:	69fb      	ldr	r3, [r7, #28]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b71e:	2303      	movs	r3, #3
 800b720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b722:	2340      	movs	r3, #64	; 0x40
 800b724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b72e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff fd82 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	2103      	movs	r1, #3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f9bd 	bl	800bac0 <SDMMC_GetCmdResp6>
 800b746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b748:	69fb      	ldr	r3, [r7, #28]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3720      	adds	r7, #32
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b088      	sub	sp, #32
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b760:	230d      	movs	r3, #13
 800b762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b764:	2340      	movs	r3, #64	; 0x40
 800b766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b76c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b772:	f107 0308 	add.w	r3, r7, #8
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fd61 	bl	800b240 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b782:	210d      	movs	r1, #13
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f82f 	bl	800b7e8 <SDMMC_GetCmdResp1>
 800b78a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b78c:	69fb      	ldr	r3, [r7, #28]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3720      	adds	r7, #32
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b798:	b490      	push	{r4, r7}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7a0:	4b0f      	ldr	r3, [pc, #60]	; (800b7e0 <SDMMC_GetCmdError+0x48>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a0f      	ldr	r2, [pc, #60]	; (800b7e4 <SDMMC_GetCmdError+0x4c>)
 800b7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7aa:	0a5b      	lsrs	r3, r3, #9
 800b7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7b4:	4623      	mov	r3, r4
 800b7b6:	1e5c      	subs	r4, r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d102      	bne.n	800b7c2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7c0:	e009      	b.n	800b7d6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0f2      	beq.n	800b7b4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	22c5      	movs	r2, #197	; 0xc5
 800b7d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bc90      	pop	{r4, r7}
 800b7de:	4770      	bx	lr
 800b7e0:	20000018 	.word	0x20000018
 800b7e4:	10624dd3 	.word	0x10624dd3

0800b7e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7f6:	4b6f      	ldr	r3, [pc, #444]	; (800b9b4 <SDMMC_GetCmdResp1+0x1cc>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a6f      	ldr	r2, [pc, #444]	; (800b9b8 <SDMMC_GetCmdResp1+0x1d0>)
 800b7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b800:	0a5b      	lsrs	r3, r3, #9
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b808:	4623      	mov	r3, r4
 800b80a:	1e5c      	subs	r4, r3, #1
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b814:	e0c9      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0f0      	beq.n	800b808 <SDMMC_GetCmdResp1+0x20>
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1eb      	bne.n	800b808 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b834:	f003 0304 	and.w	r3, r3, #4
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2204      	movs	r2, #4
 800b840:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b842:	2304      	movs	r3, #4
 800b844:	e0b1      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d004      	beq.n	800b85c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2201      	movs	r2, #1
 800b856:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b858:	2301      	movs	r3, #1
 800b85a:	e0a6      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	22c5      	movs	r2, #197	; 0xc5
 800b860:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7ff fd16 	bl	800b294 <SDMMC_GetCommandResponse>
 800b868:	4603      	mov	r3, r0
 800b86a:	461a      	mov	r2, r3
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	4293      	cmp	r3, r2
 800b870:	d001      	beq.n	800b876 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b872:	2301      	movs	r3, #1
 800b874:	e099      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b876:	2100      	movs	r1, #0
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7ff fd18 	bl	800b2ae <SDMMC_GetResponse>
 800b87e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	4b4e      	ldr	r3, [pc, #312]	; (800b9bc <SDMMC_GetCmdResp1+0x1d4>)
 800b884:	4013      	ands	r3, r2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e08d      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	da02      	bge.n	800b89a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b898:	e087      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8a4:	2340      	movs	r3, #64	; 0x40
 800b8a6:	e080      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8b2:	2380      	movs	r3, #128	; 0x80
 800b8b4:	e079      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8c4:	e071      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8d4:	e069      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8e4:	e061      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8f4:	e059      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b904:	e051      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b914:	e049      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b924:	e041      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b934:	e039      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b944:	e031      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b950:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b954:	e029      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b960:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b964:	e021      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b974:	e019      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b980:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b984:	e011      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b990:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b994:	e009      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f003 0308 	and.w	r3, r3, #8
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b9a4:	e001      	b.n	800b9aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	371c      	adds	r7, #28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd90      	pop	{r4, r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000018 	.word	0x20000018
 800b9b8:	10624dd3 	.word	0x10624dd3
 800b9bc:	fdffe008 	.word	0xfdffe008

0800b9c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b9c0:	b490      	push	{r4, r7}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ba44 <SDMMC_GetCmdResp2+0x84>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a1e      	ldr	r2, [pc, #120]	; (800ba48 <SDMMC_GetCmdResp2+0x88>)
 800b9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d2:	0a5b      	lsrs	r3, r3, #9
 800b9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b9dc:	4623      	mov	r3, r4
 800b9de:	1e5c      	subs	r4, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9e8:	e026      	b.n	800ba38 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0f0      	beq.n	800b9dc <SDMMC_GetCmdResp2+0x1c>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1eb      	bne.n	800b9dc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2204      	movs	r2, #4
 800ba14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba16:	2304      	movs	r3, #4
 800ba18:	e00e      	b.n	800ba38 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d004      	beq.n	800ba30 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e003      	b.n	800ba38 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	22c5      	movs	r2, #197	; 0xc5
 800ba34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bc90      	pop	{r4, r7}
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20000018 	.word	0x20000018
 800ba48:	10624dd3 	.word	0x10624dd3

0800ba4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ba4c:	b490      	push	{r4, r7}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba54:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <SDMMC_GetCmdResp3+0x6c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a18      	ldr	r2, [pc, #96]	; (800babc <SDMMC_GetCmdResp3+0x70>)
 800ba5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5e:	0a5b      	lsrs	r3, r3, #9
 800ba60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba68:	4623      	mov	r3, r4
 800ba6a:	1e5c      	subs	r4, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d102      	bne.n	800ba76 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba74:	e01b      	b.n	800baae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0f0      	beq.n	800ba68 <SDMMC_GetCmdResp3+0x1c>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1eb      	bne.n	800ba68 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d004      	beq.n	800baa6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2204      	movs	r2, #4
 800baa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baa2:	2304      	movs	r3, #4
 800baa4:	e003      	b.n	800baae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	22c5      	movs	r2, #197	; 0xc5
 800baaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bc90      	pop	{r4, r7}
 800bab6:	4770      	bx	lr
 800bab8:	20000018 	.word	0x20000018
 800babc:	10624dd3 	.word	0x10624dd3

0800bac0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bac0:	b590      	push	{r4, r7, lr}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	460b      	mov	r3, r1
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bace:	4b34      	ldr	r3, [pc, #208]	; (800bba0 <SDMMC_GetCmdResp6+0xe0>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a34      	ldr	r2, [pc, #208]	; (800bba4 <SDMMC_GetCmdResp6+0xe4>)
 800bad4:	fba2 2303 	umull	r2, r3, r2, r3
 800bad8:	0a5b      	lsrs	r3, r3, #9
 800bada:	f241 3288 	movw	r2, #5000	; 0x1388
 800bade:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bae2:	4623      	mov	r3, r4
 800bae4:	1e5c      	subs	r4, r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d102      	bne.n	800baf0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baee:	e052      	b.n	800bb96 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d0f0      	beq.n	800bae2 <SDMMC_GetCmdResp6+0x22>
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1eb      	bne.n	800bae2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0e:	f003 0304 	and.w	r3, r3, #4
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d004      	beq.n	800bb20 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2204      	movs	r2, #4
 800bb1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	e03a      	b.n	800bb96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d004      	beq.n	800bb36 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e02f      	b.n	800bb96 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f7ff fbac 	bl	800b294 <SDMMC_GetCommandResponse>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	7afb      	ldrb	r3, [r7, #11]
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d001      	beq.n	800bb4a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e025      	b.n	800bb96 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	22c5      	movs	r2, #197	; 0xc5
 800bb4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb50:	2100      	movs	r1, #0
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f7ff fbab 	bl	800b2ae <SDMMC_GetResponse>
 800bb58:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	0c1b      	lsrs	r3, r3, #16
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e011      	b.n	800bb96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb80:	e009      	b.n	800bb96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb90:	e001      	b.n	800bb96 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd90      	pop	{r4, r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	20000018 	.word	0x20000018
 800bba4:	10624dd3 	.word	0x10624dd3

0800bba8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bba8:	b490      	push	{r4, r7}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbb0:	4b21      	ldr	r3, [pc, #132]	; (800bc38 <SDMMC_GetCmdResp7+0x90>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a21      	ldr	r2, [pc, #132]	; (800bc3c <SDMMC_GetCmdResp7+0x94>)
 800bbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbba:	0a5b      	lsrs	r3, r3, #9
 800bbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	1e5c      	subs	r4, r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbd0:	e02c      	b.n	800bc2c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d0f0      	beq.n	800bbc4 <SDMMC_GetCmdResp7+0x1c>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1eb      	bne.n	800bbc4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf0:	f003 0304 	and.w	r3, r3, #4
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d004      	beq.n	800bc02 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbfe:	2304      	movs	r3, #4
 800bc00:	e014      	b.n	800bc2c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d004      	beq.n	800bc18 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e009      	b.n	800bc2c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2240      	movs	r2, #64	; 0x40
 800bc28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc2a:	2300      	movs	r3, #0
  
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bc90      	pop	{r4, r7}
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	20000018 	.word	0x20000018
 800bc3c:	10624dd3 	.word	0x10624dd3

0800bc40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bc44:	4904      	ldr	r1, [pc, #16]	; (800bc58 <MX_FATFS_Init+0x18>)
 800bc46:	4805      	ldr	r0, [pc, #20]	; (800bc5c <MX_FATFS_Init+0x1c>)
 800bc48:	f000 fa96 	bl	800c178 <FATFS_LinkDriver>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	461a      	mov	r2, r3
 800bc50:	4b03      	ldr	r3, [pc, #12]	; (800bc60 <MX_FATFS_Init+0x20>)
 800bc52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bc54:	bf00      	nop
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	2000c6c0 	.word	0x2000c6c0
 800bc5c:	08025ce8 	.word	0x08025ce8
 800bc60:	2000c6bc 	.word	0x2000c6bc

0800bc64 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc6e:	f000 f87b 	bl	800bd68 <BSP_SD_IsDetected>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d001      	beq.n	800bc7c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bc78:	2302      	movs	r3, #2
 800bc7a:	e012      	b.n	800bca2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bc7c:	480b      	ldr	r0, [pc, #44]	; (800bcac <BSP_SD_Init+0x48>)
 800bc7e:	f7fc fae9 	bl	8008254 <HAL_SD_Init>
 800bc82:	4603      	mov	r3, r0
 800bc84:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc86:	79fb      	ldrb	r3, [r7, #7]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d109      	bne.n	800bca0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc90:	4806      	ldr	r0, [pc, #24]	; (800bcac <BSP_SD_Init+0x48>)
 800bc92:	f7fc ff2b 	bl	8008aec <HAL_SD_ConfigWideBusOperation>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bca0:	79fb      	ldrb	r3, [r7, #7]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	2000c148 	.word	0x2000c148

0800bcb0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	68f9      	ldr	r1, [r7, #12]
 800bcc6:	4806      	ldr	r0, [pc, #24]	; (800bce0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bcc8:	f7fc fb5c 	bl	8008384 <HAL_SD_ReadBlocks_DMA>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	2000c148 	.word	0x2000c148

0800bce4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	4806      	ldr	r0, [pc, #24]	; (800bd14 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bcfc:	f7fc fc2e 	bl	800855c <HAL_SD_WriteBlocks_DMA>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	2000c148 	.word	0x2000c148

0800bd18 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bd1c:	4805      	ldr	r0, [pc, #20]	; (800bd34 <BSP_SD_GetCardState+0x1c>)
 800bd1e:	f7fc ff61 	bl	8008be4 <HAL_SD_GetCardState>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b04      	cmp	r3, #4
 800bd26:	bf14      	ite	ne
 800bd28:	2301      	movne	r3, #1
 800bd2a:	2300      	moveq	r3, #0
 800bd2c:	b2db      	uxtb	r3, r3
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	2000c148 	.word	0x2000c148

0800bd38 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4803      	ldr	r0, [pc, #12]	; (800bd50 <BSP_SD_GetCardInfo+0x18>)
 800bd44:	f7fc fea6 	bl	8008a94 <HAL_SD_GetCardInfo>
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	2000c148 	.word	0x2000c148

0800bd54 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd5c:	f000 f9b2 	bl	800c0c4 <BSP_SD_ReadCpltCallback>
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bd72:	f000 f80b 	bl	800bd8c <BSP_PlatformIsDetected>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	b2db      	uxtb	r3, r3
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bd92:	2301      	movs	r3, #1
 800bd94:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bd96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bd9a:	4806      	ldr	r0, [pc, #24]	; (800bdb4 <BSP_PlatformIsDetected+0x28>)
 800bd9c:	f7f9 fe3a 	bl	8005a14 <HAL_GPIO_ReadPin>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bda6:	2300      	movs	r3, #0
 800bda8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
}  
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	40020800 	.word	0x40020800

0800bdb8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800bdc0:	f000 fa26 	bl	800c210 <osKernelSysTick>
 800bdc4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800bdc6:	e006      	b.n	800bdd6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bdc8:	f7ff ffa6 	bl	800bd18 <BSP_SD_GetCardState>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e009      	b.n	800bdea <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800bdd6:	f000 fa1b 	bl	800c210 <osKernelSysTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d8f0      	bhi.n	800bdc8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bde6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bdfe:	4b0b      	ldr	r3, [pc, #44]	; (800be2c <SD_CheckStatus+0x38>)
 800be00:	2201      	movs	r2, #1
 800be02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be04:	f7ff ff88 	bl	800bd18 <BSP_SD_GetCardState>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d107      	bne.n	800be1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be0e:	4b07      	ldr	r3, [pc, #28]	; (800be2c <SD_CheckStatus+0x38>)
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	b2db      	uxtb	r3, r3
 800be14:	f023 0301 	bic.w	r3, r3, #1
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	4b04      	ldr	r3, [pc, #16]	; (800be2c <SD_CheckStatus+0x38>)
 800be1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800be1e:	4b03      	ldr	r3, [pc, #12]	; (800be2c <SD_CheckStatus+0x38>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b2db      	uxtb	r3, r3
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	20000021 	.word	0x20000021

0800be30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be30:	b590      	push	{r4, r7, lr}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800be3a:	4b20      	ldr	r3, [pc, #128]	; (800bebc <SD_initialize+0x8c>)
 800be3c:	2201      	movs	r2, #1
 800be3e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800be40:	f000 f9da 	bl	800c1f8 <osKernelRunning>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d030      	beq.n	800beac <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800be4a:	f7ff ff0b 	bl	800bc64 <BSP_SD_Init>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d107      	bne.n	800be64 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff ffcc 	bl	800bdf4 <SD_CheckStatus>
 800be5c:	4603      	mov	r3, r0
 800be5e:	461a      	mov	r2, r3
 800be60:	4b16      	ldr	r3, [pc, #88]	; (800bebc <SD_initialize+0x8c>)
 800be62:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800be64:	4b15      	ldr	r3, [pc, #84]	; (800bebc <SD_initialize+0x8c>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d01e      	beq.n	800beac <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800be6e:	4b14      	ldr	r3, [pc, #80]	; (800bec0 <SD_initialize+0x90>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10e      	bne.n	800be94 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800be76:	4b13      	ldr	r3, [pc, #76]	; (800bec4 <SD_initialize+0x94>)
 800be78:	f107 0408 	add.w	r4, r7, #8
 800be7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800be82:	f107 0308 	add.w	r3, r7, #8
 800be86:	2100      	movs	r1, #0
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 fa31 	bl	800c2f0 <osMessageCreate>
 800be8e:	4602      	mov	r2, r0
 800be90:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <SD_initialize+0x90>)
 800be92:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800be94:	4b0a      	ldr	r3, [pc, #40]	; (800bec0 <SD_initialize+0x90>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d107      	bne.n	800beac <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800be9c:	4b07      	ldr	r3, [pc, #28]	; (800bebc <SD_initialize+0x8c>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f043 0301 	orr.w	r3, r3, #1
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	4b04      	ldr	r3, [pc, #16]	; (800bebc <SD_initialize+0x8c>)
 800beaa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800beac:	4b03      	ldr	r3, [pc, #12]	; (800bebc <SD_initialize+0x8c>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	b2db      	uxtb	r3, r3
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	371c      	adds	r7, #28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd90      	pop	{r4, r7, pc}
 800beba:	bf00      	nop
 800bebc:	20000021 	.word	0x20000021
 800bec0:	200003a8 	.word	0x200003a8
 800bec4:	08025660 	.word	0x08025660

0800bec8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff ff8d 	bl	800bdf4 <SD_CheckStatus>
 800beda:	4603      	mov	r3, r0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08a      	sub	sp, #40	; 0x28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	607a      	str	r2, [r7, #4]
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800befa:	f247 5030 	movw	r0, #30000	; 0x7530
 800befe:	f7ff ff5b 	bl	800bdb8 <SD_CheckStatusWithTimeout>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	da02      	bge.n	800bf0e <SD_read+0x2a>
  {
    return res;
 800bf08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf0c:	e032      	b.n	800bf74 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	68b8      	ldr	r0, [r7, #8]
 800bf14:	f7ff fecc 	bl	800bcb0 <BSP_SD_ReadBlocks_DMA>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bf1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d124      	bne.n	800bf70 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bf26:	4b15      	ldr	r3, [pc, #84]	; (800bf7c <SD_read+0x98>)
 800bf28:	6819      	ldr	r1, [r3, #0]
 800bf2a:	f107 0314 	add.w	r3, r7, #20
 800bf2e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fa46 	bl	800c3c4 <osMessageGet>

    if (event.status == osEventMessage)
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	2b10      	cmp	r3, #16
 800bf3c:	d118      	bne.n	800bf70 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d115      	bne.n	800bf70 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bf44:	f000 f964 	bl	800c210 <osKernelSysTick>
 800bf48:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf4a:	e008      	b.n	800bf5e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf4c:	f7ff fee4 	bl	800bd18 <BSP_SD_GetCardState>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d103      	bne.n	800bf5e <SD_read+0x7a>
              {
                res = RES_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bf5c:	e008      	b.n	800bf70 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf5e:	f000 f957 	bl	800c210 <osKernelSysTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d9ed      	bls.n	800bf4c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bf70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3728      	adds	r7, #40	; 0x28
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	200003a8 	.word	0x200003a8

0800bf80 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08a      	sub	sp, #40	; 0x28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60b9      	str	r1, [r7, #8]
 800bf88:	607a      	str	r2, [r7, #4]
 800bf8a:	603b      	str	r3, [r7, #0]
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf96:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf9a:	f7ff ff0d 	bl	800bdb8 <SD_CheckStatusWithTimeout>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	da02      	bge.n	800bfaa <SD_write+0x2a>
  {
    return res;
 800bfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa8:	e02e      	b.n	800c008 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	68b8      	ldr	r0, [r7, #8]
 800bfb0:	f7ff fe98 	bl	800bce4 <BSP_SD_WriteBlocks_DMA>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d124      	bne.n	800c004 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bfba:	4b15      	ldr	r3, [pc, #84]	; (800c010 <SD_write+0x90>)
 800bfbc:	6819      	ldr	r1, [r3, #0]
 800bfbe:	f107 0314 	add.w	r3, r7, #20
 800bfc2:	f247 5230 	movw	r2, #30000	; 0x7530
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 f9fc 	bl	800c3c4 <osMessageGet>

    if (event.status == osEventMessage)
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2b10      	cmp	r3, #16
 800bfd0:	d118      	bne.n	800c004 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d115      	bne.n	800c004 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bfd8:	f000 f91a 	bl	800c210 <osKernelSysTick>
 800bfdc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bfde:	e008      	b.n	800bff2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bfe0:	f7ff fe9a 	bl	800bd18 <BSP_SD_GetCardState>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d103      	bne.n	800bff2 <SD_write+0x72>
          {
            res = RES_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bff0:	e008      	b.n	800c004 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bff2:	f000 f90d 	bl	800c210 <osKernelSysTick>
 800bff6:	4602      	mov	r2, r0
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c000:	4293      	cmp	r3, r2
 800c002:	d9ed      	bls.n	800bfe0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3728      	adds	r7, #40	; 0x28
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	200003a8 	.word	0x200003a8

0800c014 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08c      	sub	sp, #48	; 0x30
 800c018:	af00      	add	r7, sp, #0
 800c01a:	4603      	mov	r3, r0
 800c01c:	603a      	str	r2, [r7, #0]
 800c01e:	71fb      	strb	r3, [r7, #7]
 800c020:	460b      	mov	r3, r1
 800c022:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c02a:	4b25      	ldr	r3, [pc, #148]	; (800c0c0 <SD_ioctl+0xac>)
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <SD_ioctl+0x28>
 800c038:	2303      	movs	r3, #3
 800c03a:	e03c      	b.n	800c0b6 <SD_ioctl+0xa2>

  switch (cmd)
 800c03c:	79bb      	ldrb	r3, [r7, #6]
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d834      	bhi.n	800c0ac <SD_ioctl+0x98>
 800c042:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <SD_ioctl+0x34>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c059 	.word	0x0800c059
 800c04c:	0800c061 	.word	0x0800c061
 800c050:	0800c079 	.word	0x0800c079
 800c054:	0800c093 	.word	0x0800c093
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c05e:	e028      	b.n	800c0b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c060:	f107 030c 	add.w	r3, r7, #12
 800c064:	4618      	mov	r0, r3
 800c066:	f7ff fe67 	bl	800bd38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c076:	e01c      	b.n	800c0b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c078:	f107 030c 	add.w	r3, r7, #12
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7ff fe5b 	bl	800bd38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c084:	b29a      	uxth	r2, r3
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c090:	e00f      	b.n	800c0b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c092:	f107 030c 	add.w	r3, r7, #12
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff fe4e 	bl	800bd38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	0a5a      	lsrs	r2, r3, #9
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0aa:	e002      	b.n	800c0b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c0b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3730      	adds	r7, #48	; 0x30
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000021 	.word	0x20000021

0800c0c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c0c8:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <BSP_SD_ReadCpltCallback+0x18>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 f937 	bl	800c344 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c0d6:	bf00      	nop
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	200003a8 	.word	0x200003a8

0800c0e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c0f6:	4b1f      	ldr	r3, [pc, #124]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c0f8:	7a5b      	ldrb	r3, [r3, #9]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d131      	bne.n	800c164 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c100:	4b1c      	ldr	r3, [pc, #112]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c102:	7a5b      	ldrb	r3, [r3, #9]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	461a      	mov	r2, r3
 800c108:	4b1a      	ldr	r3, [pc, #104]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c10a:	2100      	movs	r1, #0
 800c10c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c10e:	4b19      	ldr	r3, [pc, #100]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c110:	7a5b      	ldrb	r3, [r3, #9]
 800c112:	b2db      	uxtb	r3, r3
 800c114:	4a17      	ldr	r2, [pc, #92]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c11e:	4b15      	ldr	r3, [pc, #84]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c120:	7a5b      	ldrb	r3, [r3, #9]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	461a      	mov	r2, r3
 800c126:	4b13      	ldr	r3, [pc, #76]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c128:	4413      	add	r3, r2
 800c12a:	79fa      	ldrb	r2, [r7, #7]
 800c12c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c12e:	4b11      	ldr	r3, [pc, #68]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c130:	7a5b      	ldrb	r3, [r3, #9]
 800c132:	b2db      	uxtb	r3, r3
 800c134:	1c5a      	adds	r2, r3, #1
 800c136:	b2d1      	uxtb	r1, r2
 800c138:	4a0e      	ldr	r2, [pc, #56]	; (800c174 <FATFS_LinkDriverEx+0x94>)
 800c13a:	7251      	strb	r1, [r2, #9]
 800c13c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c13e:	7dbb      	ldrb	r3, [r7, #22]
 800c140:	3330      	adds	r3, #48	; 0x30
 800c142:	b2da      	uxtb	r2, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	3301      	adds	r3, #1
 800c14c:	223a      	movs	r2, #58	; 0x3a
 800c14e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	3302      	adds	r3, #2
 800c154:	222f      	movs	r2, #47	; 0x2f
 800c156:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	3303      	adds	r3, #3
 800c15c:	2200      	movs	r2, #0
 800c15e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
}
 800c166:	4618      	mov	r0, r3
 800c168:	371c      	adds	r7, #28
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	200003ac 	.word	0x200003ac

0800c178 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c182:	2200      	movs	r2, #0
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff ffaa 	bl	800c0e0 <FATFS_LinkDriverEx>
 800c18c:	4603      	mov	r3, r0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c196:	b480      	push	{r7}
 800c198:	b085      	sub	sp, #20
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	4603      	mov	r3, r0
 800c19e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c1a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1a8:	2b84      	cmp	r3, #132	; 0x84
 800c1aa:	d005      	beq.n	800c1b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c1ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	3303      	adds	r3, #3
 800c1b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1cc:	f3ef 8305 	mrs	r3, IPSR
 800c1d0:	607b      	str	r3, [r7, #4]
  return(result);
 800c1d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bf14      	ite	ne
 800c1d8:	2301      	movne	r3, #1
 800c1da:	2300      	moveq	r3, #0
 800c1dc:	b2db      	uxtb	r3, r3
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c1ee:	f001 faff 	bl	800d7f0 <vTaskStartScheduler>
  
  return osOK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c1fc:	f001 ff4a 	bl	800e094 <xTaskGetSchedulerState>
 800c200:	4603      	mov	r3, r0
 800c202:	2b01      	cmp	r3, #1
 800c204:	d101      	bne.n	800c20a <osKernelRunning+0x12>
    return 0;
 800c206:	2300      	movs	r3, #0
 800c208:	e000      	b.n	800c20c <osKernelRunning+0x14>
  else
    return 1;
 800c20a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c214:	f7ff ffd7 	bl	800c1c6 <inHandlerMode>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d003      	beq.n	800c226 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c21e:	f001 fc05 	bl	800da2c <xTaskGetTickCountFromISR>
 800c222:	4603      	mov	r3, r0
 800c224:	e002      	b.n	800c22c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c226:	f001 fbf1 	bl	800da0c <xTaskGetTickCount>
 800c22a:	4603      	mov	r3, r0
  }
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c232:	b089      	sub	sp, #36	; 0x24
 800c234:	af04      	add	r7, sp, #16
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d020      	beq.n	800c284 <osThreadCreate+0x54>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d01c      	beq.n	800c284 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685c      	ldr	r4, [r3, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681d      	ldr	r5, [r3, #0]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691e      	ldr	r6, [r3, #16]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7ff ff9a 	bl	800c196 <makeFreeRtosPriority>
 800c262:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c26c:	9202      	str	r2, [sp, #8]
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	9100      	str	r1, [sp, #0]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	4632      	mov	r2, r6
 800c276:	4629      	mov	r1, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	f001 f8e0 	bl	800d43e <xTaskCreateStatic>
 800c27e:	4603      	mov	r3, r0
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	e01c      	b.n	800c2be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685c      	ldr	r4, [r3, #4]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c290:	b29e      	uxth	r6, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff ff7c 	bl	800c196 <makeFreeRtosPriority>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	f107 030c 	add.w	r3, r7, #12
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	9200      	str	r2, [sp, #0]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	4632      	mov	r2, r6
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f001 f925 	bl	800d4fe <xTaskCreate>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d001      	beq.n	800c2be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e000      	b.n	800c2c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c2be:	68fb      	ldr	r3, [r7, #12]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <osDelay+0x16>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	e000      	b.n	800c2e0 <osDelay+0x18>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f001 fa4f 	bl	800d784 <vTaskDelay>
  
  return osOK;
 800c2e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c2f0:	b590      	push	{r4, r7, lr}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af02      	add	r7, sp, #8
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d012      	beq.n	800c328 <osMessageCreate+0x38>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00e      	beq.n	800c328 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6818      	ldr	r0, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6859      	ldr	r1, [r3, #4]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689a      	ldr	r2, [r3, #8]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68dc      	ldr	r4, [r3, #12]
 800c31a:	2300      	movs	r3, #0
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	4623      	mov	r3, r4
 800c320:	f000 f9e2 	bl	800c6e8 <xQueueGenericCreateStatic>
 800c324:	4603      	mov	r3, r0
 800c326:	e008      	b.n	800c33a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6818      	ldr	r0, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	4619      	mov	r1, r3
 800c334:	f000 fa55 	bl	800c7e2 <xQueueGenericCreate>
 800c338:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd90      	pop	{r4, r7, pc}
	...

0800c344 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b086      	sub	sp, #24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c350:	2300      	movs	r3, #0
 800c352:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <osMessagePut+0x1e>
    ticks = 1;
 800c35e:	2301      	movs	r3, #1
 800c360:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c362:	f7ff ff30 	bl	800c1c6 <inHandlerMode>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d018      	beq.n	800c39e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c36c:	f107 0210 	add.w	r2, r7, #16
 800c370:	f107 0108 	add.w	r1, r7, #8
 800c374:	2300      	movs	r3, #0
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 fb96 	bl	800caa8 <xQueueGenericSendFromISR>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d001      	beq.n	800c386 <osMessagePut+0x42>
      return osErrorOS;
 800c382:	23ff      	movs	r3, #255	; 0xff
 800c384:	e018      	b.n	800c3b8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d014      	beq.n	800c3b6 <osMessagePut+0x72>
 800c38c:	4b0c      	ldr	r3, [pc, #48]	; (800c3c0 <osMessagePut+0x7c>)
 800c38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c392:	601a      	str	r2, [r3, #0]
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	e00b      	b.n	800c3b6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c39e:	f107 0108 	add.w	r1, r7, #8
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 fa7c 	bl	800c8a4 <xQueueGenericSend>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d001      	beq.n	800c3b6 <osMessagePut+0x72>
      return osErrorOS;
 800c3b2:	23ff      	movs	r3, #255	; 0xff
 800c3b4:	e000      	b.n	800c3b8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	e000ed04 	.word	0xe000ed04

0800c3c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c3c4:	b590      	push	{r4, r7, lr}
 800c3c6:	b08b      	sub	sp, #44	; 0x2c
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10a      	bne.n	800c3f4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c3de:	2380      	movs	r3, #128	; 0x80
 800c3e0:	617b      	str	r3, [r7, #20]
    return event;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	461c      	mov	r4, r3
 800c3e6:	f107 0314 	add.w	r3, r7, #20
 800c3ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c3f2:	e054      	b.n	800c49e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d103      	bne.n	800c40c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c404:	f04f 33ff 	mov.w	r3, #4294967295
 800c408:	627b      	str	r3, [r7, #36]	; 0x24
 800c40a:	e009      	b.n	800c420 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d006      	beq.n	800c420 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <osMessageGet+0x5c>
      ticks = 1;
 800c41c:	2301      	movs	r3, #1
 800c41e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c420:	f7ff fed1 	bl	800c1c6 <inHandlerMode>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01c      	beq.n	800c464 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c42a:	f107 0220 	add.w	r2, r7, #32
 800c42e:	f107 0314 	add.w	r3, r7, #20
 800c432:	3304      	adds	r3, #4
 800c434:	4619      	mov	r1, r3
 800c436:	68b8      	ldr	r0, [r7, #8]
 800c438:	f000 fe56 	bl	800d0e8 <xQueueReceiveFromISR>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d102      	bne.n	800c448 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c442:	2310      	movs	r3, #16
 800c444:	617b      	str	r3, [r7, #20]
 800c446:	e001      	b.n	800c44c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c448:	2300      	movs	r3, #0
 800c44a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d01d      	beq.n	800c48e <osMessageGet+0xca>
 800c452:	4b15      	ldr	r3, [pc, #84]	; (800c4a8 <osMessageGet+0xe4>)
 800c454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	e014      	b.n	800c48e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c464:	f107 0314 	add.w	r3, r7, #20
 800c468:	3304      	adds	r3, #4
 800c46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c46c:	4619      	mov	r1, r3
 800c46e:	68b8      	ldr	r0, [r7, #8]
 800c470:	f000 fc48 	bl	800cd04 <xQueueReceive>
 800c474:	4603      	mov	r3, r0
 800c476:	2b01      	cmp	r3, #1
 800c478:	d102      	bne.n	800c480 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c47a:	2310      	movs	r3, #16
 800c47c:	617b      	str	r3, [r7, #20]
 800c47e:	e006      	b.n	800c48e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <osMessageGet+0xc6>
 800c486:	2300      	movs	r3, #0
 800c488:	e000      	b.n	800c48c <osMessageGet+0xc8>
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	461c      	mov	r4, r3
 800c492:	f107 0314 	add.w	r3, r7, #20
 800c496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c49a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	372c      	adds	r7, #44	; 0x2c
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd90      	pop	{r4, r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f103 0208 	add.w	r2, r3, #8
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f103 0208 	add.w	r2, r3, #8
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f103 0208 	add.w	r2, r3, #8
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4fa:	bf00      	nop
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c506:	b480      	push	{r7}
 800c508:	b085      	sub	sp, #20
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	683a      	ldr	r2, [r7, #0]
 800c52a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	601a      	str	r2, [r3, #0]
}
 800c542:	bf00      	nop
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c54e:	b480      	push	{r7}
 800c550:	b085      	sub	sp, #20
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c564:	d103      	bne.n	800c56e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	e00c      	b.n	800c588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	3308      	adds	r3, #8
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	e002      	b.n	800c57c <vListInsert+0x2e>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	429a      	cmp	r2, r3
 800c586:	d2f6      	bcs.n	800c576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	601a      	str	r2, [r3, #0]
}
 800c5b4:	bf00      	nop
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	6892      	ldr	r2, [r2, #8]
 800c5d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	6852      	ldr	r2, [r2, #4]
 800c5e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d103      	bne.n	800c5f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	689a      	ldr	r2, [r3, #8]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	1e5a      	subs	r2, r3, #1
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10b      	bne.n	800c640 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	b672      	cpsid	i
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	b662      	cpsie	i
 800c63c:	60bb      	str	r3, [r7, #8]
 800c63e:	e7fe      	b.n	800c63e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c640:	f002 f86a 	bl	800e718 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c650:	fb01 f303 	mul.w	r3, r1, r3
 800c654:	441a      	add	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c670:	3b01      	subs	r3, #1
 800c672:	68f9      	ldr	r1, [r7, #12]
 800c674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c676:	fb01 f303 	mul.w	r3, r1, r3
 800c67a:	441a      	add	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	22ff      	movs	r2, #255	; 0xff
 800c684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	22ff      	movs	r2, #255	; 0xff
 800c68c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d114      	bne.n	800c6c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d01a      	beq.n	800c6d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3310      	adds	r3, #16
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f001 fb36 	bl	800dd14 <xTaskRemoveFromEventList>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d012      	beq.n	800c6d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	; (800c6e4 <xQueueGenericReset+0xd0>)
 800c6b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	e009      	b.n	800c6d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3310      	adds	r3, #16
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff fef1 	bl	800c4ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3324      	adds	r3, #36	; 0x24
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7ff feec 	bl	800c4ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c6d4:	f002 f852 	bl	800e77c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c6d8:	2301      	movs	r3, #1
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	e000ed04 	.word	0xe000ed04

0800c6e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08e      	sub	sp, #56	; 0x38
 800c6ec:	af02      	add	r7, sp, #8
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10b      	bne.n	800c714 <xQueueGenericCreateStatic+0x2c>
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	b672      	cpsid	i
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	b662      	cpsie	i
 800c710:	62bb      	str	r3, [r7, #40]	; 0x28
 800c712:	e7fe      	b.n	800c712 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10b      	bne.n	800c732 <xQueueGenericCreateStatic+0x4a>
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	b672      	cpsid	i
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	b662      	cpsie	i
 800c72e:	627b      	str	r3, [r7, #36]	; 0x24
 800c730:	e7fe      	b.n	800c730 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <xQueueGenericCreateStatic+0x56>
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d001      	beq.n	800c742 <xQueueGenericCreateStatic+0x5a>
 800c73e:	2301      	movs	r3, #1
 800c740:	e000      	b.n	800c744 <xQueueGenericCreateStatic+0x5c>
 800c742:	2300      	movs	r3, #0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10b      	bne.n	800c760 <xQueueGenericCreateStatic+0x78>
 800c748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74c:	b672      	cpsid	i
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	b662      	cpsie	i
 800c75c:	623b      	str	r3, [r7, #32]
 800c75e:	e7fe      	b.n	800c75e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d102      	bne.n	800c76c <xQueueGenericCreateStatic+0x84>
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <xQueueGenericCreateStatic+0x88>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <xQueueGenericCreateStatic+0x8a>
 800c770:	2300      	movs	r3, #0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d10b      	bne.n	800c78e <xQueueGenericCreateStatic+0xa6>
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	b672      	cpsid	i
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	b662      	cpsie	i
 800c78a:	61fb      	str	r3, [r7, #28]
 800c78c:	e7fe      	b.n	800c78c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c78e:	2348      	movs	r3, #72	; 0x48
 800c790:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2b48      	cmp	r3, #72	; 0x48
 800c796:	d00b      	beq.n	800c7b0 <xQueueGenericCreateStatic+0xc8>
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	b672      	cpsid	i
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	b662      	cpsie	i
 800c7ac:	61bb      	str	r3, [r7, #24]
 800c7ae:	e7fe      	b.n	800c7ae <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c7b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00d      	beq.n	800c7d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	68b9      	ldr	r1, [r7, #8]
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f000 f846 	bl	800c864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3730      	adds	r7, #48	; 0x30
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b08a      	sub	sp, #40	; 0x28
 800c7e6:	af02      	add	r7, sp, #8
 800c7e8:	60f8      	str	r0, [r7, #12]
 800c7ea:	60b9      	str	r1, [r7, #8]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <xQueueGenericCreate+0x2c>
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	b672      	cpsid	i
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	b662      	cpsie	i
 800c80a:	613b      	str	r3, [r7, #16]
 800c80c:	e7fe      	b.n	800c80c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c814:	2300      	movs	r3, #0
 800c816:	61fb      	str	r3, [r7, #28]
 800c818:	e004      	b.n	800c824 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	fb02 f303 	mul.w	r3, r2, r3
 800c822:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	3348      	adds	r3, #72	; 0x48
 800c828:	4618      	mov	r0, r3
 800c82a:	f002 f897 	bl	800e95c <pvPortMalloc>
 800c82e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d011      	beq.n	800c85a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	3348      	adds	r3, #72	; 0x48
 800c83e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c848:	79fa      	ldrb	r2, [r7, #7]
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	4613      	mov	r3, r2
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	68b9      	ldr	r1, [r7, #8]
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 f805 	bl	800c864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c85a:	69bb      	ldr	r3, [r7, #24]
	}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3720      	adds	r7, #32
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d103      	bne.n	800c880 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	e002      	b.n	800c886 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c892:	2101      	movs	r1, #1
 800c894:	69b8      	ldr	r0, [r7, #24]
 800c896:	f7ff febd 	bl	800c614 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08e      	sub	sp, #56	; 0x38
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10b      	bne.n	800c8d8 <xQueueGenericSend+0x34>
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	b672      	cpsid	i
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	b662      	cpsie	i
 800c8d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8d6:	e7fe      	b.n	800c8d6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d103      	bne.n	800c8e6 <xQueueGenericSend+0x42>
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <xQueueGenericSend+0x46>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e000      	b.n	800c8ec <xQueueGenericSend+0x48>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10b      	bne.n	800c908 <xQueueGenericSend+0x64>
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	b672      	cpsid	i
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	b662      	cpsie	i
 800c904:	627b      	str	r3, [r7, #36]	; 0x24
 800c906:	e7fe      	b.n	800c906 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d103      	bne.n	800c916 <xQueueGenericSend+0x72>
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c912:	2b01      	cmp	r3, #1
 800c914:	d101      	bne.n	800c91a <xQueueGenericSend+0x76>
 800c916:	2301      	movs	r3, #1
 800c918:	e000      	b.n	800c91c <xQueueGenericSend+0x78>
 800c91a:	2300      	movs	r3, #0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10b      	bne.n	800c938 <xQueueGenericSend+0x94>
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	b672      	cpsid	i
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	b662      	cpsie	i
 800c934:	623b      	str	r3, [r7, #32]
 800c936:	e7fe      	b.n	800c936 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c938:	f001 fbac 	bl	800e094 <xTaskGetSchedulerState>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <xQueueGenericSend+0xa4>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <xQueueGenericSend+0xa8>
 800c948:	2301      	movs	r3, #1
 800c94a:	e000      	b.n	800c94e <xQueueGenericSend+0xaa>
 800c94c:	2300      	movs	r3, #0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10b      	bne.n	800c96a <xQueueGenericSend+0xc6>
 800c952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c956:	b672      	cpsid	i
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	b662      	cpsie	i
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	e7fe      	b.n	800c968 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c96a:	f001 fed5 	bl	800e718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c976:	429a      	cmp	r2, r3
 800c978:	d302      	bcc.n	800c980 <xQueueGenericSend+0xdc>
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d129      	bne.n	800c9d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c980:	683a      	ldr	r2, [r7, #0]
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c986:	f000 fc4a 	bl	800d21e <prvCopyDataToQueue>
 800c98a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d010      	beq.n	800c9b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	3324      	adds	r3, #36	; 0x24
 800c998:	4618      	mov	r0, r3
 800c99a:	f001 f9bb 	bl	800dd14 <xTaskRemoveFromEventList>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d013      	beq.n	800c9cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c9a4:	4b3f      	ldr	r3, [pc, #252]	; (800caa4 <xQueueGenericSend+0x200>)
 800c9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	f3bf 8f6f 	isb	sy
 800c9b4:	e00a      	b.n	800c9cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d007      	beq.n	800c9cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c9bc:	4b39      	ldr	r3, [pc, #228]	; (800caa4 <xQueueGenericSend+0x200>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9cc:	f001 fed6 	bl	800e77c <vPortExitCritical>
				return pdPASS;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e063      	b.n	800ca9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d103      	bne.n	800c9e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9da:	f001 fecf 	bl	800e77c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e05c      	b.n	800ca9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d106      	bne.n	800c9f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9e8:	f107 0314 	add.w	r3, r7, #20
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f001 f9f5 	bl	800dddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9f6:	f001 fec1 	bl	800e77c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9fa:	f000 ff5b 	bl	800d8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9fe:	f001 fe8b 	bl	800e718 <vPortEnterCritical>
 800ca02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca08:	b25b      	sxtb	r3, r3
 800ca0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0e:	d103      	bne.n	800ca18 <xQueueGenericSend+0x174>
 800ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca1e:	b25b      	sxtb	r3, r3
 800ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca24:	d103      	bne.n	800ca2e <xQueueGenericSend+0x18a>
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca2e:	f001 fea5 	bl	800e77c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca32:	1d3a      	adds	r2, r7, #4
 800ca34:	f107 0314 	add.w	r3, r7, #20
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f001 f9e4 	bl	800de08 <xTaskCheckForTimeOut>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d124      	bne.n	800ca90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca48:	f000 fce1 	bl	800d40e <prvIsQueueFull>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d018      	beq.n	800ca84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	3310      	adds	r3, #16
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f001 f934 	bl	800dcc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca62:	f000 fc6c 	bl	800d33e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca66:	f000 ff33 	bl	800d8d0 <xTaskResumeAll>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f47f af7c 	bne.w	800c96a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ca72:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <xQueueGenericSend+0x200>)
 800ca74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	e772      	b.n	800c96a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca86:	f000 fc5a 	bl	800d33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca8a:	f000 ff21 	bl	800d8d0 <xTaskResumeAll>
 800ca8e:	e76c      	b.n	800c96a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca92:	f000 fc54 	bl	800d33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca96:	f000 ff1b 	bl	800d8d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3738      	adds	r7, #56	; 0x38
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	e000ed04 	.word	0xe000ed04

0800caa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08e      	sub	sp, #56	; 0x38
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10b      	bne.n	800cad8 <xQueueGenericSendFromISR+0x30>
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	b672      	cpsid	i
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	b662      	cpsie	i
 800cad4:	627b      	str	r3, [r7, #36]	; 0x24
 800cad6:	e7fe      	b.n	800cad6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d103      	bne.n	800cae6 <xQueueGenericSendFromISR+0x3e>
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <xQueueGenericSendFromISR+0x42>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e000      	b.n	800caec <xQueueGenericSendFromISR+0x44>
 800caea:	2300      	movs	r3, #0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10b      	bne.n	800cb08 <xQueueGenericSendFromISR+0x60>
 800caf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf4:	b672      	cpsid	i
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	b662      	cpsie	i
 800cb04:	623b      	str	r3, [r7, #32]
 800cb06:	e7fe      	b.n	800cb06 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d103      	bne.n	800cb16 <xQueueGenericSendFromISR+0x6e>
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d101      	bne.n	800cb1a <xQueueGenericSendFromISR+0x72>
 800cb16:	2301      	movs	r3, #1
 800cb18:	e000      	b.n	800cb1c <xQueueGenericSendFromISR+0x74>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10b      	bne.n	800cb38 <xQueueGenericSendFromISR+0x90>
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	b672      	cpsid	i
 800cb26:	f383 8811 	msr	BASEPRI, r3
 800cb2a:	f3bf 8f6f 	isb	sy
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	b662      	cpsie	i
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	e7fe      	b.n	800cb36 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb38:	f001 fece 	bl	800e8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb3c:	f3ef 8211 	mrs	r2, BASEPRI
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	b672      	cpsid	i
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	b662      	cpsie	i
 800cb54:	61ba      	str	r2, [r7, #24]
 800cb56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d302      	bcc.n	800cb6e <xQueueGenericSendFromISR+0xc6>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d12c      	bne.n	800cbc8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb7e:	f000 fb4e 	bl	800d21e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8a:	d112      	bne.n	800cbb2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d016      	beq.n	800cbc2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	3324      	adds	r3, #36	; 0x24
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f001 f8bb 	bl	800dd14 <xTaskRemoveFromEventList>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00e      	beq.n	800cbc2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00b      	beq.n	800cbc2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	601a      	str	r2, [r3, #0]
 800cbb0:	e007      	b.n	800cbc2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cbb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	b25a      	sxtb	r2, r3
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cbc6:	e001      	b.n	800cbcc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	637b      	str	r3, [r7, #52]	; 0x34
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3738      	adds	r7, #56	; 0x38
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08e      	sub	sp, #56	; 0x38
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10b      	bne.n	800cc0c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	b672      	cpsid	i
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	b662      	cpsie	i
 800cc08:	623b      	str	r3, [r7, #32]
 800cc0a:	e7fe      	b.n	800cc0a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00b      	beq.n	800cc2c <xQueueGiveFromISR+0x4c>
 800cc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc18:	b672      	cpsid	i
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	b662      	cpsie	i
 800cc28:	61fb      	str	r3, [r7, #28]
 800cc2a:	e7fe      	b.n	800cc2a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d103      	bne.n	800cc3c <xQueueGiveFromISR+0x5c>
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <xQueueGiveFromISR+0x60>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e000      	b.n	800cc42 <xQueueGiveFromISR+0x62>
 800cc40:	2300      	movs	r3, #0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10b      	bne.n	800cc5e <xQueueGiveFromISR+0x7e>
 800cc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4a:	b672      	cpsid	i
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	b662      	cpsie	i
 800cc5a:	61bb      	str	r3, [r7, #24]
 800cc5c:	e7fe      	b.n	800cc5c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc5e:	f001 fe3b 	bl	800e8d8 <vPortValidateInterruptPriority>
	__asm volatile
 800cc62:	f3ef 8211 	mrs	r2, BASEPRI
 800cc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6a:	b672      	cpsid	i
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	b662      	cpsie	i
 800cc7a:	617a      	str	r2, [r7, #20]
 800cc7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cc7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d22b      	bcs.n	800ccea <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccac:	d112      	bne.n	800ccd4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d016      	beq.n	800cce4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	3324      	adds	r3, #36	; 0x24
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f001 f82a 	bl	800dd14 <xTaskRemoveFromEventList>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00e      	beq.n	800cce4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00b      	beq.n	800cce4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	e007      	b.n	800cce4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccd8:	3301      	adds	r3, #1
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	b25a      	sxtb	r2, r3
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cce4:	2301      	movs	r3, #1
 800cce6:	637b      	str	r3, [r7, #52]	; 0x34
 800cce8:	e001      	b.n	800ccee <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	637b      	str	r3, [r7, #52]	; 0x34
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3738      	adds	r7, #56	; 0x38
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b08c      	sub	sp, #48	; 0x30
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd10:	2300      	movs	r3, #0
 800cd12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10b      	bne.n	800cd36 <xQueueReceive+0x32>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	b672      	cpsid	i
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	b662      	cpsie	i
 800cd32:	623b      	str	r3, [r7, #32]
 800cd34:	e7fe      	b.n	800cd34 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d103      	bne.n	800cd44 <xQueueReceive+0x40>
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d101      	bne.n	800cd48 <xQueueReceive+0x44>
 800cd44:	2301      	movs	r3, #1
 800cd46:	e000      	b.n	800cd4a <xQueueReceive+0x46>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10b      	bne.n	800cd66 <xQueueReceive+0x62>
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	b672      	cpsid	i
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	b662      	cpsie	i
 800cd62:	61fb      	str	r3, [r7, #28]
 800cd64:	e7fe      	b.n	800cd64 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd66:	f001 f995 	bl	800e094 <xTaskGetSchedulerState>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <xQueueReceive+0x72>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <xQueueReceive+0x76>
 800cd76:	2301      	movs	r3, #1
 800cd78:	e000      	b.n	800cd7c <xQueueReceive+0x78>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10b      	bne.n	800cd98 <xQueueReceive+0x94>
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	b672      	cpsid	i
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	b662      	cpsie	i
 800cd94:	61bb      	str	r3, [r7, #24]
 800cd96:	e7fe      	b.n	800cd96 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd98:	f001 fcbe 	bl	800e718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d01f      	beq.n	800cde8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cda8:	68b9      	ldr	r1, [r7, #8]
 800cdaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdac:	f000 faa1 	bl	800d2f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	1e5a      	subs	r2, r3, #1
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00f      	beq.n	800cde0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc2:	3310      	adds	r3, #16
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 ffa5 	bl	800dd14 <xTaskRemoveFromEventList>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d007      	beq.n	800cde0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cdd0:	4b3c      	ldr	r3, [pc, #240]	; (800cec4 <xQueueReceive+0x1c0>)
 800cdd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cde0:	f001 fccc 	bl	800e77c <vPortExitCritical>
				return pdPASS;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e069      	b.n	800cebc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d103      	bne.n	800cdf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdee:	f001 fcc5 	bl	800e77c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e062      	b.n	800cebc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d106      	bne.n	800ce0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdfc:	f107 0310 	add.w	r3, r7, #16
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 ffeb 	bl	800dddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce06:	2301      	movs	r3, #1
 800ce08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce0a:	f001 fcb7 	bl	800e77c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce0e:	f000 fd51 	bl	800d8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce12:	f001 fc81 	bl	800e718 <vPortEnterCritical>
 800ce16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce1c:	b25b      	sxtb	r3, r3
 800ce1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce22:	d103      	bne.n	800ce2c <xQueueReceive+0x128>
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce32:	b25b      	sxtb	r3, r3
 800ce34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce38:	d103      	bne.n	800ce42 <xQueueReceive+0x13e>
 800ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce42:	f001 fc9b 	bl	800e77c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce46:	1d3a      	adds	r2, r7, #4
 800ce48:	f107 0310 	add.w	r3, r7, #16
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 ffda 	bl	800de08 <xTaskCheckForTimeOut>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d123      	bne.n	800cea2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce5c:	f000 fac1 	bl	800d3e2 <prvIsQueueEmpty>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d017      	beq.n	800ce96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce68:	3324      	adds	r3, #36	; 0x24
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f000 ff2a 	bl	800dcc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce76:	f000 fa62 	bl	800d33e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce7a:	f000 fd29 	bl	800d8d0 <xTaskResumeAll>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d189      	bne.n	800cd98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ce84:	4b0f      	ldr	r3, [pc, #60]	; (800cec4 <xQueueReceive+0x1c0>)
 800ce86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	e780      	b.n	800cd98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce98:	f000 fa51 	bl	800d33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce9c:	f000 fd18 	bl	800d8d0 <xTaskResumeAll>
 800cea0:	e77a      	b.n	800cd98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea4:	f000 fa4b 	bl	800d33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cea8:	f000 fd12 	bl	800d8d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ceac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceae:	f000 fa98 	bl	800d3e2 <prvIsQueueEmpty>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f43f af6f 	beq.w	800cd98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ceba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3730      	adds	r7, #48	; 0x30
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	e000ed04 	.word	0xe000ed04

0800cec8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08e      	sub	sp, #56	; 0x38
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ced2:	2300      	movs	r3, #0
 800ced4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ceda:	2300      	movs	r3, #0
 800cedc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10b      	bne.n	800cefc <xQueueSemaphoreTake+0x34>
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	b672      	cpsid	i
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	b662      	cpsie	i
 800cef8:	623b      	str	r3, [r7, #32]
 800cefa:	e7fe      	b.n	800cefa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00b      	beq.n	800cf1c <xQueueSemaphoreTake+0x54>
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	b672      	cpsid	i
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	b662      	cpsie	i
 800cf18:	61fb      	str	r3, [r7, #28]
 800cf1a:	e7fe      	b.n	800cf1a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf1c:	f001 f8ba 	bl	800e094 <xTaskGetSchedulerState>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <xQueueSemaphoreTake+0x64>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <xQueueSemaphoreTake+0x68>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e000      	b.n	800cf32 <xQueueSemaphoreTake+0x6a>
 800cf30:	2300      	movs	r3, #0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10b      	bne.n	800cf4e <xQueueSemaphoreTake+0x86>
 800cf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3a:	b672      	cpsid	i
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	b662      	cpsie	i
 800cf4a:	61bb      	str	r3, [r7, #24]
 800cf4c:	e7fe      	b.n	800cf4c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf4e:	f001 fbe3 	bl	800e718 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d024      	beq.n	800cfa8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	1e5a      	subs	r2, r3, #1
 800cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d104      	bne.n	800cf78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cf6e:	f001 fa53 	bl	800e418 <pvTaskIncrementMutexHeldCount>
 800cf72:	4602      	mov	r2, r0
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7a:	691b      	ldr	r3, [r3, #16]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00f      	beq.n	800cfa0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	3310      	adds	r3, #16
 800cf84:	4618      	mov	r0, r3
 800cf86:	f000 fec5 	bl	800dd14 <xTaskRemoveFromEventList>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d007      	beq.n	800cfa0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf90:	4b54      	ldr	r3, [pc, #336]	; (800d0e4 <xQueueSemaphoreTake+0x21c>)
 800cf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfa0:	f001 fbec 	bl	800e77c <vPortExitCritical>
				return pdPASS;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e098      	b.n	800d0da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d112      	bne.n	800cfd4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00b      	beq.n	800cfcc <xQueueSemaphoreTake+0x104>
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	b672      	cpsid	i
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	b662      	cpsie	i
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e7fe      	b.n	800cfca <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cfcc:	f001 fbd6 	bl	800e77c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	e082      	b.n	800d0da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d106      	bne.n	800cfe8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfda:	f107 030c 	add.w	r3, r7, #12
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 fefc 	bl	800dddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfe8:	f001 fbc8 	bl	800e77c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfec:	f000 fc62 	bl	800d8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cff0:	f001 fb92 	bl	800e718 <vPortEnterCritical>
 800cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cffa:	b25b      	sxtb	r3, r3
 800cffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d000:	d103      	bne.n	800d00a <xQueueSemaphoreTake+0x142>
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d010:	b25b      	sxtb	r3, r3
 800d012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d016:	d103      	bne.n	800d020 <xQueueSemaphoreTake+0x158>
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d020:	f001 fbac 	bl	800e77c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d024:	463a      	mov	r2, r7
 800d026:	f107 030c 	add.w	r3, r7, #12
 800d02a:	4611      	mov	r1, r2
 800d02c:	4618      	mov	r0, r3
 800d02e:	f000 feeb 	bl	800de08 <xTaskCheckForTimeOut>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d132      	bne.n	800d09e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d03a:	f000 f9d2 	bl	800d3e2 <prvIsQueueEmpty>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d026      	beq.n	800d092 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d109      	bne.n	800d060 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d04c:	f001 fb64 	bl	800e718 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	4618      	mov	r0, r3
 800d056:	f001 f83b 	bl	800e0d0 <xTaskPriorityInherit>
 800d05a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d05c:	f001 fb8e 	bl	800e77c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	3324      	adds	r3, #36	; 0x24
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f000 fe2d 	bl	800dcc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d06e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d070:	f000 f965 	bl	800d33e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d074:	f000 fc2c 	bl	800d8d0 <xTaskResumeAll>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f47f af67 	bne.w	800cf4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d080:	4b18      	ldr	r3, [pc, #96]	; (800d0e4 <xQueueSemaphoreTake+0x21c>)
 800d082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	e75d      	b.n	800cf4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d094:	f000 f953 	bl	800d33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d098:	f000 fc1a 	bl	800d8d0 <xTaskResumeAll>
 800d09c:	e757      	b.n	800cf4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d09e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0a0:	f000 f94d 	bl	800d33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0a4:	f000 fc14 	bl	800d8d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0aa:	f000 f99a 	bl	800d3e2 <prvIsQueueEmpty>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f43f af4c 	beq.w	800cf4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00d      	beq.n	800d0d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d0bc:	f001 fb2c 	bl	800e718 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d0c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0c2:	f000 f894 	bl	800d1ee <prvGetDisinheritPriorityAfterTimeout>
 800d0c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f001 f906 	bl	800e2e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d0d4:	f001 fb52 	bl	800e77c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3738      	adds	r7, #56	; 0x38
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	e000ed04 	.word	0xe000ed04

0800d0e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08e      	sub	sp, #56	; 0x38
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10b      	bne.n	800d116 <xQueueReceiveFromISR+0x2e>
 800d0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d102:	b672      	cpsid	i
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	b662      	cpsie	i
 800d112:	623b      	str	r3, [r7, #32]
 800d114:	e7fe      	b.n	800d114 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d103      	bne.n	800d124 <xQueueReceiveFromISR+0x3c>
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	d101      	bne.n	800d128 <xQueueReceiveFromISR+0x40>
 800d124:	2301      	movs	r3, #1
 800d126:	e000      	b.n	800d12a <xQueueReceiveFromISR+0x42>
 800d128:	2300      	movs	r3, #0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10b      	bne.n	800d146 <xQueueReceiveFromISR+0x5e>
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	b672      	cpsid	i
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	b662      	cpsie	i
 800d142:	61fb      	str	r3, [r7, #28]
 800d144:	e7fe      	b.n	800d144 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d146:	f001 fbc7 	bl	800e8d8 <vPortValidateInterruptPriority>
	__asm volatile
 800d14a:	f3ef 8211 	mrs	r2, BASEPRI
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	b672      	cpsid	i
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	b662      	cpsie	i
 800d162:	61ba      	str	r2, [r7, #24]
 800d164:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d166:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d168:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	2b00      	cmp	r3, #0
 800d174:	d02f      	beq.n	800d1d6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d180:	68b9      	ldr	r1, [r7, #8]
 800d182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d184:	f000 f8b5 	bl	800d2f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	1e5a      	subs	r2, r3, #1
 800d18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d190:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d198:	d112      	bne.n	800d1c0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d016      	beq.n	800d1d0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	3310      	adds	r3, #16
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 fdb4 	bl	800dd14 <xTaskRemoveFromEventList>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00e      	beq.n	800d1d0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00b      	beq.n	800d1d0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	e007      	b.n	800d1d0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	b25a      	sxtb	r2, r3
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800d1d4:	e001      	b.n	800d1da <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3738      	adds	r7, #56	; 0x38
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b085      	sub	sp, #20
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f1c3 0307 	rsb	r3, r3, #7
 800d208:	60fb      	str	r3, [r7, #12]
 800d20a:	e001      	b.n	800d210 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d210:	68fb      	ldr	r3, [r7, #12]
	}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b086      	sub	sp, #24
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d22a:	2300      	movs	r3, #0
 800d22c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10d      	bne.n	800d258 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d14d      	bne.n	800d2e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 ffc1 	bl	800e1d0 <xTaskPriorityDisinherit>
 800d24e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	609a      	str	r2, [r3, #8]
 800d256:	e043      	b.n	800d2e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d119      	bne.n	800d292 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6858      	ldr	r0, [r3, #4]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d266:	461a      	mov	r2, r3
 800d268:	68b9      	ldr	r1, [r7, #8]
 800d26a:	f017 fa3f 	bl	80246ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d276:	441a      	add	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	429a      	cmp	r2, r3
 800d286:	d32b      	bcc.n	800d2e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	605a      	str	r2, [r3, #4]
 800d290:	e026      	b.n	800d2e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68d8      	ldr	r0, [r3, #12]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29a:	461a      	mov	r2, r3
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	f017 fa25 	bl	80246ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	425b      	negs	r3, r3
 800d2ac:	441a      	add	r2, r3
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	68da      	ldr	r2, [r3, #12]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d207      	bcs.n	800d2ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	689a      	ldr	r2, [r3, #8]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c6:	425b      	negs	r3, r3
 800d2c8:	441a      	add	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d105      	bne.n	800d2e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d002      	beq.n	800d2e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2e8:	697b      	ldr	r3, [r7, #20]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d300:	2b00      	cmp	r3, #0
 800d302:	d018      	beq.n	800d336 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68da      	ldr	r2, [r3, #12]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30c:	441a      	add	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68da      	ldr	r2, [r3, #12]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	689b      	ldr	r3, [r3, #8]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d303      	bcc.n	800d326 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68d9      	ldr	r1, [r3, #12]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32e:	461a      	mov	r2, r3
 800d330:	6838      	ldr	r0, [r7, #0]
 800d332:	f017 f9db 	bl	80246ec <memcpy>
	}
}
 800d336:	bf00      	nop
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d346:	f001 f9e7 	bl	800e718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d350:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d352:	e011      	b.n	800d378 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d012      	beq.n	800d382 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	3324      	adds	r3, #36	; 0x24
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fcd7 	bl	800dd14 <xTaskRemoveFromEventList>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d36c:	f000 fdb0 	bl	800ded0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	3b01      	subs	r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dce9      	bgt.n	800d354 <prvUnlockQueue+0x16>
 800d380:	e000      	b.n	800d384 <prvUnlockQueue+0x46>
					break;
 800d382:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	22ff      	movs	r2, #255	; 0xff
 800d388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d38c:	f001 f9f6 	bl	800e77c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d390:	f001 f9c2 	bl	800e718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d39a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d39c:	e011      	b.n	800d3c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d012      	beq.n	800d3cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3310      	adds	r3, #16
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fcb2 	bl	800dd14 <xTaskRemoveFromEventList>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3b6:	f000 fd8b 	bl	800ded0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3ba:	7bbb      	ldrb	r3, [r7, #14]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	dce9      	bgt.n	800d39e <prvUnlockQueue+0x60>
 800d3ca:	e000      	b.n	800d3ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	22ff      	movs	r2, #255	; 0xff
 800d3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3d6:	f001 f9d1 	bl	800e77c <vPortExitCritical>
}
 800d3da:	bf00      	nop
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3ea:	f001 f995 	bl	800e718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d102      	bne.n	800d3fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e001      	b.n	800d400 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d400:	f001 f9bc 	bl	800e77c <vPortExitCritical>

	return xReturn;
 800d404:	68fb      	ldr	r3, [r7, #12]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b084      	sub	sp, #16
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d416:	f001 f97f 	bl	800e718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	429a      	cmp	r2, r3
 800d424:	d102      	bne.n	800d42c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d426:	2301      	movs	r3, #1
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	e001      	b.n	800d430 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d430:	f001 f9a4 	bl	800e77c <vPortExitCritical>

	return xReturn;
 800d434:	68fb      	ldr	r3, [r7, #12]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b08e      	sub	sp, #56	; 0x38
 800d442:	af04      	add	r7, sp, #16
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	60b9      	str	r1, [r7, #8]
 800d448:	607a      	str	r2, [r7, #4]
 800d44a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10b      	bne.n	800d46a <xTaskCreateStatic+0x2c>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	b672      	cpsid	i
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	b662      	cpsie	i
 800d466:	623b      	str	r3, [r7, #32]
 800d468:	e7fe      	b.n	800d468 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10b      	bne.n	800d488 <xTaskCreateStatic+0x4a>
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	b672      	cpsid	i
 800d476:	f383 8811 	msr	BASEPRI, r3
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	b662      	cpsie	i
 800d484:	61fb      	str	r3, [r7, #28]
 800d486:	e7fe      	b.n	800d486 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d488:	2358      	movs	r3, #88	; 0x58
 800d48a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	2b58      	cmp	r3, #88	; 0x58
 800d490:	d00b      	beq.n	800d4aa <xTaskCreateStatic+0x6c>
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	b672      	cpsid	i
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	b662      	cpsie	i
 800d4a6:	61bb      	str	r3, [r7, #24]
 800d4a8:	e7fe      	b.n	800d4a8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d4aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d01e      	beq.n	800d4f0 <xTaskCreateStatic+0xb2>
 800d4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d01b      	beq.n	800d4f0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9303      	str	r3, [sp, #12]
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	9302      	str	r3, [sp, #8]
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	68b9      	ldr	r1, [r7, #8]
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f000 f850 	bl	800d588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4ea:	f000 f8e1 	bl	800d6b0 <prvAddNewTaskToReadyList>
 800d4ee:	e001      	b.n	800d4f4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d4f4:	697b      	ldr	r3, [r7, #20]
	}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3728      	adds	r7, #40	; 0x28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b08c      	sub	sp, #48	; 0x30
 800d502:	af04      	add	r7, sp, #16
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	60b9      	str	r1, [r7, #8]
 800d508:	603b      	str	r3, [r7, #0]
 800d50a:	4613      	mov	r3, r2
 800d50c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d50e:	88fb      	ldrh	r3, [r7, #6]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4618      	mov	r0, r3
 800d514:	f001 fa22 	bl	800e95c <pvPortMalloc>
 800d518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00e      	beq.n	800d53e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d520:	2058      	movs	r0, #88	; 0x58
 800d522:	f001 fa1b 	bl	800e95c <pvPortMalloc>
 800d526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	631a      	str	r2, [r3, #48]	; 0x30
 800d534:	e005      	b.n	800d542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d536:	6978      	ldr	r0, [r7, #20]
 800d538:	f001 fadc 	bl	800eaf4 <vPortFree>
 800d53c:	e001      	b.n	800d542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d017      	beq.n	800d578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d550:	88fa      	ldrh	r2, [r7, #6]
 800d552:	2300      	movs	r3, #0
 800d554:	9303      	str	r3, [sp, #12]
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	9302      	str	r3, [sp, #8]
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	68b9      	ldr	r1, [r7, #8]
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f000 f80e 	bl	800d588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d56c:	69f8      	ldr	r0, [r7, #28]
 800d56e:	f000 f89f 	bl	800d6b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d572:	2301      	movs	r3, #1
 800d574:	61bb      	str	r3, [r7, #24]
 800d576:	e002      	b.n	800d57e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d578:	f04f 33ff 	mov.w	r3, #4294967295
 800d57c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d57e:	69bb      	ldr	r3, [r7, #24]
	}
 800d580:	4618      	mov	r0, r3
 800d582:	3720      	adds	r7, #32
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d598:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	461a      	mov	r2, r3
 800d5a0:	21a5      	movs	r1, #165	; 0xa5
 800d5a2:	f017 f8ae 	bl	8024702 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5aa:	6879      	ldr	r1, [r7, #4]
 800d5ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d5b0:	440b      	add	r3, r1
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	f023 0307 	bic.w	r3, r3, #7
 800d5be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00b      	beq.n	800d5e2 <prvInitialiseNewTask+0x5a>
 800d5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ce:	b672      	cpsid	i
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	b662      	cpsie	i
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	e7fe      	b.n	800d5e0 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d01f      	beq.n	800d628 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	61fb      	str	r3, [r7, #28]
 800d5ec:	e012      	b.n	800d614 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	7819      	ldrb	r1, [r3, #0]
 800d5f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	3334      	adds	r3, #52	; 0x34
 800d5fe:	460a      	mov	r2, r1
 800d600:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d602:	68ba      	ldr	r2, [r7, #8]
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	4413      	add	r3, r2
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d006      	beq.n	800d61c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	3301      	adds	r3, #1
 800d612:	61fb      	str	r3, [r7, #28]
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	2b0f      	cmp	r3, #15
 800d618:	d9e9      	bls.n	800d5ee <prvInitialiseNewTask+0x66>
 800d61a:	e000      	b.n	800d61e <prvInitialiseNewTask+0x96>
			{
				break;
 800d61c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d626:	e003      	b.n	800d630 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d632:	2b06      	cmp	r3, #6
 800d634:	d901      	bls.n	800d63a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d636:	2306      	movs	r3, #6
 800d638:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d63e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d644:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	2200      	movs	r2, #0
 800d64a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64e:	3304      	adds	r3, #4
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe ff4b 	bl	800c4ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	3318      	adds	r3, #24
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe ff46 	bl	800c4ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d664:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	f1c3 0207 	rsb	r2, r3, #7
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d674:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	2200      	movs	r2, #0
 800d67a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67e:	2200      	movs	r2, #0
 800d680:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	68f9      	ldr	r1, [r7, #12]
 800d68e:	69b8      	ldr	r0, [r7, #24]
 800d690:	f000 ff3c 	bl	800e50c <pxPortInitialiseStack>
 800d694:	4602      	mov	r2, r0
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6a6:	bf00      	nop
 800d6a8:	3720      	adds	r7, #32
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
	...

0800d6b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6b8:	f001 f82e 	bl	800e718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6bc:	4b2a      	ldr	r3, [pc, #168]	; (800d768 <prvAddNewTaskToReadyList+0xb8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	4a29      	ldr	r2, [pc, #164]	; (800d768 <prvAddNewTaskToReadyList+0xb8>)
 800d6c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6c6:	4b29      	ldr	r3, [pc, #164]	; (800d76c <prvAddNewTaskToReadyList+0xbc>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d109      	bne.n	800d6e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6ce:	4a27      	ldr	r2, [pc, #156]	; (800d76c <prvAddNewTaskToReadyList+0xbc>)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6d4:	4b24      	ldr	r3, [pc, #144]	; (800d768 <prvAddNewTaskToReadyList+0xb8>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d110      	bne.n	800d6fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6dc:	f000 fc1e 	bl	800df1c <prvInitialiseTaskLists>
 800d6e0:	e00d      	b.n	800d6fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6e2:	4b23      	ldr	r3, [pc, #140]	; (800d770 <prvAddNewTaskToReadyList+0xc0>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d109      	bne.n	800d6fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6ea:	4b20      	ldr	r3, [pc, #128]	; (800d76c <prvAddNewTaskToReadyList+0xbc>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d802      	bhi.n	800d6fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d6f8:	4a1c      	ldr	r2, [pc, #112]	; (800d76c <prvAddNewTaskToReadyList+0xbc>)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6fe:	4b1d      	ldr	r3, [pc, #116]	; (800d774 <prvAddNewTaskToReadyList+0xc4>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3301      	adds	r3, #1
 800d704:	4a1b      	ldr	r2, [pc, #108]	; (800d774 <prvAddNewTaskToReadyList+0xc4>)
 800d706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70c:	2201      	movs	r2, #1
 800d70e:	409a      	lsls	r2, r3
 800d710:	4b19      	ldr	r3, [pc, #100]	; (800d778 <prvAddNewTaskToReadyList+0xc8>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4313      	orrs	r3, r2
 800d716:	4a18      	ldr	r2, [pc, #96]	; (800d778 <prvAddNewTaskToReadyList+0xc8>)
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71e:	4613      	mov	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4a15      	ldr	r2, [pc, #84]	; (800d77c <prvAddNewTaskToReadyList+0xcc>)
 800d728:	441a      	add	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	3304      	adds	r3, #4
 800d72e:	4619      	mov	r1, r3
 800d730:	4610      	mov	r0, r2
 800d732:	f7fe fee8 	bl	800c506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d736:	f001 f821 	bl	800e77c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d73a:	4b0d      	ldr	r3, [pc, #52]	; (800d770 <prvAddNewTaskToReadyList+0xc0>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00e      	beq.n	800d760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d742:	4b0a      	ldr	r3, [pc, #40]	; (800d76c <prvAddNewTaskToReadyList+0xbc>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d207      	bcs.n	800d760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d750:	4b0b      	ldr	r3, [pc, #44]	; (800d780 <prvAddNewTaskToReadyList+0xd0>)
 800d752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d756:	601a      	str	r2, [r3, #0]
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	200004b8 	.word	0x200004b8
 800d76c:	200003b8 	.word	0x200003b8
 800d770:	200004c4 	.word	0x200004c4
 800d774:	200004d4 	.word	0x200004d4
 800d778:	200004c0 	.word	0x200004c0
 800d77c:	200003bc 	.word	0x200003bc
 800d780:	e000ed04 	.word	0xe000ed04

0800d784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d78c:	2300      	movs	r3, #0
 800d78e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d018      	beq.n	800d7c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d796:	4b14      	ldr	r3, [pc, #80]	; (800d7e8 <vTaskDelay+0x64>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00b      	beq.n	800d7b6 <vTaskDelay+0x32>
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	b672      	cpsid	i
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	b662      	cpsie	i
 800d7b2:	60bb      	str	r3, [r7, #8]
 800d7b4:	e7fe      	b.n	800d7b4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d7b6:	f000 f87d 	bl	800d8b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fe3f 	bl	800e440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d7c2:	f000 f885 	bl	800d8d0 <xTaskResumeAll>
 800d7c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d107      	bne.n	800d7de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d7ce:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <vTaskDelay+0x68>)
 800d7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7de:	bf00      	nop
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	200004e0 	.word	0x200004e0
 800d7ec:	e000ed04 	.word	0xe000ed04

0800d7f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08a      	sub	sp, #40	; 0x28
 800d7f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7fe:	463a      	mov	r2, r7
 800d800:	1d39      	adds	r1, r7, #4
 800d802:	f107 0308 	add.w	r3, r7, #8
 800d806:	4618      	mov	r0, r3
 800d808:	f7f3 fae2 	bl	8000dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68ba      	ldr	r2, [r7, #8]
 800d812:	9202      	str	r2, [sp, #8]
 800d814:	9301      	str	r3, [sp, #4]
 800d816:	2300      	movs	r3, #0
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	2300      	movs	r3, #0
 800d81c:	460a      	mov	r2, r1
 800d81e:	491f      	ldr	r1, [pc, #124]	; (800d89c <vTaskStartScheduler+0xac>)
 800d820:	481f      	ldr	r0, [pc, #124]	; (800d8a0 <vTaskStartScheduler+0xb0>)
 800d822:	f7ff fe0c 	bl	800d43e <xTaskCreateStatic>
 800d826:	4602      	mov	r2, r0
 800d828:	4b1e      	ldr	r3, [pc, #120]	; (800d8a4 <vTaskStartScheduler+0xb4>)
 800d82a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d82c:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <vTaskStartScheduler+0xb4>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d834:	2301      	movs	r3, #1
 800d836:	617b      	str	r3, [r7, #20]
 800d838:	e001      	b.n	800d83e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2b01      	cmp	r3, #1
 800d842:	d117      	bne.n	800d874 <vTaskStartScheduler+0x84>
 800d844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d848:	b672      	cpsid	i
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	b662      	cpsie	i
 800d858:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d85a:	4b13      	ldr	r3, [pc, #76]	; (800d8a8 <vTaskStartScheduler+0xb8>)
 800d85c:	f04f 32ff 	mov.w	r2, #4294967295
 800d860:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d862:	4b12      	ldr	r3, [pc, #72]	; (800d8ac <vTaskStartScheduler+0xbc>)
 800d864:	2201      	movs	r2, #1
 800d866:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d868:	4b11      	ldr	r3, [pc, #68]	; (800d8b0 <vTaskStartScheduler+0xc0>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d86e:	f000 fed7 	bl	800e620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d872:	e00f      	b.n	800d894 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87a:	d10b      	bne.n	800d894 <vTaskStartScheduler+0xa4>
 800d87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d880:	b672      	cpsid	i
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	b662      	cpsie	i
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e7fe      	b.n	800d892 <vTaskStartScheduler+0xa2>
}
 800d894:	bf00      	nop
 800d896:	3718      	adds	r7, #24
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	08025670 	.word	0x08025670
 800d8a0:	0800dee9 	.word	0x0800dee9
 800d8a4:	200004dc 	.word	0x200004dc
 800d8a8:	200004d8 	.word	0x200004d8
 800d8ac:	200004c4 	.word	0x200004c4
 800d8b0:	200004bc 	.word	0x200004bc

0800d8b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d8b8:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <vTaskSuspendAll+0x18>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	4a03      	ldr	r2, [pc, #12]	; (800d8cc <vTaskSuspendAll+0x18>)
 800d8c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d8c2:	bf00      	nop
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	200004e0 	.word	0x200004e0

0800d8d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8de:	4b42      	ldr	r3, [pc, #264]	; (800d9e8 <xTaskResumeAll+0x118>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10b      	bne.n	800d8fe <xTaskResumeAll+0x2e>
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	b672      	cpsid	i
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	b662      	cpsie	i
 800d8fa:	603b      	str	r3, [r7, #0]
 800d8fc:	e7fe      	b.n	800d8fc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8fe:	f000 ff0b 	bl	800e718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d902:	4b39      	ldr	r3, [pc, #228]	; (800d9e8 <xTaskResumeAll+0x118>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	3b01      	subs	r3, #1
 800d908:	4a37      	ldr	r2, [pc, #220]	; (800d9e8 <xTaskResumeAll+0x118>)
 800d90a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d90c:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <xTaskResumeAll+0x118>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d161      	bne.n	800d9d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d914:	4b35      	ldr	r3, [pc, #212]	; (800d9ec <xTaskResumeAll+0x11c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d05d      	beq.n	800d9d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d91c:	e02e      	b.n	800d97c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d91e:	4b34      	ldr	r3, [pc, #208]	; (800d9f0 <xTaskResumeAll+0x120>)
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3318      	adds	r3, #24
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fe48 	bl	800c5c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	3304      	adds	r3, #4
 800d934:	4618      	mov	r0, r3
 800d936:	f7fe fe43 	bl	800c5c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93e:	2201      	movs	r2, #1
 800d940:	409a      	lsls	r2, r3
 800d942:	4b2c      	ldr	r3, [pc, #176]	; (800d9f4 <xTaskResumeAll+0x124>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4313      	orrs	r3, r2
 800d948:	4a2a      	ldr	r2, [pc, #168]	; (800d9f4 <xTaskResumeAll+0x124>)
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d950:	4613      	mov	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4a27      	ldr	r2, [pc, #156]	; (800d9f8 <xTaskResumeAll+0x128>)
 800d95a:	441a      	add	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3304      	adds	r3, #4
 800d960:	4619      	mov	r1, r3
 800d962:	4610      	mov	r0, r2
 800d964:	f7fe fdcf 	bl	800c506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96c:	4b23      	ldr	r3, [pc, #140]	; (800d9fc <xTaskResumeAll+0x12c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d972:	429a      	cmp	r2, r3
 800d974:	d302      	bcc.n	800d97c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d976:	4b22      	ldr	r3, [pc, #136]	; (800da00 <xTaskResumeAll+0x130>)
 800d978:	2201      	movs	r2, #1
 800d97a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d97c:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <xTaskResumeAll+0x120>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1cc      	bne.n	800d91e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d98a:	f000 fb63 	bl	800e054 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d98e:	4b1d      	ldr	r3, [pc, #116]	; (800da04 <xTaskResumeAll+0x134>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d010      	beq.n	800d9bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d99a:	f000 f859 	bl	800da50 <xTaskIncrementTick>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d9a4:	4b16      	ldr	r3, [pc, #88]	; (800da00 <xTaskResumeAll+0x130>)
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f1      	bne.n	800d99a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d9b6:	4b13      	ldr	r3, [pc, #76]	; (800da04 <xTaskResumeAll+0x134>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9bc:	4b10      	ldr	r3, [pc, #64]	; (800da00 <xTaskResumeAll+0x130>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d009      	beq.n	800d9d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9c8:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTaskResumeAll+0x138>)
 800d9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9d8:	f000 fed0 	bl	800e77c <vPortExitCritical>

	return xAlreadyYielded;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	200004e0 	.word	0x200004e0
 800d9ec:	200004b8 	.word	0x200004b8
 800d9f0:	20000478 	.word	0x20000478
 800d9f4:	200004c0 	.word	0x200004c0
 800d9f8:	200003bc 	.word	0x200003bc
 800d9fc:	200003b8 	.word	0x200003b8
 800da00:	200004cc 	.word	0x200004cc
 800da04:	200004c8 	.word	0x200004c8
 800da08:	e000ed04 	.word	0xe000ed04

0800da0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800da12:	4b05      	ldr	r3, [pc, #20]	; (800da28 <xTaskGetTickCount+0x1c>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800da18:	687b      	ldr	r3, [r7, #4]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	200004bc 	.word	0x200004bc

0800da2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da32:	f000 ff51 	bl	800e8d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800da36:	2300      	movs	r3, #0
 800da38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800da3a:	4b04      	ldr	r3, [pc, #16]	; (800da4c <xTaskGetTickCountFromISR+0x20>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da40:	683b      	ldr	r3, [r7, #0]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	200004bc 	.word	0x200004bc

0800da50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da56:	2300      	movs	r3, #0
 800da58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da5a:	4b4f      	ldr	r3, [pc, #316]	; (800db98 <xTaskIncrementTick+0x148>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f040 8089 	bne.w	800db76 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da64:	4b4d      	ldr	r3, [pc, #308]	; (800db9c <xTaskIncrementTick+0x14c>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3301      	adds	r3, #1
 800da6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da6c:	4a4b      	ldr	r2, [pc, #300]	; (800db9c <xTaskIncrementTick+0x14c>)
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d121      	bne.n	800dabc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800da78:	4b49      	ldr	r3, [pc, #292]	; (800dba0 <xTaskIncrementTick+0x150>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00b      	beq.n	800da9a <xTaskIncrementTick+0x4a>
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	603b      	str	r3, [r7, #0]
 800da98:	e7fe      	b.n	800da98 <xTaskIncrementTick+0x48>
 800da9a:	4b41      	ldr	r3, [pc, #260]	; (800dba0 <xTaskIncrementTick+0x150>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	4b40      	ldr	r3, [pc, #256]	; (800dba4 <xTaskIncrementTick+0x154>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a3e      	ldr	r2, [pc, #248]	; (800dba0 <xTaskIncrementTick+0x150>)
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	4a3e      	ldr	r2, [pc, #248]	; (800dba4 <xTaskIncrementTick+0x154>)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6013      	str	r3, [r2, #0]
 800daae:	4b3e      	ldr	r3, [pc, #248]	; (800dba8 <xTaskIncrementTick+0x158>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	3301      	adds	r3, #1
 800dab4:	4a3c      	ldr	r2, [pc, #240]	; (800dba8 <xTaskIncrementTick+0x158>)
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	f000 facc 	bl	800e054 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dabc:	4b3b      	ldr	r3, [pc, #236]	; (800dbac <xTaskIncrementTick+0x15c>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d348      	bcc.n	800db58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dac6:	4b36      	ldr	r3, [pc, #216]	; (800dba0 <xTaskIncrementTick+0x150>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d104      	bne.n	800dada <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dad0:	4b36      	ldr	r3, [pc, #216]	; (800dbac <xTaskIncrementTick+0x15c>)
 800dad2:	f04f 32ff 	mov.w	r2, #4294967295
 800dad6:	601a      	str	r2, [r3, #0]
					break;
 800dad8:	e03e      	b.n	800db58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dada:	4b31      	ldr	r3, [pc, #196]	; (800dba0 <xTaskIncrementTick+0x150>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800daea:	693a      	ldr	r2, [r7, #16]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d203      	bcs.n	800dafa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800daf2:	4a2e      	ldr	r2, [pc, #184]	; (800dbac <xTaskIncrementTick+0x15c>)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800daf8:	e02e      	b.n	800db58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe fd5e 	bl	800c5c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d004      	beq.n	800db16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	3318      	adds	r3, #24
 800db10:	4618      	mov	r0, r3
 800db12:	f7fe fd55 	bl	800c5c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1a:	2201      	movs	r2, #1
 800db1c:	409a      	lsls	r2, r3
 800db1e:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <xTaskIncrementTick+0x160>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4313      	orrs	r3, r2
 800db24:	4a22      	ldr	r2, [pc, #136]	; (800dbb0 <xTaskIncrementTick+0x160>)
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2c:	4613      	mov	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4a1f      	ldr	r2, [pc, #124]	; (800dbb4 <xTaskIncrementTick+0x164>)
 800db36:	441a      	add	r2, r3
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	3304      	adds	r3, #4
 800db3c:	4619      	mov	r1, r3
 800db3e:	4610      	mov	r0, r2
 800db40:	f7fe fce1 	bl	800c506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db48:	4b1b      	ldr	r3, [pc, #108]	; (800dbb8 <xTaskIncrementTick+0x168>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4e:	429a      	cmp	r2, r3
 800db50:	d3b9      	bcc.n	800dac6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800db52:	2301      	movs	r3, #1
 800db54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db56:	e7b6      	b.n	800dac6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db58:	4b17      	ldr	r3, [pc, #92]	; (800dbb8 <xTaskIncrementTick+0x168>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5e:	4915      	ldr	r1, [pc, #84]	; (800dbb4 <xTaskIncrementTick+0x164>)
 800db60:	4613      	mov	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	440b      	add	r3, r1
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d907      	bls.n	800db80 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800db70:	2301      	movs	r3, #1
 800db72:	617b      	str	r3, [r7, #20]
 800db74:	e004      	b.n	800db80 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800db76:	4b11      	ldr	r3, [pc, #68]	; (800dbbc <xTaskIncrementTick+0x16c>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	3301      	adds	r3, #1
 800db7c:	4a0f      	ldr	r2, [pc, #60]	; (800dbbc <xTaskIncrementTick+0x16c>)
 800db7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800db80:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <xTaskIncrementTick+0x170>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800db8c:	697b      	ldr	r3, [r7, #20]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	200004e0 	.word	0x200004e0
 800db9c:	200004bc 	.word	0x200004bc
 800dba0:	20000470 	.word	0x20000470
 800dba4:	20000474 	.word	0x20000474
 800dba8:	200004d0 	.word	0x200004d0
 800dbac:	200004d8 	.word	0x200004d8
 800dbb0:	200004c0 	.word	0x200004c0
 800dbb4:	200003bc 	.word	0x200003bc
 800dbb8:	200003b8 	.word	0x200003b8
 800dbbc:	200004c8 	.word	0x200004c8
 800dbc0:	200004cc 	.word	0x200004cc

0800dbc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dbca:	4b3a      	ldr	r3, [pc, #232]	; (800dcb4 <vTaskSwitchContext+0xf0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dbd2:	4b39      	ldr	r3, [pc, #228]	; (800dcb8 <vTaskSwitchContext+0xf4>)
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dbd8:	e067      	b.n	800dcaa <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800dbda:	4b37      	ldr	r3, [pc, #220]	; (800dcb8 <vTaskSwitchContext+0xf4>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dbe0:	4b36      	ldr	r3, [pc, #216]	; (800dcbc <vTaskSwitchContext+0xf8>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe6:	61fb      	str	r3, [r7, #28]
 800dbe8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	69ba      	ldr	r2, [r7, #24]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d111      	bne.n	800dc1c <vTaskSwitchContext+0x58>
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	69ba      	ldr	r2, [r7, #24]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d10b      	bne.n	800dc1c <vTaskSwitchContext+0x58>
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	3308      	adds	r3, #8
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	69ba      	ldr	r2, [r7, #24]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d105      	bne.n	800dc1c <vTaskSwitchContext+0x58>
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	330c      	adds	r3, #12
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	69ba      	ldr	r2, [r7, #24]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d008      	beq.n	800dc2e <vTaskSwitchContext+0x6a>
 800dc1c:	4b27      	ldr	r3, [pc, #156]	; (800dcbc <vTaskSwitchContext+0xf8>)
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	4b26      	ldr	r3, [pc, #152]	; (800dcbc <vTaskSwitchContext+0xf8>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3334      	adds	r3, #52	; 0x34
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7f3 f8be 	bl	8000daa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc2e:	4b24      	ldr	r3, [pc, #144]	; (800dcc0 <vTaskSwitchContext+0xfc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	fab3 f383 	clz	r3, r3
 800dc3a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dc3c:	7afb      	ldrb	r3, [r7, #11]
 800dc3e:	f1c3 031f 	rsb	r3, r3, #31
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	491f      	ldr	r1, [pc, #124]	; (800dcc4 <vTaskSwitchContext+0x100>)
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	440b      	add	r3, r1
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10b      	bne.n	800dc70 <vTaskSwitchContext+0xac>
	__asm volatile
 800dc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5c:	b672      	cpsid	i
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	b662      	cpsie	i
 800dc6c:	607b      	str	r3, [r7, #4]
 800dc6e:	e7fe      	b.n	800dc6e <vTaskSwitchContext+0xaa>
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	4613      	mov	r3, r2
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4413      	add	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	4a12      	ldr	r2, [pc, #72]	; (800dcc4 <vTaskSwitchContext+0x100>)
 800dc7c:	4413      	add	r3, r2
 800dc7e:	613b      	str	r3, [r7, #16]
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	605a      	str	r2, [r3, #4]
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	3308      	adds	r3, #8
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d104      	bne.n	800dca0 <vTaskSwitchContext+0xdc>
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	605a      	str	r2, [r3, #4]
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	4a05      	ldr	r2, [pc, #20]	; (800dcbc <vTaskSwitchContext+0xf8>)
 800dca8:	6013      	str	r3, [r2, #0]
}
 800dcaa:	bf00      	nop
 800dcac:	3720      	adds	r7, #32
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	200004e0 	.word	0x200004e0
 800dcb8:	200004cc 	.word	0x200004cc
 800dcbc:	200003b8 	.word	0x200003b8
 800dcc0:	200004c0 	.word	0x200004c0
 800dcc4:	200003bc 	.word	0x200003bc

0800dcc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10b      	bne.n	800dcf0 <vTaskPlaceOnEventList+0x28>
 800dcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcdc:	b672      	cpsid	i
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	b662      	cpsie	i
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	e7fe      	b.n	800dcee <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcf0:	4b07      	ldr	r3, [pc, #28]	; (800dd10 <vTaskPlaceOnEventList+0x48>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3318      	adds	r3, #24
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7fe fc28 	bl	800c54e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dcfe:	2101      	movs	r1, #1
 800dd00:	6838      	ldr	r0, [r7, #0]
 800dd02:	f000 fb9d 	bl	800e440 <prvAddCurrentTaskToDelayedList>
}
 800dd06:	bf00      	nop
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	200003b8 	.word	0x200003b8

0800dd14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b086      	sub	sp, #24
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10b      	bne.n	800dd42 <xTaskRemoveFromEventList+0x2e>
 800dd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2e:	b672      	cpsid	i
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	b662      	cpsie	i
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	e7fe      	b.n	800dd40 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	3318      	adds	r3, #24
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe fc3a 	bl	800c5c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd4c:	4b1d      	ldr	r3, [pc, #116]	; (800ddc4 <xTaskRemoveFromEventList+0xb0>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d11c      	bne.n	800dd8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	3304      	adds	r3, #4
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fe fc31 	bl	800c5c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd62:	2201      	movs	r2, #1
 800dd64:	409a      	lsls	r2, r3
 800dd66:	4b18      	ldr	r3, [pc, #96]	; (800ddc8 <xTaskRemoveFromEventList+0xb4>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	4a16      	ldr	r2, [pc, #88]	; (800ddc8 <xTaskRemoveFromEventList+0xb4>)
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd74:	4613      	mov	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4a13      	ldr	r2, [pc, #76]	; (800ddcc <xTaskRemoveFromEventList+0xb8>)
 800dd7e:	441a      	add	r2, r3
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4619      	mov	r1, r3
 800dd86:	4610      	mov	r0, r2
 800dd88:	f7fe fbbd 	bl	800c506 <vListInsertEnd>
 800dd8c:	e005      	b.n	800dd9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	3318      	adds	r3, #24
 800dd92:	4619      	mov	r1, r3
 800dd94:	480e      	ldr	r0, [pc, #56]	; (800ddd0 <xTaskRemoveFromEventList+0xbc>)
 800dd96:	f7fe fbb6 	bl	800c506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd9e:	4b0d      	ldr	r3, [pc, #52]	; (800ddd4 <xTaskRemoveFromEventList+0xc0>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d905      	bls.n	800ddb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ddac:	4b0a      	ldr	r3, [pc, #40]	; (800ddd8 <xTaskRemoveFromEventList+0xc4>)
 800ddae:	2201      	movs	r2, #1
 800ddb0:	601a      	str	r2, [r3, #0]
 800ddb2:	e001      	b.n	800ddb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ddb8:	697b      	ldr	r3, [r7, #20]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3718      	adds	r7, #24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	200004e0 	.word	0x200004e0
 800ddc8:	200004c0 	.word	0x200004c0
 800ddcc:	200003bc 	.word	0x200003bc
 800ddd0:	20000478 	.word	0x20000478
 800ddd4:	200003b8 	.word	0x200003b8
 800ddd8:	200004cc 	.word	0x200004cc

0800dddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dde4:	4b06      	ldr	r3, [pc, #24]	; (800de00 <vTaskInternalSetTimeOutState+0x24>)
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ddec:	4b05      	ldr	r3, [pc, #20]	; (800de04 <vTaskInternalSetTimeOutState+0x28>)
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	605a      	str	r2, [r3, #4]
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	200004d0 	.word	0x200004d0
 800de04:	200004bc 	.word	0x200004bc

0800de08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10b      	bne.n	800de30 <xTaskCheckForTimeOut+0x28>
 800de18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1c:	b672      	cpsid	i
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	b662      	cpsie	i
 800de2c:	613b      	str	r3, [r7, #16]
 800de2e:	e7fe      	b.n	800de2e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10b      	bne.n	800de4e <xTaskCheckForTimeOut+0x46>
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	b672      	cpsid	i
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	b662      	cpsie	i
 800de4a:	60fb      	str	r3, [r7, #12]
 800de4c:	e7fe      	b.n	800de4c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800de4e:	f000 fc63 	bl	800e718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de52:	4b1d      	ldr	r3, [pc, #116]	; (800dec8 <xTaskCheckForTimeOut+0xc0>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	69ba      	ldr	r2, [r7, #24]
 800de5e:	1ad3      	subs	r3, r2, r3
 800de60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6a:	d102      	bne.n	800de72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de6c:	2300      	movs	r3, #0
 800de6e:	61fb      	str	r3, [r7, #28]
 800de70:	e023      	b.n	800deba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	4b15      	ldr	r3, [pc, #84]	; (800decc <xTaskCheckForTimeOut+0xc4>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d007      	beq.n	800de8e <xTaskCheckForTimeOut+0x86>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	69ba      	ldr	r2, [r7, #24]
 800de84:	429a      	cmp	r2, r3
 800de86:	d302      	bcc.n	800de8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de88:	2301      	movs	r3, #1
 800de8a:	61fb      	str	r3, [r7, #28]
 800de8c:	e015      	b.n	800deba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	697a      	ldr	r2, [r7, #20]
 800de94:	429a      	cmp	r2, r3
 800de96:	d20b      	bcs.n	800deb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff ff99 	bl	800dddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800deaa:	2300      	movs	r3, #0
 800deac:	61fb      	str	r3, [r7, #28]
 800deae:	e004      	b.n	800deba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800deb6:	2301      	movs	r3, #1
 800deb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800deba:	f000 fc5f 	bl	800e77c <vPortExitCritical>

	return xReturn;
 800debe:	69fb      	ldr	r3, [r7, #28]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3720      	adds	r7, #32
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	200004bc 	.word	0x200004bc
 800decc:	200004d0 	.word	0x200004d0

0800ded0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ded0:	b480      	push	{r7}
 800ded2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ded4:	4b03      	ldr	r3, [pc, #12]	; (800dee4 <vTaskMissedYield+0x14>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	601a      	str	r2, [r3, #0]
}
 800deda:	bf00      	nop
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr
 800dee4:	200004cc 	.word	0x200004cc

0800dee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800def0:	f000 f854 	bl	800df9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800def4:	4b07      	ldr	r3, [pc, #28]	; (800df14 <prvIdleTask+0x2c>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d907      	bls.n	800df0c <prvIdleTask+0x24>
			{
				taskYIELD();
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <prvIdleTask+0x30>)
 800defe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800df0c:	f7f2 ff46 	bl	8000d9c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800df10:	e7ee      	b.n	800def0 <prvIdleTask+0x8>
 800df12:	bf00      	nop
 800df14:	200003bc 	.word	0x200003bc
 800df18:	e000ed04 	.word	0xe000ed04

0800df1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df22:	2300      	movs	r3, #0
 800df24:	607b      	str	r3, [r7, #4]
 800df26:	e00c      	b.n	800df42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4a12      	ldr	r2, [pc, #72]	; (800df7c <prvInitialiseTaskLists+0x60>)
 800df34:	4413      	add	r3, r2
 800df36:	4618      	mov	r0, r3
 800df38:	f7fe fab8 	bl	800c4ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3301      	adds	r3, #1
 800df40:	607b      	str	r3, [r7, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b06      	cmp	r3, #6
 800df46:	d9ef      	bls.n	800df28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df48:	480d      	ldr	r0, [pc, #52]	; (800df80 <prvInitialiseTaskLists+0x64>)
 800df4a:	f7fe faaf 	bl	800c4ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df4e:	480d      	ldr	r0, [pc, #52]	; (800df84 <prvInitialiseTaskLists+0x68>)
 800df50:	f7fe faac 	bl	800c4ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df54:	480c      	ldr	r0, [pc, #48]	; (800df88 <prvInitialiseTaskLists+0x6c>)
 800df56:	f7fe faa9 	bl	800c4ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df5a:	480c      	ldr	r0, [pc, #48]	; (800df8c <prvInitialiseTaskLists+0x70>)
 800df5c:	f7fe faa6 	bl	800c4ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df60:	480b      	ldr	r0, [pc, #44]	; (800df90 <prvInitialiseTaskLists+0x74>)
 800df62:	f7fe faa3 	bl	800c4ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df66:	4b0b      	ldr	r3, [pc, #44]	; (800df94 <prvInitialiseTaskLists+0x78>)
 800df68:	4a05      	ldr	r2, [pc, #20]	; (800df80 <prvInitialiseTaskLists+0x64>)
 800df6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df6c:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <prvInitialiseTaskLists+0x7c>)
 800df6e:	4a05      	ldr	r2, [pc, #20]	; (800df84 <prvInitialiseTaskLists+0x68>)
 800df70:	601a      	str	r2, [r3, #0]
}
 800df72:	bf00      	nop
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	200003bc 	.word	0x200003bc
 800df80:	20000448 	.word	0x20000448
 800df84:	2000045c 	.word	0x2000045c
 800df88:	20000478 	.word	0x20000478
 800df8c:	2000048c 	.word	0x2000048c
 800df90:	200004a4 	.word	0x200004a4
 800df94:	20000470 	.word	0x20000470
 800df98:	20000474 	.word	0x20000474

0800df9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfa2:	e019      	b.n	800dfd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dfa4:	f000 fbb8 	bl	800e718 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfa8:	4b0f      	ldr	r3, [pc, #60]	; (800dfe8 <prvCheckTasksWaitingTermination+0x4c>)
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe fb03 	bl	800c5c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dfba:	4b0c      	ldr	r3, [pc, #48]	; (800dfec <prvCheckTasksWaitingTermination+0x50>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	4a0a      	ldr	r2, [pc, #40]	; (800dfec <prvCheckTasksWaitingTermination+0x50>)
 800dfc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dfc4:	4b0a      	ldr	r3, [pc, #40]	; (800dff0 <prvCheckTasksWaitingTermination+0x54>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	4a09      	ldr	r2, [pc, #36]	; (800dff0 <prvCheckTasksWaitingTermination+0x54>)
 800dfcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dfce:	f000 fbd5 	bl	800e77c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f80e 	bl	800dff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfd8:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <prvCheckTasksWaitingTermination+0x54>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1e1      	bne.n	800dfa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	2000048c 	.word	0x2000048c
 800dfec:	200004b8 	.word	0x200004b8
 800dff0:	200004a0 	.word	0x200004a0

0800dff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e002:	2b00      	cmp	r3, #0
 800e004:	d108      	bne.n	800e018 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 fd72 	bl	800eaf4 <vPortFree>
				vPortFree( pxTCB );
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fd6f 	bl	800eaf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e016:	e019      	b.n	800e04c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d103      	bne.n	800e02a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fd66 	bl	800eaf4 <vPortFree>
	}
 800e028:	e010      	b.n	800e04c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e030:	2b02      	cmp	r3, #2
 800e032:	d00b      	beq.n	800e04c <prvDeleteTCB+0x58>
 800e034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e038:	b672      	cpsid	i
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	b662      	cpsie	i
 800e048:	60fb      	str	r3, [r7, #12]
 800e04a:	e7fe      	b.n	800e04a <prvDeleteTCB+0x56>
	}
 800e04c:	bf00      	nop
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e05a:	4b0c      	ldr	r3, [pc, #48]	; (800e08c <prvResetNextTaskUnblockTime+0x38>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e064:	4b0a      	ldr	r3, [pc, #40]	; (800e090 <prvResetNextTaskUnblockTime+0x3c>)
 800e066:	f04f 32ff 	mov.w	r2, #4294967295
 800e06a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e06c:	e008      	b.n	800e080 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e06e:	4b07      	ldr	r3, [pc, #28]	; (800e08c <prvResetNextTaskUnblockTime+0x38>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	4a04      	ldr	r2, [pc, #16]	; (800e090 <prvResetNextTaskUnblockTime+0x3c>)
 800e07e:	6013      	str	r3, [r2, #0]
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr
 800e08c:	20000470 	.word	0x20000470
 800e090:	200004d8 	.word	0x200004d8

0800e094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e09a:	4b0b      	ldr	r3, [pc, #44]	; (800e0c8 <xTaskGetSchedulerState+0x34>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d102      	bne.n	800e0a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	607b      	str	r3, [r7, #4]
 800e0a6:	e008      	b.n	800e0ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0a8:	4b08      	ldr	r3, [pc, #32]	; (800e0cc <xTaskGetSchedulerState+0x38>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d102      	bne.n	800e0b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	607b      	str	r3, [r7, #4]
 800e0b4:	e001      	b.n	800e0ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e0ba:	687b      	ldr	r3, [r7, #4]
	}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	200004c4 	.word	0x200004c4
 800e0cc:	200004e0 	.word	0x200004e0

0800e0d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d069      	beq.n	800e1ba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ea:	4b36      	ldr	r3, [pc, #216]	; (800e1c4 <xTaskPriorityInherit+0xf4>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d259      	bcs.n	800e1a8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	db06      	blt.n	800e10a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0fc:	4b31      	ldr	r3, [pc, #196]	; (800e1c4 <xTaskPriorityInherit+0xf4>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e102:	f1c3 0207 	rsb	r2, r3, #7
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	6959      	ldr	r1, [r3, #20]
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e112:	4613      	mov	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4413      	add	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4a2b      	ldr	r2, [pc, #172]	; (800e1c8 <xTaskPriorityInherit+0xf8>)
 800e11c:	4413      	add	r3, r2
 800e11e:	4299      	cmp	r1, r3
 800e120:	d13a      	bne.n	800e198 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	3304      	adds	r3, #4
 800e126:	4618      	mov	r0, r3
 800e128:	f7fe fa4a 	bl	800c5c0 <uxListRemove>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d115      	bne.n	800e15e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e136:	4924      	ldr	r1, [pc, #144]	; (800e1c8 <xTaskPriorityInherit+0xf8>)
 800e138:	4613      	mov	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	440b      	add	r3, r1
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <xTaskPriorityInherit+0x8e>
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14c:	2201      	movs	r2, #1
 800e14e:	fa02 f303 	lsl.w	r3, r2, r3
 800e152:	43da      	mvns	r2, r3
 800e154:	4b1d      	ldr	r3, [pc, #116]	; (800e1cc <xTaskPriorityInherit+0xfc>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4013      	ands	r3, r2
 800e15a:	4a1c      	ldr	r2, [pc, #112]	; (800e1cc <xTaskPriorityInherit+0xfc>)
 800e15c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e15e:	4b19      	ldr	r3, [pc, #100]	; (800e1c4 <xTaskPriorityInherit+0xf4>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16c:	2201      	movs	r2, #1
 800e16e:	409a      	lsls	r2, r3
 800e170:	4b16      	ldr	r3, [pc, #88]	; (800e1cc <xTaskPriorityInherit+0xfc>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4313      	orrs	r3, r2
 800e176:	4a15      	ldr	r2, [pc, #84]	; (800e1cc <xTaskPriorityInherit+0xfc>)
 800e178:	6013      	str	r3, [r2, #0]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e17e:	4613      	mov	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4413      	add	r3, r2
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4a10      	ldr	r2, [pc, #64]	; (800e1c8 <xTaskPriorityInherit+0xf8>)
 800e188:	441a      	add	r2, r3
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	3304      	adds	r3, #4
 800e18e:	4619      	mov	r1, r3
 800e190:	4610      	mov	r0, r2
 800e192:	f7fe f9b8 	bl	800c506 <vListInsertEnd>
 800e196:	e004      	b.n	800e1a2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e198:	4b0a      	ldr	r3, [pc, #40]	; (800e1c4 <xTaskPriorityInherit+0xf4>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	60fb      	str	r3, [r7, #12]
 800e1a6:	e008      	b.n	800e1ba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1ac:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <xTaskPriorityInherit+0xf4>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d201      	bcs.n	800e1ba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
	}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	200003b8 	.word	0x200003b8
 800e1c8:	200003bc 	.word	0x200003bc
 800e1cc:	200004c0 	.word	0x200004c0

0800e1d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d070      	beq.n	800e2c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1e6:	4b3b      	ldr	r3, [pc, #236]	; (800e2d4 <xTaskPriorityDisinherit+0x104>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	693a      	ldr	r2, [r7, #16]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d00b      	beq.n	800e208 <xTaskPriorityDisinherit+0x38>
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	b672      	cpsid	i
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	b662      	cpsie	i
 800e204:	60fb      	str	r3, [r7, #12]
 800e206:	e7fe      	b.n	800e206 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10b      	bne.n	800e228 <xTaskPriorityDisinherit+0x58>
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	b672      	cpsid	i
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	b662      	cpsie	i
 800e224:	60bb      	str	r3, [r7, #8]
 800e226:	e7fe      	b.n	800e226 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e22c:	1e5a      	subs	r2, r3, #1
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d044      	beq.n	800e2c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e242:	2b00      	cmp	r3, #0
 800e244:	d140      	bne.n	800e2c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	3304      	adds	r3, #4
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fe f9b8 	bl	800c5c0 <uxListRemove>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d115      	bne.n	800e282 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e25a:	491f      	ldr	r1, [pc, #124]	; (800e2d8 <xTaskPriorityDisinherit+0x108>)
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	440b      	add	r3, r1
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10a      	bne.n	800e282 <xTaskPriorityDisinherit+0xb2>
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e270:	2201      	movs	r2, #1
 800e272:	fa02 f303 	lsl.w	r3, r2, r3
 800e276:	43da      	mvns	r2, r3
 800e278:	4b18      	ldr	r3, [pc, #96]	; (800e2dc <xTaskPriorityDisinherit+0x10c>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4013      	ands	r3, r2
 800e27e:	4a17      	ldr	r2, [pc, #92]	; (800e2dc <xTaskPriorityDisinherit+0x10c>)
 800e280:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28e:	f1c3 0207 	rsb	r2, r3, #7
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29a:	2201      	movs	r2, #1
 800e29c:	409a      	lsls	r2, r3
 800e29e:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <xTaskPriorityDisinherit+0x10c>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	4a0d      	ldr	r2, [pc, #52]	; (800e2dc <xTaskPriorityDisinherit+0x10c>)
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4413      	add	r3, r2
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4a08      	ldr	r2, [pc, #32]	; (800e2d8 <xTaskPriorityDisinherit+0x108>)
 800e2b6:	441a      	add	r2, r3
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4619      	mov	r1, r3
 800e2be:	4610      	mov	r0, r2
 800e2c0:	f7fe f921 	bl	800c506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2c8:	697b      	ldr	r3, [r7, #20]
	}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3718      	adds	r7, #24
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	200003b8 	.word	0x200003b8
 800e2d8:	200003bc 	.word	0x200003bc
 800e2dc:	200004c0 	.word	0x200004c0

0800e2e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f000 8085 	beq.w	800e404 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10b      	bne.n	800e31a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	b672      	cpsid	i
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	b662      	cpsie	i
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	e7fe      	b.n	800e318 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	429a      	cmp	r2, r3
 800e322:	d902      	bls.n	800e32a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	61fb      	str	r3, [r7, #28]
 800e328:	e002      	b.n	800e330 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e32e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e334:	69fa      	ldr	r2, [r7, #28]
 800e336:	429a      	cmp	r2, r3
 800e338:	d064      	beq.n	800e404 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	429a      	cmp	r2, r3
 800e342:	d15f      	bne.n	800e404 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e344:	4b31      	ldr	r3, [pc, #196]	; (800e40c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	69ba      	ldr	r2, [r7, #24]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d10b      	bne.n	800e366 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	b672      	cpsid	i
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	b662      	cpsie	i
 800e362:	60bb      	str	r3, [r7, #8]
 800e364:	e7fe      	b.n	800e364 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	69fa      	ldr	r2, [r7, #28]
 800e370:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	699b      	ldr	r3, [r3, #24]
 800e376:	2b00      	cmp	r3, #0
 800e378:	db04      	blt.n	800e384 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	f1c3 0207 	rsb	r2, r3, #7
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	6959      	ldr	r1, [r3, #20]
 800e388:	693a      	ldr	r2, [r7, #16]
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4a1f      	ldr	r2, [pc, #124]	; (800e410 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e394:	4413      	add	r3, r2
 800e396:	4299      	cmp	r1, r3
 800e398:	d134      	bne.n	800e404 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	3304      	adds	r3, #4
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe f90e 	bl	800c5c0 <uxListRemove>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d115      	bne.n	800e3d6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ae:	4918      	ldr	r1, [pc, #96]	; (800e410 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	440b      	add	r3, r1
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10a      	bne.n	800e3d6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ca:	43da      	mvns	r2, r3
 800e3cc:	4b11      	ldr	r3, [pc, #68]	; (800e414 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	4a10      	ldr	r2, [pc, #64]	; (800e414 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3da:	2201      	movs	r2, #1
 800e3dc:	409a      	lsls	r2, r3
 800e3de:	4b0d      	ldr	r3, [pc, #52]	; (800e414 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	4a0b      	ldr	r2, [pc, #44]	; (800e414 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3e6:	6013      	str	r3, [r2, #0]
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	4a06      	ldr	r2, [pc, #24]	; (800e410 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3f6:	441a      	add	r2, r3
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	3304      	adds	r3, #4
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	4610      	mov	r0, r2
 800e400:	f7fe f881 	bl	800c506 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e404:	bf00      	nop
 800e406:	3720      	adds	r7, #32
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	200003b8 	.word	0x200003b8
 800e410:	200003bc 	.word	0x200003bc
 800e414:	200004c0 	.word	0x200004c0

0800e418 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e418:	b480      	push	{r7}
 800e41a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e41c:	4b07      	ldr	r3, [pc, #28]	; (800e43c <pvTaskIncrementMutexHeldCount+0x24>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d004      	beq.n	800e42e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e424:	4b05      	ldr	r3, [pc, #20]	; (800e43c <pvTaskIncrementMutexHeldCount+0x24>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e42a:	3201      	adds	r2, #1
 800e42c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e42e:	4b03      	ldr	r3, [pc, #12]	; (800e43c <pvTaskIncrementMutexHeldCount+0x24>)
 800e430:	681b      	ldr	r3, [r3, #0]
	}
 800e432:	4618      	mov	r0, r3
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr
 800e43c:	200003b8 	.word	0x200003b8

0800e440 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e44a:	4b29      	ldr	r3, [pc, #164]	; (800e4f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e450:	4b28      	ldr	r3, [pc, #160]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3304      	adds	r3, #4
 800e456:	4618      	mov	r0, r3
 800e458:	f7fe f8b2 	bl	800c5c0 <uxListRemove>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10b      	bne.n	800e47a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e462:	4b24      	ldr	r3, [pc, #144]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e468:	2201      	movs	r2, #1
 800e46a:	fa02 f303 	lsl.w	r3, r2, r3
 800e46e:	43da      	mvns	r2, r3
 800e470:	4b21      	ldr	r3, [pc, #132]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4013      	ands	r3, r2
 800e476:	4a20      	ldr	r2, [pc, #128]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e478:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e480:	d10a      	bne.n	800e498 <prvAddCurrentTaskToDelayedList+0x58>
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d007      	beq.n	800e498 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e488:	4b1a      	ldr	r3, [pc, #104]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3304      	adds	r3, #4
 800e48e:	4619      	mov	r1, r3
 800e490:	481a      	ldr	r0, [pc, #104]	; (800e4fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800e492:	f7fe f838 	bl	800c506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e496:	e026      	b.n	800e4e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4413      	add	r3, r2
 800e49e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4a0:	4b14      	ldr	r3, [pc, #80]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	68ba      	ldr	r2, [r7, #8]
 800e4a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d209      	bcs.n	800e4c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4b0:	4b13      	ldr	r3, [pc, #76]	; (800e500 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	4b0f      	ldr	r3, [pc, #60]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f7fe f846 	bl	800c54e <vListInsert>
}
 800e4c2:	e010      	b.n	800e4e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4c4:	4b0f      	ldr	r3, [pc, #60]	; (800e504 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	f7fe f83c 	bl	800c54e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4d6:	4b0c      	ldr	r3, [pc, #48]	; (800e508 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d202      	bcs.n	800e4e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e4e0:	4a09      	ldr	r2, [pc, #36]	; (800e508 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	6013      	str	r3, [r2, #0]
}
 800e4e6:	bf00      	nop
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	200004bc 	.word	0x200004bc
 800e4f4:	200003b8 	.word	0x200003b8
 800e4f8:	200004c0 	.word	0x200004c0
 800e4fc:	200004a4 	.word	0x200004a4
 800e500:	20000474 	.word	0x20000474
 800e504:	20000470 	.word	0x20000470
 800e508:	200004d8 	.word	0x200004d8

0800e50c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3b04      	subs	r3, #4
 800e51c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3b04      	subs	r3, #4
 800e52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	f023 0201 	bic.w	r2, r3, #1
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3b04      	subs	r3, #4
 800e53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e53c:	4a0c      	ldr	r2, [pc, #48]	; (800e570 <pxPortInitialiseStack+0x64>)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3b14      	subs	r3, #20
 800e546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3b04      	subs	r3, #4
 800e552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f06f 0202 	mvn.w	r2, #2
 800e55a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3b20      	subs	r3, #32
 800e560:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e562:	68fb      	ldr	r3, [r7, #12]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	0800e575 	.word	0x0800e575

0800e574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e574:	b480      	push	{r7}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e57e:	4b13      	ldr	r3, [pc, #76]	; (800e5cc <prvTaskExitError+0x58>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e586:	d00b      	beq.n	800e5a0 <prvTaskExitError+0x2c>
 800e588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58c:	b672      	cpsid	i
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	b662      	cpsie	i
 800e59c:	60fb      	str	r3, [r7, #12]
 800e59e:	e7fe      	b.n	800e59e <prvTaskExitError+0x2a>
 800e5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a4:	b672      	cpsid	i
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	b662      	cpsie	i
 800e5b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5b6:	bf00      	nop
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d0fc      	beq.n	800e5b8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5be:	bf00      	nop
 800e5c0:	3714      	adds	r7, #20
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	20000024 	.word	0x20000024

0800e5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5d0:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <pxCurrentTCBConst2>)
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	6808      	ldr	r0, [r1, #0]
 800e5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5da:	f380 8809 	msr	PSP, r0
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8811 	msr	BASEPRI, r0
 800e5ea:	4770      	bx	lr
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst2>:
 800e5f0:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5f8:	4808      	ldr	r0, [pc, #32]	; (800e61c <prvPortStartFirstTask+0x24>)
 800e5fa:	6800      	ldr	r0, [r0, #0]
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	f380 8808 	msr	MSP, r0
 800e602:	f04f 0000 	mov.w	r0, #0
 800e606:	f380 8814 	msr	CONTROL, r0
 800e60a:	b662      	cpsie	i
 800e60c:	b661      	cpsie	f
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	df00      	svc	0
 800e618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e61a:	bf00      	nop
 800e61c:	e000ed08 	.word	0xe000ed08

0800e620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e626:	4b36      	ldr	r3, [pc, #216]	; (800e700 <xPortStartScheduler+0xe0>)
 800e628:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	22ff      	movs	r2, #255	; 0xff
 800e636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e640:	78fb      	ldrb	r3, [r7, #3]
 800e642:	b2db      	uxtb	r3, r3
 800e644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	4b2e      	ldr	r3, [pc, #184]	; (800e704 <xPortStartScheduler+0xe4>)
 800e64c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e64e:	4b2e      	ldr	r3, [pc, #184]	; (800e708 <xPortStartScheduler+0xe8>)
 800e650:	2207      	movs	r2, #7
 800e652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e654:	e009      	b.n	800e66a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e656:	4b2c      	ldr	r3, [pc, #176]	; (800e708 <xPortStartScheduler+0xe8>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3b01      	subs	r3, #1
 800e65c:	4a2a      	ldr	r2, [pc, #168]	; (800e708 <xPortStartScheduler+0xe8>)
 800e65e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e660:	78fb      	ldrb	r3, [r7, #3]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	b2db      	uxtb	r3, r3
 800e668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e66a:	78fb      	ldrb	r3, [r7, #3]
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e672:	2b80      	cmp	r3, #128	; 0x80
 800e674:	d0ef      	beq.n	800e656 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e676:	4b24      	ldr	r3, [pc, #144]	; (800e708 <xPortStartScheduler+0xe8>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f1c3 0307 	rsb	r3, r3, #7
 800e67e:	2b04      	cmp	r3, #4
 800e680:	d00b      	beq.n	800e69a <xPortStartScheduler+0x7a>
 800e682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e686:	b672      	cpsid	i
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	b662      	cpsie	i
 800e696:	60bb      	str	r3, [r7, #8]
 800e698:	e7fe      	b.n	800e698 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e69a:	4b1b      	ldr	r3, [pc, #108]	; (800e708 <xPortStartScheduler+0xe8>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	021b      	lsls	r3, r3, #8
 800e6a0:	4a19      	ldr	r2, [pc, #100]	; (800e708 <xPortStartScheduler+0xe8>)
 800e6a2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6a4:	4b18      	ldr	r3, [pc, #96]	; (800e708 <xPortStartScheduler+0xe8>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6ac:	4a16      	ldr	r2, [pc, #88]	; (800e708 <xPortStartScheduler+0xe8>)
 800e6ae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6b8:	4b14      	ldr	r3, [pc, #80]	; (800e70c <xPortStartScheduler+0xec>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a13      	ldr	r2, [pc, #76]	; (800e70c <xPortStartScheduler+0xec>)
 800e6be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6c4:	4b11      	ldr	r3, [pc, #68]	; (800e70c <xPortStartScheduler+0xec>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a10      	ldr	r2, [pc, #64]	; (800e70c <xPortStartScheduler+0xec>)
 800e6ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6d0:	f000 f8d4 	bl	800e87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6d4:	4b0e      	ldr	r3, [pc, #56]	; (800e710 <xPortStartScheduler+0xf0>)
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6da:	f000 f8f3 	bl	800e8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6de:	4b0d      	ldr	r3, [pc, #52]	; (800e714 <xPortStartScheduler+0xf4>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a0c      	ldr	r2, [pc, #48]	; (800e714 <xPortStartScheduler+0xf4>)
 800e6e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6ea:	f7ff ff85 	bl	800e5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6ee:	f7ff fa69 	bl	800dbc4 <vTaskSwitchContext>
	prvTaskExitError();
 800e6f2:	f7ff ff3f 	bl	800e574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	e000e400 	.word	0xe000e400
 800e704:	200004e4 	.word	0x200004e4
 800e708:	200004e8 	.word	0x200004e8
 800e70c:	e000ed20 	.word	0xe000ed20
 800e710:	20000024 	.word	0x20000024
 800e714:	e000ef34 	.word	0xe000ef34

0800e718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e722:	b672      	cpsid	i
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	b662      	cpsie	i
 800e732:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e734:	4b0f      	ldr	r3, [pc, #60]	; (800e774 <vPortEnterCritical+0x5c>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3301      	adds	r3, #1
 800e73a:	4a0e      	ldr	r2, [pc, #56]	; (800e774 <vPortEnterCritical+0x5c>)
 800e73c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e73e:	4b0d      	ldr	r3, [pc, #52]	; (800e774 <vPortEnterCritical+0x5c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b01      	cmp	r3, #1
 800e744:	d110      	bne.n	800e768 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e746:	4b0c      	ldr	r3, [pc, #48]	; (800e778 <vPortEnterCritical+0x60>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00b      	beq.n	800e768 <vPortEnterCritical+0x50>
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	b672      	cpsid	i
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	b662      	cpsie	i
 800e764:	603b      	str	r3, [r7, #0]
 800e766:	e7fe      	b.n	800e766 <vPortEnterCritical+0x4e>
	}
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr
 800e774:	20000024 	.word	0x20000024
 800e778:	e000ed04 	.word	0xe000ed04

0800e77c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e782:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <vPortExitCritical+0x50>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10b      	bne.n	800e7a2 <vPortExitCritical+0x26>
 800e78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78e:	b672      	cpsid	i
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	b662      	cpsie	i
 800e79e:	607b      	str	r3, [r7, #4]
 800e7a0:	e7fe      	b.n	800e7a0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e7a2:	4b0a      	ldr	r3, [pc, #40]	; (800e7cc <vPortExitCritical+0x50>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	4a08      	ldr	r2, [pc, #32]	; (800e7cc <vPortExitCritical+0x50>)
 800e7aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7ac:	4b07      	ldr	r3, [pc, #28]	; (800e7cc <vPortExitCritical+0x50>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d104      	bne.n	800e7be <vPortExitCritical+0x42>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7be:	bf00      	nop
 800e7c0:	370c      	adds	r7, #12
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	20000024 	.word	0x20000024

0800e7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7d0:	f3ef 8009 	mrs	r0, PSP
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	4b15      	ldr	r3, [pc, #84]	; (800e830 <pxCurrentTCBConst>)
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	f01e 0f10 	tst.w	lr, #16
 800e7e0:	bf08      	it	eq
 800e7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ea:	6010      	str	r0, [r2, #0]
 800e7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7f4:	b672      	cpsid	i
 800e7f6:	f380 8811 	msr	BASEPRI, r0
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	b662      	cpsie	i
 800e804:	f7ff f9de 	bl	800dbc4 <vTaskSwitchContext>
 800e808:	f04f 0000 	mov.w	r0, #0
 800e80c:	f380 8811 	msr	BASEPRI, r0
 800e810:	bc09      	pop	{r0, r3}
 800e812:	6819      	ldr	r1, [r3, #0]
 800e814:	6808      	ldr	r0, [r1, #0]
 800e816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81a:	f01e 0f10 	tst.w	lr, #16
 800e81e:	bf08      	it	eq
 800e820:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e824:	f380 8809 	msr	PSP, r0
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop

0800e830 <pxCurrentTCBConst>:
 800e830:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e834:	bf00      	nop
 800e836:	bf00      	nop

0800e838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	b672      	cpsid	i
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	b662      	cpsie	i
 800e852:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e854:	f7ff f8fc 	bl	800da50 <xTaskIncrementTick>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d003      	beq.n	800e866 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e85e:	4b06      	ldr	r3, [pc, #24]	; (800e878 <SysTick_Handler+0x40>)
 800e860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	2300      	movs	r3, #0
 800e868:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e870:	bf00      	nop
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	e000ed04 	.word	0xe000ed04

0800e87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e87c:	b480      	push	{r7}
 800e87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e880:	4b0b      	ldr	r3, [pc, #44]	; (800e8b0 <vPortSetupTimerInterrupt+0x34>)
 800e882:	2200      	movs	r2, #0
 800e884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e886:	4b0b      	ldr	r3, [pc, #44]	; (800e8b4 <vPortSetupTimerInterrupt+0x38>)
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e88c:	4b0a      	ldr	r3, [pc, #40]	; (800e8b8 <vPortSetupTimerInterrupt+0x3c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a0a      	ldr	r2, [pc, #40]	; (800e8bc <vPortSetupTimerInterrupt+0x40>)
 800e892:	fba2 2303 	umull	r2, r3, r2, r3
 800e896:	099b      	lsrs	r3, r3, #6
 800e898:	4a09      	ldr	r2, [pc, #36]	; (800e8c0 <vPortSetupTimerInterrupt+0x44>)
 800e89a:	3b01      	subs	r3, #1
 800e89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e89e:	4b04      	ldr	r3, [pc, #16]	; (800e8b0 <vPortSetupTimerInterrupt+0x34>)
 800e8a0:	2207      	movs	r2, #7
 800e8a2:	601a      	str	r2, [r3, #0]
}
 800e8a4:	bf00      	nop
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	e000e010 	.word	0xe000e010
 800e8b4:	e000e018 	.word	0xe000e018
 800e8b8:	20000018 	.word	0x20000018
 800e8bc:	10624dd3 	.word	0x10624dd3
 800e8c0:	e000e014 	.word	0xe000e014

0800e8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8d4 <vPortEnableVFP+0x10>
 800e8c8:	6801      	ldr	r1, [r0, #0]
 800e8ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8ce:	6001      	str	r1, [r0, #0]
 800e8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8d2:	bf00      	nop
 800e8d4:	e000ed88 	.word	0xe000ed88

0800e8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8de:	f3ef 8305 	mrs	r3, IPSR
 800e8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2b0f      	cmp	r3, #15
 800e8e8:	d915      	bls.n	800e916 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8ea:	4a18      	ldr	r2, [pc, #96]	; (800e94c <vPortValidateInterruptPriority+0x74>)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8f4:	4b16      	ldr	r3, [pc, #88]	; (800e950 <vPortValidateInterruptPriority+0x78>)
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	7afa      	ldrb	r2, [r7, #11]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d20b      	bcs.n	800e916 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e902:	b672      	cpsid	i
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	b662      	cpsie	i
 800e912:	607b      	str	r3, [r7, #4]
 800e914:	e7fe      	b.n	800e914 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e916:	4b0f      	ldr	r3, [pc, #60]	; (800e954 <vPortValidateInterruptPriority+0x7c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e91e:	4b0e      	ldr	r3, [pc, #56]	; (800e958 <vPortValidateInterruptPriority+0x80>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	429a      	cmp	r2, r3
 800e924:	d90b      	bls.n	800e93e <vPortValidateInterruptPriority+0x66>
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	b672      	cpsid	i
 800e92c:	f383 8811 	msr	BASEPRI, r3
 800e930:	f3bf 8f6f 	isb	sy
 800e934:	f3bf 8f4f 	dsb	sy
 800e938:	b662      	cpsie	i
 800e93a:	603b      	str	r3, [r7, #0]
 800e93c:	e7fe      	b.n	800e93c <vPortValidateInterruptPriority+0x64>
	}
 800e93e:	bf00      	nop
 800e940:	3714      	adds	r7, #20
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	e000e3f0 	.word	0xe000e3f0
 800e950:	200004e4 	.word	0x200004e4
 800e954:	e000ed0c 	.word	0xe000ed0c
 800e958:	200004e8 	.word	0x200004e8

0800e95c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b08a      	sub	sp, #40	; 0x28
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e964:	2300      	movs	r3, #0
 800e966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e968:	f7fe ffa4 	bl	800d8b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e96c:	4b5c      	ldr	r3, [pc, #368]	; (800eae0 <pvPortMalloc+0x184>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d101      	bne.n	800e978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e974:	f000 f91a 	bl	800ebac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e978:	4b5a      	ldr	r3, [pc, #360]	; (800eae4 <pvPortMalloc+0x188>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4013      	ands	r3, r2
 800e980:	2b00      	cmp	r3, #0
 800e982:	f040 8090 	bne.w	800eaa6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d01e      	beq.n	800e9ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e98c:	2208      	movs	r2, #8
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4413      	add	r3, r2
 800e992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f003 0307 	and.w	r3, r3, #7
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d015      	beq.n	800e9ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f023 0307 	bic.w	r3, r3, #7
 800e9a4:	3308      	adds	r3, #8
 800e9a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f003 0307 	and.w	r3, r3, #7
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00b      	beq.n	800e9ca <pvPortMalloc+0x6e>
 800e9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b6:	b672      	cpsid	i
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	b662      	cpsie	i
 800e9c6:	617b      	str	r3, [r7, #20]
 800e9c8:	e7fe      	b.n	800e9c8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d06a      	beq.n	800eaa6 <pvPortMalloc+0x14a>
 800e9d0:	4b45      	ldr	r3, [pc, #276]	; (800eae8 <pvPortMalloc+0x18c>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d865      	bhi.n	800eaa6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9da:	4b44      	ldr	r3, [pc, #272]	; (800eaec <pvPortMalloc+0x190>)
 800e9dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9de:	4b43      	ldr	r3, [pc, #268]	; (800eaec <pvPortMalloc+0x190>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9e4:	e004      	b.n	800e9f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d903      	bls.n	800ea02 <pvPortMalloc+0xa6>
 800e9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d1f1      	bne.n	800e9e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea02:	4b37      	ldr	r3, [pc, #220]	; (800eae0 <pvPortMalloc+0x184>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d04c      	beq.n	800eaa6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea0c:	6a3b      	ldr	r3, [r7, #32]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2208      	movs	r2, #8
 800ea12:	4413      	add	r3, r2
 800ea14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	685a      	ldr	r2, [r3, #4]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	1ad2      	subs	r2, r2, r3
 800ea26:	2308      	movs	r3, #8
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d920      	bls.n	800ea70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4413      	add	r3, r2
 800ea34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	f003 0307 	and.w	r3, r3, #7
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00b      	beq.n	800ea58 <pvPortMalloc+0xfc>
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	b672      	cpsid	i
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	b662      	cpsie	i
 800ea54:	613b      	str	r3, [r7, #16]
 800ea56:	e7fe      	b.n	800ea56 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	1ad2      	subs	r2, r2, r3
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea6a:	69b8      	ldr	r0, [r7, #24]
 800ea6c:	f000 f900 	bl	800ec70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea70:	4b1d      	ldr	r3, [pc, #116]	; (800eae8 <pvPortMalloc+0x18c>)
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	4a1b      	ldr	r2, [pc, #108]	; (800eae8 <pvPortMalloc+0x18c>)
 800ea7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea7e:	4b1a      	ldr	r3, [pc, #104]	; (800eae8 <pvPortMalloc+0x18c>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	4b1b      	ldr	r3, [pc, #108]	; (800eaf0 <pvPortMalloc+0x194>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d203      	bcs.n	800ea92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea8a:	4b17      	ldr	r3, [pc, #92]	; (800eae8 <pvPortMalloc+0x18c>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a18      	ldr	r2, [pc, #96]	; (800eaf0 <pvPortMalloc+0x194>)
 800ea90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea94:	685a      	ldr	r2, [r3, #4]
 800ea96:	4b13      	ldr	r3, [pc, #76]	; (800eae4 <pvPortMalloc+0x188>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	431a      	orrs	r2, r3
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eaa6:	f7fe ff13 	bl	800d8d0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800eab0:	f7f2 f986 	bl	8000dc0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	f003 0307 	and.w	r3, r3, #7
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00b      	beq.n	800ead6 <pvPortMalloc+0x17a>
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	b672      	cpsid	i
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	b662      	cpsie	i
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	e7fe      	b.n	800ead4 <pvPortMalloc+0x178>
	return pvReturn;
 800ead6:	69fb      	ldr	r3, [r7, #28]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3728      	adds	r7, #40	; 0x28
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	200084f4 	.word	0x200084f4
 800eae4:	20008500 	.word	0x20008500
 800eae8:	200084f8 	.word	0x200084f8
 800eaec:	200084ec 	.word	0x200084ec
 800eaf0:	200084fc 	.word	0x200084fc

0800eaf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d04a      	beq.n	800eb9c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb06:	2308      	movs	r3, #8
 800eb08:	425b      	negs	r3, r3
 800eb0a:	697a      	ldr	r2, [r7, #20]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	4b22      	ldr	r3, [pc, #136]	; (800eba4 <vPortFree+0xb0>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4013      	ands	r3, r2
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10b      	bne.n	800eb3a <vPortFree+0x46>
 800eb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb26:	b672      	cpsid	i
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	b662      	cpsie	i
 800eb36:	60fb      	str	r3, [r7, #12]
 800eb38:	e7fe      	b.n	800eb38 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00b      	beq.n	800eb5a <vPortFree+0x66>
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	b672      	cpsid	i
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	b662      	cpsie	i
 800eb56:	60bb      	str	r3, [r7, #8]
 800eb58:	e7fe      	b.n	800eb58 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	685a      	ldr	r2, [r3, #4]
 800eb5e:	4b11      	ldr	r3, [pc, #68]	; (800eba4 <vPortFree+0xb0>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4013      	ands	r3, r2
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d019      	beq.n	800eb9c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d115      	bne.n	800eb9c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	685a      	ldr	r2, [r3, #4]
 800eb74:	4b0b      	ldr	r3, [pc, #44]	; (800eba4 <vPortFree+0xb0>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	43db      	mvns	r3, r3
 800eb7a:	401a      	ands	r2, r3
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb80:	f7fe fe98 	bl	800d8b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	4b07      	ldr	r3, [pc, #28]	; (800eba8 <vPortFree+0xb4>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	4a06      	ldr	r2, [pc, #24]	; (800eba8 <vPortFree+0xb4>)
 800eb90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb92:	6938      	ldr	r0, [r7, #16]
 800eb94:	f000 f86c 	bl	800ec70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb98:	f7fe fe9a 	bl	800d8d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb9c:	bf00      	nop
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	20008500 	.word	0x20008500
 800eba8:	200084f8 	.word	0x200084f8

0800ebac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ebac:	b480      	push	{r7}
 800ebae:	b085      	sub	sp, #20
 800ebb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebb8:	4b27      	ldr	r3, [pc, #156]	; (800ec58 <prvHeapInit+0xac>)
 800ebba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f003 0307 	and.w	r3, r3, #7
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00c      	beq.n	800ebe0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	3307      	adds	r3, #7
 800ebca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f023 0307 	bic.w	r3, r3, #7
 800ebd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	4a1f      	ldr	r2, [pc, #124]	; (800ec58 <prvHeapInit+0xac>)
 800ebdc:	4413      	add	r3, r2
 800ebde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebe4:	4a1d      	ldr	r2, [pc, #116]	; (800ec5c <prvHeapInit+0xb0>)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebea:	4b1c      	ldr	r3, [pc, #112]	; (800ec5c <prvHeapInit+0xb0>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebf8:	2208      	movs	r2, #8
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	1a9b      	subs	r3, r3, r2
 800ebfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f023 0307 	bic.w	r3, r3, #7
 800ec06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4a15      	ldr	r2, [pc, #84]	; (800ec60 <prvHeapInit+0xb4>)
 800ec0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec0e:	4b14      	ldr	r3, [pc, #80]	; (800ec60 <prvHeapInit+0xb4>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2200      	movs	r2, #0
 800ec14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec16:	4b12      	ldr	r3, [pc, #72]	; (800ec60 <prvHeapInit+0xb4>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	1ad2      	subs	r2, r2, r3
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec2c:	4b0c      	ldr	r3, [pc, #48]	; (800ec60 <prvHeapInit+0xb4>)
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	4a0a      	ldr	r2, [pc, #40]	; (800ec64 <prvHeapInit+0xb8>)
 800ec3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	4a09      	ldr	r2, [pc, #36]	; (800ec68 <prvHeapInit+0xbc>)
 800ec42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec44:	4b09      	ldr	r3, [pc, #36]	; (800ec6c <prvHeapInit+0xc0>)
 800ec46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec4a:	601a      	str	r2, [r3, #0]
}
 800ec4c:	bf00      	nop
 800ec4e:	3714      	adds	r7, #20
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	200004ec 	.word	0x200004ec
 800ec5c:	200084ec 	.word	0x200084ec
 800ec60:	200084f4 	.word	0x200084f4
 800ec64:	200084fc 	.word	0x200084fc
 800ec68:	200084f8 	.word	0x200084f8
 800ec6c:	20008500 	.word	0x20008500

0800ec70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec78:	4b28      	ldr	r3, [pc, #160]	; (800ed1c <prvInsertBlockIntoFreeList+0xac>)
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	e002      	b.n	800ec84 <prvInsertBlockIntoFreeList+0x14>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d8f7      	bhi.n	800ec7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	4413      	add	r3, r2
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d108      	bne.n	800ecb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	441a      	add	r2, r3
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	441a      	add	r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d118      	bne.n	800ecf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	4b15      	ldr	r3, [pc, #84]	; (800ed20 <prvInsertBlockIntoFreeList+0xb0>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d00d      	beq.n	800ecee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	685a      	ldr	r2, [r3, #4]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	441a      	add	r2, r3
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	e008      	b.n	800ed00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecee:	4b0c      	ldr	r3, [pc, #48]	; (800ed20 <prvInsertBlockIntoFreeList+0xb0>)
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	601a      	str	r2, [r3, #0]
 800ecf6:	e003      	b.n	800ed00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed00:	68fa      	ldr	r2, [r7, #12]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d002      	beq.n	800ed0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed0e:	bf00      	nop
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	200084ec 	.word	0x200084ec
 800ed20:	200084f4 	.word	0x200084f4

0800ed24 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800ed28:	f005 fa10 	bl	801414c <touchgfx_init>
}
 800ed2c:	bf00      	nop
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800ed34:	f005 fa34 	bl	80141a0 <touchgfx_taskEntry>
}
 800ed38:	bf00      	nop
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
    {
 800ed44:	4a04      	ldr	r2, [pc, #16]	; (800ed58 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	601a      	str	r2, [r3, #0]
    }
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr
 800ed58:	08025d18 	.word	0x08025d18

0800ed5c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    }
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7ff ffe9 	bl	800ed3c <_ZN8touchgfx12FontProviderD1Ev>
 800ed6a:	2104      	movs	r1, #4
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f015 fc14 	bl	802459a <_ZdlPvj>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4618      	mov	r0, r3
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	460b      	mov	r3, r1
 800ed86:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ed88:	887b      	ldrh	r3, [r7, #2]
 800ed8a:	2b07      	cmp	r3, #7
 800ed8c:	d83a      	bhi.n	800ee04 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800ed8e:	a201      	add	r2, pc, #4	; (adr r2, 800ed94 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800ed90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed94:	0800edb5 	.word	0x0800edb5
 800ed98:	0800edbf 	.word	0x0800edbf
 800ed9c:	0800edc9 	.word	0x0800edc9
 800eda0:	0800edd3 	.word	0x0800edd3
 800eda4:	0800eddd 	.word	0x0800eddd
 800eda8:	0800ede7 	.word	0x0800ede7
 800edac:	0800edf1 	.word	0x0800edf1
 800edb0:	0800edfb 	.word	0x0800edfb
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800edb4:	f003 fbca 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800edb8:	4603      	mov	r3, r0
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	e023      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800edbe:	f003 fbc5 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800edc2:	4603      	mov	r3, r0
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	e01e      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800edc8:	f003 fbc0 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800edcc:	4603      	mov	r3, r0
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	e019      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800edd2:	f003 fbbb 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800edd6:	4603      	mov	r3, r0
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	e014      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800eddc:	f003 fbb6 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800ede0:	4603      	mov	r3, r0
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	e00f      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800ede6:	f003 fbb1 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800edea:	4603      	mov	r3, r0
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	e00a      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800edf0:	f003 fbac 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800edf4:	4603      	mov	r3, r0
 800edf6:	695b      	ldr	r3, [r3, #20]
 800edf8:	e005      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800edfa:	f003 fba7 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 800edfe:	4603      	mov	r3, r0
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	e000      	b.n	800ee06 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800ee04:	2300      	movs	r3, #0
    }
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3708      	adds	r7, #8
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop

0800ee10 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	4a05      	ldr	r2, [pc, #20]	; (800ee30 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7ff ff8b 	bl	800ed3c <_ZN8touchgfx12FontProviderD1Ev>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3708      	adds	r7, #8
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	08025d04 	.word	0x08025d04

0800ee34 <_ZN23ApplicationFontProviderD0Ev>:
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff ffe7 	bl	800ee10 <_ZN23ApplicationFontProviderD1Ev>
 800ee42:	2104      	movs	r1, #4
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f015 fba8 	bl	802459a <_ZdlPvj>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	4a04      	ldr	r2, [pc, #16]	; (800ee70 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	08027f84 	.word	0x08027f84

0800ee74 <_ZN8touchgfx4FontD0Ev>:
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7ff ffe9 	bl	800ee54 <_ZN8touchgfx4FontD1Ev>
 800ee82:	2110      	movs	r1, #16
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f015 fb88 	bl	802459a <_ZdlPvj>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800ee94:	b590      	push	{r4, r7, lr}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	3308      	adds	r3, #8
 800eeae:	681c      	ldr	r4, [r3, #0]
 800eeb0:	f107 030f 	add.w	r3, r7, #15
 800eeb4:	f107 0210 	add.w	r2, r7, #16
 800eeb8:	8879      	ldrh	r1, [r7, #2]
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	47a0      	blx	r4
 800eebe:	6178      	str	r0, [r7, #20]
        return glyph;
 800eec0:	697b      	ldr	r3, [r7, #20]
    }
 800eec2:	4618      	mov	r0, r3
 800eec4:	371c      	adds	r7, #28
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd90      	pop	{r4, r7, pc}

0800eeca <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800eeca:	b480      	push	{r7}
 800eecc:	b083      	sub	sp, #12
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	895b      	ldrh	r3, [r3, #10]
    }
 800eed6:	4618      	mov	r0, r3
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800eee2:	b480      	push	{r7}
 800eee4:	b083      	sub	sp, #12
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	899b      	ldrh	r3, [r3, #12]
    }
 800eeee:	4618      	mov	r0, r3
 800eef0:	370c      	adds	r7, #12
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr

0800eefa <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800eefa:	b480      	push	{r7}
 800eefc:	b083      	sub	sp, #12
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	889b      	ldrh	r3, [r3, #4]
    }
 800ef06:	4618      	mov	r0, r3
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr

0800ef12 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	889a      	ldrh	r2, [r3, #4]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	799b      	ldrb	r3, [r3, #6]
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	4413      	add	r3, r2
 800ef26:	b29b      	uxth	r3, r3
    }
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	79db      	ldrb	r3, [r3, #7]
 800ef40:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800ef44:	b2db      	uxtb	r3, r3
    }
 800ef46:	4618      	mov	r0, r3
 800ef48:	370c      	adds	r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800ef52:	b480      	push	{r7}
 800ef54:	b083      	sub	sp, #12
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	79db      	ldrb	r3, [r3, #7]
 800ef5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ef62:	b2db      	uxtb	r3, r3
    }
 800ef64:	4618      	mov	r0, r3
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	4a05      	ldr	r2, [pc, #20]	; (800ef90 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff ff67 	bl	800ee54 <_ZN8touchgfx4FontD1Ev>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	0802803c 	.word	0x0802803c

0800ef94 <_ZN8touchgfx9ConstFontD0Ev>:
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff ffe7 	bl	800ef70 <_ZN8touchgfx9ConstFontD1Ev>
 800efa2:	2118      	movs	r1, #24
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f015 faf8 	bl	802459a <_ZdlPvj>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4618      	mov	r0, r3
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	4a05      	ldr	r2, [pc, #20]	; (800efd4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	601a      	str	r2, [r3, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7ff ffd3 	bl	800ef70 <_ZN8touchgfx9ConstFontD1Ev>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	08025d5c 	.word	0x08025d5c

0800efd8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f7ff ffe7 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800efe6:	2124      	movs	r1, #36	; 0x24
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f015 fad6 	bl	802459a <_ZdlPvj>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 f82d 	bl	800f060 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f006:	4b08      	ldr	r3, [pc, #32]	; (800f028 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	4b08      	ldr	r3, [pc, #32]	; (800f02c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f00c:	6819      	ldr	r1, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	881b      	ldrh	r3, [r3, #0]
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	440b      	add	r3, r1
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4413      	add	r3, r2
 800f01c:	681b      	ldr	r3, [r3, #0]
    }
 800f01e:	4618      	mov	r0, r3
 800f020:	3708      	adds	r7, #8
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	2000bd00 	.word	0x2000bd00
 800f02c:	2000bcf8 	.word	0x2000bcf8

0800f030 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f811 	bl	800f060 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f03e:	4b07      	ldr	r3, [pc, #28]	; (800f05c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	4413      	add	r3, r2
 800f04a:	785b      	ldrb	r3, [r3, #1]
 800f04c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f050:	b2db      	uxtb	r3, r3
    }
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	2000bcf8 	.word	0x2000bcf8

0800f060 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f068:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d105      	bne.n	800f07c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f070:	4b0b      	ldr	r3, [pc, #44]	; (800f0a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f072:	4a0c      	ldr	r2, [pc, #48]	; (800f0a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f074:	21de      	movs	r1, #222	; 0xde
 800f076:	480c      	ldr	r0, [pc, #48]	; (800f0a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f078:	f015 faba 	bl	80245f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	881a      	ldrh	r2, [r3, #0]
 800f080:	4b0a      	ldr	r3, [pc, #40]	; (800f0ac <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f082:	881b      	ldrh	r3, [r3, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d305      	bcc.n	800f094 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f088:	4b09      	ldr	r3, [pc, #36]	; (800f0b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f08a:	4a06      	ldr	r2, [pc, #24]	; (800f0a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f08c:	21df      	movs	r1, #223	; 0xdf
 800f08e:	4806      	ldr	r0, [pc, #24]	; (800f0a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f090:	f015 faae 	bl	80245f0 <__assert_func>
    }
 800f094:	bf00      	nop
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	2000bcf8 	.word	0x2000bcf8
 800f0a0:	08025678 	.word	0x08025678
 800f0a4:	08025d24 	.word	0x08025d24
 800f0a8:	080256bc 	.word	0x080256bc
 800f0ac:	2000bcfc 	.word	0x2000bcfc
 800f0b0:	08025700 	.word	0x08025700

0800f0b4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	7b5b      	ldrb	r3, [r3, #13]
 800f0c0:	021b      	lsls	r3, r3, #8
 800f0c2:	b21b      	sxth	r3, r3
 800f0c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0c8:	b21a      	sxth	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	7adb      	ldrb	r3, [r3, #11]
 800f0ce:	b21b      	sxth	r3, r3
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	b21b      	sxth	r3, r3
 800f0d4:	b29b      	uxth	r3, r3
    }
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f0e2:	b480      	push	{r7}
 800f0e4:	b083      	sub	sp, #12
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a1b      	ldr	r3, [r3, #32]
    }
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr
	...

0800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08c      	sub	sp, #48	; 0x30
 800f100:	af08      	add	r7, sp, #32
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	4611      	mov	r1, r2
 800f108:	461a      	mov	r2, r3
 800f10a:	460b      	mov	r3, r1
 800f10c:	80fb      	strh	r3, [r7, #6]
 800f10e:	4613      	mov	r3, r2
 800f110:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f112:	68f8      	ldr	r0, [r7, #12]
 800f114:	88b9      	ldrh	r1, [r7, #4]
 800f116:	88fa      	ldrh	r2, [r7, #6]
 800f118:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f11a:	9306      	str	r3, [sp, #24]
 800f11c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f11e:	9305      	str	r3, [sp, #20]
 800f120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f124:	9304      	str	r3, [sp, #16]
 800f126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f12a:	9303      	str	r3, [sp, #12]
 800f12c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f130:	9302      	str	r3, [sp, #8]
 800f132:	7f3b      	ldrb	r3, [r7, #28]
 800f134:	9301      	str	r3, [sp, #4]
 800f136:	7e3b      	ldrb	r3, [r7, #24]
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	460b      	mov	r3, r1
 800f13c:	68b9      	ldr	r1, [r7, #8]
 800f13e:	f009 ff4b 	bl	8018fd8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f142:	4a08      	ldr	r2, [pc, #32]	; (800f164 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	601a      	str	r2, [r3, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f14c:	619a      	str	r2, [r3, #24]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f152:	61da      	str	r2, [r3, #28]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f158:	621a      	str	r2, [r3, #32]
{
}
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	08025d5c 	.word	0x08025d5c

0800f168 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	889b      	ldrh	r3, [r3, #4]
 800f17c:	0adb      	lsrs	r3, r3, #11
 800f17e:	b29b      	uxth	r3, r3
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	68fa      	ldr	r2, [r7, #12]
 800f184:	4413      	add	r3, r2
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4413      	add	r3, r2
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b086      	sub	sp, #24
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	60f8      	str	r0, [r7, #12]
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	607a      	str	r2, [r7, #4]
 800f1a6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d003      	beq.n	800f1b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	7b1b      	ldrb	r3, [r3, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e023      	b.n	800f202 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff ff7a 	bl	800f0b4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f1c4:	8abb      	ldrh	r3, [r7, #20]
 800f1c6:	82fb      	strh	r3, [r7, #22]
 800f1c8:	8afa      	ldrh	r2, [r7, #22]
 800f1ca:	8abb      	ldrh	r3, [r7, #20]
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	7b09      	ldrb	r1, [r1, #12]
 800f1d0:	440b      	add	r3, r1
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	da14      	bge.n	800f200 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	69da      	ldr	r2, [r3, #28]
 800f1da:	8afb      	ldrh	r3, [r7, #22]
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	4413      	add	r3, r2
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	897a      	ldrh	r2, [r7, #10]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d107      	bne.n	800f1f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	69da      	ldr	r2, [r3, #28]
 800f1ec:	8afb      	ldrh	r3, [r7, #22]
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f1f6:	e004      	b.n	800f202 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f1f8:	8afb      	ldrh	r3, [r7, #22]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	82fb      	strh	r3, [r7, #22]
 800f1fe:	e7e3      	b.n	800f1c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
	...

0800f20c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0
 800f210:	4801      	ldr	r0, [pc, #4]	; (800f218 <__tcf_0+0xc>)
 800f212:	f7ff fecf 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20008504 	.word	0x20008504

0800f21c <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b08a      	sub	sp, #40	; 0x28
 800f220:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f222:	4b15      	ldr	r3, [pc, #84]	; (800f278 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f003 0301 	and.w	r3, r3, #1
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d11f      	bne.n	800f26e <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f22e:	2300      	movs	r3, #0
 800f230:	9309      	str	r3, [sp, #36]	; 0x24
 800f232:	2300      	movs	r3, #0
 800f234:	9308      	str	r3, [sp, #32]
 800f236:	233f      	movs	r3, #63	; 0x3f
 800f238:	9307      	str	r3, [sp, #28]
 800f23a:	4b10      	ldr	r3, [pc, #64]	; (800f27c <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f23c:	9306      	str	r3, [sp, #24]
 800f23e:	4b10      	ldr	r3, [pc, #64]	; (800f280 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f240:	9305      	str	r3, [sp, #20]
 800f242:	2301      	movs	r3, #1
 800f244:	9304      	str	r3, [sp, #16]
 800f246:	2300      	movs	r3, #0
 800f248:	9303      	str	r3, [sp, #12]
 800f24a:	2301      	movs	r3, #1
 800f24c:	9302      	str	r3, [sp, #8]
 800f24e:	2304      	movs	r3, #4
 800f250:	9301      	str	r3, [sp, #4]
 800f252:	2300      	movs	r3, #0
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	230a      	movs	r3, #10
 800f258:	2204      	movs	r2, #4
 800f25a:	490a      	ldr	r1, [pc, #40]	; (800f284 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f25c:	480a      	ldr	r0, [pc, #40]	; (800f288 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f25e:	f7ff ff4d 	bl	800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f262:	4b05      	ldr	r3, [pc, #20]	; (800f278 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f264:	2201      	movs	r2, #1
 800f266:	601a      	str	r2, [r3, #0]
 800f268:	4808      	ldr	r0, [pc, #32]	; (800f28c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f26a:	f015 f9df 	bl	802462c <atexit>
    return Asap_Bold_10_4bpp;
 800f26e:	4b06      	ldr	r3, [pc, #24]	; (800f288 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f270:	4618      	mov	r0, r3
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	20008528 	.word	0x20008528
 800f27c:	0802d01c 	.word	0x0802d01c
 800f280:	08025da8 	.word	0x08025da8
 800f284:	0802d038 	.word	0x0802d038
 800f288:	20008504 	.word	0x20008504
 800f28c:	0800f20d 	.word	0x0800f20d

0800f290 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f290:	b580      	push	{r7, lr}
 800f292:	af00      	add	r7, sp, #0
 800f294:	4801      	ldr	r0, [pc, #4]	; (800f29c <__tcf_0+0xc>)
 800f296:	f7ff fe8d 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	2000852c 	.word	0x2000852c

0800f2a0 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b08a      	sub	sp, #40	; 0x28
 800f2a4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f2a6:	4b15      	ldr	r3, [pc, #84]	; (800f2fc <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f003 0301 	and.w	r3, r3, #1
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d11f      	bne.n	800f2f2 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	9308      	str	r3, [sp, #32]
 800f2ba:	233f      	movs	r3, #63	; 0x3f
 800f2bc:	9307      	str	r3, [sp, #28]
 800f2be:	4b10      	ldr	r3, [pc, #64]	; (800f300 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f2c0:	9306      	str	r3, [sp, #24]
 800f2c2:	4b10      	ldr	r3, [pc, #64]	; (800f304 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f2c4:	9305      	str	r3, [sp, #20]
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	9304      	str	r3, [sp, #16]
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	9303      	str	r3, [sp, #12]
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	9302      	str	r3, [sp, #8]
 800f2d2:	2304      	movs	r3, #4
 800f2d4:	9301      	str	r3, [sp, #4]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9300      	str	r3, [sp, #0]
 800f2da:	230c      	movs	r3, #12
 800f2dc:	221c      	movs	r2, #28
 800f2de:	490a      	ldr	r1, [pc, #40]	; (800f308 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f2e0:	480a      	ldr	r0, [pc, #40]	; (800f30c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f2e2:	f7ff ff0b 	bl	800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f2e6:	4b05      	ldr	r3, [pc, #20]	; (800f2fc <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	601a      	str	r2, [r3, #0]
 800f2ec:	4808      	ldr	r0, [pc, #32]	; (800f310 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f2ee:	f015 f99d 	bl	802462c <atexit>
    return Asap_Bold_12_4bpp;
 800f2f2:	4b06      	ldr	r3, [pc, #24]	; (800f30c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20008550 	.word	0x20008550
 800f300:	0802d020 	.word	0x0802d020
 800f304:	08025dac 	.word	0x08025dac
 800f308:	0802d070 	.word	0x0802d070
 800f30c:	2000852c 	.word	0x2000852c
 800f310:	0800f291 	.word	0x0800f291

0800f314 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f314:	b580      	push	{r7, lr}
 800f316:	af00      	add	r7, sp, #0
 800f318:	4801      	ldr	r0, [pc, #4]	; (800f320 <__tcf_0+0xc>)
 800f31a:	f7ff fe4b 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	20008554 	.word	0x20008554

0800f324 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b08a      	sub	sp, #40	; 0x28
 800f328:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f32a:	4b15      	ldr	r3, [pc, #84]	; (800f380 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f003 0301 	and.w	r3, r3, #1
 800f332:	2b00      	cmp	r3, #0
 800f334:	d11f      	bne.n	800f376 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f336:	2300      	movs	r3, #0
 800f338:	9309      	str	r3, [sp, #36]	; 0x24
 800f33a:	2300      	movs	r3, #0
 800f33c:	9308      	str	r3, [sp, #32]
 800f33e:	2300      	movs	r3, #0
 800f340:	9307      	str	r3, [sp, #28]
 800f342:	4b10      	ldr	r3, [pc, #64]	; (800f384 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f344:	9306      	str	r3, [sp, #24]
 800f346:	4b10      	ldr	r3, [pc, #64]	; (800f388 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f348:	9305      	str	r3, [sp, #20]
 800f34a:	2300      	movs	r3, #0
 800f34c:	9304      	str	r3, [sp, #16]
 800f34e:	2300      	movs	r3, #0
 800f350:	9303      	str	r3, [sp, #12]
 800f352:	2301      	movs	r3, #1
 800f354:	9302      	str	r3, [sp, #8]
 800f356:	2304      	movs	r3, #4
 800f358:	9301      	str	r3, [sp, #4]
 800f35a:	2300      	movs	r3, #0
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	2312      	movs	r3, #18
 800f360:	220d      	movs	r2, #13
 800f362:	490a      	ldr	r1, [pc, #40]	; (800f38c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f364:	480a      	ldr	r0, [pc, #40]	; (800f390 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f366:	f7ff fec9 	bl	800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f36a:	4b05      	ldr	r3, [pc, #20]	; (800f380 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	601a      	str	r2, [r3, #0]
 800f370:	4808      	ldr	r0, [pc, #32]	; (800f394 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f372:	f015 f95b 	bl	802462c <atexit>
    return Asap_Bold_18_4bpp;
 800f376:	4b06      	ldr	r3, [pc, #24]	; (800f390 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f378:	4618      	mov	r0, r3
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	20008578 	.word	0x20008578
 800f384:	0802d024 	.word	0x0802d024
 800f388:	08025db0 	.word	0x08025db0
 800f38c:	0802d1f8 	.word	0x0802d1f8
 800f390:	20008554 	.word	0x20008554
 800f394:	0800f315 	.word	0x0800f315

0800f398 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f398:	b580      	push	{r7, lr}
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	4801      	ldr	r0, [pc, #4]	; (800f3a4 <__tcf_0+0xc>)
 800f39e:	f7ff fe09 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	2000857c 	.word	0x2000857c

0800f3a8 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b08a      	sub	sp, #40	; 0x28
 800f3ac:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f3ae:	4b15      	ldr	r3, [pc, #84]	; (800f404 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f003 0301 	and.w	r3, r3, #1
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d11f      	bne.n	800f3fa <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f3be:	2300      	movs	r3, #0
 800f3c0:	9308      	str	r3, [sp, #32]
 800f3c2:	233f      	movs	r3, #63	; 0x3f
 800f3c4:	9307      	str	r3, [sp, #28]
 800f3c6:	4b10      	ldr	r3, [pc, #64]	; (800f408 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f3c8:	9306      	str	r3, [sp, #24]
 800f3ca:	4b10      	ldr	r3, [pc, #64]	; (800f40c <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f3cc:	9305      	str	r3, [sp, #20]
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	9304      	str	r3, [sp, #16]
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	9303      	str	r3, [sp, #12]
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	9302      	str	r3, [sp, #8]
 800f3da:	2304      	movs	r3, #4
 800f3dc:	9301      	str	r3, [sp, #4]
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	2315      	movs	r3, #21
 800f3e4:	220d      	movs	r2, #13
 800f3e6:	490a      	ldr	r1, [pc, #40]	; (800f410 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f3e8:	480a      	ldr	r0, [pc, #40]	; (800f414 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f3ea:	f7ff fe87 	bl	800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f3ee:	4b05      	ldr	r3, [pc, #20]	; (800f404 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	4808      	ldr	r0, [pc, #32]	; (800f418 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f3f6:	f015 f919 	bl	802462c <atexit>
    return Asap_Bold_21_4bpp;
 800f3fa:	4b06      	ldr	r3, [pc, #24]	; (800f414 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	200085a0 	.word	0x200085a0
 800f408:	0802d028 	.word	0x0802d028
 800f40c:	08025db4 	.word	0x08025db4
 800f410:	0802d2b0 	.word	0x0802d2b0
 800f414:	2000857c 	.word	0x2000857c
 800f418:	0800f399 	.word	0x0800f399

0800f41c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f41c:	b580      	push	{r7, lr}
 800f41e:	af00      	add	r7, sp, #0
 800f420:	4801      	ldr	r0, [pc, #4]	; (800f428 <__tcf_0+0xc>)
 800f422:	f7ff fdc7 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f426:	bd80      	pop	{r7, pc}
 800f428:	200085a4 	.word	0x200085a4

0800f42c <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b08a      	sub	sp, #40	; 0x28
 800f430:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f432:	4b15      	ldr	r3, [pc, #84]	; (800f488 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d11f      	bne.n	800f47e <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f43e:	2300      	movs	r3, #0
 800f440:	9309      	str	r3, [sp, #36]	; 0x24
 800f442:	2300      	movs	r3, #0
 800f444:	9308      	str	r3, [sp, #32]
 800f446:	233f      	movs	r3, #63	; 0x3f
 800f448:	9307      	str	r3, [sp, #28]
 800f44a:	4b10      	ldr	r3, [pc, #64]	; (800f48c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f44c:	9306      	str	r3, [sp, #24]
 800f44e:	4b10      	ldr	r3, [pc, #64]	; (800f490 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f450:	9305      	str	r3, [sp, #20]
 800f452:	2301      	movs	r3, #1
 800f454:	9304      	str	r3, [sp, #16]
 800f456:	2300      	movs	r3, #0
 800f458:	9303      	str	r3, [sp, #12]
 800f45a:	2301      	movs	r3, #1
 800f45c:	9302      	str	r3, [sp, #8]
 800f45e:	2304      	movs	r3, #4
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	2300      	movs	r3, #0
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	231e      	movs	r3, #30
 800f468:	220d      	movs	r2, #13
 800f46a:	490a      	ldr	r1, [pc, #40]	; (800f494 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f46c:	480a      	ldr	r0, [pc, #40]	; (800f498 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f46e:	f7ff fe45 	bl	800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f472:	4b05      	ldr	r3, [pc, #20]	; (800f488 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f474:	2201      	movs	r2, #1
 800f476:	601a      	str	r2, [r3, #0]
 800f478:	4808      	ldr	r0, [pc, #32]	; (800f49c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f47a:	f015 f8d7 	bl	802462c <atexit>
    return Asap_Bold_30_4bpp;
 800f47e:	4b06      	ldr	r3, [pc, #24]	; (800f498 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f480:	4618      	mov	r0, r3
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	200085c8 	.word	0x200085c8
 800f48c:	0802d02c 	.word	0x0802d02c
 800f490:	08025db8 	.word	0x08025db8
 800f494:	0802d368 	.word	0x0802d368
 800f498:	200085a4 	.word	0x200085a4
 800f49c:	0800f41d 	.word	0x0800f41d

0800f4a0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	4801      	ldr	r0, [pc, #4]	; (800f4ac <__tcf_0+0xc>)
 800f4a6:	f7ff fd85 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	200085cc 	.word	0x200085cc

0800f4b0 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b08a      	sub	sp, #40	; 0x28
 800f4b4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f4b6:	4b15      	ldr	r3, [pc, #84]	; (800f50c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f003 0301 	and.w	r3, r3, #1
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d11f      	bne.n	800f502 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	9308      	str	r3, [sp, #32]
 800f4ca:	233f      	movs	r3, #63	; 0x3f
 800f4cc:	9307      	str	r3, [sp, #28]
 800f4ce:	4b10      	ldr	r3, [pc, #64]	; (800f510 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f4d0:	9306      	str	r3, [sp, #24]
 800f4d2:	4b10      	ldr	r3, [pc, #64]	; (800f514 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f4d4:	9305      	str	r3, [sp, #20]
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	9304      	str	r3, [sp, #16]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	9303      	str	r3, [sp, #12]
 800f4de:	2301      	movs	r3, #1
 800f4e0:	9302      	str	r3, [sp, #8]
 800f4e2:	2304      	movs	r3, #4
 800f4e4:	9301      	str	r3, [sp, #4]
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	2328      	movs	r3, #40	; 0x28
 800f4ec:	220c      	movs	r2, #12
 800f4ee:	490a      	ldr	r1, [pc, #40]	; (800f518 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f4f0:	480a      	ldr	r0, [pc, #40]	; (800f51c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f4f2:	f7ff fe03 	bl	800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f4f6:	4b05      	ldr	r3, [pc, #20]	; (800f50c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	601a      	str	r2, [r3, #0]
 800f4fc:	4808      	ldr	r0, [pc, #32]	; (800f520 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f4fe:	f015 f895 	bl	802462c <atexit>
    return Asap_Bold_40_4bpp;
 800f502:	4b06      	ldr	r3, [pc, #24]	; (800f51c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f504:	4618      	mov	r0, r3
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	200085f0 	.word	0x200085f0
 800f510:	0802d030 	.word	0x0802d030
 800f514:	08025dbc 	.word	0x08025dbc
 800f518:	0802d420 	.word	0x0802d420
 800f51c:	200085cc 	.word	0x200085cc
 800f520:	0800f4a1 	.word	0x0800f4a1

0800f524 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f524:	b580      	push	{r7, lr}
 800f526:	af00      	add	r7, sp, #0
 800f528:	4801      	ldr	r0, [pc, #4]	; (800f530 <__tcf_0+0xc>)
 800f52a:	f7ff fd43 	bl	800efb4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	200085f4 	.word	0x200085f4

0800f534 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b08a      	sub	sp, #40	; 0x28
 800f538:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f53a:	4b15      	ldr	r3, [pc, #84]	; (800f590 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f003 0301 	and.w	r3, r3, #1
 800f542:	2b00      	cmp	r3, #0
 800f544:	d11f      	bne.n	800f586 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f546:	2300      	movs	r3, #0
 800f548:	9309      	str	r3, [sp, #36]	; 0x24
 800f54a:	2300      	movs	r3, #0
 800f54c:	9308      	str	r3, [sp, #32]
 800f54e:	233f      	movs	r3, #63	; 0x3f
 800f550:	9307      	str	r3, [sp, #28]
 800f552:	4b10      	ldr	r3, [pc, #64]	; (800f594 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f554:	9306      	str	r3, [sp, #24]
 800f556:	4b10      	ldr	r3, [pc, #64]	; (800f598 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f558:	9305      	str	r3, [sp, #20]
 800f55a:	2300      	movs	r3, #0
 800f55c:	9304      	str	r3, [sp, #16]
 800f55e:	2300      	movs	r3, #0
 800f560:	9303      	str	r3, [sp, #12]
 800f562:	2301      	movs	r3, #1
 800f564:	9302      	str	r3, [sp, #8]
 800f566:	2304      	movs	r3, #4
 800f568:	9301      	str	r3, [sp, #4]
 800f56a:	2300      	movs	r3, #0
 800f56c:	9300      	str	r3, [sp, #0]
 800f56e:	233c      	movs	r3, #60	; 0x3c
 800f570:	220c      	movs	r2, #12
 800f572:	490a      	ldr	r1, [pc, #40]	; (800f59c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f574:	480a      	ldr	r0, [pc, #40]	; (800f5a0 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f576:	f7ff fdc1 	bl	800f0fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f57a:	4b05      	ldr	r3, [pc, #20]	; (800f590 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f57c:	2201      	movs	r2, #1
 800f57e:	601a      	str	r2, [r3, #0]
 800f580:	4808      	ldr	r0, [pc, #32]	; (800f5a4 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f582:	f015 f853 	bl	802462c <atexit>
    return Asap_Bold_60_4bpp;
 800f586:	4b06      	ldr	r3, [pc, #24]	; (800f5a0 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f588:	4618      	mov	r0, r3
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20008618 	.word	0x20008618
 800f594:	0802d034 	.word	0x0802d034
 800f598:	08025dc0 	.word	0x08025dc0
 800f59c:	0802d4c8 	.word	0x0802d4c8
 800f5a0:	200085f4 	.word	0x200085f4
 800f5a4:	0800f525 	.word	0x0800f525

0800f5a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
    {
    }
 800f5ca:	bf00      	nop
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
    {
    }
 800f5e0:	bf00      	nop
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    {
    }
 800f5f6:	bf00      	nop
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
 800f60a:	460b      	mov	r3, r1
 800f60c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f60e:	bf00      	nop
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr

0800f61a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f61a:	b480      	push	{r7}
 800f61c:	b083      	sub	sp, #12
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
    {
    }
 800f622:	bf00      	nop
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f62e:	b480      	push	{r7}
 800f630:	b083      	sub	sp, #12
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
    {
    }
 800f636:	bf00      	nop
 800f638:	370c      	adds	r7, #12
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
	...

0800f644 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
    {
 800f64c:	4a04      	ldr	r2, [pc, #16]	; (800f660 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	601a      	str	r2, [r3, #0]
    }
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr
 800f660:	08025eb4 	.word	0x08025eb4

0800f664 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
    }
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f7ff ffe9 	bl	800f644 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f672:	2104      	movs	r1, #4
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f014 ff90 	bl	802459a <_ZdlPvj>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4618      	mov	r0, r3
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f68c:	4a07      	ldr	r2, [pc, #28]	; (800f6ac <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	605a      	str	r2, [r3, #4]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr
 800f6ac:	08025e94 	.word	0x08025e94

0800f6b0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
    {
 800f6b8:	4a04      	ldr	r2, [pc, #16]	; (800f6cc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	601a      	str	r2, [r3, #0]
    }
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	08025e94 	.word	0x08025e94

0800f6d0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
    }
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff ffe9 	bl	800f6b0 <_ZN8touchgfx10TransitionD1Ev>
 800f6de:	210c      	movs	r1, #12
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f014 ff5a 	bl	802459a <_ZdlPvj>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	bf00      	nop
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	bf00      	nop
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f718:	b480      	push	{r7}
 800f71a:	b083      	sub	sp, #12
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	bf00      	nop
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	605a      	str	r2, [r3, #4]
    }
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	460b      	mov	r3, r1
 800f752:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
    {
 800f768:	4a04      	ldr	r2, [pc, #16]	; (800f77c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	601a      	str	r2, [r3, #0]
    }
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr
 800f77c:	08025e7c 	.word	0x08025e7c

0800f780 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
    }
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7ff ffe9 	bl	800f760 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f78e:	2104      	movs	r1, #4
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f014 ff02 	bl	802459a <_ZdlPvj>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f7a0:	b480      	push	{r7}
 800f7a2:	af00      	add	r7, sp, #0
    {
        return instance;
 800f7a4:	4b03      	ldr	r3, [pc, #12]	; (800f7b4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
    }
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	2000bc68 	.word	0x2000bc68

0800f7b8 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f7b8:	b480      	push	{r7}
 800f7ba:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	; (800f7ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d008      	beq.n	800f7da <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f7c8:	4b08      	ldr	r3, [pc, #32]	; (800f7ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d003      	beq.n	800f7da <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f7d2:	4b06      	ldr	r3, [pc, #24]	; (800f7ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7d8:	e002      	b.n	800f7e0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f7da:	4b04      	ldr	r3, [pc, #16]	; (800f7ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	2000bc68 	.word	0x2000bc68

0800f7f0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	4a05      	ldr	r2, [pc, #20]	; (800f810 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	f7ff ff1f 	bl	800f644 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4618      	mov	r0, r3
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	08027e9c 	.word	0x08027e9c

0800f814 <_ZN8touchgfx11ApplicationD0Ev>:
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff ffe7 	bl	800f7f0 <_ZN8touchgfx11ApplicationD1Ev>
 800f822:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f014 feb7 	bl	802459a <_ZdlPvj>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
	...

0800f838 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4618      	mov	r0, r3
 800f844:	f008 ff02 	bl	801864c <_ZN8touchgfx11ApplicationC1Ev>
 800f848:	4a09      	ldr	r2, [pc, #36]	; (800f870 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	601a      	str	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4a04      	ldr	r2, [pc, #16]	; (800f874 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f862:	6013      	str	r3, [r2, #0]
    }
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4618      	mov	r0, r3
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	08025e40 	.word	0x08025e40
 800f874:	2000bcf4 	.word	0x2000bcf4

0800f878 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	4a05      	ldr	r2, [pc, #20]	; (800f898 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	601a      	str	r2, [r3, #0]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	f7ff ffb1 	bl	800f7f0 <_ZN8touchgfx11ApplicationD1Ev>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4618      	mov	r0, r3
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	08025e40 	.word	0x08025e40

0800f89c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7ff ffe7 	bl	800f878 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f8aa:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f014 fe73 	bl	802459a <_ZdlPvj>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 f804 	bl	800f8d4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f8cc:	bf00      	nop
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d00f      	beq.n	800f906 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	330c      	adds	r3, #12
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4610      	mov	r0, r2
 800f8fa:	4798      	blx	r3
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f902:	2301      	movs	r3, #1
 800f904:	e000      	b.n	800f908 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f906:	2300      	movs	r3, #0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00e      	beq.n	800f92a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	3308      	adds	r3, #8
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4610      	mov	r0, r2
 800f920:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800f92a:	bf00      	nop
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b084      	sub	sp, #16
 800f936:	af00      	add	r7, sp, #0
 800f938:	60f8      	str	r0, [r7, #12]
 800f93a:	60b9      	str	r1, [r7, #8]
 800f93c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800f93e:	f008 fe63 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 800f942:	4603      	mov	r3, r0
 800f944:	4618      	mov	r0, r3
 800f946:	f008 fe65 	bl	8018614 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d008      	beq.n	800f964 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	330c      	adds	r3, #12
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4610      	mov	r0, r2
 800f962:	4798      	blx	r3
    }
    if (*currentTrans)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d007      	beq.n	800f97c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4610      	mov	r0, r2
 800f97a:	4798      	blx	r3
    }
    if (*currentScreen)
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d008      	beq.n	800f996 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3314      	adds	r3, #20
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4610      	mov	r0, r2
 800f994:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d008      	beq.n	800f9b0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	3304      	adds	r3, #4
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	4798      	blx	r3
    }
    if (*currentScreen)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d007      	beq.n	800f9c8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d008      	beq.n	800f9e2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3308      	adds	r3, #8
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4610      	mov	r0, r2
 800f9e0:	4798      	blx	r3
    }
}
 800f9e2:	bf00      	nop
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b084      	sub	sp, #16
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	60f8      	str	r0, [r7, #12]
 800f9f2:	60b9      	str	r1, [r7, #8]
 800f9f4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	330c      	adds	r3, #12
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	4798      	blx	r3
    newPresenter->activate();
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68b8      	ldr	r0, [r7, #8]
 800fa0a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fa0c:	6879      	ldr	r1, [r7, #4]
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f009 ff0a 	bl	8019828 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3310      	adds	r3, #16
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	4798      	blx	r3

    Application::getInstance()->draw();
 800fa20:	f008 fdf2 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 800fa24:	4602      	mov	r2, r0
 800fa26:	6813      	ldr	r3, [r2, #0]
 800fa28:	3328      	adds	r3, #40	; 0x28
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4610      	mov	r0, r2
 800fa2e:	4798      	blx	r3
}
 800fa30:	bf00      	nop
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	601a      	str	r2, [r3, #0]
    }
 800fa48:	bf00      	nop
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	4a08      	ldr	r2, [pc, #32]	; (800fa80 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f000 fa5f 	bl	800ff2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff ff01 	bl	800f878 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	08025dec 	.word	0x08025dec

0800fa84 <_ZN23FrontendApplicationBaseD0Ev>:
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff ffe1 	bl	800fa54 <_ZN23FrontendApplicationBaseD1Ev>
 800fa92:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f014 fd7f 	bl	802459a <_ZdlPvj>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
	...

0800faa8 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7ff fde6 	bl	800f684 <_ZN8touchgfx10TransitionC1Ev>
 800fab8:	4a03      	ldr	r2, [pc, #12]	; (800fac8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	08025dcc 	.word	0x08025dcc

0800facc <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	4a05      	ldr	r2, [pc, #20]	; (800faec <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff fde7 	bl	800f6b0 <_ZN8touchgfx10TransitionD1Ev>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	08025dcc 	.word	0x08025dcc

0800faf0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7ff ffe7 	bl	800facc <_ZN8touchgfx12NoTransitionD1Ev>
 800fafe:	210c      	movs	r1, #12
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f014 fd4a 	bl	802459a <_ZdlPvj>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	721a      	strb	r2, [r3, #8]
    }
 800fb1e:	bf00      	nop
 800fb20:	370c      	adds	r7, #12
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fb2a:	b480      	push	{r7}
 800fb2c:	b083      	sub	sp, #12
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	605a      	str	r2, [r3, #4]
    }
 800fb3a:	bf00      	nop
 800fb3c:	370c      	adds	r7, #12
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
	...

0800fb48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7ff fe6e 	bl	800f838 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fb5c:	4a13      	ldr	r2, [pc, #76]	; (800fbac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f000 f89f 	bl	800fcac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fb7e:	f7ff fe0f 	bl	800f7a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fb82:	4602      	mov	r2, r0
 800fb84:	6813      	ldr	r3, [r2, #0]
 800fb86:	3308      	adds	r3, #8
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fb90:	2000      	movs	r0, #0
 800fb92:	f002 fc63 	bl	801245c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fb96:	f7ff fe0f 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f00e fa0a 	bl	801dfb6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	08025dec 	.word	0x08025dec

0800fbb0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff ffe9 	bl	800fbb0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	605a      	str	r2, [r3, #4]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	3308      	adds	r3, #8
 800fbec:	3208      	adds	r2, #8
 800fbee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbf2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800fc00:	b590      	push	{r4, r7, lr}
 800fc02:	b089      	sub	sp, #36	; 0x24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fc0e:	4b10      	ldr	r3, [pc, #64]	; (800fc50 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fc10:	61bb      	str	r3, [r7, #24]
 800fc12:	2300      	movs	r3, #0
 800fc14:	61fb      	str	r3, [r7, #28]
 800fc16:	f107 0008 	add.w	r0, r7, #8
 800fc1a:	f107 0318 	add.w	r3, r7, #24
 800fc1e:	cb0c      	ldmia	r3, {r2, r3}
 800fc20:	6879      	ldr	r1, [r7, #4]
 800fc22:	f000 f85f 	bl	800fce4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fc26:	f107 0308 	add.w	r3, r7, #8
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f7ff ffcb 	bl	800fbc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fc32:	f107 0308 	add.w	r3, r7, #8
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 f978 	bl	800ff2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fc48:	bf00      	nop
 800fc4a:	3724      	adds	r7, #36	; 0x24
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd90      	pop	{r4, r7, pc}
 800fc50:	0800fc55 	.word	0x0800fc55

0800fc54 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af02      	add	r7, sp, #8
 800fc5a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fc68:	461a      	mov	r2, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	4b04      	ldr	r3, [pc, #16]	; (800fc84 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800fc74:	4804      	ldr	r0, [pc, #16]	; (800fc88 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800fc76:	f000 f855 	bl	800fd24 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fc7a:	bf00      	nop
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	2000bce8 	.word	0x2000bce8
 800fc88:	2000bce4 	.word	0x2000bce4

0800fc8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	4a04      	ldr	r2, [pc, #16]	; (800fca8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	08025e7c 	.word	0x08025e7c

0800fcac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7ff ffe8 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fcbc:	4a08      	ldr	r2, [pc, #32]	; (800fce0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	601a      	str	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	605a      	str	r2, [r3, #4]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	609a      	str	r2, [r3, #8]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	60da      	str	r2, [r3, #12]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3708      	adds	r7, #8
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
 800fcde:	bf00      	nop
 800fce0:	08025e28 	.word	0x08025e28

0800fce4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	4639      	mov	r1, r7
 800fcf0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7ff ffc8 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fcfc:	4a08      	ldr	r2, [pc, #32]	; (800fd20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	68ba      	ldr	r2, [r7, #8]
 800fd06:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	3308      	adds	r3, #8
 800fd0c:	463a      	mov	r2, r7
 800fd0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3710      	adds	r7, #16
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	08025e28 	.word	0x08025e28

0800fd24 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fd24:	b590      	push	{r4, r7, lr}
 800fd26:	b089      	sub	sp, #36	; 0x24
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	689a      	ldr	r2, [r3, #8]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	3320      	adds	r3, #32
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4610      	mov	r0, r2
 800fd42:	4798      	blx	r3
 800fd44:	4602      	mov	r2, r0
 800fd46:	f242 732b 	movw	r3, #10027	; 0x272b
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d805      	bhi.n	800fd5a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800fd4e:	4b4e      	ldr	r3, [pc, #312]	; (800fe88 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800fd50:	4a4e      	ldr	r2, [pc, #312]	; (800fe8c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd52:	21c2      	movs	r1, #194	; 0xc2
 800fd54:	484e      	ldr	r0, [pc, #312]	; (800fe90 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd56:	f014 fc4b 	bl	80245f0 <__assert_func>
 800fd5a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	685a      	ldr	r2, [r3, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	3320      	adds	r3, #32
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4610      	mov	r0, r2
 800fd6c:	4798      	blx	r3
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b0f      	cmp	r3, #15
 800fd72:	d805      	bhi.n	800fd80 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800fd74:	4b47      	ldr	r3, [pc, #284]	; (800fe94 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800fd76:	4a45      	ldr	r2, [pc, #276]	; (800fe8c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd78:	21c3      	movs	r1, #195	; 0xc3
 800fd7a:	4845      	ldr	r0, [pc, #276]	; (800fe90 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd7c:	f014 fc38 	bl	80245f0 <__assert_func>
 800fd80:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	68da      	ldr	r2, [r3, #12]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	3320      	adds	r3, #32
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4610      	mov	r0, r2
 800fd92:	4798      	blx	r3
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b0b      	cmp	r3, #11
 800fd98:	d805      	bhi.n	800fda6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800fd9a:	4b3f      	ldr	r3, [pc, #252]	; (800fe98 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800fd9c:	4a3b      	ldr	r2, [pc, #236]	; (800fe8c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd9e:	21c4      	movs	r1, #196	; 0xc4
 800fda0:	483b      	ldr	r0, [pc, #236]	; (800fe90 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fda2:	f014 fc25 	bl	80245f0 <__assert_func>
 800fda6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800fda8:	683a      	ldr	r2, [r7, #0]
 800fdaa:	68b9      	ldr	r1, [r7, #8]
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f7ff fdc0 	bl	800f932 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f000 f86f 	bl	800fe9c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	200c      	movs	r0, #12
 800fdc4:	f7ff fbf0 	bl	800f5a8 <_ZnwjPv>
 800fdc8:	4604      	mov	r4, r0
 800fdca:	2c00      	cmp	r4, #0
 800fdcc:	d004      	beq.n	800fdd8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7ff fe6a 	bl	800faa8 <_ZN8touchgfx12NoTransitionC1Ev>
 800fdd4:	4623      	mov	r3, r4
 800fdd6:	e000      	b.n	800fdda <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800fdd8:	4623      	mov	r3, r4
 800fdda:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	2100      	movs	r1, #0
 800fde2:	4618      	mov	r0, r3
 800fde4:	f000 f86d 	bl	800fec2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800fde8:	4603      	mov	r3, r0
 800fdea:	4619      	mov	r1, r3
 800fdec:	f242 702c 	movw	r0, #10028	; 0x272c
 800fdf0:	f7ff fbda 	bl	800f5a8 <_ZnwjPv>
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	2c00      	cmp	r4, #0
 800fdf8:	d004      	beq.n	800fe04 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f002 fd8c 	bl	8012918 <_ZN8MainViewC1Ev>
 800fe00:	4623      	mov	r3, r4
 800fe02:	e000      	b.n	800fe06 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800fe04:	4623      	mov	r3, r4
 800fe06:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 f86a 	bl	800fee8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800fe14:	4603      	mov	r3, r0
 800fe16:	4619      	mov	r1, r3
 800fe18:	2010      	movs	r0, #16
 800fe1a:	f7ff fbc5 	bl	800f5a8 <_ZnwjPv>
 800fe1e:	4604      	mov	r4, r0
 800fe20:	2c00      	cmp	r4, #0
 800fe22:	d005      	beq.n	800fe30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800fe24:	69b9      	ldr	r1, [r7, #24]
 800fe26:	4620      	mov	r0, r4
 800fe28:	f002 fcdc 	bl	80127e4 <_ZN13MainPresenterC1ER8MainView>
 800fe2c:	4623      	mov	r3, r4
 800fe2e:	e000      	b.n	800fe32 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800fe30:	4623      	mov	r3, r4
 800fe32:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	69fa      	ldr	r2, [r7, #28]
 800fe38:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	697a      	ldr	r2, [r7, #20]
 800fe3e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	69ba      	ldr	r2, [r7, #24]
 800fe44:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d002      	beq.n	800fe52 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	3304      	adds	r3, #4
 800fe50:	e000      	b.n	800fe54 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800fe52:	2300      	movs	r3, #0
 800fe54:	4619      	mov	r1, r3
 800fe56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe58:	f7ff fdee 	bl	800fa38 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	3304      	adds	r3, #4
 800fe60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7ff fe61 	bl	800fb2a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	6979      	ldr	r1, [r7, #20]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f000 f84e 	bl	800ff0e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800fe72:	69fa      	ldr	r2, [r7, #28]
 800fe74:	6979      	ldr	r1, [r7, #20]
 800fe76:	69b8      	ldr	r0, [r7, #24]
 800fe78:	f7ff fdb7 	bl	800f9ea <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800fe7c:	697b      	ldr	r3, [r7, #20]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3724      	adds	r7, #36	; 0x24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd90      	pop	{r4, r7, pc}
 800fe86:	bf00      	nop
 800fe88:	08025754 	.word	0x08025754
 800fe8c:	08025ed4 	.word	0x08025ed4
 800fe90:	080257e4 	.word	0x080257e4
 800fe94:	08025828 	.word	0x08025828
 800fe98:	080258cc 	.word	0x080258cc

0800fe9c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	460b      	mov	r3, r1
 800fea6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	3324      	adds	r3, #36	; 0x24
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	887a      	ldrh	r2, [r7, #2]
 800feb2:	4611      	mov	r1, r2
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	4798      	blx	r3
 800feb8:	4603      	mov	r3, r0
    }
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b082      	sub	sp, #8
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	460b      	mov	r3, r1
 800fecc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	3324      	adds	r3, #36	; 0x24
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	887a      	ldrh	r2, [r7, #2]
 800fed8:	4611      	mov	r1, r2
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	4798      	blx	r3
 800fede:	4603      	mov	r3, r0
    }
 800fee0:	4618      	mov	r0, r3
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	3324      	adds	r3, #36	; 0x24
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	887a      	ldrh	r2, [r7, #2]
 800fefe:	4611      	mov	r1, r2
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	4798      	blx	r3
 800ff04:	4603      	mov	r3, r0
    }
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800ff0e:	b480      	push	{r7}
 800ff10:	b083      	sub	sp, #12
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	683a      	ldr	r2, [r7, #0]
 800ff1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ff1e:	bf00      	nop
 800ff20:	370c      	adds	r7, #12
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr
	...

0800ff2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	4a05      	ldr	r2, [pc, #20]	; (800ff4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7ff fc0f 	bl	800f760 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4618      	mov	r0, r3
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	08025e28 	.word	0x08025e28

0800ff50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff ffe7 	bl	800ff2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ff5e:	2110      	movs	r1, #16
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f014 fb1a 	bl	802459a <_ZdlPvj>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	68d2      	ldr	r2, [r2, #12]
 800ff80:	1052      	asrs	r2, r2, #1
 800ff82:	1899      	adds	r1, r3, r2
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	f003 0301 	and.w	r3, r3, #1
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d102      	bne.n	800ff96 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	e00a      	b.n	800ffac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	68d2      	ldr	r2, [r2, #12]
 800ff9e:	1052      	asrs	r2, r2, #1
 800ffa0:	4413      	add	r3, r2
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	6892      	ldr	r2, [r2, #8]
 800ffa8:	4413      	add	r3, r2
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4608      	mov	r0, r1
 800ffae:	4798      	blx	r3
    }
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d010      	beq.n	800ffea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d107      	bne.n	800ffe0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	f003 0301 	and.w	r3, r3, #1
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d101      	bne.n	800ffe0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e000      	b.n	800ffe2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d001      	beq.n	800ffea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e000      	b.n	800ffec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800ffea:	2300      	movs	r3, #0
    }
 800ffec:	4618      	mov	r0, r3
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr

0800fff8 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	601a      	str	r2, [r3, #0]
    }
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4618      	mov	r0, r3
 801000c:	370c      	adds	r7, #12
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr

08010016 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8010016:	b480      	push	{r7}
 8010018:	b083      	sub	sp, #12
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	80da      	strh	r2, [r3, #6]
    }
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010044:	b480      	push	{r7}
 8010046:	b085      	sub	sp, #20
 8010048:	af00      	add	r7, sp, #0
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	4608      	mov	r0, r1
 801004e:	4611      	mov	r1, r2
 8010050:	461a      	mov	r2, r3
 8010052:	4603      	mov	r3, r0
 8010054:	817b      	strh	r3, [r7, #10]
 8010056:	460b      	mov	r3, r1
 8010058:	813b      	strh	r3, [r7, #8]
 801005a:	4613      	mov	r3, r2
 801005c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	897a      	ldrh	r2, [r7, #10]
 8010062:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	893a      	ldrh	r2, [r7, #8]
 8010068:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	88fa      	ldrh	r2, [r7, #6]
 801006e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	8b3a      	ldrh	r2, [r7, #24]
 8010074:	80da      	strh	r2, [r3, #6]
    }
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	4618      	mov	r0, r3
 801007a:	3714      	adds	r7, #20
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	460b      	mov	r3, r1
 801008e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	887a      	ldrh	r2, [r7, #2]
 8010094:	801a      	strh	r2, [r3, #0]
    {
    }
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af02      	add	r7, sp, #8
 80100aa:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 80100ac:	4a13      	ldr	r2, [pc, #76]	; (80100fc <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	1d18      	adds	r0, r3, #4
 80100b6:	2300      	movs	r3, #0
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	2300      	movs	r3, #0
 80100bc:	2200      	movs	r2, #0
 80100be:	2100      	movs	r1, #0
 80100c0:	f7ff ffc0 	bl	8010044 <_ZN8touchgfx4RectC1Essss>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	330c      	adds	r3, #12
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7ff ffa4 	bl	8010016 <_ZN8touchgfx4RectC1Ev>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	615a      	str	r2, [r3, #20]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	619a      	str	r2, [r3, #24]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	61da      	str	r2, [r3, #28]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4618      	mov	r0, r3
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	08027fd4 	.word	0x08027fd4

08010100 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	4a04      	ldr	r2, [pc, #16]	; (801011c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4618      	mov	r0, r3
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr
 801011c:	08027fd4 	.word	0x08027fd4

08010120 <_ZN8touchgfx8DrawableD0Ev>:
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7ff ffe9 	bl	8010100 <_ZN8touchgfx8DrawableD1Ev>
 801012e:	2128      	movs	r1, #40	; 0x28
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f014 fa32 	bl	802459a <_ZdlPvj>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	4608      	mov	r0, r1
 801014a:	4611      	mov	r1, r2
 801014c:	461a      	mov	r2, r3
 801014e:	4603      	mov	r3, r0
 8010150:	817b      	strh	r3, [r7, #10]
 8010152:	460b      	mov	r3, r1
 8010154:	813b      	strh	r3, [r7, #8]
 8010156:	4613      	mov	r3, r2
 8010158:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	3334      	adds	r3, #52	; 0x34
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010166:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	4798      	blx	r3
        setWidth(width);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	3338      	adds	r3, #56	; 0x38
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801017a:	4611      	mov	r1, r2
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	4798      	blx	r3
        setHeight(height);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	333c      	adds	r3, #60	; 0x3c
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801018c:	4611      	mov	r1, r2
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	4798      	blx	r3
    }
 8010192:	bf00      	nop
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 801019a:	b480      	push	{r7}
 801019c:	b083      	sub	sp, #12
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	460b      	mov	r3, r1
 80101a4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	887a      	ldrh	r2, [r7, #2]
 80101aa:	809a      	strh	r2, [r3, #4]
    }
 80101ac:	bf00      	nop
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr

080101b8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	460b      	mov	r3, r1
 80101c2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	887a      	ldrh	r2, [r7, #2]
 80101c8:	80da      	strh	r2, [r3, #6]
    }
 80101ca:	bf00      	nop
 80101cc:	370c      	adds	r7, #12
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr

080101d6 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b082      	sub	sp, #8
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	460b      	mov	r3, r1
 80101e0:	807b      	strh	r3, [r7, #2]
 80101e2:	4613      	mov	r3, r2
 80101e4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	332c      	adds	r3, #44	; 0x2c
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80101f2:	4611      	mov	r1, r2
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	4798      	blx	r3
        setY(y);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	3330      	adds	r3, #48	; 0x30
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010204:	4611      	mov	r1, r2
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	4798      	blx	r3
    }
 801020a:	bf00      	nop
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8010212:	b480      	push	{r7}
 8010214:	b083      	sub	sp, #12
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	460b      	mov	r3, r1
 801021c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	887a      	ldrh	r2, [r7, #2]
 8010222:	811a      	strh	r2, [r3, #8]
    }
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	460b      	mov	r3, r1
 801023a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	887a      	ldrh	r2, [r7, #2]
 8010240:	815a      	strh	r2, [r3, #10]
    }
 8010242:	bf00      	nop
 8010244:	370c      	adds	r7, #12
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801024e:	b480      	push	{r7}
 8010250:	b083      	sub	sp, #12
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	bf00      	nop
 8010258:	370c      	adds	r7, #12
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr

08010262 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010262:	b480      	push	{r7}
 8010264:	b083      	sub	sp, #12
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	6039      	str	r1, [r7, #0]
 801026c:	bf00      	nop
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
 8010282:	bf00      	nop
 8010284:	370c      	adds	r7, #12
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801028e:	b480      	push	{r7}
 8010290:	b083      	sub	sp, #12
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
 8010296:	6039      	str	r1, [r7, #0]
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	460b      	mov	r3, r1
 80102c2:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	78fa      	ldrb	r2, [r7, #3]
 80102c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80102cc:	bf00      	nop
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80102e6:	4618      	mov	r0, r3
 80102e8:	370c      	adds	r7, #12
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80102f2:	b480      	push	{r7}
 80102f4:	b083      	sub	sp, #12
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010300:	4618      	mov	r0, r3
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	460b      	mov	r3, r1
 8010316:	807b      	strh	r3, [r7, #2]
 8010318:	4613      	mov	r3, r2
 801031a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3354      	adds	r3, #84	; 0x54
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	8879      	ldrh	r1, [r7, #2]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801032c:	b292      	uxth	r2, r2
 801032e:	1a8a      	subs	r2, r1, r2
 8010330:	b292      	uxth	r2, r2
 8010332:	b210      	sxth	r0, r2
 8010334:	8839      	ldrh	r1, [r7, #0]
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801033c:	b292      	uxth	r2, r2
 801033e:	1a8a      	subs	r2, r1, r2
 8010340:	b292      	uxth	r2, r2
 8010342:	b212      	sxth	r2, r2
 8010344:	4601      	mov	r1, r0
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	4798      	blx	r3
    }
 801034a:	bf00      	nop
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010352:	b480      	push	{r7}
 8010354:	b083      	sub	sp, #12
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010360:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010368:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010370:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010372:	bf00      	nop
 8010374:	370c      	adds	r7, #12
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr

0801037e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801037e:	b580      	push	{r7, lr}
 8010380:	b084      	sub	sp, #16
 8010382:	af00      	add	r7, sp, #0
 8010384:	60f8      	str	r0, [r7, #12]
 8010386:	60b9      	str	r1, [r7, #8]
 8010388:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f7ff ffe1 	bl	8010352 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	601a      	str	r2, [r3, #0]
    }
 801039e:	bf00      	nop
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	4a05      	ldr	r2, [pc, #20]	; (80103c8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7ff fea1 	bl	8010100 <_ZN8touchgfx8DrawableD1Ev>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	08026da0 	.word	0x08026da0

080103cc <_ZN8touchgfx9ContainerD0Ev>:
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7ff ffe7 	bl	80103a8 <_ZN8touchgfx9ContainerD1Ev>
 80103da:	212c      	movs	r1, #44	; 0x2c
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f014 f8dc 	bl	802459a <_ZdlPvj>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	4a06      	ldr	r2, [pc, #24]	; (8010410 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	601a      	str	r2, [r3, #0]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	3304      	adds	r3, #4
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff ffd2 	bl	80103a8 <_ZN8touchgfx9ContainerD1Ev>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4618      	mov	r0, r3
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	080280cc 	.word	0x080280cc

08010414 <_ZN8touchgfx6ScreenD0Ev>:
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7ff ffe5 	bl	80103ec <_ZN8touchgfx6ScreenD1Ev>
 8010422:	213c      	movs	r1, #60	; 0x3c
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f014 f8b8 	bl	802459a <_ZdlPvj>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	4618      	mov	r0, r3
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010434:	b480      	push	{r7}
 8010436:	b083      	sub	sp, #12
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	bf00      	nop
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	bf00      	nop
 8010452:	370c      	adds	r7, #12
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    {
    }
 8010478:	bf00      	nop
 801047a:	370c      	adds	r7, #12
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	460b      	mov	r3, r1
 801048e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010490:	bf00      	nop
 8010492:	370c      	adds	r7, #12
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr

0801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	3304      	adds	r3, #4
 80104aa:	6839      	ldr	r1, [r7, #0]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f004 ff0f 	bl	80152d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80104b2:	bf00      	nop
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
	...

080104bc <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff fdec 	bl	80100a4 <_ZN8touchgfx8DrawableC1Ev>
 80104cc:	4a03      	ldr	r2, [pc, #12]	; (80104dc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	601a      	str	r2, [r3, #0]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4618      	mov	r0, r3
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	080260c0 	.word	0x080260c0

080104e0 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	4a05      	ldr	r2, [pc, #20]	; (8010500 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	601a      	str	r2, [r3, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7ff fe05 	bl	8010100 <_ZN8touchgfx8DrawableD1Ev>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4618      	mov	r0, r3
 80104fa:	3708      	adds	r7, #8
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	080260c0 	.word	0x080260c0

08010504 <_ZN8touchgfx6WidgetD0Ev>:
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7ff ffe7 	bl	80104e0 <_ZN8touchgfx6WidgetD1Ev>
 8010512:	2128      	movs	r1, #40	; 0x28
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f014 f840 	bl	802459a <_ZdlPvj>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4618      	mov	r0, r3
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	607b      	str	r3, [r7, #4]
 801052e:	460b      	mov	r3, r1
 8010530:	817b      	strh	r3, [r7, #10]
 8010532:	4613      	mov	r3, r2
 8010534:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff fecd 	bl	80102d8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d008      	beq.n	8010556 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	4618      	mov	r0, r3
 8010548:	f7ff fed3 	bl	80102f2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d001      	beq.n	8010556 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010552:	2301      	movs	r3, #1
 8010554:	e000      	b.n	8010558 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010556:	2300      	movs	r3, #0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d002      	beq.n	8010562 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	601a      	str	r2, [r3, #0]
        }
    }
 8010562:	bf00      	nop
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
	...

0801056c <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4618      	mov	r0, r3
 8010578:	f7ff ffa0 	bl	80104bc <_ZN8touchgfx6WidgetC1Ev>
 801057c:	4a0a      	ldr	r2, [pc, #40]	; (80105a8 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	601a      	str	r2, [r3, #0]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	22ff      	movs	r2, #255	; 0xff
 8010586:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	3328      	adds	r3, #40	; 0x28
 801058e:	2100      	movs	r1, #0
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff fd31 	bl	800fff8 <_ZN8touchgfx9colortypeC1Em>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	4618      	mov	r0, r3
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	08027ad8 	.word	0x08027ad8

080105ac <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	4a05      	ldr	r2, [pc, #20]	; (80105cc <_ZN8touchgfx3BoxD1Ev+0x20>)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	4618      	mov	r0, r3
 80105be:	f7ff ff8f 	bl	80104e0 <_ZN8touchgfx6WidgetD1Ev>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	4618      	mov	r0, r3
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	08027ad8 	.word	0x08027ad8

080105d0 <_ZN8touchgfx3BoxD0Ev>:
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f7ff ffe7 	bl	80105ac <_ZN8touchgfx3BoxD1Ev>
 80105de:	2130      	movs	r1, #48	; 0x30
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f013 ffda 	bl	802459a <_ZdlPvj>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4618      	mov	r0, r3
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	460b      	mov	r3, r1
 8010616:	807b      	strh	r3, [r7, #2]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	887a      	ldrh	r2, [r7, #2]
 801061c:	801a      	strh	r2, [r3, #0]
    }
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
        assertValid();
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7fe fd13 	bl	800f060 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 801063a:	4b06      	ldr	r3, [pc, #24]	; (8010654 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	881b      	ldrh	r3, [r3, #0]
 8010642:	4619      	mov	r1, r3
 8010644:	4610      	mov	r0, r2
 8010646:	f001 ff5f 	bl	8012508 <_ZNK8touchgfx5Texts7getTextEt>
 801064a:	4603      	mov	r3, r0
    }
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	2000bd04 	.word	0x2000bd04

08010658 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4618      	mov	r0, r3
 8010664:	f7ff ff2a 	bl	80104bc <_ZN8touchgfx6WidgetC1Ev>
 8010668:	4a13      	ldr	r2, [pc, #76]	; (80106b8 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	3326      	adds	r3, #38	; 0x26
 8010672:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010676:	4618      	mov	r0, r3
 8010678:	f7ff ffc8 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	3328      	adds	r3, #40	; 0x28
 8010680:	2100      	movs	r1, #0
 8010682:	4618      	mov	r0, r3
 8010684:	f7ff fcb8 	bl	800fff8 <_ZN8touchgfx9colortypeC1Em>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	22ff      	movs	r2, #255	; 0xff
 8010692:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	08027a5c 	.word	0x08027a5c

080106bc <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af02      	add	r7, sp, #8
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80106c6:	2300      	movs	r3, #0
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	2300      	movs	r3, #0
 80106cc:	2200      	movs	r2, #0
 80106ce:	2100      	movs	r1, #0
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7ff fcb7 	bl	8010044 <_ZN8touchgfx4RectC1Essss>
    }
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 80106de:	b480      	push	{r7}
 80106e0:	b083      	sub	sp, #12
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80106ee:	bf00      	nop
 80106f0:	370c      	adds	r7, #12
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80106fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106fc:	b085      	sub	sp, #20
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	460b      	mov	r3, r1
 8010704:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010706:	687e      	ldr	r6, [r7, #4]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3330      	adds	r3, #48	; 0x30
 801070e:	681c      	ldr	r4, [r3, #0]
 8010710:	887d      	ldrh	r5, [r7, #2]
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f845 	bl	80107a2 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010718:	4603      	mov	r3, r0
 801071a:	81bb      	strh	r3, [r7, #12]
 801071c:	f107 030c 	add.w	r3, r7, #12
 8010720:	4618      	mov	r0, r3
 8010722:	f7fe fc69 	bl	800eff8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010726:	4602      	mov	r2, r0
 8010728:	6813      	ldr	r3, [r2, #0]
 801072a:	332c      	adds	r3, #44	; 0x2c
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4610      	mov	r0, r2
 8010730:	4798      	blx	r3
 8010732:	4603      	mov	r3, r0
 8010734:	1aeb      	subs	r3, r5, r3
 8010736:	b29b      	uxth	r3, r3
 8010738:	b21b      	sxth	r3, r3
 801073a:	4619      	mov	r1, r3
 801073c:	4630      	mov	r0, r6
 801073e:	47a0      	blx	r4
    }
 8010740:	bf00      	nop
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010748 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	460b      	mov	r3, r1
 8010752:	807b      	strh	r3, [r7, #2]
 8010754:	4613      	mov	r3, r2
 8010756:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	332c      	adds	r3, #44	; 0x2c
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010766:	4610      	mov	r0, r2
 8010768:	4798      	blx	r3
        setBaselineY(baselineY);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3360      	adds	r3, #96	; 0x60
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010776:	4611      	mov	r1, r2
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	4798      	blx	r3
    }
 801077c:	bf00      	nop
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	887a      	ldrh	r2, [r7, #2]
 8010794:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010796:	bf00      	nop
 8010798:	370c      	adds	r7, #12
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr

080107a2 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 80107a2:	b480      	push	{r7}
 80107a4:	b083      	sub	sp, #12
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 80107ae:	4618      	mov	r0, r3
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
	...

080107bc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	4a05      	ldr	r2, [pc, #20]	; (80107dc <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7ff fe87 	bl	80104e0 <_ZN8touchgfx6WidgetD1Ev>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	08027a5c 	.word	0x08027a5c

080107e0 <_ZN8touchgfx8TextAreaD0Ev>:
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f7ff ffe7 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 80107ee:	2134      	movs	r1, #52	; 0x34
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f013 fed2 	bl	802459a <_ZdlPvj>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4618      	mov	r0, r3
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	4618      	mov	r0, r3
 801080c:	f7ff ff24 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010810:	4a03      	ldr	r2, [pc, #12]	; (8010820 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	601a      	str	r2, [r3, #0]
    {
    }
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	08026044 	.word	0x08026044

08010824 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	4a05      	ldr	r2, [pc, #20]	; (8010844 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff ffc1 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4618      	mov	r0, r3
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	08026044 	.word	0x08026044

08010848 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7ff ffe7 	bl	8010824 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010856:	2134      	movs	r1, #52	; 0x34
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f013 fe9e 	bl	802459a <_ZdlPvj>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4618      	mov	r0, r3
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	4618      	mov	r0, r3
 8010874:	f7ff ffc4 	bl	8010800 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010878:	4a05      	ldr	r2, [pc, #20]	; (8010890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	601a      	str	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2200      	movs	r2, #0
 8010882:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	4618      	mov	r0, r3
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	08027bc4 	.word	0x08027bc4

08010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	683a      	ldr	r2, [r7, #0]
 80108a2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80108a4:	bf00      	nop
 80108a6:	370c      	adds	r7, #12
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr

080108b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4618      	mov	r0, r3
 80108be:	f7ff fdfd 	bl	80104bc <_ZN8touchgfx6WidgetC1Ev>
 80108c2:	4a0b      	ldr	r2, [pc, #44]	; (80108f0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	601a      	str	r2, [r3, #0]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	3326      	adds	r3, #38	; 0x26
 80108cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7ff fbd7 	bl	8010084 <_ZN8touchgfx6BitmapC1Et>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	22ff      	movs	r2, #255	; 0xff
 80108da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80108de:	6839      	ldr	r1, [r7, #0]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f006 fde3 	bl	80174ac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4618      	mov	r0, r3
 80108ea:	3708      	adds	r7, #8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	08027c40 	.word	0x08027c40

080108f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	601a      	str	r2, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010912:	b480      	push	{r7}
 8010914:	b083      	sub	sp, #12
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
        {
            return v;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
        }
 801091e:	4618      	mov	r0, r3
 8010920:	370c      	adds	r7, #12
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 801092a:	b590      	push	{r4, r7, lr}
 801092c:	b083      	sub	sp, #12
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	3340      	adds	r3, #64	; 0x40
 8010938:	4618      	mov	r0, r3
 801093a:	f7ff ffea 	bl	8010912 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801093e:	4604      	mov	r4, r0
 8010940:	463b      	mov	r3, r7
 8010942:	4618      	mov	r0, r3
 8010944:	f7ff ffe5 	bl	8010912 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010948:	4603      	mov	r3, r0
 801094a:	429c      	cmp	r4, r3
 801094c:	bf0c      	ite	eq
 801094e:	2301      	moveq	r3, #1
 8010950:	2300      	movne	r3, #0
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d106      	bne.n	8010966 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f006 f81e 	bl	80169a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010964:	e000      	b.n	8010968 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010966:	bf00      	nop
    }
 8010968:	370c      	adds	r7, #12
 801096a:	46bd      	mov	sp, r7
 801096c:	bd90      	pop	{r4, r7, pc}
	...

08010970 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	4a05      	ldr	r2, [pc, #20]	; (8010990 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4618      	mov	r0, r3
 8010982:	f005 fe21 	bl	80165c8 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	3708      	adds	r7, #8
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	080275b0 	.word	0x080275b0

08010994 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7ff ffe7 	bl	8010970 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80109a2:	2114      	movs	r1, #20
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f013 fdf8 	bl	802459a <_ZdlPvj>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4618      	mov	r0, r3
 80109ae:	3708      	adds	r7, #8
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	4a05      	ldr	r2, [pc, #20]	; (80109d4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	601a      	str	r2, [r3, #0]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7ff fd8b 	bl	80104e0 <_ZN8touchgfx6WidgetD1Ev>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	08027c40 	.word	0x08027c40

080109d8 <_ZN8touchgfx5ImageD0Ev>:
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f7ff ffe7 	bl	80109b4 <_ZN8touchgfx5ImageD1Ev>
 80109e6:	212c      	movs	r1, #44	; 0x2c
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f013 fdd6 	bl	802459a <_ZdlPvj>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4618      	mov	r0, r3
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	4a05      	ldr	r2, [pc, #20]	; (8010a18 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7ff fcef 	bl	80103ec <_ZN8touchgfx6ScreenD1Ev>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	08026010 	.word	0x08026010

08010a1c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7ff ffe7 	bl	80109f8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010a2a:	2140      	movs	r1, #64	; 0x40
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f013 fdb4 	bl	802459a <_ZdlPvj>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4618      	mov	r0, r3
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	4a81      	ldr	r2, [pc, #516]	; (8010c4c <_ZN12MainViewBaseD1Ev+0x210>)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7ff feb3 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f001 fc69 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f004 f935 	bl	8014cd8 <_ZN8touchgfx13ImageProgressD1Ev>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8010a74:	4618      	mov	r0, r3
 8010a76:	f001 fc5d 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 8010a80:	4618      	mov	r0, r3
 8010a82:	f001 fc9b 	bl	80123bc <_ZN8touchgfx13PainterRGB888D1Ev>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f001 fc73 	bl	8012378 <_ZN8touchgfx4LineD1Ev>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f001 fc8f 	bl	80123bc <_ZN8touchgfx13PainterRGB888D1Ev>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f001 fc67 	bl	8012378 <_ZN8touchgfx4LineD1Ev>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f004 f811 	bl	8014ad8 <_ZN8touchgfx11BoxProgressD1Ev>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7ff fe7d 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f001 fc33 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f001 fc2d 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7ff fe6b 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff fe65 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8010af8:	4618      	mov	r0, r3
 8010afa:	f001 fc1b 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8010b04:	4618      	mov	r0, r3
 8010b06:	f001 fc15 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff fe53 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7ff fe4d 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f001 fc47 	bl	80123bc <_ZN8touchgfx13PainterRGB888D1Ev>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8010b34:	4618      	mov	r0, r3
 8010b36:	f001 fc1f 	bl	8012378 <_ZN8touchgfx4LineD1Ev>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7ff fe3b 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7ff fe35 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff fe2f 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7ff fe29 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7ff fe23 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7ff fe1d 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7ff fe17 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7ff fe11 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7ff fe0b 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7ff fe05 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff fefb 	bl	80109b4 <_ZN8touchgfx5ImageD1Ev>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f001 fbb5 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f001 fbaf 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f001 fba9 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010be8:	4618      	mov	r0, r3
 8010bea:	f001 fba3 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f001 fb9d 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff fddb 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7ff fdd5 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	33d8      	adds	r3, #216	; 0xd8
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fdd0 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	33a4      	adds	r3, #164	; 0xa4
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7ff fdcb 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3370      	adds	r3, #112	; 0x70
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7ff fdc6 	bl	80107bc <_ZN8touchgfx8TextAreaD1Ev>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	3340      	adds	r3, #64	; 0x40
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7ff fcb9 	bl	80105ac <_ZN8touchgfx3BoxD1Ev>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7ff fedb 	bl	80109f8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	08025fdc 	.word	0x08025fdc

08010c50 <_ZN12MainViewBaseD0Ev>:
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7ff feef 	bl	8010a3c <_ZN12MainViewBaseD1Ev>
 8010c5e:	f242 712c 	movw	r1, #10028	; 0x272c
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f013 fc99 	bl	802459a <_ZdlPvj>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010c74:	b590      	push	{r4, r7, lr}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	71fb      	strb	r3, [r7, #7]
 8010c7e:	460b      	mov	r3, r1
 8010c80:	71bb      	strb	r3, [r7, #6]
 8010c82:	4613      	mov	r3, r2
 8010c84:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010c86:	f7fe fd8b 	bl	800f7a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d105      	bne.n	8010c9c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010c90:	4b0a      	ldr	r3, [pc, #40]	; (8010cbc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010c92:	4a0b      	ldr	r2, [pc, #44]	; (8010cc0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010c94:	2138      	movs	r1, #56	; 0x38
 8010c96:	480b      	ldr	r0, [pc, #44]	; (8010cc4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010c98:	f013 fcaa 	bl	80245f0 <__assert_func>
 8010c9c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010c9e:	f7fe fd8b 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8010ca2:	6803      	ldr	r3, [r0, #0]
 8010ca4:	332c      	adds	r3, #44	; 0x2c
 8010ca6:	681c      	ldr	r4, [r3, #0]
 8010ca8:	797b      	ldrb	r3, [r7, #5]
 8010caa:	79ba      	ldrb	r2, [r7, #6]
 8010cac:	79f9      	ldrb	r1, [r7, #7]
 8010cae:	47a0      	blx	r4
 8010cb0:	4603      	mov	r3, r0
    }
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd90      	pop	{r4, r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	08025a4c 	.word	0x08025a4c
 8010cc0:	08026120 	.word	0x08026120
 8010cc4:	08025a90 	.word	0x08025a90

08010cc8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010cc8:	b590      	push	{r4, r7, lr}
 8010cca:	b0b5      	sub	sp, #212	; 0xd4
 8010ccc:	af02      	add	r7, sp, #8
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f001 fab4 	bl	8012240 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010cd8:	4adc      	ldr	r2, [pc, #880]	; (801104c <_ZN12MainViewBaseC1Ev+0x384>)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	601a      	str	r2, [r3, #0]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	3340      	adds	r3, #64	; 0x40
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7ff fc42 	bl	801056c <_ZN8touchgfx3BoxC1Ev>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	3370      	adds	r3, #112	; 0x70
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7ff fcb3 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	33a4      	adds	r3, #164	; 0xa4
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7ff fcae 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	33d8      	adds	r3, #216	; 0xd8
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff fca9 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7ff fca3 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff fc9d 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7ff fd9f 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7ff fd99 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff fd93 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff fd8d 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7ff fd87 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 8010d60:	f107 0308 	add.w	r3, r7, #8
 8010d64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7ff f98b 	bl	8010084 <_ZN8touchgfx6BitmapC1Et>
 8010d6e:	f107 0308 	add.w	r3, r7, #8
 8010d72:	4619      	mov	r1, r3
 8010d74:	4620      	mov	r0, r4
 8010d76:	f7ff fd9b 	bl	80108b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7ff fc69 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7ff fc63 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7ff fc5d 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7ff fc57 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff fc51 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7ff fc4b 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ff fc45 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7ff fc3f 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7ff fc39 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7ff fc33 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f005 fdb1 	bl	8016960 <_ZN8touchgfx4LineC1Ev>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8010e04:	f107 030c 	add.w	r3, r7, #12
 8010e08:	2100      	movs	r1, #0
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7ff f8f4 	bl	800fff8 <_ZN8touchgfx9colortypeC1Em>
 8010e10:	22ff      	movs	r2, #255	; 0xff
 8010e12:	68f9      	ldr	r1, [r7, #12]
 8010e14:	4620      	mov	r0, r4
 8010e16:	f005 fb95 	bl	8016544 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7ff fc19 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff fc13 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ff fd15 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff fd0f 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7ff fc01 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7ff fbfb 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff fcfd 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff fcf7 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff fbe9 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f003 fe37 	bl	8014b00 <_ZN8touchgfx11BoxProgressC1Ev>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f005 fd61 	bl	8016960 <_ZN8touchgfx4LineC1Ev>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f603 0464 	addw	r4, r3, #2148	; 0x864
 8010ea4:	f107 0310 	add.w	r3, r7, #16
 8010ea8:	2100      	movs	r1, #0
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff f8a4 	bl	800fff8 <_ZN8touchgfx9colortypeC1Em>
 8010eb0:	22ff      	movs	r2, #255	; 0xff
 8010eb2:	6939      	ldr	r1, [r7, #16]
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f005 fb45 	bl	8016544 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f005 fd4d 	bl	8016960 <_ZN8touchgfx4LineC1Ev>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f503 640f 	add.w	r4, r3, #2288	; 0x8f0
 8010ecc:	f107 0314 	add.w	r3, r7, #20
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7ff f890 	bl	800fff8 <_ZN8touchgfx9colortypeC1Em>
 8010ed8:	22ff      	movs	r2, #255	; 0xff
 8010eda:	6979      	ldr	r1, [r7, #20]
 8010edc:	4620      	mov	r0, r4
 8010ede:	f005 fb31 	bl	8016544 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7ff fcbd 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f003 ff19 	bl	8014d2c <_ZN8touchgfx13ImageProgressC1Ev>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fcb1 	bl	8010868 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7ff fba3 	bl	8010658 <_ZN8touchgfx8TextAreaC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f603 330a 	addw	r3, r3, #2826	; 0xb0a
 8010f18:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f006 fb33 	bl	8017588 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010f28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010f2c:	9300      	str	r3, [sp, #0]
 8010f2e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010f32:	2200      	movs	r2, #0
 8010f34:	2100      	movs	r1, #0
 8010f36:	f7ff f903 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010f40:	2200      	movs	r2, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	2000      	movs	r0, #0
 8010f46:	f7ff fe95 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f7ff fb4e 	bl	80105f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    RpmDescriptor.setXY(228, 138);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3370      	adds	r3, #112	; 0x70
 8010f58:	228a      	movs	r2, #138	; 0x8a
 8010f5a:	21e4      	movs	r1, #228	; 0xe4
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7ff f93a 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f68:	2200      	movs	r2, #0
 8010f6a:	21dc      	movs	r1, #220	; 0xdc
 8010f6c:	20ff      	movs	r0, #255	; 0xff
 8010f6e:	f7ff fe81 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f72:	4603      	mov	r3, r0
 8010f74:	4619      	mov	r1, r3
 8010f76:	4620      	mov	r0, r4
 8010f78:	f7ff fbb1 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	3370      	adds	r3, #112	; 0x70
 8010f80:	2100      	movs	r1, #0
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7ff fbfe 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f8e:	f107 0318 	add.w	r3, r7, #24
 8010f92:	2114      	movs	r1, #20
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff fb39 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8010f9a:	8b39      	ldrh	r1, [r7, #24]
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	f005 ffe5 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(428, 121);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	33a4      	adds	r3, #164	; 0xa4
 8010fa6:	2279      	movs	r2, #121	; 0x79
 8010fa8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff f912 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010fb8:	2200      	movs	r2, #0
 8010fba:	21dc      	movs	r1, #220	; 0xdc
 8010fbc:	20ff      	movs	r0, #255	; 0xff
 8010fbe:	f7ff fe59 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7ff fb89 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	33a4      	adds	r3, #164	; 0xa4
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff fbd6 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010fde:	f107 031c 	add.w	r3, r7, #28
 8010fe2:	2124      	movs	r1, #36	; 0x24
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ff fb11 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8010fea:	8bb9      	ldrh	r1, [r7, #28]
 8010fec:	4620      	mov	r0, r4
 8010fee:	f005 ffbd 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 121);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	33d8      	adds	r3, #216	; 0xd8
 8010ff6:	2279      	movs	r2, #121	; 0x79
 8010ff8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff f8ea 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011008:	2200      	movs	r2, #0
 801100a:	21dc      	movs	r1, #220	; 0xdc
 801100c:	20ff      	movs	r0, #255	; 0xff
 801100e:	f7ff fe31 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011012:	4603      	mov	r3, r0
 8011014:	4619      	mov	r1, r3
 8011016:	4620      	mov	r0, r4
 8011018:	f7ff fb61 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	33d8      	adds	r3, #216	; 0xd8
 8011020:	2100      	movs	r1, #0
 8011022:	4618      	mov	r0, r3
 8011024:	f7ff fbae 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801102e:	f107 0320 	add.w	r3, r7, #32
 8011032:	2123      	movs	r1, #35	; 0x23
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff fae9 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 801103a:	8c39      	ldrh	r1, [r7, #32]
 801103c:	4620      	mov	r0, r4
 801103e:	f005 ff95 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(38, 126);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011048:	e002      	b.n	8011050 <_ZN12MainViewBaseC1Ev+0x388>
 801104a:	bf00      	nop
 801104c:	08025fdc 	.word	0x08025fdc
 8011050:	227e      	movs	r2, #126	; 0x7e
 8011052:	2126      	movs	r1, #38	; 0x26
 8011054:	4618      	mov	r0, r3
 8011056:	f7ff f8be 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011060:	2200      	movs	r2, #0
 8011062:	21dc      	movs	r1, #220	; 0xdc
 8011064:	20ff      	movs	r0, #255	; 0xff
 8011066:	f7ff fe05 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801106a:	4603      	mov	r3, r0
 801106c:	4619      	mov	r1, r3
 801106e:	4620      	mov	r0, r4
 8011070:	f7ff fb35 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801107a:	2100      	movs	r1, #0
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff fb81 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801108c:	211c      	movs	r1, #28
 801108e:	4618      	mov	r0, r3
 8011090:	f7ff fabc 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011094:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8011096:	4620      	mov	r0, r4
 8011098:	f005 ff68 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 126);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80110a2:	227e      	movs	r2, #126	; 0x7e
 80110a4:	2177      	movs	r1, #119	; 0x77
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff f895 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80110b2:	2200      	movs	r2, #0
 80110b4:	21dc      	movs	r1, #220	; 0xdc
 80110b6:	20ff      	movs	r0, #255	; 0xff
 80110b8:	f7ff fddc 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110bc:	4603      	mov	r3, r0
 80110be:	4619      	mov	r1, r3
 80110c0:	4620      	mov	r0, r4
 80110c2:	f7ff fb0c 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80110cc:	2100      	movs	r1, #0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff fb58 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80110da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110de:	211b      	movs	r1, #27
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7ff fa93 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80110e6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80110e8:	4620      	mov	r0, r4
 80110ea:	f005 ff3f 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setXY(27, 91);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80110f4:	225b      	movs	r2, #91	; 0x5b
 80110f6:	211b      	movs	r1, #27
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7ff f86c 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011104:	22ff      	movs	r2, #255	; 0xff
 8011106:	21ff      	movs	r1, #255	; 0xff
 8011108:	20ff      	movs	r0, #255	; 0xff
 801110a:	f7ff fdb3 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801110e:	4603      	mov	r3, r0
 8011110:	4619      	mov	r1, r3
 8011112:	4620      	mov	r0, r4
 8011114:	f7ff fae3 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801111e:	2100      	movs	r1, #0
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff fb2f 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f603 249c 	addw	r4, r3, #2716	; 0xa9c
 801112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011130:	2109      	movs	r1, #9
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff fa6a 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801113c:	4618      	mov	r0, r3
 801113e:	f7ff fa75 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011142:	4603      	mov	r3, r0
 8011144:	4ae3      	ldr	r2, [pc, #908]	; (80114d4 <_ZN12MainViewBaseC1Ev+0x80c>)
 8011146:	2105      	movs	r1, #5
 8011148:	4620      	mov	r0, r4
 801114a:	f009 fab9 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 801115a:	4619      	mov	r1, r3
 801115c:	4610      	mov	r0, r2
 801115e:	f7ff fb99 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.resizeToCurrentText();
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011168:	4618      	mov	r0, r3
 801116a:	f005 fed5 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011174:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011178:	2108      	movs	r1, #8
 801117a:	4618      	mov	r0, r3
 801117c:	f7ff fa46 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011180:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8011182:	4620      	mov	r0, r4
 8011184:	f005 fef2 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setXY(107, 91);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801118e:	225b      	movs	r2, #91	; 0x5b
 8011190:	216b      	movs	r1, #107	; 0x6b
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff f81f 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 801119e:	22ff      	movs	r2, #255	; 0xff
 80111a0:	21ff      	movs	r1, #255	; 0xff
 80111a2:	20ff      	movs	r0, #255	; 0xff
 80111a4:	f7ff fd66 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111a8:	4603      	mov	r3, r0
 80111aa:	4619      	mov	r1, r3
 80111ac:	4620      	mov	r0, r4
 80111ae:	f7ff fa96 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80111b8:	2100      	movs	r1, #0
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7ff fae2 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f603 24a6 	addw	r4, r3, #2726	; 0xaa6
 80111c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111ca:	2107      	movs	r1, #7
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7ff fa1d 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80111d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff fa28 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 80111dc:	4603      	mov	r3, r0
 80111de:	4abd      	ldr	r2, [pc, #756]	; (80114d4 <_ZN12MainViewBaseC1Ev+0x80c>)
 80111e0:	2105      	movs	r1, #5
 80111e2:	4620      	mov	r0, r4
 80111e4:	f009 fa6c 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f603 23a6 	addw	r3, r3, #2726	; 0xaa6
 80111f4:	4619      	mov	r1, r3
 80111f6:	4610      	mov	r0, r2
 80111f8:	f7ff fb4c 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.resizeToCurrentText();
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011202:	4618      	mov	r0, r3
 8011204:	f005 fe88 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 801120e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011212:	2106      	movs	r1, #6
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff f9f9 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 801121a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 801121c:	4620      	mov	r0, r4
 801121e:	f005 fea5 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaValue.setXY(414, 86);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011228:	2256      	movs	r2, #86	; 0x56
 801122a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 801122e:	4618      	mov	r0, r3
 8011230:	f7fe ffd1 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    KpaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 801123a:	22ff      	movs	r2, #255	; 0xff
 801123c:	21ff      	movs	r1, #255	; 0xff
 801123e:	20ff      	movs	r0, #255	; 0xff
 8011240:	f7ff fd18 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011244:	4603      	mov	r3, r0
 8011246:	4619      	mov	r1, r3
 8011248:	4620      	mov	r0, r4
 801124a:	f7ff fa48 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaValue.setLinespacing(0);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011254:	2100      	movs	r1, #0
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff fa94 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KpaValueBuffer, KPAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f503 642b 	add.w	r4, r3, #2736	; 0xab0
 8011262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011266:	2105      	movs	r1, #5
 8011268:	4618      	mov	r0, r3
 801126a:	f7ff f9cf 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 801126e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011272:	4618      	mov	r0, r3
 8011274:	f7ff f9da 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011278:	4603      	mov	r3, r0
 801127a:	4a96      	ldr	r2, [pc, #600]	; (80114d4 <_ZN12MainViewBaseC1Ev+0x80c>)
 801127c:	2105      	movs	r1, #5
 801127e:	4620      	mov	r0, r4
 8011280:	f009 fa1e 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KpaValue.setWildcard(KpaValueBuffer);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f7ff fafe 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KpaValue.resizeToCurrentText();
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801129e:	4618      	mov	r0, r3
 80112a0:	f005 fe3a 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    KpaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80112aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80112ae:	2104      	movs	r1, #4
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7ff f9ab 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80112b6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80112ba:	4620      	mov	r0, r4
 80112bc:	f005 fe56 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue.setXY(331, 86);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80112c6:	2256      	movs	r2, #86	; 0x56
 80112c8:	f240 114b 	movw	r1, #331	; 0x14b
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fe ff82 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f503 7407 	add.w	r4, r3, #540	; 0x21c
 80112d8:	22ff      	movs	r2, #255	; 0xff
 80112da:	21ff      	movs	r1, #255	; 0xff
 80112dc:	20ff      	movs	r0, #255	; 0xff
 80112de:	f7ff fcc9 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4619      	mov	r1, r3
 80112e6:	4620      	mov	r0, r4
 80112e8:	f7ff f9f9 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue.setLinespacing(0);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80112f2:	2100      	movs	r1, #0
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7ff fa45 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CltValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f603 24ba 	addw	r4, r3, #2746	; 0xaba
 8011300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011304:	2103      	movs	r1, #3
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff f980 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 801130c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011310:	4618      	mov	r0, r3
 8011312:	f7ff f98b 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011316:	4603      	mov	r3, r0
 8011318:	4a6e      	ldr	r2, [pc, #440]	; (80114d4 <_ZN12MainViewBaseC1Ev+0x80c>)
 801131a:	2105      	movs	r1, #5
 801131c:	4620      	mov	r0, r4
 801131e:	f009 f9cf 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CltValue.setWildcard(CltValueBuffer);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f603 23ba 	addw	r3, r3, #2746	; 0xaba
 801132e:	4619      	mov	r1, r3
 8011330:	4610      	mov	r0, r2
 8011332:	f7ff faaf 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CltValue.resizeToCurrentText();
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 801133c:	4618      	mov	r0, r3
 801133e:	f005 fdeb 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    CltValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f503 7407 	add.w	r4, r3, #540	; 0x21c
 8011348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801134c:	2102      	movs	r1, #2
 801134e:	4618      	mov	r0, r3
 8011350:	f7ff f95c 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011354:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8011358:	4620      	mov	r0, r4
 801135a:	f005 fe07 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KmhValue.setXY(193, 75);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011364:	224b      	movs	r2, #75	; 0x4b
 8011366:	21c1      	movs	r1, #193	; 0xc1
 8011368:	4618      	mov	r0, r3
 801136a:	f7fe ff34 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    KmhValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8011374:	22ff      	movs	r2, #255	; 0xff
 8011376:	21ff      	movs	r1, #255	; 0xff
 8011378:	20ff      	movs	r0, #255	; 0xff
 801137a:	f7ff fc7b 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801137e:	4603      	mov	r3, r0
 8011380:	4619      	mov	r1, r3
 8011382:	4620      	mov	r0, r4
 8011384:	f7ff f9ab 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KmhValue.setLinespacing(0);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 801138e:	2100      	movs	r1, #0
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff f9f7 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KmhValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID2).getText());
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 801139c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113a0:	2101      	movs	r1, #1
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7ff f932 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80113a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7ff f93d 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 80113b2:	4603      	mov	r3, r0
 80113b4:	4a47      	ldr	r2, [pc, #284]	; (80114d4 <_ZN12MainViewBaseC1Ev+0x80c>)
 80113b6:	2105      	movs	r1, #5
 80113b8:	4620      	mov	r0, r4
 80113ba:	f009 f981 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KmhValue.setWildcard(KmhValueBuffer);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f503 7215 	add.w	r2, r3, #596	; 0x254
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 80113ca:	4619      	mov	r1, r3
 80113cc:	4610      	mov	r0, r2
 80113ce:	f7ff fa61 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KmhValue.resizeToCurrentText();
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80113d8:	4618      	mov	r0, r3
 80113da:	f005 fd9d 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    KmhValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f503 7415 	add.w	r4, r3, #596	; 0x254
 80113e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80113e8:	2100      	movs	r1, #0
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff f90e 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80113f0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80113f4:	4620      	mov	r0, r4
 80113f6:	f005 fdb9 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011400:	223f      	movs	r2, #63	; 0x3f
 8011402:	21b3      	movs	r1, #179	; 0xb3
 8011404:	4618      	mov	r0, r3
 8011406:	f7fe fee6 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011410:	2100      	movs	r1, #0
 8011412:	4618      	mov	r0, r3
 8011414:	f7fe ff50 	bl	80102b8 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setXY(46, 56);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 801141e:	2238      	movs	r2, #56	; 0x38
 8011420:	212e      	movs	r1, #46	; 0x2e
 8011422:	4618      	mov	r0, r3
 8011424:	f7fe fed7 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 801142e:	22ff      	movs	r2, #255	; 0xff
 8011430:	21ff      	movs	r1, #255	; 0xff
 8011432:	20ff      	movs	r0, #255	; 0xff
 8011434:	f7ff fc1e 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011438:	4603      	mov	r3, r0
 801143a:	4619      	mov	r1, r3
 801143c:	4620      	mov	r0, r4
 801143e:	f7ff f94e 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8011448:	2100      	movs	r1, #0
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff f99a 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8011456:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801145a:	210a      	movs	r1, #10
 801145c:	4618      	mov	r0, r3
 801145e:	f7ff f8d5 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011462:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8011466:	4620      	mov	r0, r4
 8011468:	f005 fd80 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setXY(94, 56);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8011472:	2238      	movs	r2, #56	; 0x38
 8011474:	215e      	movs	r1, #94	; 0x5e
 8011476:	4618      	mov	r0, r3
 8011478:	f7fe fead 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f503 743b 	add.w	r4, r3, #748	; 0x2ec
 8011482:	22ff      	movs	r2, #255	; 0xff
 8011484:	21ff      	movs	r1, #255	; 0xff
 8011486:	20ff      	movs	r0, #255	; 0xff
 8011488:	f7ff fbf4 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801148c:	4603      	mov	r3, r0
 801148e:	4619      	mov	r1, r3
 8011490:	4620      	mov	r0, r4
 8011492:	f7ff f924 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 801149c:	2100      	movs	r1, #0
 801149e:	4618      	mov	r0, r3
 80114a0:	f7ff f970 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f503 743b 	add.w	r4, r3, #748	; 0x2ec
 80114aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114ae:	210b      	movs	r1, #11
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff f8ab 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80114b6:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80114ba:	4620      	mov	r0, r4
 80114bc:	f005 fd56 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setXY(143, 56);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80114c6:	2238      	movs	r2, #56	; 0x38
 80114c8:	218f      	movs	r1, #143	; 0x8f
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fe fe83 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
 80114d0:	e002      	b.n	80114d8 <_ZN12MainViewBaseC1Ev+0x810>
 80114d2:	bf00      	nop
 80114d4:	08025ad0 	.word	0x08025ad0
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f503 7448 	add.w	r4, r3, #800	; 0x320
 80114de:	22ff      	movs	r2, #255	; 0xff
 80114e0:	21ff      	movs	r1, #255	; 0xff
 80114e2:	20ff      	movs	r0, #255	; 0xff
 80114e4:	f7ff fbc6 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114e8:	4603      	mov	r3, r0
 80114ea:	4619      	mov	r1, r3
 80114ec:	4620      	mov	r0, r4
 80114ee:	f7ff f8f6 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80114f8:	2100      	movs	r1, #0
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7ff f942 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f503 7448 	add.w	r4, r3, #800	; 0x320
 8011506:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801150a:	210c      	movs	r1, #12
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff f87d 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011512:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8011516:	4620      	mov	r0, r4
 8011518:	f005 fd28 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setXY(189, 56);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8011522:	2238      	movs	r2, #56	; 0x38
 8011524:	21bd      	movs	r1, #189	; 0xbd
 8011526:	4618      	mov	r0, r3
 8011528:	f7fe fe55 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f503 7455 	add.w	r4, r3, #852	; 0x354
 8011532:	22ff      	movs	r2, #255	; 0xff
 8011534:	21ff      	movs	r1, #255	; 0xff
 8011536:	20ff      	movs	r0, #255	; 0xff
 8011538:	f7ff fb9c 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801153c:	4603      	mov	r3, r0
 801153e:	4619      	mov	r1, r3
 8011540:	4620      	mov	r0, r4
 8011542:	f7ff f8cc 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f503 7355 	add.w	r3, r3, #852	; 0x354
 801154c:	2100      	movs	r1, #0
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff f918 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f503 7455 	add.w	r4, r3, #852	; 0x354
 801155a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801155e:	210d      	movs	r1, #13
 8011560:	4618      	mov	r0, r3
 8011562:	f7ff f853 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011566:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 801156a:	4620      	mov	r0, r4
 801156c:	f005 fcfe 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setXY(236, 56);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8011576:	2238      	movs	r2, #56	; 0x38
 8011578:	21ec      	movs	r1, #236	; 0xec
 801157a:	4618      	mov	r0, r3
 801157c:	f7fe fe2b 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8011586:	22ff      	movs	r2, #255	; 0xff
 8011588:	21ff      	movs	r1, #255	; 0xff
 801158a:	20ff      	movs	r0, #255	; 0xff
 801158c:	f7ff fb72 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011590:	4603      	mov	r3, r0
 8011592:	4619      	mov	r1, r3
 8011594:	4620      	mov	r0, r4
 8011596:	f7ff f8a2 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80115a0:	2100      	movs	r1, #0
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7ff f8ee 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f503 7462 	add.w	r4, r3, #904	; 0x388
 80115ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80115b2:	210e      	movs	r1, #14
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff f829 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80115ba:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80115be:	4620      	mov	r0, r4
 80115c0:	f005 fcd4 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setXY(285, 56);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80115ca:	2238      	movs	r2, #56	; 0x38
 80115cc:	f240 111d 	movw	r1, #285	; 0x11d
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7fe fe00 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 80115dc:	22ff      	movs	r2, #255	; 0xff
 80115de:	21ff      	movs	r1, #255	; 0xff
 80115e0:	20ff      	movs	r0, #255	; 0xff
 80115e2:	f7ff fb47 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115e6:	4603      	mov	r3, r0
 80115e8:	4619      	mov	r1, r3
 80115ea:	4620      	mov	r0, r4
 80115ec:	f7ff f877 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80115f6:	2100      	movs	r1, #0
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff f8c3 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8011604:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011608:	210f      	movs	r1, #15
 801160a:	4618      	mov	r0, r3
 801160c:	f7fe fffe 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011610:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8011614:	4620      	mov	r0, r4
 8011616:	f005 fca9 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setXY(332, 56);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8011620:	2238      	movs	r2, #56	; 0x38
 8011622:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8011626:	4618      	mov	r0, r3
 8011628:	f7fe fdd5 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 8011632:	22ff      	movs	r2, #255	; 0xff
 8011634:	21ff      	movs	r1, #255	; 0xff
 8011636:	20ff      	movs	r0, #255	; 0xff
 8011638:	f7ff fb1c 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801163c:	4603      	mov	r3, r0
 801163e:	4619      	mov	r1, r3
 8011640:	4620      	mov	r0, r4
 8011642:	f7ff f84c 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 801164c:	2100      	movs	r1, #0
 801164e:	4618      	mov	r0, r3
 8011650:	f7ff f898 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 801165a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801165e:	2110      	movs	r1, #16
 8011660:	4618      	mov	r0, r3
 8011662:	f7fe ffd3 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011666:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 801166a:	4620      	mov	r0, r4
 801166c:	f005 fc7e 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setXY(380, 56);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8011676:	2238      	movs	r2, #56	; 0x38
 8011678:	f44f 71be 	mov.w	r1, #380	; 0x17c
 801167c:	4618      	mov	r0, r3
 801167e:	f7fe fdaa 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f203 4424 	addw	r4, r3, #1060	; 0x424
 8011688:	22ff      	movs	r2, #255	; 0xff
 801168a:	21ff      	movs	r1, #255	; 0xff
 801168c:	20ff      	movs	r0, #255	; 0xff
 801168e:	f7ff faf1 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011692:	4603      	mov	r3, r0
 8011694:	4619      	mov	r1, r3
 8011696:	4620      	mov	r0, r4
 8011698:	f7ff f821 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80116a2:	2100      	movs	r1, #0
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7ff f86d 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f203 4424 	addw	r4, r3, #1060	; 0x424
 80116b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80116b4:	2111      	movs	r1, #17
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7fe ffa8 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80116bc:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80116c0:	4620      	mov	r0, r4
 80116c2:	f005 fc53 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm9.setXY(427, 56);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80116cc:	2238      	movs	r2, #56	; 0x38
 80116ce:	f240 11ab 	movw	r1, #427	; 0x1ab
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fe fd7f 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm9.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 80116de:	22ff      	movs	r2, #255	; 0xff
 80116e0:	21ff      	movs	r1, #255	; 0xff
 80116e2:	20ff      	movs	r0, #255	; 0xff
 80116e4:	f7ff fac6 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116e8:	4603      	mov	r3, r0
 80116ea:	4619      	mov	r1, r3
 80116ec:	4620      	mov	r0, r4
 80116ee:	f7fe fff6 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm9.setLinespacing(0);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80116f8:	2100      	movs	r1, #0
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7ff f842 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm9.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8011706:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801170a:	2112      	movs	r1, #18
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe ff7d 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011712:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8011716:	4620      	mov	r0, r4
 8011718:	f005 fc28 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm10.setXY(465, 56);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8011722:	2238      	movs	r2, #56	; 0x38
 8011724:	f240 11d1 	movw	r1, #465	; 0x1d1
 8011728:	4618      	mov	r0, r3
 801172a:	f7fe fd54 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm10.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8011734:	22ff      	movs	r2, #255	; 0xff
 8011736:	21ff      	movs	r1, #255	; 0xff
 8011738:	20ff      	movs	r0, #255	; 0xff
 801173a:	f7ff fa9b 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801173e:	4603      	mov	r3, r0
 8011740:	4619      	mov	r1, r3
 8011742:	4620      	mov	r0, r4
 8011744:	f7fe ffcb 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm10.setLinespacing(0);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801174e:	2100      	movs	r1, #0
 8011750:	4618      	mov	r0, r3
 8011752:	f7ff f817 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm10.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 801175c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011760:	2113      	movs	r1, #19
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe ff52 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011768:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 801176c:	4620      	mov	r0, r4
 801176e:	f005 fbfd 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 53, 490, 5);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f503 6098 	add.w	r0, r3, #1216	; 0x4c0
 8011778:	2305      	movs	r3, #5
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8011780:	2235      	movs	r2, #53	; 0x35
 8011782:	f06f 0101 	mvn.w	r1, #1
 8011786:	f7fe fcdb 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011790:	22ff      	movs	r2, #255	; 0xff
 8011792:	21ff      	movs	r1, #255	; 0xff
 8011794:	20ff      	movs	r0, #255	; 0xff
 8011796:	f7ff fa6d 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801179a:	4603      	mov	r3, r0
 801179c:	22ff      	movs	r2, #255	; 0xff
 801179e:	4619      	mov	r1, r3
 80117a0:	4620      	mov	r0, r4
 80117a2:	f004 feb4 	bl	801650e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80117b2:	4619      	mov	r1, r3
 80117b4:	4610      	mov	r0, r2
 80117b6:	f004 ff13 	bl	80165e0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80117c0:	2203      	movs	r2, #3
 80117c2:	2100      	movs	r1, #0
 80117c4:	4618      	mov	r0, r3
 80117c6:	f000 fd51 	bl	801226c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80117d0:	2203      	movs	r2, #3
 80117d2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80117d6:	4618      	mov	r0, r3
 80117d8:	f000 fd6e 	bl	80122b8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80117e2:	2102      	movs	r1, #2
 80117e4:	4618      	mov	r0, r3
 80117e6:	f000 fd8d 	bl	8012304 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80117f0:	2101      	movs	r1, #1
 80117f2:	4618      	mov	r0, r3
 80117f4:	f005 fa0e 	bl	8016c14 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(46, 188);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80117fe:	22bc      	movs	r2, #188	; 0xbc
 8011800:	212e      	movs	r1, #46	; 0x2e
 8011802:	4618      	mov	r0, r3
 8011804:	f7fe fce7 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f203 544c 	addw	r4, r3, #1356	; 0x54c
 801180e:	2200      	movs	r2, #0
 8011810:	21dc      	movs	r1, #220	; 0xdc
 8011812:	20ff      	movs	r0, #255	; 0xff
 8011814:	f7ff fa2e 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011818:	4603      	mov	r3, r0
 801181a:	4619      	mov	r1, r3
 801181c:	4620      	mov	r0, r4
 801181e:	f7fe ff5e 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8011828:	2100      	movs	r1, #0
 801182a:	4618      	mov	r0, r3
 801182c:	f7fe ffaa 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f203 544c 	addw	r4, r3, #1356	; 0x54c
 8011836:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801183a:	2119      	movs	r1, #25
 801183c:	4618      	mov	r0, r3
 801183e:	f7fe fee5 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011842:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8011846:	4620      	mov	r0, r4
 8011848:	f005 fb90 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor.setXY(124, 188);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8011852:	22bc      	movs	r2, #188	; 0xbc
 8011854:	217c      	movs	r1, #124	; 0x7c
 8011856:	4618      	mov	r0, r3
 8011858:	f7fe fcbd 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f503 64b0 	add.w	r4, r3, #1408	; 0x580
 8011862:	2200      	movs	r2, #0
 8011864:	21dc      	movs	r1, #220	; 0xdc
 8011866:	20ff      	movs	r0, #255	; 0xff
 8011868:	f7ff fa04 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801186c:	4603      	mov	r3, r0
 801186e:	4619      	mov	r1, r3
 8011870:	4620      	mov	r0, r4
 8011872:	f7fe ff34 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor.setLinespacing(0);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 801187c:	2100      	movs	r1, #0
 801187e:	4618      	mov	r0, r3
 8011880:	f7fe ff80 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f503 64b0 	add.w	r4, r3, #1408	; 0x580
 801188a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801188e:	211a      	movs	r1, #26
 8011890:	4618      	mov	r0, r3
 8011892:	f7fe febb 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011896:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801189a:	4620      	mov	r0, r4
 801189c:	f005 fb66 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setXY(38, 153);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 80118a6:	2299      	movs	r2, #153	; 0x99
 80118a8:	2126      	movs	r1, #38	; 0x26
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fe fc93 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f203 54b4 	addw	r4, r3, #1460	; 0x5b4
 80118b6:	22ff      	movs	r2, #255	; 0xff
 80118b8:	21ff      	movs	r1, #255	; 0xff
 80118ba:	20ff      	movs	r0, #255	; 0xff
 80118bc:	f7ff f9da 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80118c0:	4603      	mov	r3, r0
 80118c2:	4619      	mov	r1, r3
 80118c4:	4620      	mov	r0, r4
 80118c6:	f7fe ff0a 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 80118d0:	2100      	movs	r1, #0
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7fe ff56 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f603 24ce 	addw	r4, r3, #2766	; 0xace
 80118de:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80118e2:	2116      	movs	r1, #22
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fe fe91 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80118ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fe fe9c 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 80118f4:	4603      	mov	r3, r0
 80118f6:	4ae4      	ldr	r2, [pc, #912]	; (8011c88 <_ZN12MainViewBaseC1Ev+0xfc0>)
 80118f8:	2105      	movs	r1, #5
 80118fa:	4620      	mov	r0, r4
 80118fc:	f008 fee0 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f203 52b4 	addw	r2, r3, #1460	; 0x5b4
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f603 23ce 	addw	r3, r3, #2766	; 0xace
 801190c:	4619      	mov	r1, r3
 801190e:	4610      	mov	r0, r2
 8011910:	f7fe ffc0 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.resizeToCurrentText();
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 801191a:	4618      	mov	r0, r3
 801191c:	f005 fafc 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f203 54b4 	addw	r4, r3, #1460	; 0x5b4
 8011926:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801192a:	2115      	movs	r1, #21
 801192c:	4618      	mov	r0, r3
 801192e:	f7fe fe6d 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011932:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8011936:	4620      	mov	r0, r4
 8011938:	f005 fb18 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setXY(107, 153);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8011942:	2299      	movs	r2, #153	; 0x99
 8011944:	216b      	movs	r1, #107	; 0x6b
 8011946:	4618      	mov	r0, r3
 8011948:	f7fe fc45 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f203 54ec 	addw	r4, r3, #1516	; 0x5ec
 8011952:	22ff      	movs	r2, #255	; 0xff
 8011954:	21ff      	movs	r1, #255	; 0xff
 8011956:	20ff      	movs	r0, #255	; 0xff
 8011958:	f7ff f98c 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801195c:	4603      	mov	r3, r0
 801195e:	4619      	mov	r1, r3
 8011960:	4620      	mov	r0, r4
 8011962:	f7fe febc 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 801196c:	2100      	movs	r1, #0
 801196e:	4618      	mov	r0, r3
 8011970:	f7fe ff08 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f603 24d8 	addw	r4, r3, #2776	; 0xad8
 801197a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801197e:	2118      	movs	r1, #24
 8011980:	4618      	mov	r0, r3
 8011982:	f7fe fe43 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011986:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801198a:	4618      	mov	r0, r3
 801198c:	f7fe fe4e 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011990:	4603      	mov	r3, r0
 8011992:	4abd      	ldr	r2, [pc, #756]	; (8011c88 <_ZN12MainViewBaseC1Ev+0xfc0>)
 8011994:	2105      	movs	r1, #5
 8011996:	4620      	mov	r0, r4
 8011998:	f008 fe92 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80119a8:	4619      	mov	r1, r3
 80119aa:	4610      	mov	r0, r2
 80119ac:	f7fe ff72 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.resizeToCurrentText();
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 80119b6:	4618      	mov	r0, r3
 80119b8:	f005 faae 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f203 54ec 	addw	r4, r3, #1516	; 0x5ec
 80119c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80119c6:	2117      	movs	r1, #23
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fe fe1f 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 80119ce:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 80119d2:	4620      	mov	r0, r4
 80119d4:	f005 faca 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 188);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80119de:	22bc      	movs	r2, #188	; 0xbc
 80119e0:	f240 1157 	movw	r1, #343	; 0x157
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fe fbf6 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f203 6424 	addw	r4, r3, #1572	; 0x624
 80119f0:	2200      	movs	r2, #0
 80119f2:	21dc      	movs	r1, #220	; 0xdc
 80119f4:	20ff      	movs	r0, #255	; 0xff
 80119f6:	f7ff f93d 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119fa:	4603      	mov	r3, r0
 80119fc:	4619      	mov	r1, r3
 80119fe:	4620      	mov	r0, r4
 8011a00:	f7fe fe6d 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe feb9 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f203 6424 	addw	r4, r3, #1572	; 0x624
 8011a18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011a1c:	211d      	movs	r1, #29
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fe fdf4 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011a24:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f005 fa9f 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 188);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8011a34:	22bc      	movs	r2, #188	; 0xbc
 8011a36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fe fbcb 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f503 64cb 	add.w	r4, r3, #1624	; 0x658
 8011a46:	2200      	movs	r2, #0
 8011a48:	21dc      	movs	r1, #220	; 0xdc
 8011a4a:	20ff      	movs	r0, #255	; 0xff
 8011a4c:	f7ff f912 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a50:	4603      	mov	r3, r0
 8011a52:	4619      	mov	r1, r3
 8011a54:	4620      	mov	r0, r4
 8011a56:	f7fe fe42 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8011a60:	2100      	movs	r1, #0
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fe fe8e 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f503 64cb 	add.w	r4, r3, #1624	; 0x658
 8011a6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011a72:	211e      	movs	r1, #30
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe fdc9 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011a7a:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f005 fa74 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setXY(328, 153);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8011a8a:	2299      	movs	r2, #153	; 0x99
 8011a8c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7fe fba0 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f203 648c 	addw	r4, r3, #1676	; 0x68c
 8011a9c:	22ff      	movs	r2, #255	; 0xff
 8011a9e:	21ff      	movs	r1, #255	; 0xff
 8011aa0:	20ff      	movs	r0, #255	; 0xff
 8011aa2:	f7ff f8e7 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f7fe fe17 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe fe63 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f603 24e2 	addw	r4, r3, #2786	; 0xae2
 8011ac4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011ac8:	2120      	movs	r1, #32
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fe fd9e 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011ad0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7fe fda9 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011ada:	4603      	mov	r3, r0
 8011adc:	4a6a      	ldr	r2, [pc, #424]	; (8011c88 <_ZN12MainViewBaseC1Ev+0xfc0>)
 8011ade:	2105      	movs	r1, #5
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f008 fded 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f203 628c 	addw	r2, r3, #1676	; 0x68c
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f603 23e2 	addw	r3, r3, #2786	; 0xae2
 8011af2:	4619      	mov	r1, r3
 8011af4:	4610      	mov	r0, r2
 8011af6:	f7fe fecd 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.resizeToCurrentText();
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8011b00:	4618      	mov	r0, r3
 8011b02:	f005 fa09 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f203 648c 	addw	r4, r3, #1676	; 0x68c
 8011b0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b10:	211f      	movs	r1, #31
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fe fd7a 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011b18:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f005 fa25 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setXY(414, 153);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8011b28:	2299      	movs	r2, #153	; 0x99
 8011b2a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fe fb51 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f203 64c4 	addw	r4, r3, #1732	; 0x6c4
 8011b3a:	22ff      	movs	r2, #255	; 0xff
 8011b3c:	21ff      	movs	r1, #255	; 0xff
 8011b3e:	20ff      	movs	r0, #255	; 0xff
 8011b40:	f7ff f898 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b44:	4603      	mov	r3, r0
 8011b46:	4619      	mov	r1, r3
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f7fe fdc8 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8011b54:	2100      	movs	r1, #0
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fe fe14 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID39).getText());
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f603 24ec 	addw	r4, r3, #2796	; 0xaec
 8011b62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011b66:	2122      	movs	r1, #34	; 0x22
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7fe fd4f 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011b6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fe fd5a 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	4a43      	ldr	r2, [pc, #268]	; (8011c88 <_ZN12MainViewBaseC1Ev+0xfc0>)
 8011b7c:	2105      	movs	r1, #5
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f008 fd9e 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f203 62c4 	addw	r2, r3, #1732	; 0x6c4
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8011b90:	4619      	mov	r1, r3
 8011b92:	4610      	mov	r0, r2
 8011b94:	f7fe fe7e 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.resizeToCurrentText();
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f005 f9ba 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f203 64c4 	addw	r4, r3, #1732	; 0x6c4
 8011baa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011bae:	2121      	movs	r1, #33	; 0x21
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fe fd2b 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011bb6:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f005 f9d6 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8011bc6:	22f0      	movs	r2, #240	; 0xf0
 8011bc8:	f240 1197 	movw	r1, #407	; 0x197
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fe fb02 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 8011bd8:	2200      	movs	r2, #0
 8011bda:	21dc      	movs	r1, #220	; 0xdc
 8011bdc:	20ff      	movs	r0, #255	; 0xff
 8011bde:	f7ff f849 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011be2:	4603      	mov	r3, r0
 8011be4:	4619      	mov	r1, r3
 8011be6:	4620      	mov	r0, r4
 8011be8:	f7fe fd79 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fe fdc5 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 8011c00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011c04:	2125      	movs	r1, #37	; 0x25
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fe fd00 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011c0c:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011c10:	4620      	mov	r0, r4
 8011c12:	f005 f9ab 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8011c1c:	22e2      	movs	r2, #226	; 0xe2
 8011c1e:	f240 116d 	movw	r1, #365	; 0x16d
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fe fad7 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f503 60e6 	add.w	r0, r3, #1840	; 0x730
 8011c2e:	230a      	movs	r3, #10
 8011c30:	9300      	str	r3, [sp, #0]
 8011c32:	2364      	movs	r3, #100	; 0x64
 8011c34:	2202      	movs	r2, #2
 8011c36:	2102      	movs	r1, #2
 8011c38:	f002 ff98 	bl	8014b6c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f503 60e6 	add.w	r0, r3, #1840	; 0x730
 8011c42:	2300      	movs	r3, #0
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	2300      	movs	r3, #0
 8011c48:	2264      	movs	r2, #100	; 0x64
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	f003 fa0c 	bl	8015068 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8011c56:	2100      	movs	r1, #0
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f002 ffe7 	bl	8014c2c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f503 64e6 	add.w	r4, r3, #1840	; 0x730
 8011c64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011c68:	2100      	movs	r1, #0
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fe fa0a 	bl	8010084 <_ZN8touchgfx6BitmapC1Et>
 8011c70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011c74:	4619      	mov	r1, r3
 8011c76:	4620      	mov	r0, r4
 8011c78:	f003 f9eb 	bl	8015052 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f503 64e6 	add.w	r4, r3, #1840	; 0x730
 8011c82:	2200      	movs	r2, #0
 8011c84:	21dc      	movs	r1, #220	; 0xdc
 8011c86:	e001      	b.n	8011c8c <_ZN12MainViewBaseC1Ev+0xfc4>
 8011c88:	08025ad0 	.word	0x08025ad0
 8011c8c:	20ff      	movs	r0, #255	; 0xff
 8011c8e:	f7fe fff1 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c92:	4603      	mov	r3, r0
 8011c94:	4619      	mov	r1, r3
 8011c96:	4620      	mov	r0, r4
 8011c98:	f002 ff12 	bl	8014ac0 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8011ca2:	213c      	movs	r1, #60	; 0x3c
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f002 ff79 	bl	8014b9c <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f503 60fe 	add.w	r0, r3, #2032	; 0x7f0
 8011cb0:	230a      	movs	r3, #10
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	23b4      	movs	r3, #180	; 0xb4
 8011cb6:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011cba:	210e      	movs	r1, #14
 8011cbc:	f7fe fa40 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f603 0464 	addw	r4, r3, #2148	; 0x864
 8011cc6:	22ff      	movs	r2, #255	; 0xff
 8011cc8:	21ff      	movs	r1, #255	; 0xff
 8011cca:	20ff      	movs	r0, #255	; 0xff
 8011ccc:	f7fe ffd2 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	22ff      	movs	r2, #255	; 0xff
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f004 fc19 	bl	801650e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f503 62fe 	add.w	r2, r3, #2032	; 0x7f0
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8011ce8:	4619      	mov	r1, r3
 8011cea:	4610      	mov	r0, r2
 8011cec:	f004 fc78 	bl	80165e0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8011cf6:	2205      	movs	r2, #5
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f000 fab6 	bl	801226c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8011d06:	2205      	movs	r2, #5
 8011d08:	21b4      	movs	r1, #180	; 0xb4
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f000 fad4 	bl	80122b8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8011d16:	2102      	movs	r1, #2
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f000 faf3 	bl	8012304 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8011d24:	2100      	movs	r1, #0
 8011d26:	4618      	mov	r0, r3
 8011d28:	f004 ff74 	bl	8016c14 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8011d32:	230a      	movs	r3, #10
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	23b4      	movs	r3, #180	; 0xb4
 8011d38:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011d3c:	f240 111f 	movw	r1, #287	; 0x11f
 8011d40:	f7fe f9fe 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f503 640f 	add.w	r4, r3, #2288	; 0x8f0
 8011d4a:	22ff      	movs	r2, #255	; 0xff
 8011d4c:	21ff      	movs	r1, #255	; 0xff
 8011d4e:	20ff      	movs	r0, #255	; 0xff
 8011d50:	f7fe ff90 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d54:	4603      	mov	r3, r0
 8011d56:	22ff      	movs	r2, #255	; 0xff
 8011d58:	4619      	mov	r1, r3
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f004 fbd7 	bl	801650e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f603 027c 	addw	r2, r3, #2172	; 0x87c
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	4610      	mov	r0, r2
 8011d70:	f004 fc36 	bl	80165e0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011d7a:	2205      	movs	r2, #5
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f000 fa74 	bl	801226c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011d8a:	2205      	movs	r2, #5
 8011d8c:	21b4      	movs	r1, #180	; 0xb4
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f000 fa92 	bl	80122b8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011d9a:	2102      	movs	r1, #2
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f000 fab1 	bl	8012304 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011da8:	2100      	movs	r1, #0
 8011daa:	4618      	mov	r0, r3
 8011dac:	f004 ff32 	bl	8016c14 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setXY(215, 247);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8011db6:	22f7      	movs	r2, #247	; 0xf7
 8011db8:	21d7      	movs	r1, #215	; 0xd7
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fe fa0b 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f603 1408 	addw	r4, r3, #2312	; 0x908
 8011dc6:	22ff      	movs	r2, #255	; 0xff
 8011dc8:	21ff      	movs	r1, #255	; 0xff
 8011dca:	20ff      	movs	r0, #255	; 0xff
 8011dcc:	f7fe ff52 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f7fe fc82 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8011de0:	2100      	movs	r1, #0
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fe fcce 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f603 24f6 	addw	r4, r3, #2806	; 0xaf6
 8011dee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011df2:	2127      	movs	r1, #39	; 0x27
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe fc09 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011dfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fe fc14 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011e04:	4603      	mov	r3, r0
 8011e06:	4ad5      	ldr	r2, [pc, #852]	; (801215c <_ZN12MainViewBaseC1Ev+0x1494>)
 8011e08:	2105      	movs	r1, #5
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f008 fc58 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f603 1208 	addw	r2, r3, #2312	; 0x908
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f603 23f6 	addw	r3, r3, #2806	; 0xaf6
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	4610      	mov	r0, r2
 8011e20:	f7fe fd38 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.resizeToCurrentText();
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f005 f874 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f603 1408 	addw	r4, r3, #2312	; 0x908
 8011e36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011e3a:	2126      	movs	r1, #38	; 0x26
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7fe fbe5 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011e42:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8011e46:	4620      	mov	r0, r4
 8011e48:	f005 f890 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(0, 0);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8011e52:	2200      	movs	r2, #0
 8011e54:	2100      	movs	r1, #0
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fe f9bd 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f503 6014 	add.w	r0, r3, #2368	; 0x940
 8011e62:	2337      	movs	r3, #55	; 0x37
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011e6a:	2202      	movs	r2, #2
 8011e6c:	2102      	movs	r1, #2
 8011e6e:	f002 ffcd 	bl	8014e0c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 10000);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f503 6014 	add.w	r0, r3, #2368	; 0x940
 8011e78:	2300      	movs	r3, #0
 8011e7a:	9300      	str	r3, [sp, #0]
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8011e82:	2100      	movs	r1, #0
 8011e84:	f003 f8f0 	bl	8015068 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8011e8e:	2100      	movs	r1, #0
 8011e90:	4618      	mov	r0, r3
 8011e92:	f002 fecb 	bl	8014c2c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_ID);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8011e9c:	2101      	movs	r1, #1
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f002 ff0f 	bl	8014cc2 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(9500);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8011eaa:	f242 511c 	movw	r1, #9500	; 0x251c
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f002 ffc4 	bl	8014e3c <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8011eba:	2101      	movs	r1, #1
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f002 fee9 	bl	8014c94 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setXY(29, 5);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8011ec8:	2205      	movs	r2, #5
 8011eca:	211d      	movs	r1, #29
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fe f982 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f503 6423 	add.w	r4, r3, #2608	; 0xa30
 8011ed8:	22ff      	movs	r2, #255	; 0xff
 8011eda:	21ff      	movs	r1, #255	; 0xff
 8011edc:	20ff      	movs	r0, #255	; 0xff
 8011ede:	f7fe fec9 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f7fe fbf9 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fc45 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8011f00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011f04:	2129      	movs	r1, #41	; 0x29
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fe fb80 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011f0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe fb8b 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8011f16:	4603      	mov	r3, r0
 8011f18:	4a90      	ldr	r2, [pc, #576]	; (801215c <_ZN12MainViewBaseC1Ev+0x1494>)
 8011f1a:	2105      	movs	r1, #5
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f008 fbcf 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f503 6223 	add.w	r2, r3, #2608	; 0xa30
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f2e:	4619      	mov	r1, r3
 8011f30:	4610      	mov	r0, r2
 8011f32:	f7fe fcaf 	bl	8010894 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.resizeToCurrentText();
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f004 ffeb 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f503 6423 	add.w	r4, r3, #2608	; 0xa30
 8011f48:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011f4c:	2128      	movs	r1, #40	; 0x28
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fe fb5c 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011f54:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f005 f807 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(76, 16);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8011f64:	2210      	movs	r2, #16
 8011f66:	214c      	movs	r1, #76	; 0x4c
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fe f934 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f603 2468 	addw	r4, r3, #2664	; 0xa68
 8011f74:	22ff      	movs	r2, #255	; 0xff
 8011f76:	21ff      	movs	r1, #255	; 0xff
 8011f78:	20ff      	movs	r0, #255	; 0xff
 8011f7a:	f7fe fe7b 	bl	8010c74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	4619      	mov	r1, r3
 8011f82:	4620      	mov	r0, r4
 8011f84:	f7fe fbab 	bl	80106de <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8011f8e:	2100      	movs	r1, #0
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fe fbf7 	bl	8010784 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f603 2468 	addw	r4, r3, #2664	; 0xa68
 8011f9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011fa0:	212a      	movs	r1, #42	; 0x2a
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fe fb32 	bl	801060c <_ZN8touchgfx9TypedTextC1Et>
 8011fa8:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8011fac:	4620      	mov	r0, r4
 8011fae:	f004 ffdd 	bl	8016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	3340      	adds	r3, #64	; 0x40
 8011fb8:	4619      	mov	r1, r3
 8011fba:	4610      	mov	r0, r2
 8011fbc:	f7fe fa6e 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3370      	adds	r3, #112	; 0x70
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	4610      	mov	r0, r2
 8011fca:	f7fe fa67 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	33a4      	adds	r3, #164	; 0xa4
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	f7fe fa60 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	33d8      	adds	r3, #216	; 0xd8
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	4610      	mov	r0, r2
 8011fe6:	f7fe fa59 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	f7fe fa51 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012002:	4619      	mov	r1, r3
 8012004:	4610      	mov	r0, r2
 8012006:	f7fe fa49 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8012012:	4619      	mov	r1, r3
 8012014:	4610      	mov	r0, r2
 8012016:	f7fe fa41 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 801201a:	687a      	ldr	r2, [r7, #4]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012022:	4619      	mov	r1, r3
 8012024:	4610      	mov	r0, r2
 8012026:	f7fe fa39 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaValue);
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012032:	4619      	mov	r1, r3
 8012034:	4610      	mov	r0, r2
 8012036:	f7fe fa31 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue);
 801203a:	687a      	ldr	r2, [r7, #4]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8012042:	4619      	mov	r1, r3
 8012044:	4610      	mov	r0, r2
 8012046:	f7fe fa29 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KmhValue);
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8012052:	4619      	mov	r1, r3
 8012054:	4610      	mov	r0, r2
 8012056:	f7fe fa21 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012062:	4619      	mov	r1, r3
 8012064:	4610      	mov	r0, r2
 8012066:	f7fe fa19 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 801206a:	687a      	ldr	r2, [r7, #4]
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012072:	4619      	mov	r1, r3
 8012074:	4610      	mov	r0, r2
 8012076:	f7fe fa11 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 801207a:	687a      	ldr	r2, [r7, #4]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8012082:	4619      	mov	r1, r3
 8012084:	4610      	mov	r0, r2
 8012086:	f7fe fa09 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8012092:	4619      	mov	r1, r3
 8012094:	4610      	mov	r0, r2
 8012096:	f7fe fa01 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80120a2:	4619      	mov	r1, r3
 80120a4:	4610      	mov	r0, r2
 80120a6:	f7fe f9f9 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80120b2:	4619      	mov	r1, r3
 80120b4:	4610      	mov	r0, r2
 80120b6:	f7fe f9f1 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80120ba:	687a      	ldr	r2, [r7, #4]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80120c2:	4619      	mov	r1, r3
 80120c4:	4610      	mov	r0, r2
 80120c6:	f7fe f9e9 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80120d2:	4619      	mov	r1, r3
 80120d4:	4610      	mov	r0, r2
 80120d6:	f7fe f9e1 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80120e2:	4619      	mov	r1, r3
 80120e4:	4610      	mov	r0, r2
 80120e6:	f7fe f9d9 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm9);
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80120f2:	4619      	mov	r1, r3
 80120f4:	4610      	mov	r0, r2
 80120f6:	f7fe f9d1 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm10);
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8012102:	4619      	mov	r1, r3
 8012104:	4610      	mov	r0, r2
 8012106:	f7fe f9c9 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8012112:	4619      	mov	r1, r3
 8012114:	4610      	mov	r0, r2
 8012116:	f7fe f9c1 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8012122:	4619      	mov	r1, r3
 8012124:	4610      	mov	r0, r2
 8012126:	f7fe f9b9 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor);
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8012132:	4619      	mov	r1, r3
 8012134:	4610      	mov	r0, r2
 8012136:	f7fe f9b1 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8012142:	4619      	mov	r1, r3
 8012144:	4610      	mov	r0, r2
 8012146:	f7fe f9a9 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8012152:	4619      	mov	r1, r3
 8012154:	4610      	mov	r0, r2
 8012156:	f7fe f9a1 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
 801215a:	e001      	b.n	8012160 <_ZN12MainViewBaseC1Ev+0x1498>
 801215c:	08025ad0 	.word	0x08025ad0
    add(IATDescriptor_1);
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8012168:	4619      	mov	r1, r3
 801216a:	4610      	mov	r0, r2
 801216c:	f7fe f996 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8012178:	4619      	mov	r1, r3
 801217a:	4610      	mov	r0, r2
 801217c:	f7fe f98e 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8012188:	4619      	mov	r1, r3
 801218a:	4610      	mov	r0, r2
 801218c:	f7fe f986 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8012198:	4619      	mov	r1, r3
 801219a:	4610      	mov	r0, r2
 801219c:	f7fe f97e 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80121a8:	4619      	mov	r1, r3
 80121aa:	4610      	mov	r0, r2
 80121ac:	f7fe f976 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 80121b8:	4619      	mov	r1, r3
 80121ba:	4610      	mov	r0, r2
 80121bc:	f7fe f96e 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 80121c8:	4619      	mov	r1, r3
 80121ca:	4610      	mov	r0, r2
 80121cc:	f7fe f966 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 80121d0:	687a      	ldr	r2, [r7, #4]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 80121d8:	4619      	mov	r1, r3
 80121da:	4610      	mov	r0, r2
 80121dc:	f7fe f95e 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80121e8:	4619      	mov	r1, r3
 80121ea:	4610      	mov	r0, r2
 80121ec:	f7fe f956 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80121f8:	4619      	mov	r1, r3
 80121fa:	4610      	mov	r0, r2
 80121fc:	f7fe f94e 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8012208:	4619      	mov	r1, r3
 801220a:	4610      	mov	r0, r2
 801220c:	f7fe f946 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8012218:	4619      	mov	r1, r3
 801221a:	4610      	mov	r0, r2
 801221c:	f7fe f93e 	bl	801049c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	4618      	mov	r0, r3
 8012224:	37cc      	adds	r7, #204	; 0xcc
 8012226:	46bd      	mov	sp, r7
 8012228:	bd90      	pop	{r4, r7, pc}
 801222a:	bf00      	nop

0801222c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]

}
 8012234:	bf00      	nop
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	4618      	mov	r0, r3
 801224c:	f007 f972 	bl	8019534 <_ZN8touchgfx6ScreenC1Ev>
 8012250:	4a05      	ldr	r2, [pc, #20]	; (8012268 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	601a      	str	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	08026010 	.word	0x08026010

0801226c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 801226c:	b590      	push	{r4, r7, lr}
 801226e:	b089      	sub	sp, #36	; 0x24
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	607a      	str	r2, [r7, #4]
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	015a      	lsls	r2, r3, #5
 8012280:	f107 0314 	add.w	r3, r7, #20
 8012284:	4611      	mov	r1, r2
 8012286:	4618      	mov	r0, r3
 8012288:	f7fe fb34 	bl	80108f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	461c      	mov	r4, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	61fb      	str	r3, [r7, #28]
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	015a      	lsls	r2, r3, #5
 8012298:	f107 0310 	add.w	r3, r7, #16
 801229c:	4611      	mov	r1, r2
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fe fb28 	bl	80108f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80122a4:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80122a6:	461a      	mov	r2, r3
 80122a8:	4621      	mov	r1, r4
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f004 fc9c 	bl	8016be8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80122b0:	bf00      	nop
 80122b2:	3724      	adds	r7, #36	; 0x24
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd90      	pop	{r4, r7, pc}

080122b8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80122b8:	b590      	push	{r4, r7, lr}
 80122ba:	b089      	sub	sp, #36	; 0x24
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	607a      	str	r2, [r7, #4]
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	61bb      	str	r3, [r7, #24]
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	015a      	lsls	r2, r3, #5
 80122cc:	f107 0314 	add.w	r3, r7, #20
 80122d0:	4611      	mov	r1, r2
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7fe fb0e 	bl	80108f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	461c      	mov	r4, r3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	61fb      	str	r3, [r7, #28]
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	015a      	lsls	r2, r3, #5
 80122e4:	f107 0310 	add.w	r3, r7, #16
 80122e8:	4611      	mov	r1, r2
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fe fb02 	bl	80108f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80122f0:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80122f2:	461a      	mov	r2, r3
 80122f4:	4621      	mov	r1, r4
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f004 fc81 	bl	8016bfe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80122fc:	bf00      	nop
 80122fe:	3724      	adds	r7, #36	; 0x24
 8012300:	46bd      	mov	sp, r7
 8012302:	bd90      	pop	{r4, r7, pc}

08012304 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012304:	b580      	push	{r7, lr}
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
 801230c:	6039      	str	r1, [r7, #0]
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	60fb      	str	r3, [r7, #12]
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	015a      	lsls	r2, r3, #5
 8012316:	f107 0308 	add.w	r3, r7, #8
 801231a:	4611      	mov	r1, r2
 801231c:	4618      	mov	r0, r3
 801231e:	f7fe fae9 	bl	80108f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012322:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012324:	4619      	mov	r1, r3
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7fe faff 	bl	801092a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 801232c:	bf00      	nop
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	4a05      	ldr	r2, [pc, #20]	; (8012354 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	601a      	str	r2, [r3, #0]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	4618      	mov	r0, r3
 8012346:	f7fe fa6d 	bl	8010824 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4618      	mov	r0, r3
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	08027bc4 	.word	0x08027bc4

08012358 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff ffe7 	bl	8012334 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012366:	2138      	movs	r1, #56	; 0x38
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f012 f916 	bl	802459a <_ZdlPvj>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4618      	mov	r0, r3
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	4a05      	ldr	r2, [pc, #20]	; (8012398 <_ZN8touchgfx4LineD1Ev+0x20>)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	601a      	str	r2, [r3, #0]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	f004 fa07 	bl	801679c <_ZN8touchgfx12CanvasWidgetD1Ev>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4618      	mov	r0, r3
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	08027970 	.word	0x08027970

0801239c <_ZN8touchgfx4LineD0Ev>:
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7ff ffe7 	bl	8012378 <_ZN8touchgfx4LineD1Ev>
 80123aa:	2174      	movs	r1, #116	; 0x74
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f012 f8f4 	bl	802459a <_ZdlPvj>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	4618      	mov	r0, r3
 80123b6:	3708      	adds	r7, #8
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	4a05      	ldr	r2, [pc, #20]	; (80123dc <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	601a      	str	r2, [r3, #0]
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7fe facf 	bl	8010970 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	4618      	mov	r0, r3
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	08027674 	.word	0x08027674

080123e0 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b082      	sub	sp, #8
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f7ff ffe7 	bl	80123bc <_ZN8touchgfx13PainterRGB888D1Ev>
 80123ee:	2118      	movs	r1, #24
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f012 f8d2 	bl	802459a <_ZdlPvj>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	4618      	mov	r0, r3
 80123fa:	3708      	adds	r7, #8
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012400:	b480      	push	{r7}
 8012402:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012404:	4b02      	ldr	r3, [pc, #8]	; (8012410 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012406:	4618      	mov	r0, r3
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr
 8012410:	0802617c 	.word	0x0802617c

08012414 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012414:	b480      	push	{r7}
 8012416:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012418:	2302      	movs	r3, #2
}
 801241a:	4618      	mov	r0, r3
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	60f8      	str	r0, [r7, #12]
 801242c:	60b9      	str	r1, [r7, #8]
 801242e:	4613      	mov	r3, r2
 8012430:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012432:	4a07      	ldr	r2, [pc, #28]	; (8012450 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012438:	4a06      	ldr	r2, [pc, #24]	; (8012454 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801243e:	4a06      	ldr	r2, [pc, #24]	; (8012458 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012440:	88fb      	ldrh	r3, [r7, #6]
 8012442:	8013      	strh	r3, [r2, #0]
    }
 8012444:	bf00      	nop
 8012446:	3714      	adds	r7, #20
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr
 8012450:	2000bcf8 	.word	0x2000bcf8
 8012454:	2000bd00 	.word	0x2000bd00
 8012458:	2000bcfc 	.word	0x2000bcfc

0801245c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801245c:	b590      	push	{r4, r7, lr}
 801245e:	b085      	sub	sp, #20
 8012460:	af00      	add	r7, sp, #0
 8012462:	4603      	mov	r3, r0
 8012464:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801246a:	88fb      	ldrh	r3, [r7, #6]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d127      	bne.n	80124c0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012470:	88fb      	ldrh	r3, [r7, #6]
 8012472:	4a1e      	ldr	r2, [pc, #120]	; (80124ec <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d016      	beq.n	80124aa <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801247c:	88fb      	ldrh	r3, [r7, #6]
 801247e:	4a1b      	ldr	r2, [pc, #108]	; (80124ec <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012484:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	4413      	add	r3, r2
 801248e:	4a18      	ldr	r2, [pc, #96]	; (80124f0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012490:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	68ba      	ldr	r2, [r7, #8]
 8012498:	4413      	add	r3, r2
 801249a:	4a16      	ldr	r2, [pc, #88]	; (80124f4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801249c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	68ba      	ldr	r2, [r7, #8]
 80124a4:	4413      	add	r3, r2
 80124a6:	60fb      	str	r3, [r7, #12]
 80124a8:	e00a      	b.n	80124c0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80124aa:	4b11      	ldr	r3, [pc, #68]	; (80124f0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80124ac:	4a12      	ldr	r2, [pc, #72]	; (80124f8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80124ae:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80124b0:	4a12      	ldr	r2, [pc, #72]	; (80124fc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80124b2:	4b10      	ldr	r3, [pc, #64]	; (80124f4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80124b4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80124b6:	88fb      	ldrh	r3, [r7, #6]
 80124b8:	4a11      	ldr	r2, [pc, #68]	; (8012500 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80124ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124be:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00d      	beq.n	80124e2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80124c6:	4a0f      	ldr	r2, [pc, #60]	; (8012504 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80124c8:	88fb      	ldrh	r3, [r7, #6]
 80124ca:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80124cc:	f000 f83e 	bl	801254c <_ZN17TypedTextDatabase8getFontsEv>
 80124d0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80124d2:	f000 f833 	bl	801253c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80124d6:	4603      	mov	r3, r0
 80124d8:	461a      	mov	r2, r3
 80124da:	4621      	mov	r1, r4
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f7ff ffa1 	bl	8012424 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80124e2:	bf00      	nop
 80124e4:	3714      	adds	r7, #20
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd90      	pop	{r4, r7, pc}
 80124ea:	bf00      	nop
 80124ec:	2000862c 	.word	0x2000862c
 80124f0:	20008634 	.word	0x20008634
 80124f4:	20008638 	.word	0x20008638
 80124f8:	08043fb4 	.word	0x08043fb4
 80124fc:	08043f08 	.word	0x08043f08
 8012500:	080440f4 	.word	0x080440f4
 8012504:	20008630 	.word	0x20008630

08012508 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	460b      	mov	r3, r1
 8012512:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012514:	4b07      	ldr	r3, [pc, #28]	; (8012534 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	4b07      	ldr	r3, [pc, #28]	; (8012538 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801251a:	6819      	ldr	r1, [r3, #0]
 801251c:	887b      	ldrh	r3, [r7, #2]
 801251e:	009b      	lsls	r3, r3, #2
 8012520:	440b      	add	r3, r1
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	005b      	lsls	r3, r3, #1
 8012526:	4413      	add	r3, r2
}
 8012528:	4618      	mov	r0, r3
 801252a:	370c      	adds	r7, #12
 801252c:	46bd      	mov	sp, r7
 801252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012532:	4770      	bx	lr
 8012534:	20008634 	.word	0x20008634
 8012538:	20008638 	.word	0x20008638

0801253c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801253c:	b480      	push	{r7}
 801253e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012540:	232b      	movs	r3, #43	; 0x2b
}
 8012542:	4618      	mov	r0, r3
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801254c:	b480      	push	{r7}
 801254e:	af00      	add	r7, sp, #0
    return _fonts;
 8012550:	4b02      	ldr	r3, [pc, #8]	; (801255c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012552:	4618      	mov	r0, r3
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr
 801255c:	2000863c 	.word	0x2000863c

08012560 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2b01      	cmp	r3, #1
 801256e:	d127      	bne.n	80125c0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012576:	4293      	cmp	r3, r2
 8012578:	d122      	bne.n	80125c0 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 801257a:	f7fc fed3 	bl	800f324 <_Z25getFont_Asap_Bold_18_4bppv>
 801257e:	4602      	mov	r2, r0
};
 8012580:	4b11      	ldr	r3, [pc, #68]	; (80125c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012582:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8012584:	f7fc ff94 	bl	800f4b0 <_Z25getFont_Asap_Bold_40_4bppv>
 8012588:	4602      	mov	r2, r0
};
 801258a:	4b0f      	ldr	r3, [pc, #60]	; (80125c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801258c:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 801258e:	f7fc ff4d 	bl	800f42c <_Z25getFont_Asap_Bold_30_4bppv>
 8012592:	4602      	mov	r2, r0
};
 8012594:	4b0c      	ldr	r3, [pc, #48]	; (80125c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012596:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8012598:	f7fc fe82 	bl	800f2a0 <_Z25getFont_Asap_Bold_12_4bppv>
 801259c:	4602      	mov	r2, r0
};
 801259e:	4b0a      	ldr	r3, [pc, #40]	; (80125c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80125a0:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 80125a2:	f7fc ffc7 	bl	800f534 <_Z25getFont_Asap_Bold_60_4bppv>
 80125a6:	4602      	mov	r2, r0
};
 80125a8:	4b07      	ldr	r3, [pc, #28]	; (80125c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80125aa:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 80125ac:	f7fc fefc 	bl	800f3a8 <_Z25getFont_Asap_Bold_21_4bppv>
 80125b0:	4602      	mov	r2, r0
};
 80125b2:	4b05      	ldr	r3, [pc, #20]	; (80125c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80125b4:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 80125b6:	f7fc fe31 	bl	800f21c <_Z25getFont_Asap_Bold_10_4bppv>
 80125ba:	4602      	mov	r2, r0
};
 80125bc:	4b02      	ldr	r3, [pc, #8]	; (80125c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80125be:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 80125c0:	bf00      	nop
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	2000863c 	.word	0x2000863c

080125cc <_GLOBAL__sub_I__fonts>:
 80125cc:	b580      	push	{r7, lr}
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80125d4:	2001      	movs	r0, #1
 80125d6:	f7ff ffc3 	bl	8012560 <_Z41__static_initialization_and_destruction_0ii>
 80125da:	bd80      	pop	{r7, pc}

080125dc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	4a05      	ldr	r2, [pc, #20]	; (80125fc <_ZN19FrontendApplicationD1Ev+0x20>)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	601a      	str	r2, [r3, #0]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7fd fa31 	bl	800fa54 <_ZN23FrontendApplicationBaseD1Ev>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	4618      	mov	r0, r3
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	080261ac 	.word	0x080261ac

08012600 <_ZN19FrontendApplicationD0Ev>:
 8012600:	b580      	push	{r7, lr}
 8012602:	b082      	sub	sp, #8
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7ff ffe7 	bl	80125dc <_ZN19FrontendApplicationD1Ev>
 801260e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f011 ffc1 	bl	802459a <_ZdlPvj>
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	4618      	mov	r0, r3
 801261c:	3708      	adds	r7, #8
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012622:	b580      	push	{r7, lr}
 8012624:	b082      	sub	sp, #8
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012630:	4618      	mov	r0, r3
 8012632:	f000 faf5 	bl	8012c20 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4618      	mov	r0, r3
 801263a:	f005 feff 	bl	801843c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801263e:	bf00      	nop
 8012640:	3708      	adds	r7, #8
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
	...

08012648 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	68b9      	ldr	r1, [r7, #8]
 801265a:	4618      	mov	r0, r3
 801265c:	f7fd fa74 	bl	800fb48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012660:	4a03      	ldr	r2, [pc, #12]	; (8012670 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	601a      	str	r2, [r3, #0]
{
}
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	080261ac 	.word	0x080261ac

08012674 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
    {
    }
 801267c:	bf00      	nop
 801267e:	370c      	adds	r7, #12
 8012680:	46bd      	mov	sp, r7
 8012682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012686:	4770      	bx	lr

08012688 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
    {
    }
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr

0801269c <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801269c:	b480      	push	{r7}
 801269e:	b083      	sub	sp, #12
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
    {
 80126a4:	4a04      	ldr	r2, [pc, #16]	; (80126b8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	601a      	str	r2, [r3, #0]
    }
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4618      	mov	r0, r3
 80126ae:	370c      	adds	r7, #12
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr
 80126b8:	0802622c 	.word	0x0802622c

080126bc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
    }
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f7ff ffe9 	bl	801269c <_ZN8touchgfx9PresenterD1Ev>
 80126ca:	2104      	movs	r1, #4
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f011 ff64 	bl	802459a <_ZdlPvj>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4618      	mov	r0, r3
 80126d6:	3708      	adds	r7, #8
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
    {
 80126e4:	4a04      	ldr	r2, [pc, #16]	; (80126f8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	601a      	str	r2, [r3, #0]
    }
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4618      	mov	r0, r3
 80126ee:	370c      	adds	r7, #12
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr
 80126f8:	0802622c 	.word	0x0802622c

080126fc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	4a06      	ldr	r2, [pc, #24]	; (8012720 <_ZN13ModelListenerC1Ev+0x24>)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	601a      	str	r2, [r3, #0]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	605a      	str	r2, [r3, #4]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4618      	mov	r0, r3
 8012714:	370c      	adds	r7, #12
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	08026218 	.word	0x08026218

08012724 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012724:	b480      	push	{r7}
 8012726:	b083      	sub	sp, #12
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	4a04      	ldr	r2, [pc, #16]	; (8012740 <_ZN13ModelListenerD1Ev+0x1c>)
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr
 8012740:	08026218 	.word	0x08026218

08012744 <_ZN13ModelListenerD0Ev>:
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7ff ffe9 	bl	8012724 <_ZN13ModelListenerD1Ev>
 8012752:	2108      	movs	r1, #8
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f011 ff20 	bl	802459a <_ZdlPvj>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	4618      	mov	r0, r3
 801275e:	3708      	adds	r7, #8
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
 801276e:	bf00      	nop
 8012770:	370c      	adds	r7, #12
 8012772:	46bd      	mov	sp, r7
 8012774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012778:	4770      	bx	lr
	...

0801277c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	4a09      	ldr	r2, [pc, #36]	; (80127ac <_ZN13MainPresenterD1Ev+0x30>)
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	601a      	str	r2, [r3, #0]
 801278a:	4a09      	ldr	r2, [pc, #36]	; (80127b0 <_ZN13MainPresenterD1Ev+0x34>)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	605a      	str	r2, [r3, #4]
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	3304      	adds	r3, #4
 8012794:	4618      	mov	r0, r3
 8012796:	f7ff ffc5 	bl	8012724 <_ZN13ModelListenerD1Ev>
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4618      	mov	r0, r3
 801279e:	f7ff ff7d 	bl	801269c <_ZN8touchgfx9PresenterD1Ev>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	080261e8 	.word	0x080261e8
 80127b0:	08026204 	.word	0x08026204

080127b4 <_ZThn4_N13MainPresenterD1Ev>:
 80127b4:	f1a0 0004 	sub.w	r0, r0, #4
 80127b8:	e7e0      	b.n	801277c <_ZN13MainPresenterD1Ev>
 80127ba:	bf00      	nop

080127bc <_ZN13MainPresenterD0Ev>:
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7ff ffd9 	bl	801277c <_ZN13MainPresenterD1Ev>
 80127ca:	2110      	movs	r1, #16
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f011 fee4 	bl	802459a <_ZdlPvj>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	4618      	mov	r0, r3
 80127d6:	3708      	adds	r7, #8
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}

080127dc <_ZThn4_N13MainPresenterD0Ev>:
 80127dc:	f1a0 0004 	sub.w	r0, r0, #4
 80127e0:	e7ec      	b.n	80127bc <_ZN13MainPresenterD0Ev>
	...

080127e4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
    : view(v)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7ff ff73 	bl	80126dc <_ZN8touchgfx9PresenterC1Ev>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	3304      	adds	r3, #4
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7ff ff7e 	bl	80126fc <_ZN13ModelListenerC1Ev>
 8012800:	4a06      	ldr	r2, [pc, #24]	; (801281c <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	601a      	str	r2, [r3, #0]
 8012806:	4a06      	ldr	r2, [pc, #24]	; (8012820 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	605a      	str	r2, [r3, #4]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	683a      	ldr	r2, [r7, #0]
 8012810:	60da      	str	r2, [r3, #12]
{
}
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4618      	mov	r0, r3
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	080261e8 	.word	0x080261e8
 8012820:	08026204 	.word	0x08026204

08012824 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8012824:	b480      	push	{r7}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
}
 801282c:	bf00      	nop
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
}
 8012840:	bf00      	nop
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	6839      	ldr	r1, [r7, #0]
 801285c:	4618      	mov	r0, r3
 801285e:	f000 f8a9 	bl	80129b4 <_ZN8MainView9updateValEPh>
}
 8012862:	bf00      	nop
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 801286a:	f1a0 0004 	sub.w	r0, r0, #4
 801286e:	f7ff bfed 	b.w	801284c <_ZN13MainPresenter11setNewValueEPh>

08012872 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012872:	b580      	push	{r7, lr}
 8012874:	b084      	sub	sp, #16
 8012876:	af00      	add	r7, sp, #0
 8012878:	60f8      	str	r0, [r7, #12]
 801287a:	460b      	mov	r3, r1
 801287c:	607a      	str	r2, [r7, #4]
 801287e:	ed87 0a00 	vstr	s0, [r7]
 8012882:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012884:	463b      	mov	r3, r7
 8012886:	8979      	ldrh	r1, [r7, #10]
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f008 f872 	bl	801a974 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012890:	4603      	mov	r3, r0
    }
 8012892:	4618      	mov	r0, r3
 8012894:	3710      	adds	r7, #16
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}

0801289a <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801289a:	b480      	push	{r7}
 801289c:	b083      	sub	sp, #12
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
        return rect.width;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80128a8:	4618      	mov	r0, r3
 80128aa:	370c      	adds	r7, #12
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
        return rect.height;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80128c2:	4618      	mov	r0, r3
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
	...

080128d0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	4a05      	ldr	r2, [pc, #20]	; (80128f0 <_ZN8MainViewD1Ev+0x20>)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	601a      	str	r2, [r3, #0]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fe f8ab 	bl	8010a3c <_ZN12MainViewBaseD1Ev>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	08026244 	.word	0x08026244

080128f4 <_ZN8MainViewD0Ev>:
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff ffe7 	bl	80128d0 <_ZN8MainViewD1Ev>
 8012902:	f242 712c 	movw	r1, #10028	; 0x272c
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f011 fe47 	bl	802459a <_ZdlPvj>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	4618      	mov	r0, r3
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
	...

08012918 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8012918:	b590      	push	{r4, r7, lr}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	4618      	mov	r0, r3
 8012924:	f7fe f9d0 	bl	8010cc8 <_ZN12MainViewBaseC1Ev>
 8012928:	4a15      	ldr	r2, [pc, #84]	; (8012980 <_ZN8MainViewC1Ev+0x68>)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 801292e:	4b15      	ldr	r3, [pc, #84]	; (8012984 <_ZN8MainViewC1Ev+0x6c>)
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	461c      	mov	r4, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff ffad 	bl	801289a <_ZNK8touchgfx8Drawable8getWidthEv>
 8012940:	4603      	mov	r3, r0
 8012942:	429c      	cmp	r4, r3
 8012944:	dc0b      	bgt.n	801295e <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012946:	4b10      	ldr	r3, [pc, #64]	; (8012988 <_ZN8MainViewC1Ev+0x70>)
 8012948:	881b      	ldrh	r3, [r3, #0]
 801294a:	461c      	mov	r4, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012952:	4618      	mov	r0, r3
 8012954:	f7ff ffae 	bl	80128b4 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012958:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 801295a:	429c      	cmp	r4, r3
 801295c:	dd01      	ble.n	8012962 <_ZN8MainViewC1Ev+0x4a>
 801295e:	2301      	movs	r3, #1
 8012960:	e000      	b.n	8012964 <_ZN8MainViewC1Ev+0x4c>
 8012962:	2300      	movs	r3, #0
 8012964:	2b00      	cmp	r3, #0
 8012966:	d005      	beq.n	8012974 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	3340      	adds	r3, #64	; 0x40
 801296c:	2101      	movs	r1, #1
 801296e:	4618      	mov	r0, r3
 8012970:	f7fd fca2 	bl	80102b8 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	4618      	mov	r0, r3
 8012978:	370c      	adds	r7, #12
 801297a:	46bd      	mov	sp, r7
 801297c:	bd90      	pop	{r4, r7, pc}
 801297e:	bf00      	nop
 8012980:	08026244 	.word	0x08026244
 8012984:	2000bc5c 	.word	0x2000bc5c
 8012988:	2000bc5e 	.word	0x2000bc5e

0801298c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
}
 8012994:	bf00      	nop
 8012996:	370c      	adds	r7, #12
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 80129a0:	b480      	push	{r7}
 80129a2:	b083      	sub	sp, #12
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
}
 80129a8:	bf00      	nop
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <_ZN8MainView9updateValEPh>:
   int	  tps;
   int	  batt_v;
} display_values;

void MainView::updateVal(uint8_t* newValue)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
	display_values* values = (display_values*) newValue;
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	60fb      	str	r3, [r7, #12]

	RPMProgressBar.setValue(values->rpm);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f503 6214 	add.w	r2, r3, #2368	; 0x940
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4619      	mov	r1, r3
 80129ce:	4610      	mov	r0, r2
 80129d0:	f002 fa34 	bl	8014e3c <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80129da:	4618      	mov	r0, r3
 80129dc:	f006 fa42 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f503 6030 	add.w	r0, r3, #2816	; 0xb00
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a80      	ldr	r2, [pc, #512]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 80129ec:	2105      	movs	r1, #5
 80129ee:	f007 fe67 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.resizeToCurrentText();
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80129f8:	4618      	mov	r0, r3
 80129fa:	f004 fa8d 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	RPMValue.invalidate();
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8012a04:	4618      	mov	r0, r3
 8012a06:	f006 fa2d 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KpaValueBuffer, KPAVALUE_SIZE, "%d", values->map);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f503 602b 	add.w	r0, r3, #2736	; 0xab0
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	4a75      	ldr	r2, [pc, #468]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 8012a16:	2105      	movs	r1, #5
 8012a18:	f007 fe52 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KpaValue.resizeToCurrentText();
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012a22:	4618      	mov	r0, r3
 8012a24:	f004 fa78 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	KpaValue.invalidate();
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f006 fa18 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CltValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f603 20ba 	addw	r0, r3, #2746	; 0xaba
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	4a6b      	ldr	r2, [pc, #428]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 8012a40:	2105      	movs	r1, #5
 8012a42:	f007 fe3d 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CltValue.resizeToCurrentText();
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f004 fa63 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	CltValue.invalidate();
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f006 fa03 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f603 209c 	addw	r0, r3, #2716	; 0xa9c
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	edd3 7a03 	vldr	s15, [r3, #12]
 8012a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8012a6e:	4a60      	ldr	r2, [pc, #384]	; (8012bf0 <_ZN8MainView9updateValEPh+0x23c>)
 8012a70:	2105      	movs	r1, #5
 8012a72:	f7ff fefe 	bl	8012872 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.resizeToCurrentText();
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f004 fa4b 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	LambdaValue.invalidate();
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f006 f9eb 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f603 20a6 	addw	r0, r3, #2726	; 0xaa6
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	edd3 7a04 	vldr	s15, [r3, #16]
 8012a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8012a9e:	4a54      	ldr	r2, [pc, #336]	; (8012bf0 <_ZN8MainView9updateValEPh+0x23c>)
 8012aa0:	2105      	movs	r1, #5
 8012aa2:	f7ff fee6 	bl	8012872 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.resizeToCurrentText();
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012aac:	4618      	mov	r0, r3
 8012aae:	f004 fa33 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	TrgtValue.invalidate();
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f006 f9d3 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KmhValueBuffer, KMHVALUE_SIZE, "%d",values->vehicle_spd);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	695b      	ldr	r3, [r3, #20]
 8012ac8:	4a48      	ldr	r2, [pc, #288]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 8012aca:	2105      	movs	r1, #5
 8012acc:	f007 fdf8 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KmhValue.resizeToCurrentText();
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f004 fa1e 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	KmhValue.invalidate();
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f006 f9be 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%d",values->oil_press);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f603 20ec 	addw	r0, r3, #2796	; 0xaec
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	69db      	ldr	r3, [r3, #28]
 8012af2:	4a3e      	ldr	r2, [pc, #248]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 8012af4:	2105      	movs	r1, #5
 8012af6:	f007 fde3 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILPressureValue.resizeToCurrentText();
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8012b00:	4618      	mov	r0, r3
 8012b02:	f004 fa09 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	OILPressureValue.invalidate();
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f006 f9a9 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f603 20e2 	addw	r0, r3, #2786	; 0xae2
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	699b      	ldr	r3, [r3, #24]
 8012b1c:	4a33      	ldr	r2, [pc, #204]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 8012b1e:	2105      	movs	r1, #5
 8012b20:	f007 fdce 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILTempValue.resizeToCurrentText();
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f004 f9f4 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	OILTempValue.invalidate();
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8012b36:	4618      	mov	r0, r3
 8012b38:	f006 f994 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f603 20ce 	addw	r0, r3, #2766	; 0xace
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	6a1b      	ldr	r3, [r3, #32]
 8012b46:	4a29      	ldr	r2, [pc, #164]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 8012b48:	2105      	movs	r1, #5
 8012b4a:	f007 fdb9 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.resizeToCurrentText();
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8012b54:	4618      	mov	r0, r3
 8012b56:	f004 f9df 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	IATValue.invalidate();
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8012b60:	4618      	mov	r0, r3
 8012b62:	f006 f97f 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f603 20d8 	addw	r0, r3, #2776	; 0xad8
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b70:	4a1e      	ldr	r2, [pc, #120]	; (8012bec <_ZN8MainView9updateValEPh+0x238>)
 8012b72:	2105      	movs	r1, #5
 8012b74:	f007 fda4 	bl	801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EGTValue.resizeToCurrentText();
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f004 f9ca 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	EGTValue.invalidate();
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f006 f96a 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f503 62e6 	add.w	r2, r3, #1840	; 0x730
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	4610      	mov	r0, r2
 8012b9e:	f001 fffd 	bl	8014b9c <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f006 f95b 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f603 20f6 	addw	r0, r3, #2806	; 0xaf6
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb8:	ee07 3a90 	vmov	s15, r3
 8012bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8012bc4:	4a0a      	ldr	r2, [pc, #40]	; (8012bf0 <_ZN8MainView9updateValEPh+0x23c>)
 8012bc6:	2105      	movs	r1, #5
 8012bc8:	f7ff fe53 	bl	8012872 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.resizeToCurrentText();
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f004 f9a0 	bl	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	BatteryVoltage.invalidate();
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8012bde:	4618      	mov	r0, r3
 8012be0:	f006 f940 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012be4:	bf00      	nop
 8012be6:	3710      	adds	r7, #16
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}
 8012bec:	08025bb0 	.word	0x08025bb0
 8012bf0:	08025bb4 	.word	0x08025bb4

08012bf4 <_ZN5ModelC1Ev>:
extern "C"
{
	xQueueHandle messageQ;
}

Model::Model() : modelListener(0)
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8012c02:	2200      	movs	r2, #0
 8012c04:	2130      	movs	r1, #48	; 0x30
 8012c06:	2001      	movs	r0, #1
 8012c08:	f7f9 fdeb 	bl	800c7e2 <xQueueGenericCreate>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	4b03      	ldr	r3, [pc, #12]	; (8012c1c <_ZN5ModelC1Ev+0x28>)
 8012c10:	601a      	str	r2, [r3, #0]
}
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20008688 	.word	0x20008688

08012c20 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8012c28:	4b0e      	ldr	r3, [pc, #56]	; (8012c64 <_ZN5Model4tickEv+0x44>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	490e      	ldr	r1, [pc, #56]	; (8012c68 <_ZN5Model4tickEv+0x48>)
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7fa f867 	bl	800cd04 <xQueueReceive>
 8012c36:	4603      	mov	r3, r0
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	bf0c      	ite	eq
 8012c3c:	2301      	moveq	r3, #1
 8012c3e:	2300      	movne	r3, #0
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d009      	beq.n	8012c5a <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	3308      	adds	r3, #8
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4904      	ldr	r1, [pc, #16]	; (8012c68 <_ZN5Model4tickEv+0x48>)
 8012c56:	4610      	mov	r0, r2
 8012c58:	4798      	blx	r3

		// something to update
	}
}
 8012c5a:	bf00      	nop
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	20008688 	.word	0x20008688
 8012c68:	20008658 	.word	0x20008658

08012c6c <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
    {
 8012c74:	4a04      	ldr	r2, [pc, #16]	; (8012c88 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	601a      	str	r2, [r3, #0]
    }
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr
 8012c88:	08026290 	.word	0x08026290

08012c8c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
    }
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7ff ffe9 	bl	8012c6c <_ZN8touchgfx15TouchControllerD1Ev>
 8012c9a:	2104      	movs	r1, #4
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f011 fc7c 	bl	802459a <_ZdlPvj>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3708      	adds	r7, #8
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012cb4:	bf00      	nop
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b085      	sub	sp, #20
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	60b9      	str	r1, [r7, #8]
 8012cca:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3714      	adds	r7, #20
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr
	...

08012cdc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	4a05      	ldr	r2, [pc, #20]	; (8012cfc <_ZN20STM32TouchControllerD1Ev+0x20>)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	601a      	str	r2, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7ff ffbd 	bl	8012c6c <_ZN8touchgfx15TouchControllerD1Ev>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	08026278 	.word	0x08026278

08012d00 <_ZN20STM32TouchControllerD0Ev>:
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7ff ffe7 	bl	8012cdc <_ZN20STM32TouchControllerD1Ev>
 8012d0e:	2104      	movs	r1, #4
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f011 fc42 	bl	802459a <_ZdlPvj>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	4603      	mov	r3, r0
 8012d28:	71fb      	strb	r3, [r7, #7]

}
 8012d2a:	bf00      	nop
 8012d2c:	370c      	adds	r7, #12
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr

08012d36 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012d36:	b480      	push	{r7}
 8012d38:	b083      	sub	sp, #12
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	71fb      	strb	r3, [r7, #7]

}
 8012d40:	bf00      	nop
 8012d42:	370c      	adds	r7, #12
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr

08012d4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	4603      	mov	r3, r0
 8012d54:	71fb      	strb	r3, [r7, #7]

}
 8012d56:	bf00      	nop
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr
	...

08012d64 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
    {
 8012d6c:	4a04      	ldr	r2, [pc, #16]	; (8012d80 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	601a      	str	r2, [r3, #0]
    }
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	4618      	mov	r0, r3
 8012d76:	370c      	adds	r7, #12
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7e:	4770      	bx	lr
 8012d80:	08027048 	.word	0x08027048

08012d84 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
    }
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f7ff ffe9 	bl	8012d64 <_ZN8touchgfx3HALD1Ev>
 8012d92:	2178      	movs	r1, #120	; 0x78
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f011 fc00 	bl	802459a <_ZdlPvj>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3708      	adds	r7, #8
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	460b      	mov	r3, r1
 8012dae:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	78fa      	ldrb	r2, [r7, #3]
 8012db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2201      	movs	r2, #1
 8012dbc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012dc0:	bf00      	nop
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685a      	ldr	r2, [r3, #4]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4610      	mov	r0, r2
 8012de2:	4798      	blx	r3
 8012de4:	4603      	mov	r3, r0
    }
 8012de6:	4618      	mov	r0, r3
 8012de8:	3708      	adds	r7, #8
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}

08012dee <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8012dee:	b580      	push	{r7, lr}
 8012df0:	b082      	sub	sp, #8
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f003 f92a 	bl	8016050 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	3390      	adds	r3, #144	; 0x90
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	4798      	blx	r3
    }
 8012e08:	bf00      	nop
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	6039      	str	r1, [r7, #0]
    {
        return false;
 8012e1a:	2300      	movs	r3, #0
    }
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	370c      	adds	r7, #12
 8012e20:	46bd      	mov	sp, r7
 8012e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e26:	4770      	bx	lr

08012e28 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8012e28:	b590      	push	{r4, r7, lr}
 8012e2a:	b08b      	sub	sp, #44	; 0x2c
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	4611      	mov	r1, r2
 8012e34:	461a      	mov	r2, r3
 8012e36:	460b      	mov	r3, r1
 8012e38:	80fb      	strh	r3, [r7, #6]
 8012e3a:	4613      	mov	r3, r2
 8012e3c:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8012e3e:	f7fc fcbb 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8012e42:	4602      	mov	r2, r0
 8012e44:	6813      	ldr	r3, [r2, #0]
 8012e46:	3328      	adds	r3, #40	; 0x28
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	4610      	mov	r0, r2
 8012e4c:	4798      	blx	r3
 8012e4e:	4603      	mov	r3, r0
 8012e50:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8012e52:	8b7b      	ldrh	r3, [r7, #26]
 8012e54:	4a3d      	ldr	r2, [pc, #244]	; (8012f4c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8012e56:	8812      	ldrh	r2, [r2, #0]
 8012e58:	fb02 f303 	mul.w	r3, r2, r3
 8012e5c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8012e66:	2300      	movs	r3, #0
 8012e68:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8012e6a:	797b      	ldrb	r3, [r7, #5]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d005      	beq.n	8012e7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8012e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	4413      	add	r3, r2
 8012e76:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8012e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7a:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8012e7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d005      	beq.n	8012e90 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8012e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	4413      	add	r3, r2
 8012e8a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8e:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8012e90:	88fb      	ldrh	r3, [r7, #6]
 8012e92:	3b01      	subs	r3, #1
 8012e94:	2b1f      	cmp	r3, #31
 8012e96:	d84d      	bhi.n	8012f34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8012e98:	a201      	add	r2, pc, #4	; (adr r2, 8012ea0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8012e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e9e:	bf00      	nop
 8012ea0:	08012f21 	.word	0x08012f21
 8012ea4:	08012f21 	.word	0x08012f21
 8012ea8:	08012f35 	.word	0x08012f35
 8012eac:	08012f21 	.word	0x08012f21
 8012eb0:	08012f35 	.word	0x08012f35
 8012eb4:	08012f35 	.word	0x08012f35
 8012eb8:	08012f35 	.word	0x08012f35
 8012ebc:	08012f21 	.word	0x08012f21
 8012ec0:	08012f35 	.word	0x08012f35
 8012ec4:	08012f35 	.word	0x08012f35
 8012ec8:	08012f35 	.word	0x08012f35
 8012ecc:	08012f35 	.word	0x08012f35
 8012ed0:	08012f35 	.word	0x08012f35
 8012ed4:	08012f35 	.word	0x08012f35
 8012ed8:	08012f35 	.word	0x08012f35
 8012edc:	08012f21 	.word	0x08012f21
 8012ee0:	08012f35 	.word	0x08012f35
 8012ee4:	08012f35 	.word	0x08012f35
 8012ee8:	08012f35 	.word	0x08012f35
 8012eec:	08012f35 	.word	0x08012f35
 8012ef0:	08012f35 	.word	0x08012f35
 8012ef4:	08012f35 	.word	0x08012f35
 8012ef8:	08012f35 	.word	0x08012f35
 8012efc:	08012f21 	.word	0x08012f21
 8012f00:	08012f35 	.word	0x08012f35
 8012f04:	08012f35 	.word	0x08012f35
 8012f08:	08012f35 	.word	0x08012f35
 8012f0c:	08012f35 	.word	0x08012f35
 8012f10:	08012f35 	.word	0x08012f35
 8012f14:	08012f35 	.word	0x08012f35
 8012f18:	08012f35 	.word	0x08012f35
 8012f1c:	08012f21 	.word	0x08012f21
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	3374      	adds	r3, #116	; 0x74
 8012f26:	681c      	ldr	r4, [r3, #0]
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	6a3a      	ldr	r2, [r7, #32]
 8012f2c:	68b9      	ldr	r1, [r7, #8]
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	47a0      	blx	r4
            break;
 8012f32:	e006      	b.n	8012f42 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8012f34:	4b06      	ldr	r3, [pc, #24]	; (8012f50 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8012f36:	4a07      	ldr	r2, [pc, #28]	; (8012f54 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8012f38:	f240 3125 	movw	r1, #805	; 0x325
 8012f3c:	4806      	ldr	r0, [pc, #24]	; (8012f58 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8012f3e:	f011 fb57 	bl	80245f0 <__assert_func>
            break;
        }
    }
 8012f42:	bf00      	nop
 8012f44:	372c      	adds	r7, #44	; 0x2c
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd90      	pop	{r4, r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	2000bc64 	.word	0x2000bc64
 8012f50:	08025bbc 	.word	0x08025bbc
 8012f54:	080263a4 	.word	0x080263a4
 8012f58:	08025bdc 	.word	0x08025bdc

08012f5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
 8012f68:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d106      	bne.n	8012f7e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012f70:	4b11      	ldr	r3, [pc, #68]	; (8012fb8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8012f72:	4a12      	ldr	r2, [pc, #72]	; (8012fbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012f74:	f240 3137 	movw	r1, #823	; 0x337
 8012f78:	4811      	ldr	r0, [pc, #68]	; (8012fc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8012f7a:	f011 fb39 	bl	80245f0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68ba      	ldr	r2, [r7, #8]
 8012f82:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	683a      	ldr	r2, [r7, #0]
 8012f8e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	bf14      	ite	ne
 8012f96:	2301      	movne	r3, #1
 8012f98:	2300      	moveq	r3, #0
 8012f9a:	b2da      	uxtb	r2, r3
 8012f9c:	4b09      	ldr	r3, [pc, #36]	; (8012fc4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8012f9e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	bf14      	ite	ne
 8012fa6:	2301      	movne	r3, #1
 8012fa8:	2300      	moveq	r3, #0
 8012faa:	b2da      	uxtb	r2, r3
 8012fac:	4b06      	ldr	r3, [pc, #24]	; (8012fc8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8012fae:	701a      	strb	r2, [r3, #0]
    }
 8012fb0:	bf00      	nop
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	08025c20 	.word	0x08025c20
 8012fbc:	08026354 	.word	0x08026354
 8012fc0:	08025bdc 	.word	0x08025bdc
 8012fc4:	2000bc66 	.word	0x2000bc66
 8012fc8:	2000bc67 	.word	0x2000bc67

08012fcc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d004      	beq.n	8012fea <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fe4:	887a      	ldrh	r2, [r7, #2]
 8012fe6:	4610      	mov	r0, r2
 8012fe8:	4798      	blx	r3
        }
    }
 8012fea:	bf00      	nop
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}

08012ff2 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b082      	sub	sp, #8
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	685a      	ldr	r2, [r3, #4]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	3318      	adds	r3, #24
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	4610      	mov	r0, r2
 801300a:	4798      	blx	r3
 801300c:	4603      	mov	r3, r0
    }
 801300e:	4618      	mov	r0, r3
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
	...

08013018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801302c:	429a      	cmp	r2, r3
 801302e:	d017      	beq.n	8013060 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013030:	4b1a      	ldr	r3, [pc, #104]	; (801309c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d12a      	bne.n	801308e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013038:	4b19      	ldr	r3, [pc, #100]	; (80130a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801303a:	881a      	ldrh	r2, [r3, #0]
 801303c:	4b19      	ldr	r3, [pc, #100]	; (80130a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801303e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013040:	4b19      	ldr	r3, [pc, #100]	; (80130a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013042:	881a      	ldrh	r2, [r3, #0]
 8013044:	4b19      	ldr	r3, [pc, #100]	; (80130ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013046:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013048:	4b16      	ldr	r3, [pc, #88]	; (80130a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801304a:	881a      	ldrh	r2, [r3, #0]
 801304c:	4b16      	ldr	r3, [pc, #88]	; (80130a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801304e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013050:	4b16      	ldr	r3, [pc, #88]	; (80130ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013052:	881a      	ldrh	r2, [r3, #0]
 8013054:	4b12      	ldr	r3, [pc, #72]	; (80130a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013056:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013058:	4b10      	ldr	r3, [pc, #64]	; (801309c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801305a:	2201      	movs	r2, #1
 801305c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801305e:	e016      	b.n	801308e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013060:	4b0e      	ldr	r3, [pc, #56]	; (801309c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d012      	beq.n	801308e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013068:	4b0f      	ldr	r3, [pc, #60]	; (80130a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801306a:	881a      	ldrh	r2, [r3, #0]
 801306c:	4b0d      	ldr	r3, [pc, #52]	; (80130a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801306e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013070:	4b0b      	ldr	r3, [pc, #44]	; (80130a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013072:	881a      	ldrh	r2, [r3, #0]
 8013074:	4b0d      	ldr	r3, [pc, #52]	; (80130ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013076:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013078:	4b0c      	ldr	r3, [pc, #48]	; (80130ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801307a:	881a      	ldrh	r2, [r3, #0]
 801307c:	4b0a      	ldr	r3, [pc, #40]	; (80130a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801307e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013080:	4b08      	ldr	r3, [pc, #32]	; (80130a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013082:	881a      	ldrh	r2, [r3, #0]
 8013084:	4b06      	ldr	r3, [pc, #24]	; (80130a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013086:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013088:	4b04      	ldr	r3, [pc, #16]	; (801309c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801308a:	2200      	movs	r2, #0
 801308c:	701a      	strb	r2, [r3, #0]
    }
 801308e:	bf00      	nop
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	2000bc60 	.word	0x2000bc60
 80130a0:	2000bc5c 	.word	0x2000bc5c
 80130a4:	2000bc62 	.word	0x2000bc62
 80130a8:	2000bc5e 	.word	0x2000bc5e
 80130ac:	2000bc64 	.word	0x2000bc64

080130b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	4618      	mov	r0, r3
 80130bc:	f002 fa4a 	bl	8015554 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80130c0:	bf00      	nop
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	4a05      	ldr	r2, [pc, #20]	; (80130e8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	601a      	str	r2, [r3, #0]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4618      	mov	r0, r3
 80130da:	f7ff fe43 	bl	8012d64 <_ZN8touchgfx3HALD1Ev>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	4618      	mov	r0, r3
 80130e2:	3708      	adds	r7, #8
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	0802657c 	.word	0x0802657c

080130ec <_ZN20TouchGFXGeneratedHALD0Ev>:
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff ffe7 	bl	80130c8 <_ZN20TouchGFXGeneratedHALD1Ev>
 80130fa:	2178      	movs	r1, #120	; 0x78
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f011 fa4c 	bl	802459a <_ZdlPvj>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	4618      	mov	r0, r3
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff ffca 	bl	80130b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801311c:	bf00      	nop
 801311e:	3708      	adds	r7, #8
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	4618      	mov	r0, r3
 8013130:	f001 fb18 	bl	8014764 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013134:	bf00      	nop
 8013136:	3708      	adds	r7, #8
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	4618      	mov	r0, r3
 8013148:	f001 fb98 	bl	801487c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801314c:	4603      	mov	r3, r0
}
 801314e:	4618      	mov	r0, r3
 8013150:	3708      	adds	r7, #8
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}

08013156 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013156:	b580      	push	{r7, lr}
 8013158:	b082      	sub	sp, #8
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
 801315e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6839      	ldr	r1, [r7, #0]
 8013164:	4618      	mov	r0, r3
 8013166:	f001 fb97 	bl	8014898 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801316a:	bf00      	nop
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b082      	sub	sp, #8
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6839      	ldr	r1, [r7, #0]
 8013180:	4618      	mov	r0, r3
 8013182:	f001 fb9f 	bl	80148c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8013186:	bf00      	nop
 8013188:	3708      	adds	r7, #8
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b082      	sub	sp, #8
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4618      	mov	r0, r3
 801319a:	f001 fb15 	bl	80147c8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801319e:	bf00      	nop
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b082      	sub	sp, #8
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f001 fb19 	bl	80147e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80131b6:	bf00      	nop
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f001 fb1b 	bl	8014804 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80131ce:	bf00      	nop
 80131d0:	3708      	adds	r7, #8
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b082      	sub	sp, #8
 80131da:	af00      	add	r7, sp, #0
 80131dc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f001 fb1d 	bl	8014820 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80131e6:	bf00      	nop
 80131e8:	3708      	adds	r7, #8
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
	...

080131f0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	4a05      	ldr	r2, [pc, #20]	; (8013210 <_ZN11TouchGFXHALD1Ev+0x20>)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff ff61 	bl	80130c8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	4618      	mov	r0, r3
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	080262a8 	.word	0x080262a8

08013214 <_ZN11TouchGFXHALD0Ev>:
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7ff ffe7 	bl	80131f0 <_ZN11TouchGFXHALD1Ev>
 8013222:	2178      	movs	r1, #120	; 0x78
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f011 f9b8 	bl	802459a <_ZdlPvj>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4618      	mov	r0, r3
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013234:	b580      	push	{r7, lr}
 8013236:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8013238:	2203      	movs	r2, #3
 801323a:	2100      	movs	r1, #0
 801323c:	2001      	movs	r0, #1
 801323e:	f7f9 fad0 	bl	800c7e2 <xQueueGenericCreate>
 8013242:	4602      	mov	r2, r0
 8013244:	4b0b      	ldr	r3, [pc, #44]	; (8013274 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013246:	601a      	str	r2, [r3, #0]
 8013248:	4b0a      	ldr	r3, [pc, #40]	; (8013274 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d006      	beq.n	801325e <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8013250:	4b08      	ldr	r3, [pc, #32]	; (8013274 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013252:	6818      	ldr	r0, [r3, #0]
 8013254:	2300      	movs	r3, #0
 8013256:	2200      	movs	r2, #0
 8013258:	2100      	movs	r1, #0
 801325a:	f7f9 fb23 	bl	800c8a4 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801325e:	2200      	movs	r2, #0
 8013260:	2101      	movs	r1, #1
 8013262:	2001      	movs	r0, #1
 8013264:	f7f9 fabd 	bl	800c7e2 <xQueueGenericCreate>
 8013268:	4602      	mov	r2, r0
 801326a:	4b03      	ldr	r3, [pc, #12]	; (8013278 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 801326c:	601a      	str	r2, [r3, #0]
}
 801326e:	bf00      	nop
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	2000868c 	.word	0x2000868c
 8013278:	20008690 	.word	0x20008690

0801327c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801327c:	b580      	push	{r7, lr}
 801327e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8013280:	4b04      	ldr	r3, [pc, #16]	; (8013294 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	f04f 31ff 	mov.w	r1, #4294967295
 8013288:	4618      	mov	r0, r3
 801328a:	f7f9 fe1d 	bl	800cec8 <xQueueSemaphoreTake>
}
 801328e:	bf00      	nop
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	2000868c 	.word	0x2000868c

08013298 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013298:	b580      	push	{r7, lr}
 801329a:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 801329c:	4b04      	ldr	r3, [pc, #16]	; (80132b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 801329e:	6818      	ldr	r0, [r3, #0]
 80132a0:	2300      	movs	r3, #0
 80132a2:	2200      	movs	r2, #0
 80132a4:	2100      	movs	r1, #0
 80132a6:	f7f9 fafd 	bl	800c8a4 <xQueueGenericSend>
}
 80132aa:	bf00      	nop
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	2000868c 	.word	0x2000868c

080132b4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80132b8:	4b03      	ldr	r3, [pc, #12]	; (80132c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2100      	movs	r1, #0
 80132be:	4618      	mov	r0, r3
 80132c0:	f7f9 fe02 	bl	800cec8 <xQueueSemaphoreTake>
}
 80132c4:	bf00      	nop
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	2000868c 	.word	0x2000868c

080132cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80132d2:	2300      	movs	r3, #0
 80132d4:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80132d6:	4b0b      	ldr	r3, [pc, #44]	; (8013304 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	1d3a      	adds	r2, r7, #4
 80132dc:	4611      	mov	r1, r2
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f9 fc7e 	bl	800cbe0 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d007      	beq.n	80132fa <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80132ea:	4b07      	ldr	r3, [pc, #28]	; (8013308 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80132ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132f0:	601a      	str	r2, [r3, #0]
 80132f2:	f3bf 8f4f 	dsb	sy
 80132f6:	f3bf 8f6f 	isb	sy
}
 80132fa:	bf00      	nop
 80132fc:	3708      	adds	r7, #8
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}
 8013302:	bf00      	nop
 8013304:	2000868c 	.word	0x2000868c
 8013308:	e000ed04 	.word	0xe000ed04

0801330c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
    if (vsync_q)
 8013312:	4b0e      	ldr	r3, [pc, #56]	; (801334c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d013      	beq.n	8013342 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801331a:	2300      	movs	r3, #0
 801331c:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 801331e:	4b0b      	ldr	r3, [pc, #44]	; (801334c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013320:	6818      	ldr	r0, [r3, #0]
 8013322:	1d3a      	adds	r2, r7, #4
 8013324:	2300      	movs	r3, #0
 8013326:	490a      	ldr	r1, [pc, #40]	; (8013350 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8013328:	f7f9 fbbe 	bl	800caa8 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d007      	beq.n	8013342 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8013332:	4b08      	ldr	r3, [pc, #32]	; (8013354 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8013334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013338:	601a      	str	r2, [r3, #0]
 801333a:	f3bf 8f4f 	dsb	sy
 801333e:	f3bf 8f6f 	isb	sy
    }
}
 8013342:	bf00      	nop
 8013344:	3708      	adds	r7, #8
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	20008690 	.word	0x20008690
 8013350:	20000038 	.word	0x20000038
 8013354:	e000ed04 	.word	0xe000ed04

08013358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013358:	b580      	push	{r7, lr}
 801335a:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 801335c:	4b08      	ldr	r3, [pc, #32]	; (8013380 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	2200      	movs	r2, #0
 8013362:	4908      	ldr	r1, [pc, #32]	; (8013384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013364:	4618      	mov	r0, r3
 8013366:	f7f9 fccd 	bl	800cd04 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801336a:	4b05      	ldr	r3, [pc, #20]	; (8013380 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f04f 32ff 	mov.w	r2, #4294967295
 8013372:	4904      	ldr	r1, [pc, #16]	; (8013384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013374:	4618      	mov	r0, r3
 8013376:	f7f9 fcc5 	bl	800cd04 <xQueueReceive>
}
 801337a:	bf00      	nop
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	20008690 	.word	0x20008690
 8013384:	20000038 	.word	0x20000038

08013388 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	4603      	mov	r3, r0
 8013390:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8013392:	88fb      	ldrh	r3, [r7, #6]
 8013394:	4618      	mov	r0, r3
 8013396:	f7fa f9f5 	bl	800d784 <vTaskDelay>
}
 801339a:	bf00      	nop
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
	...

080133a4 <__NVIC_EnableIRQ>:
{
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	4603      	mov	r3, r0
 80133ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80133ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	db0d      	blt.n	80133d2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80133b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133ba:	b2db      	uxtb	r3, r3
 80133bc:	f003 021f 	and.w	r2, r3, #31
 80133c0:	4907      	ldr	r1, [pc, #28]	; (80133e0 <__NVIC_EnableIRQ+0x3c>)
 80133c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133c6:	095b      	lsrs	r3, r3, #5
 80133c8:	2001      	movs	r0, #1
 80133ca:	fa00 f202 	lsl.w	r2, r0, r2
 80133ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80133d2:	bf00      	nop
 80133d4:	370c      	adds	r7, #12
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop
 80133e0:	e000e100 	.word	0xe000e100

080133e4 <__NVIC_DisableIRQ>:
{
 80133e4:	b480      	push	{r7}
 80133e6:	b083      	sub	sp, #12
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	4603      	mov	r3, r0
 80133ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80133ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	db12      	blt.n	801341c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80133f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	f003 021f 	and.w	r2, r3, #31
 8013400:	4909      	ldr	r1, [pc, #36]	; (8013428 <__NVIC_DisableIRQ+0x44>)
 8013402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013406:	095b      	lsrs	r3, r3, #5
 8013408:	2001      	movs	r0, #1
 801340a:	fa00 f202 	lsl.w	r2, r0, r2
 801340e:	3320      	adds	r3, #32
 8013410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013418:	f3bf 8f6f 	isb	sy
}
 801341c:	bf00      	nop
 801341e:	370c      	adds	r7, #12
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr
 8013428:	e000e100 	.word	0xe000e100

0801342c <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2200      	movs	r2, #0
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4618      	mov	r0, r3
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8013448:	b480      	push	{r7}
 801344a:	b083      	sub	sp, #12
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
        return color;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
    }
 8013454:	4618      	mov	r0, r3
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	b29b      	uxth	r3, r3
    }
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr
	...

0801347c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
    {
 8013484:	4a04      	ldr	r2, [pc, #16]	; (8013498 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	601a      	str	r2, [r3, #0]
    }
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr
 8013498:	08026450 	.word	0x08026450

0801349c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
    }
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7ff ffe9 	bl	801347c <_ZN8touchgfx9DMA_QueueD1Ev>
 80134aa:	2104      	movs	r1, #4
 80134ac:	6878      	ldr	r0, [r7, #4]
 80134ae:	f011 f874 	bl	802459a <_ZdlPvj>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	4618      	mov	r0, r3
 80134b6:	3708      	adds	r7, #8
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	3344      	adds	r3, #68	; 0x44
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	4798      	blx	r3
    }
 80134d0:	bf00      	nop
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80134e0:	2300      	movs	r3, #0
    }
 80134e2:	4618      	mov	r0, r3
 80134e4:	370c      	adds	r7, #12
 80134e6:	46bd      	mov	sp, r7
 80134e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ec:	4770      	bx	lr
	...

080134f0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
    {
 80134f8:	4a04      	ldr	r2, [pc, #16]	; (801350c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	601a      	str	r2, [r3, #0]
    }
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	4618      	mov	r0, r3
 8013502:	370c      	adds	r7, #12
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr
 801350c:	0802748c 	.word	0x0802748c

08013510 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    }
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f7ff ffe9 	bl	80134f0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801351e:	210c      	movs	r1, #12
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f011 f83a 	bl	802459a <_ZdlPvj>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	4618      	mov	r0, r3
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013530:	b480      	push	{r7}
 8013532:	b083      	sub	sp, #12
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801353a:	4a09      	ldr	r2, [pc, #36]	; (8013560 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	601a      	str	r2, [r3, #0]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	683a      	ldr	r2, [r7, #0]
 8013544:	605a      	str	r2, [r3, #4]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2200      	movs	r2, #0
 801354a:	721a      	strb	r2, [r3, #8]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	725a      	strb	r2, [r3, #9]
    {
    }
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	4618      	mov	r0, r3
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr
 8013560:	0802748c 	.word	0x0802748c

08013564 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	685a      	ldr	r2, [r3, #4]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	3314      	adds	r3, #20
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	4610      	mov	r0, r2
 801357c:	4798      	blx	r3
    }
 801357e:	bf00      	nop
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}

08013586 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013586:	b580      	push	{r7, lr}
 8013588:	b082      	sub	sp, #8
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	3328      	adds	r3, #40	; 0x28
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4610      	mov	r0, r2
 801359a:	4798      	blx	r3
    }
 801359c:	bf00      	nop
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b085      	sub	sp, #20
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	607a      	str	r2, [r7, #4]
 80135b0:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80135bc:	68ba      	ldr	r2, [r7, #8]
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	430a      	orrs	r2, r1
 80135c4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135cc:	f023 0107 	bic.w	r1, r3, #7
 80135d0:	687a      	ldr	r2, [r7, #4]
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	430a      	orrs	r2, r1
 80135d8:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80135e0:	4b06      	ldr	r3, [pc, #24]	; (80135fc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80135e2:	4013      	ands	r3, r2
 80135e4:	6839      	ldr	r1, [r7, #0]
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	6812      	ldr	r2, [r2, #0]
 80135ea:	430b      	orrs	r3, r1
 80135ec:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80135ee:	2300      	movs	r3, #0
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3714      	adds	r7, #20
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr
 80135fc:	ffffc000 	.word	0xffffc000

08013600 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013608:	f7fc f8ca 	bl	800f7a0 <_ZN8touchgfx3HAL11getInstanceEv>
 801360c:	4603      	mov	r3, r0
 801360e:	4618      	mov	r0, r3
 8013610:	f7ff ffa8 	bl	8013564 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013614:	bf00      	nop
 8013616:	3708      	adds	r7, #8
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
    assert(0);
 8013624:	4b02      	ldr	r3, [pc, #8]	; (8013630 <DMA2D_XferErrorCallback+0x14>)
 8013626:	4a03      	ldr	r2, [pc, #12]	; (8013634 <DMA2D_XferErrorCallback+0x18>)
 8013628:	213e      	movs	r1, #62	; 0x3e
 801362a:	4803      	ldr	r0, [pc, #12]	; (8013638 <DMA2D_XferErrorCallback+0x1c>)
 801362c:	f010 ffe0 	bl	80245f0 <__assert_func>
 8013630:	08025c58 	.word	0x08025c58
 8013634:	0802646c 	.word	0x0802646c
 8013638:	08025c5c 	.word	0x08025c5c

0801363c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	3318      	adds	r3, #24
 8013648:	4618      	mov	r0, r3
 801364a:	f7ff feef 	bl	801342c <_ZN8touchgfx9colortypeC1Ev>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	4618      	mov	r0, r3
 8013652:	3708      	adds	r7, #8
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}

08013658 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8013658:	b5b0      	push	{r4, r5, r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	330c      	adds	r3, #12
 8013666:	4619      	mov	r1, r3
 8013668:	4610      	mov	r0, r2
 801366a:	f7ff ff61 	bl	8013530 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801366e:	4a0e      	ldr	r2, [pc, #56]	; (80136a8 <_ZN10STM32F7DMAC1Ev+0x50>)
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	601a      	str	r2, [r3, #0]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f103 000c 	add.w	r0, r3, #12
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	3320      	adds	r3, #32
 801367e:	2260      	movs	r2, #96	; 0x60
 8013680:	4619      	mov	r1, r3
 8013682:	f002 fe0b 	bl	801629c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	3320      	adds	r3, #32
 801368a:	245f      	movs	r4, #95	; 0x5f
 801368c:	461d      	mov	r5, r3
 801368e:	2c00      	cmp	r4, #0
 8013690:	db05      	blt.n	801369e <_ZN10STM32F7DMAC1Ev+0x46>
 8013692:	4628      	mov	r0, r5
 8013694:	f7ff ffd2 	bl	801363c <_ZN8touchgfx6BlitOpC1Ev>
 8013698:	3520      	adds	r5, #32
 801369a:	3c01      	subs	r4, #1
 801369c:	e7f7      	b.n	801368e <_ZN10STM32F7DMAC1Ev+0x36>
{}
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	4618      	mov	r0, r3
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bdb0      	pop	{r4, r5, r7, pc}
 80136a8:	08026400 	.word	0x08026400

080136ac <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	4a0b      	ldr	r2, [pc, #44]	; (80136e4 <_ZN10STM32F7DMAD1Ev+0x38>)
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80136ba:	480b      	ldr	r0, [pc, #44]	; (80136e8 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80136bc:	f7f1 fc52 	bl	8004f64 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80136c0:	205a      	movs	r0, #90	; 0x5a
 80136c2:	f7ff fe8f 	bl	80133e4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	330c      	adds	r3, #12
 80136ca:	4618      	mov	r0, r3
 80136cc:	f000 faa0 	bl	8013c10 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff ff0c 	bl	80134f0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4618      	mov	r0, r3
 80136dc:	3708      	adds	r7, #8
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	08026400 	.word	0x08026400
 80136e8:	2000c4ec 	.word	0x2000c4ec

080136ec <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
}
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7ff ffd9 	bl	80136ac <_ZN10STM32F7DMAD1Ev>
 80136fa:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f010 ff4b 	bl	802459a <_ZdlPvj>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	4618      	mov	r0, r3
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
	...

08013710 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013718:	4b09      	ldr	r3, [pc, #36]	; (8013740 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801371a:	4a0a      	ldr	r2, [pc, #40]	; (8013744 <_ZN10STM32F7DMA10initializeEv+0x34>)
 801371c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801371e:	4808      	ldr	r0, [pc, #32]	; (8013740 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013720:	f7f1 fbd6 	bl	8004ed0 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013724:	4b06      	ldr	r3, [pc, #24]	; (8013740 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013726:	4a08      	ldr	r2, [pc, #32]	; (8013748 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013728:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801372a:	4b05      	ldr	r3, [pc, #20]	; (8013740 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801372c:	4a07      	ldr	r2, [pc, #28]	; (801374c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801372e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013730:	205a      	movs	r0, #90	; 0x5a
 8013732:	f7ff fe37 	bl	80133a4 <__NVIC_EnableIRQ>
}
 8013736:	bf00      	nop
 8013738:	3708      	adds	r7, #8
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	bf00      	nop
 8013740:	2000c4ec 	.word	0x2000c4ec
 8013744:	4002b000 	.word	0x4002b000
 8013748:	08013601 	.word	0x08013601
 801374c:	0801361d 	.word	0x0801361d

08013750 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8013750:	b480      	push	{r7}
 8013752:	b083      	sub	sp, #12
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013758:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 801375c:	4618      	mov	r0, r3
 801375e:	370c      	adds	r7, #12
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr

08013768 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013768:	b590      	push	{r4, r7, lr}
 801376a:	b08d      	sub	sp, #52	; 0x34
 801376c:	af02      	add	r7, sp, #8
 801376e:	6078      	str	r0, [r7, #4]
 8013770:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8013772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013776:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013780:	2b20      	cmp	r3, #32
 8013782:	d007      	beq.n	8013794 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2b40      	cmp	r3, #64	; 0x40
 801378a:	d003      	beq.n	8013794 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	2b04      	cmp	r3, #4
 8013792:	d101      	bne.n	8013798 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8013794:	2301      	movs	r3, #1
 8013796:	e000      	b.n	801379a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8013798:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801379a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80137a0:	2b80      	cmp	r3, #128	; 0x80
 80137a2:	d004      	beq.n	80137ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137ac:	d101      	bne.n	80137b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80137b2:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80137b4:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80137b6:	f7fb ffff 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 80137ba:	4602      	mov	r2, r0
 80137bc:	6813      	ldr	r3, [r2, #0]
 80137be:	3320      	adds	r3, #32
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	4610      	mov	r0, r2
 80137c4:	4798      	blx	r3
 80137c6:	4603      	mov	r3, r0
 80137c8:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	2b40      	cmp	r3, #64	; 0x40
 80137d0:	d01d      	beq.n	801380e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80137d2:	2b40      	cmp	r3, #64	; 0x40
 80137d4:	d804      	bhi.n	80137e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80137d6:	2b04      	cmp	r3, #4
 80137d8:	d00e      	beq.n	80137f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80137da:	2b20      	cmp	r3, #32
 80137dc:	d017      	beq.n	801380e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80137de:	e019      	b.n	8013814 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80137e0:	2b80      	cmp	r3, #128	; 0x80
 80137e2:	d003      	beq.n	80137ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80137e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137e8:	d003      	beq.n	80137f2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80137ea:	e013      	b.n	8013814 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80137ec:	230a      	movs	r3, #10
 80137ee:	623b      	str	r3, [r7, #32]
        break;
 80137f0:	e01a      	b.n	8013828 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80137f2:	2309      	movs	r3, #9
 80137f4:	623b      	str	r3, [r7, #32]
        break;
 80137f6:	e017      	b.n	8013828 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80137f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80137fc:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80137fe:	7f7b      	ldrb	r3, [r7, #29]
 8013800:	2b10      	cmp	r3, #16
 8013802:	d101      	bne.n	8013808 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013804:	2302      	movs	r3, #2
 8013806:	e000      	b.n	801380a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013808:	2301      	movs	r3, #1
 801380a:	623b      	str	r3, [r7, #32]
        break;
 801380c:	e00c      	b.n	8013828 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 801380e:	2300      	movs	r3, #0
 8013810:	623b      	str	r3, [r7, #32]
        break;
 8013812:	e009      	b.n	8013828 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013814:	2300      	movs	r3, #0
 8013816:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013818:	7f7b      	ldrb	r3, [r7, #29]
 801381a:	2b10      	cmp	r3, #16
 801381c:	d101      	bne.n	8013822 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 801381e:	2302      	movs	r3, #2
 8013820:	e000      	b.n	8013824 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8013822:	2301      	movs	r3, #1
 8013824:	623b      	str	r3, [r7, #32]
        break;
 8013826:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013828:	4a76      	ldr	r2, [pc, #472]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801382e:	7f7b      	ldrb	r3, [r7, #29]
 8013830:	2b10      	cmp	r3, #16
 8013832:	d101      	bne.n	8013838 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013834:	2302      	movs	r3, #2
 8013836:	e000      	b.n	801383a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013838:	2301      	movs	r3, #1
 801383a:	4a72      	ldr	r2, [pc, #456]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801383c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	8adb      	ldrh	r3, [r3, #22]
 8013842:	461a      	mov	r2, r3
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	8a1b      	ldrh	r3, [r3, #16]
 8013848:	1ad3      	subs	r3, r2, r3
 801384a:	461a      	mov	r2, r3
 801384c:	4b6d      	ldr	r3, [pc, #436]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801384e:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013850:	7f7b      	ldrb	r3, [r7, #29]
 8013852:	2b10      	cmp	r3, #16
 8013854:	d101      	bne.n	801385a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8013856:	2202      	movs	r2, #2
 8013858:	e000      	b.n	801385c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801385a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	8adb      	ldrh	r3, [r3, #22]
 8013860:	4619      	mov	r1, r3
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	8a1b      	ldrh	r3, [r3, #16]
 8013866:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801386a:	4866      	ldr	r0, [pc, #408]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801386c:	f7ff fe9a 	bl	80135a4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013870:	4a64      	ldr	r2, [pc, #400]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013872:	6a3b      	ldr	r3, [r7, #32]
 8013874:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	8a9b      	ldrh	r3, [r3, #20]
 801387a:	461a      	mov	r2, r3
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	8a1b      	ldrh	r3, [r3, #16]
 8013880:	1ad3      	subs	r3, r2, r3
 8013882:	461a      	mov	r2, r3
 8013884:	4b5f      	ldr	r3, [pc, #380]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013886:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8013888:	7ffb      	ldrb	r3, [r7, #31]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d103      	bne.n	8013896 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801388e:	7fbb      	ldrb	r3, [r7, #30]
 8013890:	2b00      	cmp	r3, #0
 8013892:	f000 8082 	beq.w	801399a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	7f1b      	ldrb	r3, [r3, #28]
 801389a:	2bff      	cmp	r3, #255	; 0xff
 801389c:	d008      	beq.n	80138b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801389e:	4b59      	ldr	r3, [pc, #356]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80138a0:	2202      	movs	r2, #2
 80138a2:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	7f1b      	ldrb	r3, [r3, #28]
 80138a8:	461a      	mov	r2, r3
 80138aa:	4b56      	ldr	r3, [pc, #344]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80138ac:	635a      	str	r2, [r3, #52]	; 0x34
 80138ae:	e002      	b.n	80138b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80138b0:	4b54      	ldr	r3, [pc, #336]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80138b2:	2200      	movs	r2, #0
 80138b4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80138b6:	7fbb      	ldrb	r3, [r7, #30]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d059      	beq.n	8013970 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80138bc:	7f7b      	ldrb	r3, [r7, #29]
 80138be:	2b10      	cmp	r3, #16
 80138c0:	d14a      	bne.n	8013958 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	3318      	adds	r3, #24
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7ff fdca 	bl	8013460 <_ZNK8touchgfx9colortypecvtEv>
 80138cc:	4603      	mov	r3, r0
 80138ce:	12db      	asrs	r3, r3, #11
 80138d0:	f003 021f 	and.w	r2, r3, #31
 80138d4:	4613      	mov	r3, r2
 80138d6:	021b      	lsls	r3, r3, #8
 80138d8:	1a9b      	subs	r3, r3, r2
 80138da:	4a4b      	ldr	r2, [pc, #300]	; (8013a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80138dc:	fb82 1203 	smull	r1, r2, r2, r3
 80138e0:	441a      	add	r2, r3
 80138e2:	1112      	asrs	r2, r2, #4
 80138e4:	17db      	asrs	r3, r3, #31
 80138e6:	1ad3      	subs	r3, r2, r3
 80138e8:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	3318      	adds	r3, #24
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7ff fdb6 	bl	8013460 <_ZNK8touchgfx9colortypecvtEv>
 80138f4:	4603      	mov	r3, r0
 80138f6:	115b      	asrs	r3, r3, #5
 80138f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80138fc:	4613      	mov	r3, r2
 80138fe:	021b      	lsls	r3, r3, #8
 8013900:	1a9b      	subs	r3, r3, r2
 8013902:	4a42      	ldr	r2, [pc, #264]	; (8013a0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013904:	fb82 1203 	smull	r1, r2, r2, r3
 8013908:	441a      	add	r2, r3
 801390a:	1152      	asrs	r2, r2, #5
 801390c:	17db      	asrs	r3, r3, #31
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	3318      	adds	r3, #24
 8013916:	4618      	mov	r0, r3
 8013918:	f7ff fda2 	bl	8013460 <_ZNK8touchgfx9colortypecvtEv>
 801391c:	4603      	mov	r3, r0
 801391e:	f003 021f 	and.w	r2, r3, #31
 8013922:	4613      	mov	r3, r2
 8013924:	021b      	lsls	r3, r3, #8
 8013926:	1a9b      	subs	r3, r3, r2
 8013928:	4a37      	ldr	r2, [pc, #220]	; (8013a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801392a:	fb82 1203 	smull	r1, r2, r2, r3
 801392e:	441a      	add	r2, r3
 8013930:	1112      	asrs	r2, r2, #4
 8013932:	17db      	asrs	r3, r3, #31
 8013934:	1ad3      	subs	r3, r2, r3
 8013936:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	7f1b      	ldrb	r3, [r3, #28]
 801393c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	061a      	lsls	r2, r3, #24
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	041b      	lsls	r3, r3, #16
 8013946:	431a      	orrs	r2, r3
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	021b      	lsls	r3, r3, #8
 801394c:	431a      	orrs	r2, r3
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	4313      	orrs	r3, r2
 8013952:	4a2c      	ldr	r2, [pc, #176]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013954:	6353      	str	r3, [r2, #52]	; 0x34
 8013956:	e00b      	b.n	8013970 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	3318      	adds	r3, #24
 801395c:	4618      	mov	r0, r3
 801395e:	f7ff fd73 	bl	8013448 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013962:	4602      	mov	r2, r0
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	7f1b      	ldrb	r3, [r3, #28]
 8013968:	061b      	lsls	r3, r3, #24
 801396a:	4313      	orrs	r3, r2
 801396c:	4a25      	ldr	r2, [pc, #148]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801396e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	8adb      	ldrh	r3, [r3, #22]
 8013974:	461a      	mov	r2, r3
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	8a1b      	ldrh	r3, [r3, #16]
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	461a      	mov	r2, r3
 801397e:	4b21      	ldr	r3, [pc, #132]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013980:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013982:	7f7b      	ldrb	r3, [r7, #29]
 8013984:	2b10      	cmp	r3, #16
 8013986:	d101      	bne.n	801398c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8013988:	2302      	movs	r3, #2
 801398a:	e000      	b.n	801398e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 801398c:	2301      	movs	r3, #1
 801398e:	4a1d      	ldr	r2, [pc, #116]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013990:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013992:	2100      	movs	r1, #0
 8013994:	481b      	ldr	r0, [pc, #108]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013996:	f7f1 fd65 	bl	8005464 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801399a:	2101      	movs	r1, #1
 801399c:	4819      	ldr	r0, [pc, #100]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801399e:	f7f1 fd61 	bl	8005464 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80139a2:	7ffb      	ldrb	r3, [r7, #31]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d102      	bne.n	80139ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80139a8:	7fbb      	ldrb	r3, [r7, #30]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d015      	beq.n	80139da <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139b2:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139b8:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139be:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139c4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139ca:	9301      	str	r3, [sp, #4]
 80139cc:	9200      	str	r2, [sp, #0]
 80139ce:	4623      	mov	r3, r4
 80139d0:	4602      	mov	r2, r0
 80139d2:	480c      	ldr	r0, [pc, #48]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139d4:	f7f1 fb69 	bl	80050aa <HAL_DMA2D_BlendingStart_IT>
 80139d8:	e00f      	b.n	80139fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80139de:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80139e4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80139ea:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	4603      	mov	r3, r0
 80139f4:	4803      	ldr	r0, [pc, #12]	; (8013a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139f6:	f7f1 fb25 	bl	8005044 <HAL_DMA2D_Start_IT>
    }
}
 80139fa:	bf00      	nop
 80139fc:	372c      	adds	r7, #44	; 0x2c
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd90      	pop	{r4, r7, pc}
 8013a02:	bf00      	nop
 8013a04:	2000c4ec 	.word	0x2000c4ec
 8013a08:	84210843 	.word	0x84210843
 8013a0c:	82082083 	.word	0x82082083

08013a10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8013a10:	b590      	push	{r4, r7, lr}
 8013a12:	b08d      	sub	sp, #52	; 0x34
 8013a14:	af02      	add	r7, sp, #8
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013a1a:	f7fb fecd 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	6813      	ldr	r3, [r2, #0]
 8013a22:	3320      	adds	r3, #32
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4610      	mov	r0, r2
 8013a28:	4798      	blx	r3
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013a2e:	7ffb      	ldrb	r3, [r7, #31]
 8013a30:	2b10      	cmp	r3, #16
 8013a32:	d101      	bne.n	8013a38 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8013a34:	2302      	movs	r3, #2
 8013a36:	e000      	b.n	8013a3a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8013a38:	2301      	movs	r3, #1
 8013a3a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8013a40:	7ffb      	ldrb	r3, [r7, #31]
 8013a42:	2b10      	cmp	r3, #16
 8013a44:	d149      	bne.n	8013ada <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	3318      	adds	r3, #24
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7ff fd08 	bl	8013460 <_ZNK8touchgfx9colortypecvtEv>
 8013a50:	4603      	mov	r3, r0
 8013a52:	12db      	asrs	r3, r3, #11
 8013a54:	f003 021f 	and.w	r2, r3, #31
 8013a58:	4613      	mov	r3, r2
 8013a5a:	021b      	lsls	r3, r3, #8
 8013a5c:	1a9b      	subs	r3, r3, r2
 8013a5e:	4a69      	ldr	r2, [pc, #420]	; (8013c04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013a60:	fb82 1203 	smull	r1, r2, r2, r3
 8013a64:	441a      	add	r2, r3
 8013a66:	1112      	asrs	r2, r2, #4
 8013a68:	17db      	asrs	r3, r3, #31
 8013a6a:	1ad3      	subs	r3, r2, r3
 8013a6c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	3318      	adds	r3, #24
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7ff fcf4 	bl	8013460 <_ZNK8touchgfx9colortypecvtEv>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	115b      	asrs	r3, r3, #5
 8013a7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013a80:	4613      	mov	r3, r2
 8013a82:	021b      	lsls	r3, r3, #8
 8013a84:	1a9b      	subs	r3, r3, r2
 8013a86:	4a60      	ldr	r2, [pc, #384]	; (8013c08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8013a88:	fb82 1203 	smull	r1, r2, r2, r3
 8013a8c:	441a      	add	r2, r3
 8013a8e:	1152      	asrs	r2, r2, #5
 8013a90:	17db      	asrs	r3, r3, #31
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	3318      	adds	r3, #24
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7ff fce0 	bl	8013460 <_ZNK8touchgfx9colortypecvtEv>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	f003 021f 	and.w	r2, r3, #31
 8013aa6:	4613      	mov	r3, r2
 8013aa8:	021b      	lsls	r3, r3, #8
 8013aaa:	1a9b      	subs	r3, r3, r2
 8013aac:	4a55      	ldr	r2, [pc, #340]	; (8013c04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013aae:	fb82 1203 	smull	r1, r2, r2, r3
 8013ab2:	441a      	add	r2, r3
 8013ab4:	1112      	asrs	r2, r2, #4
 8013ab6:	17db      	asrs	r3, r3, #31
 8013ab8:	1ad3      	subs	r3, r2, r3
 8013aba:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	7f1b      	ldrb	r3, [r3, #28]
 8013ac0:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	061a      	lsls	r2, r3, #24
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	041b      	lsls	r3, r3, #16
 8013aca:	431a      	orrs	r2, r3
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	021b      	lsls	r3, r3, #8
 8013ad0:	4313      	orrs	r3, r2
 8013ad2:	68fa      	ldr	r2, [r7, #12]
 8013ad4:	4313      	orrs	r3, r2
 8013ad6:	623b      	str	r3, [r7, #32]
 8013ad8:	e00b      	b.n	8013af2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	7f1b      	ldrb	r3, [r3, #28]
 8013ade:	061b      	lsls	r3, r3, #24
 8013ae0:	461c      	mov	r4, r3
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	3318      	adds	r3, #24
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ff fcae 	bl	8013448 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013aec:	4603      	mov	r3, r0
 8013aee:	4323      	orrs	r3, r4
 8013af0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	2b08      	cmp	r3, #8
 8013af8:	d103      	bne.n	8013b02 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013b00:	e003      	b.n	8013b0a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8013b02:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8013b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013b08:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013b0a:	4a40      	ldr	r2, [pc, #256]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0e:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013b10:	7ffb      	ldrb	r3, [r7, #31]
 8013b12:	2b10      	cmp	r3, #16
 8013b14:	d101      	bne.n	8013b1a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8013b16:	2302      	movs	r3, #2
 8013b18:	e000      	b.n	8013b1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	4a3b      	ldr	r2, [pc, #236]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b1e:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	8adb      	ldrh	r3, [r3, #22]
 8013b24:	461a      	mov	r2, r3
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	8a1b      	ldrh	r3, [r3, #16]
 8013b2a:	1ad3      	subs	r3, r2, r3
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	4b37      	ldr	r3, [pc, #220]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b30:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013b32:	7ffb      	ldrb	r3, [r7, #31]
 8013b34:	2b10      	cmp	r3, #16
 8013b36:	d101      	bne.n	8013b3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8013b38:	2202      	movs	r2, #2
 8013b3a:	e000      	b.n	8013b3e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8013b3c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	8adb      	ldrh	r3, [r3, #22]
 8013b42:	4619      	mov	r1, r3
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	8a1b      	ldrh	r3, [r3, #16]
 8013b48:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b4c:	482f      	ldr	r0, [pc, #188]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b4e:	f7ff fd29 	bl	80135a4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8013b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013b58:	d11e      	bne.n	8013b98 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8013b5a:	4b2c      	ldr	r3, [pc, #176]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b5c:	2201      	movs	r2, #1
 8013b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8013b60:	4a2a      	ldr	r2, [pc, #168]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8013b66:	4b29      	ldr	r3, [pc, #164]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b68:	2209      	movs	r2, #9
 8013b6a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	8adb      	ldrh	r3, [r3, #22]
 8013b70:	461a      	mov	r2, r3
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	8a1b      	ldrh	r3, [r3, #16]
 8013b76:	1ad3      	subs	r3, r2, r3
 8013b78:	461a      	mov	r2, r3
 8013b7a:	4b24      	ldr	r3, [pc, #144]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b7c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013b7e:	7ffb      	ldrb	r3, [r7, #31]
 8013b80:	2b10      	cmp	r3, #16
 8013b82:	d101      	bne.n	8013b88 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8013b84:	2302      	movs	r3, #2
 8013b86:	e000      	b.n	8013b8a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8013b88:	2301      	movs	r3, #1
 8013b8a:	4a20      	ldr	r2, [pc, #128]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b8c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013b8e:	2100      	movs	r1, #0
 8013b90:	481e      	ldr	r0, [pc, #120]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b92:	f7f1 fc67 	bl	8005464 <HAL_DMA2D_ConfigLayer>
 8013b96:	e005      	b.n	8013ba4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013b98:	4a1c      	ldr	r2, [pc, #112]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b9a:	69bb      	ldr	r3, [r7, #24]
 8013b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8013b9e:	4b1b      	ldr	r3, [pc, #108]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013ba4:	2101      	movs	r1, #1
 8013ba6:	4819      	ldr	r0, [pc, #100]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ba8:	f7f1 fc5c 	bl	8005464 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013bb2:	d115      	bne.n	8013be0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bb8:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bbe:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bc4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bca:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bd0:	9301      	str	r3, [sp, #4]
 8013bd2:	9200      	str	r2, [sp, #0]
 8013bd4:	4623      	mov	r3, r4
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	480c      	ldr	r0, [pc, #48]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013bda:	f7f1 fa66 	bl	80050aa <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013bde:	e00d      	b.n	8013bfc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013bea:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013bf0:	9300      	str	r3, [sp, #0]
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	6a39      	ldr	r1, [r7, #32]
 8013bf6:	4805      	ldr	r0, [pc, #20]	; (8013c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013bf8:	f7f1 fa24 	bl	8005044 <HAL_DMA2D_Start_IT>
}
 8013bfc:	bf00      	nop
 8013bfe:	372c      	adds	r7, #44	; 0x2c
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd90      	pop	{r4, r7, pc}
 8013c04:	84210843 	.word	0x84210843
 8013c08:	82082083 	.word	0x82082083
 8013c0c:	2000c4ec 	.word	0x2000c4ec

08013c10 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	4a05      	ldr	r2, [pc, #20]	; (8013c30 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	601a      	str	r2, [r3, #0]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7ff fc2b 	bl	801347c <_ZN8touchgfx9DMA_QueueD1Ev>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3708      	adds	r7, #8
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	080274dc 	.word	0x080274dc

08013c34 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b082      	sub	sp, #8
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f7ff ffe7 	bl	8013c10 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013c42:	2114      	movs	r1, #20
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f010 fca8 	bl	802459a <_ZdlPvj>
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3708      	adds	r7, #8
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8013c54:	b480      	push	{r7}
 8013c56:	b083      	sub	sp, #12
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
        texts = t;
 8013c5c:	4a04      	ldr	r2, [pc, #16]	; (8013c70 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6013      	str	r3, [r2, #0]
    }
 8013c62:	bf00      	nop
 8013c64:	370c      	adds	r7, #12
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	2000bd04 	.word	0x2000bd04

08013c74 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013c74:	b480      	push	{r7}
 8013c76:	b085      	sub	sp, #20
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
 8013c80:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8013c82:	4a0b      	ldr	r2, [pc, #44]	; (8013cb0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	601a      	str	r2, [r3, #0]
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	68ba      	ldr	r2, [r7, #8]
 8013c8c:	605a      	str	r2, [r3, #4]
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	609a      	str	r2, [r3, #8]
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	60da      	str	r2, [r3, #12]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	69ba      	ldr	r2, [r7, #24]
 8013c9e:	611a      	str	r2, [r3, #16]
    {
    }
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3714      	adds	r7, #20
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cac:	4770      	bx	lr
 8013cae:	bf00      	nop
 8013cb0:	0802656c 	.word	0x0802656c

08013cb4 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
    {
 8013cbc:	4a04      	ldr	r2, [pc, #16]	; (8013cd0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	601a      	str	r2, [r3, #0]
    }
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr
 8013cd0:	0802656c 	.word	0x0802656c

08013cd4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
    }
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f7ff ffe9 	bl	8013cb4 <_ZN8touchgfx7MVPHeapD1Ev>
 8013ce2:	2114      	movs	r1, #20
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f010 fc58 	bl	802459a <_ZdlPvj>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	4618      	mov	r0, r3
 8013cee:	3708      	adds	r7, #8
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8013cf4:	b480      	push	{r7}
 8013cf6:	b083      	sub	sp, #12
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
    {
 8013cfc:	4a04      	ldr	r2, [pc, #16]	; (8013d10 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	601a      	str	r2, [r3, #0]
    }
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	4618      	mov	r0, r3
 8013d06:	370c      	adds	r7, #12
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr
 8013d10:	08027dc0 	.word	0x08027dc0

08013d14 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
    }
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7ff ffe9 	bl	8013cf4 <_ZN8touchgfx3LCDD1Ev>
 8013d22:	2108      	movs	r1, #8
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f010 fc38 	bl	802459a <_ZdlPvj>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	801a      	strh	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	805a      	strh	r2, [r3, #2]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	809a      	strh	r2, [r3, #4]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	80da      	strh	r2, [r3, #6]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	811a      	strh	r2, [r3, #8]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	815a      	strh	r2, [r3, #10]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2200      	movs	r2, #0
 8013d64:	819a      	strh	r2, [r3, #12]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	739a      	strb	r2, [r3, #14]
        {
        }
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	370c      	adds	r7, #12
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr

08013d7a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8013d7a:	b580      	push	{r7, lr}
 8013d7c:	b082      	sub	sp, #8
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	6078      	str	r0, [r7, #4]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7ff ffd5 	bl	8013d34 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	611a      	str	r2, [r3, #16]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2200      	movs	r2, #0
 8013d94:	829a      	strh	r2, [r3, #20]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3708      	adds	r7, #8
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	60f8      	str	r0, [r7, #12]
 8013da8:	60b9      	str	r1, [r7, #8]
 8013daa:	607a      	str	r2, [r7, #4]
 8013dac:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013dae:	4a44      	ldr	r2, [pc, #272]	; (8013ec0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	601a      	str	r2, [r3, #0]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	68ba      	ldr	r2, [r7, #8]
 8013db8:	605a      	str	r2, [r3, #4]
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	609a      	str	r2, [r3, #8]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	683a      	ldr	r2, [r7, #0]
 8013dc4:	60da      	str	r2, [r3, #12]
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	611a      	str	r2, [r3, #16]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	615a      	str	r2, [r3, #20]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	619a      	str	r2, [r3, #24]
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	331c      	adds	r3, #28
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7ff ffcc 	bl	8013d7a <_ZN8touchgfx8GesturesC1Ev>
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2200      	movs	r2, #0
 8013de6:	639a      	str	r2, [r3, #56]	; 0x38
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	2200      	movs	r2, #0
 8013dec:	63da      	str	r2, [r3, #60]	; 0x3c
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2200      	movs	r2, #0
 8013df2:	641a      	str	r2, [r3, #64]	; 0x40
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	2200      	movs	r2, #0
 8013df8:	645a      	str	r2, [r3, #68]	; 0x44
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	2201      	movs	r2, #1
 8013e06:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2200      	movs	r2, #0
 8013e16:	64da      	str	r2, [r3, #76]	; 0x4c
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	3350      	adds	r3, #80	; 0x50
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7fc f8fa 	bl	8010016 <_ZN8touchgfx4RectC1Ev>
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2201      	movs	r2, #1
 8013e26:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2200      	movs	r2, #0
 8013e36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2200      	movs	r2, #0
 8013e46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2200      	movs	r2, #0
 8013e56:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	2200      	movs	r2, #0
 8013e66:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	671a      	str	r2, [r3, #112]	; 0x70
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2200      	movs	r2, #0
 8013e74:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8013e78:	4a12      	ldr	r2, [pc, #72]	; (8013ec4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013e7e:	4a12      	ldr	r2, [pc, #72]	; (8013ec8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013e80:	8b3b      	ldrh	r3, [r7, #24]
 8013e82:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013e84:	4a11      	ldr	r2, [pc, #68]	; (8013ecc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013e86:	8bbb      	ldrh	r3, [r7, #28]
 8013e88:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013e8a:	4b11      	ldr	r3, [pc, #68]	; (8013ed0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013e90:	4b0d      	ldr	r3, [pc, #52]	; (8013ec8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013e92:	881a      	ldrh	r2, [r3, #0]
 8013e94:	4b0f      	ldr	r3, [pc, #60]	; (8013ed4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8013e96:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013e98:	4b0c      	ldr	r3, [pc, #48]	; (8013ecc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013e9a:	881a      	ldrh	r2, [r3, #0]
 8013e9c:	4b0e      	ldr	r3, [pc, #56]	; (8013ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013e9e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013ea0:	8b3a      	ldrh	r2, [r7, #24]
 8013ea2:	8bbb      	ldrh	r3, [r7, #28]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d301      	bcc.n	8013eac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	e000      	b.n	8013eae <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8013eac:	2201      	movs	r2, #1
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	08027048 	.word	0x08027048
 8013ec4:	2000bc68 	.word	0x2000bc68
 8013ec8:	2000bc5c 	.word	0x2000bc5c
 8013ecc:	2000bc5e 	.word	0x2000bc5e
 8013ed0:	2000bc60 	.word	0x2000bc60
 8013ed4:	2000bc62 	.word	0x2000bc62
 8013ed8:	2000bc64 	.word	0x2000bc64

08013edc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7fb fe89 	bl	800fc00 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8013eee:	bf00      	nop
 8013ef0:	3708      	adds	r7, #8
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
	...

08013ef8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b086      	sub	sp, #24
 8013efc:	af02      	add	r7, sp, #8
 8013efe:	60f8      	str	r0, [r7, #12]
 8013f00:	60b9      	str	r1, [r7, #8]
 8013f02:	607a      	str	r2, [r7, #4]
 8013f04:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013f06:	68f8      	ldr	r0, [r7, #12]
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	68b9      	ldr	r1, [r7, #8]
 8013f12:	f7ff feaf 	bl	8013c74 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013f16:	4a04      	ldr	r2, [pc, #16]	; (8013f28 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	601a      	str	r2, [r3, #0]
    {

    }
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	08026558 	.word	0x08026558

08013f2c <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	af00      	add	r7, sp, #0
 8013f30:	4801      	ldr	r0, [pc, #4]	; (8013f38 <__tcf_0+0xc>)
 8013f32:	f000 f9dd 	bl	80142f0 <_ZN12FrontendHeapD1Ev>
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	20008694 	.word	0x20008694

08013f3c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013f40:	4b08      	ldr	r3, [pc, #32]	; (8013f64 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	f003 0301 	and.w	r3, r3, #1
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d108      	bne.n	8013f5e <_ZN12FrontendHeap11getInstanceEv+0x22>
 8013f4c:	4806      	ldr	r0, [pc, #24]	; (8013f68 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8013f4e:	f000 f831 	bl	8013fb4 <_ZN12FrontendHeapC1Ev>
 8013f52:	4b04      	ldr	r3, [pc, #16]	; (8013f64 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013f54:	2201      	movs	r2, #1
 8013f56:	601a      	str	r2, [r3, #0]
 8013f58:	4804      	ldr	r0, [pc, #16]	; (8013f6c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8013f5a:	f010 fb67 	bl	802462c <atexit>
        return instance;
 8013f5e:	4b02      	ldr	r3, [pc, #8]	; (8013f68 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8013f60:	4618      	mov	r0, r3
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	2000af5c 	.word	0x2000af5c
 8013f68:	20008694 	.word	0x20008694
 8013f6c:	08013f2d 	.word	0x08013f2d

08013f70 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	4a05      	ldr	r2, [pc, #20]	; (8013f90 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	601a      	str	r2, [r3, #0]
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7ff fe97 	bl	8013cb4 <_ZN8touchgfx7MVPHeapD1Ev>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3708      	adds	r7, #8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	08026558 	.word	0x08026558

08013f94 <_ZN16FrontendHeapBaseD0Ev>:
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff ffe7 	bl	8013f70 <_ZN16FrontendHeapBaseD1Ev>
 8013fa2:	2114      	movs	r1, #20
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f010 faf8 	bl	802459a <_ZdlPvj>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	4618      	mov	r0, r3
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013fb4:	b5b0      	push	{r4, r5, r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af02      	add	r7, sp, #8
 8013fba:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f103 0414 	add.w	r4, r3, #20
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f242 7260 	movw	r2, #10080	; 0x2760
 8013fd0:	441a      	add	r2, r3
 8013fd2:	6879      	ldr	r1, [r7, #4]
 8013fd4:	f242 7374 	movw	r3, #10100	; 0x2774
 8013fd8:	440b      	add	r3, r1
 8013fda:	9300      	str	r3, [sp, #0]
 8013fdc:	4613      	mov	r3, r2
 8013fde:	462a      	mov	r2, r5
 8013fe0:	4621      	mov	r1, r4
 8013fe2:	f7ff ff89 	bl	8013ef8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013fe6:	4a1a      	ldr	r2, [pc, #104]	; (8014050 <_ZN12FrontendHeapC1Ev+0x9c>)
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	601a      	str	r2, [r3, #0]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	3314      	adds	r3, #20
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f000 f8df 	bl	80141b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	332c      	adds	r3, #44	; 0x2c
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f000 f90e 	bl	801421c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	f242 7360 	movw	r3, #10080	; 0x2760
 8014006:	4413      	add	r3, r2
 8014008:	4618      	mov	r0, r3
 801400a:	f000 f93d 	bl	8014288 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	f242 7374 	movw	r3, #10100	; 0x2774
 8014014:	4413      	add	r3, r2
 8014016:	687a      	ldr	r2, [r7, #4]
 8014018:	f642 01c4 	movw	r1, #10436	; 0x28c4
 801401c:	4411      	add	r1, r2
 801401e:	687a      	ldr	r2, [r7, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7fe fb11 	bl	8012648 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	f642 03c4 	movw	r3, #10436	; 0x28c4
 801402c:	4413      	add	r3, r2
 801402e:	4618      	mov	r0, r3
 8014030:	f7fe fde0 	bl	8012bf4 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	f242 7374 	movw	r3, #10100	; 0x2774
 801403c:	4413      	add	r3, r2
 801403e:	4619      	mov	r1, r3
 8014040:	f7ff ff4c 	bl	8013edc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	4618      	mov	r0, r3
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bdb0      	pop	{r4, r5, r7, pc}
 801404e:	bf00      	nop
 8014050:	080264a8 	.word	0x080264a8

08014054 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8014054:	b580      	push	{r7, lr}
 8014056:	b082      	sub	sp, #8
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
    {
 801405c:	4a05      	ldr	r2, [pc, #20]	; (8014074 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	601a      	str	r2, [r3, #0]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	4618      	mov	r0, r3
 8014066:	f7ff fe45 	bl	8013cf4 <_ZN8touchgfx3LCDD1Ev>
    }
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	4618      	mov	r0, r3
 801406e:	3708      	adds	r7, #8
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	0802919c 	.word	0x0802919c

08014078 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
    }
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7ff ffe7 	bl	8014054 <_ZN8touchgfx8LCD24bppD1Ev>
 8014086:	2158      	movs	r1, #88	; 0x58
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f010 fa86 	bl	802459a <_ZdlPvj>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014098:	b580      	push	{r7, lr}
 801409a:	b086      	sub	sp, #24
 801409c:	af02      	add	r7, sp, #8
 801409e:	60f8      	str	r0, [r7, #12]
 80140a0:	60b9      	str	r1, [r7, #8]
 80140a2:	607a      	str	r2, [r7, #4]
 80140a4:	603b      	str	r3, [r7, #0]
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	8bbb      	ldrh	r3, [r7, #28]
 80140aa:	9301      	str	r3, [sp, #4]
 80140ac:	8b3b      	ldrh	r3, [r7, #24]
 80140ae:	9300      	str	r3, [sp, #0]
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	68b9      	ldr	r1, [r7, #8]
 80140b6:	f7ff fe73 	bl	8013da0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80140ba:	4a04      	ldr	r2, [pc, #16]	; (80140cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	601a      	str	r2, [r3, #0]
    }
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	4618      	mov	r0, r3
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	0802657c 	.word	0x0802657c

080140d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b086      	sub	sp, #24
 80140d4:	af02      	add	r7, sp, #8
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
 80140dc:	603b      	str	r3, [r7, #0]
 80140de:	68f8      	ldr	r0, [r7, #12]
 80140e0:	8bbb      	ldrh	r3, [r7, #28]
 80140e2:	9301      	str	r3, [sp, #4]
 80140e4:	8b3b      	ldrh	r3, [r7, #24]
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	68b9      	ldr	r1, [r7, #8]
 80140ee:	f7ff ffd3 	bl	8014098 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80140f2:	4a04      	ldr	r2, [pc, #16]	; (8014104 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	601a      	str	r2, [r3, #0]
    }
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	4618      	mov	r0, r3
 80140fc:	3710      	adds	r7, #16
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	080262a8 	.word	0x080262a8

08014108 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014108:	b480      	push	{r7}
 801410a:	b083      	sub	sp, #12
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	4a04      	ldr	r2, [pc, #16]	; (8014124 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	601a      	str	r2, [r3, #0]
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	4618      	mov	r0, r3
 801411a:	370c      	adds	r7, #12
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr
 8014124:	08026290 	.word	0x08026290

08014128 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	4618      	mov	r0, r3
 8014134:	f7ff ffe8 	bl	8014108 <_ZN8touchgfx15TouchControllerC1Ev>
 8014138:	4a03      	ldr	r2, [pc, #12]	; (8014148 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	601a      	str	r2, [r3, #0]
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	4618      	mov	r0, r3
 8014142:	3708      	adds	r7, #8
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	08026278 	.word	0x08026278

0801414c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 801414c:	b590      	push	{r4, r7, lr}
 801414e:	b085      	sub	sp, #20
 8014150:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014152:	f7fe f955 	bl	8012400 <_ZN14BitmapDatabase11getInstanceEv>
 8014156:	4604      	mov	r4, r0
 8014158:	f7fe f95c 	bl	8012414 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801415c:	4603      	mov	r3, r0
 801415e:	4619      	mov	r1, r3
 8014160:	2300      	movs	r3, #0
 8014162:	9300      	str	r3, [sp, #0]
 8014164:	2300      	movs	r3, #0
 8014166:	2200      	movs	r2, #0
 8014168:	4620      	mov	r0, r4
 801416a:	f006 fcdb 	bl	801ab24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801416e:	4809      	ldr	r0, [pc, #36]	; (8014194 <touchgfx_init+0x48>)
 8014170:	f7ff fd70 	bl	8013c54 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014174:	2000      	movs	r0, #0
 8014176:	f7fe f971 	bl	801245c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801417a:	4807      	ldr	r0, [pc, #28]	; (8014198 <touchgfx_init+0x4c>)
 801417c:	f006 fc20 	bl	801a9c0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014180:	f7ff fedc 	bl	8013f3c <_ZN12FrontendHeap11getInstanceEv>
 8014184:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014186:	4805      	ldr	r0, [pc, #20]	; (801419c <touchgfx_init+0x50>)
 8014188:	f7fe ffcc 	bl	8013124 <_ZN11TouchGFXHAL10initializeEv>
}
 801418c:	bf00      	nop
 801418e:	370c      	adds	r7, #12
 8014190:	46bd      	mov	sp, r7
 8014192:	bd90      	pop	{r4, r7, pc}
 8014194:	2000bbdc 	.word	0x2000bbdc
 8014198:	2000003c 	.word	0x2000003c
 801419c:	2000bbe0 	.word	0x2000bbe0

080141a0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80141a4:	4802      	ldr	r0, [pc, #8]	; (80141b0 <touchgfx_taskEntry+0x10>)
 80141a6:	f001 fa06 	bl	80155b6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80141aa:	bf00      	nop
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	2000bbe0 	.word	0x2000bbe0

080141b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	4618      	mov	r0, r3
 80141c0:	f000 fc76 	bl	8014ab0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80141c4:	4a03      	ldr	r2, [pc, #12]	; (80141d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	601a      	str	r2, [r3, #0]
    {
    }
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	4618      	mov	r0, r3
 80141ce:	3708      	adds	r7, #8
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}
 80141d4:	08026524 	.word	0x08026524

080141d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
    {
    }
 80141e0:	4a05      	ldr	r2, [pc, #20]	; (80141f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	601a      	str	r2, [r3, #0]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4618      	mov	r0, r3
 80141ea:	f000 fc5f 	bl	8014aac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	08026524 	.word	0x08026524

080141fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
    }
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7ff ffe7 	bl	80141d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801420a:	2118      	movs	r1, #24
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f010 f9c4 	bl	802459a <_ZdlPvj>
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	4618      	mov	r0, r3
 8014216:	3708      	adds	r7, #8
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}

0801421c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	4618      	mov	r0, r3
 8014228:	f000 fc42 	bl	8014ab0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801422c:	4a03      	ldr	r2, [pc, #12]	; (801423c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	601a      	str	r2, [r3, #0]
    }
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	4618      	mov	r0, r3
 8014236:	3708      	adds	r7, #8
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}
 801423c:	080264f0 	.word	0x080264f0

08014240 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
    }
 8014248:	4a05      	ldr	r2, [pc, #20]	; (8014260 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	601a      	str	r2, [r3, #0]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	f000 fc2b 	bl	8014aac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	080264f0 	.word	0x080264f0

08014264 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
    }
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7ff ffe7 	bl	8014240 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014272:	f242 7134 	movw	r1, #10036	; 0x2734
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f010 f98f 	bl	802459a <_ZdlPvj>
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	4618      	mov	r0, r3
 8014280:	3708      	adds	r7, #8
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
	...

08014288 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	4618      	mov	r0, r3
 8014294:	f000 fc0c 	bl	8014ab0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014298:	4a03      	ldr	r2, [pc, #12]	; (80142a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	601a      	str	r2, [r3, #0]
    }
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	4618      	mov	r0, r3
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	080264bc 	.word	0x080264bc

080142ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
    }
 80142b4:	4a05      	ldr	r2, [pc, #20]	; (80142cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	601a      	str	r2, [r3, #0]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	4618      	mov	r0, r3
 80142be:	f000 fbf5 	bl	8014aac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	4618      	mov	r0, r3
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	080264bc 	.word	0x080264bc

080142d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
    }
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f7ff ffe7 	bl	80142ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80142de:	2114      	movs	r1, #20
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f010 f95a 	bl	802459a <_ZdlPvj>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	4618      	mov	r0, r3
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	4a11      	ldr	r2, [pc, #68]	; (8014340 <_ZN12FrontendHeapD1Ev+0x50>)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	601a      	str	r2, [r3, #0]
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	f242 7374 	movw	r3, #10100	; 0x2774
 8014304:	4413      	add	r3, r2
 8014306:	4618      	mov	r0, r3
 8014308:	f7fe f968 	bl	80125dc <_ZN19FrontendApplicationD1Ev>
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	f242 7360 	movw	r3, #10080	; 0x2760
 8014312:	4413      	add	r3, r2
 8014314:	4618      	mov	r0, r3
 8014316:	f7ff ffc9 	bl	80142ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	332c      	adds	r3, #44	; 0x2c
 801431e:	4618      	mov	r0, r3
 8014320:	f7ff ff8e 	bl	8014240 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	3314      	adds	r3, #20
 8014328:	4618      	mov	r0, r3
 801432a:	f7ff ff55 	bl	80141d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	f7ff fe1d 	bl	8013f70 <_ZN16FrontendHeapBaseD1Ev>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	4618      	mov	r0, r3
 801433a:	3708      	adds	r7, #8
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	080264a8 	.word	0x080264a8

08014344 <_ZN12FrontendHeapD0Ev>:
 8014344:	b580      	push	{r7, lr}
 8014346:	b082      	sub	sp, #8
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f7ff ffcf 	bl	80142f0 <_ZN12FrontendHeapD1Ev>
 8014352:	f642 01c8 	movw	r1, #10440	; 0x28c8
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f010 f91f 	bl	802459a <_ZdlPvj>
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	4618      	mov	r0, r3
 8014360:	3708      	adds	r7, #8
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
	...

08014368 <_Z41__static_initialization_and_destruction_0ii>:
 8014368:	b580      	push	{r7, lr}
 801436a:	b084      	sub	sp, #16
 801436c:	af02      	add	r7, sp, #8
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	6039      	str	r1, [r7, #0]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2b01      	cmp	r3, #1
 8014376:	d119      	bne.n	80143ac <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801437e:	4293      	cmp	r3, r2
 8014380:	d114      	bne.n	80143ac <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014382:	4818      	ldr	r0, [pc, #96]	; (80143e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014384:	f7ff fed0 	bl	8014128 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8014388:	4817      	ldr	r0, [pc, #92]	; (80143e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801438a:	f7ff f965 	bl	8013658 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 801438e:	4817      	ldr	r0, [pc, #92]	; (80143ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014390:	f008 fdee 	bl	801cf70 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8014394:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014398:	9301      	str	r3, [sp, #4]
 801439a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801439e:	9300      	str	r3, [sp, #0]
 80143a0:	4b10      	ldr	r3, [pc, #64]	; (80143e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80143a2:	4a12      	ldr	r2, [pc, #72]	; (80143ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80143a4:	4910      	ldr	r1, [pc, #64]	; (80143e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80143a6:	4812      	ldr	r0, [pc, #72]	; (80143f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80143a8:	f7ff fe92 	bl	80140d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d113      	bne.n	80143da <_Z41__static_initialization_and_destruction_0ii+0x72>
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143b8:	4293      	cmp	r3, r2
 80143ba:	d10e      	bne.n	80143da <_Z41__static_initialization_and_destruction_0ii+0x72>
 80143bc:	480c      	ldr	r0, [pc, #48]	; (80143f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80143be:	f7fe ff17 	bl	80131f0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80143c2:	480c      	ldr	r0, [pc, #48]	; (80143f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80143c4:	f7fa fd24 	bl	800ee10 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80143c8:	4808      	ldr	r0, [pc, #32]	; (80143ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80143ca:	f7ff fe43 	bl	8014054 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80143ce:	4806      	ldr	r0, [pc, #24]	; (80143e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80143d0:	f7ff f96c 	bl	80136ac <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80143d4:	4803      	ldr	r0, [pc, #12]	; (80143e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80143d6:	f7fe fc81 	bl	8012cdc <_ZN20STM32TouchControllerD1Ev>
}
 80143da:	bf00      	nop
 80143dc:	3708      	adds	r7, #8
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	2000af60 	.word	0x2000af60
 80143e8:	2000af64 	.word	0x2000af64
 80143ec:	2000bb84 	.word	0x2000bb84
 80143f0:	2000bbe0 	.word	0x2000bbe0
 80143f4:	2000003c 	.word	0x2000003c

080143f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 80143f8:	b480      	push	{r7}
 80143fa:	b083      	sub	sp, #12
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014400:	2301      	movs	r3, #1
    }
 8014402:	4618      	mov	r0, r3
 8014404:	370c      	adds	r7, #12
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr

0801440e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801440e:	b480      	push	{r7}
 8014410:	b083      	sub	sp, #12
 8014412:	af00      	add	r7, sp, #0
 8014414:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014416:	230c      	movs	r3, #12
    }
 8014418:	4618      	mov	r0, r3
 801441a:	370c      	adds	r7, #12
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr

08014424 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014424:	b480      	push	{r7}
 8014426:	b083      	sub	sp, #12
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	460b      	mov	r3, r1
 801442e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014430:	887a      	ldrh	r2, [r7, #2]
 8014432:	4613      	mov	r3, r2
 8014434:	005b      	lsls	r3, r3, #1
 8014436:	4413      	add	r3, r2
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	3308      	adds	r3, #8
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	4413      	add	r3, r2
    }
 8014440:	4618      	mov	r0, r3
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr

0801444c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014458:	887a      	ldrh	r2, [r7, #2]
 801445a:	4613      	mov	r3, r2
 801445c:	005b      	lsls	r3, r3, #1
 801445e:	4413      	add	r3, r2
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	3308      	adds	r3, #8
 8014464:	687a      	ldr	r2, [r7, #4]
 8014466:	4413      	add	r3, r2
    }
 8014468:	4618      	mov	r0, r3
 801446a:	370c      	adds	r7, #12
 801446c:	46bd      	mov	sp, r7
 801446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014472:	4770      	bx	lr

08014474 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014474:	b480      	push	{r7}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801447c:	2301      	movs	r3, #1
    }
 801447e:	4618      	mov	r0, r3
 8014480:	370c      	adds	r7, #12
 8014482:	46bd      	mov	sp, r7
 8014484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014488:	4770      	bx	lr

0801448a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801448a:	b480      	push	{r7}
 801448c:	b083      	sub	sp, #12
 801448e:	af00      	add	r7, sp, #0
 8014490:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014492:	f242 732c 	movw	r3, #10028	; 0x272c
    }
 8014496:	4618      	mov	r0, r3
 8014498:	370c      	adds	r7, #12
 801449a:	46bd      	mov	sp, r7
 801449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a0:	4770      	bx	lr

080144a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80144a2:	b480      	push	{r7}
 80144a4:	b083      	sub	sp, #12
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
 80144aa:	460b      	mov	r3, r1
 80144ac:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80144ae:	887b      	ldrh	r3, [r7, #2]
 80144b0:	f242 722c 	movw	r2, #10028	; 0x272c
 80144b4:	fb02 f303 	mul.w	r3, r2, r3
 80144b8:	3308      	adds	r3, #8
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	4413      	add	r3, r2
    }
 80144be:	4618      	mov	r0, r3
 80144c0:	370c      	adds	r7, #12
 80144c2:	46bd      	mov	sp, r7
 80144c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c8:	4770      	bx	lr

080144ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80144ca:	b480      	push	{r7}
 80144cc:	b083      	sub	sp, #12
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	6078      	str	r0, [r7, #4]
 80144d2:	460b      	mov	r3, r1
 80144d4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80144d6:	887b      	ldrh	r3, [r7, #2]
 80144d8:	f242 722c 	movw	r2, #10028	; 0x272c
 80144dc:	fb02 f303 	mul.w	r3, r2, r3
 80144e0:	3308      	adds	r3, #8
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	4413      	add	r3, r2
    }
 80144e6:	4618      	mov	r0, r3
 80144e8:	370c      	adds	r7, #12
 80144ea:	46bd      	mov	sp, r7
 80144ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f0:	4770      	bx	lr

080144f2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80144f2:	b480      	push	{r7}
 80144f4:	b083      	sub	sp, #12
 80144f6:	af00      	add	r7, sp, #0
 80144f8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80144fa:	2301      	movs	r3, #1
    }
 80144fc:	4618      	mov	r0, r3
 80144fe:	370c      	adds	r7, #12
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr

08014508 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014510:	2310      	movs	r3, #16
    }
 8014512:	4618      	mov	r0, r3
 8014514:	370c      	adds	r7, #12
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr

0801451e <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801451e:	b480      	push	{r7}
 8014520:	b083      	sub	sp, #12
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
 8014526:	460b      	mov	r3, r1
 8014528:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801452a:	887b      	ldrh	r3, [r7, #2]
 801452c:	011b      	lsls	r3, r3, #4
 801452e:	3308      	adds	r3, #8
 8014530:	687a      	ldr	r2, [r7, #4]
 8014532:	4413      	add	r3, r2
    }
 8014534:	4618      	mov	r0, r3
 8014536:	370c      	adds	r7, #12
 8014538:	46bd      	mov	sp, r7
 801453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453e:	4770      	bx	lr

08014540 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014540:	b480      	push	{r7}
 8014542:	b083      	sub	sp, #12
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	460b      	mov	r3, r1
 801454a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801454c:	887b      	ldrh	r3, [r7, #2]
 801454e:	011b      	lsls	r3, r3, #4
 8014550:	3308      	adds	r3, #8
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	4413      	add	r3, r2
    }
 8014556:	4618      	mov	r0, r3
 8014558:	370c      	adds	r7, #12
 801455a:	46bd      	mov	sp, r7
 801455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014560:	4770      	bx	lr

08014562 <_GLOBAL__sub_I_touchgfx_init>:
 8014562:	b580      	push	{r7, lr}
 8014564:	af00      	add	r7, sp, #0
 8014566:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801456a:	2001      	movs	r0, #1
 801456c:	f7ff fefc 	bl	8014368 <_Z41__static_initialization_and_destruction_0ii>
 8014570:	bd80      	pop	{r7, pc}

08014572 <_GLOBAL__sub_D_touchgfx_init>:
 8014572:	b580      	push	{r7, lr}
 8014574:	af00      	add	r7, sp, #0
 8014576:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801457a:	2000      	movs	r0, #0
 801457c:	f7ff fef4 	bl	8014368 <_Z41__static_initialization_and_destruction_0ii>
 8014580:	bd80      	pop	{r7, pc}

08014582 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014582:	b580      	push	{r7, lr}
 8014584:	b082      	sub	sp, #8
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	3318      	adds	r3, #24
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	4798      	blx	r3
    }
 8014596:	bf00      	nop
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 801459e:	b480      	push	{r7}
 80145a0:	b083      	sub	sp, #12
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	460b      	mov	r3, r1
 80145a8:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	78fa      	ldrb	r2, [r7, #3]
 80145ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80145b2:	bf00      	nop
 80145b4:	370c      	adds	r7, #12
 80145b6:	46bd      	mov	sp, r7
 80145b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145bc:	4770      	bx	lr

080145be <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80145be:	b480      	push	{r7}
 80145c0:	b083      	sub	sp, #12
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80145cc:	3301      	adds	r3, #1
 80145ce:	b2da      	uxtb	r2, r3
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80145d6:	bf00      	nop
 80145d8:	370c      	adds	r7, #12
 80145da:	46bd      	mov	sp, r7
 80145dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e0:	4770      	bx	lr
	...

080145e4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	460b      	mov	r3, r1
 80145ee:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80145f0:	78fb      	ldrb	r3, [r7, #3]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d002      	beq.n	80145fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80145f6:	78fb      	ldrb	r3, [r7, #3]
 80145f8:	2b02      	cmp	r3, #2
 80145fa:	d105      	bne.n	8014608 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	78fa      	ldrb	r2, [r7, #3]
 8014600:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014604:	2301      	movs	r3, #1
 8014606:	e027      	b.n	8014658 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014608:	78fb      	ldrb	r3, [r7, #3]
 801460a:	2b01      	cmp	r3, #1
 801460c:	d123      	bne.n	8014656 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014612:	2b00      	cmp	r3, #0
 8014614:	d014      	beq.n	8014640 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	3380      	adds	r3, #128	; 0x80
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	4798      	blx	r3
 8014622:	4603      	mov	r3, r0
 8014624:	461a      	mov	r2, r3
 8014626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801462a:	429a      	cmp	r2, r3
 801462c:	d008      	beq.n	8014640 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801462e:	4b0c      	ldr	r3, [pc, #48]	; (8014660 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	f083 0301 	eor.w	r3, r3, #1
 8014636:	b2db      	uxtb	r3, r3
 8014638:	2b00      	cmp	r3, #0
 801463a:	d001      	beq.n	8014640 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801463c:	2301      	movs	r3, #1
 801463e:	e000      	b.n	8014642 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014640:	2300      	movs	r3, #0
 8014642:	2b00      	cmp	r3, #0
 8014644:	d005      	beq.n	8014652 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	78fa      	ldrb	r2, [r7, #3]
 801464a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801464e:	2301      	movs	r3, #1
 8014650:	e002      	b.n	8014658 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014652:	2300      	movs	r3, #0
 8014654:	e000      	b.n	8014658 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014656:	2300      	movs	r3, #0
    }
 8014658:	4618      	mov	r0, r3
 801465a:	3708      	adds	r7, #8
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}
 8014660:	2000bc66 	.word	0x2000bc66

08014664 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8014664:	b480      	push	{r7}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	683a      	ldr	r2, [r7, #0]
 8014672:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014674:	bf00      	nop
 8014676:	370c      	adds	r7, #12
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr

08014680 <__NVIC_EnableIRQ>:
{
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
 8014686:	4603      	mov	r3, r0
 8014688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801468e:	2b00      	cmp	r3, #0
 8014690:	db0d      	blt.n	80146ae <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014696:	b2db      	uxtb	r3, r3
 8014698:	f003 021f 	and.w	r2, r3, #31
 801469c:	4907      	ldr	r1, [pc, #28]	; (80146bc <__NVIC_EnableIRQ+0x3c>)
 801469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146a2:	095b      	lsrs	r3, r3, #5
 80146a4:	2001      	movs	r0, #1
 80146a6:	fa00 f202 	lsl.w	r2, r0, r2
 80146aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80146ae:	bf00      	nop
 80146b0:	370c      	adds	r7, #12
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr
 80146ba:	bf00      	nop
 80146bc:	e000e100 	.word	0xe000e100

080146c0 <__NVIC_DisableIRQ>:
{
 80146c0:	b480      	push	{r7}
 80146c2:	b083      	sub	sp, #12
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	4603      	mov	r3, r0
 80146c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80146ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	db12      	blt.n	80146f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80146d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146d6:	b2db      	uxtb	r3, r3
 80146d8:	f003 021f 	and.w	r2, r3, #31
 80146dc:	4909      	ldr	r1, [pc, #36]	; (8014704 <__NVIC_DisableIRQ+0x44>)
 80146de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146e2:	095b      	lsrs	r3, r3, #5
 80146e4:	2001      	movs	r0, #1
 80146e6:	fa00 f202 	lsl.w	r2, r0, r2
 80146ea:	3320      	adds	r3, #32
 80146ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80146f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80146f4:	f3bf 8f6f 	isb	sy
}
 80146f8:	bf00      	nop
 80146fa:	370c      	adds	r7, #12
 80146fc:	46bd      	mov	sp, r7
 80146fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014702:	4770      	bx	lr
 8014704:	e000e100 	.word	0xe000e100

08014708 <__NVIC_SetPriority>:
{
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
 801470e:	4603      	mov	r3, r0
 8014710:	6039      	str	r1, [r7, #0]
 8014712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014718:	2b00      	cmp	r3, #0
 801471a:	db0c      	blt.n	8014736 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	b2db      	uxtb	r3, r3
 8014720:	4a0e      	ldr	r2, [pc, #56]	; (801475c <__NVIC_SetPriority+0x54>)
 8014722:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014726:	4608      	mov	r0, r1
 8014728:	011b      	lsls	r3, r3, #4
 801472a:	b2d9      	uxtb	r1, r3
 801472c:	1813      	adds	r3, r2, r0
 801472e:	460a      	mov	r2, r1
 8014730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014734:	e00c      	b.n	8014750 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	b2da      	uxtb	r2, r3
 801473a:	4909      	ldr	r1, [pc, #36]	; (8014760 <__NVIC_SetPriority+0x58>)
 801473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014740:	b2db      	uxtb	r3, r3
 8014742:	f003 030f 	and.w	r3, r3, #15
 8014746:	3b04      	subs	r3, #4
 8014748:	0112      	lsls	r2, r2, #4
 801474a:	b2d2      	uxtb	r2, r2
 801474c:	440b      	add	r3, r1
 801474e:	761a      	strb	r2, [r3, #24]
}
 8014750:	bf00      	nop
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr
 801475c:	e000e100 	.word	0xe000e100
 8014760:	e000ed00 	.word	0xe000ed00

08014764 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014764:	b5b0      	push	{r4, r5, r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	4618      	mov	r0, r3
 8014770:	f001 f9e6 	bl	8015b40 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014774:	687d      	ldr	r5, [r7, #4]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	334c      	adds	r3, #76	; 0x4c
 801477c:	681c      	ldr	r4, [r3, #0]
 801477e:	f003 ff43 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 8014782:	4603      	mov	r3, r0
 8014784:	4619      	mov	r1, r3
 8014786:	4628      	mov	r0, r5
 8014788:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	490d      	ldr	r1, [pc, #52]	; (80147c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff ff68 	bl	8014664 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2101      	movs	r1, #1
 8014798:	4618      	mov	r0, r3
 801479a:	f7ff ff23 	bl	80145e4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	3374      	adds	r3, #116	; 0x74
 80147a6:	681c      	ldr	r4, [r3, #0]
 80147a8:	2300      	movs	r3, #0
 80147aa:	2200      	movs	r2, #0
 80147ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80147b0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2101      	movs	r1, #1
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ff fef1 	bl	801459e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80147bc:	bf00      	nop
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bdb0      	pop	{r4, r5, r7, pc}
 80147c4:	08013389 	.word	0x08013389

080147c8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80147d0:	2109      	movs	r1, #9
 80147d2:	205a      	movs	r0, #90	; 0x5a
 80147d4:	f7ff ff98 	bl	8014708 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80147d8:	2109      	movs	r1, #9
 80147da:	2058      	movs	r0, #88	; 0x58
 80147dc:	f7ff ff94 	bl	8014708 <__NVIC_SetPriority>
}
 80147e0:	bf00      	nop
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80147f0:	205a      	movs	r0, #90	; 0x5a
 80147f2:	f7ff ff45 	bl	8014680 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80147f6:	2058      	movs	r0, #88	; 0x58
 80147f8:	f7ff ff42 	bl	8014680 <__NVIC_EnableIRQ>
}
 80147fc:	bf00      	nop
 80147fe:	3708      	adds	r7, #8
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}

08014804 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801480c:	205a      	movs	r0, #90	; 0x5a
 801480e:	f7ff ff57 	bl	80146c0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014812:	2058      	movs	r0, #88	; 0x58
 8014814:	f7ff ff54 	bl	80146c0 <__NVIC_DisableIRQ>
}
 8014818:	bf00      	nop
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014820:	b480      	push	{r7}
 8014822:	b083      	sub	sp, #12
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014828:	4b11      	ldr	r3, [pc, #68]	; (8014870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	b29b      	uxth	r3, r3
 801482e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014832:	b29b      	uxth	r3, r3
 8014834:	3b01      	subs	r3, #1
 8014836:	b29a      	uxth	r2, r3
 8014838:	4b0e      	ldr	r3, [pc, #56]	; (8014874 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801483a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801483c:	4b0c      	ldr	r3, [pc, #48]	; (8014870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801483e:	691b      	ldr	r3, [r3, #16]
 8014840:	b29b      	uxth	r3, r3
 8014842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014846:	b29b      	uxth	r3, r3
 8014848:	3b01      	subs	r3, #1
 801484a:	b29a      	uxth	r2, r3
 801484c:	4b0a      	ldr	r3, [pc, #40]	; (8014878 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801484e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014850:	4b08      	ldr	r3, [pc, #32]	; (8014874 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014852:	881a      	ldrh	r2, [r3, #0]
 8014854:	4b06      	ldr	r3, [pc, #24]	; (8014870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014856:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014858:	4b05      	ldr	r3, [pc, #20]	; (8014870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801485c:	4a04      	ldr	r2, [pc, #16]	; (8014870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801485e:	f043 0301 	orr.w	r3, r3, #1
 8014862:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014864:	bf00      	nop
 8014866:	370c      	adds	r7, #12
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr
 8014870:	40016800 	.word	0x40016800
 8014874:	2000bc58 	.word	0x2000bc58
 8014878:	2000bc5a 	.word	0x2000bc5a

0801487c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014884:	4b03      	ldr	r3, [pc, #12]	; (8014894 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014888:	4618      	mov	r0, r3
 801488a:	370c      	adds	r7, #12
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr
 8014894:	40016884 	.word	0x40016884

08014898 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80148a2:	4a06      	ldr	r2, [pc, #24]	; (80148bc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80148a8:	4b05      	ldr	r3, [pc, #20]	; (80148c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80148aa:	2201      	movs	r2, #1
 80148ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80148ae:	bf00      	nop
 80148b0:	370c      	adds	r7, #12
 80148b2:	46bd      	mov	sp, r7
 80148b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b8:	4770      	bx	lr
 80148ba:	bf00      	nop
 80148bc:	40016884 	.word	0x40016884
 80148c0:	40016800 	.word	0x40016800

080148c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6839      	ldr	r1, [r7, #0]
 80148d2:	4618      	mov	r0, r3
 80148d4:	f000 fe44 	bl	8015560 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80148d8:	bf00      	nop
 80148da:	3708      	adds	r7, #8
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}

080148e0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80148e0:	b480      	push	{r7}
 80148e2:	b085      	sub	sp, #20
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80148e8:	4b0d      	ldr	r3, [pc, #52]	; (8014920 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80148ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148ec:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80148ee:	4b0c      	ldr	r3, [pc, #48]	; (8014920 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	3301      	adds	r3, #1
 80148fc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80148fe:	89fa      	ldrh	r2, [r7, #14]
 8014900:	89bb      	ldrh	r3, [r7, #12]
 8014902:	429a      	cmp	r2, r3
 8014904:	d201      	bcs.n	801490a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8014906:	2300      	movs	r3, #0
 8014908:	e003      	b.n	8014912 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801490a:	89fa      	ldrh	r2, [r7, #14]
 801490c:	89bb      	ldrh	r3, [r7, #12]
 801490e:	1ad3      	subs	r3, r2, r3
 8014910:	b29b      	uxth	r3, r3
    }
}
 8014912:	4618      	mov	r0, r3
 8014914:	3714      	adds	r7, #20
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	40016800 	.word	0x40016800

08014924 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801492c:	4b1a      	ldr	r3, [pc, #104]	; (8014998 <HAL_LTDC_LineEventCallback+0x74>)
 801492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014930:	4a1a      	ldr	r2, [pc, #104]	; (801499c <HAL_LTDC_LineEventCallback+0x78>)
 8014932:	8812      	ldrh	r2, [r2, #0]
 8014934:	4293      	cmp	r3, r2
 8014936:	bf0c      	ite	eq
 8014938:	2301      	moveq	r3, #1
 801493a:	2300      	movne	r3, #0
 801493c:	b2db      	uxtb	r3, r3
 801493e:	2b00      	cmp	r3, #0
 8014940:	d017      	beq.n	8014972 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8014942:	4b17      	ldr	r3, [pc, #92]	; (80149a0 <HAL_LTDC_LineEventCallback+0x7c>)
 8014944:	881b      	ldrh	r3, [r3, #0]
 8014946:	4619      	mov	r1, r3
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7f1 fa5b 	bl	8005e04 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801494e:	f7fa ff27 	bl	800f7a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8014952:	4603      	mov	r3, r0
 8014954:	4618      	mov	r0, r3
 8014956:	f7ff fe32 	bl	80145be <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801495a:	f7fe fcd7 	bl	801330c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801495e:	f7fa ff1f 	bl	800f7a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8014962:	4603      	mov	r3, r0
 8014964:	4618      	mov	r0, r3
 8014966:	f001 fb73 	bl	8016050 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801496a:	2000      	movs	r0, #0
 801496c:	f7fe f9d8 	bl	8012d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8014970:	e00e      	b.n	8014990 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8014972:	4b0a      	ldr	r3, [pc, #40]	; (801499c <HAL_LTDC_LineEventCallback+0x78>)
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	4619      	mov	r1, r3
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7f1 fa43 	bl	8005e04 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801497e:	2000      	movs	r0, #0
 8014980:	f7fe f9d9 	bl	8012d36 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8014984:	f7fa ff0c 	bl	800f7a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8014988:	4603      	mov	r3, r0
 801498a:	4618      	mov	r0, r3
 801498c:	f7ff fdf9 	bl	8014582 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8014990:	bf00      	nop
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	40016800 	.word	0x40016800
 801499c:	2000bc58 	.word	0x2000bc58
 80149a0:	2000bc5a 	.word	0x2000bc5a

080149a4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80149a4:	8880      	ldrh	r0, [r0, #4]
 80149a6:	4770      	bx	lr

080149a8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80149a8:	2300      	movs	r3, #0
 80149aa:	8083      	strh	r3, [r0, #4]
 80149ac:	4770      	bx	lr
	...

080149b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80149b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b2:	6803      	ldr	r3, [r0, #0]
 80149b4:	460e      	mov	r6, r1
 80149b6:	2100      	movs	r1, #0
 80149b8:	4605      	mov	r5, r0
 80149ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149bc:	4798      	blx	r3
 80149be:	4604      	mov	r4, r0
 80149c0:	682b      	ldr	r3, [r5, #0]
 80149c2:	4628      	mov	r0, r5
 80149c4:	1b34      	subs	r4, r6, r4
 80149c6:	6a1b      	ldr	r3, [r3, #32]
 80149c8:	b2a4      	uxth	r4, r4
 80149ca:	4798      	blx	r3
 80149cc:	88ab      	ldrh	r3, [r5, #4]
 80149ce:	fbb4 f4f0 	udiv	r4, r4, r0
 80149d2:	42a3      	cmp	r3, r4
 80149d4:	d805      	bhi.n	80149e2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80149d6:	4b0e      	ldr	r3, [pc, #56]	; (8014a10 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80149d8:	211e      	movs	r1, #30
 80149da:	4a0e      	ldr	r2, [pc, #56]	; (8014a14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80149dc:	480e      	ldr	r0, [pc, #56]	; (8014a18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80149de:	f00f fe07 	bl	80245f0 <__assert_func>
 80149e2:	682b      	ldr	r3, [r5, #0]
 80149e4:	2100      	movs	r1, #0
 80149e6:	4628      	mov	r0, r5
 80149e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ea:	4798      	blx	r3
 80149ec:	682b      	ldr	r3, [r5, #0]
 80149ee:	4607      	mov	r7, r0
 80149f0:	4628      	mov	r0, r5
 80149f2:	6a1b      	ldr	r3, [r3, #32]
 80149f4:	4798      	blx	r3
 80149f6:	1bf3      	subs	r3, r6, r7
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	fbb3 f2f0 	udiv	r2, r3, r0
 80149fe:	fb02 3010 	mls	r0, r2, r0, r3
 8014a02:	b118      	cbz	r0, 8014a0c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014a04:	4b05      	ldr	r3, [pc, #20]	; (8014a1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014a06:	211f      	movs	r1, #31
 8014a08:	4a02      	ldr	r2, [pc, #8]	; (8014a14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014a0a:	e7e7      	b.n	80149dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a10:	08026628 	.word	0x08026628
 8014a14:	08026796 	.word	0x08026796
 8014a18:	0802663d 	.word	0x0802663d
 8014a1c:	0802666b 	.word	0x0802666b

08014a20 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014a20:	b538      	push	{r3, r4, r5, lr}
 8014a22:	6803      	ldr	r3, [r0, #0]
 8014a24:	460d      	mov	r5, r1
 8014a26:	4604      	mov	r4, r0
 8014a28:	6a1b      	ldr	r3, [r3, #32]
 8014a2a:	4798      	blx	r3
 8014a2c:	4285      	cmp	r5, r0
 8014a2e:	d905      	bls.n	8014a3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014a30:	4b0c      	ldr	r3, [pc, #48]	; (8014a64 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014a32:	212f      	movs	r1, #47	; 0x2f
 8014a34:	4a0c      	ldr	r2, [pc, #48]	; (8014a68 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014a36:	480d      	ldr	r0, [pc, #52]	; (8014a6c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014a38:	f00f fdda 	bl	80245f0 <__assert_func>
 8014a3c:	6823      	ldr	r3, [r4, #0]
 8014a3e:	4620      	mov	r0, r4
 8014a40:	88a5      	ldrh	r5, [r4, #4]
 8014a42:	69db      	ldr	r3, [r3, #28]
 8014a44:	4798      	blx	r3
 8014a46:	4285      	cmp	r5, r0
 8014a48:	d303      	bcc.n	8014a52 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014a4a:	4b09      	ldr	r3, [pc, #36]	; (8014a70 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014a4c:	2130      	movs	r1, #48	; 0x30
 8014a4e:	4a06      	ldr	r2, [pc, #24]	; (8014a68 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014a50:	e7f1      	b.n	8014a36 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014a52:	6823      	ldr	r3, [r4, #0]
 8014a54:	4620      	mov	r0, r4
 8014a56:	88a1      	ldrh	r1, [r4, #4]
 8014a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a5a:	4798      	blx	r3
 8014a5c:	88a3      	ldrh	r3, [r4, #4]
 8014a5e:	3301      	adds	r3, #1
 8014a60:	80a3      	strh	r3, [r4, #4]
 8014a62:	bd38      	pop	{r3, r4, r5, pc}
 8014a64:	080266e5 	.word	0x080266e5
 8014a68:	080267d9 	.word	0x080267d9
 8014a6c:	0802663d 	.word	0x0802663d
 8014a70:	080266fc 	.word	0x080266fc

08014a74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014a74:	b570      	push	{r4, r5, r6, lr}
 8014a76:	6803      	ldr	r3, [r0, #0]
 8014a78:	4616      	mov	r6, r2
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	460d      	mov	r5, r1
 8014a7e:	6a1b      	ldr	r3, [r3, #32]
 8014a80:	4798      	blx	r3
 8014a82:	4286      	cmp	r6, r0
 8014a84:	d905      	bls.n	8014a92 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014a86:	4b06      	ldr	r3, [pc, #24]	; (8014aa0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014a88:	2139      	movs	r1, #57	; 0x39
 8014a8a:	4a06      	ldr	r2, [pc, #24]	; (8014aa4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014a8c:	4806      	ldr	r0, [pc, #24]	; (8014aa8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014a8e:	f00f fdaf 	bl	80245f0 <__assert_func>
 8014a92:	6823      	ldr	r3, [r4, #0]
 8014a94:	4629      	mov	r1, r5
 8014a96:	4620      	mov	r0, r4
 8014a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a9e:	4718      	bx	r3
 8014aa0:	080266e5 	.word	0x080266e5
 8014aa4:	0802674c 	.word	0x0802674c
 8014aa8:	0802663d 	.word	0x0802663d

08014aac <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014aac:	4770      	bx	lr
	...

08014ab0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014ab0:	4a02      	ldr	r2, [pc, #8]	; (8014abc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014ab2:	6002      	str	r2, [r0, #0]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	8082      	strh	r2, [r0, #4]
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop
 8014abc:	08026720 	.word	0x08026720

08014ac0 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014ac0:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8014ac4:	4770      	bx	lr

08014ac6 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8014ac6:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014aca:	4770      	bx	lr

08014acc <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014acc:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8014ad0:	4770      	bx	lr

08014ad2 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8014ad2:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8014ad6:	4770      	bx	lr

08014ad8 <_ZN8touchgfx11BoxProgressD1Ev>:
 8014ad8:	4b03      	ldr	r3, [pc, #12]	; (8014ae8 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8014ada:	b510      	push	{r4, lr}
 8014adc:	4604      	mov	r4, r0
 8014ade:	6003      	str	r3, [r0, #0]
 8014ae0:	f000 f8b6 	bl	8014c50 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	bd10      	pop	{r4, pc}
 8014ae8:	08026820 	.word	0x08026820

08014aec <_ZN8touchgfx11BoxProgressD0Ev>:
 8014aec:	b510      	push	{r4, lr}
 8014aee:	4604      	mov	r4, r0
 8014af0:	f7ff fff2 	bl	8014ad8 <_ZN8touchgfx11BoxProgressD1Ev>
 8014af4:	21c0      	movs	r1, #192	; 0xc0
 8014af6:	4620      	mov	r0, r4
 8014af8:	f00f fd4f 	bl	802459a <_ZdlPvj>
 8014afc:	4620      	mov	r0, r4
 8014afe:	bd10      	pop	{r4, pc}

08014b00 <_ZN8touchgfx11BoxProgressC1Ev>:
 8014b00:	b510      	push	{r4, lr}
 8014b02:	4604      	mov	r4, r0
 8014b04:	f000 f8b8 	bl	8014c78 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014b08:	2201      	movs	r2, #1
 8014b0a:	4b16      	ldr	r3, [pc, #88]	; (8014b64 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8014b0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b10:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8014b14:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8014b18:	4a13      	ldr	r2, [pc, #76]	; (8014b68 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014b1a:	6023      	str	r3, [r4, #0]
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8014b22:	22ff      	movs	r2, #255	; 0xff
 8014b24:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8014b28:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8014b2c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8014b30:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8014b34:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8014b38:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8014b3c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8014b40:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8014b44:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8014b48:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8014b4c:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8014b50:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8014b54:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8014b58:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8014b5c:	f000 fbb8 	bl	80152d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014b60:	4620      	mov	r0, r4
 8014b62:	bd10      	pop	{r4, pc}
 8014b64:	08026820 	.word	0x08026820
 8014b68:	08027ad8 	.word	0x08027ad8

08014b6c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8014b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014b70:	4617      	mov	r7, r2
 8014b72:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014b76:	2200      	movs	r2, #0
 8014b78:	4604      	mov	r4, r0
 8014b7a:	460e      	mov	r6, r1
 8014b7c:	4698      	mov	r8, r3
 8014b7e:	4611      	mov	r1, r2
 8014b80:	9500      	str	r5, [sp, #0]
 8014b82:	3090      	adds	r0, #144	; 0x90
 8014b84:	f7fb fadc 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b88:	4643      	mov	r3, r8
 8014b8a:	463a      	mov	r2, r7
 8014b8c:	4631      	mov	r1, r6
 8014b8e:	4620      	mov	r0, r4
 8014b90:	9508      	str	r5, [sp, #32]
 8014b92:	b002      	add	sp, #8
 8014b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b98:	f000 b9fa 	b.w	8014f90 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014b9c <_ZN8touchgfx11BoxProgress8setValueEi>:
 8014b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	f000 fa40 	bl	8015024 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014ba4:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8014ba8:	4628      	mov	r0, r5
 8014baa:	f004 f95b 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014bae:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014bb2:	2b03      	cmp	r3, #3
 8014bb4:	d814      	bhi.n	8014be0 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8014bb6:	e8df f003 	tbb	[pc, r3]
 8014bba:	0202      	.short	0x0202
 8014bbc:	1010      	.short	0x1010
 8014bbe:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	f000 fa88 	bl	80150d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014bc8:	b200      	sxth	r0, r0
 8014bca:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014bce:	2b03      	cmp	r3, #3
 8014bd0:	d81a      	bhi.n	8014c08 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8014bd2:	e8df f003 	tbb	[pc, r3]
 8014bd6:	0e07      	.short	0x0e07
 8014bd8:	231f      	.short	0x231f
 8014bda:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8014bde:	e7f0      	b.n	8014bc2 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014be0:	2000      	movs	r0, #0
 8014be2:	e7f2      	b.n	8014bca <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8014be4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014be8:	9300      	str	r3, [sp, #0]
 8014bea:	4603      	mov	r3, r0
 8014bec:	2200      	movs	r2, #0
 8014bee:	2100      	movs	r1, #0
 8014bf0:	e007      	b.n	8014c02 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8014bf2:	8921      	ldrh	r1, [r4, #8]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014bfa:	1a09      	subs	r1, r1, r0
 8014bfc:	9300      	str	r3, [sp, #0]
 8014bfe:	4603      	mov	r3, r0
 8014c00:	b209      	sxth	r1, r1
 8014c02:	4628      	mov	r0, r5
 8014c04:	f7fb fa9c 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014c08:	4628      	mov	r0, r5
 8014c0a:	b003      	add	sp, #12
 8014c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c10:	f004 b928 	b.w	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014c14:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014c18:	9000      	str	r0, [sp, #0]
 8014c1a:	e7e7      	b.n	8014bec <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8014c1c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014c20:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014c24:	1a12      	subs	r2, r2, r0
 8014c26:	9000      	str	r0, [sp, #0]
 8014c28:	b212      	sxth	r2, r2
 8014c2a:	e7e0      	b.n	8014bee <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08014c2c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8014c2c:	b570      	push	{r4, r5, r6, lr}
 8014c2e:	6803      	ldr	r3, [r0, #0]
 8014c30:	4604      	mov	r4, r0
 8014c32:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8014c36:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014c3a:	4798      	blx	r3
 8014c3c:	4601      	mov	r1, r0
 8014c3e:	462b      	mov	r3, r5
 8014c40:	4620      	mov	r0, r4
 8014c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c46:	4718      	bx	r3

08014c48 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8014c48:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8014c4c:	4770      	bx	lr
	...

08014c50 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8014c50:	4b03      	ldr	r3, [pc, #12]	; (8014c60 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8014c52:	b510      	push	{r4, lr}
 8014c54:	4604      	mov	r4, r0
 8014c56:	6003      	str	r3, [r0, #0]
 8014c58:	f000 f999 	bl	8014f8e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	bd10      	pop	{r4, pc}
 8014c60:	080268f8 	.word	0x080268f8

08014c64 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8014c64:	b510      	push	{r4, lr}
 8014c66:	4604      	mov	r4, r0
 8014c68:	f7ff fff2 	bl	8014c50 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014c6c:	2190      	movs	r1, #144	; 0x90
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f00f fc93 	bl	802459a <_ZdlPvj>
 8014c74:	4620      	mov	r0, r4
 8014c76:	bd10      	pop	{r4, pc}

08014c78 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8014c78:	b510      	push	{r4, lr}
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	f000 fa4c 	bl	8015118 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014c80:	4b03      	ldr	r3, [pc, #12]	; (8014c90 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8014c82:	2100      	movs	r1, #0
 8014c84:	4620      	mov	r0, r4
 8014c86:	6023      	str	r3, [r4, #0]
 8014c88:	f7ff ffd0 	bl	8014c2c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	bd10      	pop	{r4, pc}
 8014c90:	080268f8 	.word	0x080268f8

08014c94 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8014c94:	b570      	push	{r4, r5, r6, lr}
 8014c96:	6803      	ldr	r3, [r0, #0]
 8014c98:	4604      	mov	r4, r0
 8014c9a:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8014c9e:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014ca2:	4798      	blx	r3
 8014ca4:	4601      	mov	r1, r0
 8014ca6:	462b      	mov	r3, r5
 8014ca8:	4620      	mov	r0, r4
 8014caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cae:	4718      	bx	r3

08014cb0 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8014cb0:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8014cb4:	4770      	bx	lr

08014cb6 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8014cb6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8014cba:	4770      	bx	lr

08014cbc <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8014cbc:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8014cc0:	4770      	bx	lr

08014cc2 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8014cc2:	b507      	push	{r0, r1, r2, lr}
 8014cc4:	ab02      	add	r3, sp, #8
 8014cc6:	30bc      	adds	r0, #188	; 0xbc
 8014cc8:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8014ccc:	4619      	mov	r1, r3
 8014cce:	f002 f9a9 	bl	8017024 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8014cd2:	b003      	add	sp, #12
 8014cd4:	f85d fb04 	ldr.w	pc, [sp], #4

08014cd8 <_ZN8touchgfx13ImageProgressD1Ev>:
 8014cd8:	4b03      	ldr	r3, [pc, #12]	; (8014ce8 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8014cda:	b510      	push	{r4, lr}
 8014cdc:	4604      	mov	r4, r0
 8014cde:	6003      	str	r3, [r0, #0]
 8014ce0:	f7ff ffb6 	bl	8014c50 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	bd10      	pop	{r4, pc}
 8014ce8:	08026a24 	.word	0x08026a24

08014cec <_ZN8touchgfx13ImageProgressD0Ev>:
 8014cec:	b510      	push	{r4, lr}
 8014cee:	4604      	mov	r4, r0
 8014cf0:	f7ff fff2 	bl	8014cd8 <_ZN8touchgfx13ImageProgressD1Ev>
 8014cf4:	21f0      	movs	r1, #240	; 0xf0
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f00f fc4f 	bl	802459a <_ZdlPvj>
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	bd10      	pop	{r4, pc}

08014d00 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8014d00:	b508      	push	{r3, lr}
 8014d02:	4b06      	ldr	r3, [pc, #24]	; (8014d1c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	b92b      	cbnz	r3, 8014d14 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8014d08:	4b05      	ldr	r3, [pc, #20]	; (8014d20 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8014d0a:	21b8      	movs	r1, #184	; 0xb8
 8014d0c:	4a05      	ldr	r2, [pc, #20]	; (8014d24 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8014d0e:	4806      	ldr	r0, [pc, #24]	; (8014d28 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8014d10:	f00f fc6e 	bl	80245f0 <__assert_func>
 8014d14:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8014d18:	bd08      	pop	{r3, pc}
 8014d1a:	bf00      	nop
 8014d1c:	2000bd30 	.word	0x2000bd30
 8014d20:	080269b8 	.word	0x080269b8
 8014d24:	08026afc 	.word	0x08026afc
 8014d28:	080269f4 	.word	0x080269f4

08014d2c <_ZN8touchgfx13ImageProgressC1Ev>:
 8014d2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014d30:	4604      	mov	r4, r0
 8014d32:	f7ff ffa1 	bl	8014c78 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014d36:	4b31      	ldr	r3, [pc, #196]	; (8014dfc <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8014d38:	a902      	add	r1, sp, #8
 8014d3a:	4626      	mov	r6, r4
 8014d3c:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8014d40:	2500      	movs	r5, #0
 8014d42:	4a2f      	ldr	r2, [pc, #188]	; (8014e00 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8014d44:	f846 3b90 	str.w	r3, [r6], #144
 8014d48:	2701      	movs	r7, #1
 8014d4a:	4b2e      	ldr	r3, [pc, #184]	; (8014e04 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8014d4c:	4640      	mov	r0, r8
 8014d4e:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8014d52:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8014d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d5a:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8014d5e:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8014d62:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8014d66:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8014d6a:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8014d6e:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8014d72:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8014d76:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8014d7a:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8014d7e:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8014d82:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8014d86:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8014d8a:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8014d8e:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8014d92:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8014d96:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8014d9a:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8014d9e:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8014da2:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8014da6:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8014daa:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8014dae:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8014db2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8014db6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8014dba:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8014dbe:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8014dc2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8014dc6:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8014dca:	f002 fb6f 	bl	80174ac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014dce:	4b0e      	ldr	r3, [pc, #56]	; (8014e08 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8014dd0:	4641      	mov	r1, r8
 8014dd2:	4630      	mov	r0, r6
 8014dd4:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8014dd8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8014ddc:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8014de0:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8014de4:	f000 fa74 	bl	80152d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014de8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014dec:	4631      	mov	r1, r6
 8014dee:	f000 fa6f 	bl	80152d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014df2:	4620      	mov	r0, r4
 8014df4:	b002      	add	sp, #8
 8014df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dfa:	bf00      	nop
 8014dfc:	08026a24 	.word	0x08026a24
 8014e00:	08027c40 	.word	0x08027c40
 8014e04:	08026da0 	.word	0x08026da0
 8014e08:	08027b40 	.word	0x08027b40

08014e0c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8014e0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014e10:	4617      	mov	r7, r2
 8014e12:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014e16:	2200      	movs	r2, #0
 8014e18:	4604      	mov	r4, r0
 8014e1a:	460e      	mov	r6, r1
 8014e1c:	4698      	mov	r8, r3
 8014e1e:	4611      	mov	r1, r2
 8014e20:	9500      	str	r5, [sp, #0]
 8014e22:	3090      	adds	r0, #144	; 0x90
 8014e24:	f7fb f98c 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014e28:	4643      	mov	r3, r8
 8014e2a:	463a      	mov	r2, r7
 8014e2c:	4631      	mov	r1, r6
 8014e2e:	4620      	mov	r0, r4
 8014e30:	9508      	str	r5, [sp, #32]
 8014e32:	b002      	add	sp, #8
 8014e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e38:	f000 b8aa 	b.w	8014f90 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014e3c <_ZN8touchgfx13ImageProgress8setValueEi>:
 8014e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e3e:	4604      	mov	r4, r0
 8014e40:	f000 f8f0 	bl	8015024 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014e44:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8014e48:	4638      	mov	r0, r7
 8014e4a:	f004 f80b 	bl	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014e4e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014e52:	4620      	mov	r0, r4
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	bf94      	ite	ls
 8014e58:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8014e5c:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8014e60:	f000 f93a 	bl	80150d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014e64:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8014e68:	4606      	mov	r6, r0
 8014e6a:	b205      	sxth	r5, r0
 8014e6c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014e70:	2a00      	cmp	r2, #0
 8014e72:	d056      	beq.n	8014f22 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8014e74:	2b03      	cmp	r3, #3
 8014e76:	d82c      	bhi.n	8014ed2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8014e78:	e8df f003 	tbb	[pc, r3]
 8014e7c:	3d311202 	.word	0x3d311202
 8014e80:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014e84:	2200      	movs	r2, #0
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	4611      	mov	r1, r2
 8014e8a:	462b      	mov	r3, r5
 8014e8c:	4638      	mov	r0, r7
 8014e8e:	f7fb f957 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014e92:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	462b      	mov	r3, r5
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	4611      	mov	r1, r2
 8014e9e:	e014      	b.n	8014eca <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014ea0:	8921      	ldrh	r1, [r4, #8]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014ea8:	1a09      	subs	r1, r1, r0
 8014eaa:	4638      	mov	r0, r7
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	462b      	mov	r3, r5
 8014eb0:	b209      	sxth	r1, r1
 8014eb2:	f7fb f945 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014eb6:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8014eba:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014ebe:	4249      	negs	r1, r1
 8014ec0:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8014ec4:	9200      	str	r2, [sp, #0]
 8014ec6:	b209      	sxth	r1, r1
 8014ec8:	2200      	movs	r2, #0
 8014eca:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8014ece:	f7fb f937 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014ed2:	4638      	mov	r0, r7
 8014ed4:	b003      	add	sp, #12
 8014ed6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014eda:	f003 bfc3 	b.w	8018e64 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014ede:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	9500      	str	r5, [sp, #0]
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	4638      	mov	r0, r7
 8014eea:	f7fb f929 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014eee:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014ef2:	9500      	str	r5, [sp, #0]
 8014ef4:	e7d1      	b.n	8014e9a <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8014ef6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014efa:	2100      	movs	r1, #0
 8014efc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f00:	1a12      	subs	r2, r2, r0
 8014f02:	9500      	str	r5, [sp, #0]
 8014f04:	4638      	mov	r0, r7
 8014f06:	b212      	sxth	r2, r2
 8014f08:	f7fb f91a 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f0c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8014f10:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8014f14:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f18:	4252      	negs	r2, r2
 8014f1a:	9100      	str	r1, [sp, #0]
 8014f1c:	b212      	sxth	r2, r2
 8014f1e:	2100      	movs	r1, #0
 8014f20:	e7d3      	b.n	8014eca <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014f22:	2b03      	cmp	r3, #3
 8014f24:	d8d5      	bhi.n	8014ed2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8014f26:	e8df f003 	tbb	[pc, r3]
 8014f2a:	1102      	.short	0x1102
 8014f2c:	2a1b      	.short	0x2a1b
 8014f2e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014f32:	2200      	movs	r2, #0
 8014f34:	4638      	mov	r0, r7
 8014f36:	4611      	mov	r1, r2
 8014f38:	9300      	str	r3, [sp, #0]
 8014f3a:	462b      	mov	r3, r5
 8014f3c:	f7fb f900 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f40:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f44:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014f48:	1af1      	subs	r1, r6, r3
 8014f4a:	e7bb      	b.n	8014ec4 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8014f4c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014f50:	2200      	movs	r2, #0
 8014f52:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014f56:	1a09      	subs	r1, r1, r0
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	462b      	mov	r3, r5
 8014f5c:	b209      	sxth	r1, r1
 8014f5e:	e795      	b.n	8014e8c <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8014f60:	2200      	movs	r2, #0
 8014f62:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f66:	4638      	mov	r0, r7
 8014f68:	9500      	str	r5, [sp, #0]
 8014f6a:	4611      	mov	r1, r2
 8014f6c:	f7fb f8e8 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f70:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8014f74:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f78:	1a32      	subs	r2, r6, r0
 8014f7a:	9000      	str	r0, [sp, #0]
 8014f7c:	e7ce      	b.n	8014f1c <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8014f7e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014f82:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f86:	1a12      	subs	r2, r2, r0
 8014f88:	9500      	str	r5, [sp, #0]
 8014f8a:	b212      	sxth	r2, r2
 8014f8c:	e7ab      	b.n	8014ee6 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08014f8e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8014f8e:	4770      	bx	lr

08014f90 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8014f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014f94:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8014f98:	4604      	mov	r4, r0
 8014f9a:	460e      	mov	r6, r1
 8014f9c:	4698      	mov	r8, r3
 8014f9e:	9700      	str	r7, [sp, #0]
 8014fa0:	3058      	adds	r0, #88	; 0x58
 8014fa2:	4615      	mov	r5, r2
 8014fa4:	f7fb f8cc 	bl	8010140 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014fa8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014fac:	eb06 0308 	add.w	r3, r6, r8
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	eb05 0207 	add.w	r2, r5, r7
 8014fb6:	bfb8      	it	lt
 8014fb8:	8123      	strhlt	r3, [r4, #8]
 8014fba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	bfb8      	it	lt
 8014fc2:	8162      	strhlt	r2, [r4, #10]
 8014fc4:	b002      	add	sp, #8
 8014fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014fca <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8014fca:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8014fce:	4770      	bx	lr

08014fd0 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8014fd0:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8014fd4:	4770      	bx	lr

08014fd6 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8014fd6:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8014fda:	4770      	bx	lr

08014fdc <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8014fdc:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8014fe0:	4770      	bx	lr

08014fe2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8014fe2:	b510      	push	{r4, lr}
 8014fe4:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8014fe8:	800c      	strh	r4, [r1, #0]
 8014fea:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8014fee:	8011      	strh	r1, [r2, #0]
 8014ff0:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8014ff4:	801a      	strh	r2, [r3, #0]
 8014ff6:	9b02      	ldr	r3, [sp, #8]
 8014ff8:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8014ffc:	801a      	strh	r2, [r3, #0]
 8014ffe:	bd10      	pop	{r4, pc}

08015000 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8015000:	b510      	push	{r4, lr}
 8015002:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015006:	800c      	strh	r4, [r1, #0]
 8015008:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801500c:	8011      	strh	r1, [r2, #0]
 801500e:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015012:	801a      	strh	r2, [r3, #0]
 8015014:	bd10      	pop	{r4, pc}

08015016 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8015016:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801501a:	800b      	strh	r3, [r1, #0]
 801501c:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015020:	8013      	strh	r3, [r2, #0]
 8015022:	4770      	bx	lr

08015024 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015024:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015028:	4299      	cmp	r1, r3
 801502a:	bfb8      	it	lt
 801502c:	4619      	movlt	r1, r3
 801502e:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015032:	4299      	cmp	r1, r3
 8015034:	bfa8      	it	ge
 8015036:	4619      	movge	r1, r3
 8015038:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801503c:	4770      	bx	lr

0801503e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801503e:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8015042:	4770      	bx	lr

08015044 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8015044:	b510      	push	{r4, lr}
 8015046:	4604      	mov	r4, r0
 8015048:	2190      	movs	r1, #144	; 0x90
 801504a:	f00f faa6 	bl	802459a <_ZdlPvj>
 801504e:	4620      	mov	r0, r4
 8015050:	bd10      	pop	{r4, pc}

08015052 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8015052:	b510      	push	{r4, lr}
 8015054:	4604      	mov	r4, r0
 8015056:	302c      	adds	r0, #44	; 0x2c
 8015058:	f002 fa28 	bl	80174ac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801505c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801505e:	8123      	strh	r3, [r4, #8]
 8015060:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015062:	8163      	strh	r3, [r4, #10]
 8015064:	bd10      	pop	{r4, pc}
	...

08015068 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8015068:	4291      	cmp	r1, r2
 801506a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801506e:	4604      	mov	r4, r0
 8015070:	460e      	mov	r6, r1
 8015072:	4615      	mov	r5, r2
 8015074:	4698      	mov	r8, r3
 8015076:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801507a:	db05      	blt.n	8015088 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801507c:	4b12      	ldr	r3, [pc, #72]	; (80150c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801507e:	214d      	movs	r1, #77	; 0x4d
 8015080:	4a12      	ldr	r2, [pc, #72]	; (80150cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8015082:	4813      	ldr	r0, [pc, #76]	; (80150d0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8015084:	f00f fab4 	bl	80245f0 <__assert_func>
 8015088:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801508c:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8015090:	6803      	ldr	r3, [r0, #0]
 8015092:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8015096:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801509a:	4798      	blx	r3
 801509c:	f1b8 0f00 	cmp.w	r8, #0
 80150a0:	d10c      	bne.n	80150bc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 80150a2:	1bad      	subs	r5, r5, r6
 80150a4:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80150a8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80150ac:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80150b0:	42bb      	cmp	r3, r7
 80150b2:	d806      	bhi.n	80150c2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80150b4:	4b07      	ldr	r3, [pc, #28]	; (80150d4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80150b6:	215a      	movs	r1, #90	; 0x5a
 80150b8:	4a04      	ldr	r2, [pc, #16]	; (80150cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80150ba:	e7e2      	b.n	8015082 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80150bc:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80150c0:	e7f2      	b.n	80150a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80150c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c6:	bf00      	nop
 80150c8:	08026b2f 	.word	0x08026b2f
 80150cc:	08026c6c 	.word	0x08026c6c
 80150d0:	08026b39 	.word	0x08026b39
 80150d4:	08026b90 	.word	0x08026b90

080150d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80150d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150da:	4604      	mov	r4, r0
 80150dc:	460d      	mov	r5, r1
 80150de:	b1b9      	cbz	r1, 8015110 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80150e0:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80150e4:	ab01      	add	r3, sp, #4
 80150e6:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80150ea:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80150ee:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80150f2:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80150f6:	1a12      	subs	r2, r2, r0
 80150f8:	1b89      	subs	r1, r1, r6
 80150fa:	1a38      	subs	r0, r7, r0
 80150fc:	f003 fff3 	bl	80190e6 <_ZN8touchgfx6muldivElllRl>
 8015100:	4629      	mov	r1, r5
 8015102:	ab01      	add	r3, sp, #4
 8015104:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015108:	4430      	add	r0, r6
 801510a:	f003 ffec 	bl	80190e6 <_ZN8touchgfx6muldivElllRl>
 801510e:	b285      	uxth	r5, r0
 8015110:	4628      	mov	r0, r5
 8015112:	b003      	add	sp, #12
 8015114:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015118 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801511c:	4604      	mov	r4, r0
 801511e:	2600      	movs	r6, #0
 8015120:	f7fa ffc0 	bl	80100a4 <_ZN8touchgfx8DrawableC1Ev>
 8015124:	4b1b      	ldr	r3, [pc, #108]	; (8015194 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8015126:	4625      	mov	r5, r4
 8015128:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801512c:	af02      	add	r7, sp, #8
 801512e:	62a6      	str	r6, [r4, #40]	; 0x28
 8015130:	f845 3b2c 	str.w	r3, [r5], #44
 8015134:	4628      	mov	r0, r5
 8015136:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801513a:	f7fa ffb3 	bl	80100a4 <_ZN8touchgfx8DrawableC1Ev>
 801513e:	4b16      	ldr	r3, [pc, #88]	; (8015198 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8015140:	4639      	mov	r1, r7
 8015142:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015146:	4628      	mov	r0, r5
 8015148:	62e3      	str	r3, [r4, #44]	; 0x2c
 801514a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801514e:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8015152:	f002 f9ab 	bl	80174ac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015156:	4638      	mov	r0, r7
 8015158:	f7fa ffa4 	bl	80100a4 <_ZN8touchgfx8DrawableC1Ev>
 801515c:	4b0f      	ldr	r3, [pc, #60]	; (801519c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801515e:	4632      	mov	r2, r6
 8015160:	4631      	mov	r1, r6
 8015162:	65a3      	str	r3, [r4, #88]	; 0x58
 8015164:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8015168:	4628      	mov	r0, r5
 801516a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801516e:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8015172:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015176:	f7fb f82e 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
 801517a:	4629      	mov	r1, r5
 801517c:	4620      	mov	r0, r4
 801517e:	f000 f8a7 	bl	80152d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015182:	4620      	mov	r0, r4
 8015184:	4639      	mov	r1, r7
 8015186:	f000 f8a3 	bl	80152d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801518a:	4620      	mov	r0, r4
 801518c:	b002      	add	sp, #8
 801518e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015192:	bf00      	nop
 8015194:	08026bb4 	.word	0x08026bb4
 8015198:	08027c40 	.word	0x08027c40
 801519c:	08026da0 	.word	0x08026da0

080151a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80151a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80151a2:	2000      	movs	r0, #0
 80151a4:	b12b      	cbz	r3, 80151b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80151a6:	b920      	cbnz	r0, 80151b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80151a8:	1a5a      	subs	r2, r3, r1
 80151aa:	699b      	ldr	r3, [r3, #24]
 80151ac:	4250      	negs	r0, r2
 80151ae:	4150      	adcs	r0, r2
 80151b0:	e7f8      	b.n	80151a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80151b2:	4770      	bx	lr

080151b4 <_ZN8touchgfx9Container9removeAllEv>:
 80151b4:	2200      	movs	r2, #0
 80151b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80151b8:	b123      	cbz	r3, 80151c4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80151ba:	6999      	ldr	r1, [r3, #24]
 80151bc:	6281      	str	r1, [r0, #40]	; 0x28
 80151be:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80151c2:	e7f8      	b.n	80151b6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80151c4:	4770      	bx	lr

080151c6 <_ZN8touchgfx9Container6unlinkEv>:
 80151c6:	2300      	movs	r3, #0
 80151c8:	6283      	str	r3, [r0, #40]	; 0x28
 80151ca:	4770      	bx	lr

080151cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80151cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151d0:	461f      	mov	r7, r3
 80151d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80151d6:	460d      	mov	r5, r1
 80151d8:	4616      	mov	r6, r2
 80151da:	b103      	cbz	r3, 80151de <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80151dc:	6038      	str	r0, [r7, #0]
 80151de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80151e0:	b314      	cbz	r4, 8015228 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80151e2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80151e6:	b1eb      	cbz	r3, 8015224 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80151e8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80151ec:	428d      	cmp	r5, r1
 80151ee:	db19      	blt.n	8015224 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80151f0:	b289      	uxth	r1, r1
 80151f2:	8923      	ldrh	r3, [r4, #8]
 80151f4:	440b      	add	r3, r1
 80151f6:	b21b      	sxth	r3, r3
 80151f8:	429d      	cmp	r5, r3
 80151fa:	da13      	bge.n	8015224 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80151fc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015200:	4296      	cmp	r6, r2
 8015202:	db0f      	blt.n	8015224 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015204:	b292      	uxth	r2, r2
 8015206:	8963      	ldrh	r3, [r4, #10]
 8015208:	4413      	add	r3, r2
 801520a:	b21b      	sxth	r3, r3
 801520c:	429e      	cmp	r6, r3
 801520e:	da09      	bge.n	8015224 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015210:	6823      	ldr	r3, [r4, #0]
 8015212:	1ab2      	subs	r2, r6, r2
 8015214:	1a69      	subs	r1, r5, r1
 8015216:	4620      	mov	r0, r4
 8015218:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801521c:	b212      	sxth	r2, r2
 801521e:	463b      	mov	r3, r7
 8015220:	b209      	sxth	r1, r1
 8015222:	47c0      	blx	r8
 8015224:	69a4      	ldr	r4, [r4, #24]
 8015226:	e7db      	b.n	80151e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801522c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801522c:	2200      	movs	r2, #0
 801522e:	8002      	strh	r2, [r0, #0]
 8015230:	8042      	strh	r2, [r0, #2]
 8015232:	8082      	strh	r2, [r0, #4]
 8015234:	80c2      	strh	r2, [r0, #6]
 8015236:	4770      	bx	lr

08015238 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015238:	b570      	push	{r4, r5, r6, lr}
 801523a:	460d      	mov	r5, r1
 801523c:	4616      	mov	r6, r2
 801523e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015240:	b13c      	cbz	r4, 8015252 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015242:	6823      	ldr	r3, [r4, #0]
 8015244:	4620      	mov	r0, r4
 8015246:	4632      	mov	r2, r6
 8015248:	4629      	mov	r1, r5
 801524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801524c:	4798      	blx	r3
 801524e:	69a4      	ldr	r4, [r4, #24]
 8015250:	e7f6      	b.n	8015240 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015252:	bd70      	pop	{r4, r5, r6, pc}

08015254 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015254:	b538      	push	{r3, r4, r5, lr}
 8015256:	460d      	mov	r5, r1
 8015258:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801525a:	b134      	cbz	r4, 801526a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801525c:	682b      	ldr	r3, [r5, #0]
 801525e:	4621      	mov	r1, r4
 8015260:	4628      	mov	r0, r5
 8015262:	689b      	ldr	r3, [r3, #8]
 8015264:	4798      	blx	r3
 8015266:	69a4      	ldr	r4, [r4, #24]
 8015268:	e7f7      	b.n	801525a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801526a:	bd38      	pop	{r3, r4, r5, pc}

0801526c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801526c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801526e:	b19b      	cbz	r3, 8015298 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015270:	428b      	cmp	r3, r1
 8015272:	d109      	bne.n	8015288 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015274:	699a      	ldr	r2, [r3, #24]
 8015276:	2100      	movs	r1, #0
 8015278:	6159      	str	r1, [r3, #20]
 801527a:	6282      	str	r2, [r0, #40]	; 0x28
 801527c:	b902      	cbnz	r2, 8015280 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801527e:	4770      	bx	lr
 8015280:	6199      	str	r1, [r3, #24]
 8015282:	4770      	bx	lr
 8015284:	4613      	mov	r3, r2
 8015286:	b13a      	cbz	r2, 8015298 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015288:	699a      	ldr	r2, [r3, #24]
 801528a:	428a      	cmp	r2, r1
 801528c:	d1fa      	bne.n	8015284 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801528e:	698a      	ldr	r2, [r1, #24]
 8015290:	619a      	str	r2, [r3, #24]
 8015292:	2300      	movs	r3, #0
 8015294:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015298:	4770      	bx	lr

0801529a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801529a:	b410      	push	{r4}
 801529c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801529e:	4604      	mov	r4, r0
 80152a0:	b92b      	cbnz	r3, 80152ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80152a2:	6803      	ldr	r3, [r0, #0]
 80152a4:	4611      	mov	r1, r2
 80152a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152ac:	4718      	bx	r3
 80152ae:	b941      	cbnz	r1, 80152c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80152b0:	6193      	str	r3, [r2, #24]
 80152b2:	6282      	str	r2, [r0, #40]	; 0x28
 80152b4:	6154      	str	r4, [r2, #20]
 80152b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152ba:	4770      	bx	lr
 80152bc:	4603      	mov	r3, r0
 80152be:	2800      	cmp	r0, #0
 80152c0:	d0f9      	beq.n	80152b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80152c2:	4299      	cmp	r1, r3
 80152c4:	6998      	ldr	r0, [r3, #24]
 80152c6:	d1f9      	bne.n	80152bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80152c8:	6190      	str	r0, [r2, #24]
 80152ca:	618a      	str	r2, [r1, #24]
 80152cc:	e7f2      	b.n	80152b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080152d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80152d0:	4288      	cmp	r0, r1
 80152d2:	b508      	push	{r3, lr}
 80152d4:	d105      	bne.n	80152e2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80152d6:	4b11      	ldr	r3, [pc, #68]	; (801531c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80152d8:	2123      	movs	r1, #35	; 0x23
 80152da:	4a11      	ldr	r2, [pc, #68]	; (8015320 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80152dc:	4811      	ldr	r0, [pc, #68]	; (8015324 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80152de:	f00f f987 	bl	80245f0 <__assert_func>
 80152e2:	694b      	ldr	r3, [r1, #20]
 80152e4:	b11b      	cbz	r3, 80152ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80152e6:	4b10      	ldr	r3, [pc, #64]	; (8015328 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80152e8:	2124      	movs	r1, #36	; 0x24
 80152ea:	4a0d      	ldr	r2, [pc, #52]	; (8015320 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80152ec:	e7f6      	b.n	80152dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80152ee:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80152f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152f4:	b913      	cbnz	r3, 80152fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80152f6:	6281      	str	r1, [r0, #40]	; 0x28
 80152f8:	bd08      	pop	{r3, pc}
 80152fa:	4613      	mov	r3, r2
 80152fc:	699a      	ldr	r2, [r3, #24]
 80152fe:	b12a      	cbz	r2, 801530c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015300:	428b      	cmp	r3, r1
 8015302:	d1fa      	bne.n	80152fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015304:	4b09      	ldr	r3, [pc, #36]	; (801532c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015306:	2135      	movs	r1, #53	; 0x35
 8015308:	4a05      	ldr	r2, [pc, #20]	; (8015320 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801530a:	e7e7      	b.n	80152dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801530c:	428b      	cmp	r3, r1
 801530e:	d103      	bne.n	8015318 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015310:	4b06      	ldr	r3, [pc, #24]	; (801532c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015312:	2138      	movs	r1, #56	; 0x38
 8015314:	4a02      	ldr	r2, [pc, #8]	; (8015320 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015316:	e7e1      	b.n	80152dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015318:	6199      	str	r1, [r3, #24]
 801531a:	e7ed      	b.n	80152f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801531c:	08026ccd 	.word	0x08026ccd
 8015320:	08026e24 	.word	0x08026e24
 8015324:	08026cf9 	.word	0x08026cf9
 8015328:	08026d2c 	.word	0x08026d2c
 801532c:	08026d62 	.word	0x08026d62

08015330 <_ZN8touchgfx4RectaNERKS0_>:
 8015330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015334:	888b      	ldrh	r3, [r1, #4]
 8015336:	f9b1 9000 	ldrsh.w	r9, [r1]
 801533a:	f9b0 a000 	ldrsh.w	sl, [r0]
 801533e:	444b      	add	r3, r9
 8015340:	b29b      	uxth	r3, r3
 8015342:	fa0f f883 	sxth.w	r8, r3
 8015346:	45c2      	cmp	sl, r8
 8015348:	da30      	bge.n	80153ac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801534a:	8882      	ldrh	r2, [r0, #4]
 801534c:	4452      	add	r2, sl
 801534e:	b292      	uxth	r2, r2
 8015350:	fa0f fe82 	sxth.w	lr, r2
 8015354:	45f1      	cmp	r9, lr
 8015356:	da29      	bge.n	80153ac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015358:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801535c:	88cc      	ldrh	r4, [r1, #6]
 801535e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015362:	442c      	add	r4, r5
 8015364:	b224      	sxth	r4, r4
 8015366:	42a6      	cmp	r6, r4
 8015368:	da20      	bge.n	80153ac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801536a:	88c7      	ldrh	r7, [r0, #6]
 801536c:	4437      	add	r7, r6
 801536e:	b2bf      	uxth	r7, r7
 8015370:	fa0f fc87 	sxth.w	ip, r7
 8015374:	4565      	cmp	r5, ip
 8015376:	da19      	bge.n	80153ac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015378:	45ca      	cmp	sl, r9
 801537a:	4654      	mov	r4, sl
 801537c:	bfb8      	it	lt
 801537e:	464c      	movlt	r4, r9
 8015380:	42b5      	cmp	r5, r6
 8015382:	bfb8      	it	lt
 8015384:	4635      	movlt	r5, r6
 8015386:	45f0      	cmp	r8, lr
 8015388:	bfc8      	it	gt
 801538a:	4613      	movgt	r3, r2
 801538c:	1b1b      	subs	r3, r3, r4
 801538e:	8083      	strh	r3, [r0, #4]
 8015390:	88ca      	ldrh	r2, [r1, #6]
 8015392:	884b      	ldrh	r3, [r1, #2]
 8015394:	8004      	strh	r4, [r0, #0]
 8015396:	4413      	add	r3, r2
 8015398:	8045      	strh	r5, [r0, #2]
 801539a:	b29b      	uxth	r3, r3
 801539c:	b21a      	sxth	r2, r3
 801539e:	4594      	cmp	ip, r2
 80153a0:	bfb8      	it	lt
 80153a2:	463b      	movlt	r3, r7
 80153a4:	1b5b      	subs	r3, r3, r5
 80153a6:	80c3      	strh	r3, [r0, #6]
 80153a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ac:	2300      	movs	r3, #0
 80153ae:	8003      	strh	r3, [r0, #0]
 80153b0:	8043      	strh	r3, [r0, #2]
 80153b2:	8083      	strh	r3, [r0, #4]
 80153b4:	80c3      	strh	r3, [r0, #6]
 80153b6:	e7f7      	b.n	80153a8 <_ZN8touchgfx4RectaNERKS0_+0x78>

080153b8 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80153b8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80153bc:	b12b      	cbz	r3, 80153ca <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80153be:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80153c2:	fab0 f080 	clz	r0, r0
 80153c6:	0940      	lsrs	r0, r0, #5
 80153c8:	4770      	bx	lr
 80153ca:	2001      	movs	r0, #1
 80153cc:	4770      	bx	lr

080153ce <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80153ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153d2:	2300      	movs	r3, #0
 80153d4:	4604      	mov	r4, r0
 80153d6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80153d8:	8003      	strh	r3, [r0, #0]
 80153da:	8043      	strh	r3, [r0, #2]
 80153dc:	8083      	strh	r3, [r0, #4]
 80153de:	80c3      	strh	r3, [r0, #6]
 80153e0:	2d00      	cmp	r5, #0
 80153e2:	d040      	beq.n	8015466 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80153e4:	1d28      	adds	r0, r5, #4
 80153e6:	f7ff ffe7 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80153ea:	b988      	cbnz	r0, 8015410 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80153ec:	4620      	mov	r0, r4
 80153ee:	f7ff ffe3 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80153f2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80153f6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80153fa:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80153fe:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015402:	b138      	cbz	r0, 8015414 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015404:	8022      	strh	r2, [r4, #0]
 8015406:	8063      	strh	r3, [r4, #2]
 8015408:	f8a4 e004 	strh.w	lr, [r4, #4]
 801540c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015410:	69ad      	ldr	r5, [r5, #24]
 8015412:	e7e5      	b.n	80153e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015414:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015418:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801541c:	4290      	cmp	r0, r2
 801541e:	4607      	mov	r7, r0
 8015420:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015424:	460e      	mov	r6, r1
 8015426:	bfa8      	it	ge
 8015428:	4617      	movge	r7, r2
 801542a:	4299      	cmp	r1, r3
 801542c:	4472      	add	r2, lr
 801542e:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015432:	bfa8      	it	ge
 8015434:	461e      	movge	r6, r3
 8015436:	4440      	add	r0, r8
 8015438:	4471      	add	r1, lr
 801543a:	4463      	add	r3, ip
 801543c:	b200      	sxth	r0, r0
 801543e:	8027      	strh	r7, [r4, #0]
 8015440:	b212      	sxth	r2, r2
 8015442:	8066      	strh	r6, [r4, #2]
 8015444:	b209      	sxth	r1, r1
 8015446:	b21b      	sxth	r3, r3
 8015448:	4290      	cmp	r0, r2
 801544a:	bfac      	ite	ge
 801544c:	ebc7 0200 	rsbge	r2, r7, r0
 8015450:	ebc7 0202 	rsblt	r2, r7, r2
 8015454:	4299      	cmp	r1, r3
 8015456:	bfac      	ite	ge
 8015458:	ebc6 0301 	rsbge	r3, r6, r1
 801545c:	ebc6 0303 	rsblt	r3, r6, r3
 8015460:	80a2      	strh	r2, [r4, #4]
 8015462:	80e3      	strh	r3, [r4, #6]
 8015464:	e7d4      	b.n	8015410 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015466:	4620      	mov	r0, r4
 8015468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801546c <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801546c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015470:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015474:	b383      	cbz	r3, 80154d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015476:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015478:	b374      	cbz	r4, 80154d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801547a:	f9b1 5000 	ldrsh.w	r5, [r1]
 801547e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015482:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015486:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801548a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801548e:	b303      	cbz	r3, 80154d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015490:	4668      	mov	r0, sp
 8015492:	1d21      	adds	r1, r4, #4
 8015494:	f8ad 5000 	strh.w	r5, [sp]
 8015498:	f8ad 6002 	strh.w	r6, [sp, #2]
 801549c:	f8ad 7004 	strh.w	r7, [sp, #4]
 80154a0:	f8ad 8006 	strh.w	r8, [sp, #6]
 80154a4:	f7ff ff44 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 80154a8:	4668      	mov	r0, sp
 80154aa:	f7ff ff85 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154ae:	b980      	cbnz	r0, 80154d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80154b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80154b4:	4669      	mov	r1, sp
 80154b6:	88a2      	ldrh	r2, [r4, #4]
 80154b8:	4620      	mov	r0, r4
 80154ba:	1a9b      	subs	r3, r3, r2
 80154bc:	88e2      	ldrh	r2, [r4, #6]
 80154be:	f8ad 3000 	strh.w	r3, [sp]
 80154c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80154c6:	1a9b      	subs	r3, r3, r2
 80154c8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80154cc:	6823      	ldr	r3, [r4, #0]
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	4798      	blx	r3
 80154d2:	69a4      	ldr	r4, [r4, #24]
 80154d4:	2c00      	cmp	r4, #0
 80154d6:	d1d8      	bne.n	801548a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80154d8:	b002      	add	sp, #8
 80154da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80154de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154e0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80154e4:	460d      	mov	r5, r1
 80154e6:	4616      	mov	r6, r2
 80154e8:	b323      	cbz	r3, 8015534 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80154ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80154ec:	b314      	cbz	r4, 8015534 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80154ee:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80154f2:	b1eb      	cbz	r3, 8015530 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80154f4:	6828      	ldr	r0, [r5, #0]
 80154f6:	466b      	mov	r3, sp
 80154f8:	6869      	ldr	r1, [r5, #4]
 80154fa:	c303      	stmia	r3!, {r0, r1}
 80154fc:	4668      	mov	r0, sp
 80154fe:	1d21      	adds	r1, r4, #4
 8015500:	f7ff ff16 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8015504:	4668      	mov	r0, sp
 8015506:	f7ff ff57 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801550a:	b988      	cbnz	r0, 8015530 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801550c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015510:	4669      	mov	r1, sp
 8015512:	88a2      	ldrh	r2, [r4, #4]
 8015514:	4620      	mov	r0, r4
 8015516:	1a9b      	subs	r3, r3, r2
 8015518:	88e2      	ldrh	r2, [r4, #6]
 801551a:	f8ad 3000 	strh.w	r3, [sp]
 801551e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015522:	1a9b      	subs	r3, r3, r2
 8015524:	4632      	mov	r2, r6
 8015526:	f8ad 3002 	strh.w	r3, [sp, #2]
 801552a:	6823      	ldr	r3, [r4, #0]
 801552c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801552e:	4798      	blx	r3
 8015530:	69a4      	ldr	r4, [r4, #24]
 8015532:	e7db      	b.n	80154ec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015534:	b002      	add	sp, #8
 8015536:	bd70      	pop	{r4, r5, r6, pc}

08015538 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015538:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801553c:	4770      	bx	lr

0801553e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801553e:	6803      	ldr	r3, [r0, #0]
 8015540:	b513      	push	{r0, r1, r4, lr}
 8015542:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015546:	2300      	movs	r3, #0
 8015548:	e9cd 3300 	strd	r3, r3, [sp]
 801554c:	466b      	mov	r3, sp
 801554e:	47a0      	blx	r4
 8015550:	b002      	add	sp, #8
 8015552:	bd10      	pop	{r4, pc}

08015554 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015554:	2301      	movs	r3, #1
 8015556:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801555a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801555e:	4770      	bx	lr

08015560 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015560:	2301      	movs	r3, #1
 8015562:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015566:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801556a:	4770      	bx	lr

0801556c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801556c:	6843      	ldr	r3, [r0, #4]
 801556e:	2201      	movs	r2, #1
 8015570:	725a      	strb	r2, [r3, #9]
 8015572:	6840      	ldr	r0, [r0, #4]
 8015574:	6803      	ldr	r3, [r0, #0]
 8015576:	691b      	ldr	r3, [r3, #16]
 8015578:	4718      	bx	r3

0801557a <_ZN8touchgfx3HAL8flushDMAEv>:
 801557a:	6840      	ldr	r0, [r0, #4]
 801557c:	6803      	ldr	r3, [r0, #0]
 801557e:	689b      	ldr	r3, [r3, #8]
 8015580:	4718      	bx	r3
	...

08015584 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015584:	4b04      	ldr	r3, [pc, #16]	; (8015598 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	b123      	cbz	r3, 8015594 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801558a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801558e:	f080 0001 	eor.w	r0, r0, #1
 8015592:	4770      	bx	lr
 8015594:	2001      	movs	r0, #1
 8015596:	4770      	bx	lr
 8015598:	2000bc66 	.word	0x2000bc66

0801559c <_ZN8touchgfx3HAL8endFrameEv>:
 801559c:	b510      	push	{r4, lr}
 801559e:	4604      	mov	r4, r0
 80155a0:	6840      	ldr	r0, [r0, #4]
 80155a2:	6803      	ldr	r3, [r0, #0]
 80155a4:	689b      	ldr	r3, [r3, #8]
 80155a6:	4798      	blx	r3
 80155a8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80155ac:	b113      	cbz	r3, 80155b4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80155ae:	2301      	movs	r3, #1
 80155b0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80155b4:	bd10      	pop	{r4, pc}

080155b6 <_ZN8touchgfx3HAL9taskEntryEv>:
 80155b6:	b508      	push	{r3, lr}
 80155b8:	6803      	ldr	r3, [r0, #0]
 80155ba:	4604      	mov	r4, r0
 80155bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80155be:	4798      	blx	r3
 80155c0:	6823      	ldr	r3, [r4, #0]
 80155c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80155c4:	4620      	mov	r0, r4
 80155c6:	4798      	blx	r3
 80155c8:	f7fd fec6 	bl	8013358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80155cc:	6823      	ldr	r3, [r4, #0]
 80155ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155d0:	e7f8      	b.n	80155c4 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080155d4 <_ZN8touchgfx3HAL4tickEv>:
 80155d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80155d6:	6803      	ldr	r3, [r0, #0]
 80155d8:	4604      	mov	r4, r0
 80155da:	4d5c      	ldr	r5, [pc, #368]	; (801574c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80155dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80155e0:	4798      	blx	r3
 80155e2:	2800      	cmp	r0, #0
 80155e4:	f000 8097 	beq.w	8015716 <_ZN8touchgfx3HAL4tickEv+0x142>
 80155e8:	2001      	movs	r0, #1
 80155ea:	2600      	movs	r6, #0
 80155ec:	f7fd fb98 	bl	8012d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80155f0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80155f4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80155f8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80155fc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015600:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015604:	b133      	cbz	r3, 8015614 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015606:	6823      	ldr	r3, [r4, #0]
 8015608:	4620      	mov	r0, r4
 801560a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801560e:	4798      	blx	r3
 8015610:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015614:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015618:	2601      	movs	r6, #1
 801561a:	6862      	ldr	r2, [r4, #4]
 801561c:	f083 0301 	eor.w	r3, r3, #1
 8015620:	702e      	strb	r6, [r5, #0]
 8015622:	7253      	strb	r3, [r2, #9]
 8015624:	f002 fff0 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 8015628:	6803      	ldr	r3, [r0, #0]
 801562a:	4631      	mov	r1, r6
 801562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801562e:	4798      	blx	r3
 8015630:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015634:	b90b      	cbnz	r3, 801563a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015636:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801563a:	f002 ffe5 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 801563e:	6803      	ldr	r3, [r0, #0]
 8015640:	695b      	ldr	r3, [r3, #20]
 8015642:	4798      	blx	r3
 8015644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015646:	6803      	ldr	r3, [r0, #0]
 8015648:	691b      	ldr	r3, [r3, #16]
 801564a:	4798      	blx	r3
 801564c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015650:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015654:	3b01      	subs	r3, #1
 8015656:	b2db      	uxtb	r3, r3
 8015658:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801565c:	b10a      	cbz	r2, 8015662 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801565e:	2b00      	cmp	r3, #0
 8015660:	d1eb      	bne.n	801563a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015662:	4a3b      	ldr	r2, [pc, #236]	; (8015750 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015664:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015668:	7813      	ldrb	r3, [r2, #0]
 801566a:	3301      	adds	r3, #1
 801566c:	b25b      	sxtb	r3, r3
 801566e:	4299      	cmp	r1, r3
 8015670:	7013      	strb	r3, [r2, #0]
 8015672:	dc10      	bgt.n	8015696 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015674:	2300      	movs	r3, #0
 8015676:	68e0      	ldr	r0, [r4, #12]
 8015678:	a902      	add	r1, sp, #8
 801567a:	7013      	strb	r3, [r2, #0]
 801567c:	aa03      	add	r2, sp, #12
 801567e:	6803      	ldr	r3, [r0, #0]
 8015680:	68db      	ldr	r3, [r3, #12]
 8015682:	4798      	blx	r3
 8015684:	6823      	ldr	r3, [r4, #0]
 8015686:	2800      	cmp	r0, #0
 8015688:	d051      	beq.n	801572e <_ZN8touchgfx3HAL4tickEv+0x15a>
 801568a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801568e:	4620      	mov	r0, r4
 8015690:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015694:	4798      	blx	r3
 8015696:	2300      	movs	r3, #0
 8015698:	6960      	ldr	r0, [r4, #20]
 801569a:	f88d 3007 	strb.w	r3, [sp, #7]
 801569e:	b158      	cbz	r0, 80156b8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80156a0:	6803      	ldr	r3, [r0, #0]
 80156a2:	f10d 0107 	add.w	r1, sp, #7
 80156a6:	68db      	ldr	r3, [r3, #12]
 80156a8:	4798      	blx	r3
 80156aa:	b128      	cbz	r0, 80156b8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80156ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80156b2:	6803      	ldr	r3, [r0, #0]
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	4798      	blx	r3
 80156b8:	f104 001c 	add.w	r0, r4, #28
 80156bc:	f00d facc 	bl	8022c58 <_ZN8touchgfx8Gestures4tickEv>
 80156c0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80156c4:	b30b      	cbz	r3, 801570a <_ZN8touchgfx3HAL4tickEv+0x136>
 80156c6:	6920      	ldr	r0, [r4, #16]
 80156c8:	6803      	ldr	r3, [r0, #0]
 80156ca:	691b      	ldr	r3, [r3, #16]
 80156cc:	4798      	blx	r3
 80156ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80156d0:	4606      	mov	r6, r0
 80156d2:	b903      	cbnz	r3, 80156d6 <_ZN8touchgfx3HAL4tickEv+0x102>
 80156d4:	6720      	str	r0, [r4, #112]	; 0x70
 80156d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80156d8:	4a1e      	ldr	r2, [pc, #120]	; (8015754 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80156da:	1af3      	subs	r3, r6, r3
 80156dc:	4293      	cmp	r3, r2
 80156de:	d914      	bls.n	801570a <_ZN8touchgfx3HAL4tickEv+0x136>
 80156e0:	6920      	ldr	r0, [r4, #16]
 80156e2:	6803      	ldr	r3, [r0, #0]
 80156e4:	699b      	ldr	r3, [r3, #24]
 80156e6:	4798      	blx	r3
 80156e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80156ea:	2264      	movs	r2, #100	; 0x64
 80156ec:	1af3      	subs	r3, r6, r3
 80156ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80156f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80156f6:	2800      	cmp	r0, #0
 80156f8:	dc1e      	bgt.n	8015738 <_ZN8touchgfx3HAL4tickEv+0x164>
 80156fa:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80156fe:	6920      	ldr	r0, [r4, #16]
 8015700:	2100      	movs	r1, #0
 8015702:	6803      	ldr	r3, [r0, #0]
 8015704:	69db      	ldr	r3, [r3, #28]
 8015706:	4798      	blx	r3
 8015708:	6726      	str	r6, [r4, #112]	; 0x70
 801570a:	f002 ff7d 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 801570e:	6803      	ldr	r3, [r0, #0]
 8015710:	2100      	movs	r1, #0
 8015712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015714:	4798      	blx	r3
 8015716:	6823      	ldr	r3, [r4, #0]
 8015718:	4620      	mov	r0, r4
 801571a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801571e:	4798      	blx	r3
 8015720:	2001      	movs	r0, #1
 8015722:	f7fd fb08 	bl	8012d36 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015726:	2300      	movs	r3, #0
 8015728:	702b      	strb	r3, [r5, #0]
 801572a:	b004      	add	sp, #16
 801572c:	bd70      	pop	{r4, r5, r6, pc}
 801572e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015732:	4620      	mov	r0, r4
 8015734:	4798      	blx	r3
 8015736:	e7ae      	b.n	8015696 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015738:	2863      	cmp	r0, #99	; 0x63
 801573a:	bfcb      	itete	gt
 801573c:	2300      	movgt	r3, #0
 801573e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015742:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015746:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801574a:	e7d8      	b.n	80156fe <_ZN8touchgfx3HAL4tickEv+0x12a>
 801574c:	2000bc6c 	.word	0x2000bc6c
 8015750:	2000bc6d 	.word	0x2000bc6d
 8015754:	05f5e100 	.word	0x05f5e100

08015758 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015758:	f7fd bd9e 	b.w	8013298 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801575c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801575c:	6581      	str	r1, [r0, #88]	; 0x58
 801575e:	301c      	adds	r0, #28
 8015760:	f00d ba78 	b.w	8022c54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015764 <_ZN8touchgfx3HAL5touchEll>:
 8015764:	b530      	push	{r4, r5, lr}
 8015766:	b087      	sub	sp, #28
 8015768:	4604      	mov	r4, r0
 801576a:	a804      	add	r0, sp, #16
 801576c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015770:	f002 fd4e 	bl	8018210 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015774:	9b04      	ldr	r3, [sp, #16]
 8015776:	a906      	add	r1, sp, #24
 8015778:	a803      	add	r0, sp, #12
 801577a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801577e:	9b05      	ldr	r3, [sp, #20]
 8015780:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015784:	f002 fd92 	bl	80182ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015788:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801578c:	f104 001c 	add.w	r0, r4, #28
 8015790:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015794:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015798:	b189      	cbz	r1, 80157be <_ZN8touchgfx3HAL5touchEll+0x5a>
 801579a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	4613      	mov	r3, r2
 80157a2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80157a6:	462a      	mov	r2, r5
 80157a8:	f00d fa64 	bl	8022c74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80157ac:	b128      	cbz	r0, 80157ba <_ZN8touchgfx3HAL5touchEll+0x56>
 80157ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80157b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80157b4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80157b8:	6623      	str	r3, [r4, #96]	; 0x60
 80157ba:	b007      	add	sp, #28
 80157bc:	bd30      	pop	{r4, r5, pc}
 80157be:	f00d fa9d 	bl	8022cfc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80157c2:	2301      	movs	r3, #1
 80157c4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80157c8:	e7f1      	b.n	80157ae <_ZN8touchgfx3HAL5touchEll+0x4a>

080157ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80157ca:	b570      	push	{r4, r5, r6, lr}
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d050      	beq.n	8015872 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80157d0:	ea81 0002 	eor.w	r0, r1, r2
 80157d4:	07c6      	lsls	r6, r0, #31
 80157d6:	d508      	bpl.n	80157ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80157d8:	3a01      	subs	r2, #1
 80157da:	18cc      	adds	r4, r1, r3
 80157dc:	42a1      	cmp	r1, r4
 80157de:	d048      	beq.n	8015872 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80157e0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80157e4:	f801 0b01 	strb.w	r0, [r1], #1
 80157e8:	e7f8      	b.n	80157dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80157ea:	07d5      	lsls	r5, r2, #31
 80157ec:	bf42      	ittt	mi
 80157ee:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80157f2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80157f6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d915      	bls.n	801582a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80157fe:	ea82 0001 	eor.w	r0, r2, r1
 8015802:	0784      	lsls	r4, r0, #30
 8015804:	d02d      	beq.n	8015862 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015806:	1e94      	subs	r4, r2, #2
 8015808:	4608      	mov	r0, r1
 801580a:	18ce      	adds	r6, r1, r3
 801580c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015810:	f820 5b02 	strh.w	r5, [r0], #2
 8015814:	1a35      	subs	r5, r6, r0
 8015816:	2d01      	cmp	r5, #1
 8015818:	d8f8      	bhi.n	801580c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801581a:	1e98      	subs	r0, r3, #2
 801581c:	f003 0301 	and.w	r3, r3, #1
 8015820:	f020 0001 	bic.w	r0, r0, #1
 8015824:	3002      	adds	r0, #2
 8015826:	4401      	add	r1, r0
 8015828:	4402      	add	r2, r0
 801582a:	1f14      	subs	r4, r2, #4
 801582c:	4608      	mov	r0, r1
 801582e:	18ce      	adds	r6, r1, r3
 8015830:	1a35      	subs	r5, r6, r0
 8015832:	2d03      	cmp	r5, #3
 8015834:	d810      	bhi.n	8015858 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015836:	089c      	lsrs	r4, r3, #2
 8015838:	00a0      	lsls	r0, r4, #2
 801583a:	4401      	add	r1, r0
 801583c:	3801      	subs	r0, #1
 801583e:	4402      	add	r2, r0
 8015840:	f06f 0003 	mvn.w	r0, #3
 8015844:	fb00 3404 	mla	r4, r0, r4, r3
 8015848:	440c      	add	r4, r1
 801584a:	42a1      	cmp	r1, r4
 801584c:	d011      	beq.n	8015872 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801584e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015852:	f801 3b01 	strb.w	r3, [r1], #1
 8015856:	e7f8      	b.n	801584a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015858:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801585c:	f840 5b04 	str.w	r5, [r0], #4
 8015860:	e7e6      	b.n	8015830 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015862:	0790      	lsls	r0, r2, #30
 8015864:	d0e1      	beq.n	801582a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015866:	f832 0b02 	ldrh.w	r0, [r2], #2
 801586a:	3b02      	subs	r3, #2
 801586c:	f821 0b02 	strh.w	r0, [r1], #2
 8015870:	e7db      	b.n	801582a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015872:	2001      	movs	r0, #1
 8015874:	bd70      	pop	{r4, r5, r6, pc}

08015876 <_ZN8touchgfx3HAL7noTouchEv>:
 8015876:	b510      	push	{r4, lr}
 8015878:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801587c:	4604      	mov	r4, r0
 801587e:	b153      	cbz	r3, 8015896 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015880:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015884:	2101      	movs	r1, #1
 8015886:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801588a:	301c      	adds	r0, #28
 801588c:	f00d fa36 	bl	8022cfc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015890:	2300      	movs	r3, #0
 8015892:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015896:	bd10      	pop	{r4, pc}

08015898 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801589c:	4605      	mov	r5, r0
 801589e:	6980      	ldr	r0, [r0, #24]
 80158a0:	b085      	sub	sp, #20
 80158a2:	460f      	mov	r7, r1
 80158a4:	4690      	mov	r8, r2
 80158a6:	4699      	mov	r9, r3
 80158a8:	b930      	cbnz	r0, 80158b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80158aa:	4b1f      	ldr	r3, [pc, #124]	; (8015928 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80158ac:	f44f 7198 	mov.w	r1, #304	; 0x130
 80158b0:	4a1e      	ldr	r2, [pc, #120]	; (801592c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80158b2:	481f      	ldr	r0, [pc, #124]	; (8015930 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80158b4:	f00e fe9c 	bl	80245f0 <__assert_func>
 80158b8:	ac04      	add	r4, sp, #16
 80158ba:	2600      	movs	r6, #0
 80158bc:	f844 6d04 	str.w	r6, [r4, #-4]!
 80158c0:	6806      	ldr	r6, [r0, #0]
 80158c2:	9401      	str	r4, [sp, #4]
 80158c4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80158c8:	9400      	str	r4, [sp, #0]
 80158ca:	6834      	ldr	r4, [r6, #0]
 80158cc:	47a0      	blx	r4
 80158ce:	4c19      	ldr	r4, [pc, #100]	; (8015934 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80158d0:	4606      	mov	r6, r0
 80158d2:	f8a4 9000 	strh.w	r9, [r4]
 80158d6:	f7f9 ff6f 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 80158da:	6803      	ldr	r3, [r0, #0]
 80158dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158de:	4798      	blx	r3
 80158e0:	280c      	cmp	r0, #12
 80158e2:	d80f      	bhi.n	8015904 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80158e4:	e8df f000 	tbb	[pc, r0]
 80158e8:	1b1b1207 	.word	0x1b1b1207
 80158ec:	1b1b1b1b 	.word	0x1b1b1b1b
 80158f0:	1b1b1b1b 	.word	0x1b1b1b1b
 80158f4:	1b          	.byte	0x1b
 80158f5:	00          	.byte	0x00
 80158f6:	8823      	ldrh	r3, [r4, #0]
 80158f8:	fb08 7203 	mla	r2, r8, r3, r7
 80158fc:	9b03      	ldr	r3, [sp, #12]
 80158fe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015902:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015904:	4630      	mov	r0, r6
 8015906:	b005      	add	sp, #20
 8015908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801590c:	8822      	ldrh	r2, [r4, #0]
 801590e:	9b03      	ldr	r3, [sp, #12]
 8015910:	fb08 7202 	mla	r2, r8, r2, r7
 8015914:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015918:	1a9a      	subs	r2, r3, r2
 801591a:	63ea      	str	r2, [r5, #60]	; 0x3c
 801591c:	e7f2      	b.n	8015904 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801591e:	4b06      	ldr	r3, [pc, #24]	; (8015938 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015920:	f240 114d 	movw	r1, #333	; 0x14d
 8015924:	4a01      	ldr	r2, [pc, #4]	; (801592c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015926:	e7c4      	b.n	80158b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015928:	08026ecd 	.word	0x08026ecd
 801592c:	080271de 	.word	0x080271de
 8015930:	08026f12 	.word	0x08026f12
 8015934:	2000bc62 	.word	0x2000bc62
 8015938:	08026f38 	.word	0x08026f38

0801593c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801593c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015940:	4698      	mov	r8, r3
 8015942:	6803      	ldr	r3, [r0, #0]
 8015944:	b087      	sub	sp, #28
 8015946:	460e      	mov	r6, r1
 8015948:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801594a:	4617      	mov	r7, r2
 801594c:	4b0d      	ldr	r3, [pc, #52]	; (8015984 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801594e:	4604      	mov	r4, r0
 8015950:	f8b3 9000 	ldrh.w	r9, [r3]
 8015954:	f7f9 ff30 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8015958:	6803      	ldr	r3, [r0, #0]
 801595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801595c:	4798      	blx	r3
 801595e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015962:	463a      	mov	r2, r7
 8015964:	4631      	mov	r1, r6
 8015966:	9302      	str	r3, [sp, #8]
 8015968:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801596c:	9301      	str	r3, [sp, #4]
 801596e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015972:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015976:	9300      	str	r3, [sp, #0]
 8015978:	4620      	mov	r0, r4
 801597a:	4643      	mov	r3, r8
 801597c:	47a8      	blx	r5
 801597e:	b007      	add	sp, #28
 8015980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015984:	2000bc62 	.word	0x2000bc62

08015988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801598c:	4606      	mov	r6, r0
 801598e:	b089      	sub	sp, #36	; 0x24
 8015990:	4610      	mov	r0, r2
 8015992:	460c      	mov	r4, r1
 8015994:	4691      	mov	r9, r2
 8015996:	4698      	mov	r8, r3
 8015998:	f005 f818 	bl	801a9cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801599c:	2800      	cmp	r0, #0
 801599e:	f000 8092 	beq.w	8015ac6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80159a2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015ae0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80159a6:	ad08      	add	r5, sp, #32
 80159a8:	f8df b138 	ldr.w	fp, [pc, #312]	; 8015ae4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80159ac:	f8da 0000 	ldr.w	r0, [sl]
 80159b0:	4f4a      	ldr	r7, [pc, #296]	; (8015adc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80159b2:	6802      	ldr	r2, [r0, #0]
 80159b4:	6a12      	ldr	r2, [r2, #32]
 80159b6:	4790      	blx	r2
 80159b8:	f8da 0000 	ldr.w	r0, [sl]
 80159bc:	6802      	ldr	r2, [r0, #0]
 80159be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80159c0:	4790      	blx	r2
 80159c2:	f8bb 3000 	ldrh.w	r3, [fp]
 80159c6:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80159ca:	4628      	mov	r0, r5
 80159cc:	9300      	str	r3, [sp, #0]
 80159ce:	883b      	ldrh	r3, [r7, #0]
 80159d0:	9301      	str	r3, [sp, #4]
 80159d2:	f005 f8bb 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80159d6:	f8ab 0000 	strh.w	r0, [fp]
 80159da:	4628      	mov	r0, r5
 80159dc:	f005 f8f0 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80159e0:	f8da b000 	ldr.w	fp, [sl]
 80159e4:	8038      	strh	r0, [r7, #0]
 80159e6:	4648      	mov	r0, r9
 80159e8:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80159ec:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80159f0:	9302      	str	r3, [sp, #8]
 80159f2:	f004 ffeb 	bl	801a9cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80159f6:	f8da 2000 	ldr.w	r2, [sl]
 80159fa:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80159fe:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015a00:	4620      	mov	r0, r4
 8015a02:	6822      	ldr	r2, [r4, #0]
 8015a04:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015a08:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015a10:	4611      	mov	r1, r2
 8015a12:	4798      	blx	r3
 8015a14:	2201      	movs	r2, #1
 8015a16:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015a1a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015a1e:	1d22      	adds	r2, r4, #4
 8015a20:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8015a24:	2900      	cmp	r1, #0
 8015a26:	d051      	beq.n	8015acc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015a28:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015a2c:	2900      	cmp	r1, #0
 8015a2e:	d04d      	beq.n	8015acc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015a30:	6810      	ldr	r0, [r2, #0]
 8015a32:	f10d 0c18 	add.w	ip, sp, #24
 8015a36:	6851      	ldr	r1, [r2, #4]
 8015a38:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015a3c:	4641      	mov	r1, r8
 8015a3e:	a806      	add	r0, sp, #24
 8015a40:	f7ff fc76 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8015a44:	4628      	mov	r0, r5
 8015a46:	f005 fa0d 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a4a:	4680      	mov	r8, r0
 8015a4c:	f7f9 feb4 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8015a50:	6802      	ldr	r2, [r0, #0]
 8015a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015a54:	4790      	blx	r2
 8015a56:	4580      	cmp	r8, r0
 8015a58:	d03d      	beq.n	8015ad6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8015a5a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a5c:	b150      	cbz	r0, 8015a74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015a5e:	4628      	mov	r0, r5
 8015a60:	f005 fa00 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a64:	4605      	mov	r5, r0
 8015a66:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a68:	6803      	ldr	r3, [r0, #0]
 8015a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a6c:	4798      	blx	r3
 8015a6e:	1a2b      	subs	r3, r5, r0
 8015a70:	4258      	negs	r0, r3
 8015a72:	4158      	adcs	r0, r3
 8015a74:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8015a78:	2500      	movs	r5, #0
 8015a7a:	6963      	ldr	r3, [r4, #20]
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	6822      	ldr	r2, [r4, #0]
 8015a80:	a906      	add	r1, sp, #24
 8015a82:	6165      	str	r5, [r4, #20]
 8015a84:	9303      	str	r3, [sp, #12]
 8015a86:	6892      	ldr	r2, [r2, #8]
 8015a88:	4790      	blx	r2
 8015a8a:	9b03      	ldr	r3, [sp, #12]
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	4652      	mov	r2, sl
 8015a90:	6163      	str	r3, [r4, #20]
 8015a92:	4649      	mov	r1, r9
 8015a94:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015a98:	6823      	ldr	r3, [r4, #0]
 8015a9a:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015a9e:	4c10      	ldr	r4, [pc, #64]	; (8015ae0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8015aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015aa2:	4798      	blx	r3
 8015aa4:	6820      	ldr	r0, [r4, #0]
 8015aa6:	9b02      	ldr	r3, [sp, #8]
 8015aa8:	9a00      	ldr	r2, [sp, #0]
 8015aaa:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015aae:	4b0d      	ldr	r3, [pc, #52]	; (8015ae4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015ab0:	801a      	strh	r2, [r3, #0]
 8015ab2:	4b0a      	ldr	r3, [pc, #40]	; (8015adc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015ab4:	9a01      	ldr	r2, [sp, #4]
 8015ab6:	801a      	strh	r2, [r3, #0]
 8015ab8:	6803      	ldr	r3, [r0, #0]
 8015aba:	6a1b      	ldr	r3, [r3, #32]
 8015abc:	4798      	blx	r3
 8015abe:	6820      	ldr	r0, [r4, #0]
 8015ac0:	6803      	ldr	r3, [r0, #0]
 8015ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac4:	4798      	blx	r3
 8015ac6:	b009      	add	sp, #36	; 0x24
 8015ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015acc:	ab06      	add	r3, sp, #24
 8015ace:	6810      	ldr	r0, [r2, #0]
 8015ad0:	6851      	ldr	r1, [r2, #4]
 8015ad2:	c303      	stmia	r3!, {r0, r1}
 8015ad4:	e7b6      	b.n	8015a44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8015ad6:	2000      	movs	r0, #0
 8015ad8:	e7cc      	b.n	8015a74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015ada:	bf00      	nop
 8015adc:	2000bc64 	.word	0x2000bc64
 8015ae0:	2000bc68 	.word	0x2000bc68
 8015ae4:	2000bc62 	.word	0x2000bc62

08015ae8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015ae8:	4b07      	ldr	r3, [pc, #28]	; (8015b08 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015aea:	b510      	push	{r4, lr}
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	4604      	mov	r4, r0
 8015af0:	b13b      	cbz	r3, 8015b02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015af2:	6803      	ldr	r3, [r0, #0]
 8015af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015af6:	4798      	blx	r3
 8015af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015afa:	4283      	cmp	r3, r0
 8015afc:	d101      	bne.n	8015b02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015afe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015b00:	bd10      	pop	{r4, pc}
 8015b02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015b04:	e7fc      	b.n	8015b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015b06:	bf00      	nop
 8015b08:	2000bc66 	.word	0x2000bc66

08015b0c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015b0c:	4b0b      	ldr	r3, [pc, #44]	; (8015b3c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015b0e:	b510      	push	{r4, lr}
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	4604      	mov	r4, r0
 8015b14:	b95b      	cbnz	r3, 8015b2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015b16:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015b1a:	2b02      	cmp	r3, #2
 8015b1c:	d007      	beq.n	8015b2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015b1e:	6840      	ldr	r0, [r0, #4]
 8015b20:	f000 fbc8 	bl	80162b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015b24:	b118      	cbz	r0, 8015b2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015b26:	6862      	ldr	r2, [r4, #4]
 8015b28:	7a53      	ldrb	r3, [r2, #9]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d0fc      	beq.n	8015b28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015b2e:	f7fd fba5 	bl	801327c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015b32:	4620      	mov	r0, r4
 8015b34:	f7ff ffd8 	bl	8015ae8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b38:	bd10      	pop	{r4, pc}
 8015b3a:	bf00      	nop
 8015b3c:	2000bc66 	.word	0x2000bc66

08015b40 <_ZN8touchgfx3HAL10initializeEv>:
 8015b40:	b510      	push	{r4, lr}
 8015b42:	4604      	mov	r4, r0
 8015b44:	f7fd fb76 	bl	8013234 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015b48:	6860      	ldr	r0, [r4, #4]
 8015b4a:	6803      	ldr	r3, [r0, #0]
 8015b4c:	68db      	ldr	r3, [r3, #12]
 8015b4e:	4798      	blx	r3
 8015b50:	68e0      	ldr	r0, [r4, #12]
 8015b52:	6803      	ldr	r3, [r0, #0]
 8015b54:	689b      	ldr	r3, [r3, #8]
 8015b56:	4798      	blx	r3
 8015b58:	6823      	ldr	r3, [r4, #0]
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b62:	4718      	bx	r3

08015b64 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015b64:	b508      	push	{r3, lr}
 8015b66:	290c      	cmp	r1, #12
 8015b68:	d817      	bhi.n	8015b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015b6a:	e8df f001 	tbb	[pc, r1]
 8015b6e:	090b      	.short	0x090b
 8015b70:	0d0d0d07 	.word	0x0d0d0d07
 8015b74:	1414140d 	.word	0x1414140d
 8015b78:	1414      	.short	0x1414
 8015b7a:	0d          	.byte	0x0d
 8015b7b:	00          	.byte	0x00
 8015b7c:	2020      	movs	r0, #32
 8015b7e:	bd08      	pop	{r3, pc}
 8015b80:	2018      	movs	r0, #24
 8015b82:	e7fc      	b.n	8015b7e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b84:	2010      	movs	r0, #16
 8015b86:	e7fa      	b.n	8015b7e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b88:	4b05      	ldr	r3, [pc, #20]	; (8015ba0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015b8a:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015b8e:	4a05      	ldr	r2, [pc, #20]	; (8015ba4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015b90:	4805      	ldr	r0, [pc, #20]	; (8015ba8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015b92:	f00e fd2d 	bl	80245f0 <__assert_func>
 8015b96:	2008      	movs	r0, #8
 8015b98:	e7f1      	b.n	8015b7e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b9a:	2000      	movs	r0, #0
 8015b9c:	e7ef      	b.n	8015b7e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b9e:	bf00      	nop
 8015ba0:	0802700b 	.word	0x0802700b
 8015ba4:	080273a0 	.word	0x080273a0
 8015ba8:	08026f12 	.word	0x08026f12

08015bac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015bac:	b570      	push	{r4, r5, r6, lr}
 8015bae:	460d      	mov	r5, r1
 8015bb0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015bb4:	4616      	mov	r6, r2
 8015bb6:	461c      	mov	r4, r3
 8015bb8:	f7ff ffd4 	bl	8015b64 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015bbc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015bc0:	10c0      	asrs	r0, r0, #3
 8015bc2:	fb06 5101 	mla	r1, r6, r1, r5
 8015bc6:	fb00 4001 	mla	r0, r0, r1, r4
 8015bca:	bd70      	pop	{r4, r5, r6, pc}

08015bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bd0:	b08a      	sub	sp, #40	; 0x28
 8015bd2:	f04f 0c00 	mov.w	ip, #0
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	469a      	mov	sl, r3
 8015bda:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015bde:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015be2:	f1b8 0f02 	cmp.w	r8, #2
 8015be6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015bea:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015bee:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015bf2:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015bf6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015bfa:	f8cd c020 	str.w	ip, [sp, #32]
 8015bfe:	d030      	beq.n	8015c62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015c00:	2bff      	cmp	r3, #255	; 0xff
 8015c02:	d12c      	bne.n	8015c5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015c04:	4560      	cmp	r0, ip
 8015c06:	bf14      	ite	ne
 8015c08:	2004      	movne	r0, #4
 8015c0a:	2001      	moveq	r0, #1
 8015c0c:	9204      	str	r2, [sp, #16]
 8015c0e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015c12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015c16:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015c1a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015c1e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c26:	4620      	mov	r0, r4
 8015c28:	f7ff ff5e 	bl	8015ae8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015c2c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015c30:	4603      	mov	r3, r0
 8015c32:	4651      	mov	r1, sl
 8015c34:	4620      	mov	r0, r4
 8015c36:	e9cd 9700 	strd	r9, r7, [sp]
 8015c3a:	f7ff ffb7 	bl	8015bac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015c3e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015c42:	9005      	str	r0, [sp, #20]
 8015c44:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015c48:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015c4c:	b106      	cbz	r6, 8015c50 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015c4e:	b98d      	cbnz	r5, 8015c74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015c50:	4b12      	ldr	r3, [pc, #72]	; (8015c9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015c52:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8015c56:	4a12      	ldr	r2, [pc, #72]	; (8015ca0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015c58:	4812      	ldr	r0, [pc, #72]	; (8015ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015c5a:	f00e fcc9 	bl	80245f0 <__assert_func>
 8015c5e:	2004      	movs	r0, #4
 8015c60:	e7d4      	b.n	8015c0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c62:	2bff      	cmp	r3, #255	; 0xff
 8015c64:	d104      	bne.n	8015c70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015c66:	2800      	cmp	r0, #0
 8015c68:	bf14      	ite	ne
 8015c6a:	2040      	movne	r0, #64	; 0x40
 8015c6c:	2020      	moveq	r0, #32
 8015c6e:	e7cd      	b.n	8015c0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c70:	2040      	movs	r0, #64	; 0x40
 8015c72:	e7cb      	b.n	8015c0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c74:	6823      	ldr	r3, [r4, #0]
 8015c76:	4620      	mov	r0, r4
 8015c78:	9d02      	ldr	r5, [sp, #8]
 8015c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c7c:	4798      	blx	r3
 8015c7e:	4228      	tst	r0, r5
 8015c80:	d104      	bne.n	8015c8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8015c82:	4b09      	ldr	r3, [pc, #36]	; (8015ca8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015c84:	f240 11b1 	movw	r1, #433	; 0x1b1
 8015c88:	4a05      	ldr	r2, [pc, #20]	; (8015ca0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015c8a:	e7e5      	b.n	8015c58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015c8c:	6860      	ldr	r0, [r4, #4]
 8015c8e:	a902      	add	r1, sp, #8
 8015c90:	6803      	ldr	r3, [r0, #0]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	4798      	blx	r3
 8015c96:	b00a      	add	sp, #40	; 0x28
 8015c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c9c:	08026f8e 	.word	0x08026f8e
 8015ca0:	08027242 	.word	0x08027242
 8015ca4:	08026f12 	.word	0x08026f12
 8015ca8:	08026fc6 	.word	0x08026fc6

08015cac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015cac:	b510      	push	{r4, lr}
 8015cae:	b08a      	sub	sp, #40	; 0x28
 8015cb0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8015cb4:	9408      	str	r4, [sp, #32]
 8015cb6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015cba:	9407      	str	r4, [sp, #28]
 8015cbc:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8015cc0:	9406      	str	r4, [sp, #24]
 8015cc2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8015cc6:	9405      	str	r4, [sp, #20]
 8015cc8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8015ccc:	9404      	str	r4, [sp, #16]
 8015cce:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8015cd2:	9403      	str	r4, [sp, #12]
 8015cd4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8015cd8:	9402      	str	r4, [sp, #8]
 8015cda:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015cde:	e9cd 3400 	strd	r3, r4, [sp]
 8015ce2:	4613      	mov	r3, r2
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	f7ff ff71 	bl	8015bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015cea:	b00a      	add	sp, #40	; 0x28
 8015cec:	bd10      	pop	{r4, pc}
	...

08015cf0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cf2:	b08b      	sub	sp, #44	; 0x2c
 8015cf4:	4616      	mov	r6, r2
 8015cf6:	460d      	mov	r5, r1
 8015cf8:	461f      	mov	r7, r3
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	f7f9 fd5c 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8015d00:	6803      	ldr	r3, [r0, #0]
 8015d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d04:	4798      	blx	r3
 8015d06:	4b0e      	ldr	r3, [pc, #56]	; (8015d40 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015d08:	2200      	movs	r2, #0
 8015d0a:	4629      	mov	r1, r5
 8015d0c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015d10:	881b      	ldrh	r3, [r3, #0]
 8015d12:	4620      	mov	r0, r4
 8015d14:	9306      	str	r3, [sp, #24]
 8015d16:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015d1a:	9305      	str	r3, [sp, #20]
 8015d1c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015d20:	9304      	str	r3, [sp, #16]
 8015d22:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015d26:	9303      	str	r3, [sp, #12]
 8015d28:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015d2c:	9302      	str	r3, [sp, #8]
 8015d2e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015d32:	e9cd 7300 	strd	r7, r3, [sp]
 8015d36:	4633      	mov	r3, r6
 8015d38:	f7ff ff48 	bl	8015bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015d3c:	b00b      	add	sp, #44	; 0x2c
 8015d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d40:	2000bc62 	.word	0x2000bc62

08015d44 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d48:	461f      	mov	r7, r3
 8015d4a:	4b14      	ldr	r3, [pc, #80]	; (8015d9c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015d4c:	b08a      	sub	sp, #40	; 0x28
 8015d4e:	4616      	mov	r6, r2
 8015d50:	f8b3 8000 	ldrh.w	r8, [r3]
 8015d54:	460d      	mov	r5, r1
 8015d56:	4604      	mov	r4, r0
 8015d58:	f7f9 fd2e 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8015d5c:	6803      	ldr	r3, [r0, #0]
 8015d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d60:	4798      	blx	r3
 8015d62:	2302      	movs	r3, #2
 8015d64:	9008      	str	r0, [sp, #32]
 8015d66:	2200      	movs	r2, #0
 8015d68:	4629      	mov	r1, r5
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8015d70:	2301      	movs	r3, #1
 8015d72:	9305      	str	r3, [sp, #20]
 8015d74:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015d78:	9304      	str	r3, [sp, #16]
 8015d7a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015d7e:	9303      	str	r3, [sp, #12]
 8015d80:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015d84:	9302      	str	r3, [sp, #8]
 8015d86:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015d8a:	e9cd 7300 	strd	r7, r3, [sp]
 8015d8e:	4633      	mov	r3, r6
 8015d90:	f7ff ff1c 	bl	8015bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015d94:	b00a      	add	sp, #40	; 0x28
 8015d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d9a:	bf00      	nop
 8015d9c:	2000bc62 	.word	0x2000bc62

08015da0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da4:	b08b      	sub	sp, #44	; 0x2c
 8015da6:	469b      	mov	fp, r3
 8015da8:	4604      	mov	r4, r0
 8015daa:	4692      	mov	sl, r2
 8015dac:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015db0:	2600      	movs	r6, #0
 8015db2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015db6:	4689      	mov	r9, r1
 8015db8:	2fff      	cmp	r7, #255	; 0xff
 8015dba:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015dbe:	9608      	str	r6, [sp, #32]
 8015dc0:	bf14      	ite	ne
 8015dc2:	2308      	movne	r3, #8
 8015dc4:	2302      	moveq	r3, #2
 8015dc6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015dca:	f7ff fe8d 	bl	8015ae8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015dce:	465a      	mov	r2, fp
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	4651      	mov	r1, sl
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	e9cd 8500 	strd	r8, r5, [sp]
 8015dda:	f7ff fee7 	bl	8015bac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015dde:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015de2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015de6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015dea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015dee:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015df2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015df6:	6823      	ldr	r3, [r4, #0]
 8015df8:	9d02      	ldr	r5, [sp, #8]
 8015dfa:	9005      	str	r0, [sp, #20]
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	f8ad 601c 	strh.w	r6, [sp, #28]
 8015e02:	f8ad 801e 	strh.w	r8, [sp, #30]
 8015e06:	f8cd 9020 	str.w	r9, [sp, #32]
 8015e0a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e10:	4798      	blx	r3
 8015e12:	4228      	tst	r0, r5
 8015e14:	d106      	bne.n	8015e24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015e16:	4b07      	ldr	r3, [pc, #28]	; (8015e34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015e18:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8015e1c:	4a06      	ldr	r2, [pc, #24]	; (8015e38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015e1e:	4807      	ldr	r0, [pc, #28]	; (8015e3c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015e20:	f00e fbe6 	bl	80245f0 <__assert_func>
 8015e24:	6860      	ldr	r0, [r4, #4]
 8015e26:	a902      	add	r1, sp, #8
 8015e28:	6803      	ldr	r3, [r0, #0]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	4798      	blx	r3
 8015e2e:	b00b      	add	sp, #44	; 0x2c
 8015e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e34:	08026fc6 	.word	0x08026fc6
 8015e38:	0802730b 	.word	0x0802730b
 8015e3c:	08026f12 	.word	0x08026f12

08015e40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015e44:	461f      	mov	r7, r3
 8015e46:	4b0b      	ldr	r3, [pc, #44]	; (8015e74 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015e48:	460d      	mov	r5, r1
 8015e4a:	4616      	mov	r6, r2
 8015e4c:	f8b3 8000 	ldrh.w	r8, [r3]
 8015e50:	4604      	mov	r4, r0
 8015e52:	f7f9 fcb1 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8015e56:	6803      	ldr	r3, [r0, #0]
 8015e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e5a:	4798      	blx	r3
 8015e5c:	463b      	mov	r3, r7
 8015e5e:	4632      	mov	r2, r6
 8015e60:	4629      	mov	r1, r5
 8015e62:	e9cd 8000 	strd	r8, r0, [sp]
 8015e66:	4620      	mov	r0, r4
 8015e68:	f7ff fea0 	bl	8015bac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015e6c:	b002      	add	sp, #8
 8015e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e72:	bf00      	nop
 8015e74:	2000bc62 	.word	0x2000bc62

08015e78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e7c:	4698      	mov	r8, r3
 8015e7e:	b088      	sub	sp, #32
 8015e80:	2300      	movs	r3, #0
 8015e82:	4617      	mov	r7, r2
 8015e84:	4604      	mov	r4, r0
 8015e86:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015e8a:	9306      	str	r3, [sp, #24]
 8015e8c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015e90:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015e94:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015e98:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015e9c:	e9cd 3100 	strd	r3, r1, [sp]
 8015ea0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015ea4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ea8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015eac:	f88d 301c 	strb.w	r3, [sp, #28]
 8015eb0:	f7ff fe1a 	bl	8015ae8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015eb4:	4642      	mov	r2, r8
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	4639      	mov	r1, r7
 8015eba:	4620      	mov	r0, r4
 8015ebc:	f7ff ffc0 	bl	8015e40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015ec0:	4b16      	ldr	r3, [pc, #88]	; (8015f1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015ec2:	9003      	str	r0, [sp, #12]
 8015ec4:	881b      	ldrh	r3, [r3, #0]
 8015ec6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015eca:	f7f9 fc75 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8015ece:	6803      	ldr	r3, [r0, #0]
 8015ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed2:	4798      	blx	r3
 8015ed4:	f88d 001e 	strb.w	r0, [sp, #30]
 8015ed8:	f88d 001d 	strb.w	r0, [sp, #29]
 8015edc:	b106      	cbz	r6, 8015ee0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015ede:	b935      	cbnz	r5, 8015eee <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015ee0:	4b0f      	ldr	r3, [pc, #60]	; (8015f20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015ee2:	f240 11cd 	movw	r1, #461	; 0x1cd
 8015ee6:	4a0f      	ldr	r2, [pc, #60]	; (8015f24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015ee8:	480f      	ldr	r0, [pc, #60]	; (8015f28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015eea:	f00e fb81 	bl	80245f0 <__assert_func>
 8015eee:	6823      	ldr	r3, [r4, #0]
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	9d00      	ldr	r5, [sp, #0]
 8015ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ef6:	4798      	blx	r3
 8015ef8:	4228      	tst	r0, r5
 8015efa:	d104      	bne.n	8015f06 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015efc:	4b0b      	ldr	r3, [pc, #44]	; (8015f2c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015efe:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8015f02:	4a08      	ldr	r2, [pc, #32]	; (8015f24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015f04:	e7f0      	b.n	8015ee8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8015f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f08:	4669      	mov	r1, sp
 8015f0a:	6860      	ldr	r0, [r4, #4]
 8015f0c:	9306      	str	r3, [sp, #24]
 8015f0e:	6803      	ldr	r3, [r0, #0]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	4798      	blx	r3
 8015f14:	b008      	add	sp, #32
 8015f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f1a:	bf00      	nop
 8015f1c:	2000bc62 	.word	0x2000bc62
 8015f20:	08026f8e 	.word	0x08026f8e
 8015f24:	080270f4 	.word	0x080270f4
 8015f28:	08026f12 	.word	0x08026f12
 8015f2c:	08026fc6 	.word	0x08026fc6

08015f30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015f30:	b570      	push	{r4, r5, r6, lr}
 8015f32:	b08a      	sub	sp, #40	; 0x28
 8015f34:	4604      	mov	r4, r0
 8015f36:	466b      	mov	r3, sp
 8015f38:	e883 0006 	stmia.w	r3, {r1, r2}
 8015f3c:	4b1f      	ldr	r3, [pc, #124]	; (8015fbc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	b933      	cbnz	r3, 8015f50 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015f42:	4b1f      	ldr	r3, [pc, #124]	; (8015fc0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015f44:	f240 11f9 	movw	r1, #505	; 0x1f9
 8015f48:	4a1e      	ldr	r2, [pc, #120]	; (8015fc4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015f4a:	481f      	ldr	r0, [pc, #124]	; (8015fc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015f4c:	f00e fb50 	bl	80245f0 <__assert_func>
 8015f50:	2300      	movs	r3, #0
 8015f52:	f8bd 5000 	ldrh.w	r5, [sp]
 8015f56:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015f5a:	9308      	str	r3, [sp, #32]
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	9302      	str	r3, [sp, #8]
 8015f60:	6803      	ldr	r3, [r0, #0]
 8015f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f64:	4798      	blx	r3
 8015f66:	4632      	mov	r2, r6
 8015f68:	4629      	mov	r1, r5
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	f7ff ff67 	bl	8015e40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015f72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015f74:	9003      	str	r0, [sp, #12]
 8015f76:	9305      	str	r3, [sp, #20]
 8015f78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015f7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015f84:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f88:	4b10      	ldr	r3, [pc, #64]	; (8015fcc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015f8a:	881b      	ldrh	r3, [r3, #0]
 8015f8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015f90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015f94:	f7f9 fc10 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8015f98:	6803      	ldr	r3, [r0, #0]
 8015f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f9c:	4798      	blx	r3
 8015f9e:	23ff      	movs	r3, #255	; 0xff
 8015fa0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015fa4:	a902      	add	r1, sp, #8
 8015fa6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015faa:	6860      	ldr	r0, [r4, #4]
 8015fac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015fb0:	6803      	ldr	r3, [r0, #0]
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	4798      	blx	r3
 8015fb6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015fb8:	b00a      	add	sp, #40	; 0x28
 8015fba:	bd70      	pop	{r4, r5, r6, pc}
 8015fbc:	2000bc67 	.word	0x2000bc67
 8015fc0:	08026e5f 	.word	0x08026e5f
 8015fc4:	08027198 	.word	0x08027198
 8015fc8:	08026f12 	.word	0x08026f12
 8015fcc:	2000bc62 	.word	0x2000bc62

08015fd0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fd2:	b08b      	sub	sp, #44	; 0x2c
 8015fd4:	4604      	mov	r4, r0
 8015fd6:	466d      	mov	r5, sp
 8015fd8:	e885 0006 	stmia.w	r5, {r1, r2}
 8015fdc:	461d      	mov	r5, r3
 8015fde:	2300      	movs	r3, #0
 8015fe0:	f8bd 6000 	ldrh.w	r6, [sp]
 8015fe4:	9308      	str	r3, [sp, #32]
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015fec:	9302      	str	r3, [sp, #8]
 8015fee:	6803      	ldr	r3, [r0, #0]
 8015ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ff2:	4798      	blx	r3
 8015ff4:	463a      	mov	r2, r7
 8015ff6:	4631      	mov	r1, r6
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	f7ff ff20 	bl	8015e40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016000:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016004:	9003      	str	r0, [sp, #12]
 8016006:	f8ad 3018 	strh.w	r3, [sp, #24]
 801600a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801600e:	9505      	str	r5, [sp, #20]
 8016010:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016014:	4b0d      	ldr	r3, [pc, #52]	; (801604c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016016:	881b      	ldrh	r3, [r3, #0]
 8016018:	f8ad 301c 	strh.w	r3, [sp, #28]
 801601c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801601e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016022:	f7f9 fbc9 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8016026:	6803      	ldr	r3, [r0, #0]
 8016028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801602a:	4798      	blx	r3
 801602c:	23ff      	movs	r3, #255	; 0xff
 801602e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016032:	a902      	add	r1, sp, #8
 8016034:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016038:	6860      	ldr	r0, [r4, #4]
 801603a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801603e:	6803      	ldr	r3, [r0, #0]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	4798      	blx	r3
 8016044:	4628      	mov	r0, r5
 8016046:	b00b      	add	sp, #44	; 0x2c
 8016048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801604a:	bf00      	nop
 801604c:	2000bc62 	.word	0x2000bc62

08016050 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016050:	b570      	push	{r4, r5, r6, lr}
 8016052:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016056:	4604      	mov	r4, r0
 8016058:	b19b      	cbz	r3, 8016082 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801605a:	2002      	movs	r0, #2
 801605c:	f7fc fe76 	bl	8012d4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016060:	2300      	movs	r3, #0
 8016062:	4620      	mov	r0, r4
 8016064:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016068:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801606c:	6823      	ldr	r3, [r4, #0]
 801606e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016072:	f7ff fd39 	bl	8015ae8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016076:	4601      	mov	r1, r0
 8016078:	4620      	mov	r0, r4
 801607a:	462b      	mov	r3, r5
 801607c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016080:	4718      	bx	r3
 8016082:	bd70      	pop	{r4, r5, r6, pc}

08016084 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016084:	4770      	bx	lr

08016086 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016086:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801608a:	1a13      	subs	r3, r2, r0
 801608c:	4258      	negs	r0, r3
 801608e:	4158      	adcs	r0, r3
 8016090:	4770      	bx	lr

08016092 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016092:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016096:	1a9b      	subs	r3, r3, r2
 8016098:	2b00      	cmp	r3, #0
 801609a:	bfdc      	itt	le
 801609c:	6882      	ldrle	r2, [r0, #8]
 801609e:	189b      	addle	r3, r3, r2
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	bfcc      	ite	gt
 80160a4:	2000      	movgt	r0, #0
 80160a6:	2001      	movle	r0, #1
 80160a8:	4770      	bx	lr

080160aa <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80160aa:	6902      	ldr	r2, [r0, #16]
 80160ac:	6840      	ldr	r0, [r0, #4]
 80160ae:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80160b2:	4770      	bx	lr

080160b4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80160b4:	6803      	ldr	r3, [r0, #0]
 80160b6:	691b      	ldr	r3, [r3, #16]
 80160b8:	4718      	bx	r3

080160ba <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80160ba:	4770      	bx	lr

080160bc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80160bc:	4770      	bx	lr
	...

080160c0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80160c0:	2301      	movs	r3, #1
 80160c2:	b570      	push	{r4, r5, r6, lr}
 80160c4:	7203      	strb	r3, [r0, #8]
 80160c6:	4604      	mov	r4, r0
 80160c8:	6840      	ldr	r0, [r0, #4]
 80160ca:	6803      	ldr	r3, [r0, #0]
 80160cc:	699b      	ldr	r3, [r3, #24]
 80160ce:	4798      	blx	r3
 80160d0:	6803      	ldr	r3, [r0, #0]
 80160d2:	4605      	mov	r5, r0
 80160d4:	2b08      	cmp	r3, #8
 80160d6:	d01e      	beq.n	8016116 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80160d8:	d80b      	bhi.n	80160f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160da:	2b02      	cmp	r3, #2
 80160dc:	d027      	beq.n	801612e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80160de:	2b04      	cmp	r3, #4
 80160e0:	d011      	beq.n	8016106 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d028      	beq.n	8016138 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80160e6:	4b17      	ldr	r3, [pc, #92]	; (8016144 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80160e8:	218b      	movs	r1, #139	; 0x8b
 80160ea:	4a17      	ldr	r2, [pc, #92]	; (8016148 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80160ec:	4817      	ldr	r0, [pc, #92]	; (801614c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80160ee:	f00e fa7f 	bl	80245f0 <__assert_func>
 80160f2:	2b40      	cmp	r3, #64	; 0x40
 80160f4:	d020      	beq.n	8016138 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80160f6:	d801      	bhi.n	80160fc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80160f8:	2b20      	cmp	r3, #32
 80160fa:	e7f3      	b.n	80160e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80160fc:	2b80      	cmp	r3, #128	; 0x80
 80160fe:	d01b      	beq.n	8016138 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016104:	e7ee      	b.n	80160e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016106:	6823      	ldr	r3, [r4, #0]
 8016108:	7f01      	ldrb	r1, [r0, #28]
 801610a:	4620      	mov	r0, r4
 801610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801610e:	4798      	blx	r3
 8016110:	6823      	ldr	r3, [r4, #0]
 8016112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016114:	e006      	b.n	8016124 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016116:	6823      	ldr	r3, [r4, #0]
 8016118:	7f01      	ldrb	r1, [r0, #28]
 801611a:	4620      	mov	r0, r4
 801611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801611e:	4798      	blx	r3
 8016120:	6823      	ldr	r3, [r4, #0]
 8016122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016124:	4629      	mov	r1, r5
 8016126:	4620      	mov	r0, r4
 8016128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801612c:	4718      	bx	r3
 801612e:	6823      	ldr	r3, [r4, #0]
 8016130:	4620      	mov	r0, r4
 8016132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016134:	4798      	blx	r3
 8016136:	e7f3      	b.n	8016120 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016138:	6823      	ldr	r3, [r4, #0]
 801613a:	4620      	mov	r0, r4
 801613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801613e:	4798      	blx	r3
 8016140:	e7e6      	b.n	8016110 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016142:	bf00      	nop
 8016144:	080273e9 	.word	0x080273e9
 8016148:	080274f8 	.word	0x080274f8
 801614c:	0802740e 	.word	0x0802740e

08016150 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016150:	b570      	push	{r4, r5, r6, lr}
 8016152:	4604      	mov	r4, r0
 8016154:	460e      	mov	r6, r1
 8016156:	6860      	ldr	r0, [r4, #4]
 8016158:	6803      	ldr	r3, [r0, #0]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	4798      	blx	r3
 801615e:	2800      	cmp	r0, #0
 8016160:	d1f9      	bne.n	8016156 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016162:	4d0b      	ldr	r5, [pc, #44]	; (8016190 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016164:	6828      	ldr	r0, [r5, #0]
 8016166:	6803      	ldr	r3, [r0, #0]
 8016168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801616a:	4798      	blx	r3
 801616c:	f7fd f8a2 	bl	80132b4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016170:	6860      	ldr	r0, [r4, #4]
 8016172:	4631      	mov	r1, r6
 8016174:	6803      	ldr	r3, [r0, #0]
 8016176:	689b      	ldr	r3, [r3, #8]
 8016178:	4798      	blx	r3
 801617a:	6823      	ldr	r3, [r4, #0]
 801617c:	4620      	mov	r0, r4
 801617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016180:	4798      	blx	r3
 8016182:	6828      	ldr	r0, [r5, #0]
 8016184:	6803      	ldr	r3, [r0, #0]
 8016186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801618a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801618c:	4718      	bx	r3
 801618e:	bf00      	nop
 8016190:	2000bc68 	.word	0x2000bc68

08016194 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016194:	b508      	push	{r3, lr}
 8016196:	f7fd f871 	bl	801327c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801619a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801619e:	f7fd b87b 	b.w	8013298 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080161a2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80161a2:	b510      	push	{r4, lr}
 80161a4:	4604      	mov	r4, r0
 80161a6:	6840      	ldr	r0, [r0, #4]
 80161a8:	6803      	ldr	r3, [r0, #0]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	4798      	blx	r3
 80161ae:	b948      	cbnz	r0, 80161c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161b0:	7a63      	ldrb	r3, [r4, #9]
 80161b2:	b13b      	cbz	r3, 80161c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161b4:	7a23      	ldrb	r3, [r4, #8]
 80161b6:	b92b      	cbnz	r3, 80161c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	4620      	mov	r0, r4
 80161bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161c2:	4718      	bx	r3
 80161c4:	bd10      	pop	{r4, pc}
	...

080161c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80161c8:	b510      	push	{r4, lr}
 80161ca:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80161ce:	1b12      	subs	r2, r2, r4
 80161d0:	2a00      	cmp	r2, #0
 80161d2:	bfdc      	itt	le
 80161d4:	6883      	ldrle	r3, [r0, #8]
 80161d6:	18d2      	addle	r2, r2, r3
 80161d8:	2a01      	cmp	r2, #1
 80161da:	dd18      	ble.n	801620e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80161dc:	6843      	ldr	r3, [r0, #4]
 80161de:	f101 021c 	add.w	r2, r1, #28
 80161e2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80161e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80161ea:	4291      	cmp	r1, r2
 80161ec:	f843 4b04 	str.w	r4, [r3], #4
 80161f0:	d1f9      	bne.n	80161e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80161f2:	880a      	ldrh	r2, [r1, #0]
 80161f4:	801a      	strh	r2, [r3, #0]
 80161f6:	788a      	ldrb	r2, [r1, #2]
 80161f8:	709a      	strb	r2, [r3, #2]
 80161fa:	68c3      	ldr	r3, [r0, #12]
 80161fc:	6882      	ldr	r2, [r0, #8]
 80161fe:	f3bf 8f5b 	dmb	ish
 8016202:	3301      	adds	r3, #1
 8016204:	429a      	cmp	r2, r3
 8016206:	bfd8      	it	le
 8016208:	1a9b      	suble	r3, r3, r2
 801620a:	60c3      	str	r3, [r0, #12]
 801620c:	bd10      	pop	{r4, pc}
 801620e:	4b03      	ldr	r3, [pc, #12]	; (801621c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016210:	2139      	movs	r1, #57	; 0x39
 8016212:	4a03      	ldr	r2, [pc, #12]	; (8016220 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016214:	4803      	ldr	r0, [pc, #12]	; (8016224 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016216:	f00e f9eb 	bl	80245f0 <__assert_func>
 801621a:	bf00      	nop
 801621c:	08027434 	.word	0x08027434
 8016220:	08027528 	.word	0x08027528
 8016224:	0802740e 	.word	0x0802740e

08016228 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016228:	b510      	push	{r4, lr}
 801622a:	6803      	ldr	r3, [r0, #0]
 801622c:	4604      	mov	r4, r0
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	4798      	blx	r3
 8016232:	b128      	cbz	r0, 8016240 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016234:	4b07      	ldr	r3, [pc, #28]	; (8016254 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016236:	213f      	movs	r1, #63	; 0x3f
 8016238:	4a07      	ldr	r2, [pc, #28]	; (8016258 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801623a:	4808      	ldr	r0, [pc, #32]	; (801625c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801623c:	f00e f9d8 	bl	80245f0 <__assert_func>
 8016240:	6923      	ldr	r3, [r4, #16]
 8016242:	68a2      	ldr	r2, [r4, #8]
 8016244:	f3bf 8f5b 	dmb	ish
 8016248:	3301      	adds	r3, #1
 801624a:	429a      	cmp	r2, r3
 801624c:	bfd8      	it	le
 801624e:	1a9b      	suble	r3, r3, r2
 8016250:	6123      	str	r3, [r4, #16]
 8016252:	bd10      	pop	{r4, pc}
 8016254:	08027457 	.word	0x08027457
 8016258:	08027576 	.word	0x08027576
 801625c:	0802740e 	.word	0x0802740e

08016260 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016260:	b570      	push	{r4, r5, r6, lr}
 8016262:	4604      	mov	r4, r0
 8016264:	6840      	ldr	r0, [r0, #4]
 8016266:	6803      	ldr	r3, [r0, #0]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	4798      	blx	r3
 801626c:	4605      	mov	r5, r0
 801626e:	b930      	cbnz	r0, 801627e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016270:	7a23      	ldrb	r3, [r4, #8]
 8016272:	b123      	cbz	r3, 801627e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016274:	6860      	ldr	r0, [r4, #4]
 8016276:	6803      	ldr	r3, [r0, #0]
 8016278:	695b      	ldr	r3, [r3, #20]
 801627a:	4798      	blx	r3
 801627c:	7225      	strb	r5, [r4, #8]
 801627e:	6860      	ldr	r0, [r4, #4]
 8016280:	6803      	ldr	r3, [r0, #0]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	4798      	blx	r3
 8016286:	b928      	cbnz	r0, 8016294 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016288:	6823      	ldr	r3, [r4, #0]
 801628a:	4620      	mov	r0, r4
 801628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801628e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016292:	4718      	bx	r3
 8016294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016298:	f7fd b818 	b.w	80132cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801629c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801629c:	b510      	push	{r4, lr}
 801629e:	6082      	str	r2, [r0, #8]
 80162a0:	2200      	movs	r2, #0
 80162a2:	4c03      	ldr	r4, [pc, #12]	; (80162b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80162a4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80162a8:	e9c0 4100 	strd	r4, r1, [r0]
 80162ac:	bd10      	pop	{r4, pc}
 80162ae:	bf00      	nop
 80162b0:	080274dc 	.word	0x080274dc

080162b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80162b4:	6840      	ldr	r0, [r0, #4]
 80162b6:	6803      	ldr	r3, [r0, #0]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	4718      	bx	r3

080162bc <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80162bc:	2001      	movs	r0, #1
 80162be:	4770      	bx	lr

080162c0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80162c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162c4:	460d      	mov	r5, r1
 80162c6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80162ca:	b085      	sub	sp, #20
 80162cc:	4690      	mov	r8, r2
 80162ce:	4411      	add	r1, r2
 80162d0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80162d4:	4699      	mov	r9, r3
 80162d6:	6803      	ldr	r3, [r0, #0]
 80162d8:	60c1      	str	r1, [r0, #12]
 80162da:	4604      	mov	r4, r0
 80162dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80162de:	440a      	add	r2, r1
 80162e0:	6102      	str	r2, [r0, #16]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80162e8:	4798      	blx	r3
 80162ea:	2800      	cmp	r0, #0
 80162ec:	d039      	beq.n	8016362 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80162ee:	44c8      	add	r8, r9
 80162f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80162f4:	4445      	add	r5, r8
 80162f6:	6823      	ldr	r3, [r4, #0]
 80162f8:	f10d 020f 	add.w	r2, sp, #15
 80162fc:	a903      	add	r1, sp, #12
 80162fe:	4620      	mov	r0, r4
 8016300:	9200      	str	r2, [sp, #0]
 8016302:	f10d 020d 	add.w	r2, sp, #13
 8016306:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801630a:	f10d 030e 	add.w	r3, sp, #14
 801630e:	47c0      	blx	r8
 8016310:	b1f8      	cbz	r0, 8016352 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016312:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016316:	7a20      	ldrb	r0, [r4, #8]
 8016318:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801631c:	4358      	muls	r0, r3
 801631e:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016322:	1c43      	adds	r3, r0, #1
 8016324:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016328:	f817 0b01 	ldrb.w	r0, [r7], #1
 801632c:	121b      	asrs	r3, r3, #8
 801632e:	fb10 f003 	smulbb	r0, r0, r3
 8016332:	b283      	uxth	r3, r0
 8016334:	1c58      	adds	r0, r3, #1
 8016336:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	1200      	asrs	r0, r0, #8
 801633e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016342:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016346:	28ff      	cmp	r0, #255	; 0xff
 8016348:	d10e      	bne.n	8016368 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801634a:	9100      	str	r1, [sp, #0]
 801634c:	4629      	mov	r1, r5
 801634e:	4620      	mov	r0, r4
 8016350:	47c0      	blx	r8
 8016352:	68e3      	ldr	r3, [r4, #12]
 8016354:	3e01      	subs	r6, #1
 8016356:	f105 0503 	add.w	r5, r5, #3
 801635a:	f103 0301 	add.w	r3, r3, #1
 801635e:	60e3      	str	r3, [r4, #12]
 8016360:	d1c9      	bne.n	80162f6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016362:	b005      	add	sp, #20
 8016364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016368:	fa1f fc80 	uxth.w	ip, r0
 801636c:	43c0      	mvns	r0, r0
 801636e:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016372:	fb12 f20c 	smulbb	r2, r2, ip
 8016376:	b2c0      	uxtb	r0, r0
 8016378:	fb13 f30c 	smulbb	r3, r3, ip
 801637c:	fb0e 2200 	mla	r2, lr, r0, r2
 8016380:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016384:	fb11 f10c 	smulbb	r1, r1, ip
 8016388:	fb0e 3300 	mla	r3, lr, r0, r3
 801638c:	f895 e000 	ldrb.w	lr, [r5]
 8016390:	b292      	uxth	r2, r2
 8016392:	b29b      	uxth	r3, r3
 8016394:	fb0e 1000 	mla	r0, lr, r0, r1
 8016398:	1c59      	adds	r1, r3, #1
 801639a:	b280      	uxth	r0, r0
 801639c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80163a0:	1c51      	adds	r1, r2, #1
 80163a2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80163a6:	1c41      	adds	r1, r0, #1
 80163a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80163ac:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80163b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80163b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80163b8:	9000      	str	r0, [sp, #0]
 80163ba:	e7c7      	b.n	801634c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080163bc <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80163bc:	f89d 0000 	ldrb.w	r0, [sp]
 80163c0:	704b      	strb	r3, [r1, #1]
 80163c2:	7008      	strb	r0, [r1, #0]
 80163c4:	708a      	strb	r2, [r1, #2]
 80163c6:	4770      	bx	lr

080163c8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80163c8:	4413      	add	r3, r2
 80163ca:	7dc2      	ldrb	r2, [r0, #23]
 80163cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80163d0:	4419      	add	r1, r3
 80163d2:	7a03      	ldrb	r3, [r0, #8]
 80163d4:	435a      	muls	r2, r3
 80163d6:	1c53      	adds	r3, r2, #1
 80163d8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80163dc:	121b      	asrs	r3, r3, #8
 80163de:	2bff      	cmp	r3, #255	; 0xff
 80163e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163e2:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 80163e6:	d13e      	bne.n	8016466 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 80163e8:	4427      	add	r7, r4
 80163ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80163ee:	3103      	adds	r1, #3
 80163f0:	7d86      	ldrb	r6, [r0, #22]
 80163f2:	2bff      	cmp	r3, #255	; 0xff
 80163f4:	d10a      	bne.n	801640c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 80163f6:	f801 6c03 	strb.w	r6, [r1, #-3]
 80163fa:	7d43      	ldrb	r3, [r0, #21]
 80163fc:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016400:	7d03      	ldrb	r3, [r0, #20]
 8016402:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016406:	42a7      	cmp	r7, r4
 8016408:	d1ef      	bne.n	80163ea <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801640c:	b29a      	uxth	r2, r3
 801640e:	43db      	mvns	r3, r3
 8016410:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016414:	fb16 f602 	smulbb	r6, r6, r2
 8016418:	b2db      	uxtb	r3, r3
 801641a:	fb05 6503 	mla	r5, r5, r3, r6
 801641e:	b2ad      	uxth	r5, r5
 8016420:	1c6e      	adds	r6, r5, #1
 8016422:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016426:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801642a:	fb16 f603 	smulbb	r6, r6, r3
 801642e:	122d      	asrs	r5, r5, #8
 8016430:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016434:	7d45      	ldrb	r5, [r0, #21]
 8016436:	fb05 6502 	mla	r5, r5, r2, r6
 801643a:	b2ad      	uxth	r5, r5
 801643c:	1c6e      	adds	r6, r5, #1
 801643e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016442:	122d      	asrs	r5, r5, #8
 8016444:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016448:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801644c:	7d06      	ldrb	r6, [r0, #20]
 801644e:	fb15 f303 	smulbb	r3, r5, r3
 8016452:	fb06 3202 	mla	r2, r6, r2, r3
 8016456:	b292      	uxth	r2, r2
 8016458:	1c53      	adds	r3, r2, #1
 801645a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801645e:	1212      	asrs	r2, r2, #8
 8016460:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016464:	e7cf      	b.n	8016406 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016466:	b2de      	uxtb	r6, r3
 8016468:	2b00      	cmp	r3, #0
 801646a:	d0ce      	beq.n	801640a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801646c:	3103      	adds	r1, #3
 801646e:	4427      	add	r7, r4
 8016470:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016474:	3103      	adds	r1, #3
 8016476:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801647a:	fb02 f306 	mul.w	r3, r2, r6
 801647e:	42bc      	cmp	r4, r7
 8016480:	f103 0201 	add.w	r2, r3, #1
 8016484:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016488:	ea4f 2222 	mov.w	r2, r2, asr #8
 801648c:	b295      	uxth	r5, r2
 801648e:	ea6f 0202 	mvn.w	r2, r2
 8016492:	b2d3      	uxtb	r3, r2
 8016494:	7d82      	ldrb	r2, [r0, #22]
 8016496:	fb1c fc03 	smulbb	ip, ip, r3
 801649a:	fb02 c205 	mla	r2, r2, r5, ip
 801649e:	b292      	uxth	r2, r2
 80164a0:	f102 0c01 	add.w	ip, r2, #1
 80164a4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80164a8:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80164ac:	fb1c fc03 	smulbb	ip, ip, r3
 80164b0:	ea4f 2222 	mov.w	r2, r2, asr #8
 80164b4:	f801 2c06 	strb.w	r2, [r1, #-6]
 80164b8:	7d42      	ldrb	r2, [r0, #21]
 80164ba:	fb02 c205 	mla	r2, r2, r5, ip
 80164be:	b292      	uxth	r2, r2
 80164c0:	f102 0c01 	add.w	ip, r2, #1
 80164c4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80164c8:	ea4f 2222 	mov.w	r2, r2, asr #8
 80164cc:	f801 2c05 	strb.w	r2, [r1, #-5]
 80164d0:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80164d4:	f890 c014 	ldrb.w	ip, [r0, #20]
 80164d8:	fb12 f303 	smulbb	r3, r2, r3
 80164dc:	fb0c 3305 	mla	r3, ip, r5, r3
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	f103 0201 	add.w	r2, r3, #1
 80164e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80164ea:	ea4f 2323 	mov.w	r3, r3, asr #8
 80164ee:	f801 3c04 	strb.w	r3, [r1, #-4]
 80164f2:	d1bd      	bne.n	8016470 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 80164f4:	e789      	b.n	801640a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

080164f6 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 80164f6:	b510      	push	{r4, lr}
 80164f8:	7d04      	ldrb	r4, [r0, #20]
 80164fa:	700c      	strb	r4, [r1, #0]
 80164fc:	7d41      	ldrb	r1, [r0, #21]
 80164fe:	7011      	strb	r1, [r2, #0]
 8016500:	7d82      	ldrb	r2, [r0, #22]
 8016502:	701a      	strb	r2, [r3, #0]
 8016504:	9b02      	ldr	r3, [sp, #8]
 8016506:	7dc2      	ldrb	r2, [r0, #23]
 8016508:	2001      	movs	r0, #1
 801650a:	701a      	strb	r2, [r3, #0]
 801650c:	bd10      	pop	{r4, pc}

0801650e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801650e:	b570      	push	{r4, r5, r6, lr}
 8016510:	4616      	mov	r6, r2
 8016512:	4604      	mov	r4, r0
 8016514:	460d      	mov	r5, r1
 8016516:	f7f9 f94f 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 801651a:	6803      	ldr	r3, [r0, #0]
 801651c:	4629      	mov	r1, r5
 801651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016520:	4798      	blx	r3
 8016522:	7520      	strb	r0, [r4, #20]
 8016524:	f7f9 f948 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8016528:	6803      	ldr	r3, [r0, #0]
 801652a:	4629      	mov	r1, r5
 801652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801652e:	4798      	blx	r3
 8016530:	7560      	strb	r0, [r4, #21]
 8016532:	f7f9 f941 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8016536:	6803      	ldr	r3, [r0, #0]
 8016538:	4629      	mov	r1, r5
 801653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801653c:	4798      	blx	r3
 801653e:	75e6      	strb	r6, [r4, #23]
 8016540:	75a0      	strb	r0, [r4, #22]
 8016542:	bd70      	pop	{r4, r5, r6, pc}

08016544 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016546:	460e      	mov	r6, r1
 8016548:	4617      	mov	r7, r2
 801654a:	4604      	mov	r4, r0
 801654c:	f000 f832 	bl	80165b4 <_ZN8touchgfx15AbstractPainterC1Ev>
 8016550:	4b12      	ldr	r3, [pc, #72]	; (801659c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8016552:	6023      	str	r3, [r4, #0]
 8016554:	f7f9 f930 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8016558:	6803      	ldr	r3, [r0, #0]
 801655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801655c:	4798      	blx	r3
 801655e:	1e43      	subs	r3, r0, #1
 8016560:	425d      	negs	r5, r3
 8016562:	415d      	adcs	r5, r3
 8016564:	4b0e      	ldr	r3, [pc, #56]	; (80165a0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801656a:	b130      	cbz	r0, 801657a <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801656c:	6803      	ldr	r3, [r0, #0]
 801656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016570:	4798      	blx	r3
 8016572:	2801      	cmp	r0, #1
 8016574:	bf08      	it	eq
 8016576:	f045 0501 	orreq.w	r5, r5, #1
 801657a:	b92d      	cbnz	r5, 8016588 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801657c:	4b09      	ldr	r3, [pc, #36]	; (80165a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801657e:	2129      	movs	r1, #41	; 0x29
 8016580:	4a09      	ldr	r2, [pc, #36]	; (80165a8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016582:	480a      	ldr	r0, [pc, #40]	; (80165ac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016584:	f00e f834 	bl	80245f0 <__assert_func>
 8016588:	4b09      	ldr	r3, [pc, #36]	; (80165b0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801658a:	4620      	mov	r0, r4
 801658c:	463a      	mov	r2, r7
 801658e:	4631      	mov	r1, r6
 8016590:	6023      	str	r3, [r4, #0]
 8016592:	f7ff ffbc 	bl	801650e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8016596:	4620      	mov	r0, r4
 8016598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801659a:	bf00      	nop
 801659c:	080275b0 	.word	0x080275b0
 80165a0:	2000bc68 	.word	0x2000bc68
 80165a4:	080275c8 	.word	0x080275c8
 80165a8:	0802768c 	.word	0x0802768c
 80165ac:	08027626 	.word	0x08027626
 80165b0:	08027674 	.word	0x08027674

080165b4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 80165b4:	4a03      	ldr	r2, [pc, #12]	; (80165c4 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80165b6:	6002      	str	r2, [r0, #0]
 80165b8:	2200      	movs	r2, #0
 80165ba:	6042      	str	r2, [r0, #4]
 80165bc:	22ff      	movs	r2, #255	; 0xff
 80165be:	7202      	strb	r2, [r0, #8]
 80165c0:	4770      	bx	lr
 80165c2:	bf00      	nop
 80165c4:	080276d0 	.word	0x080276d0

080165c8 <_ZN8touchgfx15AbstractPainterD1Ev>:
 80165c8:	4770      	bx	lr

080165ca <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 80165ca:	8081      	strh	r1, [r0, #4]
 80165cc:	80c2      	strh	r2, [r0, #6]
 80165ce:	4770      	bx	lr

080165d0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 80165d0:	7201      	strb	r1, [r0, #8]
 80165d2:	4770      	bx	lr

080165d4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80165d4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80165d8:	4770      	bx	lr

080165da <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80165da:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80165de:	4770      	bx	lr

080165e0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80165e0:	6281      	str	r1, [r0, #40]	; 0x28
 80165e2:	4770      	bx	lr

080165e4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80165e4:	b513      	push	{r0, r1, r4, lr}
 80165e6:	6803      	ldr	r3, [r0, #0]
 80165e8:	4604      	mov	r4, r0
 80165ea:	4601      	mov	r1, r0
 80165ec:	4668      	mov	r0, sp
 80165ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165f0:	4798      	blx	r3
 80165f2:	6823      	ldr	r3, [r4, #0]
 80165f4:	4669      	mov	r1, sp
 80165f6:	4620      	mov	r0, r4
 80165f8:	691b      	ldr	r3, [r3, #16]
 80165fa:	4798      	blx	r3
 80165fc:	b002      	add	sp, #8
 80165fe:	bd10      	pop	{r4, pc}

08016600 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016600:	b510      	push	{r4, lr}
 8016602:	2200      	movs	r2, #0
 8016604:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016608:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801660c:	8002      	strh	r2, [r0, #0]
 801660e:	8042      	strh	r2, [r0, #2]
 8016610:	8084      	strh	r4, [r0, #4]
 8016612:	80c1      	strh	r1, [r0, #6]
 8016614:	bd10      	pop	{r4, pc}

08016616 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016616:	2200      	movs	r2, #0
 8016618:	8002      	strh	r2, [r0, #0]
 801661a:	8042      	strh	r2, [r0, #2]
 801661c:	8082      	strh	r2, [r0, #4]
 801661e:	80c2      	strh	r2, [r0, #6]
 8016620:	4770      	bx	lr
	...

08016624 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016624:	b508      	push	{r3, lr}
 8016626:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016628:	b928      	cbnz	r0, 8016636 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801662a:	4b03      	ldr	r3, [pc, #12]	; (8016638 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801662c:	2127      	movs	r1, #39	; 0x27
 801662e:	4a03      	ldr	r2, [pc, #12]	; (801663c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016630:	4803      	ldr	r0, [pc, #12]	; (8016640 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016632:	f00d ffdd 	bl	80245f0 <__assert_func>
 8016636:	bd08      	pop	{r3, pc}
 8016638:	080276dc 	.word	0x080276dc
 801663c:	080277c0 	.word	0x080277c0
 8016640:	08027703 	.word	0x08027703

08016644 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016648:	b089      	sub	sp, #36	; 0x24
 801664a:	4604      	mov	r4, r0
 801664c:	6808      	ldr	r0, [r1, #0]
 801664e:	f04f 0a00 	mov.w	sl, #0
 8016652:	6849      	ldr	r1, [r1, #4]
 8016654:	ab02      	add	r3, sp, #8
 8016656:	f04f 0b01 	mov.w	fp, #1
 801665a:	c303      	stmia	r3!, {r0, r1}
 801665c:	4b3f      	ldr	r3, [pc, #252]	; (801675c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801665e:	4621      	mov	r1, r4
 8016660:	a804      	add	r0, sp, #16
 8016662:	781b      	ldrb	r3, [r3, #0]
 8016664:	2b01      	cmp	r3, #1
 8016666:	6823      	ldr	r3, [r4, #0]
 8016668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801666a:	bf1f      	itttt	ne
 801666c:	f10d 0906 	addne.w	r9, sp, #6
 8016670:	ae03      	addne	r6, sp, #12
 8016672:	f10d 050e 	addne.w	r5, sp, #14
 8016676:	f10d 080a 	addne.w	r8, sp, #10
 801667a:	bf01      	itttt	eq
 801667c:	f10d 090e 	addeq.w	r9, sp, #14
 8016680:	f10d 0606 	addeq.w	r6, sp, #6
 8016684:	ad03      	addeq	r5, sp, #12
 8016686:	f10d 0808 	addeq.w	r8, sp, #8
 801668a:	4798      	blx	r3
 801668c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016690:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016694:	2b00      	cmp	r3, #0
 8016696:	d056      	beq.n	8016746 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016698:	4293      	cmp	r3, r2
 801669a:	bfa8      	it	ge
 801669c:	4613      	movge	r3, r2
 801669e:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166a2:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80166a6:	2f00      	cmp	r7, #0
 80166a8:	dd34      	ble.n	8016714 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80166aa:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80166ae:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80166b2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80166b6:	4484      	add	ip, r0
 80166b8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80166bc:	f9b6 e000 	ldrsh.w	lr, [r6]
 80166c0:	fa0f fc8c 	sxth.w	ip, ip
 80166c4:	f9b9 1000 	ldrsh.w	r1, [r9]
 80166c8:	f8ad 2018 	strh.w	r2, [sp, #24]
 80166cc:	4562      	cmp	r2, ip
 80166ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 80166d2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80166d6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80166da:	da29      	bge.n	8016730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80166dc:	4472      	add	r2, lr
 80166de:	b212      	sxth	r2, r2
 80166e0:	4290      	cmp	r0, r2
 80166e2:	da25      	bge.n	8016730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80166e4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80166e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80166ec:	4402      	add	r2, r0
 80166ee:	b212      	sxth	r2, r2
 80166f0:	4293      	cmp	r3, r2
 80166f2:	da1d      	bge.n	8016730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80166f4:	440b      	add	r3, r1
 80166f6:	b21b      	sxth	r3, r3
 80166f8:	4298      	cmp	r0, r3
 80166fa:	da19      	bge.n	8016730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80166fc:	6823      	ldr	r3, [r4, #0]
 80166fe:	a906      	add	r1, sp, #24
 8016700:	4620      	mov	r0, r4
 8016702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016704:	4798      	blx	r3
 8016706:	b998      	cbnz	r0, 8016730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016708:	107f      	asrs	r7, r7, #1
 801670a:	f04f 0a01 	mov.w	sl, #1
 801670e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016712:	e7c6      	b.n	80166a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016714:	d10c      	bne.n	8016730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016716:	f8ad b006 	strh.w	fp, [sp, #6]
 801671a:	f8b8 2000 	ldrh.w	r2, [r8]
 801671e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016722:	440a      	add	r2, r1
 8016724:	f8a8 2000 	strh.w	r2, [r8]
 8016728:	882b      	ldrh	r3, [r5, #0]
 801672a:	1a5b      	subs	r3, r3, r1
 801672c:	802b      	strh	r3, [r5, #0]
 801672e:	e7ad      	b.n	801668c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016730:	f1ba 0f00 	cmp.w	sl, #0
 8016734:	d0f1      	beq.n	801671a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016736:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801673a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801673e:	429a      	cmp	r2, r3
 8016740:	bf08      	it	eq
 8016742:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016744:	e7e9      	b.n	801671a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016746:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801674a:	429a      	cmp	r2, r3
 801674c:	bf04      	itt	eq
 801674e:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016752:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016754:	b009      	add	sp, #36	; 0x24
 8016756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801675a:	bf00      	nop
 801675c:	2000bc60 	.word	0x2000bc60

08016760 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016760:	2200      	movs	r2, #0
 8016762:	2101      	movs	r1, #1
 8016764:	8082      	strh	r2, [r0, #4]
 8016766:	80c2      	strh	r2, [r0, #6]
 8016768:	8102      	strh	r2, [r0, #8]
 801676a:	8142      	strh	r2, [r0, #10]
 801676c:	8182      	strh	r2, [r0, #12]
 801676e:	81c2      	strh	r2, [r0, #14]
 8016770:	8202      	strh	r2, [r0, #16]
 8016772:	8242      	strh	r2, [r0, #18]
 8016774:	61c2      	str	r2, [r0, #28]
 8016776:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801677a:	6282      	str	r2, [r0, #40]	; 0x28
 801677c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016780:	4905      	ldr	r1, [pc, #20]	; (8016798 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016782:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016786:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801678a:	6001      	str	r1, [r0, #0]
 801678c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801678e:	22ff      	movs	r2, #255	; 0xff
 8016790:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016794:	4770      	bx	lr
 8016796:	bf00      	nop
 8016798:	08027748 	.word	0x08027748

0801679c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801679c:	4770      	bx	lr

0801679e <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801679e:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80167a2:	4602      	mov	r2, r0
 80167a4:	cb03      	ldmia	r3!, {r0, r1}
 80167a6:	6010      	str	r0, [r2, #0]
 80167a8:	4610      	mov	r0, r2
 80167aa:	6051      	str	r1, [r2, #4]
 80167ac:	4770      	bx	lr

080167ae <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80167ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167b2:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80167b6:	b395      	cbz	r5, 801681e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80167b8:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80167bc:	f1bc 0f00 	cmp.w	ip, #0
 80167c0:	d02d      	beq.n	801681e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80167c2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80167c6:	f9b1 e000 	ldrsh.w	lr, [r1]
 80167ca:	b354      	cbz	r4, 8016822 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80167cc:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80167d0:	b33f      	cbz	r7, 8016822 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80167d2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80167d6:	4475      	add	r5, lr
 80167d8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80167dc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80167e0:	45f0      	cmp	r8, lr
 80167e2:	4646      	mov	r6, r8
 80167e4:	4444      	add	r4, r8
 80167e6:	bfa8      	it	ge
 80167e8:	4676      	movge	r6, lr
 80167ea:	4293      	cmp	r3, r2
 80167ec:	4619      	mov	r1, r3
 80167ee:	443b      	add	r3, r7
 80167f0:	bfa8      	it	ge
 80167f2:	4611      	movge	r1, r2
 80167f4:	4462      	add	r2, ip
 80167f6:	b22d      	sxth	r5, r5
 80167f8:	8006      	strh	r6, [r0, #0]
 80167fa:	b224      	sxth	r4, r4
 80167fc:	8041      	strh	r1, [r0, #2]
 80167fe:	b212      	sxth	r2, r2
 8016800:	b21b      	sxth	r3, r3
 8016802:	42a5      	cmp	r5, r4
 8016804:	bfac      	ite	ge
 8016806:	ebc6 0405 	rsbge	r4, r6, r5
 801680a:	ebc6 0404 	rsblt	r4, r6, r4
 801680e:	429a      	cmp	r2, r3
 8016810:	bfac      	ite	ge
 8016812:	ebc1 0302 	rsbge	r3, r1, r2
 8016816:	ebc1 0303 	rsblt	r3, r1, r3
 801681a:	8084      	strh	r4, [r0, #4]
 801681c:	80c3      	strh	r3, [r0, #6]
 801681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016822:	f8a0 e000 	strh.w	lr, [r0]
 8016826:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801682a:	8043      	strh	r3, [r0, #2]
 801682c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016830:	8083      	strh	r3, [r0, #4]
 8016832:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016836:	e7f1      	b.n	801681c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016838 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016838:	b507      	push	{r0, r1, r2, lr}
 801683a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801683e:	ab01      	add	r3, sp, #4
 8016840:	6809      	ldr	r1, [r1, #0]
 8016842:	6800      	ldr	r0, [r0, #0]
 8016844:	f002 fc4f 	bl	80190e6 <_ZN8touchgfx6muldivElllRl>
 8016848:	b003      	add	sp, #12
 801684a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016850 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016850:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016854:	fb90 f3f2 	sdiv	r3, r0, r2
 8016858:	fb03 0312 	mls	r3, r3, r2, r0
 801685c:	4413      	add	r3, r2
 801685e:	fb93 f0f2 	sdiv	r0, r3, r2
 8016862:	fb02 3010 	mls	r0, r2, r0, r3
 8016866:	4b0a      	ldr	r3, [pc, #40]	; (8016890 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016868:	285a      	cmp	r0, #90	; 0x5a
 801686a:	dc02      	bgt.n	8016872 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801686c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016870:	4770      	bx	lr
 8016872:	28b4      	cmp	r0, #180	; 0xb4
 8016874:	dc02      	bgt.n	801687c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016876:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801687a:	e7f7      	b.n	801686c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801687c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016880:	bfd4      	ite	le
 8016882:	38b4      	suble	r0, #180	; 0xb4
 8016884:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016888:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801688c:	4240      	negs	r0, r0
 801688e:	4770      	bx	lr
 8016890:	0802786a 	.word	0x0802786a

08016894 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016894:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016898:	f04f 0300 	mov.w	r3, #0
 801689c:	bf2c      	ite	cs
 801689e:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80168a2:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80168a6:	1899      	adds	r1, r3, r2
 80168a8:	4288      	cmp	r0, r1
 80168aa:	bf24      	itt	cs
 80168ac:	1853      	addcs	r3, r2, r1
 80168ae:	1a40      	subcs	r0, r0, r1
 80168b0:	0892      	lsrs	r2, r2, #2
 80168b2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80168b6:	d1f6      	bne.n	80168a6 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80168b8:	4618      	mov	r0, r3
 80168ba:	4770      	bx	lr

080168bc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80168bc:	2800      	cmp	r0, #0
 80168be:	b508      	push	{r3, lr}
 80168c0:	da05      	bge.n	80168ce <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80168c2:	4240      	negs	r0, r0
 80168c4:	f7ff fffa 	bl	80168bc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80168c8:	4240      	negs	r0, r0
 80168ca:	b240      	sxtb	r0, r0
 80168cc:	bd08      	pop	{r3, pc}
 80168ce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80168d2:	dc11      	bgt.n	80168f8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80168d4:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80168d8:	dd09      	ble.n	80168ee <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80168da:	4340      	muls	r0, r0
 80168dc:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80168e0:	f7ff ffd8 	bl	8016894 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80168e4:	f7ff ffea 	bl	80168bc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80168e8:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80168ec:	e7ed      	b.n	80168ca <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80168ee:	3003      	adds	r0, #3
 80168f0:	4b02      	ldr	r3, [pc, #8]	; (80168fc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80168f2:	10c0      	asrs	r0, r0, #3
 80168f4:	5618      	ldrsb	r0, [r3, r0]
 80168f6:	e7e9      	b.n	80168cc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80168f8:	2000      	movs	r0, #0
 80168fa:	e7e7      	b.n	80168cc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80168fc:	0802780e 	.word	0x0802780e

08016900 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016902:	460c      	mov	r4, r1
 8016904:	1e01      	subs	r1, r0, #0
 8016906:	4615      	mov	r5, r2
 8016908:	db01      	blt.n	801690e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801690a:	2c00      	cmp	r4, #0
 801690c:	da06      	bge.n	801691c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801690e:	4b11      	ldr	r3, [pc, #68]	; (8016954 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016910:	f240 3197 	movw	r1, #919	; 0x397
 8016914:	4a10      	ldr	r2, [pc, #64]	; (8016958 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016916:	4811      	ldr	r0, [pc, #68]	; (801695c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016918:	f00d fe6a 	bl	80245f0 <__assert_func>
 801691c:	428c      	cmp	r4, r1
 801691e:	dd06      	ble.n	801692e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8016920:	4620      	mov	r0, r4
 8016922:	f7ff ffed 	bl	8016900 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016926:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801692a:	b003      	add	sp, #12
 801692c:	bd30      	pop	{r4, r5, pc}
 801692e:	4349      	muls	r1, r1
 8016930:	fb04 1004 	mla	r0, r4, r4, r1
 8016934:	f7ff ffae 	bl	8016894 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016938:	6028      	str	r0, [r5, #0]
 801693a:	2800      	cmp	r0, #0
 801693c:	d0f5      	beq.n	801692a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801693e:	4602      	mov	r2, r0
 8016940:	ab01      	add	r3, sp, #4
 8016942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016946:	4620      	mov	r0, r4
 8016948:	f002 fbcd 	bl	80190e6 <_ZN8touchgfx6muldivElllRl>
 801694c:	f7ff ffb6 	bl	80168bc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016950:	e7eb      	b.n	801692a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016952:	bf00      	nop
 8016954:	08027920 	.word	0x08027920
 8016958:	080279e8 	.word	0x080279e8
 801695c:	08027931 	.word	0x08027931

08016960 <_ZN8touchgfx4LineC1Ev>:
 8016960:	b510      	push	{r4, lr}
 8016962:	4604      	mov	r4, r0
 8016964:	f7ff fefc 	bl	8016760 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016968:	4b0c      	ldr	r3, [pc, #48]	; (801699c <_ZN8touchgfx4LineC1Ev+0x3c>)
 801696a:	2220      	movs	r2, #32
 801696c:	4620      	mov	r0, r4
 801696e:	6023      	str	r3, [r4, #0]
 8016970:	2300      	movs	r3, #0
 8016972:	6422      	str	r2, [r4, #64]	; 0x40
 8016974:	2212      	movs	r2, #18
 8016976:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801697a:	6722      	str	r2, [r4, #112]	; 0x70
 801697c:	60a3      	str	r3, [r4, #8]
 801697e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016982:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016986:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801698a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801698e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8016992:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8016996:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801699a:	bd10      	pop	{r4, pc}
 801699c:	08027970 	.word	0x08027970

080169a0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80169a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80169a6:	b085      	sub	sp, #20
 80169a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80169aa:	4604      	mov	r4, r0
 80169ac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80169ae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80169b0:	1af6      	subs	r6, r6, r3
 80169b2:	eba5 0502 	sub.w	r5, r5, r2
 80169b6:	f040 809b 	bne.w	8016af0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80169ba:	b955      	cbnz	r5, 80169d2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80169bc:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80169c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80169c4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80169c8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80169cc:	b005      	add	sp, #20
 80169ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d2:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80169d6:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80169da:	f04f 0802 	mov.w	r8, #2
 80169de:	463a      	mov	r2, r7
 80169e0:	4629      	mov	r1, r5
 80169e2:	ab03      	add	r3, sp, #12
 80169e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80169e6:	f002 fb7e 	bl	80190e6 <_ZN8touchgfx6muldivElllRl>
 80169ea:	ab03      	add	r3, sp, #12
 80169ec:	463a      	mov	r2, r7
 80169ee:	4631      	mov	r1, r6
 80169f0:	fb90 f5f8 	sdiv	r5, r0, r8
 80169f4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80169f6:	f002 fb76 	bl	80190e6 <_ZN8touchgfx6muldivElllRl>
 80169fa:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 80169fe:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8016a02:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8016a06:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8016a08:	fb90 f0f8 	sdiv	r0, r0, r8
 8016a0c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016a10:	eba8 0305 	sub.w	r3, r8, r5
 8016a14:	f1ba 0f00 	cmp.w	sl, #0
 8016a18:	f040 80c3 	bne.w	8016ba2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8016a1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8016a1e:	19c3      	adds	r3, r0, r7
 8016a20:	65a3      	str	r3, [r4, #88]	; 0x58
 8016a22:	ebae 0305 	sub.w	r3, lr, r5
 8016a26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016a28:	eb00 030c 	add.w	r3, r0, ip
 8016a2c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016a2e:	eb05 030e 	add.w	r3, r5, lr
 8016a32:	6523      	str	r3, [r4, #80]	; 0x50
 8016a34:	ebac 0300 	sub.w	r3, ip, r0
 8016a38:	6623      	str	r3, [r4, #96]	; 0x60
 8016a3a:	eb05 0308 	add.w	r3, r5, r8
 8016a3e:	6563      	str	r3, [r4, #84]	; 0x54
 8016a40:	1a3b      	subs	r3, r7, r0
 8016a42:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8016a44:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8016a48:	6663      	str	r3, [r4, #100]	; 0x64
 8016a4a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016a4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016a50:	4632      	mov	r2, r6
 8016a52:	9301      	str	r3, [sp, #4]
 8016a54:	9100      	str	r1, [sp, #0]
 8016a56:	f859 bb04 	ldr.w	fp, [r9], #4
 8016a5a:	9b00      	ldr	r3, [sp, #0]
 8016a5c:	455e      	cmp	r6, fp
 8016a5e:	bfa8      	it	ge
 8016a60:	465e      	movge	r6, fp
 8016a62:	455a      	cmp	r2, fp
 8016a64:	bfb8      	it	lt
 8016a66:	465a      	movlt	r2, fp
 8016a68:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8016a6c:	4559      	cmp	r1, fp
 8016a6e:	bfa8      	it	ge
 8016a70:	4659      	movge	r1, fp
 8016a72:	455b      	cmp	r3, fp
 8016a74:	bfb8      	it	lt
 8016a76:	465b      	movlt	r3, fp
 8016a78:	9300      	str	r3, [sp, #0]
 8016a7a:	9b01      	ldr	r3, [sp, #4]
 8016a7c:	454b      	cmp	r3, r9
 8016a7e:	d1ea      	bne.n	8016a56 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8016a80:	f04f 0b20 	mov.w	fp, #32
 8016a84:	b209      	sxth	r1, r1
 8016a86:	b212      	sxth	r2, r2
 8016a88:	f1ba 0f01 	cmp.w	sl, #1
 8016a8c:	b236      	sxth	r6, r6
 8016a8e:	fb91 f9fb 	sdiv	r9, r1, fp
 8016a92:	f9bd 1000 	ldrsh.w	r1, [sp]
 8016a96:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8016a9a:	fb92 f2fb 	sdiv	r2, r2, fp
 8016a9e:	fb91 f1fb 	sdiv	r1, r1, fp
 8016aa2:	fb96 f6fb 	sdiv	r6, r6, fp
 8016aa6:	f102 0201 	add.w	r2, r2, #1
 8016aaa:	f101 0101 	add.w	r1, r1, #1
 8016aae:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8016ab2:	eba1 0109 	sub.w	r1, r1, r9
 8016ab6:	eba2 0606 	sub.w	r6, r2, r6
 8016aba:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8016abe:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8016ac2:	d183      	bne.n	80169cc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016ac4:	eba8 0305 	sub.w	r3, r8, r5
 8016ac8:	64a3      	str	r3, [r4, #72]	; 0x48
 8016aca:	19c3      	adds	r3, r0, r7
 8016acc:	65a3      	str	r3, [r4, #88]	; 0x58
 8016ace:	ebae 0305 	sub.w	r3, lr, r5
 8016ad2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016ad4:	eb00 030c 	add.w	r3, r0, ip
 8016ad8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016ada:	eb05 030e 	add.w	r3, r5, lr
 8016ade:	4445      	add	r5, r8
 8016ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8016ae2:	ebac 0300 	sub.w	r3, ip, r0
 8016ae6:	1a38      	subs	r0, r7, r0
 8016ae8:	6565      	str	r5, [r4, #84]	; 0x54
 8016aea:	6623      	str	r3, [r4, #96]	; 0x60
 8016aec:	6660      	str	r0, [r4, #100]	; 0x64
 8016aee:	e76d      	b.n	80169cc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016af0:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8016af4:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016af8:	2d00      	cmp	r5, #0
 8016afa:	f43f af6e 	beq.w	80169da <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016afe:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016b02:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016b06:	fb93 f2f7 	sdiv	r2, r3, r7
 8016b0a:	fb07 3312 	mls	r3, r7, r2, r3
 8016b0e:	b34b      	cbz	r3, 8016b64 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8016b10:	fb97 f2f3 	sdiv	r2, r7, r3
 8016b14:	fb03 7712 	mls	r7, r3, r2, r7
 8016b18:	2f00      	cmp	r7, #0
 8016b1a:	d1f4      	bne.n	8016b06 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016b1c:	2b01      	cmp	r3, #1
 8016b1e:	f24b 5204 	movw	r2, #46340	; 0xb504
 8016b22:	bf18      	it	ne
 8016b24:	fb96 f6f3 	sdivne	r6, r6, r3
 8016b28:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016b2c:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016b30:	bf18      	it	ne
 8016b32:	fb95 f5f3 	sdivne	r5, r5, r3
 8016b36:	4291      	cmp	r1, r2
 8016b38:	dd16      	ble.n	8016b68 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016b3a:	2d00      	cmp	r5, #0
 8016b3c:	da4d      	bge.n	8016bda <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8016b3e:	4b29      	ldr	r3, [pc, #164]	; (8016be4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8016b40:	429d      	cmp	r5, r3
 8016b42:	da27      	bge.n	8016b94 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8016b44:	426a      	negs	r2, r5
 8016b46:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016b4a:	fb91 f1f3 	sdiv	r1, r1, r3
 8016b4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b52:	4299      	cmp	r1, r3
 8016b54:	bfcc      	ite	gt
 8016b56:	1c4b      	addgt	r3, r1, #1
 8016b58:	3301      	addle	r3, #1
 8016b5a:	fb96 f6f3 	sdiv	r6, r6, r3
 8016b5e:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b62:	e00f      	b.n	8016b84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8016b64:	463b      	mov	r3, r7
 8016b66:	e7d9      	b.n	8016b1c <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8016b68:	2d00      	cmp	r5, #0
 8016b6a:	fb92 f2f1 	sdiv	r2, r2, r1
 8016b6e:	da13      	bge.n	8016b98 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8016b70:	4269      	negs	r1, r5
 8016b72:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016b76:	fb93 f3f1 	sdiv	r3, r3, r1
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	bfa8      	it	ge
 8016b7e:	461a      	movge	r2, r3
 8016b80:	4356      	muls	r6, r2
 8016b82:	4355      	muls	r5, r2
 8016b84:	fb05 f005 	mul.w	r0, r5, r5
 8016b88:	fb06 0006 	mla	r0, r6, r6, r0
 8016b8c:	f7ff fe82 	bl	8016894 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016b90:	4607      	mov	r7, r0
 8016b92:	e722      	b.n	80169da <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016b94:	2200      	movs	r2, #0
 8016b96:	e7eb      	b.n	8016b70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8016b98:	4629      	mov	r1, r5
 8016b9a:	e7ea      	b.n	8016b72 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016b9c:	4629      	mov	r1, r5
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	e7e7      	b.n	8016b72 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016ba2:	1a1b      	subs	r3, r3, r0
 8016ba4:	64a3      	str	r3, [r4, #72]	; 0x48
 8016ba6:	19c3      	adds	r3, r0, r7
 8016ba8:	1b5b      	subs	r3, r3, r5
 8016baa:	65a3      	str	r3, [r4, #88]	; 0x58
 8016bac:	ebae 0305 	sub.w	r3, lr, r5
 8016bb0:	4403      	add	r3, r0
 8016bb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016bb4:	eb00 030c 	add.w	r3, r0, ip
 8016bb8:	442b      	add	r3, r5
 8016bba:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016bbc:	eb05 030e 	add.w	r3, r5, lr
 8016bc0:	4403      	add	r3, r0
 8016bc2:	6523      	str	r3, [r4, #80]	; 0x50
 8016bc4:	ebac 0300 	sub.w	r3, ip, r0
 8016bc8:	442b      	add	r3, r5
 8016bca:	6623      	str	r3, [r4, #96]	; 0x60
 8016bcc:	eb05 0308 	add.w	r3, r5, r8
 8016bd0:	1a1b      	subs	r3, r3, r0
 8016bd2:	6563      	str	r3, [r4, #84]	; 0x54
 8016bd4:	1a3b      	subs	r3, r7, r0
 8016bd6:	1b5b      	subs	r3, r3, r5
 8016bd8:	e733      	b.n	8016a42 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8016bda:	4295      	cmp	r5, r2
 8016bdc:	ddde      	ble.n	8016b9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8016bde:	462a      	mov	r2, r5
 8016be0:	e7b1      	b.n	8016b46 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8016be2:	bf00      	nop
 8016be4:	ffff4afc 	.word	0xffff4afc

08016be8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016be8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016bea:	428b      	cmp	r3, r1
 8016bec:	d102      	bne.n	8016bf4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016bee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	d003      	beq.n	8016bfc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016bf4:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016bf8:	f7ff bed2 	b.w	80169a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016bfc:	4770      	bx	lr

08016bfe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016bfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016c00:	428b      	cmp	r3, r1
 8016c02:	d102      	bne.n	8016c0a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016c04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d003      	beq.n	8016c12 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016c0a:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016c0e:	f7ff bec7 	b.w	80169a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016c12:	4770      	bx	lr

08016c14 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016c14:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016c18:	f7ff bec2 	b.w	80169a0 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016c1c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c20:	b0b3      	sub	sp, #204	; 0xcc
 8016c22:	4604      	mov	r4, r0
 8016c24:	460a      	mov	r2, r1
 8016c26:	4601      	mov	r1, r0
 8016c28:	a804      	add	r0, sp, #16
 8016c2a:	ad32      	add	r5, sp, #200	; 0xc8
 8016c2c:	f00c f914 	bl	8022e58 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016c30:	2300      	movs	r3, #0
 8016c32:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8016c34:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8016c38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016c3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016c3e:	1ac0      	subs	r0, r0, r3
 8016c40:	eba1 0102 	sub.w	r1, r1, r2
 8016c44:	d43c      	bmi.n	8016cc0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8016c46:	2900      	cmp	r1, #0
 8016c48:	462a      	mov	r2, r5
 8016c4a:	db33      	blt.n	8016cb4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8016c4c:	f7ff fe58 	bl	8016900 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016c50:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8016c54:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016c56:	a804      	add	r0, sp, #16
 8016c58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016c5a:	f00c fac6 	bl	80231ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016c5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016c60:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016c62:	a804      	add	r0, sp, #16
 8016c64:	f00c fa50 	bl	8023108 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016c68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016c6c:	2b01      	cmp	r3, #1
 8016c6e:	d137      	bne.n	8016ce0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016c70:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016c72:	2eb3      	cmp	r6, #179	; 0xb3
 8016c74:	dc34      	bgt.n	8016ce0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016c76:	eba7 0906 	sub.w	r9, r7, r6
 8016c7a:	4648      	mov	r0, r9
 8016c7c:	f7ff fde8 	bl	8016850 <_ZN8touchgfx7CWRUtil4sineEi>
 8016c80:	a902      	add	r1, sp, #8
 8016c82:	9002      	str	r0, [sp, #8]
 8016c84:	4628      	mov	r0, r5
 8016c86:	f7ff fdd7 	bl	8016838 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016c8c:	eb00 0801 	add.w	r8, r0, r1
 8016c90:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016c94:	f7ff fddc 	bl	8016850 <_ZN8touchgfx7CWRUtil4sineEi>
 8016c98:	a903      	add	r1, sp, #12
 8016c9a:	9003      	str	r0, [sp, #12]
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	f7ff fdcb 	bl	8016838 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ca2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016ca4:	4641      	mov	r1, r8
 8016ca6:	1a12      	subs	r2, r2, r0
 8016ca8:	a804      	add	r0, sp, #16
 8016caa:	f00c fa2d 	bl	8023108 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016cae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016cb0:	441e      	add	r6, r3
 8016cb2:	e7de      	b.n	8016c72 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8016cb4:	4249      	negs	r1, r1
 8016cb6:	f7ff fe23 	bl	8016900 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016cba:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8016cbe:	e7c9      	b.n	8016c54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016cc0:	2900      	cmp	r1, #0
 8016cc2:	f1c0 0000 	rsb	r0, r0, #0
 8016cc6:	462a      	mov	r2, r5
 8016cc8:	db04      	blt.n	8016cd4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8016cca:	f7ff fe19 	bl	8016900 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016cce:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8016cd2:	e7bf      	b.n	8016c54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016cd4:	4249      	negs	r1, r1
 8016cd6:	f7ff fe13 	bl	8016900 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016cda:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8016cde:	e7b9      	b.n	8016c54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016ce0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016ce2:	a804      	add	r0, sp, #16
 8016ce4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016ce6:	f00c fa0f 	bl	8023108 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016cec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016cee:	a804      	add	r0, sp, #16
 8016cf0:	f00c fa0a 	bl	8023108 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016cf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	d123      	bne.n	8016d44 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016cfc:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016cfe:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8016d02:	2e00      	cmp	r6, #0
 8016d04:	dd1e      	ble.n	8016d44 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016d06:	eb06 0907 	add.w	r9, r6, r7
 8016d0a:	4648      	mov	r0, r9
 8016d0c:	f7ff fda0 	bl	8016850 <_ZN8touchgfx7CWRUtil4sineEi>
 8016d10:	a902      	add	r1, sp, #8
 8016d12:	9002      	str	r0, [sp, #8]
 8016d14:	4628      	mov	r0, r5
 8016d16:	f7ff fd8f 	bl	8016838 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016d1c:	eb00 0801 	add.w	r8, r0, r1
 8016d20:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016d24:	f7ff fd94 	bl	8016850 <_ZN8touchgfx7CWRUtil4sineEi>
 8016d28:	a903      	add	r1, sp, #12
 8016d2a:	9003      	str	r0, [sp, #12]
 8016d2c:	4628      	mov	r0, r5
 8016d2e:	f7ff fd83 	bl	8016838 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016d34:	4641      	mov	r1, r8
 8016d36:	1a12      	subs	r2, r2, r0
 8016d38:	a804      	add	r0, sp, #16
 8016d3a:	f00c f9e5 	bl	8023108 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016d3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016d40:	1af6      	subs	r6, r6, r3
 8016d42:	e7de      	b.n	8016d02 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016d44:	a804      	add	r0, sp, #16
 8016d46:	f00c fb54 	bl	80233f2 <_ZN8touchgfx6Canvas6renderEv>
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	a804      	add	r0, sp, #16
 8016d4e:	f00c fb91 	bl	8023474 <_ZN8touchgfx6CanvasD1Ev>
 8016d52:	4620      	mov	r0, r4
 8016d54:	b033      	add	sp, #204	; 0xcc
 8016d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016d5a <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016d5a:	b570      	push	{r4, r5, r6, lr}
 8016d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d60:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016d62:	4604      	mov	r4, r0
 8016d64:	429a      	cmp	r2, r3
 8016d66:	d00c      	beq.n	8016d82 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8016d68:	f850 3b26 	ldr.w	r3, [r0], #38
 8016d6c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8016d6e:	f7f9 fc5d 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8016d72:	2300      	movs	r3, #0
 8016d74:	4601      	mov	r1, r0
 8016d76:	46ac      	mov	ip, r5
 8016d78:	4620      	mov	r0, r4
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d80:	4760      	bx	ip
 8016d82:	2000      	movs	r0, #0
 8016d84:	bd70      	pop	{r4, r5, r6, pc}

08016d86 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d8c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d016      	beq.n	8016dc0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8016d92:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8016d96:	4620      	mov	r0, r4
 8016d98:	f7f8 f92e 	bl	800eff8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016d9c:	6803      	ldr	r3, [r0, #0]
 8016d9e:	4605      	mov	r5, r0
 8016da0:	4620      	mov	r0, r4
 8016da2:	69de      	ldr	r6, [r3, #28]
 8016da4:	f7f8 f944 	bl	800f030 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016da8:	4607      	mov	r7, r0
 8016daa:	4620      	mov	r0, r4
 8016dac:	f7f9 fc3e 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8016db0:	2300      	movs	r3, #0
 8016db2:	4602      	mov	r2, r0
 8016db4:	4639      	mov	r1, r7
 8016db6:	9300      	str	r3, [sp, #0]
 8016db8:	4628      	mov	r0, r5
 8016dba:	47b0      	blx	r6
 8016dbc:	b003      	add	sp, #12
 8016dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	e7fb      	b.n	8016dbc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08016dc4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016dc4:	b40e      	push	{r1, r2, r3}
 8016dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dce:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016dd0:	b09b      	sub	sp, #108	; 0x6c
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d03f      	beq.n	8016e58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8016dd8:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8016ddc:	ab22      	add	r3, sp, #136	; 0x88
 8016dde:	4638      	mov	r0, r7
 8016de0:	9303      	str	r3, [sp, #12]
 8016de2:	f7f8 f909 	bl	800eff8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016de6:	6803      	ldr	r3, [r0, #0]
 8016de8:	4680      	mov	r8, r0
 8016dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dec:	4798      	blx	r3
 8016dee:	4606      	mov	r6, r0
 8016df0:	b205      	sxth	r5, r0
 8016df2:	a804      	add	r0, sp, #16
 8016df4:	f002 ff7e 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8016df8:	f8d8 3000 	ldr.w	r3, [r8]
 8016dfc:	4640      	mov	r0, r8
 8016dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e00:	4798      	blx	r3
 8016e02:	9a03      	ldr	r2, [sp, #12]
 8016e04:	4603      	mov	r3, r0
 8016e06:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016e08:	a804      	add	r0, sp, #16
 8016e0a:	f002 ff90 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016e0e:	4638      	mov	r0, r7
 8016e10:	f7f8 f90e 	bl	800f030 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016e14:	4680      	mov	r8, r0
 8016e16:	4638      	mov	r0, r7
 8016e18:	f7f8 f8ee 	bl	800eff8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016e1c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016e20:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8016e24:	4642      	mov	r2, r8
 8016e26:	9300      	str	r3, [sp, #0]
 8016e28:	4603      	mov	r3, r0
 8016e2a:	a804      	add	r0, sp, #16
 8016e2c:	f001 f815 	bl	8017e5a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016e30:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016e34:	b203      	sxth	r3, r0
 8016e36:	18a9      	adds	r1, r5, r2
 8016e38:	2900      	cmp	r1, #0
 8016e3a:	dd0b      	ble.n	8016e54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8016e3c:	3b01      	subs	r3, #1
 8016e3e:	fb13 f302 	smulbb	r3, r3, r2
 8016e42:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016e46:	b21d      	sxth	r5, r3
 8016e48:	4628      	mov	r0, r5
 8016e4a:	b01b      	add	sp, #108	; 0x6c
 8016e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e50:	b003      	add	sp, #12
 8016e52:	4770      	bx	lr
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	dcf7      	bgt.n	8016e48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8016e58:	2500      	movs	r5, #0
 8016e5a:	e7f5      	b.n	8016e48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08016e5c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e64:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8016e66:	b08d      	sub	sp, #52	; 0x34
 8016e68:	4604      	mov	r4, r0
 8016e6a:	429e      	cmp	r6, r3
 8016e6c:	4688      	mov	r8, r1
 8016e6e:	d04b      	beq.n	8016f08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016e70:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016e74:	4628      	mov	r0, r5
 8016e76:	f7f8 f8bf 	bl	800eff8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016e7a:	4607      	mov	r7, r0
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d043      	beq.n	8016f08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016e80:	4628      	mov	r0, r5
 8016e82:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8016e86:	f7f8 f8eb 	bl	800f060 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016e8a:	4b21      	ldr	r3, [pc, #132]	; (8016f10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8016e8c:	4628      	mov	r0, r5
 8016e8e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016e98:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016e9c:	785e      	ldrb	r6, [r3, #1]
 8016e9e:	f7f8 f8c7 	bl	800f030 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016ea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016ea4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016ea8:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016eac:	9309      	str	r3, [sp, #36]	; 0x24
 8016eae:	4b19      	ldr	r3, [pc, #100]	; (8016f14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8016eb0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016eba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016ebe:	9707      	str	r7, [sp, #28]
 8016ec0:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8016ec4:	f88d 6020 	strb.w	r6, [sp, #32]
 8016ec8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016ecc:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8016ed0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8016ed4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016ed8:	b10a      	cbz	r2, 8016ede <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8016eda:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8016edc:	b906      	cbnz	r6, 8016ee0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8016ede:	689e      	ldr	r6, [r3, #8]
 8016ee0:	af05      	add	r7, sp, #20
 8016ee2:	4621      	mov	r1, r4
 8016ee4:	4638      	mov	r0, r7
 8016ee6:	f002 f864 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016eea:	4628      	mov	r0, r5
 8016eec:	f7f9 fb9e 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	9001      	str	r0, [sp, #4]
 8016ef4:	4630      	mov	r0, r6
 8016ef6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016efa:	ab07      	add	r3, sp, #28
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	4643      	mov	r3, r8
 8016f00:	e897 0006 	ldmia.w	r7, {r1, r2}
 8016f04:	f000 fd76 	bl	80179f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016f08:	b00d      	add	sp, #52	; 0x34
 8016f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f0e:	bf00      	nop
 8016f10:	2000bcf8 	.word	0x2000bcf8
 8016f14:	2000bc68 	.word	0x2000bc68

08016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016f18:	b570      	push	{r4, r5, r6, lr}
 8016f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f1e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016f20:	4604      	mov	r4, r0
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d021      	beq.n	8016f6a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8016f26:	6803      	ldr	r3, [r0, #0]
 8016f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f2a:	4798      	blx	r3
 8016f2c:	6823      	ldr	r3, [r4, #0]
 8016f2e:	4605      	mov	r5, r0
 8016f30:	4620      	mov	r0, r4
 8016f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016f34:	4798      	blx	r3
 8016f36:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016f3a:	4606      	mov	r6, r0
 8016f3c:	b22d      	sxth	r5, r5
 8016f3e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016f42:	6823      	ldr	r3, [r4, #0]
 8016f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f46:	d109      	bne.n	8016f5c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8016f48:	4629      	mov	r1, r5
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	4798      	blx	r3
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	4631      	mov	r1, r6
 8016f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f54:	4620      	mov	r0, r4
 8016f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f5a:	4718      	bx	r3
 8016f5c:	4601      	mov	r1, r0
 8016f5e:	4620      	mov	r0, r4
 8016f60:	4798      	blx	r3
 8016f62:	6823      	ldr	r3, [r4, #0]
 8016f64:	4629      	mov	r1, r5
 8016f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f68:	e7f4      	b.n	8016f54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8016f6a:	bd70      	pop	{r4, r5, r6, pc}

08016f6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8016f6c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016f70:	84c1      	strh	r1, [r0, #38]	; 0x26
 8016f72:	b922      	cbnz	r2, 8016f7e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8016f74:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016f78:	b90b      	cbnz	r3, 8016f7e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8016f7a:	f7ff bfcd 	b.w	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016f7e:	4770      	bx	lr

08016f80 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016f80:	2300      	movs	r3, #0
 8016f82:	8003      	strh	r3, [r0, #0]
 8016f84:	8043      	strh	r3, [r0, #2]
 8016f86:	8083      	strh	r3, [r0, #4]
 8016f88:	80c3      	strh	r3, [r0, #6]
 8016f8a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016f8e:	b91b      	cbnz	r3, 8016f98 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8016f90:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016f94:	2bff      	cmp	r3, #255	; 0xff
 8016f96:	d103      	bne.n	8016fa0 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8016f98:	890b      	ldrh	r3, [r1, #8]
 8016f9a:	8083      	strh	r3, [r0, #4]
 8016f9c:	894b      	ldrh	r3, [r1, #10]
 8016f9e:	80c3      	strh	r3, [r0, #6]
 8016fa0:	4770      	bx	lr
	...

08016fa4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fa6:	4604      	mov	r4, r0
 8016fa8:	466b      	mov	r3, sp
 8016faa:	6808      	ldr	r0, [r1, #0]
 8016fac:	6849      	ldr	r1, [r1, #4]
 8016fae:	c303      	stmia	r3!, {r0, r1}
 8016fb0:	6823      	ldr	r3, [r4, #0]
 8016fb2:	4669      	mov	r1, sp
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fb8:	4798      	blx	r3
 8016fba:	4b08      	ldr	r3, [pc, #32]	; (8016fdc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016fc2:	b10a      	cbz	r2, 8016fc8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016fc4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016fc6:	b900      	cbnz	r0, 8016fca <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016fc8:	6898      	ldr	r0, [r3, #8]
 8016fca:	6803      	ldr	r3, [r0, #0]
 8016fcc:	4669      	mov	r1, sp
 8016fce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016fd0:	69dd      	ldr	r5, [r3, #28]
 8016fd2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016fd6:	47a8      	blx	r5
 8016fd8:	b003      	add	sp, #12
 8016fda:	bd30      	pop	{r4, r5, pc}
 8016fdc:	2000bc68 	.word	0x2000bc68

08016fe0 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8016fe0:	b570      	push	{r4, r5, r6, lr}
 8016fe2:	6803      	ldr	r3, [r0, #0]
 8016fe4:	4604      	mov	r4, r0
 8016fe6:	4615      	mov	r5, r2
 8016fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016fea:	4798      	blx	r3
 8016fec:	6823      	ldr	r3, [r4, #0]
 8016fee:	4629      	mov	r1, r5
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ff8:	4718      	bx	r3

08016ffa <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8016ffa:	b570      	push	{r4, r5, r6, lr}
 8016ffc:	6803      	ldr	r3, [r0, #0]
 8016ffe:	4604      	mov	r4, r0
 8017000:	460e      	mov	r6, r1
 8017002:	4615      	mov	r5, r2
 8017004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017006:	4798      	blx	r3
 8017008:	8030      	strh	r0, [r6, #0]
 801700a:	6823      	ldr	r3, [r4, #0]
 801700c:	4620      	mov	r0, r4
 801700e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017010:	4798      	blx	r3
 8017012:	8028      	strh	r0, [r5, #0]
 8017014:	bd70      	pop	{r4, r5, r6, pc}

08017016 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8017016:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801701a:	4770      	bx	lr

0801701c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801701c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8017020:	4770      	bx	lr

08017022 <_ZN8touchgfx10TiledImageD1Ev>:
 8017022:	4770      	bx	lr

08017024 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8017024:	b510      	push	{r4, lr}
 8017026:	4604      	mov	r4, r0
 8017028:	f000 fa40 	bl	80174ac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801702c:	6823      	ldr	r3, [r4, #0]
 801702e:	4620      	mov	r0, r4
 8017030:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017034:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801703a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801703e:	4718      	bx	r3

08017040 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8017040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017042:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017046:	4605      	mov	r5, r0
 8017048:	8541      	strh	r1, [r0, #42]	; 0x2a
 801704a:	4630      	mov	r0, r6
 801704c:	f003 fd7e 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017050:	b1a0      	cbz	r0, 801707c <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8017052:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8017056:	4630      	mov	r0, r6
 8017058:	f003 fd78 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801705c:	fb97 f4f0 	sdiv	r4, r7, r0
 8017060:	fb04 7410 	mls	r4, r4, r0, r7
 8017064:	4630      	mov	r0, r6
 8017066:	f003 fd71 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801706a:	4404      	add	r4, r0
 801706c:	4630      	mov	r0, r6
 801706e:	f003 fd6d 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017072:	fb94 f3f0 	sdiv	r3, r4, r0
 8017076:	fb03 4010 	mls	r0, r3, r0, r4
 801707a:	8568      	strh	r0, [r5, #42]	; 0x2a
 801707c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801707e <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801707e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017080:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017084:	4605      	mov	r5, r0
 8017086:	8581      	strh	r1, [r0, #44]	; 0x2c
 8017088:	4630      	mov	r0, r6
 801708a:	f003 fd99 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801708e:	b1a0      	cbz	r0, 80170ba <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8017090:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8017094:	4630      	mov	r0, r6
 8017096:	f003 fd93 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801709a:	fb97 f4f0 	sdiv	r4, r7, r0
 801709e:	fb04 7410 	mls	r4, r4, r0, r7
 80170a2:	4630      	mov	r0, r6
 80170a4:	f003 fd8c 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170a8:	4404      	add	r4, r0
 80170aa:	4630      	mov	r0, r6
 80170ac:	f003 fd88 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170b0:	fb94 f3f0 	sdiv	r3, r4, r0
 80170b4:	fb03 4010 	mls	r0, r3, r0, r4
 80170b8:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80170ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080170bc <_ZN8touchgfx10TiledImageD0Ev>:
 80170bc:	b510      	push	{r4, lr}
 80170be:	4604      	mov	r4, r0
 80170c0:	2130      	movs	r1, #48	; 0x30
 80170c2:	f00d fa6a 	bl	802459a <_ZdlPvj>
 80170c6:	4620      	mov	r0, r4
 80170c8:	bd10      	pop	{r4, pc}
	...

080170cc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80170cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d0:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80170d4:	b093      	sub	sp, #76	; 0x4c
 80170d6:	4607      	mov	r7, r0
 80170d8:	460e      	mov	r6, r1
 80170da:	4658      	mov	r0, fp
 80170dc:	f003 fd36 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80170e0:	4605      	mov	r5, r0
 80170e2:	4658      	mov	r0, fp
 80170e4:	f003 fd6c 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170e8:	4680      	mov	r8, r0
 80170ea:	2d00      	cmp	r5, #0
 80170ec:	f000 80c5 	beq.w	801727a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80170f0:	2800      	cmp	r0, #0
 80170f2:	f000 80c2 	beq.w	801727a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80170f6:	2300      	movs	r3, #0
 80170f8:	a90e      	add	r1, sp, #56	; 0x38
 80170fa:	4638      	mov	r0, r7
 80170fc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017104:	4798      	blx	r3
 8017106:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801710a:	f9b6 3000 	ldrsh.w	r3, [r6]
 801710e:	88b1      	ldrh	r1, [r6, #4]
 8017110:	189c      	adds	r4, r3, r2
 8017112:	440b      	add	r3, r1
 8017114:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017118:	fa02 f383 	sxtah	r3, r2, r3
 801711c:	3b01      	subs	r3, #1
 801711e:	fb93 f3f5 	sdiv	r3, r3, r5
 8017122:	fb94 f4f5 	sdiv	r4, r4, r5
 8017126:	fb13 f305 	smulbb	r3, r3, r5
 801712a:	fb14 f405 	smulbb	r4, r4, r5
 801712e:	b21b      	sxth	r3, r3
 8017130:	1aa4      	subs	r4, r4, r2
 8017132:	930b      	str	r3, [sp, #44]	; 0x2c
 8017134:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017138:	b2a4      	uxth	r4, r4
 801713a:	185a      	adds	r2, r3, r1
 801713c:	fb92 f2f8 	sdiv	r2, r2, r8
 8017140:	fb12 f208 	smulbb	r2, r2, r8
 8017144:	1a52      	subs	r2, r2, r1
 8017146:	b212      	sxth	r2, r2
 8017148:	920c      	str	r2, [sp, #48]	; 0x30
 801714a:	88f2      	ldrh	r2, [r6, #6]
 801714c:	4413      	add	r3, r2
 801714e:	fa01 f383 	sxtah	r3, r1, r3
 8017152:	3b01      	subs	r3, #1
 8017154:	fb93 f3f8 	sdiv	r3, r3, r8
 8017158:	fb13 f308 	smulbb	r3, r3, r8
 801715c:	b21b      	sxth	r3, r3
 801715e:	930d      	str	r3, [sp, #52]	; 0x34
 8017160:	1963      	adds	r3, r4, r5
 8017162:	fa1f fa83 	uxth.w	sl, r3
 8017166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017168:	b223      	sxth	r3, r4
 801716a:	4293      	cmp	r3, r2
 801716c:	9305      	str	r3, [sp, #20]
 801716e:	f300 8084 	bgt.w	801727a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017172:	fa0f f38a 	sxth.w	r3, sl
 8017176:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801717a:	9309      	str	r3, [sp, #36]	; 0x24
 801717c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801717e:	4599      	cmp	r9, r3
 8017180:	dd04      	ble.n	801718c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8017182:	442c      	add	r4, r5
 8017184:	eb05 030a 	add.w	r3, r5, sl
 8017188:	b2a4      	uxth	r4, r4
 801718a:	e7ea      	b.n	8017162 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801718c:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017190:	88b2      	ldrh	r2, [r6, #4]
 8017192:	4462      	add	r2, ip
 8017194:	b292      	uxth	r2, r2
 8017196:	b213      	sxth	r3, r2
 8017198:	9308      	str	r3, [sp, #32]
 801719a:	fa1f f389 	uxth.w	r3, r9
 801719e:	eb08 0103 	add.w	r1, r8, r3
 80171a2:	9307      	str	r3, [sp, #28]
 80171a4:	b289      	uxth	r1, r1
 80171a6:	b208      	sxth	r0, r1
 80171a8:	9006      	str	r0, [sp, #24]
 80171aa:	9805      	ldr	r0, [sp, #20]
 80171ac:	4603      	mov	r3, r0
 80171ae:	9808      	ldr	r0, [sp, #32]
 80171b0:	4283      	cmp	r3, r0
 80171b2:	da5e      	bge.n	8017272 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171b6:	4584      	cmp	ip, r0
 80171b8:	da5b      	bge.n	8017272 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171ba:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80171be:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80171c2:	4486      	add	lr, r0
 80171c4:	fa1f fe8e 	uxth.w	lr, lr
 80171c8:	fa0f f38e 	sxth.w	r3, lr
 80171cc:	4599      	cmp	r9, r3
 80171ce:	930a      	str	r3, [sp, #40]	; 0x28
 80171d0:	da4f      	bge.n	8017272 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171d2:	9b06      	ldr	r3, [sp, #24]
 80171d4:	4298      	cmp	r0, r3
 80171d6:	da4c      	bge.n	8017272 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171d8:	9b05      	ldr	r3, [sp, #20]
 80171da:	459c      	cmp	ip, r3
 80171dc:	bfb8      	it	lt
 80171de:	469c      	movlt	ip, r3
 80171e0:	4548      	cmp	r0, r9
 80171e2:	9b08      	ldr	r3, [sp, #32]
 80171e4:	bfb8      	it	lt
 80171e6:	4648      	movlt	r0, r9
 80171e8:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80171ec:	4699      	mov	r9, r3
 80171ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171f0:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80171f4:	4599      	cmp	r9, r3
 80171f6:	bfc8      	it	gt
 80171f8:	4652      	movgt	r2, sl
 80171fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171fc:	eba2 020c 	sub.w	r2, r2, ip
 8017200:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017204:	9a06      	ldr	r2, [sp, #24]
 8017206:	4293      	cmp	r3, r2
 8017208:	bfd8      	it	le
 801720a:	4671      	movle	r1, lr
 801720c:	1a09      	subs	r1, r1, r0
 801720e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8017212:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017216:	9b07      	ldr	r3, [sp, #28]
 8017218:	1b12      	subs	r2, r2, r4
 801721a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801721e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017222:	1ad2      	subs	r2, r2, r3
 8017224:	4b16      	ldr	r3, [pc, #88]	; (8017280 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8017226:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801722a:	681a      	ldr	r2, [r3, #0]
 801722c:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8017230:	b109      	cbz	r1, 8017236 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8017232:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8017234:	b900      	cbnz	r0, 8017238 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017236:	6890      	ldr	r0, [r2, #8]
 8017238:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801723c:	f04f 0c01 	mov.w	ip, #1
 8017240:	9b07      	ldr	r3, [sp, #28]
 8017242:	6801      	ldr	r1, [r0, #0]
 8017244:	4413      	add	r3, r2
 8017246:	f8cd c008 	str.w	ip, [sp, #8]
 801724a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801724e:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8017252:	b21b      	sxth	r3, r3
 8017254:	4422      	add	r2, r4
 8017256:	f8cd c004 	str.w	ip, [sp, #4]
 801725a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801725e:	b212      	sxth	r2, r2
 8017260:	f8cd c000 	str.w	ip, [sp]
 8017264:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8017268:	4659      	mov	r1, fp
 801726a:	47c8      	blx	r9
 801726c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017270:	e784      	b.n	801717c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8017272:	2300      	movs	r3, #0
 8017274:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8017278:	e7cb      	b.n	8017212 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801727a:	b013      	add	sp, #76	; 0x4c
 801727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017280:	2000bc68 	.word	0x2000bc68

08017284 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8017284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017288:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801728c:	4606      	mov	r6, r0
 801728e:	4689      	mov	r9, r1
 8017290:	2bff      	cmp	r3, #255	; 0xff
 8017292:	d008      	beq.n	80172a6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8017294:	2300      	movs	r3, #0
 8017296:	8003      	strh	r3, [r0, #0]
 8017298:	8043      	strh	r3, [r0, #2]
 801729a:	8083      	strh	r3, [r0, #4]
 801729c:	4630      	mov	r0, r6
 801729e:	80f3      	strh	r3, [r6, #6]
 80172a0:	b003      	add	sp, #12
 80172a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172a6:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80172aa:	4668      	mov	r0, sp
 80172ac:	4659      	mov	r1, fp
 80172ae:	f003 fcc1 	bl	801ac34 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80172b2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80172b6:	4658      	mov	r0, fp
 80172b8:	f9bd 7000 	ldrsh.w	r7, [sp]
 80172bc:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80172c0:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80172c4:	f003 fc42 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80172c8:	4284      	cmp	r4, r0
 80172ca:	d10d      	bne.n	80172e8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80172cc:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80172d0:	4658      	mov	r0, fp
 80172d2:	f003 fc75 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80172d6:	4580      	cmp	r8, r0
 80172d8:	d12a      	bne.n	8017330 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80172da:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80172de:	8037      	strh	r7, [r6, #0]
 80172e0:	f8a6 a002 	strh.w	sl, [r6, #2]
 80172e4:	80b5      	strh	r5, [r6, #4]
 80172e6:	e7d9      	b.n	801729c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80172e8:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80172ec:	4658      	mov	r0, fp
 80172ee:	f003 fc2d 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80172f2:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 80172f6:	1b7f      	subs	r7, r7, r5
 80172f8:	b2a3      	uxth	r3, r4
 80172fa:	b2bd      	uxth	r5, r7
 80172fc:	b22f      	sxth	r7, r5
 80172fe:	4428      	add	r0, r5
 8017300:	2f00      	cmp	r7, #0
 8017302:	b280      	uxth	r0, r0
 8017304:	bfb8      	it	lt
 8017306:	18ed      	addlt	r5, r5, r3
 8017308:	4403      	add	r3, r0
 801730a:	bfac      	ite	ge
 801730c:	4625      	movge	r5, r4
 801730e:	2700      	movlt	r7, #0
 8017310:	b29b      	uxth	r3, r3
 8017312:	bfb8      	it	lt
 8017314:	b22d      	sxthlt	r5, r5
 8017316:	b219      	sxth	r1, r3
 8017318:	bfb8      	it	lt
 801731a:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801731e:	4291      	cmp	r1, r2
 8017320:	bfc4      	itt	gt
 8017322:	1a9c      	subgt	r4, r3, r2
 8017324:	b224      	sxthgt	r4, r4
 8017326:	42ac      	cmp	r4, r5
 8017328:	bfc4      	itt	gt
 801732a:	b207      	sxthgt	r7, r0
 801732c:	4625      	movgt	r5, r4
 801732e:	e7cf      	b.n	80172d0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017330:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8017334:	4658      	mov	r0, fp
 8017336:	f003 fc43 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801733a:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801733e:	ebaa 0404 	sub.w	r4, sl, r4
 8017342:	fa1f f288 	uxth.w	r2, r8
 8017346:	b2a4      	uxth	r4, r4
 8017348:	fa0f fa84 	sxth.w	sl, r4
 801734c:	4420      	add	r0, r4
 801734e:	f1ba 0f00 	cmp.w	sl, #0
 8017352:	b280      	uxth	r0, r0
 8017354:	bfb8      	it	lt
 8017356:	18a3      	addlt	r3, r4, r2
 8017358:	4402      	add	r2, r0
 801735a:	bfac      	ite	ge
 801735c:	4643      	movge	r3, r8
 801735e:	f04f 0a00 	movlt.w	sl, #0
 8017362:	b292      	uxth	r2, r2
 8017364:	bfb8      	it	lt
 8017366:	b21b      	sxthlt	r3, r3
 8017368:	b214      	sxth	r4, r2
 801736a:	bfb8      	it	lt
 801736c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017370:	428c      	cmp	r4, r1
 8017372:	bfc4      	itt	gt
 8017374:	eba2 0801 	subgt.w	r8, r2, r1
 8017378:	fa0f f888 	sxthgt.w	r8, r8
 801737c:	4543      	cmp	r3, r8
 801737e:	bfbc      	itt	lt
 8017380:	fa0f fa80 	sxthlt.w	sl, r0
 8017384:	4643      	movlt	r3, r8
 8017386:	e7aa      	b.n	80172de <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08017388 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801738c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017390:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017392:	4604      	mov	r4, r0
 8017394:	429a      	cmp	r2, r3
 8017396:	d018      	beq.n	80173ca <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8017398:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801739c:	4628      	mov	r0, r5
 801739e:	f7f7 fe2b 	bl	800eff8 <_ZNK8touchgfx9TypedText7getFontEv>
 80173a2:	6803      	ldr	r3, [r0, #0]
 80173a4:	4606      	mov	r6, r0
 80173a6:	4628      	mov	r0, r5
 80173a8:	69df      	ldr	r7, [r3, #28]
 80173aa:	f7f7 fe41 	bl	800f030 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80173ae:	4680      	mov	r8, r0
 80173b0:	4628      	mov	r0, r5
 80173b2:	f7f9 f93b 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 80173b6:	2300      	movs	r3, #0
 80173b8:	4602      	mov	r2, r0
 80173ba:	4641      	mov	r1, r8
 80173bc:	9300      	str	r3, [sp, #0]
 80173be:	4630      	mov	r0, r6
 80173c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173c2:	47b8      	blx	r7
 80173c4:	b002      	add	sp, #8
 80173c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ca:	2000      	movs	r0, #0
 80173cc:	e7fa      	b.n	80173c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080173ce <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80173ce:	b570      	push	{r4, r5, r6, lr}
 80173d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173d4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80173d6:	4604      	mov	r4, r0
 80173d8:	429a      	cmp	r2, r3
 80173da:	d00c      	beq.n	80173f6 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 80173dc:	f850 3b26 	ldr.w	r3, [r0], #38
 80173e0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80173e2:	f7f9 f923 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 80173e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80173e8:	4601      	mov	r1, r0
 80173ea:	46ac      	mov	ip, r5
 80173ec:	4620      	mov	r0, r4
 80173ee:	2300      	movs	r3, #0
 80173f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173f4:	4760      	bx	ip
 80173f6:	2000      	movs	r0, #0
 80173f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080173fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80173fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017404:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017406:	b08d      	sub	sp, #52	; 0x34
 8017408:	4604      	mov	r4, r0
 801740a:	429e      	cmp	r6, r3
 801740c:	460f      	mov	r7, r1
 801740e:	d048      	beq.n	80174a2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017410:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017414:	4628      	mov	r0, r5
 8017416:	f7f7 fdef 	bl	800eff8 <_ZNK8touchgfx9TypedText7getFontEv>
 801741a:	4680      	mov	r8, r0
 801741c:	2800      	cmp	r0, #0
 801741e:	d040      	beq.n	80174a2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017420:	4628      	mov	r0, r5
 8017422:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017426:	f7f7 fe1b 	bl	800f060 <_ZNK8touchgfx9TypedText11assertValidEv>
 801742a:	4b1f      	ldr	r3, [pc, #124]	; (80174a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801742c:	4628      	mov	r0, r5
 801742e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017438:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801743c:	785e      	ldrb	r6, [r3, #1]
 801743e:	f7f7 fdf7 	bl	800f030 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017442:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017446:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801744a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801744c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017450:	f88d 6020 	strb.w	r6, [sp, #32]
 8017454:	ae05      	add	r6, sp, #20
 8017456:	9309      	str	r3, [sp, #36]	; 0x24
 8017458:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801745c:	f8cd 801c 	str.w	r8, [sp, #28]
 8017460:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017464:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017468:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801746c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017470:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017474:	f7f8 f9a0 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8017478:	4621      	mov	r1, r4
 801747a:	4680      	mov	r8, r0
 801747c:	4630      	mov	r0, r6
 801747e:	f001 fd98 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017482:	4628      	mov	r0, r5
 8017484:	f7f9 f8d2 	bl	801062c <_ZNK8touchgfx9TypedText7getTextEv>
 8017488:	2300      	movs	r3, #0
 801748a:	9303      	str	r3, [sp, #12]
 801748c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801748e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017492:	ab07      	add	r3, sp, #28
 8017494:	4640      	mov	r0, r8
 8017496:	9300      	str	r3, [sp, #0]
 8017498:	463b      	mov	r3, r7
 801749a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801749e:	f000 faa9 	bl	80179f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80174a2:	b00d      	add	sp, #52	; 0x34
 80174a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174a8:	2000bcf8 	.word	0x2000bcf8

080174ac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80174ac:	b570      	push	{r4, r5, r6, lr}
 80174ae:	4605      	mov	r5, r0
 80174b0:	880b      	ldrh	r3, [r1, #0]
 80174b2:	4604      	mov	r4, r0
 80174b4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80174b6:	f855 3b26 	ldr.w	r3, [r5], #38
 80174ba:	4628      	mov	r0, r5
 80174bc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80174be:	f003 fb45 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80174c2:	b201      	sxth	r1, r0
 80174c4:	4620      	mov	r0, r4
 80174c6:	47b0      	blx	r6
 80174c8:	6823      	ldr	r3, [r4, #0]
 80174ca:	4628      	mov	r0, r5
 80174cc:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80174ce:	f003 fb77 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80174d2:	b201      	sxth	r1, r0
 80174d4:	4620      	mov	r0, r4
 80174d6:	47b0      	blx	r6
 80174d8:	4628      	mov	r0, r5
 80174da:	f003 fc05 	bl	801ace8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80174de:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80174e2:	bd70      	pop	{r4, r5, r6, pc}

080174e4 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80174e4:	b510      	push	{r4, lr}
 80174e6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80174ea:	4604      	mov	r4, r0
 80174ec:	2bff      	cmp	r3, #255	; 0xff
 80174ee:	d006      	beq.n	80174fe <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80174f0:	2300      	movs	r3, #0
 80174f2:	8003      	strh	r3, [r0, #0]
 80174f4:	8043      	strh	r3, [r0, #2]
 80174f6:	8083      	strh	r3, [r0, #4]
 80174f8:	80c3      	strh	r3, [r0, #6]
 80174fa:	4620      	mov	r0, r4
 80174fc:	bd10      	pop	{r4, pc}
 80174fe:	3126      	adds	r1, #38	; 0x26
 8017500:	f003 fb98 	bl	801ac34 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017504:	e7f9      	b.n	80174fa <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017508 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801750c:	4604      	mov	r4, r0
 801750e:	b088      	sub	sp, #32
 8017510:	2500      	movs	r5, #0
 8017512:	460f      	mov	r7, r1
 8017514:	f854 3b26 	ldr.w	r3, [r4], #38
 8017518:	a904      	add	r1, sp, #16
 801751a:	4606      	mov	r6, r0
 801751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801751e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017522:	4798      	blx	r3
 8017524:	4620      	mov	r0, r4
 8017526:	f003 fb11 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801752a:	4680      	mov	r8, r0
 801752c:	4620      	mov	r0, r4
 801752e:	f003 fb47 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017532:	9506      	str	r5, [sp, #24]
 8017534:	ad06      	add	r5, sp, #24
 8017536:	f8ad 001e 	strh.w	r0, [sp, #30]
 801753a:	4639      	mov	r1, r7
 801753c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017540:	4628      	mov	r0, r5
 8017542:	f7fd fef5 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8017546:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801754a:	b1c3      	cbz	r3, 801757e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801754c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017550:	b1ab      	cbz	r3, 801757e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017552:	4b0c      	ldr	r3, [pc, #48]	; (8017584 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801755a:	b10a      	cbz	r2, 8017560 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801755c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801755e:	b900      	cbnz	r0, 8017562 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8017560:	6898      	ldr	r0, [r3, #8]
 8017562:	2701      	movs	r7, #1
 8017564:	6801      	ldr	r1, [r0, #0]
 8017566:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801756a:	9702      	str	r7, [sp, #8]
 801756c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017570:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017574:	e9cd 5600 	strd	r5, r6, [sp]
 8017578:	68cd      	ldr	r5, [r1, #12]
 801757a:	4621      	mov	r1, r4
 801757c:	47a8      	blx	r5
 801757e:	b008      	add	sp, #32
 8017580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017584:	2000bc68 	.word	0x2000bc68

08017588 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017588:	4b02      	ldr	r3, [pc, #8]	; (8017594 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801758a:	6018      	str	r0, [r3, #0]
 801758c:	4b02      	ldr	r3, [pc, #8]	; (8017598 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801758e:	6019      	str	r1, [r3, #0]
 8017590:	4770      	bx	lr
 8017592:	bf00      	nop
 8017594:	2000bc70 	.word	0x2000bc70
 8017598:	2000bc84 	.word	0x2000bc84

0801759c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801759c:	b538      	push	{r3, r4, r5, lr}
 801759e:	4c2b      	ldr	r4, [pc, #172]	; (801764c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80175a0:	4b2b      	ldr	r3, [pc, #172]	; (8017650 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80175a2:	6821      	ldr	r1, [r4, #0]
 80175a4:	681a      	ldr	r2, [r3, #0]
 80175a6:	4281      	cmp	r1, r0
 80175a8:	4d2a      	ldr	r5, [pc, #168]	; (8017654 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80175aa:	492b      	ldr	r1, [pc, #172]	; (8017658 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80175ac:	d108      	bne.n	80175c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80175ae:	682b      	ldr	r3, [r5, #0]
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d105      	bne.n	80175c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80175b4:	6808      	ldr	r0, [r1, #0]
 80175b6:	280f      	cmp	r0, #15
 80175b8:	bf94      	ite	ls
 80175ba:	2000      	movls	r0, #0
 80175bc:	2001      	movhi	r0, #1
 80175be:	bd38      	pop	{r3, r4, r5, pc}
 80175c0:	4b26      	ldr	r3, [pc, #152]	; (801765c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80175c2:	6020      	str	r0, [r4, #0]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	602a      	str	r2, [r5, #0]
 80175c8:	4298      	cmp	r0, r3
 80175ca:	d905      	bls.n	80175d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80175cc:	4b24      	ldr	r3, [pc, #144]	; (8017660 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80175ce:	2137      	movs	r1, #55	; 0x37
 80175d0:	4a24      	ldr	r2, [pc, #144]	; (8017664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80175d2:	4825      	ldr	r0, [pc, #148]	; (8017668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80175d4:	f00d f80c 	bl	80245f0 <__assert_func>
 80175d8:	f010 0403 	ands.w	r4, r0, #3
 80175dc:	bf1f      	itttt	ne
 80175de:	f1c4 0504 	rsbne	r5, r4, #4
 80175e2:	3b04      	subne	r3, #4
 80175e4:	1952      	addne	r2, r2, r5
 80175e6:	191b      	addne	r3, r3, r4
 80175e8:	4d20      	ldr	r5, [pc, #128]	; (801766c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80175ea:	4402      	add	r2, r0
 80175ec:	1a1b      	subs	r3, r3, r0
 80175ee:	3001      	adds	r0, #1
 80175f0:	602a      	str	r2, [r5, #0]
 80175f2:	f020 0401 	bic.w	r4, r0, #1
 80175f6:	42a3      	cmp	r3, r4
 80175f8:	d203      	bcs.n	8017602 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 80175fa:	4b19      	ldr	r3, [pc, #100]	; (8017660 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80175fc:	214a      	movs	r1, #74	; 0x4a
 80175fe:	4a19      	ldr	r2, [pc, #100]	; (8017664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017600:	e7e7      	b.n	80175d2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017602:	f010 0002 	ands.w	r0, r0, #2
 8017606:	bf1f      	itttt	ne
 8017608:	f1c0 0504 	rsbne	r5, r0, #4
 801760c:	1952      	addne	r2, r2, r5
 801760e:	1f05      	subne	r5, r0, #4
 8017610:	195b      	addne	r3, r3, r5
 8017612:	4422      	add	r2, r4
 8017614:	4d16      	ldr	r5, [pc, #88]	; (8017670 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017616:	1b1b      	subs	r3, r3, r4
 8017618:	602a      	str	r2, [r5, #0]
 801761a:	429c      	cmp	r4, r3
 801761c:	d903      	bls.n	8017626 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801761e:	4b10      	ldr	r3, [pc, #64]	; (8017660 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017620:	215d      	movs	r1, #93	; 0x5d
 8017622:	4a10      	ldr	r2, [pc, #64]	; (8017664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017624:	e7d5      	b.n	80175d2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017626:	b120      	cbz	r0, 8017632 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017628:	f1c0 0504 	rsb	r5, r0, #4
 801762c:	3804      	subs	r0, #4
 801762e:	442a      	add	r2, r5
 8017630:	4403      	add	r3, r0
 8017632:	1b1b      	subs	r3, r3, r4
 8017634:	4422      	add	r2, r4
 8017636:	480f      	ldr	r0, [pc, #60]	; (8017674 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017638:	2b0f      	cmp	r3, #15
 801763a:	600b      	str	r3, [r1, #0]
 801763c:	6002      	str	r2, [r0, #0]
 801763e:	d803      	bhi.n	8017648 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017640:	4b0d      	ldr	r3, [pc, #52]	; (8017678 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017642:	2170      	movs	r1, #112	; 0x70
 8017644:	4a07      	ldr	r2, [pc, #28]	; (8017664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017646:	e7c4      	b.n	80175d2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017648:	2001      	movs	r0, #1
 801764a:	e7b8      	b.n	80175be <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801764c:	2000bc78 	.word	0x2000bc78
 8017650:	2000bc70 	.word	0x2000bc70
 8017654:	2000bc80 	.word	0x2000bc80
 8017658:	2000bc88 	.word	0x2000bc88
 801765c:	2000bc84 	.word	0x2000bc84
 8017660:	08027ca4 	.word	0x08027ca4
 8017664:	08027d6c 	.word	0x08027d6c
 8017668:	08027cdd 	.word	0x08027cdd
 801766c:	2000bc8c 	.word	0x2000bc8c
 8017670:	2000bc7c 	.word	0x2000bc7c
 8017674:	2000bc74 	.word	0x2000bc74
 8017678:	08027d27 	.word	0x08027d27

0801767c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801767c:	4b04      	ldr	r3, [pc, #16]	; (8017690 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801767e:	6818      	ldr	r0, [r3, #0]
 8017680:	b120      	cbz	r0, 801768c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017682:	4b04      	ldr	r3, [pc, #16]	; (8017694 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017684:	6818      	ldr	r0, [r3, #0]
 8017686:	3000      	adds	r0, #0
 8017688:	bf18      	it	ne
 801768a:	2001      	movne	r0, #1
 801768c:	4770      	bx	lr
 801768e:	bf00      	nop
 8017690:	2000bc70 	.word	0x2000bc70
 8017694:	2000bc84 	.word	0x2000bc84

08017698 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017698:	4b01      	ldr	r3, [pc, #4]	; (80176a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801769a:	6818      	ldr	r0, [r3, #0]
 801769c:	4770      	bx	lr
 801769e:	bf00      	nop
 80176a0:	2000bc78 	.word	0x2000bc78

080176a4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80176a4:	4b01      	ldr	r3, [pc, #4]	; (80176ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80176a6:	6818      	ldr	r0, [r3, #0]
 80176a8:	4770      	bx	lr
 80176aa:	bf00      	nop
 80176ac:	2000bc80 	.word	0x2000bc80

080176b0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80176b0:	4b01      	ldr	r3, [pc, #4]	; (80176b8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80176b2:	6818      	ldr	r0, [r3, #0]
 80176b4:	4770      	bx	lr
 80176b6:	bf00      	nop
 80176b8:	2000bc8c 	.word	0x2000bc8c

080176bc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80176bc:	4b01      	ldr	r3, [pc, #4]	; (80176c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80176be:	6818      	ldr	r0, [r3, #0]
 80176c0:	4770      	bx	lr
 80176c2:	bf00      	nop
 80176c4:	2000bc7c 	.word	0x2000bc7c

080176c8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80176c8:	4b01      	ldr	r3, [pc, #4]	; (80176d0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80176ca:	6818      	ldr	r0, [r3, #0]
 80176cc:	4770      	bx	lr
 80176ce:	bf00      	nop
 80176d0:	2000bc74 	.word	0x2000bc74

080176d4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80176d4:	4b01      	ldr	r3, [pc, #4]	; (80176dc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80176d6:	6818      	ldr	r0, [r3, #0]
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop
 80176dc:	2000bc88 	.word	0x2000bc88

080176e0 <_ZN8touchgfx3LCD4initEv>:
 80176e0:	4770      	bx	lr

080176e2 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80176e2:	2000      	movs	r0, #0
 80176e4:	4770      	bx	lr

080176e6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80176e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ea:	b091      	sub	sp, #68	; 0x44
 80176ec:	4699      	mov	r9, r3
 80176ee:	4617      	mov	r7, r2
 80176f0:	2500      	movs	r5, #0
 80176f2:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 80176f6:	4680      	mov	r8, r0
 80176f8:	a80e      	add	r0, sp, #56	; 0x38
 80176fa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80176fc:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017700:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017704:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017708:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801770c:	910d      	str	r1, [sp, #52]	; 0x34
 801770e:	950e      	str	r5, [sp, #56]	; 0x38
 8017710:	f000 fe3a 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017714:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017716:	f8d9 6000 	ldr.w	r6, [r9]
 801771a:	6818      	ldr	r0, [r3, #0]
 801771c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801771e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017722:	1b80      	subs	r0, r0, r6
 8017724:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017728:	eb02 0c06 	add.w	ip, r2, r6
 801772c:	ebab 0e0c 	sub.w	lr, fp, ip
 8017730:	4570      	cmp	r0, lr
 8017732:	f340 80bc 	ble.w	80178ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017736:	88a1      	ldrh	r1, [r4, #4]
 8017738:	4459      	add	r1, fp
 801773a:	b209      	sxth	r1, r1
 801773c:	458c      	cmp	ip, r1
 801773e:	f300 80b6 	bgt.w	80178ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017742:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017746:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801774a:	4283      	cmp	r3, r0
 801774c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017750:	edd9 6a07 	vldr	s13, [r9, #28]
 8017754:	bfa8      	it	ge
 8017756:	4603      	movge	r3, r0
 8017758:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801775c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017760:	45e3      	cmp	fp, ip
 8017762:	ee07 3a90 	vmov	s15, r3
 8017766:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801776a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801776e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017772:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017776:	ee25 5a27 	vmul.f32	s10, s10, s15
 801777a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801777e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017782:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017786:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801778a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801778e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017792:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017796:	f340 808d 	ble.w	80178b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801779a:	fb9e f5f3 	sdiv	r5, lr, r3
 801779e:	ee07 5a10 	vmov	s14, r5
 80177a2:	2d00      	cmp	r5, #0
 80177a4:	fb03 e415 	mls	r4, r3, r5, lr
 80177a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177ac:	eea7 0a04 	vfma.f32	s0, s14, s8
 80177b0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80177b4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80177b8:	dd12      	ble.n	80177e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80177ba:	ee70 6a44 	vsub.f32	s13, s0, s8
 80177be:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80177c2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80177c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80177ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ce:	bf14      	ite	ne
 80177d0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80177d4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80177d8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80177dc:	ee22 2a07 	vmul.f32	s4, s4, s14
 80177e0:	fb05 f703 	mul.w	r7, r5, r3
 80177e4:	1bc0      	subs	r0, r0, r7
 80177e6:	443e      	add	r6, r7
 80177e8:	1997      	adds	r7, r2, r6
 80177ea:	4407      	add	r7, r0
 80177ec:	42b9      	cmp	r1, r7
 80177ee:	bfbc      	itt	lt
 80177f0:	1a88      	sublt	r0, r1, r2
 80177f2:	1b80      	sublt	r0, r0, r6
 80177f4:	2800      	cmp	r0, #0
 80177f6:	dd5a      	ble.n	80178ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80177f8:	fb90 f1f3 	sdiv	r1, r0, r3
 80177fc:	fb03 0211 	mls	r2, r3, r1, r0
 8017800:	b90a      	cbnz	r2, 8017806 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017802:	3901      	subs	r1, #1
 8017804:	461a      	mov	r2, r3
 8017806:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801780a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801780e:	44a4      	add	ip, r4
 8017810:	2900      	cmp	r1, #0
 8017812:	bfcc      	ite	gt
 8017814:	469e      	movgt	lr, r3
 8017816:	4696      	movle	lr, r2
 8017818:	fb03 c505 	mla	r5, r3, r5, ip
 801781c:	eef0 6a42 	vmov.f32	s13, s4
 8017820:	eeb0 7a61 	vmov.f32	s14, s3
 8017824:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017828:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801782c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017830:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017834:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017838:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801783c:	ee17 0a90 	vmov	r0, s15
 8017840:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017844:	fb90 f6f3 	sdiv	r6, r0, r3
 8017848:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801784c:	ee17 0a90 	vmov	r0, s15
 8017850:	fb90 f7f3 	sdiv	r7, r0, r3
 8017854:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017858:	f8d0 8000 	ldr.w	r8, [r0]
 801785c:	900c      	str	r0, [sp, #48]	; 0x30
 801785e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017860:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017864:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017868:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801786c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017870:	f8cd a020 	str.w	sl, [sp, #32]
 8017874:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017878:	980d      	ldr	r0, [sp, #52]	; 0x34
 801787a:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801787e:	9603      	str	r6, [sp, #12]
 8017880:	44ca      	add	sl, r9
 8017882:	9506      	str	r5, [sp, #24]
 8017884:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017888:	ee16 0a90 	vmov	r0, s13
 801788c:	f8cd a01c 	str.w	sl, [sp, #28]
 8017890:	fb07 0704 	mla	r7, r7, r4, r0
 8017894:	ee17 0a10 	vmov	r0, s14
 8017898:	fb06 0604 	mla	r6, r6, r4, r0
 801789c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801789e:	9702      	str	r7, [sp, #8]
 80178a0:	e9cd 3600 	strd	r3, r6, [sp]
 80178a4:	ebae 0304 	sub.w	r3, lr, r4
 80178a8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80178ac:	47a8      	blx	r5
 80178ae:	b011      	add	sp, #68	; 0x44
 80178b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b4:	462c      	mov	r4, r5
 80178b6:	e797      	b.n	80177e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080178b8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80178b8:	b570      	push	{r4, r5, r6, lr}
 80178ba:	4604      	mov	r4, r0
 80178bc:	2500      	movs	r5, #0
 80178be:	9804      	ldr	r0, [sp, #16]
 80178c0:	7223      	strb	r3, [r4, #8]
 80178c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80178c6:	8025      	strh	r5, [r4, #0]
 80178c8:	6061      	str	r1, [r4, #4]
 80178ca:	7263      	strb	r3, [r4, #9]
 80178cc:	60e0      	str	r0, [r4, #12]
 80178ce:	8222      	strh	r2, [r4, #16]
 80178d0:	8265      	strh	r5, [r4, #18]
 80178d2:	82a5      	strh	r5, [r4, #20]
 80178d4:	82e5      	strh	r5, [r4, #22]
 80178d6:	8325      	strh	r5, [r4, #24]
 80178d8:	8365      	strh	r5, [r4, #26]
 80178da:	83a5      	strh	r5, [r4, #28]
 80178dc:	77a5      	strb	r5, [r4, #30]
 80178de:	6803      	ldr	r3, [r0, #0]
 80178e0:	695b      	ldr	r3, [r3, #20]
 80178e2:	4798      	blx	r3
 80178e4:	4606      	mov	r6, r0
 80178e6:	b1f8      	cbz	r0, 8017928 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80178e8:	68e0      	ldr	r0, [r4, #12]
 80178ea:	4631      	mov	r1, r6
 80178ec:	6803      	ldr	r3, [r0, #0]
 80178ee:	68db      	ldr	r3, [r3, #12]
 80178f0:	4798      	blx	r3
 80178f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80178f6:	4605      	mov	r5, r0
 80178f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80178fc:	7a83      	ldrb	r3, [r0, #10]
 80178fe:	4313      	orrs	r3, r2
 8017900:	83a3      	strh	r3, [r4, #28]
 8017902:	7a63      	ldrb	r3, [r4, #9]
 8017904:	2b04      	cmp	r3, #4
 8017906:	d10f      	bne.n	8017928 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017908:	68e0      	ldr	r0, [r4, #12]
 801790a:	462a      	mov	r2, r5
 801790c:	4631      	mov	r1, r6
 801790e:	6803      	ldr	r3, [r0, #0]
 8017910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017912:	4798      	blx	r3
 8017914:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017918:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801791c:	7aab      	ldrb	r3, [r5, #10]
 801791e:	4313      	orrs	r3, r2
 8017920:	4418      	add	r0, r3
 8017922:	8ba3      	ldrh	r3, [r4, #28]
 8017924:	4418      	add	r0, r3
 8017926:	83a0      	strh	r0, [r4, #28]
 8017928:	4620      	mov	r0, r4
 801792a:	bd70      	pop	{r4, r5, r6, pc}

0801792c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017930:	2400      	movs	r4, #0
 8017932:	b085      	sub	sp, #20
 8017934:	4681      	mov	r9, r0
 8017936:	460f      	mov	r7, r1
 8017938:	4692      	mov	sl, r2
 801793a:	469b      	mov	fp, r3
 801793c:	46a0      	mov	r8, r4
 801793e:	4626      	mov	r6, r4
 8017940:	4554      	cmp	r4, sl
 8017942:	da21      	bge.n	8017988 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017944:	2300      	movs	r3, #0
 8017946:	463a      	mov	r2, r7
 8017948:	4659      	mov	r1, fp
 801794a:	4648      	mov	r0, r9
 801794c:	9303      	str	r3, [sp, #12]
 801794e:	ab03      	add	r3, sp, #12
 8017950:	f002 fb52 	bl	8019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017954:	4605      	mov	r5, r0
 8017956:	b1b8      	cbz	r0, 8017988 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017958:	280a      	cmp	r0, #10
 801795a:	d015      	beq.n	8017988 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801795c:	9a03      	ldr	r2, [sp, #12]
 801795e:	b182      	cbz	r2, 8017982 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8017960:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8017964:	4641      	mov	r1, r8
 8017966:	7a93      	ldrb	r3, [r2, #10]
 8017968:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801796c:	8895      	ldrh	r5, [r2, #4]
 801796e:	4303      	orrs	r3, r0
 8017970:	4638      	mov	r0, r7
 8017972:	9301      	str	r3, [sp, #4]
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017978:	4798      	blx	r3
 801797a:	9b01      	ldr	r3, [sp, #4]
 801797c:	4418      	add	r0, r3
 801797e:	4406      	add	r6, r0
 8017980:	b2b6      	uxth	r6, r6
 8017982:	3401      	adds	r4, #1
 8017984:	46a8      	mov	r8, r5
 8017986:	e7db      	b.n	8017940 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8017988:	4630      	mov	r0, r6
 801798a:	b005      	add	sp, #20
 801798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017990 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017990:	2a02      	cmp	r2, #2
 8017992:	b530      	push	{r4, r5, lr}
 8017994:	d011      	beq.n	80179ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017996:	2a03      	cmp	r2, #3
 8017998:	d01c      	beq.n	80179d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801799a:	2a01      	cmp	r2, #1
 801799c:	d10c      	bne.n	80179b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801799e:	888b      	ldrh	r3, [r1, #4]
 80179a0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80179a4:	8801      	ldrh	r1, [r0, #0]
 80179a6:	1a9b      	subs	r3, r3, r2
 80179a8:	8844      	ldrh	r4, [r0, #2]
 80179aa:	1a5b      	subs	r3, r3, r1
 80179ac:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80179b0:	8004      	strh	r4, [r0, #0]
 80179b2:	8043      	strh	r3, [r0, #2]
 80179b4:	8081      	strh	r1, [r0, #4]
 80179b6:	80c2      	strh	r2, [r0, #6]
 80179b8:	bd30      	pop	{r4, r5, pc}
 80179ba:	88cb      	ldrh	r3, [r1, #6]
 80179bc:	88c2      	ldrh	r2, [r0, #6]
 80179be:	1a9b      	subs	r3, r3, r2
 80179c0:	8842      	ldrh	r2, [r0, #2]
 80179c2:	1a9b      	subs	r3, r3, r2
 80179c4:	888a      	ldrh	r2, [r1, #4]
 80179c6:	8881      	ldrh	r1, [r0, #4]
 80179c8:	8043      	strh	r3, [r0, #2]
 80179ca:	1a52      	subs	r2, r2, r1
 80179cc:	8801      	ldrh	r1, [r0, #0]
 80179ce:	1a52      	subs	r2, r2, r1
 80179d0:	8002      	strh	r2, [r0, #0]
 80179d2:	e7f1      	b.n	80179b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80179d4:	88cb      	ldrh	r3, [r1, #6]
 80179d6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80179da:	8841      	ldrh	r1, [r0, #2]
 80179dc:	1a9b      	subs	r3, r3, r2
 80179de:	f9b0 5000 	ldrsh.w	r5, [r0]
 80179e2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80179e6:	1a5b      	subs	r3, r3, r1
 80179e8:	8045      	strh	r5, [r0, #2]
 80179ea:	8082      	strh	r2, [r0, #4]
 80179ec:	8003      	strh	r3, [r0, #0]
 80179ee:	80c4      	strh	r4, [r0, #6]
 80179f0:	e7e2      	b.n	80179b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

080179f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 80179f4:	b570      	push	{r4, r5, r6, lr}
 80179f6:	b086      	sub	sp, #24
 80179f8:	ac02      	add	r4, sp, #8
 80179fa:	e884 0006 	stmia.w	r4, {r1, r2}
 80179fe:	461a      	mov	r2, r3
 8017a00:	ab0c      	add	r3, sp, #48	; 0x30
 8017a02:	9305      	str	r3, [sp, #20]
 8017a04:	4b0a      	ldr	r3, [pc, #40]	; (8017a30 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8017a06:	685d      	ldr	r5, [r3, #4]
 8017a08:	1069      	asrs	r1, r5, #1
 8017a0a:	07ed      	lsls	r5, r5, #31
 8017a0c:	eb00 0601 	add.w	r6, r0, r1
 8017a10:	bf46      	itte	mi
 8017a12:	681b      	ldrmi	r3, [r3, #0]
 8017a14:	5841      	ldrmi	r1, [r0, r1]
 8017a16:	681d      	ldrpl	r5, [r3, #0]
 8017a18:	4630      	mov	r0, r6
 8017a1a:	bf48      	it	mi
 8017a1c:	58cd      	ldrmi	r5, [r1, r3]
 8017a1e:	4621      	mov	r1, r4
 8017a20:	9b05      	ldr	r3, [sp, #20]
 8017a22:	9301      	str	r3, [sp, #4]
 8017a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a26:	9300      	str	r3, [sp, #0]
 8017a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a2a:	47a8      	blx	r5
 8017a2c:	b006      	add	sp, #24
 8017a2e:	bd70      	pop	{r4, r5, r6, pc}
 8017a30:	20000030 	.word	0x20000030

08017a34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a38:	b09d      	sub	sp, #116	; 0x74
 8017a3a:	9114      	str	r1, [sp, #80]	; 0x50
 8017a3c:	9315      	str	r3, [sp, #84]	; 0x54
 8017a3e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8017a40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017a42:	8809      	ldrh	r1, [r1, #0]
 8017a44:	889b      	ldrh	r3, [r3, #4]
 8017a46:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8017a48:	440b      	add	r3, r1
 8017a4a:	9210      	str	r2, [sp, #64]	; 0x40
 8017a4c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8017a50:	b21b      	sxth	r3, r3
 8017a52:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a54:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8017a58:	930e      	str	r3, [sp, #56]	; 0x38
 8017a5a:	6833      	ldr	r3, [r6, #0]
 8017a5c:	7a59      	ldrb	r1, [r3, #9]
 8017a5e:	7a1b      	ldrb	r3, [r3, #8]
 8017a60:	9113      	str	r1, [sp, #76]	; 0x4c
 8017a62:	9312      	str	r3, [sp, #72]	; 0x48
 8017a64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017a66:	f9b3 4000 	ldrsh.w	r4, [r3]
 8017a6a:	2a00      	cmp	r2, #0
 8017a6c:	d059      	beq.n	8017b22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8017a6e:	7c33      	ldrb	r3, [r6, #16]
 8017a70:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017a72:	2b04      	cmp	r3, #4
 8017a74:	bf14      	ite	ne
 8017a76:	2301      	movne	r3, #1
 8017a78:	2302      	moveq	r3, #2
 8017a7a:	4413      	add	r3, r2
 8017a7c:	f04f 0800 	mov.w	r8, #0
 8017a80:	930d      	str	r3, [sp, #52]	; 0x34
 8017a82:	4645      	mov	r5, r8
 8017a84:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8017a88:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8017a8c:	4293      	cmp	r3, r2
 8017a8e:	da75      	bge.n	8017b7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8017a90:	2300      	movs	r3, #0
 8017a92:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017a94:	6832      	ldr	r2, [r6, #0]
 8017a96:	931a      	str	r3, [sp, #104]	; 0x68
 8017a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a9a:	428b      	cmp	r3, r1
 8017a9c:	db43      	blt.n	8017b26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8017a9e:	6813      	ldr	r3, [r2, #0]
 8017aa0:	4610      	mov	r0, r2
 8017aa2:	695b      	ldr	r3, [r3, #20]
 8017aa4:	4798      	blx	r3
 8017aa6:	4681      	mov	r9, r0
 8017aa8:	6830      	ldr	r0, [r6, #0]
 8017aaa:	aa1b      	add	r2, sp, #108	; 0x6c
 8017aac:	4649      	mov	r1, r9
 8017aae:	6803      	ldr	r3, [r0, #0]
 8017ab0:	689f      	ldr	r7, [r3, #8]
 8017ab2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8017ab6:	47b8      	blx	r7
 8017ab8:	901a      	str	r0, [sp, #104]	; 0x68
 8017aba:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8017abe:	45d1      	cmp	r9, sl
 8017ac0:	d045      	beq.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017ac2:	f242 070b 	movw	r7, #8203	; 0x200b
 8017ac6:	45b9      	cmp	r9, r7
 8017ac8:	d041      	beq.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017aca:	f1b9 0f00 	cmp.w	r9, #0
 8017ace:	f000 80ee 	beq.w	8017cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017ad2:	f1b9 0f0a 	cmp.w	r9, #10
 8017ad6:	d057      	beq.n	8017b88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017ad8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017ada:	b383      	cbz	r3, 8017b3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8017adc:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8017ae0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017ae2:	2a00      	cmp	r2, #0
 8017ae4:	f000 80d2 	beq.w	8017c8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8017ae8:	f1bb 0f00 	cmp.w	fp, #0
 8017aec:	d100      	bne.n	8017af0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8017aee:	4444      	add	r4, r8
 8017af0:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8017af4:	f1bb 0f01 	cmp.w	fp, #1
 8017af8:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8017afc:	f892 800a 	ldrb.w	r8, [r2, #10]
 8017b00:	ea48 0803 	orr.w	r8, r8, r3
 8017b04:	d128      	bne.n	8017b58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8017b06:	eba4 0408 	sub.w	r4, r4, r8
 8017b0a:	2d00      	cmp	r5, #0
 8017b0c:	d143      	bne.n	8017b96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8017b0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b10:	eb08 0304 	add.w	r3, r8, r4
 8017b14:	4413      	add	r3, r2
 8017b16:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017b18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	da44      	bge.n	8017baa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017b20:	e02b      	b.n	8017b7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8017b22:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017b24:	e7aa      	b.n	8017a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8017b26:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8017b2a:	4659      	mov	r1, fp
 8017b2c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017b2e:	9301      	str	r3, [sp, #4]
 8017b30:	ab1b      	add	r3, sp, #108	; 0x6c
 8017b32:	9300      	str	r3, [sp, #0]
 8017b34:	ab1a      	add	r3, sp, #104	; 0x68
 8017b36:	f002 fa93 	bl	801a060 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017b3a:	4681      	mov	r9, r0
 8017b3c:	e7bd      	b.n	8017aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8017b3e:	6830      	ldr	r0, [r6, #0]
 8017b40:	6803      	ldr	r3, [r0, #0]
 8017b42:	691b      	ldr	r3, [r3, #16]
 8017b44:	4798      	blx	r3
 8017b46:	4550      	cmp	r0, sl
 8017b48:	d001      	beq.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017b4a:	42b8      	cmp	r0, r7
 8017b4c:	d1c8      	bne.n	8017ae0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8017b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b50:	464d      	mov	r5, r9
 8017b52:	3301      	adds	r3, #1
 8017b54:	930c      	str	r3, [sp, #48]	; 0x30
 8017b56:	e797      	b.n	8017a88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8017b58:	2d00      	cmp	r5, #0
 8017b5a:	f000 80aa 	beq.w	8017cb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8017b5e:	f1bb 0f00 	cmp.w	fp, #0
 8017b62:	d118      	bne.n	8017b96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8017b64:	6830      	ldr	r0, [r6, #0]
 8017b66:	4629      	mov	r1, r5
 8017b68:	6803      	ldr	r3, [r0, #0]
 8017b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b6c:	4798      	blx	r3
 8017b6e:	4404      	add	r4, r0
 8017b70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b74:	1ae3      	subs	r3, r4, r3
 8017b76:	4293      	cmp	r3, r2
 8017b78:	dd17      	ble.n	8017baa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017b7a:	464d      	mov	r5, r9
 8017b7c:	2d00      	cmp	r5, #0
 8017b7e:	f000 8096 	beq.w	8017cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017b82:	2d0a      	cmp	r5, #10
 8017b84:	f040 8084 	bne.w	8017c90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8017b88:	250a      	movs	r5, #10
 8017b8a:	fab5 f085 	clz	r0, r5
 8017b8e:	0940      	lsrs	r0, r0, #5
 8017b90:	b01d      	add	sp, #116	; 0x74
 8017b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b96:	6830      	ldr	r0, [r6, #0]
 8017b98:	4629      	mov	r1, r5
 8017b9a:	6803      	ldr	r3, [r0, #0]
 8017b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b9e:	4798      	blx	r3
 8017ba0:	f1bb 0f01 	cmp.w	fp, #1
 8017ba4:	eba4 0400 	sub.w	r4, r4, r0
 8017ba8:	d0b1      	beq.n	8017b0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017baa:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017bac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017bae:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017bb2:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017bb6:	7b43      	ldrb	r3, [r0, #13]
 8017bb8:	4421      	add	r1, r4
 8017bba:	015b      	lsls	r3, r3, #5
 8017bbc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017bc0:	7983      	ldrb	r3, [r0, #6]
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	440b      	add	r3, r1
 8017bc6:	42ab      	cmp	r3, r5
 8017bc8:	dbc1      	blt.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bcc:	4299      	cmp	r1, r3
 8017bce:	dabe      	bge.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017bd0:	6830      	ldr	r0, [r6, #0]
 8017bd2:	42a5      	cmp	r5, r4
 8017bd4:	6803      	ldr	r3, [r0, #0]
 8017bd6:	bfcc      	ite	gt
 8017bd8:	1b2d      	subgt	r5, r5, r4
 8017bda:	2500      	movle	r5, #0
 8017bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bde:	bfc8      	it	gt
 8017be0:	b2ad      	uxthgt	r5, r5
 8017be2:	4798      	blx	r3
 8017be4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017be6:	4935      	ldr	r1, [pc, #212]	; (8017cbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8017be8:	7b5a      	ldrb	r2, [r3, #13]
 8017bea:	f893 e008 	ldrb.w	lr, [r3, #8]
 8017bee:	f012 0f40 	tst.w	r2, #64	; 0x40
 8017bf2:	bf18      	it	ne
 8017bf4:	468c      	movne	ip, r1
 8017bf6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017bf8:	bf08      	it	eq
 8017bfa:	f04f 0c00 	moveq.w	ip, #0
 8017bfe:	4408      	add	r0, r1
 8017c00:	00d1      	lsls	r1, r2, #3
 8017c02:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017c06:	ea41 070e 	orr.w	r7, r1, lr
 8017c0a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8017c0c:	ea4c 0707 	orr.w	r7, ip, r7
 8017c10:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017c14:	1bc7      	subs	r7, r0, r7
 8017c16:	b2bf      	uxth	r7, r7
 8017c18:	fa0f fa87 	sxth.w	sl, r7
 8017c1c:	4551      	cmp	r1, sl
 8017c1e:	dd33      	ble.n	8017c88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8017c20:	0112      	lsls	r2, r2, #4
 8017c22:	79d8      	ldrb	r0, [r3, #7]
 8017c24:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017c28:	4302      	orrs	r2, r0
 8017c2a:	4492      	add	sl, r2
 8017c2c:	4551      	cmp	r1, sl
 8017c2e:	dc8e      	bgt.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017c30:	1bcf      	subs	r7, r1, r7
 8017c32:	468a      	mov	sl, r1
 8017c34:	b2bf      	uxth	r7, r7
 8017c36:	9317      	str	r3, [sp, #92]	; 0x5c
 8017c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c3a:	6830      	ldr	r0, [r6, #0]
 8017c3c:	681a      	ldr	r2, [r3, #0]
 8017c3e:	6801      	ldr	r1, [r0, #0]
 8017c40:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8017c42:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017c44:	9311      	str	r3, [sp, #68]	; 0x44
 8017c46:	9216      	str	r2, [sp, #88]	; 0x58
 8017c48:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8017c4a:	4788      	blx	r1
 8017c4c:	79b1      	ldrb	r1, [r6, #6]
 8017c4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017c50:	910b      	str	r1, [sp, #44]	; 0x2c
 8017c52:	7bb1      	ldrb	r1, [r6, #14]
 8017c54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017c56:	910a      	str	r1, [sp, #40]	; 0x28
 8017c58:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8017c5c:	9109      	str	r1, [sp, #36]	; 0x24
 8017c5e:	68b1      	ldr	r1, [r6, #8]
 8017c60:	9305      	str	r3, [sp, #20]
 8017c62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017c64:	9206      	str	r2, [sp, #24]
 8017c66:	e9cd a501 	strd	sl, r5, [sp, #4]
 8017c6a:	4425      	add	r5, r4
 8017c6c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8017c70:	b22d      	sxth	r5, r5
 8017c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c74:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017c78:	9500      	str	r5, [sp, #0]
 8017c7a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017c7c:	681a      	ldr	r2, [r3, #0]
 8017c7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017c80:	685b      	ldr	r3, [r3, #4]
 8017c82:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017c84:	47a8      	blx	r5
 8017c86:	e762      	b.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017c88:	2700      	movs	r7, #0
 8017c8a:	e7d4      	b.n	8017c36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8017c8c:	4690      	mov	r8, r2
 8017c8e:	e75e      	b.n	8017b4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017c90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017c92:	3401      	adds	r4, #1
 8017c94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017c96:	429c      	cmp	r4, r3
 8017c98:	f6bf af77 	bge.w	8017b8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8017c9c:	4659      	mov	r1, fp
 8017c9e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017ca0:	f002 f96a 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017ca4:	4605      	mov	r5, r0
 8017ca6:	b110      	cbz	r0, 8017cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017ca8:	280a      	cmp	r0, #10
 8017caa:	d1f2      	bne.n	8017c92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8017cac:	e76c      	b.n	8017b88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017cae:	2500      	movs	r5, #0
 8017cb0:	e76b      	b.n	8017b8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8017cb2:	f1bb 0f00 	cmp.w	fp, #0
 8017cb6:	f43f af5b 	beq.w	8017b70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8017cba:	e776      	b.n	8017baa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017cbc:	fffffe00 	.word	0xfffffe00

08017cc0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017cc0:	b530      	push	{r4, r5, lr}
 8017cc2:	8a44      	ldrh	r4, [r0, #18]
 8017cc4:	8ac5      	ldrh	r5, [r0, #22]
 8017cc6:	82c3      	strh	r3, [r0, #22]
 8017cc8:	442c      	add	r4, r5
 8017cca:	1ae4      	subs	r4, r4, r3
 8017ccc:	8b03      	ldrh	r3, [r0, #24]
 8017cce:	8244      	strh	r4, [r0, #18]
 8017cd0:	8a84      	ldrh	r4, [r0, #20]
 8017cd2:	4422      	add	r2, r4
 8017cd4:	440c      	add	r4, r1
 8017cd6:	1a59      	subs	r1, r3, r1
 8017cd8:	8342      	strh	r2, [r0, #26]
 8017cda:	8284      	strh	r4, [r0, #20]
 8017cdc:	8301      	strh	r1, [r0, #24]
 8017cde:	bd30      	pop	{r4, r5, pc}

08017ce0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce4:	7a45      	ldrb	r5, [r0, #9]
 8017ce6:	b085      	sub	sp, #20
 8017ce8:	4604      	mov	r4, r0
 8017cea:	4689      	mov	r9, r1
 8017cec:	1eeb      	subs	r3, r5, #3
 8017cee:	b2db      	uxtb	r3, r3
 8017cf0:	b329      	cbz	r1, 8017d3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8017cf2:	2b01      	cmp	r3, #1
 8017cf4:	d921      	bls.n	8017d3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8017cf6:	1e69      	subs	r1, r5, #1
 8017cf8:	f1d1 0b00 	rsbs	fp, r1, #0
 8017cfc:	eb4b 0b01 	adc.w	fp, fp, r1
 8017d00:	1eaa      	subs	r2, r5, #2
 8017d02:	2500      	movs	r5, #0
 8017d04:	4253      	negs	r3, r2
 8017d06:	9500      	str	r5, [sp, #0]
 8017d08:	4153      	adcs	r3, r2
 8017d0a:	9301      	str	r3, [sp, #4]
 8017d0c:	2600      	movs	r6, #0
 8017d0e:	f242 080b 	movw	r8, #8203	; 0x200b
 8017d12:	8266      	strh	r6, [r4, #18]
 8017d14:	82a6      	strh	r6, [r4, #20]
 8017d16:	2300      	movs	r3, #0
 8017d18:	68e2      	ldr	r2, [r4, #12]
 8017d1a:	7a21      	ldrb	r1, [r4, #8]
 8017d1c:	9303      	str	r3, [sp, #12]
 8017d1e:	ab03      	add	r3, sp, #12
 8017d20:	6860      	ldr	r0, [r4, #4]
 8017d22:	8827      	ldrh	r7, [r4, #0]
 8017d24:	f002 f968 	bl	8019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d28:	8020      	strh	r0, [r4, #0]
 8017d2a:	b9b0      	cbnz	r0, 8017d5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8017d2c:	8b22      	ldrh	r2, [r4, #24]
 8017d2e:	2300      	movs	r3, #0
 8017d30:	4611      	mov	r1, r2
 8017d32:	4620      	mov	r0, r4
 8017d34:	f7ff ffc4 	bl	8017cc0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017d38:	e062      	b.n	8017e00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017d3a:	468b      	mov	fp, r1
 8017d3c:	e7e0      	b.n	8017d00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8017d3e:	2b01      	cmp	r3, #1
 8017d40:	f105 35ff 	add.w	r5, r5, #4294967295
 8017d44:	9101      	str	r1, [sp, #4]
 8017d46:	468b      	mov	fp, r1
 8017d48:	bf8c      	ite	hi
 8017d4a:	2300      	movhi	r3, #0
 8017d4c:	2301      	movls	r3, #1
 8017d4e:	2d01      	cmp	r5, #1
 8017d50:	9300      	str	r3, [sp, #0]
 8017d52:	bf8c      	ite	hi
 8017d54:	2500      	movhi	r5, #0
 8017d56:	2501      	movls	r5, #1
 8017d58:	e7d8      	b.n	8017d0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8017d5a:	8ae3      	ldrh	r3, [r4, #22]
 8017d5c:	280a      	cmp	r0, #10
 8017d5e:	f103 0301 	add.w	r3, r3, #1
 8017d62:	82e3      	strh	r3, [r4, #22]
 8017d64:	d0e2      	beq.n	8017d2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8017d66:	9a03      	ldr	r2, [sp, #12]
 8017d68:	b972      	cbnz	r2, 8017d88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8017d6a:	4540      	cmp	r0, r8
 8017d6c:	d1d3      	bne.n	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017d6e:	8823      	ldrh	r3, [r4, #0]
 8017d70:	8b21      	ldrh	r1, [r4, #24]
 8017d72:	2b20      	cmp	r3, #32
 8017d74:	d001      	beq.n	8017d7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8017d76:	4543      	cmp	r3, r8
 8017d78:	d11d      	bne.n	8017db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8017d7a:	2f20      	cmp	r7, #32
 8017d7c:	d002      	beq.n	8017d84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8017d7e:	4547      	cmp	r7, r8
 8017d80:	bf18      	it	ne
 8017d82:	460e      	movne	r6, r1
 8017d84:	2001      	movs	r0, #1
 8017d86:	e017      	b.n	8017db8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8017d88:	4540      	cmp	r0, r8
 8017d8a:	d012      	beq.n	8017db2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8017d8c:	8893      	ldrh	r3, [r2, #4]
 8017d8e:	4639      	mov	r1, r7
 8017d90:	8023      	strh	r3, [r4, #0]
 8017d92:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8017d96:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8017d9a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8017d9e:	ea4a 0a00 	orr.w	sl, sl, r0
 8017da2:	68e0      	ldr	r0, [r4, #12]
 8017da4:	6803      	ldr	r3, [r0, #0]
 8017da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017da8:	4798      	blx	r3
 8017daa:	eb0a 0200 	add.w	r2, sl, r0
 8017dae:	b292      	uxth	r2, r2
 8017db0:	e7dd      	b.n	8017d6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017db2:	2200      	movs	r2, #0
 8017db4:	e7db      	b.n	8017d6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017db6:	2000      	movs	r0, #0
 8017db8:	440a      	add	r2, r1
 8017dba:	8aa3      	ldrh	r3, [r4, #20]
 8017dbc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017dc0:	b292      	uxth	r2, r2
 8017dc2:	8322      	strh	r2, [r4, #24]
 8017dc4:	4413      	add	r3, r2
 8017dc6:	f1b9 0f00 	cmp.w	r9, #0
 8017dca:	d022      	beq.n	8017e12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8017dcc:	f1bb 0f00 	cmp.w	fp, #0
 8017dd0:	d102      	bne.n	8017dd8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8017dd2:	9901      	ldr	r1, [sp, #4]
 8017dd4:	b149      	cbz	r1, 8017dea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017dd6:	b140      	cbz	r0, 8017dea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017dd8:	8ba1      	ldrh	r1, [r4, #28]
 8017dda:	4419      	add	r1, r3
 8017ddc:	458c      	cmp	ip, r1
 8017dde:	da12      	bge.n	8017e06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017de0:	8a61      	ldrh	r1, [r4, #18]
 8017de2:	b181      	cbz	r1, 8017e06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017de4:	4563      	cmp	r3, ip
 8017de6:	dd96      	ble.n	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017de8:	e004      	b.n	8017df4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8017dea:	4563      	cmp	r3, ip
 8017dec:	dd93      	ble.n	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017dee:	8a63      	ldrh	r3, [r4, #18]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d090      	beq.n	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017df4:	2301      	movs	r3, #1
 8017df6:	8ba2      	ldrh	r2, [r4, #28]
 8017df8:	77a3      	strb	r3, [r4, #30]
 8017dfa:	8b63      	ldrh	r3, [r4, #26]
 8017dfc:	4413      	add	r3, r2
 8017dfe:	8363      	strh	r3, [r4, #26]
 8017e00:	b005      	add	sp, #20
 8017e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e06:	2300      	movs	r3, #0
 8017e08:	4611      	mov	r1, r2
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7ff ff58 	bl	8017cc0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017e10:	e781      	b.n	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e12:	4563      	cmp	r3, ip
 8017e14:	dd16      	ble.n	8017e44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8017e16:	9b00      	ldr	r3, [sp, #0]
 8017e18:	b113      	cbz	r3, 8017e20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	460a      	mov	r2, r1
 8017e1e:	e787      	b.n	8017d30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8017e20:	2d00      	cmp	r5, #0
 8017e22:	f43f af78 	beq.w	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e26:	2800      	cmp	r0, #0
 8017e28:	f47f af75 	bne.w	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e2c:	2f20      	cmp	r7, #32
 8017e2e:	d001      	beq.n	8017e34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8017e30:	4547      	cmp	r7, r8
 8017e32:	d102      	bne.n	8017e3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8017e34:	2301      	movs	r3, #1
 8017e36:	4632      	mov	r2, r6
 8017e38:	e77b      	b.n	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8017e3a:	8a63      	ldrh	r3, [r4, #18]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f43f af6a 	beq.w	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e42:	e7dd      	b.n	8017e00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017e44:	2800      	cmp	r0, #0
 8017e46:	f47f af66 	bne.w	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e4a:	2f20      	cmp	r7, #32
 8017e4c:	d002      	beq.n	8017e54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8017e4e:	4547      	cmp	r7, r8
 8017e50:	f47f af61 	bne.w	8017d16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e54:	2301      	movs	r3, #1
 8017e56:	4632      	mov	r2, r6
 8017e58:	e7d7      	b.n	8017e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08017e5a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8017e5a:	b570      	push	{r4, r5, r6, lr}
 8017e5c:	4606      	mov	r6, r0
 8017e5e:	b08a      	sub	sp, #40	; 0x28
 8017e60:	4615      	mov	r5, r2
 8017e62:	b191      	cbz	r1, 8017e8a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8017e64:	2401      	movs	r4, #1
 8017e66:	e9cd 3100 	strd	r3, r1, [sp]
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	4601      	mov	r1, r0
 8017e6e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8017e72:	a802      	add	r0, sp, #8
 8017e74:	f7ff fd20 	bl	80178b8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017e78:	2100      	movs	r1, #0
 8017e7a:	a802      	add	r0, sp, #8
 8017e7c:	f7ff ff30 	bl	8017ce0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017e80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017e84:	b173      	cbz	r3, 8017ea4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017e86:	3401      	adds	r4, #1
 8017e88:	e7f6      	b.n	8017e78 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8017e8a:	2401      	movs	r4, #1
 8017e8c:	4611      	mov	r1, r2
 8017e8e:	f002 f873 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017e92:	280a      	cmp	r0, #10
 8017e94:	4629      	mov	r1, r5
 8017e96:	4630      	mov	r0, r6
 8017e98:	bf08      	it	eq
 8017e9a:	3401      	addeq	r4, #1
 8017e9c:	f002 f86c 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d1f6      	bne.n	8017e92 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8017ea4:	b2a0      	uxth	r0, r4
 8017ea6:	b00a      	add	sp, #40	; 0x28
 8017ea8:	bd70      	pop	{r4, r5, r6, pc}

08017eaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eae:	b0db      	sub	sp, #364	; 0x16c
 8017eb0:	468a      	mov	sl, r1
 8017eb2:	461c      	mov	r4, r3
 8017eb4:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8017eb8:	9009      	str	r0, [sp, #36]	; 0x24
 8017eba:	f1bb 0f00 	cmp.w	fp, #0
 8017ebe:	f000 80c7 	beq.w	8018050 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	f000 80c3 	beq.w	8018050 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017eca:	7ba3      	ldrb	r3, [r4, #14]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	f000 80bf 	beq.w	8018050 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017ed2:	af0c      	add	r7, sp, #48	; 0x30
 8017ed4:	6810      	ldr	r0, [r2, #0]
 8017ed6:	6851      	ldr	r1, [r2, #4]
 8017ed8:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8017edc:	463b      	mov	r3, r7
 8017ede:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8017ee2:	c303      	stmia	r3!, {r0, r1}
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8017eea:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017eee:	4638      	mov	r0, r7
 8017ef0:	910e      	str	r1, [sp, #56]	; 0x38
 8017ef2:	a90e      	add	r1, sp, #56	; 0x38
 8017ef4:	79a2      	ldrb	r2, [r4, #6]
 8017ef6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017efa:	f7ff fd49 	bl	8017990 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017efe:	a90e      	add	r1, sp, #56	; 0x38
 8017f00:	79a2      	ldrb	r2, [r4, #6]
 8017f02:	4608      	mov	r0, r1
 8017f04:	f7ff fd44 	bl	8017990 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017f08:	4648      	mov	r0, r9
 8017f0a:	f001 fef3 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8017f0e:	6820      	ldr	r0, [r4, #0]
 8017f10:	6803      	ldr	r3, [r0, #0]
 8017f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f14:	4798      	blx	r3
 8017f16:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017f18:	4603      	mov	r3, r0
 8017f1a:	4659      	mov	r1, fp
 8017f1c:	4648      	mov	r0, r9
 8017f1e:	f001 ff06 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017f22:	a82e      	add	r0, sp, #184	; 0xb8
 8017f24:	f001 fee6 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8017f28:	f894 8004 	ldrb.w	r8, [r4, #4]
 8017f2c:	f1b8 0f00 	cmp.w	r8, #0
 8017f30:	d009      	beq.n	8017f46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8017f32:	6820      	ldr	r0, [r4, #0]
 8017f34:	6803      	ldr	r3, [r0, #0]
 8017f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f38:	4798      	blx	r3
 8017f3a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	4659      	mov	r1, fp
 8017f40:	a82e      	add	r0, sp, #184	; 0xb8
 8017f42:	f001 fef4 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017f46:	6820      	ldr	r0, [r4, #0]
 8017f48:	6803      	ldr	r3, [r0, #0]
 8017f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f4c:	4798      	blx	r3
 8017f4e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017f52:	182e      	adds	r6, r5, r0
 8017f54:	2e00      	cmp	r6, #0
 8017f56:	dd45      	ble.n	8017fe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8017f58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017f5c:	4283      	cmp	r3, r0
 8017f5e:	db41      	blt.n	8017fe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8017f60:	441d      	add	r5, r3
 8017f62:	fb95 f5f6 	sdiv	r5, r5, r6
 8017f66:	a844      	add	r0, sp, #272	; 0x110
 8017f68:	f001 fec4 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8017f6c:	7c23      	ldrb	r3, [r4, #16]
 8017f6e:	b14b      	cbz	r3, 8017f84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8017f70:	6820      	ldr	r0, [r4, #0]
 8017f72:	6803      	ldr	r3, [r0, #0]
 8017f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f76:	4798      	blx	r3
 8017f78:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	4659      	mov	r1, fp
 8017f7e:	a844      	add	r0, sp, #272	; 0x110
 8017f80:	f001 fed5 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017f84:	7c21      	ldrb	r1, [r4, #16]
 8017f86:	a810      	add	r0, sp, #64	; 0x40
 8017f88:	7963      	ldrb	r3, [r4, #5]
 8017f8a:	9101      	str	r1, [sp, #4]
 8017f8c:	6821      	ldr	r1, [r4, #0]
 8017f8e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017f92:	9100      	str	r1, [sp, #0]
 8017f94:	a944      	add	r1, sp, #272	; 0x110
 8017f96:	f7ff fc8f 	bl	80178b8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017f9a:	7c23      	ldrb	r3, [r4, #16]
 8017f9c:	bb23      	cbnz	r3, 8017fe8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8017f9e:	fa1f fb86 	uxth.w	fp, r6
 8017fa2:	2d00      	cmp	r5, #0
 8017fa4:	dd57      	ble.n	8018056 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8017fa6:	7961      	ldrb	r1, [r4, #5]
 8017fa8:	4648      	mov	r0, r9
 8017faa:	f001 ffe5 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	f1b8 0f00 	cmp.w	r8, #0
 8017fb4:	d005      	beq.n	8017fc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8017fb6:	9008      	str	r0, [sp, #32]
 8017fb8:	a82e      	add	r0, sp, #184	; 0xb8
 8017fba:	7961      	ldrb	r1, [r4, #5]
 8017fbc:	f001 ffdc 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017fc0:	9b08      	ldr	r3, [sp, #32]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d044      	beq.n	8018050 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017fc6:	2b0a      	cmp	r3, #10
 8017fc8:	d1eb      	bne.n	8017fa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8017fca:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017fce:	3d01      	subs	r5, #1
 8017fd0:	445b      	add	r3, fp
 8017fd2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017fd6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017fda:	eba3 030b 	sub.w	r3, r3, fp
 8017fde:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017fe2:	e7de      	b.n	8017fa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8017fe4:	2500      	movs	r5, #0
 8017fe6:	e7be      	b.n	8017f66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8017fe8:	0073      	lsls	r3, r6, #1
 8017fea:	9308      	str	r3, [sp, #32]
 8017fec:	2d00      	cmp	r5, #0
 8017fee:	dd32      	ble.n	8018056 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8017ff0:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8017ff4:	a810      	add	r0, sp, #64	; 0x40
 8017ff6:	9b08      	ldr	r3, [sp, #32]
 8017ff8:	428b      	cmp	r3, r1
 8017ffa:	bfd4      	ite	le
 8017ffc:	2100      	movle	r1, #0
 8017ffe:	2101      	movgt	r1, #1
 8018000:	f7ff fe6e 	bl	8017ce0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018004:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8018008:	f10b 33ff 	add.w	r3, fp, #4294967295
 801800c:	fa1f fb83 	uxth.w	fp, r3
 8018010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018014:	459b      	cmp	fp, r3
 8018016:	d00b      	beq.n	8018030 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8018018:	7961      	ldrb	r1, [r4, #5]
 801801a:	4648      	mov	r0, r9
 801801c:	f001 ffac 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018020:	f1b8 0f00 	cmp.w	r8, #0
 8018024:	d0f0      	beq.n	8018008 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018026:	7961      	ldrb	r1, [r4, #5]
 8018028:	a82e      	add	r0, sp, #184	; 0xb8
 801802a:	f001 ffa5 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801802e:	e7eb      	b.n	8018008 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018030:	b2b3      	uxth	r3, r6
 8018032:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018036:	3d01      	subs	r5, #1
 8018038:	441a      	add	r2, r3
 801803a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801803e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018042:	1ad3      	subs	r3, r2, r3
 8018044:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018048:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801804c:	2b00      	cmp	r3, #0
 801804e:	d1cd      	bne.n	8017fec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018050:	b05b      	add	sp, #364	; 0x16c
 8018052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018056:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801805a:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801805e:	7c23      	ldrb	r3, [r4, #16]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d05f      	beq.n	8018124 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8018064:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018068:	a810      	add	r0, sp, #64	; 0x40
 801806a:	458b      	cmp	fp, r1
 801806c:	bfd4      	ite	le
 801806e:	2100      	movle	r1, #0
 8018070:	2101      	movgt	r1, #1
 8018072:	f7ff fe35 	bl	8017ce0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018076:	f1b8 0f00 	cmp.w	r8, #0
 801807a:	d04c      	beq.n	8018116 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801807c:	7c23      	ldrb	r3, [r4, #16]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d053      	beq.n	801812a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8018082:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018086:	7922      	ldrb	r2, [r4, #4]
 8018088:	2a01      	cmp	r2, #1
 801808a:	d13c      	bne.n	8018106 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801808c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018090:	1ac0      	subs	r0, r0, r3
 8018092:	2302      	movs	r3, #2
 8018094:	fb90 f0f3 	sdiv	r0, r0, r3
 8018098:	b200      	sxth	r0, r0
 801809a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801809e:	4418      	add	r0, r3
 80180a0:	7c23      	ldrb	r3, [r4, #16]
 80180a2:	8028      	strh	r0, [r5, #0]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d03a      	beq.n	801811e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80180a8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80180ac:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80180b0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80180b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80180b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80180ba:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80180be:	2200      	movs	r2, #0
 80180c0:	2100      	movs	r1, #0
 80180c2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80180c6:	e9cd 5700 	strd	r5, r7, [sp]
 80180ca:	4652      	mov	r2, sl
 80180cc:	f7ff fcb2 	bl	8017a34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80180d0:	2800      	cmp	r0, #0
 80180d2:	d1bd      	bne.n	8018050 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80180d4:	b2b2      	uxth	r2, r6
 80180d6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80180da:	4611      	mov	r1, r2
 80180dc:	4413      	add	r3, r2
 80180de:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80180e2:	b21b      	sxth	r3, r3
 80180e4:	1a52      	subs	r2, r2, r1
 80180e6:	7c21      	ldrb	r1, [r4, #16]
 80180e8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80180ec:	b212      	sxth	r2, r2
 80180ee:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80180f2:	b109      	cbz	r1, 80180f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80180f4:	42b2      	cmp	r2, r6
 80180f6:	dbab      	blt.n	8018050 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80180f8:	887a      	ldrh	r2, [r7, #2]
 80180fa:	88f9      	ldrh	r1, [r7, #6]
 80180fc:	440a      	add	r2, r1
 80180fe:	b212      	sxth	r2, r2
 8018100:	4293      	cmp	r3, r2
 8018102:	ddac      	ble.n	801805e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8018104:	e7a4      	b.n	8018050 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018106:	2a02      	cmp	r2, #2
 8018108:	d107      	bne.n	801811a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801810a:	7be2      	ldrb	r2, [r4, #15]
 801810c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8018110:	1a80      	subs	r0, r0, r2
 8018112:	1ac0      	subs	r0, r0, r3
 8018114:	e7c0      	b.n	8018098 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8018116:	7be0      	ldrb	r0, [r4, #15]
 8018118:	e7bf      	b.n	801809a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801811a:	2000      	movs	r0, #0
 801811c:	e7bd      	b.n	801809a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801811e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018122:	e7c3      	b.n	80180ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8018124:	f1b8 0f00 	cmp.w	r8, #0
 8018128:	d0f5      	beq.n	8018116 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801812a:	2300      	movs	r3, #0
 801812c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018130:	6821      	ldr	r1, [r4, #0]
 8018132:	a82e      	add	r0, sp, #184	; 0xb8
 8018134:	f7ff fbfa 	bl	801792c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018138:	b203      	sxth	r3, r0
 801813a:	e7a4      	b.n	8018086 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801813c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801813c:	2b02      	cmp	r3, #2
 801813e:	b510      	push	{r4, lr}
 8018140:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018144:	d00b      	beq.n	801815e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018146:	2b03      	cmp	r3, #3
 8018148:	d00e      	beq.n	8018168 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801814a:	2b01      	cmp	r3, #1
 801814c:	d001      	beq.n	8018152 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801814e:	1860      	adds	r0, r4, r1
 8018150:	bd10      	pop	{r4, pc}
 8018152:	8880      	ldrh	r0, [r0, #4]
 8018154:	4420      	add	r0, r4
 8018156:	b200      	sxth	r0, r0
 8018158:	1a80      	subs	r0, r0, r2
 801815a:	3801      	subs	r0, #1
 801815c:	e7f8      	b.n	8018150 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801815e:	8880      	ldrh	r0, [r0, #4]
 8018160:	4420      	add	r0, r4
 8018162:	b200      	sxth	r0, r0
 8018164:	1a40      	subs	r0, r0, r1
 8018166:	e7f8      	b.n	801815a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018168:	18a0      	adds	r0, r4, r2
 801816a:	e7f1      	b.n	8018150 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801816c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801816c:	2b02      	cmp	r3, #2
 801816e:	b510      	push	{r4, lr}
 8018170:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018174:	d006      	beq.n	8018184 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018176:	2b03      	cmp	r3, #3
 8018178:	d00a      	beq.n	8018190 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801817a:	2b01      	cmp	r3, #1
 801817c:	bf14      	ite	ne
 801817e:	18a0      	addne	r0, r4, r2
 8018180:	1860      	addeq	r0, r4, r1
 8018182:	bd10      	pop	{r4, pc}
 8018184:	88c0      	ldrh	r0, [r0, #6]
 8018186:	4420      	add	r0, r4
 8018188:	b200      	sxth	r0, r0
 801818a:	1a80      	subs	r0, r0, r2
 801818c:	3801      	subs	r0, #1
 801818e:	e7f8      	b.n	8018182 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018190:	88c0      	ldrh	r0, [r0, #6]
 8018192:	4420      	add	r0, r4
 8018194:	b200      	sxth	r0, r0
 8018196:	1a40      	subs	r0, r0, r1
 8018198:	e7f8      	b.n	801818c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801819c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801819c:	4b01      	ldr	r3, [pc, #4]	; (80181a4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801819e:	2200      	movs	r2, #0
 80181a0:	601a      	str	r2, [r3, #0]
 80181a2:	4770      	bx	lr
 80181a4:	2000bc90 	.word	0x2000bc90

080181a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80181a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181aa:	1e05      	subs	r5, r0, #0
 80181ac:	f04f 0601 	mov.w	r6, #1
 80181b0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80181b4:	bfba      	itte	lt
 80181b6:	f04f 37ff 	movlt.w	r7, #4294967295
 80181ba:	426d      	neglt	r5, r5
 80181bc:	2701      	movge	r7, #1
 80181be:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80181c2:	f1be 0f00 	cmp.w	lr, #0
 80181c6:	bfbc      	itt	lt
 80181c8:	f1ce 0e00 	rsblt	lr, lr, #0
 80181cc:	427f      	neglt	r7, r7
 80181ce:	2c00      	cmp	r4, #0
 80181d0:	fa4e f001 	asr.w	r0, lr, r1
 80181d4:	fa06 f101 	lsl.w	r1, r6, r1
 80181d8:	bfbc      	itt	lt
 80181da:	4264      	neglt	r4, r4
 80181dc:	427f      	neglt	r7, r7
 80181de:	3901      	subs	r1, #1
 80181e0:	ea01 010e 	and.w	r1, r1, lr
 80181e4:	434d      	muls	r5, r1
 80181e6:	f8dc 1000 	ldr.w	r1, [ip]
 80181ea:	fb03 1300 	mla	r3, r3, r0, r1
 80181ee:	fb95 f1f4 	sdiv	r1, r5, r4
 80181f2:	fb04 5511 	mls	r5, r4, r1, r5
 80181f6:	441d      	add	r5, r3
 80181f8:	fb95 f3f4 	sdiv	r3, r5, r4
 80181fc:	4419      	add	r1, r3
 80181fe:	fb04 5413 	mls	r4, r4, r3, r5
 8018202:	fb02 1000 	mla	r0, r2, r0, r1
 8018206:	f8cc 4000 	str.w	r4, [ip]
 801820a:	4378      	muls	r0, r7
 801820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018210 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018214:	4c24      	ldr	r4, [pc, #144]	; (80182a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018216:	b086      	sub	sp, #24
 8018218:	4605      	mov	r5, r0
 801821a:	6807      	ldr	r7, [r0, #0]
 801821c:	69a3      	ldr	r3, [r4, #24]
 801821e:	b92b      	cbnz	r3, 801822c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018220:	6840      	ldr	r0, [r0, #4]
 8018222:	e9c5 7000 	strd	r7, r0, [r5]
 8018226:	b006      	add	sp, #24
 8018228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801822c:	f04f 0802 	mov.w	r8, #2
 8018230:	68a2      	ldr	r2, [r4, #8]
 8018232:	ae06      	add	r6, sp, #24
 8018234:	6820      	ldr	r0, [r4, #0]
 8018236:	fb93 f1f8 	sdiv	r1, r3, r8
 801823a:	440a      	add	r2, r1
 801823c:	69e1      	ldr	r1, [r4, #28]
 801823e:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018242:	9700      	str	r7, [sp, #0]
 8018244:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018246:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801824a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801824c:	f7ff ffac 	bl	80181a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018250:	69a3      	ldr	r3, [r4, #24]
 8018252:	4607      	mov	r7, r0
 8018254:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018256:	9301      	str	r3, [sp, #4]
 8018258:	686b      	ldr	r3, [r5, #4]
 801825a:	6a21      	ldr	r1, [r4, #32]
 801825c:	9300      	str	r3, [sp, #0]
 801825e:	9602      	str	r6, [sp, #8]
 8018260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018262:	6860      	ldr	r0, [r4, #4]
 8018264:	f7ff ffa0 	bl	80181a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018268:	69a2      	ldr	r2, [r4, #24]
 801826a:	6963      	ldr	r3, [r4, #20]
 801826c:	4407      	add	r7, r0
 801826e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018270:	68e0      	ldr	r0, [r4, #12]
 8018272:	fb92 f8f8 	sdiv	r8, r2, r8
 8018276:	4443      	add	r3, r8
 8018278:	9305      	str	r3, [sp, #20]
 801827a:	682b      	ldr	r3, [r5, #0]
 801827c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018280:	9300      	str	r3, [sp, #0]
 8018282:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018284:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018286:	f7ff ff8f 	bl	80181a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801828a:	69a3      	ldr	r3, [r4, #24]
 801828c:	4680      	mov	r8, r0
 801828e:	9602      	str	r6, [sp, #8]
 8018290:	9301      	str	r3, [sp, #4]
 8018292:	686b      	ldr	r3, [r5, #4]
 8018294:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018296:	9300      	str	r3, [sp, #0]
 8018298:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801829a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801829c:	6920      	ldr	r0, [r4, #16]
 801829e:	f7ff ff83 	bl	80181a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80182a2:	4440      	add	r0, r8
 80182a4:	e7bd      	b.n	8018222 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80182a6:	bf00      	nop
 80182a8:	2000bc94 	.word	0x2000bc94

080182ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80182ac:	4b07      	ldr	r3, [pc, #28]	; (80182cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80182ae:	b510      	push	{r4, lr}
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d108      	bne.n	80182c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80182b6:	4b06      	ldr	r3, [pc, #24]	; (80182d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80182b8:	880c      	ldrh	r4, [r1, #0]
 80182ba:	881b      	ldrh	r3, [r3, #0]
 80182bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80182c0:	3b01      	subs	r3, #1
 80182c2:	1b1b      	subs	r3, r3, r4
 80182c4:	8003      	strh	r3, [r0, #0]
 80182c6:	800a      	strh	r2, [r1, #0]
 80182c8:	bd10      	pop	{r4, pc}
 80182ca:	bf00      	nop
 80182cc:	2000bc60 	.word	0x2000bc60
 80182d0:	2000bc64 	.word	0x2000bc64

080182d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80182d4:	4b0a      	ldr	r3, [pc, #40]	; (8018300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80182d6:	b510      	push	{r4, lr}
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d10e      	bne.n	80182fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80182de:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80182e2:	8843      	ldrh	r3, [r0, #2]
 80182e4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80182e8:	18ca      	adds	r2, r1, r3
 80182ea:	4b06      	ldr	r3, [pc, #24]	; (8018304 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80182ec:	8044      	strh	r4, [r0, #2]
 80182ee:	881b      	ldrh	r3, [r3, #0]
 80182f0:	1a9b      	subs	r3, r3, r2
 80182f2:	8003      	strh	r3, [r0, #0]
 80182f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80182f8:	8081      	strh	r1, [r0, #4]
 80182fa:	80c3      	strh	r3, [r0, #6]
 80182fc:	bd10      	pop	{r4, pc}
 80182fe:	bf00      	nop
 8018300:	2000bc60 	.word	0x2000bc60
 8018304:	2000bc5c 	.word	0x2000bc5c

08018308 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018308:	4b07      	ldr	r3, [pc, #28]	; (8018328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801830a:	b510      	push	{r4, lr}
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	2b01      	cmp	r3, #1
 8018310:	d108      	bne.n	8018324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018312:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018316:	f9b0 4000 	ldrsh.w	r4, [r0]
 801831a:	8003      	strh	r3, [r0, #0]
 801831c:	8893      	ldrh	r3, [r2, #4]
 801831e:	3b01      	subs	r3, #1
 8018320:	1b1b      	subs	r3, r3, r4
 8018322:	800b      	strh	r3, [r1, #0]
 8018324:	bd10      	pop	{r4, pc}
 8018326:	bf00      	nop
 8018328:	2000bc60 	.word	0x2000bc60

0801832c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801832c:	4b08      	ldr	r3, [pc, #32]	; (8018350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801832e:	b513      	push	{r0, r1, r4, lr}
 8018330:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018334:	2400      	movs	r4, #0
 8018336:	4b07      	ldr	r3, [pc, #28]	; (8018354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018338:	f8ad 2004 	strh.w	r2, [sp, #4]
 801833c:	466a      	mov	r2, sp
 801833e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018342:	9400      	str	r4, [sp, #0]
 8018344:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018348:	f7ff ffde 	bl	8018308 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801834c:	b002      	add	sp, #8
 801834e:	bd10      	pop	{r4, pc}
 8018350:	2000bc5c 	.word	0x2000bc5c
 8018354:	2000bc5e 	.word	0x2000bc5e

08018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018358:	4b0a      	ldr	r3, [pc, #40]	; (8018384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801835a:	460a      	mov	r2, r1
 801835c:	b510      	push	{r4, lr}
 801835e:	781b      	ldrb	r3, [r3, #0]
 8018360:	2b01      	cmp	r3, #1
 8018362:	d10d      	bne.n	8018380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018364:	8881      	ldrh	r1, [r0, #4]
 8018366:	8803      	ldrh	r3, [r0, #0]
 8018368:	440b      	add	r3, r1
 801836a:	4601      	mov	r1, r0
 801836c:	3b01      	subs	r3, #1
 801836e:	f821 3b02 	strh.w	r3, [r1], #2
 8018372:	f7ff ffc9 	bl	8018308 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018376:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801837a:	88c2      	ldrh	r2, [r0, #6]
 801837c:	80c3      	strh	r3, [r0, #6]
 801837e:	8082      	strh	r2, [r0, #4]
 8018380:	bd10      	pop	{r4, pc}
 8018382:	bf00      	nop
 8018384:	2000bc60 	.word	0x2000bc60

08018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018388:	4b09      	ldr	r3, [pc, #36]	; (80183b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801838a:	b507      	push	{r0, r1, r2, lr}
 801838c:	2100      	movs	r1, #0
 801838e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018392:	4b08      	ldr	r3, [pc, #32]	; (80183b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018394:	9100      	str	r1, [sp, #0]
 8018396:	4669      	mov	r1, sp
 8018398:	f9b3 3000 	ldrsh.w	r3, [r3]
 801839c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80183a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183a4:	f7ff ffd8 	bl	8018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183a8:	b003      	add	sp, #12
 80183aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80183ae:	bf00      	nop
 80183b0:	2000bc5c 	.word	0x2000bc5c
 80183b4:	2000bc5e 	.word	0x2000bc5e

080183b8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80183b8:	4b03      	ldr	r3, [pc, #12]	; (80183c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80183ba:	6818      	ldr	r0, [r3, #0]
 80183bc:	b110      	cbz	r0, 80183c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80183be:	6803      	ldr	r3, [r0, #0]
 80183c0:	699b      	ldr	r3, [r3, #24]
 80183c2:	4718      	bx	r3
 80183c4:	4770      	bx	lr
 80183c6:	bf00      	nop
 80183c8:	2000bce4 	.word	0x2000bce4

080183cc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80183cc:	4770      	bx	lr
	...

080183d0 <_ZN8touchgfx11Application4drawEv>:
 80183d0:	4b09      	ldr	r3, [pc, #36]	; (80183f8 <_ZN8touchgfx11Application4drawEv+0x28>)
 80183d2:	b507      	push	{r0, r1, r2, lr}
 80183d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183d8:	2100      	movs	r1, #0
 80183da:	4b08      	ldr	r3, [pc, #32]	; (80183fc <_ZN8touchgfx11Application4drawEv+0x2c>)
 80183dc:	9100      	str	r1, [sp, #0]
 80183de:	4669      	mov	r1, sp
 80183e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183e4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80183e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183ec:	6803      	ldr	r3, [r0, #0]
 80183ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183f0:	4798      	blx	r3
 80183f2:	b003      	add	sp, #12
 80183f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80183f8:	2000bc5c 	.word	0x2000bc5c
 80183fc:	2000bc5e 	.word	0x2000bc5e

08018400 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018400:	4b03      	ldr	r3, [pc, #12]	; (8018410 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018402:	6818      	ldr	r0, [r3, #0]
 8018404:	b110      	cbz	r0, 801840c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018406:	6803      	ldr	r3, [r0, #0]
 8018408:	69db      	ldr	r3, [r3, #28]
 801840a:	4718      	bx	r3
 801840c:	4770      	bx	lr
 801840e:	bf00      	nop
 8018410:	2000bce4 	.word	0x2000bce4

08018414 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018414:	4b03      	ldr	r3, [pc, #12]	; (8018424 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018416:	6818      	ldr	r0, [r3, #0]
 8018418:	b110      	cbz	r0, 8018420 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801841a:	6803      	ldr	r3, [r0, #0]
 801841c:	6a1b      	ldr	r3, [r3, #32]
 801841e:	4718      	bx	r3
 8018420:	4770      	bx	lr
 8018422:	bf00      	nop
 8018424:	2000bce4 	.word	0x2000bce4

08018428 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018428:	4b03      	ldr	r3, [pc, #12]	; (8018438 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801842a:	6818      	ldr	r0, [r3, #0]
 801842c:	b110      	cbz	r0, 8018434 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801842e:	6803      	ldr	r3, [r0, #0]
 8018430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018432:	4718      	bx	r3
 8018434:	4770      	bx	lr
 8018436:	bf00      	nop
 8018438:	2000bce4 	.word	0x2000bce4

0801843c <_ZN8touchgfx11Application15handleTickEventEv>:
 801843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018440:	4d3a      	ldr	r5, [pc, #232]	; (801852c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018442:	4604      	mov	r4, r0
 8018444:	6828      	ldr	r0, [r5, #0]
 8018446:	b140      	cbz	r0, 801845a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018448:	7a03      	ldrb	r3, [r0, #8]
 801844a:	b933      	cbnz	r3, 801845a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801844c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018450:	6803      	ldr	r3, [r0, #0]
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018458:	4718      	bx	r3
 801845a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801845e:	b97b      	cbnz	r3, 8018480 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018460:	b170      	cbz	r0, 8018480 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018462:	7a03      	ldrb	r3, [r0, #8]
 8018464:	b163      	cbz	r3, 8018480 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018466:	4b32      	ldr	r3, [pc, #200]	; (8018530 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018468:	6818      	ldr	r0, [r3, #0]
 801846a:	b110      	cbz	r0, 8018472 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801846c:	6803      	ldr	r3, [r0, #0]
 801846e:	691b      	ldr	r3, [r3, #16]
 8018470:	4798      	blx	r3
 8018472:	6828      	ldr	r0, [r5, #0]
 8018474:	6803      	ldr	r3, [r0, #0]
 8018476:	68db      	ldr	r3, [r3, #12]
 8018478:	4798      	blx	r3
 801847a:	2301      	movs	r3, #1
 801847c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018480:	2500      	movs	r5, #0
 8018482:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018486:	42a8      	cmp	r0, r5
 8018488:	dd0c      	ble.n	80184a4 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801848a:	1963      	adds	r3, r4, r5
 801848c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018490:	b132      	cbz	r2, 80184a0 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018492:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018496:	4413      	add	r3, r2
 8018498:	6858      	ldr	r0, [r3, #4]
 801849a:	6803      	ldr	r3, [r0, #0]
 801849c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801849e:	4798      	blx	r3
 80184a0:	3501      	adds	r5, #1
 80184a2:	e7ee      	b.n	8018482 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80184a4:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80184a8:	3801      	subs	r0, #1
 80184aa:	f04f 0c00 	mov.w	ip, #0
 80184ae:	3678      	adds	r6, #120	; 0x78
 80184b0:	1c43      	adds	r3, r0, #1
 80184b2:	d033      	beq.n	801851c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80184b4:	1823      	adds	r3, r4, r0
 80184b6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80184ba:	bb6a      	cbnz	r2, 8018518 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80184bc:	b281      	uxth	r1, r0
 80184be:	1d25      	adds	r5, r4, #4
 80184c0:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80184c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80184c8:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80184cc:	4293      	cmp	r3, r2
 80184ce:	dc0a      	bgt.n	80184e6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 80184d0:	f101 0288 	add.w	r2, r1, #136	; 0x88
 80184d4:	4422      	add	r2, r4
 80184d6:	18b1      	adds	r1, r6, r2
 80184d8:	b289      	uxth	r1, r1
 80184da:	428b      	cmp	r3, r1
 80184dc:	d919      	bls.n	8018512 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 80184de:	7851      	ldrb	r1, [r2, #1]
 80184e0:	f802 1b01 	strb.w	r1, [r2], #1
 80184e4:	e7f7      	b.n	80184d6 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 80184e6:	682f      	ldr	r7, [r5, #0]
 80184e8:	f105 0804 	add.w	r8, r5, #4
 80184ec:	45b9      	cmp	r9, r7
 80184ee:	d10d      	bne.n	801850c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 80184f0:	4696      	mov	lr, r2
 80184f2:	f1be 0f1e 	cmp.w	lr, #30
 80184f6:	dc06      	bgt.n	8018506 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80184f8:	f10e 0e01 	add.w	lr, lr, #1
 80184fc:	686f      	ldr	r7, [r5, #4]
 80184fe:	4573      	cmp	r3, lr
 8018500:	f845 7b04 	str.w	r7, [r5], #4
 8018504:	dcf5      	bgt.n	80184f2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018506:	3b01      	subs	r3, #1
 8018508:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801850c:	3201      	adds	r2, #1
 801850e:	4645      	mov	r5, r8
 8018510:	e7da      	b.n	80184c8 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018512:	4423      	add	r3, r4
 8018514:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018518:	3801      	subs	r0, #1
 801851a:	e7c9      	b.n	80184b0 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801851c:	4b04      	ldr	r3, [pc, #16]	; (8018530 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801851e:	6818      	ldr	r0, [r3, #0]
 8018520:	b110      	cbz	r0, 8018528 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018522:	6803      	ldr	r3, [r0, #0]
 8018524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018526:	e795      	b.n	8018454 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801852c:	2000bce8 	.word	0x2000bce8
 8018530:	2000bce4 	.word	0x2000bce4

08018534 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018534:	b570      	push	{r4, r5, r6, lr}
 8018536:	4606      	mov	r6, r0
 8018538:	460c      	mov	r4, r1
 801853a:	b929      	cbnz	r1, 8018548 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801853c:	4b0c      	ldr	r3, [pc, #48]	; (8018570 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801853e:	2164      	movs	r1, #100	; 0x64
 8018540:	4a0c      	ldr	r2, [pc, #48]	; (8018574 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018542:	480d      	ldr	r0, [pc, #52]	; (8018578 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018544:	f00c f854 	bl	80245f0 <__assert_func>
 8018548:	2300      	movs	r3, #0
 801854a:	4d0c      	ldr	r5, [pc, #48]	; (801857c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801854c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018550:	6828      	ldr	r0, [r5, #0]
 8018552:	b110      	cbz	r0, 801855a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018554:	6803      	ldr	r3, [r0, #0]
 8018556:	695b      	ldr	r3, [r3, #20]
 8018558:	4798      	blx	r3
 801855a:	602c      	str	r4, [r5, #0]
 801855c:	4620      	mov	r0, r4
 801855e:	6823      	ldr	r3, [r4, #0]
 8018560:	68db      	ldr	r3, [r3, #12]
 8018562:	4798      	blx	r3
 8018564:	6833      	ldr	r3, [r6, #0]
 8018566:	4630      	mov	r0, r6
 8018568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801856a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801856e:	4718      	bx	r3
 8018570:	08027e08 	.word	0x08027e08
 8018574:	08027ed0 	.word	0x08027ed0
 8018578:	08027e12 	.word	0x08027e12
 801857c:	2000bce4 	.word	0x2000bce4

08018580 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018580:	b510      	push	{r4, lr}
 8018582:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018586:	888a      	ldrh	r2, [r1, #4]
 8018588:	f9b0 3000 	ldrsh.w	r3, [r0]
 801858c:	4422      	add	r2, r4
 801858e:	b212      	sxth	r2, r2
 8018590:	4293      	cmp	r3, r2
 8018592:	da15      	bge.n	80185c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018594:	8882      	ldrh	r2, [r0, #4]
 8018596:	4413      	add	r3, r2
 8018598:	b21b      	sxth	r3, r3
 801859a:	429c      	cmp	r4, r3
 801859c:	da10      	bge.n	80185c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801859e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80185a2:	88c9      	ldrh	r1, [r1, #6]
 80185a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80185a8:	4419      	add	r1, r3
 80185aa:	b209      	sxth	r1, r1
 80185ac:	428a      	cmp	r2, r1
 80185ae:	da07      	bge.n	80185c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80185b0:	88c0      	ldrh	r0, [r0, #6]
 80185b2:	4410      	add	r0, r2
 80185b4:	b200      	sxth	r0, r0
 80185b6:	4283      	cmp	r3, r0
 80185b8:	bfac      	ite	ge
 80185ba:	2000      	movge	r0, #0
 80185bc:	2001      	movlt	r0, #1
 80185be:	bd10      	pop	{r4, pc}
 80185c0:	2000      	movs	r0, #0
 80185c2:	e7fc      	b.n	80185be <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080185c4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80185c4:	b570      	push	{r4, r5, r6, lr}
 80185c6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80185ca:	f9b0 5000 	ldrsh.w	r5, [r0]
 80185ce:	42ac      	cmp	r4, r5
 80185d0:	db18      	blt.n	8018604 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185d2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80185d6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80185da:	429a      	cmp	r2, r3
 80185dc:	db12      	blt.n	8018604 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185de:	8886      	ldrh	r6, [r0, #4]
 80185e0:	4435      	add	r5, r6
 80185e2:	888e      	ldrh	r6, [r1, #4]
 80185e4:	4434      	add	r4, r6
 80185e6:	b22d      	sxth	r5, r5
 80185e8:	b224      	sxth	r4, r4
 80185ea:	42a5      	cmp	r5, r4
 80185ec:	db0a      	blt.n	8018604 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185ee:	88c0      	ldrh	r0, [r0, #6]
 80185f0:	4418      	add	r0, r3
 80185f2:	88cb      	ldrh	r3, [r1, #6]
 80185f4:	441a      	add	r2, r3
 80185f6:	b200      	sxth	r0, r0
 80185f8:	b212      	sxth	r2, r2
 80185fa:	4290      	cmp	r0, r2
 80185fc:	bfb4      	ite	lt
 80185fe:	2000      	movlt	r0, #0
 8018600:	2001      	movge	r0, #1
 8018602:	bd70      	pop	{r4, r5, r6, pc}
 8018604:	2000      	movs	r0, #0
 8018606:	e7fc      	b.n	8018602 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018608 <_ZN8touchgfx11Application11getInstanceEv>:
 8018608:	4b01      	ldr	r3, [pc, #4]	; (8018610 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801860a:	6818      	ldr	r0, [r3, #0]
 801860c:	4770      	bx	lr
 801860e:	bf00      	nop
 8018610:	2000bcf4 	.word	0x2000bcf4

08018614 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018614:	2300      	movs	r3, #0
 8018616:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801861a:	30a8      	adds	r0, #168	; 0xa8
 801861c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018620:	f802 3b01 	strb.w	r3, [r2], #1
 8018624:	4282      	cmp	r2, r0
 8018626:	d1fb      	bne.n	8018620 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018628:	4770      	bx	lr

0801862a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801862a:	4603      	mov	r3, r0
 801862c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018630:	2200      	movs	r2, #0
 8018632:	801a      	strh	r2, [r3, #0]
 8018634:	3308      	adds	r3, #8
 8018636:	f823 2c06 	strh.w	r2, [r3, #-6]
 801863a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801863e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018642:	428b      	cmp	r3, r1
 8018644:	d1f5      	bne.n	8018632 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018646:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801864a:	4770      	bx	lr

0801864c <_ZN8touchgfx11ApplicationC1Ev>:
 801864c:	b570      	push	{r4, r5, r6, lr}
 801864e:	4b16      	ldr	r3, [pc, #88]	; (80186a8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8018650:	2500      	movs	r5, #0
 8018652:	4604      	mov	r4, r0
 8018654:	30a8      	adds	r0, #168	; 0xa8
 8018656:	f840 3ca8 	str.w	r3, [r0, #-168]
 801865a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801865e:	f7ff ffe4 	bl	801862a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018662:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018666:	f7ff ffe0 	bl	801862a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801866a:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801866e:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8018672:	490e      	ldr	r1, [pc, #56]	; (80186ac <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018674:	480e      	ldr	r0, [pc, #56]	; (80186b0 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018676:	f00a faa1 	bl	8022bbc <CRC_Lock>
 801867a:	4e0e      	ldr	r6, [pc, #56]	; (80186b4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801867c:	4b0e      	ldr	r3, [pc, #56]	; (80186b8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801867e:	b158      	cbz	r0, 8018698 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8018680:	801d      	strh	r5, [r3, #0]
 8018682:	2300      	movs	r3, #0
 8018684:	4a0d      	ldr	r2, [pc, #52]	; (80186bc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018686:	4620      	mov	r0, r4
 8018688:	6013      	str	r3, [r2, #0]
 801868a:	4a0d      	ldr	r2, [pc, #52]	; (80186c0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801868c:	6033      	str	r3, [r6, #0]
 801868e:	6013      	str	r3, [r2, #0]
 8018690:	f7ff ffc0 	bl	8018614 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018694:	4620      	mov	r0, r4
 8018696:	bd70      	pop	{r4, r5, r6, pc}
 8018698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801869c:	2002      	movs	r0, #2
 801869e:	801a      	strh	r2, [r3, #0]
 80186a0:	6030      	str	r0, [r6, #0]
 80186a2:	f000 ff81 	bl	80195a8 <_ZN8touchgfx6Screen4drawEv>
 80186a6:	e7ec      	b.n	8018682 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80186a8:	08027e9c 	.word	0x08027e9c
 80186ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80186b0:	f407a5c2 	.word	0xf407a5c2
 80186b4:	2000bce4 	.word	0x2000bce4
 80186b8:	20000040 	.word	0x20000040
 80186bc:	2000bcf4 	.word	0x2000bcf4
 80186c0:	2000bce8 	.word	0x2000bce8

080186c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80186c4:	2300      	movs	r3, #0
 80186c6:	8003      	strh	r3, [r0, #0]
 80186c8:	8043      	strh	r3, [r0, #2]
 80186ca:	8083      	strh	r3, [r0, #4]
 80186cc:	80c3      	strh	r3, [r0, #6]
 80186ce:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80186d2:	4293      	cmp	r3, r2
 80186d4:	b530      	push	{r4, r5, lr}
 80186d6:	d912      	bls.n	80186fe <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80186d8:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80186dc:	3b01      	subs	r3, #1
 80186de:	6825      	ldr	r5, [r4, #0]
 80186e0:	b29b      	uxth	r3, r3
 80186e2:	6005      	str	r5, [r0, #0]
 80186e4:	4293      	cmp	r3, r2
 80186e6:	6865      	ldr	r5, [r4, #4]
 80186e8:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80186ec:	6045      	str	r5, [r0, #4]
 80186ee:	d906      	bls.n	80186fe <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80186f0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80186f4:	681d      	ldr	r5, [r3, #0]
 80186f6:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 80186fa:	685d      	ldr	r5, [r3, #4]
 80186fc:	6065      	str	r5, [r4, #4]
 80186fe:	bd30      	pop	{r4, r5, pc}

08018700 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018702:	466b      	mov	r3, sp
 8018704:	4604      	mov	r4, r0
 8018706:	e883 0006 	stmia.w	r3, {r1, r2}
 801870a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801870e:	2a07      	cmp	r2, #7
 8018710:	d906      	bls.n	8018720 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018712:	4b09      	ldr	r3, [pc, #36]	; (8018738 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018714:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018718:	4a08      	ldr	r2, [pc, #32]	; (801873c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801871a:	4809      	ldr	r0, [pc, #36]	; (8018740 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801871c:	f00b ff68 	bl	80245f0 <__assert_func>
 8018720:	1c51      	adds	r1, r2, #1
 8018722:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018726:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801872a:	cb03      	ldmia	r3!, {r0, r1}
 801872c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018730:	6069      	str	r1, [r5, #4]
 8018732:	b003      	add	sp, #12
 8018734:	bd30      	pop	{r4, r5, pc}
 8018736:	bf00      	nop
 8018738:	08027e3c 	.word	0x08027e3c
 801873c:	08027f14 	.word	0x08027f14
 8018740:	08027e6b 	.word	0x08027e6b

08018744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018748:	b089      	sub	sp, #36	; 0x24
 801874a:	4606      	mov	r6, r0
 801874c:	466c      	mov	r4, sp
 801874e:	4620      	mov	r0, r4
 8018750:	e884 0006 	stmia.w	r4, {r1, r2}
 8018754:	f7fc fe30 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018758:	bbb0      	cbnz	r0, 80187c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801875a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801875e:	b1fd      	cbz	r5, 80187a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8018760:	3d01      	subs	r5, #1
 8018762:	af04      	add	r7, sp, #16
 8018764:	f04f 090a 	mov.w	r9, #10
 8018768:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801876c:	ab02      	add	r3, sp, #8
 801876e:	fa1f f885 	uxth.w	r8, r5
 8018772:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018776:	6851      	ldr	r1, [r2, #4]
 8018778:	c303      	stmia	r3!, {r0, r1}
 801877a:	4621      	mov	r1, r4
 801877c:	a802      	add	r0, sp, #8
 801877e:	f7ff ff21 	bl	80185c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018782:	bb08      	cbnz	r0, 80187c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018784:	a902      	add	r1, sp, #8
 8018786:	4620      	mov	r0, r4
 8018788:	f7ff ff1c 	bl	80185c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801878c:	b1f8      	cbz	r0, 80187ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801878e:	4642      	mov	r2, r8
 8018790:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018794:	a806      	add	r0, sp, #24
 8018796:	f7ff ff95 	bl	80186c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801879a:	f115 35ff 	adds.w	r5, r5, #4294967295
 801879e:	d2e3      	bcs.n	8018768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80187a0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80187a4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80187a8:	2b08      	cmp	r3, #8
 80187aa:	d108      	bne.n	80187be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80187ac:	4629      	mov	r1, r5
 80187ae:	a806      	add	r0, sp, #24
 80187b0:	2207      	movs	r2, #7
 80187b2:	f7ff ff87 	bl	80186c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80187b6:	a906      	add	r1, sp, #24
 80187b8:	4620      	mov	r0, r4
 80187ba:	f7fd fff8 	bl	80167ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80187be:	4628      	mov	r0, r5
 80187c0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80187c4:	f7ff ff9c 	bl	8018700 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80187c8:	b009      	add	sp, #36	; 0x24
 80187ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187ce:	4621      	mov	r1, r4
 80187d0:	a802      	add	r0, sp, #8
 80187d2:	f7ff fed5 	bl	8018580 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80187d6:	b150      	cbz	r0, 80187ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80187d8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80187dc:	a806      	add	r0, sp, #24
 80187de:	4642      	mov	r2, r8
 80187e0:	f7ff ff70 	bl	80186c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80187e4:	a902      	add	r1, sp, #8
 80187e6:	4620      	mov	r0, r4
 80187e8:	f7fd ffe1 	bl	80167ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80187ec:	e7d5      	b.n	801879a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80187ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80187f2:	e887 0003 	stmia.w	r7, {r0, r1}
 80187f6:	a902      	add	r1, sp, #8
 80187f8:	4638      	mov	r0, r7
 80187fa:	f7fd ffd8 	bl	80167ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80187fe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018802:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018806:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801880a:	fb13 f302 	smulbb	r3, r3, r2
 801880e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018812:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018816:	fb11 f102 	smulbb	r1, r1, r2
 801881a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801881e:	fb09 f303 	mul.w	r3, r9, r3
 8018822:	fb12 1100 	smlabb	r1, r2, r0, r1
 8018826:	220b      	movs	r2, #11
 8018828:	434a      	muls	r2, r1
 801882a:	4293      	cmp	r3, r2
 801882c:	dab5      	bge.n	801879a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801882e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018832:	a806      	add	r0, sp, #24
 8018834:	4642      	mov	r2, r8
 8018836:	f7ff ff45 	bl	80186c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801883a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801883e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018842:	e7aa      	b.n	801879a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08018844 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018844:	4b1d      	ldr	r3, [pc, #116]	; (80188bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8018846:	b530      	push	{r4, r5, lr}
 8018848:	f9b3 2000 	ldrsh.w	r2, [r3]
 801884c:	b085      	sub	sp, #20
 801884e:	4b1c      	ldr	r3, [pc, #112]	; (80188c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8018850:	460c      	mov	r4, r1
 8018852:	2100      	movs	r1, #0
 8018854:	4605      	mov	r5, r0
 8018856:	f9b3 3000 	ldrsh.w	r3, [r3]
 801885a:	6820      	ldr	r0, [r4, #0]
 801885c:	9100      	str	r1, [sp, #0]
 801885e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018862:	ab02      	add	r3, sp, #8
 8018864:	6861      	ldr	r1, [r4, #4]
 8018866:	f8ad 2004 	strh.w	r2, [sp, #4]
 801886a:	c303      	stmia	r3!, {r0, r1}
 801886c:	4669      	mov	r1, sp
 801886e:	a802      	add	r0, sp, #8
 8018870:	f7fc fd5e 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8018874:	ab02      	add	r3, sp, #8
 8018876:	cb03      	ldmia	r3!, {r0, r1}
 8018878:	4b12      	ldr	r3, [pc, #72]	; (80188c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801887a:	6020      	str	r0, [r4, #0]
 801887c:	6818      	ldr	r0, [r3, #0]
 801887e:	6061      	str	r1, [r4, #4]
 8018880:	b138      	cbz	r0, 8018892 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018882:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8018886:	b133      	cbz	r3, 8018896 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8018888:	6821      	ldr	r1, [r4, #0]
 801888a:	4628      	mov	r0, r5
 801888c:	6862      	ldr	r2, [r4, #4]
 801888e:	f7ff ff59 	bl	8018744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018892:	b005      	add	sp, #20
 8018894:	bd30      	pop	{r4, r5, pc}
 8018896:	6803      	ldr	r3, [r0, #0]
 8018898:	4621      	mov	r1, r4
 801889a:	689b      	ldr	r3, [r3, #8]
 801889c:	4798      	blx	r3
 801889e:	4b0a      	ldr	r3, [pc, #40]	; (80188c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80188a0:	6818      	ldr	r0, [r3, #0]
 80188a2:	b118      	cbz	r0, 80188ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80188a4:	6803      	ldr	r3, [r0, #0]
 80188a6:	4621      	mov	r1, r4
 80188a8:	689b      	ldr	r3, [r3, #8]
 80188aa:	4798      	blx	r3
 80188ac:	4b07      	ldr	r3, [pc, #28]	; (80188cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80188ae:	4621      	mov	r1, r4
 80188b0:	6818      	ldr	r0, [r3, #0]
 80188b2:	6803      	ldr	r3, [r0, #0]
 80188b4:	695b      	ldr	r3, [r3, #20]
 80188b6:	4798      	blx	r3
 80188b8:	e7eb      	b.n	8018892 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80188ba:	bf00      	nop
 80188bc:	2000bc5c 	.word	0x2000bc5c
 80188c0:	2000bc5e 	.word	0x2000bc5e
 80188c4:	2000bce4 	.word	0x2000bce4
 80188c8:	2000bce0 	.word	0x2000bce0
 80188cc:	2000bc68 	.word	0x2000bc68

080188d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80188d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	4604      	mov	r4, r0
 80188d6:	b09b      	sub	sp, #108	; 0x6c
 80188d8:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80188dc:	b129      	cbz	r1, 80188ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80188de:	2300      	movs	r3, #0
 80188e0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80188e4:	b01b      	add	sp, #108	; 0x6c
 80188e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ea:	4baf      	ldr	r3, [pc, #700]	; (8018ba8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	b33b      	cbz	r3, 8018940 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80188f0:	4dae      	ldr	r5, [pc, #696]	; (8018bac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80188f2:	4628      	mov	r0, r5
 80188f4:	f7fc fd60 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80188f8:	4606      	mov	r6, r0
 80188fa:	bb08      	cbnz	r0, 8018940 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80188fc:	4628      	mov	r0, r5
 80188fe:	f7ff fce9 	bl	80182d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018902:	6829      	ldr	r1, [r5, #0]
 8018904:	686a      	ldr	r2, [r5, #4]
 8018906:	4620      	mov	r0, r4
 8018908:	f7ff ff1c 	bl	8018744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801890c:	802e      	strh	r6, [r5, #0]
 801890e:	806e      	strh	r6, [r5, #2]
 8018910:	80ae      	strh	r6, [r5, #4]
 8018912:	80ee      	strh	r6, [r5, #6]
 8018914:	4fa6      	ldr	r7, [pc, #664]	; (8018bb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8018916:	a809      	add	r0, sp, #36	; 0x24
 8018918:	f7ff fe87 	bl	801862a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801891c:	883d      	ldrh	r5, [r7, #0]
 801891e:	462e      	mov	r6, r5
 8018920:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018924:	42b3      	cmp	r3, r6
 8018926:	d910      	bls.n	801894a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8018928:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801892c:	3601      	adds	r6, #1
 801892e:	a809      	add	r0, sp, #36	; 0x24
 8018930:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8018934:	b2b6      	uxth	r6, r6
 8018936:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801893a:	f7ff fee1 	bl	8018700 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801893e:	e7ef      	b.n	8018920 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8018940:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018944:	2b00      	cmp	r3, #0
 8018946:	d1e5      	bne.n	8018914 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8018948:	e7cc      	b.n	80188e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801894a:	462e      	mov	r6, r5
 801894c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8018950:	42b3      	cmp	r3, r6
 8018952:	d90b      	bls.n	801896c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8018954:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018958:	3601      	adds	r6, #1
 801895a:	4620      	mov	r0, r4
 801895c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8018960:	b2b6      	uxth	r6, r6
 8018962:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018966:	f7ff feed 	bl	8018744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801896a:	e7ef      	b.n	801894c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801896c:	4e91      	ldr	r6, [pc, #580]	; (8018bb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801896e:	6833      	ldr	r3, [r6, #0]
 8018970:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018974:	2b01      	cmp	r3, #1
 8018976:	f040 8092 	bne.w	8018a9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801897a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801897e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8018982:	f04f 0900 	mov.w	r9, #0
 8018986:	33aa      	adds	r3, #170	; 0xaa
 8018988:	42a8      	cmp	r0, r5
 801898a:	f103 0308 	add.w	r3, r3, #8
 801898e:	dd0a      	ble.n	80189a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8018990:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018994:	3501      	adds	r5, #1
 8018996:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801899a:	440a      	add	r2, r1
 801899c:	b212      	sxth	r2, r2
 801899e:	4591      	cmp	r9, r2
 80189a0:	bfb8      	it	lt
 80189a2:	4691      	movlt	r9, r2
 80189a4:	e7f0      	b.n	8018988 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80189a6:	4b84      	ldr	r3, [pc, #528]	; (8018bb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80189a8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8018bc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 80189ac:	881d      	ldrh	r5, [r3, #0]
 80189ae:	2300      	movs	r3, #0
 80189b0:	2d0f      	cmp	r5, #15
 80189b2:	bf8c      	ite	hi
 80189b4:	08ed      	lsrhi	r5, r5, #3
 80189b6:	2501      	movls	r5, #1
 80189b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80189bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80189c0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80189c4:	6830      	ldr	r0, [r6, #0]
 80189c6:	440b      	add	r3, r1
 80189c8:	6802      	ldr	r2, [r0, #0]
 80189ca:	b21b      	sxth	r3, r3
 80189cc:	4599      	cmp	r9, r3
 80189ce:	dd49      	ble.n	8018a64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 80189d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80189d4:	4798      	blx	r3
 80189d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80189da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80189de:	4413      	add	r3, r2
 80189e0:	b21b      	sxth	r3, r3
 80189e2:	195a      	adds	r2, r3, r5
 80189e4:	4290      	cmp	r0, r2
 80189e6:	da07      	bge.n	80189f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80189e8:	4581      	cmp	r9, r0
 80189ea:	dd05      	ble.n	80189f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80189ec:	4298      	cmp	r0, r3
 80189ee:	da33      	bge.n	8018a58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	dd31      	ble.n	8018a58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80189f4:	4648      	mov	r0, r9
 80189f6:	e004      	b.n	8018a02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 80189f8:	4298      	cmp	r0, r3
 80189fa:	dbfb      	blt.n	80189f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 80189fc:	4548      	cmp	r0, r9
 80189fe:	bfa8      	it	ge
 8018a00:	4648      	movge	r0, r9
 8018a02:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018a06:	2100      	movs	r1, #0
 8018a08:	1ac0      	subs	r0, r0, r3
 8018a0a:	f8b7 a000 	ldrh.w	sl, [r7]
 8018a0e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018a12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018a16:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018a1a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018a1e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a22:	4553      	cmp	r3, sl
 8018a24:	d9ca      	bls.n	80189bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8018a26:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8018a2a:	ab07      	add	r3, sp, #28
 8018a2c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018a30:	6851      	ldr	r1, [r2, #4]
 8018a32:	c303      	stmia	r3!, {r0, r1}
 8018a34:	a807      	add	r0, sp, #28
 8018a36:	a905      	add	r1, sp, #20
 8018a38:	f7fc fc7a 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8018a3c:	a807      	add	r0, sp, #28
 8018a3e:	f7fc fcbb 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a42:	b920      	cbnz	r0, 8018a4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8018a44:	6823      	ldr	r3, [r4, #0]
 8018a46:	a907      	add	r1, sp, #28
 8018a48:	4620      	mov	r0, r4
 8018a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a4c:	4798      	blx	r3
 8018a4e:	f10a 0a01 	add.w	sl, sl, #1
 8018a52:	fa1f fa8a 	uxth.w	sl, sl
 8018a56:	e7e2      	b.n	8018a1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8018a58:	6830      	ldr	r0, [r6, #0]
 8018a5a:	2101      	movs	r1, #1
 8018a5c:	6803      	ldr	r3, [r0, #0]
 8018a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018a60:	4798      	blx	r3
 8018a62:	e7ab      	b.n	80189bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8018a64:	69d3      	ldr	r3, [r2, #28]
 8018a66:	4798      	blx	r3
 8018a68:	4b54      	ldr	r3, [pc, #336]	; (8018bbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8018a6a:	781b      	ldrb	r3, [r3, #0]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	f43f af39 	beq.w	80188e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018a72:	2300      	movs	r3, #0
 8018a74:	883d      	ldrh	r5, [r7, #0]
 8018a76:	34ea      	adds	r4, #234	; 0xea
 8018a78:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8018a7c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8018a80:	42ab      	cmp	r3, r5
 8018a82:	f67f af2f 	bls.w	80188e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018a86:	ab1a      	add	r3, sp, #104	; 0x68
 8018a88:	4620      	mov	r0, r4
 8018a8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018a8e:	3501      	adds	r5, #1
 8018a90:	3b44      	subs	r3, #68	; 0x44
 8018a92:	b2ad      	uxth	r5, r5
 8018a94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018a98:	f7ff fe32 	bl	8018700 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018a9c:	e7ee      	b.n	8018a7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8018a9e:	2b02      	cmp	r3, #2
 8018aa0:	d16a      	bne.n	8018b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018aa2:	f8df a120 	ldr.w	sl, [pc, #288]	; 8018bc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8018aa6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018aaa:	42ab      	cmp	r3, r5
 8018aac:	d9dc      	bls.n	8018a68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018aae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018ab2:	ab03      	add	r3, sp, #12
 8018ab4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018ab8:	6851      	ldr	r1, [r2, #4]
 8018aba:	c303      	stmia	r3!, {r0, r1}
 8018abc:	f89a 3000 	ldrb.w	r3, [sl]
 8018ac0:	2b01      	cmp	r3, #1
 8018ac2:	d102      	bne.n	8018aca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8018ac4:	a803      	add	r0, sp, #12
 8018ac6:	f7ff fc5f 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018aca:	a803      	add	r0, sp, #12
 8018acc:	f7fc fc74 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	d14a      	bne.n	8018b6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8018ad4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018ad8:	f10d 0914 	add.w	r9, sp, #20
 8018adc:	f10d 081c 	add.w	r8, sp, #28
 8018ae0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018ae4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018ae8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018aec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018af0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018af4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018af8:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8018afc:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8018b00:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018b04:	44dc      	add	ip, fp
 8018b06:	6830      	ldr	r0, [r6, #0]
 8018b08:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018b0c:	ebac 0c02 	sub.w	ip, ip, r2
 8018b10:	f8d0 e000 	ldr.w	lr, [r0]
 8018b14:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018b18:	fa1f fc8c 	uxth.w	ip, ip
 8018b1c:	f8cd c000 	str.w	ip, [sp]
 8018b20:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8018b24:	47d8      	blx	fp
 8018b26:	f89a 3000 	ldrb.w	r3, [sl]
 8018b2a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018b2e:	2b01      	cmp	r3, #1
 8018b30:	d11e      	bne.n	8018b70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8018b32:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018b36:	e888 0003 	stmia.w	r8, {r0, r1}
 8018b3a:	4640      	mov	r0, r8
 8018b3c:	f7ff fbca 	bl	80182d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018b40:	6823      	ldr	r3, [r4, #0]
 8018b42:	4641      	mov	r1, r8
 8018b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b46:	4620      	mov	r0, r4
 8018b48:	4798      	blx	r3
 8018b4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018b4e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018b52:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8018b56:	4413      	add	r3, r2
 8018b58:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018b5c:	440a      	add	r2, r1
 8018b5e:	b21b      	sxth	r3, r3
 8018b60:	b212      	sxth	r2, r2
 8018b62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b66:	4293      	cmp	r3, r2
 8018b68:	dbc6      	blt.n	8018af8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8018b6a:	3501      	adds	r5, #1
 8018b6c:	b2ad      	uxth	r5, r5
 8018b6e:	e79a      	b.n	8018aa6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8018b70:	6823      	ldr	r3, [r4, #0]
 8018b72:	4649      	mov	r1, r9
 8018b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b76:	e7e6      	b.n	8018b46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8018b78:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018b7c:	42ab      	cmp	r3, r5
 8018b7e:	f67f af73 	bls.w	8018a68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018b82:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018b86:	ab07      	add	r3, sp, #28
 8018b88:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018b8c:	6851      	ldr	r1, [r2, #4]
 8018b8e:	c303      	stmia	r3!, {r0, r1}
 8018b90:	a807      	add	r0, sp, #28
 8018b92:	f7fc fc11 	bl	80153b8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b96:	b920      	cbnz	r0, 8018ba2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8018b98:	6823      	ldr	r3, [r4, #0]
 8018b9a:	a907      	add	r1, sp, #28
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ba0:	4798      	blx	r3
 8018ba2:	3501      	adds	r5, #1
 8018ba4:	b2ad      	uxth	r5, r5
 8018ba6:	e7e7      	b.n	8018b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018ba8:	2000bce0 	.word	0x2000bce0
 8018bac:	2000bcec 	.word	0x2000bcec
 8018bb0:	20000040 	.word	0x20000040
 8018bb4:	2000bc68 	.word	0x2000bc68
 8018bb8:	2000bc5e 	.word	0x2000bc5e
 8018bbc:	2000bc66 	.word	0x2000bc66
 8018bc0:	2000bc5c 	.word	0x2000bc5c
 8018bc4:	2000bc60 	.word	0x2000bc60

08018bc8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018bc8:	4b03      	ldr	r3, [pc, #12]	; (8018bd8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018bca:	2200      	movs	r2, #0
 8018bcc:	801a      	strh	r2, [r3, #0]
 8018bce:	805a      	strh	r2, [r3, #2]
 8018bd0:	809a      	strh	r2, [r3, #4]
 8018bd2:	80da      	strh	r2, [r3, #6]
 8018bd4:	4770      	bx	lr
 8018bd6:	bf00      	nop
 8018bd8:	2000bcec 	.word	0x2000bcec

08018bdc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8018bdc:	2000      	movs	r0, #0
 8018bde:	4770      	bx	lr

08018be0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8018be0:	2000      	movs	r0, #0
 8018be2:	4770      	bx	lr

08018be4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018be4:	b508      	push	{r3, lr}
 8018be6:	6803      	ldr	r3, [r0, #0]
 8018be8:	68db      	ldr	r3, [r3, #12]
 8018bea:	4798      	blx	r3
 8018bec:	b128      	cbz	r0, 8018bfa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018bee:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018bf2:	7a80      	ldrb	r0, [r0, #10]
 8018bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018bf8:	4318      	orrs	r0, r3
 8018bfa:	bd08      	pop	{r3, pc}

08018bfc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8018bfc:	b40e      	push	{r1, r2, r3}
 8018bfe:	b533      	push	{r0, r1, r4, r5, lr}
 8018c00:	ab05      	add	r3, sp, #20
 8018c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c06:	9301      	str	r3, [sp, #4]
 8018c08:	4b0a      	ldr	r3, [pc, #40]	; (8018c34 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8018c0a:	685c      	ldr	r4, [r3, #4]
 8018c0c:	1061      	asrs	r1, r4, #1
 8018c0e:	07e4      	lsls	r4, r4, #31
 8018c10:	eb00 0501 	add.w	r5, r0, r1
 8018c14:	bf46      	itte	mi
 8018c16:	681b      	ldrmi	r3, [r3, #0]
 8018c18:	5841      	ldrmi	r1, [r0, r1]
 8018c1a:	681c      	ldrpl	r4, [r3, #0]
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	bf48      	it	mi
 8018c20:	58cc      	ldrmi	r4, [r1, r3]
 8018c22:	2100      	movs	r1, #0
 8018c24:	9b01      	ldr	r3, [sp, #4]
 8018c26:	47a0      	blx	r4
 8018c28:	b002      	add	sp, #8
 8018c2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c2e:	b003      	add	sp, #12
 8018c30:	4770      	bx	lr
 8018c32:	bf00      	nop
 8018c34:	20000028 	.word	0x20000028

08018c38 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8018c38:	b40c      	push	{r2, r3}
 8018c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c3c:	ab06      	add	r3, sp, #24
 8018c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c42:	9301      	str	r3, [sp, #4]
 8018c44:	4b09      	ldr	r3, [pc, #36]	; (8018c6c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8018c46:	685d      	ldr	r5, [r3, #4]
 8018c48:	106c      	asrs	r4, r5, #1
 8018c4a:	07ed      	lsls	r5, r5, #31
 8018c4c:	eb00 0604 	add.w	r6, r0, r4
 8018c50:	bf45      	ittet	mi
 8018c52:	681b      	ldrmi	r3, [r3, #0]
 8018c54:	5900      	ldrmi	r0, [r0, r4]
 8018c56:	681c      	ldrpl	r4, [r3, #0]
 8018c58:	58c4      	ldrmi	r4, [r0, r3]
 8018c5a:	4630      	mov	r0, r6
 8018c5c:	9b01      	ldr	r3, [sp, #4]
 8018c5e:	47a0      	blx	r4
 8018c60:	b002      	add	sp, #8
 8018c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c66:	b002      	add	sp, #8
 8018c68:	4770      	bx	lr
 8018c6a:	bf00      	nop
 8018c6c:	20000028 	.word	0x20000028

08018c70 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018c70:	b40e      	push	{r1, r2, r3}
 8018c72:	b530      	push	{r4, r5, lr}
 8018c74:	b098      	sub	sp, #96	; 0x60
 8018c76:	4604      	mov	r4, r0
 8018c78:	ab1b      	add	r3, sp, #108	; 0x6c
 8018c7a:	a802      	add	r0, sp, #8
 8018c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018c80:	9301      	str	r3, [sp, #4]
 8018c82:	f001 f837 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8018c86:	6823      	ldr	r3, [r4, #0]
 8018c88:	4620      	mov	r0, r4
 8018c8a:	2401      	movs	r4, #1
 8018c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c8e:	4798      	blx	r3
 8018c90:	9a01      	ldr	r2, [sp, #4]
 8018c92:	4603      	mov	r3, r0
 8018c94:	4629      	mov	r1, r5
 8018c96:	a802      	add	r0, sp, #8
 8018c98:	f001 f849 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018c9c:	a802      	add	r0, sp, #8
 8018c9e:	f001 f87f 	bl	8019da0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018ca2:	b2a3      	uxth	r3, r4
 8018ca4:	b138      	cbz	r0, 8018cb6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8018ca6:	280a      	cmp	r0, #10
 8018ca8:	a802      	add	r0, sp, #8
 8018caa:	bf04      	itt	eq
 8018cac:	3301      	addeq	r3, #1
 8018cae:	b21c      	sxtheq	r4, r3
 8018cb0:	f001 f876 	bl	8019da0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018cb4:	e7f5      	b.n	8018ca2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	b018      	add	sp, #96	; 0x60
 8018cba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018cbe:	b003      	add	sp, #12
 8018cc0:	4770      	bx	lr
	...

08018cc4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018cc4:	b40e      	push	{r1, r2, r3}
 8018cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cc8:	b098      	sub	sp, #96	; 0x60
 8018cca:	4605      	mov	r5, r0
 8018ccc:	4f25      	ldr	r7, [pc, #148]	; (8018d64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8018cce:	ab1d      	add	r3, sp, #116	; 0x74
 8018cd0:	a802      	add	r0, sp, #8
 8018cd2:	ae18      	add	r6, sp, #96	; 0x60
 8018cd4:	f853 4b04 	ldr.w	r4, [r3], #4
 8018cd8:	9300      	str	r3, [sp, #0]
 8018cda:	f001 f80b 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8018cde:	682b      	ldr	r3, [r5, #0]
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ce4:	4798      	blx	r3
 8018ce6:	4621      	mov	r1, r4
 8018ce8:	2400      	movs	r4, #0
 8018cea:	4603      	mov	r3, r0
 8018cec:	9a00      	ldr	r2, [sp, #0]
 8018cee:	a802      	add	r0, sp, #8
 8018cf0:	f001 f81d 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018cf4:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8018cf8:	462a      	mov	r2, r5
 8018cfa:	4633      	mov	r3, r6
 8018cfc:	4621      	mov	r1, r4
 8018cfe:	a802      	add	r0, sp, #8
 8018d00:	f001 f97a 	bl	8019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d04:	b340      	cbz	r0, 8018d58 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8018d06:	280a      	cmp	r0, #10
 8018d08:	d01f      	beq.n	8018d4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018d0a:	9901      	ldr	r1, [sp, #4]
 8018d0c:	b1e9      	cbz	r1, 8018d4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018d0e:	7b4b      	ldrb	r3, [r1, #13]
 8018d10:	f891 c008 	ldrb.w	ip, [r1, #8]
 8018d14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018d18:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8018d1c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018d20:	79c9      	ldrb	r1, [r1, #7]
 8018d22:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8018d26:	bf18      	it	ne
 8018d28:	4638      	movne	r0, r7
 8018d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d2e:	bf08      	it	eq
 8018d30:	2000      	moveq	r0, #0
 8018d32:	88aa      	ldrh	r2, [r5, #4]
 8018d34:	ea41 010e 	orr.w	r1, r1, lr
 8018d38:	ea43 030c 	orr.w	r3, r3, ip
 8018d3c:	440a      	add	r2, r1
 8018d3e:	4303      	orrs	r3, r0
 8018d40:	1ad3      	subs	r3, r2, r3
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	42a3      	cmp	r3, r4
 8018d46:	bfc8      	it	gt
 8018d48:	b21c      	sxthgt	r4, r3
 8018d4a:	4633      	mov	r3, r6
 8018d4c:	462a      	mov	r2, r5
 8018d4e:	2100      	movs	r1, #0
 8018d50:	a802      	add	r0, sp, #8
 8018d52:	f001 f951 	bl	8019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d56:	e7d5      	b.n	8018d04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8018d58:	b2a0      	uxth	r0, r4
 8018d5a:	b018      	add	sp, #96	; 0x60
 8018d5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018d60:	b003      	add	sp, #12
 8018d62:	4770      	bx	lr
 8018d64:	fffffe00 	.word	0xfffffe00

08018d68 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018d68:	b40e      	push	{r1, r2, r3}
 8018d6a:	b570      	push	{r4, r5, r6, lr}
 8018d6c:	b099      	sub	sp, #100	; 0x64
 8018d6e:	4604      	mov	r4, r0
 8018d70:	26ff      	movs	r6, #255	; 0xff
 8018d72:	ab1d      	add	r3, sp, #116	; 0x74
 8018d74:	a802      	add	r0, sp, #8
 8018d76:	f853 5b04 	ldr.w	r5, [r3], #4
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	f000 ffba 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8018d80:	6823      	ldr	r3, [r4, #0]
 8018d82:	4620      	mov	r0, r4
 8018d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d86:	4798      	blx	r3
 8018d88:	4629      	mov	r1, r5
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	9a00      	ldr	r2, [sp, #0]
 8018d8e:	a802      	add	r0, sp, #8
 8018d90:	ad18      	add	r5, sp, #96	; 0x60
 8018d92:	f000 ffcc 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018d96:	2100      	movs	r1, #0
 8018d98:	4622      	mov	r2, r4
 8018d9a:	a802      	add	r0, sp, #8
 8018d9c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8018da0:	462b      	mov	r3, r5
 8018da2:	f001 f929 	bl	8019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018da6:	b190      	cbz	r0, 8018dce <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8018da8:	280a      	cmp	r0, #10
 8018daa:	d009      	beq.n	8018dc0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018dac:	9a01      	ldr	r2, [sp, #4]
 8018dae:	b13a      	cbz	r2, 8018dc0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018db0:	7923      	ldrb	r3, [r4, #4]
 8018db2:	7a12      	ldrb	r2, [r2, #8]
 8018db4:	1a9b      	subs	r3, r3, r2
 8018db6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8018dba:	429e      	cmp	r6, r3
 8018dbc:	bf28      	it	cs
 8018dbe:	461e      	movcs	r6, r3
 8018dc0:	462b      	mov	r3, r5
 8018dc2:	4622      	mov	r2, r4
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	a802      	add	r0, sp, #8
 8018dc8:	f001 f916 	bl	8019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018dcc:	e7eb      	b.n	8018da6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8018dce:	4630      	mov	r0, r6
 8018dd0:	b019      	add	sp, #100	; 0x64
 8018dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dd6:	b003      	add	sp, #12
 8018dd8:	4770      	bx	lr

08018dda <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018dda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dde:	b099      	sub	sp, #100	; 0x64
 8018de0:	4606      	mov	r6, r0
 8018de2:	4614      	mov	r4, r2
 8018de4:	4688      	mov	r8, r1
 8018de6:	a802      	add	r0, sp, #8
 8018de8:	461d      	mov	r5, r3
 8018dea:	f04f 0b00 	mov.w	fp, #0
 8018dee:	f000 ff81 	bl	8019cf4 <_ZN8touchgfx12TextProviderC1Ev>
 8018df2:	6833      	ldr	r3, [r6, #0]
 8018df4:	4630      	mov	r0, r6
 8018df6:	465f      	mov	r7, fp
 8018df8:	46da      	mov	sl, fp
 8018dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dfc:	46d9      	mov	r9, fp
 8018dfe:	4798      	blx	r3
 8018e00:	462a      	mov	r2, r5
 8018e02:	4603      	mov	r3, r0
 8018e04:	4621      	mov	r1, r4
 8018e06:	a802      	add	r0, sp, #8
 8018e08:	f000 ff91 	bl	8019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018e0c:	ab01      	add	r3, sp, #4
 8018e0e:	4632      	mov	r2, r6
 8018e10:	4641      	mov	r1, r8
 8018e12:	a802      	add	r0, sp, #8
 8018e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8018e18:	f001 f8ee 	bl	8019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e1c:	4605      	mov	r5, r0
 8018e1e:	b108      	cbz	r0, 8018e24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8018e20:	280a      	cmp	r0, #10
 8018e22:	d10b      	bne.n	8018e3c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8018e24:	4557      	cmp	r7, sl
 8018e26:	bf38      	it	cc
 8018e28:	4657      	movcc	r7, sl
 8018e2a:	f04f 0a00 	mov.w	sl, #0
 8018e2e:	b91d      	cbnz	r5, 8018e38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8018e30:	4638      	mov	r0, r7
 8018e32:	b019      	add	sp, #100	; 0x64
 8018e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e38:	46ab      	mov	fp, r5
 8018e3a:	e7e7      	b.n	8018e0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8018e3c:	9a01      	ldr	r2, [sp, #4]
 8018e3e:	2a00      	cmp	r2, #0
 8018e40:	d0fa      	beq.n	8018e38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8018e42:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8018e46:	4659      	mov	r1, fp
 8018e48:	6833      	ldr	r3, [r6, #0]
 8018e4a:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8018e4e:	7a94      	ldrb	r4, [r2, #10]
 8018e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e52:	4304      	orrs	r4, r0
 8018e54:	4630      	mov	r0, r6
 8018e56:	8895      	ldrh	r5, [r2, #4]
 8018e58:	4798      	blx	r3
 8018e5a:	4420      	add	r0, r4
 8018e5c:	4450      	add	r0, sl
 8018e5e:	fa1f fa80 	uxth.w	sl, r0
 8018e62:	e7e4      	b.n	8018e2e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08018e64 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018e64:	b513      	push	{r0, r1, r4, lr}
 8018e66:	1d01      	adds	r1, r0, #4
 8018e68:	4603      	mov	r3, r0
 8018e6a:	466a      	mov	r2, sp
 8018e6c:	c903      	ldmia	r1, {r0, r1}
 8018e6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8018e72:	2100      	movs	r1, #0
 8018e74:	4618      	mov	r0, r3
 8018e76:	9100      	str	r1, [sp, #0]
 8018e78:	6819      	ldr	r1, [r3, #0]
 8018e7a:	690c      	ldr	r4, [r1, #16]
 8018e7c:	4611      	mov	r1, r2
 8018e7e:	47a0      	blx	r4
 8018e80:	b002      	add	sp, #8
 8018e82:	bd10      	pop	{r4, pc}

08018e84 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018e84:	b538      	push	{r3, r4, r5, lr}
 8018e86:	680b      	ldr	r3, [r1, #0]
 8018e88:	460c      	mov	r4, r1
 8018e8a:	4605      	mov	r5, r0
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	4798      	blx	r3
 8018e90:	6823      	ldr	r3, [r4, #0]
 8018e92:	4620      	mov	r0, r4
 8018e94:	4629      	mov	r1, r5
 8018e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e98:	4798      	blx	r3
 8018e9a:	4628      	mov	r0, r5
 8018e9c:	bd38      	pop	{r3, r4, r5, pc}

08018e9e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018e9e:	b410      	push	{r4}
 8018ea0:	880a      	ldrh	r2, [r1, #0]
 8018ea2:	8884      	ldrh	r4, [r0, #4]
 8018ea4:	4422      	add	r2, r4
 8018ea6:	800a      	strh	r2, [r1, #0]
 8018ea8:	884a      	ldrh	r2, [r1, #2]
 8018eaa:	88c4      	ldrh	r4, [r0, #6]
 8018eac:	4422      	add	r2, r4
 8018eae:	804a      	strh	r2, [r1, #2]
 8018eb0:	6940      	ldr	r0, [r0, #20]
 8018eb2:	b120      	cbz	r0, 8018ebe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018eb4:	6803      	ldr	r3, [r0, #0]
 8018eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ebc:	4718      	bx	r3
 8018ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ec2:	4770      	bx	lr

08018ec4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ec6:	460b      	mov	r3, r1
 8018ec8:	b085      	sub	sp, #20
 8018eca:	4604      	mov	r4, r0
 8018ecc:	b901      	cbnz	r1, 8018ed0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018ece:	b1fa      	cbz	r2, 8018f10 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8018ed0:	1d27      	adds	r7, r4, #4
 8018ed2:	466e      	mov	r6, sp
 8018ed4:	ad02      	add	r5, sp, #8
 8018ed6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018eda:	e886 0003 	stmia.w	r6, {r0, r1}
 8018ede:	88e1      	ldrh	r1, [r4, #6]
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	440a      	add	r2, r1
 8018ee4:	88a1      	ldrh	r1, [r4, #4]
 8018ee6:	4419      	add	r1, r3
 8018ee8:	6823      	ldr	r3, [r4, #0]
 8018eea:	b212      	sxth	r2, r2
 8018eec:	b209      	sxth	r1, r1
 8018eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ef0:	4798      	blx	r3
 8018ef2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018ef6:	e885 0003 	stmia.w	r5, {r0, r1}
 8018efa:	6960      	ldr	r0, [r4, #20]
 8018efc:	b150      	cbz	r0, 8018f14 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8018efe:	6803      	ldr	r3, [r0, #0]
 8018f00:	4631      	mov	r1, r6
 8018f02:	691b      	ldr	r3, [r3, #16]
 8018f04:	4798      	blx	r3
 8018f06:	6960      	ldr	r0, [r4, #20]
 8018f08:	6803      	ldr	r3, [r0, #0]
 8018f0a:	691b      	ldr	r3, [r3, #16]
 8018f0c:	4629      	mov	r1, r5
 8018f0e:	4798      	blx	r3
 8018f10:	b005      	add	sp, #20
 8018f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f14:	f7ff fb78 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 8018f18:	6803      	ldr	r3, [r0, #0]
 8018f1a:	4631      	mov	r1, r6
 8018f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f1e:	4798      	blx	r3
 8018f20:	f7ff fb72 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 8018f24:	6803      	ldr	r3, [r0, #0]
 8018f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f28:	e7f0      	b.n	8018f0c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08018f2a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018f2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f2c:	8882      	ldrh	r2, [r0, #4]
 8018f2e:	4605      	mov	r5, r0
 8018f30:	880b      	ldrh	r3, [r1, #0]
 8018f32:	460c      	mov	r4, r1
 8018f34:	4413      	add	r3, r2
 8018f36:	800b      	strh	r3, [r1, #0]
 8018f38:	884b      	ldrh	r3, [r1, #2]
 8018f3a:	88c2      	ldrh	r2, [r0, #6]
 8018f3c:	4413      	add	r3, r2
 8018f3e:	4602      	mov	r2, r0
 8018f40:	804b      	strh	r3, [r1, #2]
 8018f42:	466b      	mov	r3, sp
 8018f44:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018f48:	6851      	ldr	r1, [r2, #4]
 8018f4a:	c303      	stmia	r3!, {r0, r1}
 8018f4c:	4621      	mov	r1, r4
 8018f4e:	4668      	mov	r0, sp
 8018f50:	f7fc f9ee 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8018f54:	466b      	mov	r3, sp
 8018f56:	cb03      	ldmia	r3!, {r0, r1}
 8018f58:	6020      	str	r0, [r4, #0]
 8018f5a:	6061      	str	r1, [r4, #4]
 8018f5c:	6968      	ldr	r0, [r5, #20]
 8018f5e:	b128      	cbz	r0, 8018f6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8018f60:	6803      	ldr	r3, [r0, #0]
 8018f62:	691b      	ldr	r3, [r3, #16]
 8018f64:	4621      	mov	r1, r4
 8018f66:	4798      	blx	r3
 8018f68:	b003      	add	sp, #12
 8018f6a:	bd30      	pop	{r4, r5, pc}
 8018f6c:	f7ff fb4c 	bl	8018608 <_ZN8touchgfx11Application11getInstanceEv>
 8018f70:	6803      	ldr	r3, [r0, #0]
 8018f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f74:	e7f6      	b.n	8018f64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08018f76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018f76:	b570      	push	{r4, r5, r6, lr}
 8018f78:	8882      	ldrh	r2, [r0, #4]
 8018f7a:	460c      	mov	r4, r1
 8018f7c:	880b      	ldrh	r3, [r1, #0]
 8018f7e:	4605      	mov	r5, r0
 8018f80:	4413      	add	r3, r2
 8018f82:	800b      	strh	r3, [r1, #0]
 8018f84:	884b      	ldrh	r3, [r1, #2]
 8018f86:	88c2      	ldrh	r2, [r0, #6]
 8018f88:	4413      	add	r3, r2
 8018f8a:	804b      	strh	r3, [r1, #2]
 8018f8c:	1d01      	adds	r1, r0, #4
 8018f8e:	4620      	mov	r0, r4
 8018f90:	f7fc f9ce 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8018f94:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018f98:	b153      	cbz	r3, 8018fb0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018f9a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018f9e:	b13b      	cbz	r3, 8018fb0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018fa0:	6968      	ldr	r0, [r5, #20]
 8018fa2:	b128      	cbz	r0, 8018fb0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018fa4:	6803      	ldr	r3, [r0, #0]
 8018fa6:	4621      	mov	r1, r4
 8018fa8:	6a1b      	ldr	r3, [r3, #32]
 8018faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fae:	4718      	bx	r3
 8018fb0:	bd70      	pop	{r4, r5, r6, pc}

08018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018fb2:	b510      	push	{r4, lr}
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	4604      	mov	r4, r0
 8018fb8:	4608      	mov	r0, r1
 8018fba:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018fbe:	8023      	strh	r3, [r4, #0]
 8018fc0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018fc4:	8063      	strh	r3, [r4, #2]
 8018fc6:	6803      	ldr	r3, [r0, #0]
 8018fc8:	80a1      	strh	r1, [r4, #4]
 8018fca:	4621      	mov	r1, r4
 8018fcc:	80e2      	strh	r2, [r4, #6]
 8018fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd0:	4798      	blx	r3
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	bd10      	pop	{r4, pc}
	...

08018fd8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018fd8:	b530      	push	{r4, r5, lr}
 8018fda:	8083      	strh	r3, [r0, #4]
 8018fdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018fe0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018fe4:	7183      	strb	r3, [r0, #6]
 8018fe6:	79c3      	ldrb	r3, [r0, #7]
 8018fe8:	6101      	str	r1, [r0, #16]
 8018fea:	f365 0306 	bfi	r3, r5, #0, #7
 8018fee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018ff2:	8282      	strh	r2, [r0, #20]
 8018ff4:	f365 13c7 	bfi	r3, r5, #7, #1
 8018ff8:	71c3      	strb	r3, [r0, #7]
 8018ffa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018ffe:	7203      	strb	r3, [r0, #8]
 8019000:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019004:	7243      	strb	r3, [r0, #9]
 8019006:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801900a:	8143      	strh	r3, [r0, #10]
 801900c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019010:	8183      	strh	r3, [r0, #12]
 8019012:	4b01      	ldr	r3, [pc, #4]	; (8019018 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019014:	6003      	str	r3, [r0, #0]
 8019016:	bd30      	pop	{r4, r5, pc}
 8019018:	0802803c 	.word	0x0802803c

0801901c <_ZNK8touchgfx9ConstFont4findEt>:
 801901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801901e:	8a84      	ldrh	r4, [r0, #20]
 8019020:	2500      	movs	r5, #0
 8019022:	260e      	movs	r6, #14
 8019024:	3c01      	subs	r4, #1
 8019026:	42a5      	cmp	r5, r4
 8019028:	dc0c      	bgt.n	8019044 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801902a:	192a      	adds	r2, r5, r4
 801902c:	6903      	ldr	r3, [r0, #16]
 801902e:	1052      	asrs	r2, r2, #1
 8019030:	fb06 3302 	mla	r3, r6, r2, r3
 8019034:	889f      	ldrh	r7, [r3, #4]
 8019036:	428f      	cmp	r7, r1
 8019038:	d901      	bls.n	801903e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801903a:	1e54      	subs	r4, r2, #1
 801903c:	e7f3      	b.n	8019026 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801903e:	d202      	bcs.n	8019046 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019040:	1c55      	adds	r5, r2, #1
 8019042:	e7f0      	b.n	8019026 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019044:	2300      	movs	r3, #0
 8019046:	4618      	mov	r0, r3
 8019048:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801904a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801904a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801904c:	4605      	mov	r5, r0
 801904e:	4617      	mov	r7, r2
 8019050:	461e      	mov	r6, r3
 8019052:	f7ff ffe3 	bl	801901c <_ZNK8touchgfx9ConstFont4findEt>
 8019056:	b9e0      	cbnz	r0, 8019092 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019058:	b911      	cbnz	r1, 8019060 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801905a:	2400      	movs	r4, #0
 801905c:	4620      	mov	r0, r4
 801905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019060:	290a      	cmp	r1, #10
 8019062:	d0fa      	beq.n	801905a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019064:	682b      	ldr	r3, [r5, #0]
 8019066:	4628      	mov	r0, r5
 8019068:	691b      	ldr	r3, [r3, #16]
 801906a:	4798      	blx	r3
 801906c:	4601      	mov	r1, r0
 801906e:	4628      	mov	r0, r5
 8019070:	f7ff ffd4 	bl	801901c <_ZNK8touchgfx9ConstFont4findEt>
 8019074:	4604      	mov	r4, r0
 8019076:	2800      	cmp	r0, #0
 8019078:	d0ef      	beq.n	801905a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801907a:	682b      	ldr	r3, [r5, #0]
 801907c:	4621      	mov	r1, r4
 801907e:	4628      	mov	r0, r5
 8019080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019082:	4798      	blx	r3
 8019084:	6038      	str	r0, [r7, #0]
 8019086:	682b      	ldr	r3, [r5, #0]
 8019088:	4628      	mov	r0, r5
 801908a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801908c:	4798      	blx	r3
 801908e:	7030      	strb	r0, [r6, #0]
 8019090:	e7e4      	b.n	801905c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8019092:	4604      	mov	r4, r0
 8019094:	e7f1      	b.n	801907a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019096 <_ZN8touchgfx6memsetEPvhm>:
 8019096:	4402      	add	r2, r0
 8019098:	4290      	cmp	r0, r2
 801909a:	d002      	beq.n	80190a2 <_ZN8touchgfx6memsetEPvhm+0xc>
 801909c:	f800 1b01 	strb.w	r1, [r0], #1
 80190a0:	e7fa      	b.n	8019098 <_ZN8touchgfx6memsetEPvhm+0x2>
 80190a2:	4770      	bx	lr

080190a4 <_ZN8touchgfx3clzEl>:
 80190a4:	b1e8      	cbz	r0, 80190e2 <_ZN8touchgfx3clzEl+0x3e>
 80190a6:	2800      	cmp	r0, #0
 80190a8:	bfb8      	it	lt
 80190aa:	4240      	neglt	r0, r0
 80190ac:	0c03      	lsrs	r3, r0, #16
 80190ae:	041b      	lsls	r3, r3, #16
 80190b0:	b9ab      	cbnz	r3, 80190de <_ZN8touchgfx3clzEl+0x3a>
 80190b2:	0400      	lsls	r0, r0, #16
 80190b4:	2310      	movs	r3, #16
 80190b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80190ba:	bf04      	itt	eq
 80190bc:	0200      	lsleq	r0, r0, #8
 80190be:	3308      	addeq	r3, #8
 80190c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80190c4:	bf04      	itt	eq
 80190c6:	0100      	lsleq	r0, r0, #4
 80190c8:	3304      	addeq	r3, #4
 80190ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80190ce:	bf04      	itt	eq
 80190d0:	0080      	lsleq	r0, r0, #2
 80190d2:	3302      	addeq	r3, #2
 80190d4:	2800      	cmp	r0, #0
 80190d6:	bfa8      	it	ge
 80190d8:	3301      	addge	r3, #1
 80190da:	1e58      	subs	r0, r3, #1
 80190dc:	4770      	bx	lr
 80190de:	2300      	movs	r3, #0
 80190e0:	e7e9      	b.n	80190b6 <_ZN8touchgfx3clzEl+0x12>
 80190e2:	201f      	movs	r0, #31
 80190e4:	4770      	bx	lr

080190e6 <_ZN8touchgfx6muldivElllRl>:
 80190e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190ea:	4604      	mov	r4, r0
 80190ec:	4698      	mov	r8, r3
 80190ee:	2601      	movs	r6, #1
 80190f0:	f7ff ffd8 	bl	80190a4 <_ZN8touchgfx3clzEl>
 80190f4:	2c00      	cmp	r4, #0
 80190f6:	fa04 f500 	lsl.w	r5, r4, r0
 80190fa:	fa06 f600 	lsl.w	r6, r6, r0
 80190fe:	bfba      	itte	lt
 8019100:	f04f 37ff 	movlt.w	r7, #4294967295
 8019104:	4264      	neglt	r4, r4
 8019106:	2701      	movge	r7, #1
 8019108:	2900      	cmp	r1, #0
 801910a:	f106 36ff 	add.w	r6, r6, #4294967295
 801910e:	bfbc      	itt	lt
 8019110:	4249      	neglt	r1, r1
 8019112:	427f      	neglt	r7, r7
 8019114:	2a00      	cmp	r2, #0
 8019116:	fa41 fc00 	asr.w	ip, r1, r0
 801911a:	ea01 0106 	and.w	r1, r1, r6
 801911e:	bfb8      	it	lt
 8019120:	427f      	neglt	r7, r7
 8019122:	fb04 f401 	mul.w	r4, r4, r1
 8019126:	fb95 f3f2 	sdiv	r3, r5, r2
 801912a:	fb02 5513 	mls	r5, r2, r3, r5
 801912e:	bfb8      	it	lt
 8019130:	4252      	neglt	r2, r2
 8019132:	fb94 f0f2 	sdiv	r0, r4, r2
 8019136:	fb02 4410 	mls	r4, r2, r0, r4
 801913a:	fb0c 4405 	mla	r4, ip, r5, r4
 801913e:	fb94 f1f2 	sdiv	r1, r4, r2
 8019142:	4408      	add	r0, r1
 8019144:	fb02 4211 	mls	r2, r2, r1, r4
 8019148:	fb0c 0003 	mla	r0, ip, r3, r0
 801914c:	f8c8 2000 	str.w	r2, [r8]
 8019150:	4378      	muls	r0, r7
 8019152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019156 <_ZN8touchgfx10ClickEventD1Ev>:
 8019156:	4770      	bx	lr

08019158 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019158:	2000      	movs	r0, #0
 801915a:	4770      	bx	lr

0801915c <_ZN8touchgfx9DragEventD1Ev>:
 801915c:	4770      	bx	lr

0801915e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801915e:	2001      	movs	r0, #1
 8019160:	4770      	bx	lr

08019162 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019162:	2002      	movs	r0, #2
 8019164:	4770      	bx	lr

08019166 <_ZN8touchgfx12GestureEventD1Ev>:
 8019166:	4770      	bx	lr

08019168 <_ZN8touchgfx10ClickEventD0Ev>:
 8019168:	b510      	push	{r4, lr}
 801916a:	4604      	mov	r4, r0
 801916c:	210c      	movs	r1, #12
 801916e:	f00b fa14 	bl	802459a <_ZdlPvj>
 8019172:	4620      	mov	r0, r4
 8019174:	bd10      	pop	{r4, pc}

08019176 <_ZN8touchgfx9DragEventD0Ev>:
 8019176:	b510      	push	{r4, lr}
 8019178:	4604      	mov	r4, r0
 801917a:	2110      	movs	r1, #16
 801917c:	f00b fa0d 	bl	802459a <_ZdlPvj>
 8019180:	4620      	mov	r0, r4
 8019182:	bd10      	pop	{r4, pc}

08019184 <_ZN8touchgfx12GestureEventD0Ev>:
 8019184:	b510      	push	{r4, lr}
 8019186:	4604      	mov	r4, r0
 8019188:	210c      	movs	r1, #12
 801918a:	f00b fa06 	bl	802459a <_ZdlPvj>
 801918e:	4620      	mov	r0, r4
 8019190:	bd10      	pop	{r4, pc}
	...

08019194 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019194:	b530      	push	{r4, r5, lr}
 8019196:	460d      	mov	r5, r1
 8019198:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801919a:	b087      	sub	sp, #28
 801919c:	4604      	mov	r4, r0
 801919e:	b301      	cbz	r1, 80191e2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80191a0:	a801      	add	r0, sp, #4
 80191a2:	f7ff ff06 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80191a6:	892a      	ldrh	r2, [r5, #8]
 80191a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80191ac:	7928      	ldrb	r0, [r5, #4]
 80191ae:	1ad2      	subs	r2, r2, r3
 80191b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80191b2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80191b6:	441a      	add	r2, r3
 80191b8:	896b      	ldrh	r3, [r5, #10]
 80191ba:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80191be:	f88d 0010 	strb.w	r0, [sp, #16]
 80191c2:	1b5b      	subs	r3, r3, r5
 80191c4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80191c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80191c8:	442b      	add	r3, r5
 80191ca:	4d07      	ldr	r5, [pc, #28]	; (80191e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80191cc:	f8ad 1012 	strh.w	r1, [sp, #18]
 80191d0:	a903      	add	r1, sp, #12
 80191d2:	9503      	str	r5, [sp, #12]
 80191d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80191d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191dc:	6803      	ldr	r3, [r0, #0]
 80191de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191e0:	4798      	blx	r3
 80191e2:	b007      	add	sp, #28
 80191e4:	bd30      	pop	{r4, r5, pc}
 80191e6:	bf00      	nop
 80191e8:	080280b8 	.word	0x080280b8

080191ec <_ZNK8touchgfx4Rect9intersectEss>:
 80191ec:	b510      	push	{r4, lr}
 80191ee:	f9b0 3000 	ldrsh.w	r3, [r0]
 80191f2:	428b      	cmp	r3, r1
 80191f4:	dc10      	bgt.n	8019218 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80191f6:	8884      	ldrh	r4, [r0, #4]
 80191f8:	4423      	add	r3, r4
 80191fa:	b21b      	sxth	r3, r3
 80191fc:	4299      	cmp	r1, r3
 80191fe:	da0b      	bge.n	8019218 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019200:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019204:	4293      	cmp	r3, r2
 8019206:	dc07      	bgt.n	8019218 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019208:	88c0      	ldrh	r0, [r0, #6]
 801920a:	4418      	add	r0, r3
 801920c:	b200      	sxth	r0, r0
 801920e:	4282      	cmp	r2, r0
 8019210:	bfac      	ite	ge
 8019212:	2000      	movge	r0, #0
 8019214:	2001      	movlt	r0, #1
 8019216:	bd10      	pop	{r4, pc}
 8019218:	2000      	movs	r0, #0
 801921a:	e7fc      	b.n	8019216 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801921c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801921c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801921e:	460c      	mov	r4, r1
 8019220:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019222:	b089      	sub	sp, #36	; 0x24
 8019224:	4605      	mov	r5, r0
 8019226:	2900      	cmp	r1, #0
 8019228:	d054      	beq.n	80192d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801922a:	4668      	mov	r0, sp
 801922c:	f7ff fec1 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019230:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019232:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019234:	4668      	mov	r0, sp
 8019236:	8922      	ldrh	r2, [r4, #8]
 8019238:	88e1      	ldrh	r1, [r4, #6]
 801923a:	443a      	add	r2, r7
 801923c:	4431      	add	r1, r6
 801923e:	b212      	sxth	r2, r2
 8019240:	b209      	sxth	r1, r1
 8019242:	f7ff ffd3 	bl	80191ec <_ZNK8touchgfx4Rect9intersectEss>
 8019246:	b1d0      	cbz	r0, 801927e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019248:	89a2      	ldrh	r2, [r4, #12]
 801924a:	4668      	mov	r0, sp
 801924c:	8961      	ldrh	r1, [r4, #10]
 801924e:	443a      	add	r2, r7
 8019250:	4431      	add	r1, r6
 8019252:	b212      	sxth	r2, r2
 8019254:	b209      	sxth	r1, r1
 8019256:	f7ff ffc9 	bl	80191ec <_ZNK8touchgfx4Rect9intersectEss>
 801925a:	4603      	mov	r3, r0
 801925c:	b978      	cbnz	r0, 801927e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801925e:	4a1e      	ldr	r2, [pc, #120]	; (80192d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019260:	a904      	add	r1, sp, #16
 8019262:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019264:	9204      	str	r2, [sp, #16]
 8019266:	2202      	movs	r2, #2
 8019268:	f8ad 3016 	strh.w	r3, [sp, #22]
 801926c:	f88d 2014 	strb.w	r2, [sp, #20]
 8019270:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019274:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019278:	6803      	ldr	r3, [r0, #0]
 801927a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801927c:	4798      	blx	r3
 801927e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019280:	a802      	add	r0, sp, #8
 8019282:	f7ff fe96 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019286:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801928a:	88e0      	ldrh	r0, [r4, #6]
 801928c:	8961      	ldrh	r1, [r4, #10]
 801928e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019292:	1a80      	subs	r0, r0, r2
 8019294:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019298:	1a89      	subs	r1, r1, r2
 801929a:	8923      	ldrh	r3, [r4, #8]
 801929c:	4460      	add	r0, ip
 801929e:	89a2      	ldrh	r2, [r4, #12]
 80192a0:	4461      	add	r1, ip
 80192a2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80192a4:	eba3 030e 	sub.w	r3, r3, lr
 80192a8:	eba2 020e 	sub.w	r2, r2, lr
 80192ac:	f8ad 0016 	strh.w	r0, [sp, #22]
 80192b0:	7927      	ldrb	r7, [r4, #4]
 80192b2:	4433      	add	r3, r6
 80192b4:	4432      	add	r2, r6
 80192b6:	4c09      	ldr	r4, [pc, #36]	; (80192dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80192b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80192ba:	f8ad 101a 	strh.w	r1, [sp, #26]
 80192be:	a904      	add	r1, sp, #16
 80192c0:	9404      	str	r4, [sp, #16]
 80192c2:	f88d 7014 	strb.w	r7, [sp, #20]
 80192c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80192ca:	f8ad 201c 	strh.w	r2, [sp, #28]
 80192ce:	6803      	ldr	r3, [r0, #0]
 80192d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80192d2:	4798      	blx	r3
 80192d4:	b009      	add	sp, #36	; 0x24
 80192d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192d8:	08028090 	.word	0x08028090
 80192dc:	080280a4 	.word	0x080280a4

080192e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80192e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e4:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80192e8:	b0a1      	sub	sp, #132	; 0x84
 80192ea:	4604      	mov	r4, r0
 80192ec:	460d      	mov	r5, r1
 80192ee:	790b      	ldrb	r3, [r1, #4]
 80192f0:	f1b9 0f00 	cmp.w	r9, #0
 80192f4:	d00f      	beq.n	8019316 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	f040 80a2 	bne.w	8019440 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 80192fc:	b021      	add	sp, #132	; 0x84
 80192fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019302:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019306:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801930a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801930e:	1d20      	adds	r0, r4, #4
 8019310:	f7fb ff5c 	bl	80151cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019314:	e094      	b.n	8019440 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019316:	2b00      	cmp	r3, #0
 8019318:	d1f0      	bne.n	80192fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801931a:	4b5f      	ldr	r3, [pc, #380]	; (8019498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019322:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019326:	f1ba 0f03 	cmp.w	sl, #3
 801932a:	ddea      	ble.n	8019302 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801932c:	f1ba 0f0c 	cmp.w	sl, #12
 8019330:	f04f 0303 	mov.w	r3, #3
 8019334:	f04f 0600 	mov.w	r6, #0
 8019338:	4958      	ldr	r1, [pc, #352]	; (801949c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801933a:	bfd8      	it	le
 801933c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019340:	960a      	str	r6, [sp, #40]	; 0x28
 8019342:	bfd8      	it	le
 8019344:	fb92 f3f3 	sdivle	r3, r2, r3
 8019348:	9301      	str	r3, [sp, #4]
 801934a:	4b55      	ldr	r3, [pc, #340]	; (80194a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801934c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019350:	4b54      	ldr	r3, [pc, #336]	; (80194a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019352:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019356:	2248      	movs	r2, #72	; 0x48
 8019358:	f9b3 3000 	ldrsh.w	r3, [r3]
 801935c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019360:	ab0e      	add	r3, sp, #56	; 0x38
 8019362:	4618      	mov	r0, r3
 8019364:	f00b f9c2 	bl	80246ec <memcpy>
 8019368:	f04f 32ff 	mov.w	r2, #4294967295
 801936c:	f8cd a008 	str.w	sl, [sp, #8]
 8019370:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019374:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019378:	46b3      	mov	fp, r6
 801937a:	fb93 f3f2 	sdiv	r3, r3, r2
 801937e:	b29b      	uxth	r3, r3
 8019380:	9303      	str	r3, [sp, #12]
 8019382:	2300      	movs	r3, #0
 8019384:	9a03      	ldr	r2, [sp, #12]
 8019386:	88ef      	ldrh	r7, [r5, #6]
 8019388:	a80a      	add	r0, sp, #40	; 0x28
 801938a:	9309      	str	r3, [sp, #36]	; 0x24
 801938c:	9b07      	ldr	r3, [sp, #28]
 801938e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019392:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019396:	fb13 f302 	smulbb	r3, r3, r2
 801939a:	b29b      	uxth	r3, r3
 801939c:	9304      	str	r3, [sp, #16]
 801939e:	9b07      	ldr	r3, [sp, #28]
 80193a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80193a4:	685b      	ldr	r3, [r3, #4]
 80193a6:	fb13 f302 	smulbb	r3, r3, r2
 80193aa:	b29b      	uxth	r3, r3
 80193ac:	9305      	str	r3, [sp, #20]
 80193ae:	9b04      	ldr	r3, [sp, #16]
 80193b0:	441f      	add	r7, r3
 80193b2:	9b05      	ldr	r3, [sp, #20]
 80193b4:	4498      	add	r8, r3
 80193b6:	b23f      	sxth	r7, r7
 80193b8:	fa0f f888 	sxth.w	r8, r8
 80193bc:	4639      	mov	r1, r7
 80193be:	4642      	mov	r2, r8
 80193c0:	f7ff ff14 	bl	80191ec <_ZNK8touchgfx4Rect9intersectEss>
 80193c4:	b380      	cbz	r0, 8019428 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80193c6:	4639      	mov	r1, r7
 80193c8:	ab09      	add	r3, sp, #36	; 0x24
 80193ca:	4642      	mov	r2, r8
 80193cc:	1d20      	adds	r0, r4, #4
 80193ce:	f7fb fefd 	bl	80151cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80193d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80193d4:	b341      	cbz	r1, 8019428 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80193d6:	4549      	cmp	r1, r9
 80193d8:	d026      	beq.n	8019428 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80193da:	a80c      	add	r0, sp, #48	; 0x30
 80193dc:	f7ff fde9 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193e0:	2002      	movs	r0, #2
 80193e2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80193e6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80193ea:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80193ee:	fb92 f2f0 	sdiv	r2, r2, r0
 80193f2:	440a      	add	r2, r1
 80193f4:	1a99      	subs	r1, r3, r2
 80193f6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80193fa:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80193fe:	fb93 f3f0 	sdiv	r3, r3, r0
 8019402:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019406:	4403      	add	r3, r0
 8019408:	1ad3      	subs	r3, r2, r3
 801940a:	9a06      	ldr	r2, [sp, #24]
 801940c:	435b      	muls	r3, r3
 801940e:	fb01 3301 	mla	r3, r1, r1, r3
 8019412:	4293      	cmp	r3, r2
 8019414:	d208      	bcs.n	8019428 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019416:	9a04      	ldr	r2, [sp, #16]
 8019418:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801941c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801941e:	9a05      	ldr	r2, [sp, #20]
 8019420:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019424:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019426:	9306      	str	r3, [sp, #24]
 8019428:	f10b 0b02 	add.w	fp, fp, #2
 801942c:	f1bb 0f08 	cmp.w	fp, #8
 8019430:	dda7      	ble.n	8019382 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019432:	9b02      	ldr	r3, [sp, #8]
 8019434:	3601      	adds	r6, #1
 8019436:	4453      	add	r3, sl
 8019438:	9302      	str	r3, [sp, #8]
 801943a:	9b01      	ldr	r3, [sp, #4]
 801943c:	42b3      	cmp	r3, r6
 801943e:	d199      	bne.n	8019374 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019440:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019442:	2900      	cmp	r1, #0
 8019444:	f43f af5a 	beq.w	80192fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019448:	a80c      	add	r0, sp, #48	; 0x30
 801944a:	2600      	movs	r6, #0
 801944c:	f7ff fdb1 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019450:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019454:	88ea      	ldrh	r2, [r5, #6]
 8019456:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801945a:	1ad2      	subs	r2, r2, r3
 801945c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801945e:	7929      	ldrb	r1, [r5, #4]
 8019460:	441a      	add	r2, r3
 8019462:	892b      	ldrh	r3, [r5, #8]
 8019464:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019468:	a90e      	add	r1, sp, #56	; 0x38
 801946a:	1a1b      	subs	r3, r3, r0
 801946c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801946e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019472:	4403      	add	r3, r0
 8019474:	480c      	ldr	r0, [pc, #48]	; (80194a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019476:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801947a:	900e      	str	r0, [sp, #56]	; 0x38
 801947c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801947e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019482:	6803      	ldr	r3, [r0, #0]
 8019484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019486:	4798      	blx	r3
 8019488:	792b      	ldrb	r3, [r5, #4]
 801948a:	2b00      	cmp	r3, #0
 801948c:	f43f af36 	beq.w	80192fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019490:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019494:	e732      	b.n	80192fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019496:	bf00      	nop
 8019498:	2000bc68 	.word	0x2000bc68
 801949c:	08025c88 	.word	0x08025c88
 80194a0:	2000bc5c 	.word	0x2000bc5c
 80194a4:	2000bc5e 	.word	0x2000bc5e
 80194a8:	08028090 	.word	0x08028090

080194ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80194ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80194ae:	4604      	mov	r4, r0
 80194b0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80194b4:	3201      	adds	r2, #1
 80194b6:	d112      	bne.n	80194de <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80194b8:	2500      	movs	r5, #0
 80194ba:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80194be:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80194c2:	6803      	ldr	r3, [r0, #0]
 80194c4:	9500      	str	r5, [sp, #0]
 80194c6:	466d      	mov	r5, sp
 80194c8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80194cc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80194d0:	4629      	mov	r1, r5
 80194d2:	6a1b      	ldr	r3, [r3, #32]
 80194d4:	4798      	blx	r3
 80194d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80194da:	e884 0003 	stmia.w	r4, {r0, r1}
 80194de:	4620      	mov	r0, r4
 80194e0:	b003      	add	sp, #12
 80194e2:	bd30      	pop	{r4, r5, pc}

080194e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80194e4:	b513      	push	{r0, r1, r4, lr}
 80194e6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80194ea:	4604      	mov	r4, r0
 80194ec:	3301      	adds	r3, #1
 80194ee:	d109      	bne.n	8019504 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80194f0:	4601      	mov	r1, r0
 80194f2:	4668      	mov	r0, sp
 80194f4:	f7ff fd5d 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80194f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80194fc:	8423      	strh	r3, [r4, #32]
 80194fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019502:	8463      	strh	r3, [r4, #34]	; 0x22
 8019504:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019508:	b002      	add	sp, #8
 801950a:	bd10      	pop	{r4, pc}

0801950c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801950c:	b513      	push	{r0, r1, r4, lr}
 801950e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019512:	4604      	mov	r4, r0
 8019514:	3301      	adds	r3, #1
 8019516:	d109      	bne.n	801952c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019518:	4601      	mov	r1, r0
 801951a:	4668      	mov	r0, sp
 801951c:	f7ff fd49 	bl	8018fb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019520:	f8bd 3000 	ldrh.w	r3, [sp]
 8019524:	8423      	strh	r3, [r4, #32]
 8019526:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801952a:	8463      	strh	r3, [r4, #34]	; 0x22
 801952c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019530:	b002      	add	sp, #8
 8019532:	bd10      	pop	{r4, pc}

08019534 <_ZN8touchgfx6ScreenC1Ev>:
 8019534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019536:	4605      	mov	r5, r0
 8019538:	4b17      	ldr	r3, [pc, #92]	; (8019598 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801953a:	2200      	movs	r2, #0
 801953c:	4917      	ldr	r1, [pc, #92]	; (801959c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801953e:	f845 3b04 	str.w	r3, [r5], #4
 8019542:	2301      	movs	r3, #1
 8019544:	8102      	strh	r2, [r0, #8]
 8019546:	4604      	mov	r4, r0
 8019548:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801954c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019550:	4b13      	ldr	r3, [pc, #76]	; (80195a0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019552:	8142      	strh	r2, [r0, #10]
 8019554:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019558:	4b12      	ldr	r3, [pc, #72]	; (80195a4 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801955a:	8182      	strh	r2, [r0, #12]
 801955c:	81c2      	strh	r2, [r0, #14]
 801955e:	8202      	strh	r2, [r0, #16]
 8019560:	8242      	strh	r2, [r0, #18]
 8019562:	8282      	strh	r2, [r0, #20]
 8019564:	82c2      	strh	r2, [r0, #22]
 8019566:	6202      	str	r2, [r0, #32]
 8019568:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801956c:	6342      	str	r2, [r0, #52]	; 0x34
 801956e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019572:	6041      	str	r1, [r0, #4]
 8019574:	4611      	mov	r1, r2
 8019576:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801957a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801957e:	4628      	mov	r0, r5
 8019580:	f7f6 fe29 	bl	80101d6 <_ZN8touchgfx8Drawable5setXYEss>
 8019584:	4639      	mov	r1, r7
 8019586:	4628      	mov	r0, r5
 8019588:	f7f6 fe43 	bl	8010212 <_ZN8touchgfx8Drawable8setWidthEs>
 801958c:	4628      	mov	r0, r5
 801958e:	4631      	mov	r1, r6
 8019590:	f7f6 fe4e 	bl	8010230 <_ZN8touchgfx8Drawable9setHeightEs>
 8019594:	4620      	mov	r0, r4
 8019596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019598:	080280cc 	.word	0x080280cc
 801959c:	08026da0 	.word	0x08026da0
 80195a0:	2000bc5c 	.word	0x2000bc5c
 80195a4:	2000bc5e 	.word	0x2000bc5e

080195a8 <_ZN8touchgfx6Screen4drawEv>:
 80195a8:	4b09      	ldr	r3, [pc, #36]	; (80195d0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80195aa:	b507      	push	{r0, r1, r2, lr}
 80195ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80195b0:	2100      	movs	r1, #0
 80195b2:	4b08      	ldr	r3, [pc, #32]	; (80195d4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80195b4:	9100      	str	r1, [sp, #0]
 80195b6:	4669      	mov	r1, sp
 80195b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80195bc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80195c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80195c4:	6803      	ldr	r3, [r0, #0]
 80195c6:	689b      	ldr	r3, [r3, #8]
 80195c8:	4798      	blx	r3
 80195ca:	b003      	add	sp, #12
 80195cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80195d0:	2000bc5c 	.word	0x2000bc5c
 80195d4:	2000bc5e 	.word	0x2000bc5e

080195d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80195d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80195e0:	b089      	sub	sp, #36	; 0x24
 80195e2:	4680      	mov	r8, r0
 80195e4:	460c      	mov	r4, r1
 80195e6:	4615      	mov	r5, r2
 80195e8:	b16b      	cbz	r3, 8019606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80195ea:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80195ee:	b153      	cbz	r3, 8019606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80195f0:	4628      	mov	r0, r5
 80195f2:	f7ff ff5b 	bl	80194ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80195f6:	4621      	mov	r1, r4
 80195f8:	f7fe ffc2 	bl	8018580 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80195fc:	69eb      	ldr	r3, [r5, #28]
 80195fe:	b928      	cbnz	r0, 801960c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019600:	461d      	mov	r5, r3
 8019602:	2b00      	cmp	r3, #0
 8019604:	d1f4      	bne.n	80195f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019606:	b009      	add	sp, #36	; 0x24
 8019608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801960c:	ae04      	add	r6, sp, #16
 801960e:	2b00      	cmp	r3, #0
 8019610:	d051      	beq.n	80196b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019612:	682b      	ldr	r3, [r5, #0]
 8019614:	4629      	mov	r1, r5
 8019616:	a802      	add	r0, sp, #8
 8019618:	68db      	ldr	r3, [r3, #12]
 801961a:	4798      	blx	r3
 801961c:	4628      	mov	r0, r5
 801961e:	f7ff ff61 	bl	80194e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019622:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019626:	4407      	add	r7, r0
 8019628:	4628      	mov	r0, r5
 801962a:	f7ff ff6f 	bl	801950c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801962e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019632:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019636:	b23f      	sxth	r7, r7
 8019638:	4418      	add	r0, r3
 801963a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801963e:	4621      	mov	r1, r4
 8019640:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019644:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019648:	4630      	mov	r0, r6
 801964a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801964e:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019652:	f7fb fe6d 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8019656:	4628      	mov	r0, r5
 8019658:	f7ff ff28 	bl	80194ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801965c:	ab06      	add	r3, sp, #24
 801965e:	4602      	mov	r2, r0
 8019660:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019664:	e883 0003 	stmia.w	r3, {r0, r1}
 8019668:	4611      	mov	r1, r2
 801966a:	4618      	mov	r0, r3
 801966c:	f7fb fe60 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 8019670:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019674:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019678:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801967c:	4299      	cmp	r1, r3
 801967e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019682:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019686:	d10b      	bne.n	80196a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019688:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801968c:	4552      	cmp	r2, sl
 801968e:	d107      	bne.n	80196a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019690:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019694:	455a      	cmp	r2, fp
 8019696:	d103      	bne.n	80196a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019698:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801969c:	454a      	cmp	r2, r9
 801969e:	d00a      	beq.n	80196b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80196a0:	f1bb 0f00 	cmp.w	fp, #0
 80196a4:	d002      	beq.n	80196ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 80196a6:	f1b9 0f00 	cmp.w	r9, #0
 80196aa:	d12e      	bne.n	801970a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 80196ac:	69ea      	ldr	r2, [r5, #28]
 80196ae:	4621      	mov	r1, r4
 80196b0:	4640      	mov	r0, r8
 80196b2:	f7ff ff91 	bl	80195d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196b6:	4628      	mov	r0, r5
 80196b8:	f7ff fef8 	bl	80194ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80196bc:	6861      	ldr	r1, [r4, #4]
 80196be:	4602      	mov	r2, r0
 80196c0:	4633      	mov	r3, r6
 80196c2:	6820      	ldr	r0, [r4, #0]
 80196c4:	c303      	stmia	r3!, {r0, r1}
 80196c6:	4611      	mov	r1, r2
 80196c8:	4630      	mov	r0, r6
 80196ca:	f7fb fe31 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 80196ce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d097      	beq.n	8019606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80196d6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d093      	beq.n	8019606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80196de:	4628      	mov	r0, r5
 80196e0:	f7ff ff00 	bl	80194e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80196e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80196e8:	1a18      	subs	r0, r3, r0
 80196ea:	f8ad 0010 	strh.w	r0, [sp, #16]
 80196ee:	4628      	mov	r0, r5
 80196f0:	f7ff ff0c 	bl	801950c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80196f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80196f8:	4631      	mov	r1, r6
 80196fa:	1a18      	subs	r0, r3, r0
 80196fc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019700:	4628      	mov	r0, r5
 8019702:	682b      	ldr	r3, [r5, #0]
 8019704:	689b      	ldr	r3, [r3, #8]
 8019706:	4798      	blx	r3
 8019708:	e77d      	b.n	8019606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801970a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801970e:	fa1f f08a 	uxth.w	r0, sl
 8019712:	4552      	cmp	r2, sl
 8019714:	9000      	str	r0, [sp, #0]
 8019716:	da12      	bge.n	801973e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019718:	9301      	str	r3, [sp, #4]
 801971a:	9b00      	ldr	r3, [sp, #0]
 801971c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019720:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019724:	1a9a      	subs	r2, r3, r2
 8019726:	f8ad 1010 	strh.w	r1, [sp, #16]
 801972a:	4631      	mov	r1, r6
 801972c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019730:	4640      	mov	r0, r8
 8019732:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019736:	69ea      	ldr	r2, [r5, #28]
 8019738:	f7ff ff4e 	bl	80195d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801973c:	9b01      	ldr	r3, [sp, #4]
 801973e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019742:	b29f      	uxth	r7, r3
 8019744:	429a      	cmp	r2, r3
 8019746:	da0d      	bge.n	8019764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8019748:	f8ad 2010 	strh.w	r2, [sp, #16]
 801974c:	1aba      	subs	r2, r7, r2
 801974e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019752:	4631      	mov	r1, r6
 8019754:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019758:	4640      	mov	r0, r8
 801975a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801975e:	69ea      	ldr	r2, [r5, #28]
 8019760:	f7ff ff3a 	bl	80195d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019764:	8822      	ldrh	r2, [r4, #0]
 8019766:	445f      	add	r7, fp
 8019768:	88a3      	ldrh	r3, [r4, #4]
 801976a:	b2bf      	uxth	r7, r7
 801976c:	4413      	add	r3, r2
 801976e:	b23a      	sxth	r2, r7
 8019770:	b29b      	uxth	r3, r3
 8019772:	b219      	sxth	r1, r3
 8019774:	4291      	cmp	r1, r2
 8019776:	dd0d      	ble.n	8019794 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8019778:	1bdb      	subs	r3, r3, r7
 801977a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801977e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019782:	4631      	mov	r1, r6
 8019784:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019788:	4640      	mov	r0, r8
 801978a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801978e:	69ea      	ldr	r2, [r5, #28]
 8019790:	f7ff ff22 	bl	80195d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019794:	88e2      	ldrh	r2, [r4, #6]
 8019796:	8863      	ldrh	r3, [r4, #2]
 8019798:	4413      	add	r3, r2
 801979a:	9a00      	ldr	r2, [sp, #0]
 801979c:	444a      	add	r2, r9
 801979e:	b29b      	uxth	r3, r3
 80197a0:	fa1f f982 	uxth.w	r9, r2
 80197a4:	b219      	sxth	r1, r3
 80197a6:	fa0f f289 	sxth.w	r2, r9
 80197aa:	428a      	cmp	r2, r1
 80197ac:	da83      	bge.n	80196b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80197ae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80197b2:	eba3 0309 	sub.w	r3, r3, r9
 80197b6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80197ba:	f8ad 1014 	strh.w	r1, [sp, #20]
 80197be:	4631      	mov	r1, r6
 80197c0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80197c4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80197c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80197cc:	69ea      	ldr	r2, [r5, #28]
 80197ce:	e76f      	b.n	80196b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

080197d0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80197d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197d2:	2300      	movs	r3, #0
 80197d4:	aa02      	add	r2, sp, #8
 80197d6:	4604      	mov	r4, r0
 80197d8:	3004      	adds	r0, #4
 80197da:	f842 3d04 	str.w	r3, [r2, #-4]!
 80197de:	460d      	mov	r5, r1
 80197e0:	f7fb fe7d 	bl	80154de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80197e4:	9a01      	ldr	r2, [sp, #4]
 80197e6:	b11a      	cbz	r2, 80197f0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80197e8:	4629      	mov	r1, r5
 80197ea:	4620      	mov	r0, r4
 80197ec:	f7ff fef4 	bl	80195d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80197f0:	b003      	add	sp, #12
 80197f2:	bd30      	pop	{r4, r5, pc}

080197f4 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80197f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197f6:	4602      	mov	r2, r0
 80197f8:	4604      	mov	r4, r0
 80197fa:	460d      	mov	r5, r1
 80197fc:	466b      	mov	r3, sp
 80197fe:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019802:	6851      	ldr	r1, [r2, #4]
 8019804:	c303      	stmia	r3!, {r0, r1}
 8019806:	4629      	mov	r1, r5
 8019808:	4668      	mov	r0, sp
 801980a:	f7fb fd91 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 801980e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019812:	4669      	mov	r1, sp
 8019814:	b123      	cbz	r3, 8019820 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019816:	4620      	mov	r0, r4
 8019818:	f7ff ffda 	bl	80197d0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801981c:	b003      	add	sp, #12
 801981e:	bd30      	pop	{r4, r5, pc}
 8019820:	1d20      	adds	r0, r4, #4
 8019822:	f7fb fe23 	bl	801546c <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019826:	e7f9      	b.n	801981c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019828 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019828:	460b      	mov	r3, r1
 801982a:	680a      	ldr	r2, [r1, #0]
 801982c:	1d01      	adds	r1, r0, #4
 801982e:	6952      	ldr	r2, [r2, #20]
 8019830:	4618      	mov	r0, r3
 8019832:	4710      	bx	r2

08019834 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8019834:	f011 0f40 	tst.w	r1, #64	; 0x40
 8019838:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801983c:	4b03      	ldr	r3, [pc, #12]	; (801984c <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801983e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019842:	bf08      	it	eq
 8019844:	2300      	moveq	r3, #0
 8019846:	4308      	orrs	r0, r1
 8019848:	4318      	orrs	r0, r3
 801984a:	4770      	bx	lr
 801984c:	fffffe00 	.word	0xfffffe00

08019850 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8019850:	7b43      	ldrb	r3, [r0, #13]
 8019852:	7201      	strb	r1, [r0, #8]
 8019854:	b289      	uxth	r1, r1
 8019856:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801985a:	05ca      	lsls	r2, r1, #23
 801985c:	bf48      	it	mi
 801985e:	f043 0320 	orrmi.w	r3, r3, #32
 8019862:	7343      	strb	r3, [r0, #13]
 8019864:	058b      	lsls	r3, r1, #22
 8019866:	bf42      	ittt	mi
 8019868:	7b43      	ldrbmi	r3, [r0, #13]
 801986a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801986e:	7343      	strbmi	r3, [r0, #13]
 8019870:	4770      	bx	lr

08019872 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019872:	b530      	push	{r4, r5, lr}
 8019874:	2500      	movs	r5, #0
 8019876:	2401      	movs	r4, #1
 8019878:	6843      	ldr	r3, [r0, #4]
 801987a:	b913      	cbnz	r3, 8019882 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801987c:	6803      	ldr	r3, [r0, #0]
 801987e:	b1f3      	cbz	r3, 80198be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019880:	6043      	str	r3, [r0, #4]
 8019882:	7c03      	ldrb	r3, [r0, #16]
 8019884:	b143      	cbz	r3, 8019898 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019886:	68c3      	ldr	r3, [r0, #12]
 8019888:	b12b      	cbz	r3, 8019896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801988a:	881a      	ldrh	r2, [r3, #0]
 801988c:	b11a      	cbz	r2, 8019896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801988e:	1c9a      	adds	r2, r3, #2
 8019890:	60c2      	str	r2, [r0, #12]
 8019892:	8818      	ldrh	r0, [r3, #0]
 8019894:	bd30      	pop	{r4, r5, pc}
 8019896:	7405      	strb	r5, [r0, #16]
 8019898:	6843      	ldr	r3, [r0, #4]
 801989a:	8819      	ldrh	r1, [r3, #0]
 801989c:	b179      	cbz	r1, 80198be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801989e:	1c9a      	adds	r2, r3, #2
 80198a0:	2902      	cmp	r1, #2
 80198a2:	6042      	str	r2, [r0, #4]
 80198a4:	d1f5      	bne.n	8019892 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80198a6:	6883      	ldr	r3, [r0, #8]
 80198a8:	1d1a      	adds	r2, r3, #4
 80198aa:	6082      	str	r2, [r0, #8]
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	60c3      	str	r3, [r0, #12]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d0e1      	beq.n	8019878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80198b4:	881b      	ldrh	r3, [r3, #0]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d0de      	beq.n	8019878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80198ba:	7404      	strb	r4, [r0, #16]
 80198bc:	e7dc      	b.n	8019878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80198be:	2000      	movs	r0, #0
 80198c0:	e7e8      	b.n	8019894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080198c2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80198c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198c4:	4605      	mov	r5, r0
 80198c6:	4608      	mov	r0, r1
 80198c8:	b1f1      	cbz	r1, 8019908 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80198ca:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80198ce:	460b      	mov	r3, r1
 80198d0:	f101 0708 	add.w	r7, r1, #8
 80198d4:	4622      	mov	r2, r4
 80198d6:	6818      	ldr	r0, [r3, #0]
 80198d8:	3308      	adds	r3, #8
 80198da:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80198de:	4626      	mov	r6, r4
 80198e0:	42bb      	cmp	r3, r7
 80198e2:	c603      	stmia	r6!, {r0, r1}
 80198e4:	4634      	mov	r4, r6
 80198e6:	d1f6      	bne.n	80198d6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80198e8:	6818      	ldr	r0, [r3, #0]
 80198ea:	6030      	str	r0, [r6, #0]
 80198ec:	4610      	mov	r0, r2
 80198ee:	889b      	ldrh	r3, [r3, #4]
 80198f0:	80b3      	strh	r3, [r6, #4]
 80198f2:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80198f6:	015b      	lsls	r3, r3, #5
 80198f8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80198fc:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019900:	430b      	orrs	r3, r1
 8019902:	425b      	negs	r3, r3
 8019904:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8019908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801990a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801990a:	b538      	push	{r3, r4, r5, lr}
 801990c:	460c      	mov	r4, r1
 801990e:	6811      	ldr	r1, [r2, #0]
 8019910:	4610      	mov	r0, r2
 8019912:	68cd      	ldr	r5, [r1, #12]
 8019914:	4619      	mov	r1, r3
 8019916:	47a8      	blx	r5
 8019918:	2800      	cmp	r0, #0
 801991a:	bf08      	it	eq
 801991c:	4620      	moveq	r0, r4
 801991e:	bd38      	pop	{r3, r4, r5, pc}

08019920 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019920:	b570      	push	{r4, r5, r6, lr}
 8019922:	8810      	ldrh	r0, [r2, #0]
 8019924:	4298      	cmp	r0, r3
 8019926:	d817      	bhi.n	8019958 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019928:	1e48      	subs	r0, r1, #1
 801992a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801992e:	4298      	cmp	r0, r3
 8019930:	d312      	bcc.n	8019958 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019932:	2400      	movs	r4, #0
 8019934:	428c      	cmp	r4, r1
 8019936:	d20f      	bcs.n	8019958 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019938:	1860      	adds	r0, r4, r1
 801993a:	1040      	asrs	r0, r0, #1
 801993c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019940:	0085      	lsls	r5, r0, #2
 8019942:	42b3      	cmp	r3, r6
 8019944:	d902      	bls.n	801994c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019946:	3001      	adds	r0, #1
 8019948:	b284      	uxth	r4, r0
 801994a:	e7f3      	b.n	8019934 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801994c:	d102      	bne.n	8019954 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801994e:	442a      	add	r2, r5
 8019950:	8850      	ldrh	r0, [r2, #2]
 8019952:	bd70      	pop	{r4, r5, r6, pc}
 8019954:	b281      	uxth	r1, r0
 8019956:	e7ed      	b.n	8019934 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019958:	2000      	movs	r0, #0
 801995a:	e7fa      	b.n	8019952 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801995c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801995c:	b510      	push	{r4, lr}
 801995e:	8ac3      	ldrh	r3, [r0, #22]
 8019960:	428b      	cmp	r3, r1
 8019962:	d805      	bhi.n	8019970 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8019964:	4b07      	ldr	r3, [pc, #28]	; (8019984 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8019966:	21fd      	movs	r1, #253	; 0xfd
 8019968:	4a07      	ldr	r2, [pc, #28]	; (8019988 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801996a:	4808      	ldr	r0, [pc, #32]	; (801998c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801996c:	f00a fe40 	bl	80245f0 <__assert_func>
 8019970:	8a83      	ldrh	r3, [r0, #20]
 8019972:	240a      	movs	r4, #10
 8019974:	4419      	add	r1, r3
 8019976:	fbb1 f3f4 	udiv	r3, r1, r4
 801997a:	fb04 1113 	mls	r1, r4, r3, r1
 801997e:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8019982:	bd10      	pop	{r4, pc}
 8019984:	08028119 	.word	0x08028119
 8019988:	08028548 	.word	0x08028548
 801998c:	08028127 	.word	0x08028127

08019990 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8019990:	b508      	push	{r3, lr}
 8019992:	8ac3      	ldrh	r3, [r0, #22]
 8019994:	428b      	cmp	r3, r1
 8019996:	d805      	bhi.n	80199a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8019998:	4b07      	ldr	r3, [pc, #28]	; (80199b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801999a:	21d3      	movs	r1, #211	; 0xd3
 801999c:	4a07      	ldr	r2, [pc, #28]	; (80199bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801999e:	4808      	ldr	r0, [pc, #32]	; (80199c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 80199a0:	f00a fe26 	bl	80245f0 <__assert_func>
 80199a4:	8a83      	ldrh	r3, [r0, #20]
 80199a6:	220a      	movs	r2, #10
 80199a8:	4419      	add	r1, r3
 80199aa:	fbb1 f3f2 	udiv	r3, r1, r2
 80199ae:	fb02 1113 	mls	r1, r2, r3, r1
 80199b2:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80199b6:	bd08      	pop	{r3, pc}
 80199b8:	08028119 	.word	0x08028119
 80199bc:	08028298 	.word	0x08028298
 80199c0:	08028127 	.word	0x08028127

080199c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80199c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199c8:	4604      	mov	r4, r0
 80199ca:	4688      	mov	r8, r1
 80199cc:	4615      	mov	r5, r2
 80199ce:	b94a      	cbnz	r2, 80199e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 80199d0:	4691      	mov	r9, r2
 80199d2:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80199d6:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80199da:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80199de:	4648      	mov	r0, r9
 80199e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e4:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80199e8:	8892      	ldrh	r2, [r2, #4]
 80199ea:	462b      	mov	r3, r5
 80199ec:	f105 0c08 	add.w	ip, r5, #8
 80199f0:	46b3      	mov	fp, r6
 80199f2:	6818      	ldr	r0, [r3, #0]
 80199f4:	3308      	adds	r3, #8
 80199f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80199fa:	4637      	mov	r7, r6
 80199fc:	4563      	cmp	r3, ip
 80199fe:	c703      	stmia	r7!, {r0, r1}
 8019a00:	463e      	mov	r6, r7
 8019a02:	d1f6      	bne.n	80199f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8019a04:	6818      	ldr	r0, [r3, #0]
 8019a06:	46d9      	mov	r9, fp
 8019a08:	6038      	str	r0, [r7, #0]
 8019a0a:	889b      	ldrh	r3, [r3, #4]
 8019a0c:	80bb      	strh	r3, [r7, #4]
 8019a0e:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8019a12:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8019a16:	18d3      	adds	r3, r2, r3
 8019a18:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8019a1c:	b298      	uxth	r0, r3
 8019a1e:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8019a22:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8019a26:	281d      	cmp	r0, #29
 8019a28:	ea4a 0a01 	orr.w	sl, sl, r1
 8019a2c:	fa1f f68a 	uxth.w	r6, sl
 8019a30:	d842      	bhi.n	8019ab8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8019a32:	2301      	movs	r3, #1
 8019a34:	4950      	ldr	r1, [pc, #320]	; (8019b78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 8019a36:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8019a3a:	4083      	lsls	r3, r0
 8019a3c:	420b      	tst	r3, r1
 8019a3e:	d114      	bne.n	8019a6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8019a40:	f413 7f60 	tst.w	r3, #896	; 0x380
 8019a44:	d03c      	beq.n	8019ac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 8019a46:	fa1f fa8a 	uxth.w	sl, sl
 8019a4a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8019a4e:	4658      	mov	r0, fp
 8019a50:	eba1 010a 	sub.w	r1, r1, sl
 8019a54:	b209      	sxth	r1, r1
 8019a56:	f7ff fefb 	bl	8019850 <_ZN8touchgfx9GlyphNode6setTopEs>
 8019a5a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8019a5e:	1b86      	subs	r6, r0, r6
 8019a60:	eba6 0a0a 	sub.w	sl, r6, sl
 8019a64:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8019a68:	e7b9      	b.n	80199de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019a6a:	2100      	movs	r1, #0
 8019a6c:	f104 001a 	add.w	r0, r4, #26
 8019a70:	f7ff ff8e 	bl	8019990 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019a74:	f640 6333 	movw	r3, #3635	; 0xe33
 8019a78:	4601      	mov	r1, r0
 8019a7a:	4298      	cmp	r0, r3
 8019a7c:	d10a      	bne.n	8019a94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8019a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8019a82:	4640      	mov	r0, r8
 8019a84:	68db      	ldr	r3, [r3, #12]
 8019a86:	4798      	blx	r3
 8019a88:	7b41      	ldrb	r1, [r0, #13]
 8019a8a:	7a00      	ldrb	r0, [r0, #8]
 8019a8c:	f7ff fed2 	bl	8019834 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019a90:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019a94:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8019a98:	4658      	mov	r0, fp
 8019a9a:	4431      	add	r1, r6
 8019a9c:	4451      	add	r1, sl
 8019a9e:	b209      	sxth	r1, r1
 8019aa0:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8019aa4:	f7ff fed4 	bl	8019850 <_ZN8touchgfx9GlyphNode6setTopEs>
 8019aa8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019aac:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8019ab0:	1a9b      	subs	r3, r3, r2
 8019ab2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8019ab6:	e792      	b.n	80199de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019ab8:	f640 631b 	movw	r3, #3611	; 0xe1b
 8019abc:	429a      	cmp	r2, r3
 8019abe:	d005      	beq.n	8019acc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8019ac0:	f022 0302 	bic.w	r3, r2, #2
 8019ac4:	f640 611d 	movw	r1, #3613	; 0xe1d
 8019ac8:	428b      	cmp	r3, r1
 8019aca:	d119      	bne.n	8019b00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8019acc:	1e53      	subs	r3, r2, #1
 8019ace:	4629      	mov	r1, r5
 8019ad0:	4642      	mov	r2, r8
 8019ad2:	4620      	mov	r0, r4
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	f7ff ff18 	bl	801990a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019ada:	7b41      	ldrb	r1, [r0, #13]
 8019adc:	7a00      	ldrb	r0, [r0, #8]
 8019ade:	f7ff fea9 	bl	8019834 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019ae2:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8019ae6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019aea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019aee:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019af2:	4313      	orrs	r3, r2
 8019af4:	115a      	asrs	r2, r3, #5
 8019af6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019afa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019afe:	e02e      	b.n	8019b5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8019b00:	4639      	mov	r1, r7
 8019b02:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019b06:	f7ff fe95 	bl	8019834 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019b0a:	f640 6109 	movw	r1, #3593	; 0xe09
 8019b0e:	f022 0310 	bic.w	r3, r2, #16
 8019b12:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019b16:	428b      	cmp	r3, r1
 8019b18:	d003      	beq.n	8019b22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8019b1a:	f640 6313 	movw	r3, #3603	; 0xe13
 8019b1e:	429a      	cmp	r2, r3
 8019b20:	d127      	bne.n	8019b72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 8019b22:	b27f      	sxtb	r7, r7
 8019b24:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019b28:	4629      	mov	r1, r5
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8019b30:	431f      	orrs	r7, r3
 8019b32:	f640 6313 	movw	r3, #3603	; 0xe13
 8019b36:	429a      	cmp	r2, r3
 8019b38:	bf14      	ite	ne
 8019b3a:	f102 33ff 	addne.w	r3, r2, #4294967295
 8019b3e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019b42:	4642      	mov	r2, r8
 8019b44:	bf18      	it	ne
 8019b46:	b29b      	uxthne	r3, r3
 8019b48:	f7ff fedf 	bl	801990a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019b4c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019b50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b54:	7a83      	ldrb	r3, [r0, #10]
 8019b56:	4313      	orrs	r3, r2
 8019b58:	1aff      	subs	r7, r7, r3
 8019b5a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8019b5e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8019b62:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019b66:	f7ff fe65 	bl	8019834 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019b6a:	1b80      	subs	r0, r0, r6
 8019b6c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8019b70:	e735      	b.n	80199de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019b72:	2300      	movs	r3, #0
 8019b74:	e7c1      	b.n	8019afa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 8019b76:	bf00      	nop
 8019b78:	3fc00079 	.word	0x3fc00079

08019b7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019b7c:	3a01      	subs	r2, #1
 8019b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b82:	b292      	uxth	r2, r2
 8019b84:	460c      	mov	r4, r1
 8019b86:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019b8a:	42b2      	cmp	r2, r6
 8019b8c:	d018      	beq.n	8019bc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8019b8e:	8b01      	ldrh	r1, [r0, #24]
 8019b90:	f834 5b02 	ldrh.w	r5, [r4], #2
 8019b94:	4291      	cmp	r1, r2
 8019b96:	d805      	bhi.n	8019ba4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8019b98:	4b13      	ldr	r3, [pc, #76]	; (8019be8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 8019b9a:	21d3      	movs	r1, #211	; 0xd3
 8019b9c:	4a13      	ldr	r2, [pc, #76]	; (8019bec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8019b9e:	4814      	ldr	r0, [pc, #80]	; (8019bf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8019ba0:	f00a fd26 	bl	80245f0 <__assert_func>
 8019ba4:	8ac1      	ldrh	r1, [r0, #22]
 8019ba6:	4411      	add	r1, r2
 8019ba8:	3a01      	subs	r2, #1
 8019baa:	f001 0101 	and.w	r1, r1, #1
 8019bae:	b292      	uxth	r2, r2
 8019bb0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019bb4:	8a49      	ldrh	r1, [r1, #18]
 8019bb6:	428d      	cmp	r5, r1
 8019bb8:	d0e7      	beq.n	8019b8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8019bba:	2000      	movs	r0, #0
 8019bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bc0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8019bc4:	2600      	movs	r6, #0
 8019bc6:	f100 051a 	add.w	r5, r0, #26
 8019bca:	441f      	add	r7, r3
 8019bcc:	b2b1      	uxth	r1, r6
 8019bce:	42b9      	cmp	r1, r7
 8019bd0:	da08      	bge.n	8019be4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 8019bd2:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8019bd6:	4628      	mov	r0, r5
 8019bd8:	f7ff feda 	bl	8019990 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019bdc:	3601      	adds	r6, #1
 8019bde:	4540      	cmp	r0, r8
 8019be0:	d0f4      	beq.n	8019bcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8019be2:	e7ea      	b.n	8019bba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8019be4:	2001      	movs	r0, #1
 8019be6:	e7e9      	b.n	8019bbc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8019be8:	08028119 	.word	0x08028119
 8019bec:	080286a8 	.word	0x080286a8
 8019bf0:	08028127 	.word	0x08028127

08019bf4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8019bf4:	b538      	push	{r3, r4, r5, lr}
 8019bf6:	8ac3      	ldrh	r3, [r0, #22]
 8019bf8:	428b      	cmp	r3, r1
 8019bfa:	d205      	bcs.n	8019c08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8019bfc:	4b08      	ldr	r3, [pc, #32]	; (8019c20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8019bfe:	21d8      	movs	r1, #216	; 0xd8
 8019c00:	4a08      	ldr	r2, [pc, #32]	; (8019c24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8019c02:	4809      	ldr	r0, [pc, #36]	; (8019c28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8019c04:	f00a fcf4 	bl	80245f0 <__assert_func>
 8019c08:	8a82      	ldrh	r2, [r0, #20]
 8019c0a:	250a      	movs	r5, #10
 8019c0c:	1a5b      	subs	r3, r3, r1
 8019c0e:	440a      	add	r2, r1
 8019c10:	82c3      	strh	r3, [r0, #22]
 8019c12:	fbb2 f4f5 	udiv	r4, r2, r5
 8019c16:	fb05 2214 	mls	r2, r5, r4, r2
 8019c1a:	8282      	strh	r2, [r0, #20]
 8019c1c:	bd38      	pop	{r3, r4, r5, pc}
 8019c1e:	bf00      	nop
 8019c20:	0802810d 	.word	0x0802810d
 8019c24:	080284c4 	.word	0x080284c4
 8019c28:	08028127 	.word	0x08028127

08019c2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8019c2c:	b538      	push	{r3, r4, r5, lr}
 8019c2e:	8ac3      	ldrh	r3, [r0, #22]
 8019c30:	2b09      	cmp	r3, #9
 8019c32:	d905      	bls.n	8019c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8019c34:	4b08      	ldr	r3, [pc, #32]	; (8019c58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8019c36:	21f7      	movs	r1, #247	; 0xf7
 8019c38:	4a08      	ldr	r2, [pc, #32]	; (8019c5c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8019c3a:	4809      	ldr	r0, [pc, #36]	; (8019c60 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8019c3c:	f00a fcd8 	bl	80245f0 <__assert_func>
 8019c40:	8a82      	ldrh	r2, [r0, #20]
 8019c42:	250a      	movs	r5, #10
 8019c44:	441a      	add	r2, r3
 8019c46:	3301      	adds	r3, #1
 8019c48:	fbb2 f4f5 	udiv	r4, r2, r5
 8019c4c:	fb05 2214 	mls	r2, r5, r4, r2
 8019c50:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8019c54:	82c3      	strh	r3, [r0, #22]
 8019c56:	bd38      	pop	{r3, r4, r5, pc}
 8019c58:	08028101 	.word	0x08028101
 8019c5c:	08028415 	.word	0x08028415
 8019c60:	08028127 	.word	0x08028127

08019c64 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019c64:	b538      	push	{r3, r4, r5, lr}
 8019c66:	4604      	mov	r4, r0
 8019c68:	f100 051a 	add.w	r5, r0, #26
 8019c6c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019c6e:	2b0a      	cmp	r3, #10
 8019c70:	d01c      	beq.n	8019cac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8019c72:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8019c74:	b962      	cbnz	r2, 8019c90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8019c76:	f104 051a 	add.w	r5, r4, #26
 8019c7a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019c7c:	2b0a      	cmp	r3, #10
 8019c7e:	d015      	beq.n	8019cac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8019c80:	4620      	mov	r0, r4
 8019c82:	f7ff fdf6 	bl	8019872 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019c86:	4601      	mov	r1, r0
 8019c88:	4628      	mov	r0, r5
 8019c8a:	f7ff ffcf 	bl	8019c2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8019c8e:	e7f4      	b.n	8019c7a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8019c90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019c92:	3a01      	subs	r2, #1
 8019c94:	4628      	mov	r0, r5
 8019c96:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8019c9a:	3301      	adds	r3, #1
 8019c9c:	f003 0301 	and.w	r3, r3, #1
 8019ca0:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8019ca2:	8722      	strh	r2, [r4, #56]	; 0x38
 8019ca4:	86e3      	strh	r3, [r4, #54]	; 0x36
 8019ca6:	f7ff ffc1 	bl	8019c2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8019caa:	e7df      	b.n	8019c6c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8019cac:	bd38      	pop	{r3, r4, r5, pc}
	...

08019cb0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	b510      	push	{r4, lr}
 8019cb4:	6043      	str	r3, [r0, #4]
 8019cb6:	4604      	mov	r4, r0
 8019cb8:	60c3      	str	r3, [r0, #12]
 8019cba:	7403      	strb	r3, [r0, #16]
 8019cbc:	8603      	strh	r3, [r0, #48]	; 0x30
 8019cbe:	8303      	strh	r3, [r0, #24]
 8019cc0:	8703      	strh	r3, [r0, #56]	; 0x38
 8019cc2:	f7ff ffcf 	bl	8019c64 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019cc6:	4a0a      	ldr	r2, [pc, #40]	; (8019cf0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8019cc8:	6813      	ldr	r3, [r2, #0]
 8019cca:	4611      	mov	r1, r2
 8019ccc:	b913      	cbnz	r3, 8019cd4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8019cce:	6852      	ldr	r2, [r2, #4]
 8019cd0:	07d0      	lsls	r0, r2, #31
 8019cd2:	d50b      	bpl.n	8019cec <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8019cd4:	6849      	ldr	r1, [r1, #4]
 8019cd6:	104a      	asrs	r2, r1, #1
 8019cd8:	07c9      	lsls	r1, r1, #31
 8019cda:	eb04 0002 	add.w	r0, r4, r2
 8019cde:	bf48      	it	mi
 8019ce0:	58a2      	ldrmi	r2, [r4, r2]
 8019ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ce6:	bf48      	it	mi
 8019ce8:	58d3      	ldrmi	r3, [r2, r3]
 8019cea:	4718      	bx	r3
 8019cec:	bd10      	pop	{r4, pc}
 8019cee:	bf00      	nop
 8019cf0:	2000861c 	.word	0x2000861c

08019cf4 <_ZN8touchgfx12TextProviderC1Ev>:
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	2201      	movs	r2, #1
 8019cf8:	b510      	push	{r4, lr}
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	60c3      	str	r3, [r0, #12]
 8019cfe:	7403      	strb	r3, [r0, #16]
 8019d00:	82c3      	strh	r3, [r0, #22]
 8019d02:	8303      	strh	r3, [r0, #24]
 8019d04:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019d06:	8603      	strh	r3, [r0, #48]	; 0x30
 8019d08:	86c3      	strh	r3, [r0, #54]	; 0x36
 8019d0a:	8703      	strh	r3, [r0, #56]	; 0x38
 8019d0c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019d0e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8019d12:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8019d16:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8019d1a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8019d1e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8019d22:	e9c0 3300 	strd	r3, r3, [r0]
 8019d26:	f7ff ffc3 	bl	8019cb0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	bd10      	pop	{r4, pc}

08019d2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8019d2e:	b410      	push	{r4}
 8019d30:	6082      	str	r2, [r0, #8]
 8019d32:	6001      	str	r1, [r0, #0]
 8019d34:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d3a:	f7ff bfb9 	b.w	8019cb0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08019d40 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8019d40:	b508      	push	{r3, lr}
 8019d42:	88c2      	ldrh	r2, [r0, #6]
 8019d44:	440a      	add	r2, r1
 8019d46:	2a02      	cmp	r2, #2
 8019d48:	dd05      	ble.n	8019d56 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8019d4a:	4b06      	ldr	r3, [pc, #24]	; (8019d64 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8019d4c:	21ec      	movs	r1, #236	; 0xec
 8019d4e:	4a06      	ldr	r2, [pc, #24]	; (8019d68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8019d50:	4806      	ldr	r0, [pc, #24]	; (8019d6c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8019d52:	f00a fc4d 	bl	80245f0 <__assert_func>
 8019d56:	8883      	ldrh	r3, [r0, #4]
 8019d58:	80c2      	strh	r2, [r0, #6]
 8019d5a:	1a59      	subs	r1, r3, r1
 8019d5c:	f001 0101 	and.w	r1, r1, #1
 8019d60:	8081      	strh	r1, [r0, #4]
 8019d62:	bd08      	pop	{r3, pc}
 8019d64:	08028153 	.word	0x08028153
 8019d68:	08028621 	.word	0x08028621
 8019d6c:	08028127 	.word	0x08028127

08019d70 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8019d70:	b508      	push	{r3, lr}
 8019d72:	88c3      	ldrh	r3, [r0, #6]
 8019d74:	428b      	cmp	r3, r1
 8019d76:	d805      	bhi.n	8019d84 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8019d78:	4b06      	ldr	r3, [pc, #24]	; (8019d94 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8019d7a:	21fd      	movs	r1, #253	; 0xfd
 8019d7c:	4a06      	ldr	r2, [pc, #24]	; (8019d98 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8019d7e:	4807      	ldr	r0, [pc, #28]	; (8019d9c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8019d80:	f00a fc36 	bl	80245f0 <__assert_func>
 8019d84:	8883      	ldrh	r3, [r0, #4]
 8019d86:	4419      	add	r1, r3
 8019d88:	f001 0101 	and.w	r1, r1, #1
 8019d8c:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8019d90:	bd08      	pop	{r3, pc}
 8019d92:	bf00      	nop
 8019d94:	08028119 	.word	0x08028119
 8019d98:	08028779 	.word	0x08028779
 8019d9c:	08028127 	.word	0x08028127

08019da0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019da0:	b570      	push	{r4, r5, r6, lr}
 8019da2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8019da4:	4604      	mov	r4, r0
 8019da6:	b92a      	cbnz	r2, 8019db4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019da8:	4b12      	ldr	r3, [pc, #72]	; (8019df4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8019daa:	21de      	movs	r1, #222	; 0xde
 8019dac:	4a12      	ldr	r2, [pc, #72]	; (8019df8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019dae:	4813      	ldr	r0, [pc, #76]	; (8019dfc <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8019db0:	f00a fc1e 	bl	80245f0 <__assert_func>
 8019db4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019db6:	260a      	movs	r6, #10
 8019db8:	3a01      	subs	r2, #1
 8019dba:	3412      	adds	r4, #18
 8019dbc:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019dc0:	3301      	adds	r3, #1
 8019dc2:	8b4d      	ldrh	r5, [r1, #26]
 8019dc4:	8602      	strh	r2, [r0, #48]	; 0x30
 8019dc6:	fbb3 f1f6 	udiv	r1, r3, r6
 8019dca:	fb06 3311 	mls	r3, r6, r1, r3
 8019dce:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019dd0:	f7ff ff48 	bl	8019c64 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019dd4:	88e3      	ldrh	r3, [r4, #6]
 8019dd6:	2101      	movs	r1, #1
 8019dd8:	2b02      	cmp	r3, #2
 8019dda:	bf04      	itt	eq
 8019ddc:	2301      	moveq	r3, #1
 8019dde:	80e3      	strheq	r3, [r4, #6]
 8019de0:	4620      	mov	r0, r4
 8019de2:	f7ff ffad 	bl	8019d40 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8019de6:	4620      	mov	r0, r4
 8019de8:	462a      	mov	r2, r5
 8019dea:	2100      	movs	r1, #0
 8019dec:	f7ff ffc0 	bl	8019d70 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8019df0:	4628      	mov	r0, r5
 8019df2:	bd70      	pop	{r4, r5, r6, pc}
 8019df4:	080280f8 	.word	0x080280f8
 8019df8:	0802836a 	.word	0x0802836a
 8019dfc:	08028127 	.word	0x08028127

08019e00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019e00:	428a      	cmp	r2, r1
 8019e02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e06:	4604      	mov	r4, r0
 8019e08:	460e      	mov	r6, r1
 8019e0a:	4615      	mov	r5, r2
 8019e0c:	469a      	mov	sl, r3
 8019e0e:	d92b      	bls.n	8019e68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8019e10:	1a57      	subs	r7, r2, r1
 8019e12:	f04f 0800 	mov.w	r8, #0
 8019e16:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8019e1a:	f04f 0b0a 	mov.w	fp, #10
 8019e1e:	b2bf      	uxth	r7, r7
 8019e20:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019e22:	b92b      	cbnz	r3, 8019e30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8019e24:	4b24      	ldr	r3, [pc, #144]	; (8019eb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8019e26:	21e6      	movs	r1, #230	; 0xe6
 8019e28:	4a24      	ldr	r2, [pc, #144]	; (8019ebc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8019e2a:	4825      	ldr	r0, [pc, #148]	; (8019ec0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8019e2c:	f00a fbe0 	bl	80245f0 <__assert_func>
 8019e30:	3b01      	subs	r3, #1
 8019e32:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019e34:	2101      	movs	r1, #1
 8019e36:	4648      	mov	r0, r9
 8019e38:	b29b      	uxth	r3, r3
 8019e3a:	f108 0801 	add.w	r8, r8, #1
 8019e3e:	441a      	add	r2, r3
 8019e40:	8623      	strh	r3, [r4, #48]	; 0x30
 8019e42:	fbb2 f3fb 	udiv	r3, r2, fp
 8019e46:	fb0b 2313 	mls	r3, fp, r3, r2
 8019e4a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019e4e:	8b5a      	ldrh	r2, [r3, #26]
 8019e50:	9201      	str	r2, [sp, #4]
 8019e52:	f7ff ff75 	bl	8019d40 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8019e56:	9a01      	ldr	r2, [sp, #4]
 8019e58:	2100      	movs	r1, #0
 8019e5a:	4648      	mov	r0, r9
 8019e5c:	f7ff ff88 	bl	8019d70 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8019e60:	fa1f f388 	uxth.w	r3, r8
 8019e64:	429f      	cmp	r7, r3
 8019e66:	d8db      	bhi.n	8019e20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8019e68:	f104 071a 	add.w	r7, r4, #26
 8019e6c:	4631      	mov	r1, r6
 8019e6e:	260a      	movs	r6, #10
 8019e70:	4638      	mov	r0, r7
 8019e72:	f7ff febf 	bl	8019bf4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8019e76:	b1c5      	cbz	r5, 8019eaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8019e78:	3d01      	subs	r5, #1
 8019e7a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019e7c:	b2ad      	uxth	r5, r5
 8019e7e:	2b09      	cmp	r3, #9
 8019e80:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8019e84:	d903      	bls.n	8019e8e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8019e86:	4b0f      	ldr	r3, [pc, #60]	; (8019ec4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8019e88:	21ec      	movs	r1, #236	; 0xec
 8019e8a:	4a0f      	ldr	r2, [pc, #60]	; (8019ec8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8019e8c:	e7cd      	b.n	8019e2a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8019e8e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8019e90:	3301      	adds	r3, #1
 8019e92:	3109      	adds	r1, #9
 8019e94:	8623      	strh	r3, [r4, #48]	; 0x30
 8019e96:	fbb1 f0f6 	udiv	r0, r1, r6
 8019e9a:	fb06 1110 	mls	r1, r6, r0, r1
 8019e9e:	4638      	mov	r0, r7
 8019ea0:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8019ea2:	2100      	movs	r1, #0
 8019ea4:	f7ff fd5a 	bl	801995c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019ea8:	e7e5      	b.n	8019e76 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8019eaa:	4620      	mov	r0, r4
 8019eac:	b003      	add	sp, #12
 8019eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eb2:	f7ff bed7 	b.w	8019c64 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019eb6:	bf00      	nop
 8019eb8:	080280f8 	.word	0x080280f8
 8019ebc:	080281ee 	.word	0x080281ee
 8019ec0:	08028127 	.word	0x08028127
 8019ec4:	08028153 	.word	0x08028153
 8019ec8:	08028166 	.word	0x08028166

08019ecc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ed0:	4605      	mov	r5, r0
 8019ed2:	4616      	mov	r6, r2
 8019ed4:	1c8c      	adds	r4, r1, #2
 8019ed6:	8809      	ldrh	r1, [r1, #0]
 8019ed8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019edc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019ee0:	42b3      	cmp	r3, r6
 8019ee2:	d124      	bne.n	8019f2e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019ee4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019ee8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019eec:	f001 070f 	and.w	r7, r1, #15
 8019ef0:	4652      	mov	r2, sl
 8019ef2:	f8cd 8000 	str.w	r8, [sp]
 8019ef6:	464b      	mov	r3, r9
 8019ef8:	4621      	mov	r1, r4
 8019efa:	4628      	mov	r0, r5
 8019efc:	f7ff fe3e 	bl	8019b7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019f00:	4683      	mov	fp, r0
 8019f02:	b168      	cbz	r0, 8019f20 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019f04:	eb0a 0109 	add.w	r1, sl, r9
 8019f08:	463a      	mov	r2, r7
 8019f0a:	4628      	mov	r0, r5
 8019f0c:	4441      	add	r1, r8
 8019f0e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019f12:	4649      	mov	r1, r9
 8019f14:	f7ff ff74 	bl	8019e00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019f18:	4658      	mov	r0, fp
 8019f1a:	b003      	add	sp, #12
 8019f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f20:	eb07 010a 	add.w	r1, r7, sl
 8019f24:	4449      	add	r1, r9
 8019f26:	4441      	add	r1, r8
 8019f28:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019f2c:	e7d2      	b.n	8019ed4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019f2e:	f04f 0b00 	mov.w	fp, #0
 8019f32:	e7f1      	b.n	8019f18 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019f34 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f38:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	260b      	movs	r6, #11
 8019f3e:	f100 091a 	add.w	r9, r0, #26
 8019f42:	886f      	ldrh	r7, [r5, #2]
 8019f44:	087f      	lsrs	r7, r7, #1
 8019f46:	3e01      	subs	r6, #1
 8019f48:	d013      	beq.n	8019f72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8019f4a:	2100      	movs	r1, #0
 8019f4c:	4648      	mov	r0, r9
 8019f4e:	f7ff fd1f 	bl	8019990 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019f52:	462a      	mov	r2, r5
 8019f54:	4680      	mov	r8, r0
 8019f56:	4603      	mov	r3, r0
 8019f58:	4639      	mov	r1, r7
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	f7ff fce0 	bl	8019920 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019f60:	b138      	cbz	r0, 8019f72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8019f62:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019f66:	4642      	mov	r2, r8
 8019f68:	4620      	mov	r0, r4
 8019f6a:	f7ff ffaf 	bl	8019ecc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019f6e:	2800      	cmp	r0, #0
 8019f70:	d1e9      	bne.n	8019f46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8019f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8019f78:	4b1e      	ldr	r3, [pc, #120]	; (8019ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8019f7a:	b570      	push	{r4, r5, r6, lr}
 8019f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f80:	4604      	mov	r4, r0
 8019f82:	f003 0501 	and.w	r5, r3, #1
 8019f86:	b902      	cbnz	r2, 8019f8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8019f88:	b165      	cbz	r5, 8019fa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8019f8a:	105b      	asrs	r3, r3, #1
 8019f8c:	f104 061a 	add.w	r6, r4, #26
 8019f90:	18e0      	adds	r0, r4, r3
 8019f92:	b10d      	cbz	r5, 8019f98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8019f94:	58e3      	ldr	r3, [r4, r3]
 8019f96:	589a      	ldr	r2, [r3, r2]
 8019f98:	4790      	blx	r2
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	4602      	mov	r2, r0
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	f7ff fcdc 	bl	801995c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019fa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019fa6:	b303      	cbz	r3, 8019fea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019fa8:	f104 051a 	add.w	r5, r4, #26
 8019fac:	2100      	movs	r1, #0
 8019fae:	4628      	mov	r0, r5
 8019fb0:	f7ff fcee 	bl	8019990 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019fb4:	b1c8      	cbz	r0, 8019fea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	f7ff ffbc 	bl	8019f34 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8019fbc:	2101      	movs	r1, #1
 8019fbe:	4628      	mov	r0, r5
 8019fc0:	f7ff fce6 	bl	8019990 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019fc4:	f640 133f 	movw	r3, #2367	; 0x93f
 8019fc8:	4606      	mov	r6, r0
 8019fca:	4298      	cmp	r0, r3
 8019fcc:	d10d      	bne.n	8019fea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019fce:	2100      	movs	r1, #0
 8019fd0:	4628      	mov	r0, r5
 8019fd2:	f7ff fcdd 	bl	8019990 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019fd6:	2101      	movs	r1, #1
 8019fd8:	4602      	mov	r2, r0
 8019fda:	4628      	mov	r0, r5
 8019fdc:	f7ff fcbe 	bl	801995c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019fe0:	4632      	mov	r2, r6
 8019fe2:	2100      	movs	r1, #0
 8019fe4:	4628      	mov	r0, r5
 8019fe6:	f7ff fcb9 	bl	801995c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019fea:	4620      	mov	r0, r4
 8019fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ff0:	f7ff bed6 	b.w	8019da0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ff4:	20008624 	.word	0x20008624

08019ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ffa:	4617      	mov	r7, r2
 8019ffc:	461e      	mov	r6, r3
 8019ffe:	4605      	mov	r5, r0
 801a000:	f7ff ffba 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a004:	683b      	ldr	r3, [r7, #0]
 801a006:	4604      	mov	r4, r0
 801a008:	4601      	mov	r1, r0
 801a00a:	4638      	mov	r0, r7
 801a00c:	68db      	ldr	r3, [r3, #12]
 801a00e:	4798      	blx	r3
 801a010:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a014:	4602      	mov	r2, r0
 801a016:	6030      	str	r0, [r6, #0]
 801a018:	b29b      	uxth	r3, r3
 801a01a:	2b7f      	cmp	r3, #127	; 0x7f
 801a01c:	d813      	bhi.n	801a046 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a01e:	4639      	mov	r1, r7
 801a020:	4628      	mov	r0, r5
 801a022:	f7ff fccf 	bl	80199c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a026:	6030      	str	r0, [r6, #0]
 801a028:	6833      	ldr	r3, [r6, #0]
 801a02a:	b143      	cbz	r3, 801a03e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a02c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a030:	7a9b      	ldrb	r3, [r3, #10]
 801a032:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a036:	4313      	orrs	r3, r2
 801a038:	bf0c      	ite	eq
 801a03a:	2301      	moveq	r3, #1
 801a03c:	2300      	movne	r3, #0
 801a03e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a042:	4620      	mov	r0, r4
 801a044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a046:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d0ec      	beq.n	801a028 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a04e:	f640 1302 	movw	r3, #2306	; 0x902
 801a052:	429c      	cmp	r4, r3
 801a054:	d1e8      	bne.n	801a028 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a056:	4601      	mov	r1, r0
 801a058:	4628      	mov	r0, r5
 801a05a:	f7ff fc32 	bl	80198c2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a05e:	e7e2      	b.n	801a026 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a060 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a064:	4617      	mov	r7, r2
 801a066:	461e      	mov	r6, r3
 801a068:	4605      	mov	r5, r0
 801a06a:	f7ff ff85 	bl	8019f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	4604      	mov	r4, r0
 801a072:	4601      	mov	r1, r0
 801a074:	4638      	mov	r0, r7
 801a076:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a07a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a07e:	47c0      	blx	r8
 801a080:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a084:	4602      	mov	r2, r0
 801a086:	6030      	str	r0, [r6, #0]
 801a088:	b29b      	uxth	r3, r3
 801a08a:	2b7f      	cmp	r3, #127	; 0x7f
 801a08c:	d814      	bhi.n	801a0b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a08e:	4639      	mov	r1, r7
 801a090:	4628      	mov	r0, r5
 801a092:	f7ff fc97 	bl	80199c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a096:	6030      	str	r0, [r6, #0]
 801a098:	6833      	ldr	r3, [r6, #0]
 801a09a:	b143      	cbz	r3, 801a0ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a09c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a0a0:	7a9b      	ldrb	r3, [r3, #10]
 801a0a2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a0a6:	4313      	orrs	r3, r2
 801a0a8:	bf0c      	ite	eq
 801a0aa:	2301      	moveq	r3, #1
 801a0ac:	2300      	movne	r3, #0
 801a0ae:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0b8:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d0eb      	beq.n	801a098 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a0c0:	f640 1302 	movw	r3, #2306	; 0x902
 801a0c4:	429c      	cmp	r4, r3
 801a0c6:	d1e7      	bne.n	801a098 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a0c8:	4601      	mov	r1, r0
 801a0ca:	4628      	mov	r0, r5
 801a0cc:	f7ff fbf9 	bl	80198c2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a0d0:	e7e1      	b.n	801a096 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801a0d2 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a0d2:	4602      	mov	r2, r0
 801a0d4:	b148      	cbz	r0, 801a0ea <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	b298      	uxth	r0, r3
 801a0da:	3301      	adds	r3, #1
 801a0dc:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a0e0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a0e4:	2900      	cmp	r1, #0
 801a0e6:	d1f7      	bne.n	801a0d8 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a0e8:	4770      	bx	lr
 801a0ea:	4770      	bx	lr

0801a0ec <_ZN8touchgfx7Unicode6strlenEPKc>:
 801a0ec:	b140      	cbz	r0, 801a100 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801a0ee:	4602      	mov	r2, r0
 801a0f0:	1a13      	subs	r3, r2, r0
 801a0f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	2900      	cmp	r1, #0
 801a0fa:	d1f9      	bne.n	801a0f0 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	4770      	bx	lr
 801a100:	4603      	mov	r3, r0
 801a102:	e7fb      	b.n	801a0fc <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801a104 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a104:	b530      	push	{r4, r5, lr}
 801a106:	4604      	mov	r4, r0
 801a108:	b159      	cbz	r1, 801a122 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a10a:	b148      	cbz	r0, 801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a10c:	2300      	movs	r3, #0
 801a10e:	b298      	uxth	r0, r3
 801a110:	4282      	cmp	r2, r0
 801a112:	d905      	bls.n	801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a114:	5ccd      	ldrb	r5, [r1, r3]
 801a116:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a11a:	3301      	adds	r3, #1
 801a11c:	2d00      	cmp	r5, #0
 801a11e:	d1f6      	bne.n	801a10e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a120:	bd30      	pop	{r4, r5, pc}
 801a122:	4608      	mov	r0, r1
 801a124:	e7fc      	b.n	801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a126 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a126:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a128:	468c      	mov	ip, r1
 801a12a:	b08b      	sub	sp, #44	; 0x2c
 801a12c:	2100      	movs	r1, #0
 801a12e:	ae01      	add	r6, sp, #4
 801a130:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a134:	211f      	movs	r1, #31
 801a136:	fbb0 f7f3 	udiv	r7, r0, r3
 801a13a:	fb03 0517 	mls	r5, r3, r7, r0
 801a13e:	4638      	mov	r0, r7
 801a140:	b2ec      	uxtb	r4, r5
 801a142:	2d09      	cmp	r5, #9
 801a144:	bfd4      	ite	le
 801a146:	3430      	addle	r4, #48	; 0x30
 801a148:	3457      	addgt	r4, #87	; 0x57
 801a14a:	b2e4      	uxtb	r4, r4
 801a14c:	558c      	strb	r4, [r1, r6]
 801a14e:	1e4c      	subs	r4, r1, #1
 801a150:	b92f      	cbnz	r7, 801a15e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a152:	4431      	add	r1, r6
 801a154:	4660      	mov	r0, ip
 801a156:	f7ff ffd5 	bl	801a104 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a15a:	b00b      	add	sp, #44	; 0x2c
 801a15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a15e:	4621      	mov	r1, r4
 801a160:	e7e9      	b.n	801a136 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a162 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a162:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a164:	4607      	mov	r7, r0
 801a166:	b08b      	sub	sp, #44	; 0x2c
 801a168:	4608      	mov	r0, r1
 801a16a:	b341      	cbz	r1, 801a1be <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a16c:	1e99      	subs	r1, r3, #2
 801a16e:	290e      	cmp	r1, #14
 801a170:	d825      	bhi.n	801a1be <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a172:	2100      	movs	r1, #0
 801a174:	463c      	mov	r4, r7
 801a176:	261f      	movs	r6, #31
 801a178:	f10d 0c04 	add.w	ip, sp, #4
 801a17c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a180:	1e71      	subs	r1, r6, #1
 801a182:	fb94 fef3 	sdiv	lr, r4, r3
 801a186:	fb03 441e 	mls	r4, r3, lr, r4
 801a18a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a18e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a192:	b2ec      	uxtb	r4, r5
 801a194:	2d09      	cmp	r5, #9
 801a196:	bfd4      	ite	le
 801a198:	3430      	addle	r4, #48	; 0x30
 801a19a:	3457      	addgt	r4, #87	; 0x57
 801a19c:	b2e4      	uxtb	r4, r4
 801a19e:	f80c 4006 	strb.w	r4, [ip, r6]
 801a1a2:	4674      	mov	r4, lr
 801a1a4:	b96c      	cbnz	r4, 801a1c2 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a1a6:	2f00      	cmp	r7, #0
 801a1a8:	da05      	bge.n	801a1b6 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a1aa:	ab0a      	add	r3, sp, #40	; 0x28
 801a1ac:	4419      	add	r1, r3
 801a1ae:	232d      	movs	r3, #45	; 0x2d
 801a1b0:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a1b4:	1eb1      	subs	r1, r6, #2
 801a1b6:	3101      	adds	r1, #1
 801a1b8:	4461      	add	r1, ip
 801a1ba:	f7ff ffa3 	bl	801a104 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a1be:	b00b      	add	sp, #44	; 0x2c
 801a1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1c2:	460e      	mov	r6, r1
 801a1c4:	e7dc      	b.n	801a180 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a1c6 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801a1c6:	b510      	push	{r4, lr}
 801a1c8:	b158      	cbz	r0, 801a1e2 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a1ca:	1e82      	subs	r2, r0, #2
 801a1cc:	210a      	movs	r1, #10
 801a1ce:	2000      	movs	r0, #0
 801a1d0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a1d4:	3b30      	subs	r3, #48	; 0x30
 801a1d6:	b29c      	uxth	r4, r3
 801a1d8:	2c09      	cmp	r4, #9
 801a1da:	d802      	bhi.n	801a1e2 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a1dc:	fb01 3000 	mla	r0, r1, r0, r3
 801a1e0:	e7f6      	b.n	801a1d0 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801a1e2:	bd10      	pop	{r4, pc}

0801a1e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1e8:	b085      	sub	sp, #20
 801a1ea:	f8d0 8000 	ldr.w	r8, [r0]
 801a1ee:	468a      	mov	sl, r1
 801a1f0:	461c      	mov	r4, r3
 801a1f2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a1f6:	4681      	mov	r9, r0
 801a1f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a1fc:	4640      	mov	r0, r8
 801a1fe:	9203      	str	r2, [sp, #12]
 801a200:	9102      	str	r1, [sp, #8]
 801a202:	9301      	str	r3, [sp, #4]
 801a204:	f7ff ff65 	bl	801a0d2 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a208:	9a03      	ldr	r2, [sp, #12]
 801a20a:	f1ba 0f00 	cmp.w	sl, #0
 801a20e:	bf0c      	ite	eq
 801a210:	4684      	moveq	ip, r0
 801a212:	f100 0c01 	addne.w	ip, r0, #1
 801a216:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801a21a:	8812      	ldrh	r2, [r2, #0]
 801a21c:	fa1f fc8c 	uxth.w	ip, ip
 801a220:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a222:	2a69      	cmp	r2, #105	; 0x69
 801a224:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a226:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801a228:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801a22c:	d004      	beq.n	801a238 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a22e:	d844      	bhi.n	801a2ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801a230:	2a58      	cmp	r2, #88	; 0x58
 801a232:	d001      	beq.n	801a238 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a234:	2a64      	cmp	r2, #100	; 0x64
 801a236:	d14b      	bne.n	801a2d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a238:	b1a4      	cbz	r4, 801a264 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a23a:	b956      	cbnz	r6, 801a252 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a23c:	2801      	cmp	r0, #1
 801a23e:	d108      	bne.n	801a252 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a240:	f8b8 2000 	ldrh.w	r2, [r8]
 801a244:	2a30      	cmp	r2, #48	; 0x30
 801a246:	bf02      	ittt	eq
 801a248:	f108 0202 	addeq.w	r2, r8, #2
 801a24c:	4630      	moveq	r0, r6
 801a24e:	f8c9 2000 	streq.w	r2, [r9]
 801a252:	45b4      	cmp	ip, r6
 801a254:	da3e      	bge.n	801a2d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801a256:	b2b6      	uxth	r6, r6
 801a258:	eba6 040c 	sub.w	r4, r6, ip
 801a25c:	46b4      	mov	ip, r6
 801a25e:	b2a4      	uxth	r4, r4
 801a260:	f04f 0b00 	mov.w	fp, #0
 801a264:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a268:	3a01      	subs	r2, #1
 801a26a:	b169      	cbz	r1, 801a288 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a26c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a26e:	458c      	cmp	ip, r1
 801a270:	da09      	bge.n	801a286 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a272:	eba1 010c 	sub.w	r1, r1, ip
 801a276:	b289      	uxth	r1, r1
 801a278:	b933      	cbnz	r3, 801a288 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a27a:	f1bb 0f00 	cmp.w	fp, #0
 801a27e:	d02b      	beq.n	801a2d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a280:	b350      	cbz	r0, 801a2d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a282:	440c      	add	r4, r1
 801a284:	b2a4      	uxth	r4, r4
 801a286:	2100      	movs	r1, #0
 801a288:	682b      	ldr	r3, [r5, #0]
 801a28a:	4293      	cmp	r3, r2
 801a28c:	da07      	bge.n	801a29e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a28e:	f1ba 0f00 	cmp.w	sl, #0
 801a292:	d004      	beq.n	801a29e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a294:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801a298:	682b      	ldr	r3, [r5, #0]
 801a29a:	3301      	adds	r3, #1
 801a29c:	602b      	str	r3, [r5, #0]
 801a29e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801a2a2:	b354      	cbz	r4, 801a2fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a2a4:	682e      	ldr	r6, [r5, #0]
 801a2a6:	3c01      	subs	r4, #1
 801a2a8:	42b2      	cmp	r2, r6
 801a2aa:	b2a4      	uxth	r4, r4
 801a2ac:	dd25      	ble.n	801a2fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a2ae:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a2b2:	682b      	ldr	r3, [r5, #0]
 801a2b4:	3301      	adds	r3, #1
 801a2b6:	602b      	str	r3, [r5, #0]
 801a2b8:	e7f3      	b.n	801a2a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801a2ba:	2a73      	cmp	r2, #115	; 0x73
 801a2bc:	d003      	beq.n	801a2c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801a2be:	2a78      	cmp	r2, #120	; 0x78
 801a2c0:	d0ba      	beq.n	801a238 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a2c2:	2a6f      	cmp	r2, #111	; 0x6f
 801a2c4:	e7b7      	b.n	801a236 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801a2c6:	2c00      	cmp	r4, #0
 801a2c8:	d0cc      	beq.n	801a264 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a2ca:	42b0      	cmp	r0, r6
 801a2cc:	dd00      	ble.n	801a2d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a2ce:	b2b0      	uxth	r0, r6
 801a2d0:	2400      	movs	r4, #0
 801a2d2:	e7c7      	b.n	801a264 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a2d4:	2400      	movs	r4, #0
 801a2d6:	e7c3      	b.n	801a260 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801a2d8:	2900      	cmp	r1, #0
 801a2da:	d0d5      	beq.n	801a288 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a2dc:	f04f 0c20 	mov.w	ip, #32
 801a2e0:	682e      	ldr	r6, [r5, #0]
 801a2e2:	2900      	cmp	r1, #0
 801a2e4:	d0d0      	beq.n	801a288 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a2e6:	3901      	subs	r1, #1
 801a2e8:	4296      	cmp	r6, r2
 801a2ea:	b289      	uxth	r1, r1
 801a2ec:	dacb      	bge.n	801a286 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a2ee:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a2f2:	682b      	ldr	r3, [r5, #0]
 801a2f4:	3301      	adds	r3, #1
 801a2f6:	602b      	str	r3, [r5, #0]
 801a2f8:	e7f2      	b.n	801a2e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801a2fa:	b198      	cbz	r0, 801a324 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a2fc:	f8d9 3000 	ldr.w	r3, [r9]
 801a300:	881c      	ldrh	r4, [r3, #0]
 801a302:	b17c      	cbz	r4, 801a324 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a304:	682c      	ldr	r4, [r5, #0]
 801a306:	3801      	subs	r0, #1
 801a308:	42a2      	cmp	r2, r4
 801a30a:	b280      	uxth	r0, r0
 801a30c:	dd0a      	ble.n	801a324 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a30e:	1c9c      	adds	r4, r3, #2
 801a310:	f8c9 4000 	str.w	r4, [r9]
 801a314:	881c      	ldrh	r4, [r3, #0]
 801a316:	682b      	ldr	r3, [r5, #0]
 801a318:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801a31c:	682b      	ldr	r3, [r5, #0]
 801a31e:	3301      	adds	r3, #1
 801a320:	602b      	str	r3, [r5, #0]
 801a322:	e7ea      	b.n	801a2fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a324:	2620      	movs	r6, #32
 801a326:	b151      	cbz	r1, 801a33e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801a328:	6828      	ldr	r0, [r5, #0]
 801a32a:	3901      	subs	r1, #1
 801a32c:	4282      	cmp	r2, r0
 801a32e:	b289      	uxth	r1, r1
 801a330:	dd05      	ble.n	801a33e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801a332:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801a336:	682b      	ldr	r3, [r5, #0]
 801a338:	3301      	adds	r3, #1
 801a33a:	602b      	str	r3, [r5, #0]
 801a33c:	e7f3      	b.n	801a326 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801a33e:	b005      	add	sp, #20
 801a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a344 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a348:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a34a:	4604      	mov	r4, r0
 801a34c:	f04f 0801 	mov.w	r8, #1
 801a350:	2000      	movs	r0, #0
 801a352:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801a356:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801a35a:	8008      	strh	r0, [r1, #0]
 801a35c:	7010      	strb	r0, [r2, #0]
 801a35e:	7018      	strb	r0, [r3, #0]
 801a360:	f88c 0000 	strb.w	r0, [ip]
 801a364:	f88e 0000 	strb.w	r0, [lr]
 801a368:	7030      	strb	r0, [r6, #0]
 801a36a:	6820      	ldr	r0, [r4, #0]
 801a36c:	8800      	ldrh	r0, [r0, #0]
 801a36e:	b190      	cbz	r0, 801a396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801a370:	282b      	cmp	r0, #43	; 0x2b
 801a372:	d001      	beq.n	801a378 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801a374:	2820      	cmp	r0, #32
 801a376:	d104      	bne.n	801a382 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801a378:	8008      	strh	r0, [r1, #0]
 801a37a:	6820      	ldr	r0, [r4, #0]
 801a37c:	3002      	adds	r0, #2
 801a37e:	6020      	str	r0, [r4, #0]
 801a380:	e7f3      	b.n	801a36a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801a382:	282d      	cmp	r0, #45	; 0x2d
 801a384:	d102      	bne.n	801a38c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801a386:	f882 8000 	strb.w	r8, [r2]
 801a38a:	e7f6      	b.n	801a37a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801a38c:	2823      	cmp	r0, #35	; 0x23
 801a38e:	d102      	bne.n	801a396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801a390:	f883 8000 	strb.w	r8, [r3]
 801a394:	e7f1      	b.n	801a37a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801a396:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a39a:	2b09      	cmp	r3, #9
 801a39c:	d901      	bls.n	801a3a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801a39e:	282a      	cmp	r0, #42	; 0x2a
 801a3a0:	d114      	bne.n	801a3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801a3a2:	2201      	movs	r2, #1
 801a3a4:	f88e 2000 	strb.w	r2, [lr]
 801a3a8:	6823      	ldr	r3, [r4, #0]
 801a3aa:	8819      	ldrh	r1, [r3, #0]
 801a3ac:	2930      	cmp	r1, #48	; 0x30
 801a3ae:	bf02      	ittt	eq
 801a3b0:	3302      	addeq	r3, #2
 801a3b2:	6023      	streq	r3, [r4, #0]
 801a3b4:	f88c 2000 	strbeq.w	r2, [ip]
 801a3b8:	6820      	ldr	r0, [r4, #0]
 801a3ba:	8803      	ldrh	r3, [r0, #0]
 801a3bc:	2b2a      	cmp	r3, #42	; 0x2a
 801a3be:	d11e      	bne.n	801a3fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801a3c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a3c4:	603b      	str	r3, [r7, #0]
 801a3c6:	6823      	ldr	r3, [r4, #0]
 801a3c8:	3302      	adds	r3, #2
 801a3ca:	6023      	str	r3, [r4, #0]
 801a3cc:	6823      	ldr	r3, [r4, #0]
 801a3ce:	881b      	ldrh	r3, [r3, #0]
 801a3d0:	2b2e      	cmp	r3, #46	; 0x2e
 801a3d2:	d112      	bne.n	801a3fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801a3d4:	2301      	movs	r3, #1
 801a3d6:	7033      	strb	r3, [r6, #0]
 801a3d8:	6823      	ldr	r3, [r4, #0]
 801a3da:	1c98      	adds	r0, r3, #2
 801a3dc:	6020      	str	r0, [r4, #0]
 801a3de:	885b      	ldrh	r3, [r3, #2]
 801a3e0:	2b2a      	cmp	r3, #42	; 0x2a
 801a3e2:	d117      	bne.n	801a414 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801a3e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a3e8:	602b      	str	r3, [r5, #0]
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	3302      	adds	r3, #2
 801a3ee:	6023      	str	r3, [r4, #0]
 801a3f0:	682b      	ldr	r3, [r5, #0]
 801a3f2:	2b06      	cmp	r3, #6
 801a3f4:	bfa8      	it	ge
 801a3f6:	2306      	movge	r3, #6
 801a3f8:	602b      	str	r3, [r5, #0]
 801a3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3fe:	f7ff fee2 	bl	801a1c6 <_ZN8touchgfx7Unicode4atoiEPKt>
 801a402:	6038      	str	r0, [r7, #0]
 801a404:	6823      	ldr	r3, [r4, #0]
 801a406:	881a      	ldrh	r2, [r3, #0]
 801a408:	3a30      	subs	r2, #48	; 0x30
 801a40a:	2a09      	cmp	r2, #9
 801a40c:	d8de      	bhi.n	801a3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801a40e:	3302      	adds	r3, #2
 801a410:	6023      	str	r3, [r4, #0]
 801a412:	e7f7      	b.n	801a404 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801a414:	f7ff fed7 	bl	801a1c6 <_ZN8touchgfx7Unicode4atoiEPKt>
 801a418:	6028      	str	r0, [r5, #0]
 801a41a:	6823      	ldr	r3, [r4, #0]
 801a41c:	881a      	ldrh	r2, [r3, #0]
 801a41e:	3a30      	subs	r2, #48	; 0x30
 801a420:	2a09      	cmp	r2, #9
 801a422:	d8e5      	bhi.n	801a3f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801a424:	3302      	adds	r3, #2
 801a426:	6023      	str	r3, [r4, #0]
 801a428:	e7f7      	b.n	801a41a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801a42a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801a42a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a42e:	b0a2      	sub	sp, #136	; 0x88
 801a430:	2500      	movs	r5, #0
 801a432:	4606      	mov	r6, r0
 801a434:	460f      	mov	r7, r1
 801a436:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801a43a:	9209      	str	r2, [sp, #36]	; 0x24
 801a43c:	4629      	mov	r1, r5
 801a43e:	2242      	movs	r2, #66	; 0x42
 801a440:	4640      	mov	r0, r8
 801a442:	461c      	mov	r4, r3
 801a444:	950d      	str	r5, [sp, #52]	; 0x34
 801a446:	f7fe fe26 	bl	8019096 <_ZN8touchgfx6memsetEPvhm>
 801a44a:	b30e      	cbz	r6, 801a490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801a44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a44e:	b1f3      	cbz	r3, 801a48e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801a450:	f107 3aff 	add.w	sl, r7, #4294967295
 801a454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a458:	8812      	ldrh	r2, [r2, #0]
 801a45a:	2a00      	cmp	r2, #0
 801a45c:	f000 80b3 	beq.w	801a5c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801a460:	459a      	cmp	sl, r3
 801a462:	f340 80b0 	ble.w	801a5c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801a466:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a46c:	f8b9 2000 	ldrh.w	r2, [r9]
 801a470:	2a00      	cmp	r2, #0
 801a472:	d0ef      	beq.n	801a454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a474:	2a25      	cmp	r2, #37	; 0x25
 801a476:	f000 80aa 	beq.w	801a5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801a47a:	459a      	cmp	sl, r3
 801a47c:	ddea      	ble.n	801a454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a47e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a482:	f109 0202 	add.w	r2, r9, #2
 801a486:	3301      	adds	r3, #1
 801a488:	9209      	str	r2, [sp, #36]	; 0x24
 801a48a:	930d      	str	r3, [sp, #52]	; 0x34
 801a48c:	e7eb      	b.n	801a466 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801a48e:	8033      	strh	r3, [r6, #0]
 801a490:	4630      	mov	r0, r6
 801a492:	b022      	add	sp, #136	; 0x88
 801a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a498:	3b63      	subs	r3, #99	; 0x63
 801a49a:	2b01      	cmp	r3, #1
 801a49c:	f200 80df 	bhi.w	801a65e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801a4a0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801a4a4:	8813      	ldrh	r3, [r2, #0]
 801a4a6:	2b69      	cmp	r3, #105	; 0x69
 801a4a8:	d058      	beq.n	801a55c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801a4aa:	d81b      	bhi.n	801a4e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801a4ac:	2b63      	cmp	r3, #99	; 0x63
 801a4ae:	d02e      	beq.n	801a50e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801a4b0:	2b64      	cmp	r3, #100	; 0x64
 801a4b2:	d053      	beq.n	801a55c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801a4b4:	2b58      	cmp	r3, #88	; 0x58
 801a4b6:	d06f      	beq.n	801a598 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801a4b8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801a4bc:	46a1      	mov	r9, r4
 801a4be:	e02d      	b.n	801a51c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a4c0:	2b73      	cmp	r3, #115	; 0x73
 801a4c2:	d0ed      	beq.n	801a4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a4c4:	d803      	bhi.n	801a4ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801a4c6:	2b6f      	cmp	r3, #111	; 0x6f
 801a4c8:	f040 80c9 	bne.w	801a65e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801a4cc:	e7e8      	b.n	801a4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a4ce:	2b75      	cmp	r3, #117	; 0x75
 801a4d0:	d0e6      	beq.n	801a4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a4d2:	2b78      	cmp	r3, #120	; 0x78
 801a4d4:	e7f8      	b.n	801a4c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801a4d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4d8:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4de:	3302      	adds	r3, #2
 801a4e0:	9309      	str	r3, [sp, #36]	; 0x24
 801a4e2:	e7b7      	b.n	801a454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a4e4:	2b73      	cmp	r3, #115	; 0x73
 801a4e6:	d034      	beq.n	801a552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801a4e8:	d807      	bhi.n	801a4fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801a4ea:	2b6f      	cmp	r3, #111	; 0x6f
 801a4ec:	d1e4      	bne.n	801a4b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801a4ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4f0:	f104 0904 	add.w	r9, r4, #4
 801a4f4:	2308      	movs	r3, #8
 801a4f6:	1aba      	subs	r2, r7, r2
 801a4f8:	e048      	b.n	801a58c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801a4fa:	2b75      	cmp	r3, #117	; 0x75
 801a4fc:	d041      	beq.n	801a582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801a4fe:	2b78      	cmp	r3, #120	; 0x78
 801a500:	d1da      	bne.n	801a4b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801a502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a504:	f104 0904 	add.w	r9, r4, #4
 801a508:	2310      	movs	r3, #16
 801a50a:	1aba      	subs	r2, r7, r2
 801a50c:	e03e      	b.n	801a58c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801a50e:	7823      	ldrb	r3, [r4, #0]
 801a510:	f104 0904 	add.w	r9, r4, #4
 801a514:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801a518:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801a51c:	aa0d      	add	r2, sp, #52	; 0x34
 801a51e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801a522:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801a526:	a810      	add	r0, sp, #64	; 0x40
 801a528:	9205      	str	r2, [sp, #20]
 801a52a:	464c      	mov	r4, r9
 801a52c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801a530:	9204      	str	r2, [sp, #16]
 801a532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a534:	9203      	str	r2, [sp, #12]
 801a536:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801a53a:	9202      	str	r2, [sp, #8]
 801a53c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a53e:	9201      	str	r2, [sp, #4]
 801a540:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801a544:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801a548:	9200      	str	r2, [sp, #0]
 801a54a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a54c:	f7ff fe4a 	bl	801a1e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801a550:	e7c4      	b.n	801a4dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801a552:	f104 0904 	add.w	r9, r4, #4
 801a556:	6823      	ldr	r3, [r4, #0]
 801a558:	9310      	str	r3, [sp, #64]	; 0x40
 801a55a:	e7df      	b.n	801a51c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a55c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a55e:	230a      	movs	r3, #10
 801a560:	4641      	mov	r1, r8
 801a562:	6820      	ldr	r0, [r4, #0]
 801a564:	1aba      	subs	r2, r7, r2
 801a566:	f104 0904 	add.w	r9, r4, #4
 801a56a:	b292      	uxth	r2, r2
 801a56c:	f7ff fdf9 	bl	801a162 <_ZN8touchgfx7Unicode4itoaElPtti>
 801a570:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a574:	2b2d      	cmp	r3, #45	; 0x2d
 801a576:	d1d1      	bne.n	801a51c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a578:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a57e:	3302      	adds	r3, #2
 801a580:	e7ea      	b.n	801a558 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801a582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a584:	f104 0904 	add.w	r9, r4, #4
 801a588:	230a      	movs	r3, #10
 801a58a:	1aba      	subs	r2, r7, r2
 801a58c:	b292      	uxth	r2, r2
 801a58e:	4641      	mov	r1, r8
 801a590:	6820      	ldr	r0, [r4, #0]
 801a592:	f7ff fdc8 	bl	801a126 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a596:	e7c1      	b.n	801a51c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a59a:	2310      	movs	r3, #16
 801a59c:	4641      	mov	r1, r8
 801a59e:	6820      	ldr	r0, [r4, #0]
 801a5a0:	1aba      	subs	r2, r7, r2
 801a5a2:	f104 0904 	add.w	r9, r4, #4
 801a5a6:	b292      	uxth	r2, r2
 801a5a8:	f7ff fdbd 	bl	801a126 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a5ac:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801a5b0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d0b1      	beq.n	801a51c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a5b8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801a5bc:	2919      	cmp	r1, #25
 801a5be:	d8f7      	bhi.n	801a5b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801a5c0:	3b20      	subs	r3, #32
 801a5c2:	8013      	strh	r3, [r2, #0]
 801a5c4:	e7f4      	b.n	801a5b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a5cc:	e760      	b.n	801a490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801a5ce:	459a      	cmp	sl, r3
 801a5d0:	f77f af40 	ble.w	801a454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a5d4:	f109 0302 	add.w	r3, r9, #2
 801a5d8:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801a5dc:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801a5e0:	a809      	add	r0, sp, #36	; 0x24
 801a5e2:	9309      	str	r3, [sp, #36]	; 0x24
 801a5e4:	ab0f      	add	r3, sp, #60	; 0x3c
 801a5e6:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801a5ea:	9304      	str	r3, [sp, #16]
 801a5ec:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801a5f0:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801a5f4:	9303      	str	r3, [sp, #12]
 801a5f6:	ab0e      	add	r3, sp, #56	; 0x38
 801a5f8:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801a5fc:	9302      	str	r3, [sp, #8]
 801a5fe:	ab0c      	add	r3, sp, #48	; 0x30
 801a600:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801a604:	9301      	str	r3, [sp, #4]
 801a606:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801a60a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801a60e:	9300      	str	r3, [sp, #0]
 801a610:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801a614:	950e      	str	r5, [sp, #56]	; 0x38
 801a616:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801a61a:	950f      	str	r5, [sp, #60]	; 0x3c
 801a61c:	f7ff fe92 	bl	801a344 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801a620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a624:	2b00      	cmp	r3, #0
 801a626:	bfbf      	itttt	lt
 801a628:	6823      	ldrlt	r3, [r4, #0]
 801a62a:	3404      	addlt	r4, #4
 801a62c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a630:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a634:	2b00      	cmp	r3, #0
 801a636:	bfbf      	itttt	lt
 801a638:	6823      	ldrlt	r3, [r4, #0]
 801a63a:	3404      	addlt	r4, #4
 801a63c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a640:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801a642:	8813      	ldrh	r3, [r2, #0]
 801a644:	2b69      	cmp	r3, #105	; 0x69
 801a646:	f43f af2b 	beq.w	801a4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a64a:	f63f af39 	bhi.w	801a4c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801a64e:	2b58      	cmp	r3, #88	; 0x58
 801a650:	f43f af26 	beq.w	801a4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a654:	f63f af20 	bhi.w	801a498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801a658:	2b25      	cmp	r3, #37	; 0x25
 801a65a:	f43f af3c 	beq.w	801a4d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801a65e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a660:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a664:	f8b9 2000 	ldrh.w	r2, [r9]
 801a668:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a66c:	3301      	adds	r3, #1
 801a66e:	930d      	str	r3, [sp, #52]	; 0x34
 801a670:	e734      	b.n	801a4dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801a674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a676:	4605      	mov	r5, r0
 801a678:	b0a1      	sub	sp, #132	; 0x84
 801a67a:	4610      	mov	r0, r2
 801a67c:	460e      	mov	r6, r1
 801a67e:	4614      	mov	r4, r2
 801a680:	461f      	mov	r7, r3
 801a682:	f7ff fd33 	bl	801a0ec <_ZN8touchgfx7Unicode6strlenEPKc>
 801a686:	283f      	cmp	r0, #63	; 0x3f
 801a688:	d906      	bls.n	801a698 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801a68a:	4b0a      	ldr	r3, [pc, #40]	; (801a6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801a68c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801a690:	4a09      	ldr	r2, [pc, #36]	; (801a6b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801a692:	480a      	ldr	r0, [pc, #40]	; (801a6bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801a694:	f009 ffac 	bl	80245f0 <__assert_func>
 801a698:	4621      	mov	r1, r4
 801a69a:	2240      	movs	r2, #64	; 0x40
 801a69c:	4668      	mov	r0, sp
 801a69e:	f7ff fd31 	bl	801a104 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a6a2:	463b      	mov	r3, r7
 801a6a4:	466a      	mov	r2, sp
 801a6a6:	4631      	mov	r1, r6
 801a6a8:	4628      	mov	r0, r5
 801a6aa:	f7ff febe 	bl	801a42a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801a6ae:	b021      	add	sp, #132	; 0x84
 801a6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6b2:	bf00      	nop
 801a6b4:	08028851 	.word	0x08028851
 801a6b8:	08028923 	.word	0x08028923
 801a6bc:	0802886e 	.word	0x0802886e

0801a6c0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a6c0:	b40c      	push	{r2, r3}
 801a6c2:	b507      	push	{r0, r1, r2, lr}
 801a6c4:	ab04      	add	r3, sp, #16
 801a6c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6ca:	9301      	str	r3, [sp, #4]
 801a6cc:	f7ff ffd2 	bl	801a674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a6d0:	b003      	add	sp, #12
 801a6d2:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6d6:	b002      	add	sp, #8
 801a6d8:	4770      	bx	lr
	...

0801a6dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e0:	b0c3      	sub	sp, #268	; 0x10c
 801a6e2:	2400      	movs	r4, #0
 801a6e4:	4606      	mov	r6, r0
 801a6e6:	4689      	mov	r9, r1
 801a6e8:	af10      	add	r7, sp, #64	; 0x40
 801a6ea:	9209      	str	r2, [sp, #36]	; 0x24
 801a6ec:	4621      	mov	r1, r4
 801a6ee:	22c8      	movs	r2, #200	; 0xc8
 801a6f0:	4638      	mov	r0, r7
 801a6f2:	469a      	mov	sl, r3
 801a6f4:	940c      	str	r4, [sp, #48]	; 0x30
 801a6f6:	f7fe fcce 	bl	8019096 <_ZN8touchgfx6memsetEPvhm>
 801a6fa:	b116      	cbz	r6, 801a702 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6fe:	b923      	cbnz	r3, 801a70a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801a700:	8033      	strh	r3, [r6, #0]
 801a702:	4630      	mov	r0, r6
 801a704:	b043      	add	sp, #268	; 0x10c
 801a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a70a:	f109 3bff 	add.w	fp, r9, #4294967295
 801a70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a712:	8812      	ldrh	r2, [r2, #0]
 801a714:	2a00      	cmp	r2, #0
 801a716:	f000 80d1 	beq.w	801a8bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801a71a:	459b      	cmp	fp, r3
 801a71c:	f340 80ce 	ble.w	801a8bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801a720:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a724:	882a      	ldrh	r2, [r5, #0]
 801a726:	2a00      	cmp	r2, #0
 801a728:	d0f1      	beq.n	801a70e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a72a:	2a25      	cmp	r2, #37	; 0x25
 801a72c:	f000 80ca 	beq.w	801a8c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801a730:	459b      	cmp	fp, r3
 801a732:	ddec      	ble.n	801a70e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a734:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a738:	3502      	adds	r5, #2
 801a73a:	3301      	adds	r3, #1
 801a73c:	9509      	str	r5, [sp, #36]	; 0x24
 801a73e:	930c      	str	r3, [sp, #48]	; 0x30
 801a740:	e7ee      	b.n	801a720 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801a742:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a746:	3202      	adds	r2, #2
 801a748:	920c      	str	r2, [sp, #48]	; 0x30
 801a74a:	e0ac      	b.n	801a8a6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801a74c:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a750:	970f      	str	r7, [sp, #60]	; 0x3c
 801a752:	3401      	adds	r4, #1
 801a754:	edd3 7a00 	vldr	s15, [r3]
 801a758:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801a75c:	b923      	cbnz	r3, 801a768 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801a75e:	2301      	movs	r3, #1
 801a760:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801a764:	2303      	movs	r3, #3
 801a766:	930e      	str	r3, [sp, #56]	; 0x38
 801a768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a76c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a76e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801a772:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801a970 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801a776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a77a:	bf42      	ittt	mi
 801a77c:	232d      	movmi	r3, #45	; 0x2d
 801a77e:	eef1 7a67 	vnegmi.f32	s15, s15
 801a782:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801a786:	2300      	movs	r3, #0
 801a788:	4298      	cmp	r0, r3
 801a78a:	dd03      	ble.n	801a794 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801a78c:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a790:	3301      	adds	r3, #1
 801a792:	e7f9      	b.n	801a788 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801a794:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a79c:	eeb0 7a67 	vmov.f32	s14, s15
 801a7a0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7a8:	da26      	bge.n	801a7f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801a7aa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a7ae:	eba9 0202 	sub.w	r2, r9, r2
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	eef4 6ae5 	vcmpe.f32	s13, s11
 801a7b8:	b28d      	uxth	r5, r1
 801a7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7be:	db21      	blt.n	801a804 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a7c0:	1a53      	subs	r3, r2, r1
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	dd1e      	ble.n	801a804 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a7c6:	2963      	cmp	r1, #99	; 0x63
 801a7c8:	d01b      	beq.n	801a802 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801a7ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a7ce:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a7d2:	ee17 3a10 	vmov	r3, s14
 801a7d6:	2b09      	cmp	r3, #9
 801a7d8:	bfa8      	it	ge
 801a7da:	2309      	movge	r3, #9
 801a7dc:	ee07 3a10 	vmov	s14, r3
 801a7e0:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801a7e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7e8:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801a7ec:	3101      	adds	r1, #1
 801a7ee:	eee7 7a66 	vfms.f32	s15, s14, s13
 801a7f2:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801a7f6:	e7dd      	b.n	801a7b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801a7f8:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a7fc:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a800:	e7ce      	b.n	801a7a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801a802:	460d      	mov	r5, r1
 801a804:	2a63      	cmp	r2, #99	; 0x63
 801a806:	bfd4      	ite	le
 801a808:	ebc5 0202 	rsble	r2, r5, r2
 801a80c:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801a810:	2a00      	cmp	r2, #0
 801a812:	dd4e      	ble.n	801a8b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801a814:	4603      	mov	r3, r0
 801a816:	f04f 0801 	mov.w	r8, #1
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	dd0e      	ble.n	801a83c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801a81e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a822:	210a      	movs	r1, #10
 801a824:	3b01      	subs	r3, #1
 801a826:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a82a:	ee17 ca10 	vmov	ip, s14
 801a82e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a832:	fb01 c808 	mla	r8, r1, r8, ip
 801a836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a83a:	e7ee      	b.n	801a81a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801a83c:	2800      	cmp	r0, #0
 801a83e:	f100 33ff 	add.w	r3, r0, #4294967295
 801a842:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801a846:	bfac      	ite	ge
 801a848:	1a18      	subge	r0, r3, r0
 801a84a:	4618      	movlt	r0, r3
 801a84c:	b292      	uxth	r2, r2
 801a84e:	230a      	movs	r3, #10
 801a850:	900e      	str	r0, [sp, #56]	; 0x38
 801a852:	1979      	adds	r1, r7, r5
 801a854:	4640      	mov	r0, r8
 801a856:	f7ff fc84 	bl	801a162 <_ZN8touchgfx7Unicode4itoaElPtti>
 801a85a:	f1b8 0f01 	cmp.w	r8, #1
 801a85e:	dc26      	bgt.n	801a8ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801a860:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801a864:	2b00      	cmp	r3, #0
 801a866:	bf0c      	ite	eq
 801a868:	2300      	moveq	r3, #0
 801a86a:	232e      	movne	r3, #46	; 0x2e
 801a86c:	aa42      	add	r2, sp, #264	; 0x108
 801a86e:	4415      	add	r5, r2
 801a870:	aa0c      	add	r2, sp, #48	; 0x30
 801a872:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801a876:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a87a:	a80f      	add	r0, sp, #60	; 0x3c
 801a87c:	9205      	str	r2, [sp, #20]
 801a87e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801a882:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801a886:	9204      	str	r2, [sp, #16]
 801a888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a88a:	9203      	str	r2, [sp, #12]
 801a88c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801a890:	9202      	str	r2, [sp, #8]
 801a892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a894:	9201      	str	r2, [sp, #4]
 801a896:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801a89a:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801a89e:	9200      	str	r2, [sp, #0]
 801a8a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8a2:	f7ff fc9f 	bl	801a1e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801a8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8a8:	3302      	adds	r3, #2
 801a8aa:	9309      	str	r3, [sp, #36]	; 0x24
 801a8ac:	e72f      	b.n	801a70e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a8ae:	232e      	movs	r3, #46	; 0x2e
 801a8b0:	e7dc      	b.n	801a86c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801a8b2:	ab42      	add	r3, sp, #264	; 0x108
 801a8b4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	e7d9      	b.n	801a870 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801a8bc:	2200      	movs	r2, #0
 801a8be:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a8c2:	e71e      	b.n	801a702 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801a8c4:	459b      	cmp	fp, r3
 801a8c6:	f77f af22 	ble.w	801a70e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801a8d0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801a8d4:	a809      	add	r0, sp, #36	; 0x24
 801a8d6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8e2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a8e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a8ea:	930d      	str	r3, [sp, #52]	; 0x34
 801a8ec:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801a8f0:	930e      	str	r3, [sp, #56]	; 0x38
 801a8f2:	1cab      	adds	r3, r5, #2
 801a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 801a8f6:	ab0e      	add	r3, sp, #56	; 0x38
 801a8f8:	9304      	str	r3, [sp, #16]
 801a8fa:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801a8fe:	9303      	str	r3, [sp, #12]
 801a900:	ab0d      	add	r3, sp, #52	; 0x34
 801a902:	9302      	str	r3, [sp, #8]
 801a904:	ab0b      	add	r3, sp, #44	; 0x2c
 801a906:	9301      	str	r3, [sp, #4]
 801a908:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801a90c:	9300      	str	r3, [sp, #0]
 801a90e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801a912:	f7ff fd17 	bl	801a344 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801a916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a918:	2b00      	cmp	r3, #0
 801a91a:	da0b      	bge.n	801a934 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801a91c:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a920:	3401      	adds	r4, #1
 801a922:	edd3 7a00 	vldr	s15, [r3]
 801a926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a92a:	ee17 3a90 	vmov	r3, s15
 801a92e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a932:	930d      	str	r3, [sp, #52]	; 0x34
 801a934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a936:	2b00      	cmp	r3, #0
 801a938:	da0b      	bge.n	801a952 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801a93a:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a93e:	3401      	adds	r4, #1
 801a940:	edd3 7a00 	vldr	s15, [r3]
 801a944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a948:	ee17 3a90 	vmov	r3, s15
 801a94c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a950:	930e      	str	r3, [sp, #56]	; 0x38
 801a952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a956:	881b      	ldrh	r3, [r3, #0]
 801a958:	2b25      	cmp	r3, #37	; 0x25
 801a95a:	f43f aef2 	beq.w	801a742 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801a95e:	2b66      	cmp	r3, #102	; 0x66
 801a960:	f43f aef4 	beq.w	801a74c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801a964:	9509      	str	r5, [sp, #36]	; 0x24
 801a966:	882b      	ldrh	r3, [r5, #0]
 801a968:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a96c:	3201      	adds	r2, #1
 801a96e:	e6eb      	b.n	801a748 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801a970:	3f000002 	.word	0x3f000002

0801a974 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801a974:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a976:	4605      	mov	r5, r0
 801a978:	b0a1      	sub	sp, #132	; 0x84
 801a97a:	4610      	mov	r0, r2
 801a97c:	460e      	mov	r6, r1
 801a97e:	4614      	mov	r4, r2
 801a980:	461f      	mov	r7, r3
 801a982:	f7ff fbb3 	bl	801a0ec <_ZN8touchgfx7Unicode6strlenEPKc>
 801a986:	283f      	cmp	r0, #63	; 0x3f
 801a988:	d906      	bls.n	801a998 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801a98a:	4b0a      	ldr	r3, [pc, #40]	; (801a9b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801a98c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801a990:	4a09      	ldr	r2, [pc, #36]	; (801a9b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801a992:	480a      	ldr	r0, [pc, #40]	; (801a9bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801a994:	f009 fe2c 	bl	80245f0 <__assert_func>
 801a998:	4621      	mov	r1, r4
 801a99a:	2240      	movs	r2, #64	; 0x40
 801a99c:	4668      	mov	r0, sp
 801a99e:	f7ff fbb1 	bl	801a104 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a9a2:	463b      	mov	r3, r7
 801a9a4:	466a      	mov	r2, sp
 801a9a6:	4631      	mov	r1, r6
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	f7ff fe97 	bl	801a6dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801a9ae:	b021      	add	sp, #132	; 0x84
 801a9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9b2:	bf00      	nop
 801a9b4:	08028851 	.word	0x08028851
 801a9b8:	08028894 	.word	0x08028894
 801a9bc:	0802886e 	.word	0x0802886e

0801a9c0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a9c0:	4b01      	ldr	r3, [pc, #4]	; (801a9c8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a9c2:	6018      	str	r0, [r3, #0]
 801a9c4:	4770      	bx	lr
 801a9c6:	bf00      	nop
 801a9c8:	2000bd08 	.word	0x2000bd08

0801a9cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a9cc:	4b07      	ldr	r3, [pc, #28]	; (801a9ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801a9ce:	881a      	ldrh	r2, [r3, #0]
 801a9d0:	4282      	cmp	r2, r0
 801a9d2:	d809      	bhi.n	801a9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a9d4:	4b06      	ldr	r3, [pc, #24]	; (801a9f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801a9d6:	881b      	ldrh	r3, [r3, #0]
 801a9d8:	4413      	add	r3, r2
 801a9da:	4298      	cmp	r0, r3
 801a9dc:	da04      	bge.n	801a9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a9de:	4b05      	ldr	r3, [pc, #20]	; (801a9f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a9e6:	4770      	bx	lr
 801a9e8:	2000      	movs	r0, #0
 801a9ea:	4770      	bx	lr
 801a9ec:	2000bd28 	.word	0x2000bd28
 801a9f0:	2000bd2c 	.word	0x2000bd2c
 801a9f4:	2000bd0c 	.word	0x2000bd0c

0801a9f8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9fc:	4d26      	ldr	r5, [pc, #152]	; (801aa98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a9fe:	682b      	ldr	r3, [r5, #0]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d046      	beq.n	801aa92 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801aa04:	4a25      	ldr	r2, [pc, #148]	; (801aa9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801aa06:	4f26      	ldr	r7, [pc, #152]	; (801aaa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801aa08:	8810      	ldrh	r0, [r2, #0]
 801aa0a:	883c      	ldrh	r4, [r7, #0]
 801aa0c:	4e25      	ldr	r6, [pc, #148]	; (801aaa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801aa0e:	4420      	add	r0, r4
 801aa10:	1c42      	adds	r2, r0, #1
 801aa12:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801aa16:	f022 0201 	bic.w	r2, r2, #1
 801aa1a:	0412      	lsls	r2, r2, #16
 801aa1c:	0c12      	lsrs	r2, r2, #16
 801aa1e:	0051      	lsls	r1, r2, #1
 801aa20:	220e      	movs	r2, #14
 801aa22:	eb08 0e01 	add.w	lr, r8, r1
 801aa26:	fb02 fc04 	mul.w	ip, r2, r4
 801aa2a:	eb03 0208 	add.w	r2, r3, r8
 801aa2e:	4c1e      	ldr	r4, [pc, #120]	; (801aaa8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801aa30:	6022      	str	r2, [r4, #0]
 801aa32:	eb03 020e 	add.w	r2, r3, lr
 801aa36:	44e6      	add	lr, ip
 801aa38:	6032      	str	r2, [r6, #0]
 801aa3a:	4473      	add	r3, lr
 801aa3c:	4a1b      	ldr	r2, [pc, #108]	; (801aaac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801aa3e:	6013      	str	r3, [r2, #0]
 801aa40:	2300      	movs	r3, #0
 801aa42:	4a1b      	ldr	r2, [pc, #108]	; (801aab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801aa44:	8013      	strh	r3, [r2, #0]
 801aa46:	4a1b      	ldr	r2, [pc, #108]	; (801aab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801aa48:	6812      	ldr	r2, [r2, #0]
 801aa4a:	eba2 0208 	sub.w	r2, r2, r8
 801aa4e:	1a52      	subs	r2, r2, r1
 801aa50:	4919      	ldr	r1, [pc, #100]	; (801aab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801aa52:	eba2 020c 	sub.w	r2, r2, ip
 801aa56:	469c      	mov	ip, r3
 801aa58:	600a      	str	r2, [r1, #0]
 801aa5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801aa5e:	4a17      	ldr	r2, [pc, #92]	; (801aabc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801aa60:	8013      	strh	r3, [r2, #0]
 801aa62:	4283      	cmp	r3, r0
 801aa64:	d10d      	bne.n	801aa82 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801aa66:	883d      	ldrh	r5, [r7, #0]
 801aa68:	2300      	movs	r3, #0
 801aa6a:	6830      	ldr	r0, [r6, #0]
 801aa6c:	240e      	movs	r4, #14
 801aa6e:	429d      	cmp	r5, r3
 801aa70:	d90f      	bls.n	801aa92 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801aa72:	fb04 0203 	mla	r2, r4, r3, r0
 801aa76:	3301      	adds	r3, #1
 801aa78:	7b11      	ldrb	r1, [r2, #12]
 801aa7a:	f36f 1145 	bfc	r1, #5, #1
 801aa7e:	7311      	strb	r1, [r2, #12]
 801aa80:	e7f5      	b.n	801aa6e <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801aa82:	682a      	ldr	r2, [r5, #0]
 801aa84:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801aa88:	6822      	ldr	r2, [r4, #0]
 801aa8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801aa8e:	3301      	adds	r3, #1
 801aa90:	e7e7      	b.n	801aa62 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801aa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa96:	bf00      	nop
 801aa98:	2000bd0c 	.word	0x2000bd0c
 801aa9c:	2000bd28 	.word	0x2000bd28
 801aaa0:	2000bd2c 	.word	0x2000bd2c
 801aaa4:	2000bd10 	.word	0x2000bd10
 801aaa8:	2000bd20 	.word	0x2000bd20
 801aaac:	2000bd18 	.word	0x2000bd18
 801aab0:	2000bd2a 	.word	0x2000bd2a
 801aab4:	2000bd14 	.word	0x2000bd14
 801aab8:	2000bd24 	.word	0x2000bd24
 801aabc:	2000bd1c 	.word	0x2000bd1c

0801aac0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801aac0:	4b10      	ldr	r3, [pc, #64]	; (801ab04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801aac2:	b510      	push	{r4, lr}
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	b9db      	cbnz	r3, 801ab00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801aac8:	b1d1      	cbz	r1, 801ab00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801aaca:	4b0f      	ldr	r3, [pc, #60]	; (801ab08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801aacc:	240e      	movs	r4, #14
 801aace:	801a      	strh	r2, [r3, #0]
 801aad0:	b292      	uxth	r2, r2
 801aad2:	4b0e      	ldr	r3, [pc, #56]	; (801ab0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801aad4:	881b      	ldrh	r3, [r3, #0]
 801aad6:	4413      	add	r3, r2
 801aad8:	4362      	muls	r2, r4
 801aada:	2406      	movs	r4, #6
 801aadc:	fb04 2203 	mla	r2, r4, r3, r2
 801aae0:	428a      	cmp	r2, r1
 801aae2:	d305      	bcc.n	801aaf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801aae4:	4b0a      	ldr	r3, [pc, #40]	; (801ab10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801aae6:	2137      	movs	r1, #55	; 0x37
 801aae8:	4a0a      	ldr	r2, [pc, #40]	; (801ab14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801aaea:	480b      	ldr	r0, [pc, #44]	; (801ab18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801aaec:	f009 fd80 	bl	80245f0 <__assert_func>
 801aaf0:	4b0a      	ldr	r3, [pc, #40]	; (801ab1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801aaf2:	6019      	str	r1, [r3, #0]
 801aaf4:	4b0a      	ldr	r3, [pc, #40]	; (801ab20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801aaf6:	6018      	str	r0, [r3, #0]
 801aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aafc:	f7ff bf7c 	b.w	801a9f8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ab00:	bd10      	pop	{r4, pc}
 801ab02:	bf00      	nop
 801ab04:	2000bd18 	.word	0x2000bd18
 801ab08:	2000bd2c 	.word	0x2000bd2c
 801ab0c:	2000bd28 	.word	0x2000bd28
 801ab10:	08028a05 	.word	0x08028a05
 801ab14:	08028a5e 	.word	0x08028a5e
 801ab18:	080289e0 	.word	0x080289e0
 801ab1c:	2000bd14 	.word	0x2000bd14
 801ab20:	2000bd0c 	.word	0x2000bd0c

0801ab24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ab24:	b470      	push	{r4, r5, r6}
 801ab26:	4c07      	ldr	r4, [pc, #28]	; (801ab44 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ab28:	4605      	mov	r5, r0
 801ab2a:	4610      	mov	r0, r2
 801ab2c:	9a03      	ldr	r2, [sp, #12]
 801ab2e:	6826      	ldr	r6, [r4, #0]
 801ab30:	b936      	cbnz	r6, 801ab40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ab32:	6025      	str	r5, [r4, #0]
 801ab34:	4c04      	ldr	r4, [pc, #16]	; (801ab48 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ab36:	8021      	strh	r1, [r4, #0]
 801ab38:	4619      	mov	r1, r3
 801ab3a:	bc70      	pop	{r4, r5, r6}
 801ab3c:	f7ff bfc0 	b.w	801aac0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ab40:	bc70      	pop	{r4, r5, r6}
 801ab42:	4770      	bx	lr
 801ab44:	2000bd30 	.word	0x2000bd30
 801ab48:	2000bd28 	.word	0x2000bd28

0801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ab4c:	b508      	push	{r3, lr}
 801ab4e:	4b14      	ldr	r3, [pc, #80]	; (801aba0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ab50:	6819      	ldr	r1, [r3, #0]
 801ab52:	b931      	cbnz	r1, 801ab62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ab54:	4b13      	ldr	r3, [pc, #76]	; (801aba4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ab56:	f240 21e6 	movw	r1, #742	; 0x2e6
 801ab5a:	4a13      	ldr	r2, [pc, #76]	; (801aba8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ab5c:	4813      	ldr	r0, [pc, #76]	; (801abac <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ab5e:	f009 fd47 	bl	80245f0 <__assert_func>
 801ab62:	4a13      	ldr	r2, [pc, #76]	; (801abb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ab64:	8803      	ldrh	r3, [r0, #0]
 801ab66:	8812      	ldrh	r2, [r2, #0]
 801ab68:	4293      	cmp	r3, r2
 801ab6a:	d204      	bcs.n	801ab76 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ab6c:	2214      	movs	r2, #20
 801ab6e:	fb02 1303 	mla	r3, r2, r3, r1
 801ab72:	8918      	ldrh	r0, [r3, #8]
 801ab74:	bd08      	pop	{r3, pc}
 801ab76:	490f      	ldr	r1, [pc, #60]	; (801abb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ab78:	8809      	ldrh	r1, [r1, #0]
 801ab7a:	4411      	add	r1, r2
 801ab7c:	428b      	cmp	r3, r1
 801ab7e:	da06      	bge.n	801ab8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ab80:	1a9b      	subs	r3, r3, r2
 801ab82:	4a0d      	ldr	r2, [pc, #52]	; (801abb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ab84:	210e      	movs	r1, #14
 801ab86:	6812      	ldr	r2, [r2, #0]
 801ab88:	fb01 2303 	mla	r3, r1, r3, r2
 801ab8c:	e7f1      	b.n	801ab72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ab8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ab92:	4293      	cmp	r3, r2
 801ab94:	bf0a      	itet	eq
 801ab96:	4b09      	ldreq	r3, [pc, #36]	; (801abbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ab98:	2000      	movne	r0, #0
 801ab9a:	8818      	ldrheq	r0, [r3, #0]
 801ab9c:	e7ea      	b.n	801ab74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ab9e:	bf00      	nop
 801aba0:	2000bd30 	.word	0x2000bd30
 801aba4:	080269b8 	.word	0x080269b8
 801aba8:	08028b0b 	.word	0x08028b0b
 801abac:	080289e0 	.word	0x080289e0
 801abb0:	2000bd28 	.word	0x2000bd28
 801abb4:	2000bd2c 	.word	0x2000bd2c
 801abb8:	2000bd10 	.word	0x2000bd10
 801abbc:	2000bc5c 	.word	0x2000bc5c

0801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801abc0:	b508      	push	{r3, lr}
 801abc2:	4b14      	ldr	r3, [pc, #80]	; (801ac14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801abc4:	6819      	ldr	r1, [r3, #0]
 801abc6:	b931      	cbnz	r1, 801abd6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801abc8:	4b13      	ldr	r3, [pc, #76]	; (801ac18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801abca:	f240 21fa 	movw	r1, #762	; 0x2fa
 801abce:	4a13      	ldr	r2, [pc, #76]	; (801ac1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801abd0:	4813      	ldr	r0, [pc, #76]	; (801ac20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801abd2:	f009 fd0d 	bl	80245f0 <__assert_func>
 801abd6:	4a13      	ldr	r2, [pc, #76]	; (801ac24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801abd8:	8803      	ldrh	r3, [r0, #0]
 801abda:	8812      	ldrh	r2, [r2, #0]
 801abdc:	4293      	cmp	r3, r2
 801abde:	d204      	bcs.n	801abea <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801abe0:	2214      	movs	r2, #20
 801abe2:	fb02 1303 	mla	r3, r2, r3, r1
 801abe6:	8958      	ldrh	r0, [r3, #10]
 801abe8:	bd08      	pop	{r3, pc}
 801abea:	490f      	ldr	r1, [pc, #60]	; (801ac28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801abec:	8809      	ldrh	r1, [r1, #0]
 801abee:	4411      	add	r1, r2
 801abf0:	428b      	cmp	r3, r1
 801abf2:	da06      	bge.n	801ac02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801abf4:	1a9b      	subs	r3, r3, r2
 801abf6:	4a0d      	ldr	r2, [pc, #52]	; (801ac2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801abf8:	210e      	movs	r1, #14
 801abfa:	6812      	ldr	r2, [r2, #0]
 801abfc:	fb01 2303 	mla	r3, r1, r3, r2
 801ac00:	e7f1      	b.n	801abe6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ac02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ac06:	4293      	cmp	r3, r2
 801ac08:	bf0a      	itet	eq
 801ac0a:	4b09      	ldreq	r3, [pc, #36]	; (801ac30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ac0c:	2000      	movne	r0, #0
 801ac0e:	8818      	ldrheq	r0, [r3, #0]
 801ac10:	e7ea      	b.n	801abe8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ac12:	bf00      	nop
 801ac14:	2000bd30 	.word	0x2000bd30
 801ac18:	080269b8 	.word	0x080269b8
 801ac1c:	08028b37 	.word	0x08028b37
 801ac20:	080289e0 	.word	0x080289e0
 801ac24:	2000bd28 	.word	0x2000bd28
 801ac28:	2000bd2c 	.word	0x2000bd2c
 801ac2c:	2000bd10 	.word	0x2000bd10
 801ac30:	2000bc5e 	.word	0x2000bc5e

0801ac34 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ac34:	4b23      	ldr	r3, [pc, #140]	; (801acc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ac36:	b510      	push	{r4, lr}
 801ac38:	681c      	ldr	r4, [r3, #0]
 801ac3a:	b934      	cbnz	r4, 801ac4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ac3c:	4b22      	ldr	r3, [pc, #136]	; (801acc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ac3e:	f240 310e 	movw	r1, #782	; 0x30e
 801ac42:	4a22      	ldr	r2, [pc, #136]	; (801accc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ac44:	4822      	ldr	r0, [pc, #136]	; (801acd0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ac46:	f009 fcd3 	bl	80245f0 <__assert_func>
 801ac4a:	4a22      	ldr	r2, [pc, #136]	; (801acd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ac4c:	880b      	ldrh	r3, [r1, #0]
 801ac4e:	8812      	ldrh	r2, [r2, #0]
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d211      	bcs.n	801ac78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ac54:	2214      	movs	r2, #20
 801ac56:	fb02 4303 	mla	r3, r2, r3, r4
 801ac5a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ac5e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ac62:	8a1a      	ldrh	r2, [r3, #16]
 801ac64:	8a5b      	ldrh	r3, [r3, #18]
 801ac66:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ac6a:	8004      	strh	r4, [r0, #0]
 801ac6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac70:	8041      	strh	r1, [r0, #2]
 801ac72:	8082      	strh	r2, [r0, #4]
 801ac74:	80c3      	strh	r3, [r0, #6]
 801ac76:	e00e      	b.n	801ac96 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ac78:	4917      	ldr	r1, [pc, #92]	; (801acd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ac7a:	8809      	ldrh	r1, [r1, #0]
 801ac7c:	4411      	add	r1, r2
 801ac7e:	428b      	cmp	r3, r1
 801ac80:	da0a      	bge.n	801ac98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ac82:	1a9b      	subs	r3, r3, r2
 801ac84:	4a15      	ldr	r2, [pc, #84]	; (801acdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ac86:	210e      	movs	r1, #14
 801ac88:	6812      	ldr	r2, [r2, #0]
 801ac8a:	fb01 2303 	mla	r3, r1, r3, r2
 801ac8e:	681a      	ldr	r2, [r3, #0]
 801ac90:	6002      	str	r2, [r0, #0]
 801ac92:	685a      	ldr	r2, [r3, #4]
 801ac94:	6042      	str	r2, [r0, #4]
 801ac96:	bd10      	pop	{r4, pc}
 801ac98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ac9c:	4293      	cmp	r3, r2
 801ac9e:	d10b      	bne.n	801acb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801aca0:	4b0f      	ldr	r3, [pc, #60]	; (801ace0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801aca2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801aca6:	4b0f      	ldr	r3, [pc, #60]	; (801ace4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801aca8:	8081      	strh	r1, [r0, #4]
 801acaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acae:	2300      	movs	r3, #0
 801acb0:	80c2      	strh	r2, [r0, #6]
 801acb2:	8003      	strh	r3, [r0, #0]
 801acb4:	8043      	strh	r3, [r0, #2]
 801acb6:	e7ee      	b.n	801ac96 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801acb8:	2300      	movs	r3, #0
 801acba:	8003      	strh	r3, [r0, #0]
 801acbc:	8043      	strh	r3, [r0, #2]
 801acbe:	8083      	strh	r3, [r0, #4]
 801acc0:	e7d8      	b.n	801ac74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801acc2:	bf00      	nop
 801acc4:	2000bd30 	.word	0x2000bd30
 801acc8:	080269b8 	.word	0x080269b8
 801accc:	08028aa4 	.word	0x08028aa4
 801acd0:	080289e0 	.word	0x080289e0
 801acd4:	2000bd28 	.word	0x2000bd28
 801acd8:	2000bd2c 	.word	0x2000bd2c
 801acdc:	2000bd10 	.word	0x2000bd10
 801ace0:	2000bc5c 	.word	0x2000bc5c
 801ace4:	2000bc5e 	.word	0x2000bc5e

0801ace8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ace8:	4b18      	ldr	r3, [pc, #96]	; (801ad4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	b34b      	cbz	r3, 801ad42 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801acee:	4a18      	ldr	r2, [pc, #96]	; (801ad50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801acf0:	8800      	ldrh	r0, [r0, #0]
 801acf2:	8812      	ldrh	r2, [r2, #0]
 801acf4:	4290      	cmp	r0, r2
 801acf6:	d211      	bcs.n	801ad1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801acf8:	2214      	movs	r2, #20
 801acfa:	fb02 3300 	mla	r3, r2, r0, r3
 801acfe:	8a1a      	ldrh	r2, [r3, #16]
 801ad00:	8919      	ldrh	r1, [r3, #8]
 801ad02:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ad06:	428a      	cmp	r2, r1
 801ad08:	db1d      	blt.n	801ad46 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ad0a:	8a58      	ldrh	r0, [r3, #18]
 801ad0c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ad10:	895b      	ldrh	r3, [r3, #10]
 801ad12:	4298      	cmp	r0, r3
 801ad14:	bfac      	ite	ge
 801ad16:	2000      	movge	r0, #0
 801ad18:	2001      	movlt	r0, #1
 801ad1a:	4770      	bx	lr
 801ad1c:	4b0d      	ldr	r3, [pc, #52]	; (801ad54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ad1e:	881b      	ldrh	r3, [r3, #0]
 801ad20:	4413      	add	r3, r2
 801ad22:	4298      	cmp	r0, r3
 801ad24:	da0d      	bge.n	801ad42 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ad26:	4b0c      	ldr	r3, [pc, #48]	; (801ad58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801ad28:	1a80      	subs	r0, r0, r2
 801ad2a:	220e      	movs	r2, #14
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	fb02 3300 	mla	r3, r2, r0, r3
 801ad32:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ad36:	891a      	ldrh	r2, [r3, #8]
 801ad38:	4291      	cmp	r1, r2
 801ad3a:	db04      	blt.n	801ad46 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ad3c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ad40:	e7e6      	b.n	801ad10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801ad42:	2000      	movs	r0, #0
 801ad44:	4770      	bx	lr
 801ad46:	2001      	movs	r0, #1
 801ad48:	4770      	bx	lr
 801ad4a:	bf00      	nop
 801ad4c:	2000bd30 	.word	0x2000bd30
 801ad50:	2000bd28 	.word	0x2000bd28
 801ad54:	2000bd2c 	.word	0x2000bd2c
 801ad58:	2000bd10 	.word	0x2000bd10

0801ad5c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ad5c:	b508      	push	{r3, lr}
 801ad5e:	4b12      	ldr	r3, [pc, #72]	; (801ada8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ad60:	6819      	ldr	r1, [r3, #0]
 801ad62:	b931      	cbnz	r1, 801ad72 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ad64:	4b11      	ldr	r3, [pc, #68]	; (801adac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ad66:	f240 3132 	movw	r1, #818	; 0x332
 801ad6a:	4a11      	ldr	r2, [pc, #68]	; (801adb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ad6c:	4811      	ldr	r0, [pc, #68]	; (801adb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ad6e:	f009 fc3f 	bl	80245f0 <__assert_func>
 801ad72:	8803      	ldrh	r3, [r0, #0]
 801ad74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad78:	4293      	cmp	r3, r2
 801ad7a:	d012      	beq.n	801ada2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ad7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ad80:	4293      	cmp	r3, r2
 801ad82:	d103      	bne.n	801ad8c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ad84:	4b0c      	ldr	r3, [pc, #48]	; (801adb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ad8a:	bd08      	pop	{r3, pc}
 801ad8c:	4a0b      	ldr	r2, [pc, #44]	; (801adbc <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ad8e:	6812      	ldr	r2, [r2, #0]
 801ad90:	b11a      	cbz	r2, 801ad9a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ad92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ad96:	2800      	cmp	r0, #0
 801ad98:	d1f7      	bne.n	801ad8a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ad9a:	2214      	movs	r2, #20
 801ad9c:	4353      	muls	r3, r2
 801ad9e:	58c8      	ldr	r0, [r1, r3]
 801ada0:	e7f3      	b.n	801ad8a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ada2:	2000      	movs	r0, #0
 801ada4:	e7f1      	b.n	801ad8a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ada6:	bf00      	nop
 801ada8:	2000bd30 	.word	0x2000bd30
 801adac:	080269b8 	.word	0x080269b8
 801adb0:	08028ada 	.word	0x08028ada
 801adb4:	080289e0 	.word	0x080289e0
 801adb8:	2000bc68 	.word	0x2000bc68
 801adbc:	2000bd0c 	.word	0x2000bd0c

0801adc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801adc0:	8802      	ldrh	r2, [r0, #0]
 801adc2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d840      	bhi.n	801ae4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801adca:	4b21      	ldr	r3, [pc, #132]	; (801ae50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801adcc:	881b      	ldrh	r3, [r3, #0]
 801adce:	429a      	cmp	r2, r3
 801add0:	d220      	bcs.n	801ae14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801add2:	4b20      	ldr	r3, [pc, #128]	; (801ae54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801add4:	6819      	ldr	r1, [r3, #0]
 801add6:	2314      	movs	r3, #20
 801add8:	fb03 1302 	mla	r3, r3, r2, r1
 801addc:	6858      	ldr	r0, [r3, #4]
 801adde:	2800      	cmp	r0, #0
 801ade0:	d035      	beq.n	801ae4e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ade2:	491d      	ldr	r1, [pc, #116]	; (801ae58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ade4:	6809      	ldr	r1, [r1, #0]
 801ade6:	2900      	cmp	r1, #0
 801ade8:	d031      	beq.n	801ae4e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801adea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801adee:	b371      	cbz	r1, 801ae4e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801adf0:	895a      	ldrh	r2, [r3, #10]
 801adf2:	8918      	ldrh	r0, [r3, #8]
 801adf4:	4350      	muls	r0, r2
 801adf6:	7c5a      	ldrb	r2, [r3, #17]
 801adf8:	7cdb      	ldrb	r3, [r3, #19]
 801adfa:	0952      	lsrs	r2, r2, #5
 801adfc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ae00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ae04:	2b0b      	cmp	r3, #11
 801ae06:	bf18      	it	ne
 801ae08:	0040      	lslne	r0, r0, #1
 801ae0a:	3003      	adds	r0, #3
 801ae0c:	f020 0003 	bic.w	r0, r0, #3
 801ae10:	4408      	add	r0, r1
 801ae12:	4770      	bx	lr
 801ae14:	4911      	ldr	r1, [pc, #68]	; (801ae5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ae16:	8809      	ldrh	r1, [r1, #0]
 801ae18:	4419      	add	r1, r3
 801ae1a:	428a      	cmp	r2, r1
 801ae1c:	da16      	bge.n	801ae4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ae1e:	4910      	ldr	r1, [pc, #64]	; (801ae60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ae20:	1ad3      	subs	r3, r2, r3
 801ae22:	200e      	movs	r0, #14
 801ae24:	6809      	ldr	r1, [r1, #0]
 801ae26:	fb00 1303 	mla	r3, r0, r3, r1
 801ae2a:	7b19      	ldrb	r1, [r3, #12]
 801ae2c:	f001 011f 	and.w	r1, r1, #31
 801ae30:	290b      	cmp	r1, #11
 801ae32:	d10b      	bne.n	801ae4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ae34:	8919      	ldrh	r1, [r3, #8]
 801ae36:	8958      	ldrh	r0, [r3, #10]
 801ae38:	4b07      	ldr	r3, [pc, #28]	; (801ae58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ae3a:	4348      	muls	r0, r1
 801ae3c:	6819      	ldr	r1, [r3, #0]
 801ae3e:	3003      	adds	r0, #3
 801ae40:	f020 0303 	bic.w	r3, r0, #3
 801ae44:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ae48:	4418      	add	r0, r3
 801ae4a:	4770      	bx	lr
 801ae4c:	2000      	movs	r0, #0
 801ae4e:	4770      	bx	lr
 801ae50:	2000bd28 	.word	0x2000bd28
 801ae54:	2000bd30 	.word	0x2000bd30
 801ae58:	2000bd0c 	.word	0x2000bd0c
 801ae5c:	2000bd2c 	.word	0x2000bd2c
 801ae60:	2000bd10 	.word	0x2000bd10

0801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ae64:	4b19      	ldr	r3, [pc, #100]	; (801aecc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ae66:	6819      	ldr	r1, [r3, #0]
 801ae68:	8803      	ldrh	r3, [r0, #0]
 801ae6a:	b1e9      	cbz	r1, 801aea8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ae6c:	4a18      	ldr	r2, [pc, #96]	; (801aed0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ae6e:	8812      	ldrh	r2, [r2, #0]
 801ae70:	429a      	cmp	r2, r3
 801ae72:	d90a      	bls.n	801ae8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ae74:	2214      	movs	r2, #20
 801ae76:	fb02 1303 	mla	r3, r2, r3, r1
 801ae7a:	7c58      	ldrb	r0, [r3, #17]
 801ae7c:	0942      	lsrs	r2, r0, #5
 801ae7e:	7cd8      	ldrb	r0, [r3, #19]
 801ae80:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ae84:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ae88:	4770      	bx	lr
 801ae8a:	4912      	ldr	r1, [pc, #72]	; (801aed4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801ae8c:	8809      	ldrh	r1, [r1, #0]
 801ae8e:	4411      	add	r1, r2
 801ae90:	428b      	cmp	r3, r1
 801ae92:	da09      	bge.n	801aea8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ae94:	1a9b      	subs	r3, r3, r2
 801ae96:	4a10      	ldr	r2, [pc, #64]	; (801aed8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801ae98:	210e      	movs	r1, #14
 801ae9a:	6812      	ldr	r2, [r2, #0]
 801ae9c:	fb01 2303 	mla	r3, r1, r3, r2
 801aea0:	7b18      	ldrb	r0, [r3, #12]
 801aea2:	f000 001f 	and.w	r0, r0, #31
 801aea6:	4770      	bx	lr
 801aea8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801aeac:	4293      	cmp	r3, r2
 801aeae:	d10a      	bne.n	801aec6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801aeb0:	4b0a      	ldr	r3, [pc, #40]	; (801aedc <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801aeb8:	b10a      	cbz	r2, 801aebe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801aeba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801aebc:	b900      	cbnz	r0, 801aec0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801aebe:	6898      	ldr	r0, [r3, #8]
 801aec0:	6803      	ldr	r3, [r0, #0]
 801aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aec4:	4718      	bx	r3
 801aec6:	2000      	movs	r0, #0
 801aec8:	4770      	bx	lr
 801aeca:	bf00      	nop
 801aecc:	2000bd30 	.word	0x2000bd30
 801aed0:	2000bd28 	.word	0x2000bd28
 801aed4:	2000bd2c 	.word	0x2000bd2c
 801aed8:	2000bd10 	.word	0x2000bd10
 801aedc:	2000bc68 	.word	0x2000bc68

0801aee0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801aee0:	2018      	movs	r0, #24
 801aee2:	4770      	bx	lr

0801aee4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801aee4:	2001      	movs	r0, #1
 801aee6:	4770      	bx	lr

0801aee8 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801aee8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801aeec:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801aef0:	4770      	bx	lr

0801aef2 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801aef2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801aef6:	4770      	bx	lr

0801aef8 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801aef8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801aefc:	4770      	bx	lr

0801aefe <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801aefe:	b2c8      	uxtb	r0, r1
 801af00:	4770      	bx	lr

0801af02 <_ZN8touchgfx8LCD24bpp4initEv>:
 801af02:	4770      	bx	lr

0801af04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af08:	b085      	sub	sp, #20
 801af0a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801af0c:	9203      	str	r2, [sp, #12]
 801af0e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801af12:	6878      	ldr	r0, [r7, #4]
 801af14:	9201      	str	r2, [sp, #4]
 801af16:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801af18:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801af1c:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801af20:	fa1f fc84 	uxth.w	ip, r4
 801af24:	43e4      	mvns	r4, r4
 801af26:	9100      	str	r1, [sp, #0]
 801af28:	b2e4      	uxtb	r4, r4
 801af2a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801af2e:	fb00 2505 	mla	r5, r0, r5, r2
 801af32:	683a      	ldr	r2, [r7, #0]
 801af34:	6877      	ldr	r7, [r6, #4]
 801af36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af3a:	3704      	adds	r7, #4
 801af3c:	4415      	add	r5, r2
 801af3e:	6832      	ldr	r2, [r6, #0]
 801af40:	9202      	str	r2, [sp, #8]
 801af42:	9a00      	ldr	r2, [sp, #0]
 801af44:	2a00      	cmp	r2, #0
 801af46:	dc03      	bgt.n	801af50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801af48:	9a03      	ldr	r2, [sp, #12]
 801af4a:	2a00      	cmp	r2, #0
 801af4c:	f340 8116 	ble.w	801b17c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801af50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801af56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	dd0f      	ble.n	801af80 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801af60:	1406      	asrs	r6, r0, #16
 801af62:	d406      	bmi.n	801af72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801af64:	4546      	cmp	r6, r8
 801af66:	da04      	bge.n	801af72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801af68:	1416      	asrs	r6, r2, #16
 801af6a:	d402      	bmi.n	801af72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801af6c:	9901      	ldr	r1, [sp, #4]
 801af6e:	428e      	cmp	r6, r1
 801af70:	db07      	blt.n	801af82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801af72:	9911      	ldr	r1, [sp, #68]	; 0x44
 801af74:	3b01      	subs	r3, #1
 801af76:	3503      	adds	r5, #3
 801af78:	4408      	add	r0, r1
 801af7a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801af7c:	440a      	add	r2, r1
 801af7e:	e7ed      	b.n	801af5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801af80:	d011      	beq.n	801afa6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801af82:	1e5e      	subs	r6, r3, #1
 801af84:	9911      	ldr	r1, [sp, #68]	; 0x44
 801af86:	fb01 0e06 	mla	lr, r1, r6, r0
 801af8a:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801af8e:	d548      	bpl.n	801b022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801af90:	4699      	mov	r9, r3
 801af92:	462e      	mov	r6, r5
 801af94:	f1b9 0f00 	cmp.w	r9, #0
 801af98:	f300 809e 	bgt.w	801b0d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801af9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801afa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801afa4:	441d      	add	r5, r3
 801afa6:	9b00      	ldr	r3, [sp, #0]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	f340 80e7 	ble.w	801b17c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801afae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801afb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801afb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801afbc:	eef0 6a62 	vmov.f32	s13, s5
 801afc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801afc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801afc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801afcc:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801afd0:	eef0 6a43 	vmov.f32	s13, s6
 801afd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801afd8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801afdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801afe0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801afe4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801afe8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801afec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aff0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aff4:	ee12 2a90 	vmov	r2, s5
 801aff8:	eef0 2a47 	vmov.f32	s5, s14
 801affc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b000:	ee13 2a10 	vmov	r2, s6
 801b004:	9311      	str	r3, [sp, #68]	; 0x44
 801b006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b008:	eeb0 3a67 	vmov.f32	s6, s15
 801b00c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b010:	9312      	str	r3, [sp, #72]	; 0x48
 801b012:	9b00      	ldr	r3, [sp, #0]
 801b014:	9a03      	ldr	r2, [sp, #12]
 801b016:	3b01      	subs	r3, #1
 801b018:	9300      	str	r3, [sp, #0]
 801b01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b01c:	bf08      	it	eq
 801b01e:	4613      	moveq	r3, r2
 801b020:	e78f      	b.n	801af42 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b022:	45c6      	cmp	lr, r8
 801b024:	dab4      	bge.n	801af90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b026:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b028:	fb01 2606 	mla	r6, r1, r6, r2
 801b02c:	1436      	asrs	r6, r6, #16
 801b02e:	d4af      	bmi.n	801af90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b030:	9901      	ldr	r1, [sp, #4]
 801b032:	428e      	cmp	r6, r1
 801b034:	daac      	bge.n	801af90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b036:	1cee      	adds	r6, r5, #3
 801b038:	4699      	mov	r9, r3
 801b03a:	f1b9 0f00 	cmp.w	r9, #0
 801b03e:	f106 0603 	add.w	r6, r6, #3
 801b042:	ddab      	ble.n	801af9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b044:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b048:	9902      	ldr	r1, [sp, #8]
 801b04a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b04e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b052:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b056:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b058:	fb1b fb04 	smulbb	fp, fp, r4
 801b05c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b060:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b064:	4408      	add	r0, r1
 801b066:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b068:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b06c:	440a      	add	r2, r1
 801b06e:	eb07 0a0e 	add.w	sl, r7, lr
 801b072:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b076:	fb0e be0c 	mla	lr, lr, ip, fp
 801b07a:	fa1f fe8e 	uxth.w	lr, lr
 801b07e:	f10e 0b01 	add.w	fp, lr, #1
 801b082:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b086:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b08a:	fb1b fb04 	smulbb	fp, fp, r4
 801b08e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b092:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b096:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b09a:	fb0e be0c 	mla	lr, lr, ip, fp
 801b09e:	fa1f fe8e 	uxth.w	lr, lr
 801b0a2:	f10e 0b01 	add.w	fp, lr, #1
 801b0a6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b0aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b0ae:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b0b2:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b0b6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b0ba:	fb1a fa04 	smulbb	sl, sl, r4
 801b0be:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b0c2:	fa1f fe8e 	uxth.w	lr, lr
 801b0c6:	f10e 0a01 	add.w	sl, lr, #1
 801b0ca:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b0ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b0d2:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b0d6:	e7b0      	b.n	801b03a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b0d8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b0dc:	d446      	bmi.n	801b16c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b0de:	45c2      	cmp	sl, r8
 801b0e0:	da44      	bge.n	801b16c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b0e2:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b0e6:	d441      	bmi.n	801b16c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b0e8:	9901      	ldr	r1, [sp, #4]
 801b0ea:	458e      	cmp	lr, r1
 801b0ec:	da3e      	bge.n	801b16c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b0ee:	9902      	ldr	r1, [sp, #8]
 801b0f0:	f896 b000 	ldrb.w	fp, [r6]
 801b0f4:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b0f8:	fb1b fb04 	smulbb	fp, fp, r4
 801b0fc:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b100:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b104:	eb07 0a0e 	add.w	sl, r7, lr
 801b108:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b10c:	fb0e be0c 	mla	lr, lr, ip, fp
 801b110:	fa1f fe8e 	uxth.w	lr, lr
 801b114:	f10e 0b01 	add.w	fp, lr, #1
 801b118:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b11c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b120:	fb1b fb04 	smulbb	fp, fp, r4
 801b124:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b128:	f886 e000 	strb.w	lr, [r6]
 801b12c:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b130:	fb0e be0c 	mla	lr, lr, ip, fp
 801b134:	fa1f fe8e 	uxth.w	lr, lr
 801b138:	f10e 0b01 	add.w	fp, lr, #1
 801b13c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b140:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b144:	f886 e001 	strb.w	lr, [r6, #1]
 801b148:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b14c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b150:	fb1a fa04 	smulbb	sl, sl, r4
 801b154:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b158:	fa1f fe8e 	uxth.w	lr, lr
 801b15c:	f10e 0a01 	add.w	sl, lr, #1
 801b160:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b164:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b168:	f886 e002 	strb.w	lr, [r6, #2]
 801b16c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b16e:	3603      	adds	r6, #3
 801b170:	f109 39ff 	add.w	r9, r9, #4294967295
 801b174:	4408      	add	r0, r1
 801b176:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b178:	440a      	add	r2, r1
 801b17a:	e70b      	b.n	801af94 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b17c:	b005      	add	sp, #20
 801b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b182 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b186:	b085      	sub	sp, #20
 801b188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b18c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b18e:	9203      	str	r2, [sp, #12]
 801b190:	6870      	ldr	r0, [r6, #4]
 801b192:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b194:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b198:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b19c:	9101      	str	r1, [sp, #4]
 801b19e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b1a2:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801b1a6:	fb00 2404 	mla	r4, r0, r4, r2
 801b1aa:	6832      	ldr	r2, [r6, #0]
 801b1ac:	686e      	ldr	r6, [r5, #4]
 801b1ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b1b2:	3604      	adds	r6, #4
 801b1b4:	4414      	add	r4, r2
 801b1b6:	682a      	ldr	r2, [r5, #0]
 801b1b8:	9202      	str	r2, [sp, #8]
 801b1ba:	9a01      	ldr	r2, [sp, #4]
 801b1bc:	2a00      	cmp	r2, #0
 801b1be:	dc03      	bgt.n	801b1c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b1c0:	9a03      	ldr	r2, [sp, #12]
 801b1c2:	2a00      	cmp	r2, #0
 801b1c4:	f340 80b2 	ble.w	801b32c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b1c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b1ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b1ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b1d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	dd0c      	ble.n	801b1f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b1d8:	1405      	asrs	r5, r0, #16
 801b1da:	d405      	bmi.n	801b1e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b1dc:	4575      	cmp	r5, lr
 801b1de:	da03      	bge.n	801b1e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b1e0:	1415      	asrs	r5, r2, #16
 801b1e2:	d401      	bmi.n	801b1e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b1e4:	4545      	cmp	r5, r8
 801b1e6:	db05      	blt.n	801b1f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b1e8:	4460      	add	r0, ip
 801b1ea:	443a      	add	r2, r7
 801b1ec:	3b01      	subs	r3, #1
 801b1ee:	3403      	adds	r4, #3
 801b1f0:	e7f0      	b.n	801b1d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801b1f2:	d03d      	beq.n	801b270 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b1f4:	1e5d      	subs	r5, r3, #1
 801b1f6:	fb0c 0905 	mla	r9, ip, r5, r0
 801b1fa:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b1fe:	d42c      	bmi.n	801b25a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b200:	45f1      	cmp	r9, lr
 801b202:	da2a      	bge.n	801b25a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b204:	fb07 2505 	mla	r5, r7, r5, r2
 801b208:	142d      	asrs	r5, r5, #16
 801b20a:	d426      	bmi.n	801b25a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b20c:	4545      	cmp	r5, r8
 801b20e:	da24      	bge.n	801b25a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b210:	1ce5      	adds	r5, r4, #3
 801b212:	469a      	mov	sl, r3
 801b214:	f1ba 0f00 	cmp.w	sl, #0
 801b218:	f105 0503 	add.w	r5, r5, #3
 801b21c:	dd23      	ble.n	801b266 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b21e:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b222:	9902      	ldr	r1, [sp, #8]
 801b224:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b228:	443a      	add	r2, r7
 801b22a:	fb0e 1909 	mla	r9, lr, r9, r1
 801b22e:	4460      	add	r0, ip
 801b230:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b234:	f819 900b 	ldrb.w	r9, [r9, fp]
 801b238:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b23c:	eb06 0b09 	add.w	fp, r6, r9
 801b240:	f816 9009 	ldrb.w	r9, [r6, r9]
 801b244:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b248:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b24c:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b250:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b254:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b258:	e7dc      	b.n	801b214 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b25a:	2500      	movs	r5, #0
 801b25c:	eba3 0905 	sub.w	r9, r3, r5
 801b260:	f1b9 0f00 	cmp.w	r9, #0
 801b264:	dc3c      	bgt.n	801b2e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801b266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b26a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b26e:	441c      	add	r4, r3
 801b270:	9b01      	ldr	r3, [sp, #4]
 801b272:	2b00      	cmp	r3, #0
 801b274:	dd5a      	ble.n	801b32c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b276:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b27c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b280:	eeb0 6a62 	vmov.f32	s12, s5
 801b284:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b288:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b28c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b290:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b294:	eeb0 6a43 	vmov.f32	s12, s6
 801b298:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b29c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b2a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b2a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b2a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b2ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b2b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b2b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2b8:	ee12 2a90 	vmov	r2, s5
 801b2bc:	eef0 2a47 	vmov.f32	s5, s14
 801b2c0:	fb92 fcf3 	sdiv	ip, r2, r3
 801b2c4:	ee13 2a10 	vmov	r2, s6
 801b2c8:	eeb0 3a67 	vmov.f32	s6, s15
 801b2cc:	fb92 f7f3 	sdiv	r7, r2, r3
 801b2d0:	9b01      	ldr	r3, [sp, #4]
 801b2d2:	9a03      	ldr	r2, [sp, #12]
 801b2d4:	3b01      	subs	r3, #1
 801b2d6:	9301      	str	r3, [sp, #4]
 801b2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2da:	bf08      	it	eq
 801b2dc:	4613      	moveq	r3, r2
 801b2de:	e76c      	b.n	801b1ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801b2e0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b2e4:	d41e      	bmi.n	801b324 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b2e6:	45f2      	cmp	sl, lr
 801b2e8:	da1c      	bge.n	801b324 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b2ea:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b2ee:	d419      	bmi.n	801b324 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b2f0:	45c1      	cmp	r9, r8
 801b2f2:	da17      	bge.n	801b324 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b2f4:	9902      	ldr	r1, [sp, #8]
 801b2f6:	fb0e 1909 	mla	r9, lr, r9, r1
 801b2fa:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b2fe:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b302:	f816 b009 	ldrb.w	fp, [r6, r9]
 801b306:	eb06 0a09 	add.w	sl, r6, r9
 801b30a:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801b30e:	f804 b009 	strb.w	fp, [r4, r9]
 801b312:	44a1      	add	r9, r4
 801b314:	f89a b001 	ldrb.w	fp, [sl, #1]
 801b318:	f889 b001 	strb.w	fp, [r9, #1]
 801b31c:	f89a a002 	ldrb.w	sl, [sl, #2]
 801b320:	f889 a002 	strb.w	sl, [r9, #2]
 801b324:	4460      	add	r0, ip
 801b326:	443a      	add	r2, r7
 801b328:	3501      	adds	r5, #1
 801b32a:	e797      	b.n	801b25c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801b32c:	b005      	add	sp, #20
 801b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b332 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b336:	b087      	sub	sp, #28
 801b338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b33c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b33e:	9204      	str	r2, [sp, #16]
 801b340:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b344:	6870      	ldr	r0, [r6, #4]
 801b346:	9205      	str	r2, [sp, #20]
 801b348:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b34a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801b34e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801b352:	9101      	str	r1, [sp, #4]
 801b354:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b358:	fb00 2505 	mla	r5, r0, r5, r2
 801b35c:	6832      	ldr	r2, [r6, #0]
 801b35e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b362:	4415      	add	r5, r2
 801b364:	6822      	ldr	r2, [r4, #0]
 801b366:	9202      	str	r2, [sp, #8]
 801b368:	6862      	ldr	r2, [r4, #4]
 801b36a:	3204      	adds	r2, #4
 801b36c:	9203      	str	r2, [sp, #12]
 801b36e:	9a01      	ldr	r2, [sp, #4]
 801b370:	2a00      	cmp	r2, #0
 801b372:	dc03      	bgt.n	801b37c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b374:	9a04      	ldr	r2, [sp, #16]
 801b376:	2a00      	cmp	r2, #0
 801b378:	f340 8124 	ble.w	801b5c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b37c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b37e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b382:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b384:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b388:	2b00      	cmp	r3, #0
 801b38a:	dd0e      	ble.n	801b3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b38c:	1422      	asrs	r2, r4, #16
 801b38e:	d405      	bmi.n	801b39c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b390:	4572      	cmp	r2, lr
 801b392:	da03      	bge.n	801b39c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b394:	1402      	asrs	r2, r0, #16
 801b396:	d401      	bmi.n	801b39c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b398:	4542      	cmp	r2, r8
 801b39a:	db07      	blt.n	801b3ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b39c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b39e:	3b01      	subs	r3, #1
 801b3a0:	3503      	adds	r5, #3
 801b3a2:	4414      	add	r4, r2
 801b3a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b3a6:	4410      	add	r0, r2
 801b3a8:	e7ee      	b.n	801b388 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801b3aa:	d010      	beq.n	801b3ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b3ac:	1e5a      	subs	r2, r3, #1
 801b3ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b3b0:	fb06 4602 	mla	r6, r6, r2, r4
 801b3b4:	1436      	asrs	r6, r6, #16
 801b3b6:	d546      	bpl.n	801b446 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801b3b8:	4699      	mov	r9, r3
 801b3ba:	462f      	mov	r7, r5
 801b3bc:	f1b9 0f00 	cmp.w	r9, #0
 801b3c0:	f300 80a5 	bgt.w	801b50e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801b3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3cc:	441d      	add	r5, r3
 801b3ce:	9b01      	ldr	r3, [sp, #4]
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	f340 80f7 	ble.w	801b5c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b3d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3e0:	eeb0 6a62 	vmov.f32	s12, s5
 801b3e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3f0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b3f4:	eeb0 6a43 	vmov.f32	s12, s6
 801b3f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3fc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b400:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b404:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b408:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b40c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b410:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b414:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b418:	ee12 2a90 	vmov	r2, s5
 801b41c:	eef0 2a47 	vmov.f32	s5, s14
 801b420:	fb92 f3f3 	sdiv	r3, r2, r3
 801b424:	ee13 2a10 	vmov	r2, s6
 801b428:	9313      	str	r3, [sp, #76]	; 0x4c
 801b42a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b42c:	eeb0 3a67 	vmov.f32	s6, s15
 801b430:	fb92 f3f3 	sdiv	r3, r2, r3
 801b434:	9314      	str	r3, [sp, #80]	; 0x50
 801b436:	9b01      	ldr	r3, [sp, #4]
 801b438:	9a04      	ldr	r2, [sp, #16]
 801b43a:	3b01      	subs	r3, #1
 801b43c:	9301      	str	r3, [sp, #4]
 801b43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b440:	bf08      	it	eq
 801b442:	4613      	moveq	r3, r2
 801b444:	e793      	b.n	801b36e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b446:	4576      	cmp	r6, lr
 801b448:	dab6      	bge.n	801b3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b44a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b44c:	fb06 0202 	mla	r2, r6, r2, r0
 801b450:	1412      	asrs	r2, r2, #16
 801b452:	d4b1      	bmi.n	801b3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b454:	4542      	cmp	r2, r8
 801b456:	daaf      	bge.n	801b3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b458:	1cef      	adds	r7, r5, #3
 801b45a:	4699      	mov	r9, r3
 801b45c:	f1b9 0f00 	cmp.w	r9, #0
 801b460:	ddb0      	ble.n	801b3c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b462:	9902      	ldr	r1, [sp, #8]
 801b464:	1402      	asrs	r2, r0, #16
 801b466:	1426      	asrs	r6, r4, #16
 801b468:	fb0e 1202 	mla	r2, lr, r2, r1
 801b46c:	9903      	ldr	r1, [sp, #12]
 801b46e:	5d92      	ldrb	r2, [r2, r6]
 801b470:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b474:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b478:	d041      	beq.n	801b4fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801b47a:	9a05      	ldr	r2, [sp, #20]
 801b47c:	fa5f fb86 	uxtb.w	fp, r6
 801b480:	fb02 fc0c 	mul.w	ip, r2, ip
 801b484:	f10c 0201 	add.w	r2, ip, #1
 801b488:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b48c:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801b490:	1212      	asrs	r2, r2, #8
 801b492:	fa1f fa82 	uxth.w	sl, r2
 801b496:	43d2      	mvns	r2, r2
 801b498:	fb1b fb0a 	smulbb	fp, fp, sl
 801b49c:	b2d2      	uxtb	r2, r2
 801b49e:	fb0c bc02 	mla	ip, ip, r2, fp
 801b4a2:	fa1f fc8c 	uxth.w	ip, ip
 801b4a6:	f10c 0b01 	add.w	fp, ip, #1
 801b4aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b4ae:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b4b2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b4b6:	fb1b fb0a 	smulbb	fp, fp, sl
 801b4ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b4be:	fb16 fa0a 	smulbb	sl, r6, sl
 801b4c2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b4c6:	f807 cc03 	strb.w	ip, [r7, #-3]
 801b4ca:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801b4ce:	fb06 aa02 	mla	sl, r6, r2, sl
 801b4d2:	fb0c bc02 	mla	ip, ip, r2, fp
 801b4d6:	fa1f fa8a 	uxth.w	sl, sl
 801b4da:	fa1f fc8c 	uxth.w	ip, ip
 801b4de:	f10a 0601 	add.w	r6, sl, #1
 801b4e2:	f10c 0b01 	add.w	fp, ip, #1
 801b4e6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b4ea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b4ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b4f2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b4f6:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b4fa:	f807 cc02 	strb.w	ip, [r7, #-2]
 801b4fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b500:	3703      	adds	r7, #3
 801b502:	f109 39ff 	add.w	r9, r9, #4294967295
 801b506:	4414      	add	r4, r2
 801b508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b50a:	4410      	add	r0, r2
 801b50c:	e7a6      	b.n	801b45c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b50e:	1426      	asrs	r6, r4, #16
 801b510:	d450      	bmi.n	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b512:	4576      	cmp	r6, lr
 801b514:	da4e      	bge.n	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b516:	1402      	asrs	r2, r0, #16
 801b518:	d44c      	bmi.n	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b51a:	4542      	cmp	r2, r8
 801b51c:	da4a      	bge.n	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b51e:	9902      	ldr	r1, [sp, #8]
 801b520:	fb0e 1202 	mla	r2, lr, r2, r1
 801b524:	9903      	ldr	r1, [sp, #12]
 801b526:	5d92      	ldrb	r2, [r2, r6]
 801b528:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b52c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b530:	d040      	beq.n	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b532:	9a05      	ldr	r2, [sp, #20]
 801b534:	fa5f fb86 	uxtb.w	fp, r6
 801b538:	fb02 fc0c 	mul.w	ip, r2, ip
 801b53c:	f10c 0201 	add.w	r2, ip, #1
 801b540:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b544:	f897 c000 	ldrb.w	ip, [r7]
 801b548:	1212      	asrs	r2, r2, #8
 801b54a:	fa1f fa82 	uxth.w	sl, r2
 801b54e:	43d2      	mvns	r2, r2
 801b550:	fb1b fb0a 	smulbb	fp, fp, sl
 801b554:	b2d2      	uxtb	r2, r2
 801b556:	fb0c bc02 	mla	ip, ip, r2, fp
 801b55a:	fa1f fc8c 	uxth.w	ip, ip
 801b55e:	f10c 0b01 	add.w	fp, ip, #1
 801b562:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b566:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b56a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b56e:	fb1b fb0a 	smulbb	fp, fp, sl
 801b572:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b576:	fb16 fa0a 	smulbb	sl, r6, sl
 801b57a:	78be      	ldrb	r6, [r7, #2]
 801b57c:	f887 c000 	strb.w	ip, [r7]
 801b580:	f897 c001 	ldrb.w	ip, [r7, #1]
 801b584:	fb06 aa02 	mla	sl, r6, r2, sl
 801b588:	fb0c bc02 	mla	ip, ip, r2, fp
 801b58c:	fa1f fa8a 	uxth.w	sl, sl
 801b590:	fa1f fc8c 	uxth.w	ip, ip
 801b594:	f10a 0601 	add.w	r6, sl, #1
 801b598:	f10c 0b01 	add.w	fp, ip, #1
 801b59c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b5a0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b5a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b5a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b5ac:	f887 a002 	strb.w	sl, [r7, #2]
 801b5b0:	f887 c001 	strb.w	ip, [r7, #1]
 801b5b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5b6:	3703      	adds	r7, #3
 801b5b8:	f109 39ff 	add.w	r9, r9, #4294967295
 801b5bc:	4414      	add	r4, r2
 801b5be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5c0:	4410      	add	r0, r2
 801b5c2:	e6fb      	b.n	801b3bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b5c4:	b007      	add	sp, #28
 801b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ce:	b085      	sub	sp, #20
 801b5d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b5d4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b5d6:	9203      	str	r2, [sp, #12]
 801b5d8:	6870      	ldr	r0, [r6, #4]
 801b5da:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b5dc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b5e0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b5e4:	9100      	str	r1, [sp, #0]
 801b5e6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b5ea:	fb00 2404 	mla	r4, r0, r4, r2
 801b5ee:	6832      	ldr	r2, [r6, #0]
 801b5f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b5f4:	4414      	add	r4, r2
 801b5f6:	682a      	ldr	r2, [r5, #0]
 801b5f8:	9201      	str	r2, [sp, #4]
 801b5fa:	686a      	ldr	r2, [r5, #4]
 801b5fc:	3204      	adds	r2, #4
 801b5fe:	9202      	str	r2, [sp, #8]
 801b600:	9a00      	ldr	r2, [sp, #0]
 801b602:	2a00      	cmp	r2, #0
 801b604:	dc03      	bgt.n	801b60e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801b606:	9a03      	ldr	r2, [sp, #12]
 801b608:	2a00      	cmp	r2, #0
 801b60a:	f340 8131 	ble.w	801b870 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801b60e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b610:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b616:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	dd0e      	ble.n	801b63c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b61e:	1405      	asrs	r5, r0, #16
 801b620:	d405      	bmi.n	801b62e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b622:	4575      	cmp	r5, lr
 801b624:	da03      	bge.n	801b62e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b626:	1415      	asrs	r5, r2, #16
 801b628:	d401      	bmi.n	801b62e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b62a:	4545      	cmp	r5, r8
 801b62c:	db07      	blt.n	801b63e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b62e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b630:	3b01      	subs	r3, #1
 801b632:	3403      	adds	r4, #3
 801b634:	4428      	add	r0, r5
 801b636:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b638:	442a      	add	r2, r5
 801b63a:	e7ee      	b.n	801b61a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801b63c:	d06f      	beq.n	801b71e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801b63e:	1e5d      	subs	r5, r3, #1
 801b640:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b642:	fb06 0605 	mla	r6, r6, r5, r0
 801b646:	1436      	asrs	r6, r6, #16
 801b648:	d460      	bmi.n	801b70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b64a:	4576      	cmp	r6, lr
 801b64c:	da5e      	bge.n	801b70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b64e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b650:	fb06 2505 	mla	r5, r6, r5, r2
 801b654:	142d      	asrs	r5, r5, #16
 801b656:	d459      	bmi.n	801b70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b658:	4545      	cmp	r5, r8
 801b65a:	da57      	bge.n	801b70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b65c:	1ce5      	adds	r5, r4, #3
 801b65e:	469a      	mov	sl, r3
 801b660:	f1ba 0f00 	cmp.w	sl, #0
 801b664:	dd56      	ble.n	801b714 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801b666:	9901      	ldr	r1, [sp, #4]
 801b668:	1416      	asrs	r6, r2, #16
 801b66a:	1407      	asrs	r7, r0, #16
 801b66c:	fb0e 1606 	mla	r6, lr, r6, r1
 801b670:	9902      	ldr	r1, [sp, #8]
 801b672:	5df6      	ldrb	r6, [r6, r7]
 801b674:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801b678:	0e37      	lsrs	r7, r6, #24
 801b67a:	2fff      	cmp	r7, #255	; 0xff
 801b67c:	f000 80ef 	beq.w	801b85e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801b680:	fa5f fc87 	uxtb.w	ip, r7
 801b684:	b3d7      	cbz	r7, 801b6fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801b686:	fa1f f78c 	uxth.w	r7, ip
 801b68a:	ea6f 0c0c 	mvn.w	ip, ip
 801b68e:	fa5f fb86 	uxtb.w	fp, r6
 801b692:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b696:	fa5f fc8c 	uxtb.w	ip, ip
 801b69a:	fb1b fb07 	smulbb	fp, fp, r7
 801b69e:	fb09 b90c 	mla	r9, r9, ip, fp
 801b6a2:	fa1f f989 	uxth.w	r9, r9
 801b6a6:	f109 0b01 	add.w	fp, r9, #1
 801b6aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6ae:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b6b2:	fb1b fb0c 	smulbb	fp, fp, ip
 801b6b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6ba:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b6be:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b6c2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b6c6:	fb09 b907 	mla	r9, r9, r7, fp
 801b6ca:	fa1f f989 	uxth.w	r9, r9
 801b6ce:	f109 0b01 	add.w	fp, r9, #1
 801b6d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6da:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b6de:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b6e2:	fb19 fc0c 	smulbb	ip, r9, ip
 801b6e6:	fb06 c607 	mla	r6, r6, r7, ip
 801b6ea:	b2b6      	uxth	r6, r6
 801b6ec:	f106 0c01 	add.w	ip, r6, #1
 801b6f0:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801b6f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b6f8:	f805 cc01 	strb.w	ip, [r5, #-1]
 801b6fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b6fe:	3503      	adds	r5, #3
 801b700:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b704:	4408      	add	r0, r1
 801b706:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b708:	440a      	add	r2, r1
 801b70a:	e7a9      	b.n	801b660 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801b70c:	2600      	movs	r6, #0
 801b70e:	1b9d      	subs	r5, r3, r6
 801b710:	2d00      	cmp	r5, #0
 801b712:	dc40      	bgt.n	801b796 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801b714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b71c:	441c      	add	r4, r3
 801b71e:	9b00      	ldr	r3, [sp, #0]
 801b720:	2b00      	cmp	r3, #0
 801b722:	f340 80a5 	ble.w	801b870 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801b726:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b72c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b730:	eeb0 6a62 	vmov.f32	s12, s5
 801b734:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b738:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b73c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b740:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b744:	eeb0 6a43 	vmov.f32	s12, s6
 801b748:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b74c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b750:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b754:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b758:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b75c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b760:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b764:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b768:	ee12 2a90 	vmov	r2, s5
 801b76c:	eef0 2a47 	vmov.f32	s5, s14
 801b770:	fb92 f3f3 	sdiv	r3, r2, r3
 801b774:	ee13 2a10 	vmov	r2, s6
 801b778:	9311      	str	r3, [sp, #68]	; 0x44
 801b77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b77c:	eeb0 3a67 	vmov.f32	s6, s15
 801b780:	fb92 f3f3 	sdiv	r3, r2, r3
 801b784:	9312      	str	r3, [sp, #72]	; 0x48
 801b786:	9b00      	ldr	r3, [sp, #0]
 801b788:	9a03      	ldr	r2, [sp, #12]
 801b78a:	3b01      	subs	r3, #1
 801b78c:	9300      	str	r3, [sp, #0]
 801b78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b790:	bf08      	it	eq
 801b792:	4613      	moveq	r3, r2
 801b794:	e734      	b.n	801b600 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b796:	1407      	asrs	r7, r0, #16
 801b798:	d450      	bmi.n	801b83c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b79a:	4577      	cmp	r7, lr
 801b79c:	da4e      	bge.n	801b83c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b79e:	1415      	asrs	r5, r2, #16
 801b7a0:	d44c      	bmi.n	801b83c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7a2:	4545      	cmp	r5, r8
 801b7a4:	da4a      	bge.n	801b83c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7a6:	9901      	ldr	r1, [sp, #4]
 801b7a8:	fb0e 1505 	mla	r5, lr, r5, r1
 801b7ac:	9902      	ldr	r1, [sp, #8]
 801b7ae:	5ded      	ldrb	r5, [r5, r7]
 801b7b0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801b7b4:	0e2f      	lsrs	r7, r5, #24
 801b7b6:	2fff      	cmp	r7, #255	; 0xff
 801b7b8:	d046      	beq.n	801b848 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801b7ba:	fa5f f987 	uxtb.w	r9, r7
 801b7be:	b3ef      	cbz	r7, 801b83c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7c0:	fa1f fc89 	uxth.w	ip, r9
 801b7c4:	ea6f 0909 	mvn.w	r9, r9
 801b7c8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b7cc:	fa5f fb85 	uxtb.w	fp, r5
 801b7d0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b7d4:	fa5f f989 	uxtb.w	r9, r9
 801b7d8:	fb1b fb0c 	smulbb	fp, fp, ip
 801b7dc:	fb0a ba09 	mla	sl, sl, r9, fp
 801b7e0:	fa1f fa8a 	uxth.w	sl, sl
 801b7e4:	f10a 0b01 	add.w	fp, sl, #1
 801b7e8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b7ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b7f0:	f804 a007 	strb.w	sl, [r4, r7]
 801b7f4:	4427      	add	r7, r4
 801b7f6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b7fa:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b7fe:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b802:	fb1b fb09 	smulbb	fp, fp, r9
 801b806:	fb0a ba0c 	mla	sl, sl, ip, fp
 801b80a:	fa1f fa8a 	uxth.w	sl, sl
 801b80e:	f10a 0b01 	add.w	fp, sl, #1
 801b812:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b816:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b81a:	f887 a001 	strb.w	sl, [r7, #1]
 801b81e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b822:	fb1a f909 	smulbb	r9, sl, r9
 801b826:	fb05 950c 	mla	r5, r5, ip, r9
 801b82a:	b2ad      	uxth	r5, r5
 801b82c:	f105 0901 	add.w	r9, r5, #1
 801b830:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b834:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b838:	f887 9002 	strb.w	r9, [r7, #2]
 801b83c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b83e:	3601      	adds	r6, #1
 801b840:	4408      	add	r0, r1
 801b842:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b844:	440a      	add	r2, r1
 801b846:	e762      	b.n	801b70e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801b848:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b84c:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801b850:	55e5      	strb	r5, [r4, r7]
 801b852:	4427      	add	r7, r4
 801b854:	0c2d      	lsrs	r5, r5, #16
 801b856:	f887 c001 	strb.w	ip, [r7, #1]
 801b85a:	70bd      	strb	r5, [r7, #2]
 801b85c:	e7ee      	b.n	801b83c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b85e:	0a37      	lsrs	r7, r6, #8
 801b860:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b864:	0c36      	lsrs	r6, r6, #16
 801b866:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b86a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b86e:	e745      	b.n	801b6fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801b870:	b005      	add	sp, #20
 801b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b876 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b87a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b87c:	9201      	str	r2, [sp, #4]
 801b87e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801b882:	6870      	ldr	r0, [r6, #4]
 801b884:	9200      	str	r2, [sp, #0]
 801b886:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b88a:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801b88e:	fa1f fc85 	uxth.w	ip, r5
 801b892:	43ed      	mvns	r5, r5
 801b894:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b898:	b2ed      	uxtb	r5, r5
 801b89a:	fb00 2404 	mla	r4, r0, r4, r2
 801b89e:	6832      	ldr	r2, [r6, #0]
 801b8a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b8a4:	4414      	add	r4, r2
 801b8a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b8a8:	f8d2 8000 	ldr.w	r8, [r2]
 801b8ac:	2900      	cmp	r1, #0
 801b8ae:	dc03      	bgt.n	801b8b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801b8b0:	9a01      	ldr	r2, [sp, #4]
 801b8b2:	2a00      	cmp	r2, #0
 801b8b4:	f340 8104 	ble.w	801bac0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b8b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b8ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b8be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	dd0f      	ble.n	801b8e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b8c8:	1406      	asrs	r6, r0, #16
 801b8ca:	d406      	bmi.n	801b8da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b8cc:	4576      	cmp	r6, lr
 801b8ce:	da04      	bge.n	801b8da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b8d0:	1416      	asrs	r6, r2, #16
 801b8d2:	d402      	bmi.n	801b8da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b8d4:	9f00      	ldr	r7, [sp, #0]
 801b8d6:	42be      	cmp	r6, r7
 801b8d8:	db07      	blt.n	801b8ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b8da:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b8dc:	3b01      	subs	r3, #1
 801b8de:	3403      	adds	r4, #3
 801b8e0:	4430      	add	r0, r6
 801b8e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b8e4:	4432      	add	r2, r6
 801b8e6:	e7ed      	b.n	801b8c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801b8e8:	d05f      	beq.n	801b9aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801b8ea:	1e5e      	subs	r6, r3, #1
 801b8ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b8ee:	fb07 0706 	mla	r7, r7, r6, r0
 801b8f2:	143f      	asrs	r7, r7, #16
 801b8f4:	d450      	bmi.n	801b998 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b8f6:	4577      	cmp	r7, lr
 801b8f8:	da4e      	bge.n	801b998 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b8fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b8fc:	fb07 2606 	mla	r6, r7, r6, r2
 801b900:	1436      	asrs	r6, r6, #16
 801b902:	d449      	bmi.n	801b998 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b904:	9f00      	ldr	r7, [sp, #0]
 801b906:	42be      	cmp	r6, r7
 801b908:	da46      	bge.n	801b998 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b90a:	1ce6      	adds	r6, r4, #3
 801b90c:	4699      	mov	r9, r3
 801b90e:	f1b9 0f00 	cmp.w	r9, #0
 801b912:	f106 0603 	add.w	r6, r6, #3
 801b916:	dd43      	ble.n	801b9a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b918:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b91c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b920:	1417      	asrs	r7, r2, #16
 801b922:	f109 39ff 	add.w	r9, r9, #4294967295
 801b926:	fb1b fb05 	smulbb	fp, fp, r5
 801b92a:	fb0e a707 	mla	r7, lr, r7, sl
 801b92e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b932:	eb08 0a07 	add.w	sl, r8, r7
 801b936:	f818 7007 	ldrb.w	r7, [r8, r7]
 801b93a:	fb07 b70c 	mla	r7, r7, ip, fp
 801b93e:	b2bf      	uxth	r7, r7
 801b940:	f107 0b01 	add.w	fp, r7, #1
 801b944:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b948:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b94c:	fb1b fb05 	smulbb	fp, fp, r5
 801b950:	123f      	asrs	r7, r7, #8
 801b952:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b956:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b95a:	fb07 b70c 	mla	r7, r7, ip, fp
 801b95e:	b2bf      	uxth	r7, r7
 801b960:	f107 0b01 	add.w	fp, r7, #1
 801b964:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b968:	123f      	asrs	r7, r7, #8
 801b96a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b96e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b972:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b976:	fb1a fa05 	smulbb	sl, sl, r5
 801b97a:	fb07 a70c 	mla	r7, r7, ip, sl
 801b97e:	b2bf      	uxth	r7, r7
 801b980:	f107 0a01 	add.w	sl, r7, #1
 801b984:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b988:	123f      	asrs	r7, r7, #8
 801b98a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b98e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b990:	4438      	add	r0, r7
 801b992:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b994:	443a      	add	r2, r7
 801b996:	e7ba      	b.n	801b90e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b998:	2700      	movs	r7, #0
 801b99a:	1bde      	subs	r6, r3, r7
 801b99c:	2e00      	cmp	r6, #0
 801b99e:	dc3f      	bgt.n	801ba20 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b9a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9a8:	441c      	add	r4, r3
 801b9aa:	2900      	cmp	r1, #0
 801b9ac:	f340 8088 	ble.w	801bac0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b9b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b9b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9ba:	3901      	subs	r1, #1
 801b9bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9c0:	eef0 6a62 	vmov.f32	s13, s5
 801b9c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b9c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b9d0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801b9d4:	eef0 6a43 	vmov.f32	s13, s6
 801b9d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b9dc:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801b9e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b9e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b9ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b9f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b9f8:	ee12 2a90 	vmov	r2, s5
 801b9fc:	eef0 2a47 	vmov.f32	s5, s14
 801ba00:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba04:	ee13 2a10 	vmov	r2, s6
 801ba08:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba0c:	eeb0 3a67 	vmov.f32	s6, s15
 801ba10:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba14:	9a01      	ldr	r2, [sp, #4]
 801ba16:	9310      	str	r3, [sp, #64]	; 0x40
 801ba18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba1a:	bf08      	it	eq
 801ba1c:	4613      	moveq	r3, r2
 801ba1e:	e745      	b.n	801b8ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801ba20:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ba24:	d446      	bmi.n	801bab4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba26:	45f2      	cmp	sl, lr
 801ba28:	da44      	bge.n	801bab4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba2a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ba2e:	d441      	bmi.n	801bab4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba30:	9e00      	ldr	r6, [sp, #0]
 801ba32:	45b1      	cmp	r9, r6
 801ba34:	da3e      	bge.n	801bab4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba36:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801ba3a:	fb0e a909 	mla	r9, lr, r9, sl
 801ba3e:	f814 b006 	ldrb.w	fp, [r4, r6]
 801ba42:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ba46:	fb1b fb05 	smulbb	fp, fp, r5
 801ba4a:	eb08 0a09 	add.w	sl, r8, r9
 801ba4e:	f818 9009 	ldrb.w	r9, [r8, r9]
 801ba52:	fb09 b90c 	mla	r9, r9, ip, fp
 801ba56:	fa1f f989 	uxth.w	r9, r9
 801ba5a:	f109 0b01 	add.w	fp, r9, #1
 801ba5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ba62:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ba66:	f804 9006 	strb.w	r9, [r4, r6]
 801ba6a:	4426      	add	r6, r4
 801ba6c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ba70:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ba74:	fb1b fb05 	smulbb	fp, fp, r5
 801ba78:	fb09 b90c 	mla	r9, r9, ip, fp
 801ba7c:	fa1f f989 	uxth.w	r9, r9
 801ba80:	f109 0b01 	add.w	fp, r9, #1
 801ba84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ba88:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ba8c:	f886 9001 	strb.w	r9, [r6, #1]
 801ba90:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ba94:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ba98:	fb1a fa05 	smulbb	sl, sl, r5
 801ba9c:	fb09 a90c 	mla	r9, r9, ip, sl
 801baa0:	fa1f f989 	uxth.w	r9, r9
 801baa4:	f109 0a01 	add.w	sl, r9, #1
 801baa8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801baac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bab0:	f886 9002 	strb.w	r9, [r6, #2]
 801bab4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bab6:	3701      	adds	r7, #1
 801bab8:	4430      	add	r0, r6
 801baba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801babc:	4432      	add	r2, r6
 801babe:	e76c      	b.n	801b99a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801bac0:	b003      	add	sp, #12
 801bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bac6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bac6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bacc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bad0:	9201      	str	r2, [sp, #4]
 801bad2:	6868      	ldr	r0, [r5, #4]
 801bad4:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801bad8:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801badc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bae0:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801bae4:	fb00 2404 	mla	r4, r0, r4, r2
 801bae8:	682a      	ldr	r2, [r5, #0]
 801baea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801baee:	4414      	add	r4, r2
 801baf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801baf2:	f8d2 9000 	ldr.w	r9, [r2]
 801baf6:	2900      	cmp	r1, #0
 801baf8:	dc03      	bgt.n	801bb02 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bafa:	9a01      	ldr	r2, [sp, #4]
 801bafc:	2a00      	cmp	r2, #0
 801bafe:	f340 80a8 	ble.w	801bc52 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801bb02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb04:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb0a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	dd0c      	ble.n	801bb2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bb12:	1405      	asrs	r5, r0, #16
 801bb14:	d405      	bmi.n	801bb22 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bb16:	4565      	cmp	r5, ip
 801bb18:	da03      	bge.n	801bb22 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bb1a:	1415      	asrs	r5, r2, #16
 801bb1c:	d401      	bmi.n	801bb22 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bb1e:	4575      	cmp	r5, lr
 801bb20:	db05      	blt.n	801bb2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801bb22:	4438      	add	r0, r7
 801bb24:	4432      	add	r2, r6
 801bb26:	3b01      	subs	r3, #1
 801bb28:	3403      	adds	r4, #3
 801bb2a:	e7f0      	b.n	801bb0e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801bb2c:	d03a      	beq.n	801bba4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801bb2e:	1e5d      	subs	r5, r3, #1
 801bb30:	fb07 0805 	mla	r8, r7, r5, r0
 801bb34:	ea5f 4828 	movs.w	r8, r8, asr #16
 801bb38:	d429      	bmi.n	801bb8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb3a:	45e0      	cmp	r8, ip
 801bb3c:	da27      	bge.n	801bb8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb3e:	fb06 2505 	mla	r5, r6, r5, r2
 801bb42:	142d      	asrs	r5, r5, #16
 801bb44:	d423      	bmi.n	801bb8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb46:	4575      	cmp	r5, lr
 801bb48:	da21      	bge.n	801bb8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb4a:	f104 0803 	add.w	r8, r4, #3
 801bb4e:	469a      	mov	sl, r3
 801bb50:	f1ba 0f00 	cmp.w	sl, #0
 801bb54:	f108 0803 	add.w	r8, r8, #3
 801bb58:	dd1f      	ble.n	801bb9a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801bb5a:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801bb5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb62:	1415      	asrs	r5, r2, #16
 801bb64:	4438      	add	r0, r7
 801bb66:	4432      	add	r2, r6
 801bb68:	fb0c b505 	mla	r5, ip, r5, fp
 801bb6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb70:	eb09 0b05 	add.w	fp, r9, r5
 801bb74:	f819 5005 	ldrb.w	r5, [r9, r5]
 801bb78:	f808 5c06 	strb.w	r5, [r8, #-6]
 801bb7c:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801bb80:	f808 5c05 	strb.w	r5, [r8, #-5]
 801bb84:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801bb88:	f808 5c04 	strb.w	r5, [r8, #-4]
 801bb8c:	e7e0      	b.n	801bb50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bb8e:	2500      	movs	r5, #0
 801bb90:	eba3 0805 	sub.w	r8, r3, r5
 801bb94:	f1b8 0f00 	cmp.w	r8, #0
 801bb98:	dc38      	bgt.n	801bc0c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801bb9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bba2:	441c      	add	r4, r3
 801bba4:	2900      	cmp	r1, #0
 801bba6:	dd54      	ble.n	801bc52 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801bba8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bbac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bbb2:	3901      	subs	r1, #1
 801bbb4:	eeb0 6a62 	vmov.f32	s12, s5
 801bbb8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bbbc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bbc0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbc4:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801bbc8:	eeb0 6a43 	vmov.f32	s12, s6
 801bbcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbd0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801bbd4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bbd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bbdc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bbe0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bbe4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bbe8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bbec:	ee12 2a90 	vmov	r2, s5
 801bbf0:	eef0 2a47 	vmov.f32	s5, s14
 801bbf4:	fb92 f7f3 	sdiv	r7, r2, r3
 801bbf8:	ee13 2a10 	vmov	r2, s6
 801bbfc:	eeb0 3a67 	vmov.f32	s6, s15
 801bc00:	fb92 f6f3 	sdiv	r6, r2, r3
 801bc04:	9a01      	ldr	r2, [sp, #4]
 801bc06:	bf08      	it	eq
 801bc08:	4613      	moveq	r3, r2
 801bc0a:	e774      	b.n	801baf6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801bc0c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bc10:	d41b      	bmi.n	801bc4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc12:	45e2      	cmp	sl, ip
 801bc14:	da19      	bge.n	801bc4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc16:	ea5f 4822 	movs.w	r8, r2, asr #16
 801bc1a:	d416      	bmi.n	801bc4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc1c:	45f0      	cmp	r8, lr
 801bc1e:	da14      	bge.n	801bc4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc20:	fb0c a808 	mla	r8, ip, r8, sl
 801bc24:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bc28:	f819 b008 	ldrb.w	fp, [r9, r8]
 801bc2c:	eb09 0a08 	add.w	sl, r9, r8
 801bc30:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801bc34:	f804 b008 	strb.w	fp, [r4, r8]
 801bc38:	44a0      	add	r8, r4
 801bc3a:	f89a b001 	ldrb.w	fp, [sl, #1]
 801bc3e:	f888 b001 	strb.w	fp, [r8, #1]
 801bc42:	f89a a002 	ldrb.w	sl, [sl, #2]
 801bc46:	f888 a002 	strb.w	sl, [r8, #2]
 801bc4a:	4438      	add	r0, r7
 801bc4c:	4432      	add	r2, r6
 801bc4e:	3501      	adds	r5, #1
 801bc50:	e79e      	b.n	801bb90 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801bc52:	b003      	add	sp, #12
 801bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc5c:	b085      	sub	sp, #20
 801bc5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bc64:	9202      	str	r2, [sp, #8]
 801bc66:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bc6a:	6860      	ldr	r0, [r4, #4]
 801bc6c:	9203      	str	r2, [sp, #12]
 801bc6e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bc72:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801bc76:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bc7a:	fb00 2505 	mla	r5, r0, r5, r2
 801bc7e:	6822      	ldr	r2, [r4, #0]
 801bc80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc84:	4415      	add	r5, r2
 801bc86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bc88:	6812      	ldr	r2, [r2, #0]
 801bc8a:	9201      	str	r2, [sp, #4]
 801bc8c:	2900      	cmp	r1, #0
 801bc8e:	dc03      	bgt.n	801bc98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801bc90:	9a02      	ldr	r2, [sp, #8]
 801bc92:	2a00      	cmp	r2, #0
 801bc94:	f340 811c 	ble.w	801bed0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bc98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc9a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bc9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bca0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	dd0e      	ble.n	801bcc6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bca8:	1422      	asrs	r2, r4, #16
 801bcaa:	d405      	bmi.n	801bcb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bcac:	4572      	cmp	r2, lr
 801bcae:	da03      	bge.n	801bcb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bcb0:	1402      	asrs	r2, r0, #16
 801bcb2:	d401      	bmi.n	801bcb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bcb4:	4542      	cmp	r2, r8
 801bcb6:	db07      	blt.n	801bcc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801bcb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bcba:	3b01      	subs	r3, #1
 801bcbc:	3503      	adds	r5, #3
 801bcbe:	4414      	add	r4, r2
 801bcc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bcc2:	4410      	add	r0, r2
 801bcc4:	e7ee      	b.n	801bca4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801bcc6:	d072      	beq.n	801bdae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801bcc8:	1e5a      	subs	r2, r3, #1
 801bcca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bccc:	fb06 4602 	mla	r6, r6, r2, r4
 801bcd0:	1436      	asrs	r6, r6, #16
 801bcd2:	d461      	bmi.n	801bd98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bcd4:	4576      	cmp	r6, lr
 801bcd6:	da5f      	bge.n	801bd98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bcd8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bcda:	fb06 0202 	mla	r2, r6, r2, r0
 801bcde:	1412      	asrs	r2, r2, #16
 801bce0:	d45a      	bmi.n	801bd98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bce2:	4542      	cmp	r2, r8
 801bce4:	da58      	bge.n	801bd98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bce6:	1cef      	adds	r7, r5, #3
 801bce8:	4699      	mov	r9, r3
 801bcea:	f1b9 0f00 	cmp.w	r9, #0
 801bcee:	dd59      	ble.n	801bda4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801bcf0:	1426      	asrs	r6, r4, #16
 801bcf2:	1402      	asrs	r2, r0, #16
 801bcf4:	fb0e 6202 	mla	r2, lr, r2, r6
 801bcf8:	9e01      	ldr	r6, [sp, #4]
 801bcfa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801bcfe:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bd02:	d041      	beq.n	801bd88 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801bd04:	9a03      	ldr	r2, [sp, #12]
 801bd06:	fa5f fb86 	uxtb.w	fp, r6
 801bd0a:	fb02 fc0c 	mul.w	ip, r2, ip
 801bd0e:	f10c 0201 	add.w	r2, ip, #1
 801bd12:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bd16:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801bd1a:	1212      	asrs	r2, r2, #8
 801bd1c:	fa1f fa82 	uxth.w	sl, r2
 801bd20:	43d2      	mvns	r2, r2
 801bd22:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd26:	b2d2      	uxtb	r2, r2
 801bd28:	fb0c bc02 	mla	ip, ip, r2, fp
 801bd2c:	fa1f fc8c 	uxth.w	ip, ip
 801bd30:	f10c 0b01 	add.w	fp, ip, #1
 801bd34:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bd38:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bd3c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bd40:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd44:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd48:	fb16 fa0a 	smulbb	sl, r6, sl
 801bd4c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bd50:	f807 cc03 	strb.w	ip, [r7, #-3]
 801bd54:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801bd58:	fb06 aa02 	mla	sl, r6, r2, sl
 801bd5c:	fb0c bc02 	mla	ip, ip, r2, fp
 801bd60:	fa1f fa8a 	uxth.w	sl, sl
 801bd64:	fa1f fc8c 	uxth.w	ip, ip
 801bd68:	f10a 0601 	add.w	r6, sl, #1
 801bd6c:	f10c 0b01 	add.w	fp, ip, #1
 801bd70:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bd74:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bd78:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bd7c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd80:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bd84:	f807 cc02 	strb.w	ip, [r7, #-2]
 801bd88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd8a:	3703      	adds	r7, #3
 801bd8c:	f109 39ff 	add.w	r9, r9, #4294967295
 801bd90:	4414      	add	r4, r2
 801bd92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bd94:	4410      	add	r0, r2
 801bd96:	e7a8      	b.n	801bcea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801bd98:	f04f 0c00 	mov.w	ip, #0
 801bd9c:	eba3 020c 	sub.w	r2, r3, ip
 801bda0:	2a00      	cmp	r2, #0
 801bda2:	dc3d      	bgt.n	801be20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801bda4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bda8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdac:	441d      	add	r5, r3
 801bdae:	2900      	cmp	r1, #0
 801bdb0:	f340 808e 	ble.w	801bed0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bdb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bdbe:	3901      	subs	r1, #1
 801bdc0:	eeb0 6a62 	vmov.f32	s12, s5
 801bdc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bdc8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bdcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bdd0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bdd4:	eeb0 6a43 	vmov.f32	s12, s6
 801bdd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bddc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bde0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bde4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bde8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bdec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bdf0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bdf4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bdf8:	ee12 2a90 	vmov	r2, s5
 801bdfc:	eef0 2a47 	vmov.f32	s5, s14
 801be00:	fb92 f3f3 	sdiv	r3, r2, r3
 801be04:	ee13 2a10 	vmov	r2, s6
 801be08:	9311      	str	r3, [sp, #68]	; 0x44
 801be0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be0c:	eeb0 3a67 	vmov.f32	s6, s15
 801be10:	fb92 f3f3 	sdiv	r3, r2, r3
 801be14:	9a02      	ldr	r2, [sp, #8]
 801be16:	9312      	str	r3, [sp, #72]	; 0x48
 801be18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be1a:	bf08      	it	eq
 801be1c:	4613      	moveq	r3, r2
 801be1e:	e735      	b.n	801bc8c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801be20:	1426      	asrs	r6, r4, #16
 801be22:	d44e      	bmi.n	801bec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be24:	4576      	cmp	r6, lr
 801be26:	da4c      	bge.n	801bec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be28:	1402      	asrs	r2, r0, #16
 801be2a:	d44a      	bmi.n	801bec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be2c:	4542      	cmp	r2, r8
 801be2e:	da48      	bge.n	801bec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be30:	fb0e 6202 	mla	r2, lr, r2, r6
 801be34:	9e01      	ldr	r6, [sp, #4]
 801be36:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801be3a:	0e3a      	lsrs	r2, r7, #24
 801be3c:	d041      	beq.n	801bec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be3e:	9e03      	ldr	r6, [sp, #12]
 801be40:	fa5f fb87 	uxtb.w	fp, r7
 801be44:	4372      	muls	r2, r6
 801be46:	1c56      	adds	r6, r2, #1
 801be48:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801be4c:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801be50:	1212      	asrs	r2, r2, #8
 801be52:	f815 9006 	ldrb.w	r9, [r5, r6]
 801be56:	fa1f fa82 	uxth.w	sl, r2
 801be5a:	43d2      	mvns	r2, r2
 801be5c:	fb1b fb0a 	smulbb	fp, fp, sl
 801be60:	b2d2      	uxtb	r2, r2
 801be62:	fb09 b902 	mla	r9, r9, r2, fp
 801be66:	fa1f f989 	uxth.w	r9, r9
 801be6a:	f109 0b01 	add.w	fp, r9, #1
 801be6e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801be72:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801be76:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801be7a:	fb1b fb0a 	smulbb	fp, fp, sl
 801be7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be82:	fb17 fa0a 	smulbb	sl, r7, sl
 801be86:	f805 9006 	strb.w	r9, [r5, r6]
 801be8a:	442e      	add	r6, r5
 801be8c:	78b7      	ldrb	r7, [r6, #2]
 801be8e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801be92:	fb07 aa02 	mla	sl, r7, r2, sl
 801be96:	fb09 b902 	mla	r9, r9, r2, fp
 801be9a:	fa1f fa8a 	uxth.w	sl, sl
 801be9e:	fa1f f989 	uxth.w	r9, r9
 801bea2:	f10a 0701 	add.w	r7, sl, #1
 801bea6:	f109 0b01 	add.w	fp, r9, #1
 801beaa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801beae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801beb2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801beb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801beba:	f886 a002 	strb.w	sl, [r6, #2]
 801bebe:	f886 9001 	strb.w	r9, [r6, #1]
 801bec2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bec4:	f10c 0c01 	add.w	ip, ip, #1
 801bec8:	4414      	add	r4, r2
 801beca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801becc:	4410      	add	r0, r2
 801bece:	e765      	b.n	801bd9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801bed0:	b005      	add	sp, #20
 801bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bed6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beda:	b085      	sub	sp, #20
 801bedc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bee0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bee2:	9203      	str	r2, [sp, #12]
 801bee4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bee8:	6860      	ldr	r0, [r4, #4]
 801beea:	9201      	str	r2, [sp, #4]
 801beec:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bef0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bef4:	fb00 2505 	mla	r5, r0, r5, r2
 801bef8:	6822      	ldr	r2, [r4, #0]
 801befa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801befe:	4415      	add	r5, r2
 801bf00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bf02:	6812      	ldr	r2, [r2, #0]
 801bf04:	9202      	str	r2, [sp, #8]
 801bf06:	2900      	cmp	r1, #0
 801bf08:	dc03      	bgt.n	801bf12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bf0a:	9a03      	ldr	r2, [sp, #12]
 801bf0c:	2a00      	cmp	r2, #0
 801bf0e:	f340 8122 	ble.w	801c156 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801bf12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf14:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bf18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf1a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	dd0f      	ble.n	801bf42 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801bf22:	1422      	asrs	r2, r4, #16
 801bf24:	d406      	bmi.n	801bf34 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bf26:	4572      	cmp	r2, lr
 801bf28:	da04      	bge.n	801bf34 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bf2a:	1402      	asrs	r2, r0, #16
 801bf2c:	d402      	bmi.n	801bf34 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bf2e:	9e01      	ldr	r6, [sp, #4]
 801bf30:	42b2      	cmp	r2, r6
 801bf32:	db07      	blt.n	801bf44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bf34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf36:	3b01      	subs	r3, #1
 801bf38:	3503      	adds	r5, #3
 801bf3a:	4414      	add	r4, r2
 801bf3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf3e:	4410      	add	r0, r2
 801bf40:	e7ed      	b.n	801bf1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801bf42:	d06e      	beq.n	801c022 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801bf44:	1e5a      	subs	r2, r3, #1
 801bf46:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bf48:	fb06 4602 	mla	r6, r6, r2, r4
 801bf4c:	1436      	asrs	r6, r6, #16
 801bf4e:	d45d      	bmi.n	801c00c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf50:	4576      	cmp	r6, lr
 801bf52:	da5b      	bge.n	801c00c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf54:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bf56:	fb06 0202 	mla	r2, r6, r2, r0
 801bf5a:	1412      	asrs	r2, r2, #16
 801bf5c:	d456      	bmi.n	801c00c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf5e:	9e01      	ldr	r6, [sp, #4]
 801bf60:	42b2      	cmp	r2, r6
 801bf62:	da53      	bge.n	801c00c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf64:	1cee      	adds	r6, r5, #3
 801bf66:	469a      	mov	sl, r3
 801bf68:	f1ba 0f00 	cmp.w	sl, #0
 801bf6c:	dd54      	ble.n	801c018 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bf6e:	1427      	asrs	r7, r4, #16
 801bf70:	1402      	asrs	r2, r0, #16
 801bf72:	fb0e 7202 	mla	r2, lr, r2, r7
 801bf76:	9f02      	ldr	r7, [sp, #8]
 801bf78:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801bf7c:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801bf80:	d03c      	beq.n	801bffc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801bf82:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bf86:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bf8a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801bf8e:	fa5f f28c 	uxtb.w	r2, ip
 801bf92:	b2ff      	uxtb	r7, r7
 801bf94:	f000 80d8 	beq.w	801c148 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bf98:	fa1f f882 	uxth.w	r8, r2
 801bf9c:	43d2      	mvns	r2, r2
 801bf9e:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801bfa2:	fb17 f708 	smulbb	r7, r7, r8
 801bfa6:	b2d2      	uxtb	r2, r2
 801bfa8:	fb19 f908 	smulbb	r9, r9, r8
 801bfac:	fb0c 7702 	mla	r7, ip, r2, r7
 801bfb0:	fb1b f808 	smulbb	r8, fp, r8
 801bfb4:	b2bf      	uxth	r7, r7
 801bfb6:	f107 0c01 	add.w	ip, r7, #1
 801bfba:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801bfbe:	123f      	asrs	r7, r7, #8
 801bfc0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bfc4:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801bfc8:	fb07 9902 	mla	r9, r7, r2, r9
 801bfcc:	fa1f f989 	uxth.w	r9, r9
 801bfd0:	f109 0701 	add.w	r7, r9, #1
 801bfd4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801bfd8:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bfdc:	fb07 8802 	mla	r8, r7, r2, r8
 801bfe0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bfe4:	fa1f f888 	uxth.w	r8, r8
 801bfe8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801bfec:	f108 0201 	add.w	r2, r8, #1
 801bff0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bff4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bff8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801bffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bffe:	3603      	adds	r6, #3
 801c000:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c004:	4414      	add	r4, r2
 801c006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c008:	4410      	add	r0, r2
 801c00a:	e7ad      	b.n	801bf68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c00c:	f04f 0c00 	mov.w	ip, #0
 801c010:	eba3 020c 	sub.w	r2, r3, ip
 801c014:	2a00      	cmp	r2, #0
 801c016:	dc3d      	bgt.n	801c094 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c01c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c020:	441d      	add	r5, r3
 801c022:	2900      	cmp	r1, #0
 801c024:	f340 8097 	ble.w	801c156 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c028:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c02c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c02e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c032:	3901      	subs	r1, #1
 801c034:	eeb0 6a62 	vmov.f32	s12, s5
 801c038:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c03c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c044:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c048:	eeb0 6a43 	vmov.f32	s12, s6
 801c04c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c050:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c054:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c058:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c05c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c060:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c064:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c068:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c06c:	ee12 2a90 	vmov	r2, s5
 801c070:	eef0 2a47 	vmov.f32	s5, s14
 801c074:	fb92 f3f3 	sdiv	r3, r2, r3
 801c078:	ee13 2a10 	vmov	r2, s6
 801c07c:	9311      	str	r3, [sp, #68]	; 0x44
 801c07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c080:	eeb0 3a67 	vmov.f32	s6, s15
 801c084:	fb92 f3f3 	sdiv	r3, r2, r3
 801c088:	9a03      	ldr	r2, [sp, #12]
 801c08a:	9312      	str	r3, [sp, #72]	; 0x48
 801c08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c08e:	bf08      	it	eq
 801c090:	4613      	moveq	r3, r2
 801c092:	e738      	b.n	801bf06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c094:	1426      	asrs	r6, r4, #16
 801c096:	d448      	bmi.n	801c12a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c098:	4576      	cmp	r6, lr
 801c09a:	da46      	bge.n	801c12a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c09c:	1402      	asrs	r2, r0, #16
 801c09e:	d444      	bmi.n	801c12a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0a0:	9f01      	ldr	r7, [sp, #4]
 801c0a2:	42ba      	cmp	r2, r7
 801c0a4:	da41      	bge.n	801c12a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0a6:	fb0e 6202 	mla	r2, lr, r2, r6
 801c0aa:	9e02      	ldr	r6, [sp, #8]
 801c0ac:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c0b0:	0e3a      	lsrs	r2, r7, #24
 801c0b2:	d03a      	beq.n	801c12a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0b4:	2aff      	cmp	r2, #255	; 0xff
 801c0b6:	b2d6      	uxtb	r6, r2
 801c0b8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c0bc:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c0c0:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c0c4:	b2ff      	uxtb	r7, r7
 801c0c6:	d037      	beq.n	801c138 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c0c8:	fa1f f986 	uxth.w	r9, r6
 801c0cc:	4462      	add	r2, ip
 801c0ce:	43f6      	mvns	r6, r6
 801c0d0:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c0d4:	fb17 f709 	smulbb	r7, r7, r9
 801c0d8:	fb1a fa09 	smulbb	sl, sl, r9
 801c0dc:	b2f6      	uxtb	r6, r6
 801c0de:	fb1b f909 	smulbb	r9, fp, r9
 801c0e2:	fb08 7706 	mla	r7, r8, r6, r7
 801c0e6:	b2bf      	uxth	r7, r7
 801c0e8:	f107 0801 	add.w	r8, r7, #1
 801c0ec:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c0f0:	123f      	asrs	r7, r7, #8
 801c0f2:	54af      	strb	r7, [r5, r2]
 801c0f4:	442a      	add	r2, r5
 801c0f6:	7857      	ldrb	r7, [r2, #1]
 801c0f8:	fb07 aa06 	mla	sl, r7, r6, sl
 801c0fc:	fa1f fa8a 	uxth.w	sl, sl
 801c100:	f10a 0701 	add.w	r7, sl, #1
 801c104:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c108:	7897      	ldrb	r7, [r2, #2]
 801c10a:	fb07 9906 	mla	r9, r7, r6, r9
 801c10e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c112:	fa1f f989 	uxth.w	r9, r9
 801c116:	f882 a001 	strb.w	sl, [r2, #1]
 801c11a:	f109 0601 	add.w	r6, r9, #1
 801c11e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c122:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c126:	f882 9002 	strb.w	r9, [r2, #2]
 801c12a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c12c:	f10c 0c01 	add.w	ip, ip, #1
 801c130:	4414      	add	r4, r2
 801c132:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c134:	4410      	add	r0, r2
 801c136:	e76b      	b.n	801c010 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801c138:	4462      	add	r2, ip
 801c13a:	54af      	strb	r7, [r5, r2]
 801c13c:	442a      	add	r2, r5
 801c13e:	f882 a001 	strb.w	sl, [r2, #1]
 801c142:	f882 b002 	strb.w	fp, [r2, #2]
 801c146:	e7f0      	b.n	801c12a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c148:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c14c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c150:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c154:	e752      	b.n	801bffc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c156:	b005      	add	sp, #20
 801c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c15c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c160:	b087      	sub	sp, #28
 801c162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c166:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c168:	9204      	str	r2, [sp, #16]
 801c16a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c16e:	6860      	ldr	r0, [r4, #4]
 801c170:	9205      	str	r2, [sp, #20]
 801c172:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c176:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c17a:	9101      	str	r1, [sp, #4]
 801c17c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c180:	fb00 2505 	mla	r5, r0, r5, r2
 801c184:	6822      	ldr	r2, [r4, #0]
 801c186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c18a:	4415      	add	r5, r2
 801c18c:	f10e 0201 	add.w	r2, lr, #1
 801c190:	f022 0201 	bic.w	r2, r2, #1
 801c194:	9202      	str	r2, [sp, #8]
 801c196:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c198:	6812      	ldr	r2, [r2, #0]
 801c19a:	9203      	str	r2, [sp, #12]
 801c19c:	9a01      	ldr	r2, [sp, #4]
 801c19e:	2a00      	cmp	r2, #0
 801c1a0:	dc03      	bgt.n	801c1aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c1a2:	9a04      	ldr	r2, [sp, #16]
 801c1a4:	2a00      	cmp	r2, #0
 801c1a6:	f340 8132 	ble.w	801c40e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c1aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1ac:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c1b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c1b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	dd0e      	ble.n	801c1d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c1ba:	1422      	asrs	r2, r4, #16
 801c1bc:	d405      	bmi.n	801c1ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c1be:	4596      	cmp	lr, r2
 801c1c0:	dd03      	ble.n	801c1ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c1c2:	1402      	asrs	r2, r0, #16
 801c1c4:	d401      	bmi.n	801c1ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c1c6:	4542      	cmp	r2, r8
 801c1c8:	db07      	blt.n	801c1da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c1ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1cc:	3b01      	subs	r3, #1
 801c1ce:	3503      	adds	r5, #3
 801c1d0:	4414      	add	r4, r2
 801c1d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c1d4:	4410      	add	r0, r2
 801c1d6:	e7ee      	b.n	801c1b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801c1d8:	d010      	beq.n	801c1fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c1da:	1e5a      	subs	r2, r3, #1
 801c1dc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c1de:	fb06 4602 	mla	r6, r6, r2, r4
 801c1e2:	1436      	asrs	r6, r6, #16
 801c1e4:	d546      	bpl.n	801c274 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801c1e6:	4699      	mov	r9, r3
 801c1e8:	462e      	mov	r6, r5
 801c1ea:	f1b9 0f00 	cmp.w	r9, #0
 801c1ee:	f300 80ac 	bgt.w	801c34a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801c1f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1fa:	441d      	add	r5, r3
 801c1fc:	9b01      	ldr	r3, [sp, #4]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	f340 8105 	ble.w	801c40e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c204:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c20a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c20e:	eeb0 6a62 	vmov.f32	s12, s5
 801c212:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c216:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c21a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c21e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c222:	eeb0 6a43 	vmov.f32	s12, s6
 801c226:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c22a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c22e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c232:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c236:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c23a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c23e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c242:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c246:	ee12 2a90 	vmov	r2, s5
 801c24a:	eef0 2a47 	vmov.f32	s5, s14
 801c24e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c252:	ee13 2a10 	vmov	r2, s6
 801c256:	9313      	str	r3, [sp, #76]	; 0x4c
 801c258:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c25a:	eeb0 3a67 	vmov.f32	s6, s15
 801c25e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c262:	9314      	str	r3, [sp, #80]	; 0x50
 801c264:	9b01      	ldr	r3, [sp, #4]
 801c266:	9a04      	ldr	r2, [sp, #16]
 801c268:	3b01      	subs	r3, #1
 801c26a:	9301      	str	r3, [sp, #4]
 801c26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c26e:	bf08      	it	eq
 801c270:	4613      	moveq	r3, r2
 801c272:	e793      	b.n	801c19c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c274:	45b6      	cmp	lr, r6
 801c276:	ddb6      	ble.n	801c1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c278:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c27a:	fb06 0202 	mla	r2, r6, r2, r0
 801c27e:	1412      	asrs	r2, r2, #16
 801c280:	d4b1      	bmi.n	801c1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c282:	4542      	cmp	r2, r8
 801c284:	daaf      	bge.n	801c1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c286:	1cee      	adds	r6, r5, #3
 801c288:	4699      	mov	r9, r3
 801c28a:	f1b9 0f00 	cmp.w	r9, #0
 801c28e:	ddb0      	ble.n	801c1f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c290:	1422      	asrs	r2, r4, #16
 801c292:	9902      	ldr	r1, [sp, #8]
 801c294:	1407      	asrs	r7, r0, #16
 801c296:	fb01 2707 	mla	r7, r1, r7, r2
 801c29a:	9903      	ldr	r1, [sp, #12]
 801c29c:	087a      	lsrs	r2, r7, #1
 801c29e:	5c8a      	ldrb	r2, [r1, r2]
 801c2a0:	07f9      	lsls	r1, r7, #31
 801c2a2:	bf54      	ite	pl
 801c2a4:	f002 020f 	andpl.w	r2, r2, #15
 801c2a8:	1112      	asrmi	r2, r2, #4
 801c2aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c2ae:	b2d2      	uxtb	r2, r2
 801c2b0:	2a00      	cmp	r2, #0
 801c2b2:	d042      	beq.n	801c33a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801c2b4:	4957      	ldr	r1, [pc, #348]	; (801c414 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c2b6:	680f      	ldr	r7, [r1, #0]
 801c2b8:	9905      	ldr	r1, [sp, #20]
 801c2ba:	fa5f fb87 	uxtb.w	fp, r7
 801c2be:	434a      	muls	r2, r1
 801c2c0:	f102 0c01 	add.w	ip, r2, #1
 801c2c4:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c2c8:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c2cc:	1212      	asrs	r2, r2, #8
 801c2ce:	fa1f fa82 	uxth.w	sl, r2
 801c2d2:	43d2      	mvns	r2, r2
 801c2d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2d8:	b2d2      	uxtb	r2, r2
 801c2da:	fb0c bc02 	mla	ip, ip, r2, fp
 801c2de:	fa1f fc8c 	uxth.w	ip, ip
 801c2e2:	f10c 0b01 	add.w	fp, ip, #1
 801c2e6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c2ea:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c2ee:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c2f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2f6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c2fa:	fb17 fa0a 	smulbb	sl, r7, sl
 801c2fe:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c302:	f806 cc03 	strb.w	ip, [r6, #-3]
 801c306:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801c30a:	fb07 aa02 	mla	sl, r7, r2, sl
 801c30e:	fb0c bc02 	mla	ip, ip, r2, fp
 801c312:	fa1f fa8a 	uxth.w	sl, sl
 801c316:	fa1f fc8c 	uxth.w	ip, ip
 801c31a:	f10a 0701 	add.w	r7, sl, #1
 801c31e:	f10c 0b01 	add.w	fp, ip, #1
 801c322:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c326:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c32a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c32e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c332:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c336:	f806 cc02 	strb.w	ip, [r6, #-2]
 801c33a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c33c:	3603      	adds	r6, #3
 801c33e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c342:	4414      	add	r4, r2
 801c344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c346:	4410      	add	r0, r2
 801c348:	e79f      	b.n	801c28a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801c34a:	1422      	asrs	r2, r4, #16
 801c34c:	d457      	bmi.n	801c3fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c34e:	4596      	cmp	lr, r2
 801c350:	dd55      	ble.n	801c3fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c352:	1407      	asrs	r7, r0, #16
 801c354:	d453      	bmi.n	801c3fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c356:	4547      	cmp	r7, r8
 801c358:	da51      	bge.n	801c3fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c35a:	9902      	ldr	r1, [sp, #8]
 801c35c:	fb07 2701 	mla	r7, r7, r1, r2
 801c360:	9903      	ldr	r1, [sp, #12]
 801c362:	087a      	lsrs	r2, r7, #1
 801c364:	07ff      	lsls	r7, r7, #31
 801c366:	5c8a      	ldrb	r2, [r1, r2]
 801c368:	bf54      	ite	pl
 801c36a:	f002 020f 	andpl.w	r2, r2, #15
 801c36e:	1112      	asrmi	r2, r2, #4
 801c370:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c374:	b2d2      	uxtb	r2, r2
 801c376:	2a00      	cmp	r2, #0
 801c378:	d041      	beq.n	801c3fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c37a:	4926      	ldr	r1, [pc, #152]	; (801c414 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c37c:	680f      	ldr	r7, [r1, #0]
 801c37e:	9905      	ldr	r1, [sp, #20]
 801c380:	fa5f fb87 	uxtb.w	fp, r7
 801c384:	434a      	muls	r2, r1
 801c386:	f102 0c01 	add.w	ip, r2, #1
 801c38a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c38e:	f896 c000 	ldrb.w	ip, [r6]
 801c392:	1212      	asrs	r2, r2, #8
 801c394:	fa1f fa82 	uxth.w	sl, r2
 801c398:	43d2      	mvns	r2, r2
 801c39a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c39e:	b2d2      	uxtb	r2, r2
 801c3a0:	fb0c bc02 	mla	ip, ip, r2, fp
 801c3a4:	fa1f fc8c 	uxth.w	ip, ip
 801c3a8:	f10c 0b01 	add.w	fp, ip, #1
 801c3ac:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3b0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c3b4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c3b8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c3bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3c0:	fb17 fa0a 	smulbb	sl, r7, sl
 801c3c4:	78b7      	ldrb	r7, [r6, #2]
 801c3c6:	f886 c000 	strb.w	ip, [r6]
 801c3ca:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c3ce:	fb07 aa02 	mla	sl, r7, r2, sl
 801c3d2:	fb0c bc02 	mla	ip, ip, r2, fp
 801c3d6:	fa1f fa8a 	uxth.w	sl, sl
 801c3da:	fa1f fc8c 	uxth.w	ip, ip
 801c3de:	f10a 0701 	add.w	r7, sl, #1
 801c3e2:	f10c 0b01 	add.w	fp, ip, #1
 801c3e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c3ea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3f2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3f6:	f886 a002 	strb.w	sl, [r6, #2]
 801c3fa:	f886 c001 	strb.w	ip, [r6, #1]
 801c3fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c400:	3603      	adds	r6, #3
 801c402:	f109 39ff 	add.w	r9, r9, #4294967295
 801c406:	4414      	add	r4, r2
 801c408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c40a:	4410      	add	r0, r2
 801c40c:	e6ed      	b.n	801c1ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801c40e:	b007      	add	sp, #28
 801c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c414:	2000bc90 	.word	0x2000bc90

0801c418 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c41c:	b087      	sub	sp, #28
 801c41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c422:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c424:	9205      	str	r2, [sp, #20]
 801c426:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801c42a:	6860      	ldr	r0, [r4, #4]
 801c42c:	9202      	str	r2, [sp, #8]
 801c42e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801c432:	9101      	str	r1, [sp, #4]
 801c434:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801c438:	fb00 2606 	mla	r6, r0, r6, r2
 801c43c:	6822      	ldr	r2, [r4, #0]
 801c43e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c442:	4416      	add	r6, r2
 801c444:	f108 0201 	add.w	r2, r8, #1
 801c448:	f022 0201 	bic.w	r2, r2, #1
 801c44c:	9203      	str	r2, [sp, #12]
 801c44e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c450:	6812      	ldr	r2, [r2, #0]
 801c452:	9204      	str	r2, [sp, #16]
 801c454:	9a01      	ldr	r2, [sp, #4]
 801c456:	2a00      	cmp	r2, #0
 801c458:	dc03      	bgt.n	801c462 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c45a:	9a05      	ldr	r2, [sp, #20]
 801c45c:	2a00      	cmp	r2, #0
 801c45e:	f340 813a 	ble.w	801c6d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801c462:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c464:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801c468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c46a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c46e:	2b00      	cmp	r3, #0
 801c470:	dd0f      	ble.n	801c492 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c472:	142a      	asrs	r2, r5, #16
 801c474:	d406      	bmi.n	801c484 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c476:	4590      	cmp	r8, r2
 801c478:	dd04      	ble.n	801c484 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c47a:	1422      	asrs	r2, r4, #16
 801c47c:	d402      	bmi.n	801c484 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c47e:	9802      	ldr	r0, [sp, #8]
 801c480:	4282      	cmp	r2, r0
 801c482:	db07      	blt.n	801c494 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c484:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c486:	3b01      	subs	r3, #1
 801c488:	3603      	adds	r6, #3
 801c48a:	4415      	add	r5, r2
 801c48c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c48e:	4414      	add	r4, r2
 801c490:	e7ed      	b.n	801c46e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c492:	d073      	beq.n	801c57c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801c494:	1e5a      	subs	r2, r3, #1
 801c496:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c498:	fb00 5002 	mla	r0, r0, r2, r5
 801c49c:	1400      	asrs	r0, r0, #16
 801c49e:	d464      	bmi.n	801c56a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4a0:	4580      	cmp	r8, r0
 801c4a2:	dd62      	ble.n	801c56a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c4a6:	fb00 4202 	mla	r2, r0, r2, r4
 801c4aa:	1412      	asrs	r2, r2, #16
 801c4ac:	d45d      	bmi.n	801c56a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4ae:	9802      	ldr	r0, [sp, #8]
 801c4b0:	4282      	cmp	r2, r0
 801c4b2:	da5a      	bge.n	801c56a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4b4:	1cf0      	adds	r0, r6, #3
 801c4b6:	469a      	mov	sl, r3
 801c4b8:	f1ba 0f00 	cmp.w	sl, #0
 801c4bc:	dd59      	ble.n	801c572 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801c4be:	142a      	asrs	r2, r5, #16
 801c4c0:	9903      	ldr	r1, [sp, #12]
 801c4c2:	1427      	asrs	r7, r4, #16
 801c4c4:	fb01 2707 	mla	r7, r1, r7, r2
 801c4c8:	9904      	ldr	r1, [sp, #16]
 801c4ca:	087a      	lsrs	r2, r7, #1
 801c4cc:	5c8a      	ldrb	r2, [r1, r2]
 801c4ce:	07f9      	lsls	r1, r7, #31
 801c4d0:	bf54      	ite	pl
 801c4d2:	f002 020f 	andpl.w	r2, r2, #15
 801c4d6:	1112      	asrmi	r2, r2, #4
 801c4d8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c4dc:	b2d2      	uxtb	r2, r2
 801c4de:	2a00      	cmp	r2, #0
 801c4e0:	d03b      	beq.n	801c55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4e2:	497e      	ldr	r1, [pc, #504]	; (801c6dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801c4e4:	2aff      	cmp	r2, #255	; 0xff
 801c4e6:	680f      	ldr	r7, [r1, #0]
 801c4e8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c4ec:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c4f0:	b2ff      	uxtb	r7, r7
 801c4f2:	f000 80e9 	beq.w	801c6c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c4f6:	fa1f fe82 	uxth.w	lr, r2
 801c4fa:	43d2      	mvns	r2, r2
 801c4fc:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801c500:	fb17 f70e 	smulbb	r7, r7, lr
 801c504:	b2d2      	uxtb	r2, r2
 801c506:	fb19 f90e 	smulbb	r9, r9, lr
 801c50a:	fb0c 7702 	mla	r7, ip, r2, r7
 801c50e:	fb1b fe0e 	smulbb	lr, fp, lr
 801c512:	b2bf      	uxth	r7, r7
 801c514:	f107 0c01 	add.w	ip, r7, #1
 801c518:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c51c:	123f      	asrs	r7, r7, #8
 801c51e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c522:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c526:	fb07 9902 	mla	r9, r7, r2, r9
 801c52a:	fa1f f989 	uxth.w	r9, r9
 801c52e:	f109 0701 	add.w	r7, r9, #1
 801c532:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c536:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c53a:	fb07 ee02 	mla	lr, r7, r2, lr
 801c53e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c542:	fa1f fe8e 	uxth.w	lr, lr
 801c546:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c54a:	f10e 0201 	add.w	r2, lr, #1
 801c54e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c552:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c556:	f800 ec01 	strb.w	lr, [r0, #-1]
 801c55a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c55c:	3003      	adds	r0, #3
 801c55e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c562:	4415      	add	r5, r2
 801c564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c566:	4414      	add	r4, r2
 801c568:	e7a6      	b.n	801c4b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c56a:	2700      	movs	r7, #0
 801c56c:	1bda      	subs	r2, r3, r7
 801c56e:	2a00      	cmp	r2, #0
 801c570:	dc40      	bgt.n	801c5f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c572:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c57a:	441e      	add	r6, r3
 801c57c:	9b01      	ldr	r3, [sp, #4]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	f340 80a9 	ble.w	801c6d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801c584:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c58a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c58e:	eeb0 6a62 	vmov.f32	s12, s5
 801c592:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c596:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c59a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c59e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c5a2:	eeb0 6a43 	vmov.f32	s12, s6
 801c5a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5aa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c5ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5c6:	ee12 2a90 	vmov	r2, s5
 801c5ca:	eef0 2a47 	vmov.f32	s5, s14
 801c5ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5d2:	ee13 2a10 	vmov	r2, s6
 801c5d6:	9313      	str	r3, [sp, #76]	; 0x4c
 801c5d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5da:	eeb0 3a67 	vmov.f32	s6, s15
 801c5de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5e2:	9314      	str	r3, [sp, #80]	; 0x50
 801c5e4:	9b01      	ldr	r3, [sp, #4]
 801c5e6:	9a05      	ldr	r2, [sp, #20]
 801c5e8:	3b01      	subs	r3, #1
 801c5ea:	9301      	str	r3, [sp, #4]
 801c5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5ee:	bf08      	it	eq
 801c5f0:	4613      	moveq	r3, r2
 801c5f2:	e72f      	b.n	801c454 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c5f4:	142a      	asrs	r2, r5, #16
 801c5f6:	d458      	bmi.n	801c6aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c5f8:	4590      	cmp	r8, r2
 801c5fa:	dd56      	ble.n	801c6aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c5fc:	1420      	asrs	r0, r4, #16
 801c5fe:	d454      	bmi.n	801c6aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c600:	9902      	ldr	r1, [sp, #8]
 801c602:	4288      	cmp	r0, r1
 801c604:	da51      	bge.n	801c6aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c606:	9903      	ldr	r1, [sp, #12]
 801c608:	fb00 2001 	mla	r0, r0, r1, r2
 801c60c:	9904      	ldr	r1, [sp, #16]
 801c60e:	0842      	lsrs	r2, r0, #1
 801c610:	07c0      	lsls	r0, r0, #31
 801c612:	5c8a      	ldrb	r2, [r1, r2]
 801c614:	bf54      	ite	pl
 801c616:	f002 020f 	andpl.w	r2, r2, #15
 801c61a:	1112      	asrmi	r2, r2, #4
 801c61c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c620:	b2d2      	uxtb	r2, r2
 801c622:	2a00      	cmp	r2, #0
 801c624:	d041      	beq.n	801c6aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c626:	492d      	ldr	r1, [pc, #180]	; (801c6dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801c628:	2aff      	cmp	r2, #255	; 0xff
 801c62a:	6808      	ldr	r0, [r1, #0]
 801c62c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c630:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c634:	fa5f fc80 	uxtb.w	ip, r0
 801c638:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c63c:	d03b      	beq.n	801c6b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801c63e:	fa1f f982 	uxth.w	r9, r2
 801c642:	4438      	add	r0, r7
 801c644:	43d2      	mvns	r2, r2
 801c646:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c64a:	fb1c fc09 	smulbb	ip, ip, r9
 801c64e:	fb1a fa09 	smulbb	sl, sl, r9
 801c652:	b2d2      	uxtb	r2, r2
 801c654:	fb1b f909 	smulbb	r9, fp, r9
 801c658:	fb0e cc02 	mla	ip, lr, r2, ip
 801c65c:	fa1f fc8c 	uxth.w	ip, ip
 801c660:	f10c 0e01 	add.w	lr, ip, #1
 801c664:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801c668:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c66c:	f806 c000 	strb.w	ip, [r6, r0]
 801c670:	4430      	add	r0, r6
 801c672:	f890 c001 	ldrb.w	ip, [r0, #1]
 801c676:	fb0c aa02 	mla	sl, ip, r2, sl
 801c67a:	fa1f fa8a 	uxth.w	sl, sl
 801c67e:	f10a 0c01 	add.w	ip, sl, #1
 801c682:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c686:	f890 c002 	ldrb.w	ip, [r0, #2]
 801c68a:	fb0c 9902 	mla	r9, ip, r2, r9
 801c68e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c692:	fa1f f989 	uxth.w	r9, r9
 801c696:	f880 a001 	strb.w	sl, [r0, #1]
 801c69a:	f109 0201 	add.w	r2, r9, #1
 801c69e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c6a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6a6:	f880 9002 	strb.w	r9, [r0, #2]
 801c6aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c6ac:	3701      	adds	r7, #1
 801c6ae:	4415      	add	r5, r2
 801c6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6b2:	4414      	add	r4, r2
 801c6b4:	e75a      	b.n	801c56c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c6b6:	4438      	add	r0, r7
 801c6b8:	f806 c000 	strb.w	ip, [r6, r0]
 801c6bc:	4430      	add	r0, r6
 801c6be:	f880 a001 	strb.w	sl, [r0, #1]
 801c6c2:	f880 b002 	strb.w	fp, [r0, #2]
 801c6c6:	e7f0      	b.n	801c6aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c6c8:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c6cc:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c6d0:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c6d4:	e741      	b.n	801c55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c6d6:	b007      	add	sp, #28
 801c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6dc:	2000bc90 	.word	0x2000bc90

0801c6e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c6e0:	4770      	bx	lr

0801c6e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c6e2:	4770      	bx	lr

0801c6e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c6e4:	4770      	bx	lr

0801c6e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c6e6:	4770      	bx	lr

0801c6e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c6e8:	4770      	bx	lr

0801c6ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c6ea:	4770      	bx	lr

0801c6ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c6ec:	4770      	bx	lr

0801c6ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c6ee:	4770      	bx	lr

0801c6f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c6f0:	4770      	bx	lr

0801c6f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c6f2:	4770      	bx	lr

0801c6f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c6f4:	4770      	bx	lr

0801c6f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c6f6:	4770      	bx	lr

0801c6f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c6f8:	4770      	bx	lr

0801c6fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c6fa:	4770      	bx	lr

0801c6fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c6fc:	4770      	bx	lr

0801c6fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c6fe:	4770      	bx	lr

0801c700 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c700:	4770      	bx	lr

0801c702 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c702:	4770      	bx	lr

0801c704 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c704:	4770      	bx	lr

0801c706 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c706:	4770      	bx	lr

0801c708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c708:	2bff      	cmp	r3, #255	; 0xff
 801c70a:	b508      	push	{r3, lr}
 801c70c:	d04f      	beq.n	801c7ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801c70e:	2a2c      	cmp	r2, #44	; 0x2c
 801c710:	d032      	beq.n	801c778 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801c712:	d80f      	bhi.n	801c734 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801c714:	2a08      	cmp	r2, #8
 801c716:	d046      	beq.n	801c7a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c718:	d805      	bhi.n	801c726 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801c71a:	2a04      	cmp	r2, #4
 801c71c:	d041      	beq.n	801c7a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c71e:	2a05      	cmp	r2, #5
 801c720:	d03d      	beq.n	801c79e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801c722:	2000      	movs	r0, #0
 801c724:	e027      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c726:	2a0a      	cmp	r2, #10
 801c728:	d03d      	beq.n	801c7a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c72a:	d301      	bcc.n	801c730 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801c72c:	2a0b      	cmp	r2, #11
 801c72e:	d1f8      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c730:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801c732:	e020      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c734:	2a30      	cmp	r2, #48	; 0x30
 801c736:	d038      	beq.n	801c7aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c738:	d808      	bhi.n	801c74c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801c73a:	2a2e      	cmp	r2, #46	; 0x2e
 801c73c:	684b      	ldr	r3, [r1, #4]
 801c73e:	d029      	beq.n	801c794 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801c740:	d90b      	bls.n	801c75a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801c742:	781b      	ldrb	r3, [r3, #0]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d1ec      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c748:	6a00      	ldr	r0, [r0, #32]
 801c74a:	e014      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c74c:	2a32      	cmp	r2, #50	; 0x32
 801c74e:	d02c      	beq.n	801c7aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c750:	d301      	bcc.n	801c756 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801c752:	2a33      	cmp	r2, #51	; 0x33
 801c754:	d1e5      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c756:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801c758:	e00d      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c75a:	781b      	ldrb	r3, [r3, #0]
 801c75c:	2b01      	cmp	r3, #1
 801c75e:	d009      	beq.n	801c774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801c760:	d3f2      	bcc.n	801c748 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801c762:	2b02      	cmp	r3, #2
 801c764:	d1dd      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c766:	4b39      	ldr	r3, [pc, #228]	; (801c84c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c768:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801c76c:	4a38      	ldr	r2, [pc, #224]	; (801c850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c76e:	4839      	ldr	r0, [pc, #228]	; (801c854 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801c770:	f007 ff3e 	bl	80245f0 <__assert_func>
 801c774:	6900      	ldr	r0, [r0, #16]
 801c776:	bd08      	pop	{r3, pc}
 801c778:	684b      	ldr	r3, [r1, #4]
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	2b01      	cmp	r3, #1
 801c77e:	d007      	beq.n	801c790 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801c780:	d30b      	bcc.n	801c79a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801c782:	2b02      	cmp	r3, #2
 801c784:	d1cd      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c786:	4b31      	ldr	r3, [pc, #196]	; (801c84c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c788:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801c78c:	4a30      	ldr	r2, [pc, #192]	; (801c850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c78e:	e7ee      	b.n	801c76e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c790:	6880      	ldr	r0, [r0, #8]
 801c792:	e7f0      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c794:	781b      	ldrb	r3, [r3, #0]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d1c3      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c79a:	6980      	ldr	r0, [r0, #24]
 801c79c:	e7eb      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c79e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c7a0:	e7e9      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c7a4:	e7e7      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c7a8:	e7e5      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c7ac:	e7e3      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7ae:	2a2c      	cmp	r2, #44	; 0x2c
 801c7b0:	d030      	beq.n	801c814 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801c7b2:	d80f      	bhi.n	801c7d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801c7b4:	2a08      	cmp	r2, #8
 801c7b6:	d044      	beq.n	801c842 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c7b8:	d805      	bhi.n	801c7c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801c7ba:	2a04      	cmp	r2, #4
 801c7bc:	d03f      	beq.n	801c83e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801c7be:	2a05      	cmp	r2, #5
 801c7c0:	d1af      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c7c4:	e7d7      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7c6:	2a0a      	cmp	r2, #10
 801c7c8:	d03b      	beq.n	801c842 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c7ca:	d301      	bcc.n	801c7d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801c7cc:	2a0b      	cmp	r2, #11
 801c7ce:	d1a8      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c7d2:	e7d0      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7d4:	2a30      	cmp	r2, #48	; 0x30
 801c7d6:	d036      	beq.n	801c846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c7d8:	d808      	bhi.n	801c7ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801c7da:	2a2e      	cmp	r2, #46	; 0x2e
 801c7dc:	684b      	ldr	r3, [r1, #4]
 801c7de:	d028      	beq.n	801c832 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801c7e0:	d90b      	bls.n	801c7fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801c7e2:	781b      	ldrb	r3, [r3, #0]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d19c      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c7ea:	e7c4      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7ec:	2a32      	cmp	r2, #50	; 0x32
 801c7ee:	d02a      	beq.n	801c846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c7f0:	d301      	bcc.n	801c7f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801c7f2:	2a33      	cmp	r2, #51	; 0x33
 801c7f4:	d195      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c7f8:	e7bd      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7fa:	781b      	ldrb	r3, [r3, #0]
 801c7fc:	2b01      	cmp	r3, #1
 801c7fe:	d007      	beq.n	801c810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801c800:	d3f2      	bcc.n	801c7e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801c802:	2b02      	cmp	r3, #2
 801c804:	d18d      	bne.n	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c806:	4b11      	ldr	r3, [pc, #68]	; (801c84c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c808:	f240 31e1 	movw	r1, #993	; 0x3e1
 801c80c:	4a10      	ldr	r2, [pc, #64]	; (801c850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c80e:	e7ae      	b.n	801c76e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c810:	6940      	ldr	r0, [r0, #20]
 801c812:	e7b0      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c814:	684b      	ldr	r3, [r1, #4]
 801c816:	781b      	ldrb	r3, [r3, #0]
 801c818:	2b01      	cmp	r3, #1
 801c81a:	d008      	beq.n	801c82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801c81c:	d30d      	bcc.n	801c83a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801c81e:	2b02      	cmp	r3, #2
 801c820:	f47f af7f 	bne.w	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c824:	4b09      	ldr	r3, [pc, #36]	; (801c84c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c826:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801c82a:	4a09      	ldr	r2, [pc, #36]	; (801c850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c82c:	e79f      	b.n	801c76e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c82e:	68c0      	ldr	r0, [r0, #12]
 801c830:	e7a1      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c832:	781b      	ldrb	r3, [r3, #0]
 801c834:	2b00      	cmp	r3, #0
 801c836:	f47f af74 	bne.w	801c722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c83a:	69c0      	ldr	r0, [r0, #28]
 801c83c:	e79b      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c83e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c840:	e799      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c842:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c844:	e797      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c846:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c848:	e795      	b.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c84a:	bf00      	nop
 801c84c:	08028cf3 	.word	0x08028cf3
 801c850:	080294a7 	.word	0x080294a7
 801c854:	08028d3f 	.word	0x08028d3f

0801c858 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801c858:	b508      	push	{r3, lr}
 801c85a:	4b06      	ldr	r3, [pc, #24]	; (801c874 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801c85c:	8818      	ldrh	r0, [r3, #0]
 801c85e:	b928      	cbnz	r0, 801c86c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801c860:	4b05      	ldr	r3, [pc, #20]	; (801c878 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801c862:	21d7      	movs	r1, #215	; 0xd7
 801c864:	4a05      	ldr	r2, [pc, #20]	; (801c87c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801c866:	4806      	ldr	r0, [pc, #24]	; (801c880 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801c868:	f007 fec2 	bl	80245f0 <__assert_func>
 801c86c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c870:	b280      	uxth	r0, r0
 801c872:	bd08      	pop	{r3, pc}
 801c874:	2000bc62 	.word	0x2000bc62
 801c878:	08028f8e 	.word	0x08028f8e
 801c87c:	0802946c 	.word	0x0802946c
 801c880:	08028fd0 	.word	0x08028fd0

0801c884 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c888:	4616      	mov	r6, r2
 801c88a:	b087      	sub	sp, #28
 801c88c:	461f      	mov	r7, r3
 801c88e:	b33b      	cbz	r3, 801c8e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c890:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c894:	b323      	cbz	r3, 801c8e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c896:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c89a:	b30b      	cbz	r3, 801c8e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c89c:	6808      	ldr	r0, [r1, #0]
 801c89e:	ab04      	add	r3, sp, #16
 801c8a0:	6849      	ldr	r1, [r1, #4]
 801c8a2:	4c5a      	ldr	r4, [pc, #360]	; (801ca0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801c8a4:	c303      	stmia	r3!, {r0, r1}
 801c8a6:	a804      	add	r0, sp, #16
 801c8a8:	f7fb fd6e 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8ac:	6820      	ldr	r0, [r4, #0]
 801c8ae:	6803      	ldr	r3, [r0, #0]
 801c8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8b2:	4798      	blx	r3
 801c8b4:	2fff      	cmp	r7, #255	; 0xff
 801c8b6:	4623      	mov	r3, r4
 801c8b8:	d015      	beq.n	801c8e6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c8ba:	f010 0f08 	tst.w	r0, #8
 801c8be:	d015      	beq.n	801c8ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801c8c0:	6818      	ldr	r0, [r3, #0]
 801c8c2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c8c6:	6801      	ldr	r1, [r0, #0]
 801c8c8:	9401      	str	r4, [sp, #4]
 801c8ca:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c8ce:	9702      	str	r7, [sp, #8]
 801c8d0:	9400      	str	r4, [sp, #0]
 801c8d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c8d6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801c8d8:	4631      	mov	r1, r6
 801c8da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c8de:	47a0      	blx	r4
 801c8e0:	b007      	add	sp, #28
 801c8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8e6:	f010 0f02 	tst.w	r0, #2
 801c8ea:	e7e8      	b.n	801c8be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801c8ec:	6818      	ldr	r0, [r3, #0]
 801c8ee:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801c8f2:	6803      	ldr	r3, [r0, #0]
 801c8f4:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801c8f8:	6a1b      	ldr	r3, [r3, #32]
 801c8fa:	4798      	blx	r3
 801c8fc:	4944      	ldr	r1, [pc, #272]	; (801ca10 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801c8fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c902:	2fff      	cmp	r7, #255	; 0xff
 801c904:	f8b1 c000 	ldrh.w	ip, [r1]
 801c908:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801c90c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c910:	4688      	mov	r8, r1
 801c912:	fb0c 2303 	mla	r3, ip, r3, r2
 801c916:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801c91a:	b2f2      	uxtb	r2, r6
 801c91c:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801c920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c924:	4418      	add	r0, r3
 801c926:	d112      	bne.n	801c94e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801c928:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c92c:	2100      	movs	r1, #0
 801c92e:	42a9      	cmp	r1, r5
 801c930:	da66      	bge.n	801ca00 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c932:	4603      	mov	r3, r0
 801c934:	2700      	movs	r7, #0
 801c936:	42a7      	cmp	r7, r4
 801c938:	f103 0303 	add.w	r3, r3, #3
 801c93c:	da57      	bge.n	801c9ee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801c93e:	f803 2c03 	strb.w	r2, [r3, #-3]
 801c942:	3701      	adds	r7, #1
 801c944:	f803 ec02 	strb.w	lr, [r3, #-2]
 801c948:	f803 cc01 	strb.w	ip, [r3, #-1]
 801c94c:	e7f3      	b.n	801c936 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801c94e:	b2bb      	uxth	r3, r7
 801c950:	f04f 0800 	mov.w	r8, #0
 801c954:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c958:	fb0c fc03 	mul.w	ip, ip, r3
 801c95c:	fb0e fe03 	mul.w	lr, lr, r3
 801c960:	435a      	muls	r2, r3
 801c962:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801c966:	460f      	mov	r7, r1
 801c968:	b29b      	uxth	r3, r3
 801c96a:	45a8      	cmp	r8, r5
 801c96c:	da48      	bge.n	801ca00 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c96e:	4601      	mov	r1, r0
 801c970:	f04f 0a00 	mov.w	sl, #0
 801c974:	45a2      	cmp	sl, r4
 801c976:	f101 0103 	add.w	r1, r1, #3
 801c97a:	da2f      	bge.n	801c9dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801c97c:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801c980:	f10a 0a01 	add.w	sl, sl, #1
 801c984:	fb19 f903 	smulbb	r9, r9, r3
 801c988:	4491      	add	r9, r2
 801c98a:	fa1f f989 	uxth.w	r9, r9
 801c98e:	f109 0b01 	add.w	fp, r9, #1
 801c992:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c996:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c99a:	f801 9c03 	strb.w	r9, [r1, #-3]
 801c99e:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801c9a2:	fb19 f903 	smulbb	r9, r9, r3
 801c9a6:	44f1      	add	r9, lr
 801c9a8:	fa1f f989 	uxth.w	r9, r9
 801c9ac:	f109 0b01 	add.w	fp, r9, #1
 801c9b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9b8:	f801 9c02 	strb.w	r9, [r1, #-2]
 801c9bc:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801c9c0:	fb19 f903 	smulbb	r9, r9, r3
 801c9c4:	44e1      	add	r9, ip
 801c9c6:	fa1f f989 	uxth.w	r9, r9
 801c9ca:	f109 0b01 	add.w	fp, r9, #1
 801c9ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9d6:	f801 9c01 	strb.w	r9, [r1, #-1]
 801c9da:	e7cb      	b.n	801c974 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801c9dc:	8839      	ldrh	r1, [r7, #0]
 801c9de:	f108 0801 	add.w	r8, r8, #1
 801c9e2:	1b09      	subs	r1, r1, r4
 801c9e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c9e8:	4431      	add	r1, r6
 801c9ea:	4408      	add	r0, r1
 801c9ec:	e7bd      	b.n	801c96a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801c9ee:	f8b8 3000 	ldrh.w	r3, [r8]
 801c9f2:	3101      	adds	r1, #1
 801c9f4:	1b1b      	subs	r3, r3, r4
 801c9f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9fa:	4433      	add	r3, r6
 801c9fc:	4418      	add	r0, r3
 801c9fe:	e796      	b.n	801c92e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801ca00:	4b02      	ldr	r3, [pc, #8]	; (801ca0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801ca02:	6818      	ldr	r0, [r3, #0]
 801ca04:	6803      	ldr	r3, [r0, #0]
 801ca06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca08:	4798      	blx	r3
 801ca0a:	e769      	b.n	801c8e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ca0c:	2000bc68 	.word	0x2000bc68
 801ca10:	2000bc62 	.word	0x2000bc62

0801ca14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca18:	b08d      	sub	sp, #52	; 0x34
 801ca1a:	460c      	mov	r4, r1
 801ca1c:	4617      	mov	r7, r2
 801ca1e:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801ca22:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801ca26:	2e00      	cmp	r6, #0
 801ca28:	d04a      	beq.n	801cac0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ca2a:	6810      	ldr	r0, [r2, #0]
 801ca2c:	ad08      	add	r5, sp, #32
 801ca2e:	6851      	ldr	r1, [r2, #4]
 801ca30:	c503      	stmia	r5!, {r0, r1}
 801ca32:	6818      	ldr	r0, [r3, #0]
 801ca34:	ad0a      	add	r5, sp, #40	; 0x28
 801ca36:	6859      	ldr	r1, [r3, #4]
 801ca38:	c503      	stmia	r5!, {r0, r1}
 801ca3a:	a808      	add	r0, sp, #32
 801ca3c:	f7fb fca4 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca40:	4639      	mov	r1, r7
 801ca42:	a80a      	add	r0, sp, #40	; 0x28
 801ca44:	4f59      	ldr	r7, [pc, #356]	; (801cbac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801ca46:	f7fb fc87 	bl	8018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca4a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ca4e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ca52:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ca56:	6838      	ldr	r0, [r7, #0]
 801ca58:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ca5c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801ca60:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ca64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ca68:	440c      	add	r4, r1
 801ca6a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ca6e:	440a      	add	r2, r1
 801ca70:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ca74:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ca78:	4413      	add	r3, r2
 801ca7a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ca7e:	6803      	ldr	r3, [r0, #0]
 801ca80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca82:	4798      	blx	r3
 801ca84:	2eff      	cmp	r6, #255	; 0xff
 801ca86:	f000 8089 	beq.w	801cb9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801ca8a:	0743      	lsls	r3, r0, #29
 801ca8c:	d405      	bmi.n	801ca9a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801ca8e:	f1b9 0f00 	cmp.w	r9, #0
 801ca92:	d018      	beq.n	801cac6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ca94:	f010 0f10 	tst.w	r0, #16
 801ca98:	d015      	beq.n	801cac6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ca9a:	6838      	ldr	r0, [r7, #0]
 801ca9c:	b2ad      	uxth	r5, r5
 801ca9e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801caa2:	6801      	ldr	r1, [r0, #0]
 801caa4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801caa8:	9500      	str	r5, [sp, #0]
 801caaa:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801caae:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801cab2:	9602      	str	r6, [sp, #8]
 801cab4:	fa1f f688 	uxth.w	r6, r8
 801cab8:	9601      	str	r6, [sp, #4]
 801caba:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801cabc:	4621      	mov	r1, r4
 801cabe:	47a8      	blx	r5
 801cac0:	b00d      	add	sp, #52	; 0x34
 801cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac6:	6838      	ldr	r0, [r7, #0]
 801cac8:	6803      	ldr	r3, [r0, #0]
 801caca:	6a1b      	ldr	r3, [r3, #32]
 801cacc:	4798      	blx	r3
 801cace:	4a38      	ldr	r2, [pc, #224]	; (801cbb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801cad0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801cad4:	2eff      	cmp	r6, #255	; 0xff
 801cad6:	8813      	ldrh	r3, [r2, #0]
 801cad8:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801cadc:	fb0c 1303 	mla	r3, ip, r3, r1
 801cae0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801cae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cae8:	4418      	add	r0, r3
 801caea:	d032      	beq.n	801cb52 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801caec:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801caf0:	f04f 0c00 	mov.w	ip, #0
 801caf4:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801caf8:	9306      	str	r3, [sp, #24]
 801cafa:	45c4      	cmp	ip, r8
 801cafc:	da49      	bge.n	801cb92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801cafe:	4686      	mov	lr, r0
 801cb00:	46a1      	mov	r9, r4
 801cb02:	eba9 0304 	sub.w	r3, r9, r4
 801cb06:	428b      	cmp	r3, r1
 801cb08:	da13      	bge.n	801cb32 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801cb0a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801cb0e:	f89e b000 	ldrb.w	fp, [lr]
 801cb12:	9307      	str	r3, [sp, #28]
 801cb14:	9b06      	ldr	r3, [sp, #24]
 801cb16:	fb1b fb03 	smulbb	fp, fp, r3
 801cb1a:	9b07      	ldr	r3, [sp, #28]
 801cb1c:	fb03 b306 	mla	r3, r3, r6, fp
 801cb20:	b29b      	uxth	r3, r3
 801cb22:	f103 0b01 	add.w	fp, r3, #1
 801cb26:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801cb2a:	121b      	asrs	r3, r3, #8
 801cb2c:	f80e 3b01 	strb.w	r3, [lr], #1
 801cb30:	e7e7      	b.n	801cb02 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801cb32:	8813      	ldrh	r3, [r2, #0]
 801cb34:	f10c 0c01 	add.w	ip, ip, #1
 801cb38:	1b5b      	subs	r3, r3, r5
 801cb3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb3e:	4453      	add	r3, sl
 801cb40:	4418      	add	r0, r3
 801cb42:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801cb46:	1b5b      	subs	r3, r3, r5
 801cb48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb4c:	4453      	add	r3, sl
 801cb4e:	441c      	add	r4, r3
 801cb50:	e7d3      	b.n	801cafa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801cb52:	2600      	movs	r6, #0
 801cb54:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801cb58:	4546      	cmp	r6, r8
 801cb5a:	da1a      	bge.n	801cb92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801cb5c:	f100 3eff 	add.w	lr, r0, #4294967295
 801cb60:	4623      	mov	r3, r4
 801cb62:	eba3 0904 	sub.w	r9, r3, r4
 801cb66:	4589      	cmp	r9, r1
 801cb68:	da04      	bge.n	801cb74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801cb6a:	f813 9b01 	ldrb.w	r9, [r3], #1
 801cb6e:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801cb72:	e7f6      	b.n	801cb62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801cb74:	8813      	ldrh	r3, [r2, #0]
 801cb76:	3601      	adds	r6, #1
 801cb78:	1b5b      	subs	r3, r3, r5
 801cb7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb7e:	4463      	add	r3, ip
 801cb80:	4418      	add	r0, r3
 801cb82:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801cb86:	1b5b      	subs	r3, r3, r5
 801cb88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb8c:	4463      	add	r3, ip
 801cb8e:	441c      	add	r4, r3
 801cb90:	e7e2      	b.n	801cb58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801cb92:	6838      	ldr	r0, [r7, #0]
 801cb94:	6803      	ldr	r3, [r0, #0]
 801cb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb98:	4798      	blx	r3
 801cb9a:	e791      	b.n	801cac0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801cb9c:	f1b9 0f00 	cmp.w	r9, #0
 801cba0:	f47f af78 	bne.w	801ca94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801cba4:	f010 0f01 	tst.w	r0, #1
 801cba8:	e776      	b.n	801ca98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801cbaa:	bf00      	nop
 801cbac:	2000bc68 	.word	0x2000bc68
 801cbb0:	2000bc62 	.word	0x2000bc62

0801cbb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cbb4:	b510      	push	{r4, lr}
 801cbb6:	4604      	mov	r4, r0
 801cbb8:	2104      	movs	r1, #4
 801cbba:	f007 fcee 	bl	802459a <_ZdlPvj>
 801cbbe:	4620      	mov	r0, r4
 801cbc0:	bd10      	pop	{r4, pc}

0801cbc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cbc2:	b510      	push	{r4, lr}
 801cbc4:	4604      	mov	r4, r0
 801cbc6:	2104      	movs	r1, #4
 801cbc8:	f007 fce7 	bl	802459a <_ZdlPvj>
 801cbcc:	4620      	mov	r0, r4
 801cbce:	bd10      	pop	{r4, pc}

0801cbd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cbd0:	b510      	push	{r4, lr}
 801cbd2:	4604      	mov	r4, r0
 801cbd4:	2104      	movs	r1, #4
 801cbd6:	f007 fce0 	bl	802459a <_ZdlPvj>
 801cbda:	4620      	mov	r0, r4
 801cbdc:	bd10      	pop	{r4, pc}

0801cbde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cbde:	b510      	push	{r4, lr}
 801cbe0:	4604      	mov	r4, r0
 801cbe2:	2104      	movs	r1, #4
 801cbe4:	f007 fcd9 	bl	802459a <_ZdlPvj>
 801cbe8:	4620      	mov	r0, r4
 801cbea:	bd10      	pop	{r4, pc}

0801cbec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cbec:	b510      	push	{r4, lr}
 801cbee:	4604      	mov	r4, r0
 801cbf0:	2104      	movs	r1, #4
 801cbf2:	f007 fcd2 	bl	802459a <_ZdlPvj>
 801cbf6:	4620      	mov	r0, r4
 801cbf8:	bd10      	pop	{r4, pc}

0801cbfa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cbfa:	b510      	push	{r4, lr}
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	2104      	movs	r1, #4
 801cc00:	f007 fccb 	bl	802459a <_ZdlPvj>
 801cc04:	4620      	mov	r0, r4
 801cc06:	bd10      	pop	{r4, pc}

0801cc08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc08:	b510      	push	{r4, lr}
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	2104      	movs	r1, #4
 801cc0e:	f007 fcc4 	bl	802459a <_ZdlPvj>
 801cc12:	4620      	mov	r0, r4
 801cc14:	bd10      	pop	{r4, pc}

0801cc16 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cc16:	b510      	push	{r4, lr}
 801cc18:	4604      	mov	r4, r0
 801cc1a:	2104      	movs	r1, #4
 801cc1c:	f007 fcbd 	bl	802459a <_ZdlPvj>
 801cc20:	4620      	mov	r0, r4
 801cc22:	bd10      	pop	{r4, pc}

0801cc24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cc24:	b510      	push	{r4, lr}
 801cc26:	4604      	mov	r4, r0
 801cc28:	2104      	movs	r1, #4
 801cc2a:	f007 fcb6 	bl	802459a <_ZdlPvj>
 801cc2e:	4620      	mov	r0, r4
 801cc30:	bd10      	pop	{r4, pc}

0801cc32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cc32:	b510      	push	{r4, lr}
 801cc34:	4604      	mov	r4, r0
 801cc36:	2104      	movs	r1, #4
 801cc38:	f007 fcaf 	bl	802459a <_ZdlPvj>
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	bd10      	pop	{r4, pc}

0801cc40 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cc40:	b510      	push	{r4, lr}
 801cc42:	4604      	mov	r4, r0
 801cc44:	2104      	movs	r1, #4
 801cc46:	f007 fca8 	bl	802459a <_ZdlPvj>
 801cc4a:	4620      	mov	r0, r4
 801cc4c:	bd10      	pop	{r4, pc}

0801cc4e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cc4e:	b510      	push	{r4, lr}
 801cc50:	4604      	mov	r4, r0
 801cc52:	2104      	movs	r1, #4
 801cc54:	f007 fca1 	bl	802459a <_ZdlPvj>
 801cc58:	4620      	mov	r0, r4
 801cc5a:	bd10      	pop	{r4, pc}

0801cc5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cc5c:	b510      	push	{r4, lr}
 801cc5e:	4604      	mov	r4, r0
 801cc60:	2104      	movs	r1, #4
 801cc62:	f007 fc9a 	bl	802459a <_ZdlPvj>
 801cc66:	4620      	mov	r0, r4
 801cc68:	bd10      	pop	{r4, pc}

0801cc6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cc6a:	b510      	push	{r4, lr}
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	2104      	movs	r1, #4
 801cc70:	f007 fc93 	bl	802459a <_ZdlPvj>
 801cc74:	4620      	mov	r0, r4
 801cc76:	bd10      	pop	{r4, pc}

0801cc78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc78:	b510      	push	{r4, lr}
 801cc7a:	4604      	mov	r4, r0
 801cc7c:	2104      	movs	r1, #4
 801cc7e:	f007 fc8c 	bl	802459a <_ZdlPvj>
 801cc82:	4620      	mov	r0, r4
 801cc84:	bd10      	pop	{r4, pc}

0801cc86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cc86:	b510      	push	{r4, lr}
 801cc88:	4604      	mov	r4, r0
 801cc8a:	2104      	movs	r1, #4
 801cc8c:	f007 fc85 	bl	802459a <_ZdlPvj>
 801cc90:	4620      	mov	r0, r4
 801cc92:	bd10      	pop	{r4, pc}

0801cc94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801cc94:	b510      	push	{r4, lr}
 801cc96:	4604      	mov	r4, r0
 801cc98:	2104      	movs	r1, #4
 801cc9a:	f007 fc7e 	bl	802459a <_ZdlPvj>
 801cc9e:	4620      	mov	r0, r4
 801cca0:	bd10      	pop	{r4, pc}

0801cca2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801cca2:	b510      	push	{r4, lr}
 801cca4:	4604      	mov	r4, r0
 801cca6:	2104      	movs	r1, #4
 801cca8:	f007 fc77 	bl	802459a <_ZdlPvj>
 801ccac:	4620      	mov	r0, r4
 801ccae:	bd10      	pop	{r4, pc}

0801ccb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ccb0:	b510      	push	{r4, lr}
 801ccb2:	4604      	mov	r4, r0
 801ccb4:	2104      	movs	r1, #4
 801ccb6:	f007 fc70 	bl	802459a <_ZdlPvj>
 801ccba:	4620      	mov	r0, r4
 801ccbc:	bd10      	pop	{r4, pc}

0801ccbe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ccbe:	b510      	push	{r4, lr}
 801ccc0:	4604      	mov	r4, r0
 801ccc2:	2104      	movs	r1, #4
 801ccc4:	f007 fc69 	bl	802459a <_ZdlPvj>
 801ccc8:	4620      	mov	r0, r4
 801ccca:	bd10      	pop	{r4, pc}

0801cccc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccd0:	4d9e      	ldr	r5, [pc, #632]	; (801cf4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801ccd2:	4690      	mov	r8, r2
 801ccd4:	b08f      	sub	sp, #60	; 0x3c
 801ccd6:	4604      	mov	r4, r0
 801ccd8:	682a      	ldr	r2, [r5, #0]
 801ccda:	4689      	mov	r9, r1
 801ccdc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801cce0:	2a02      	cmp	r2, #2
 801cce2:	d106      	bne.n	801ccf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801cce4:	4b9a      	ldr	r3, [pc, #616]	; (801cf50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801cce6:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801ccea:	4a9a      	ldr	r2, [pc, #616]	; (801cf54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ccec:	489a      	ldr	r0, [pc, #616]	; (801cf58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801ccee:	f007 fc7f 	bl	80245f0 <__assert_func>
 801ccf2:	ae0e      	add	r6, sp, #56	; 0x38
 801ccf4:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801ccf8:	4630      	mov	r0, r6
 801ccfa:	f7fe f8b3 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ccfe:	6823      	ldr	r3, [r4, #0]
 801cd00:	4607      	mov	r7, r0
 801cd02:	4620      	mov	r0, r4
 801cd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd06:	4798      	blx	r3
 801cd08:	4287      	cmp	r7, r0
 801cd0a:	d004      	beq.n	801cd16 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801cd0c:	4b93      	ldr	r3, [pc, #588]	; (801cf5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801cd0e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801cd12:	4a90      	ldr	r2, [pc, #576]	; (801cf54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801cd14:	e7ea      	b.n	801ccec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801cd16:	4630      	mov	r0, r6
 801cd18:	f7fe f820 	bl	801ad5c <_ZNK8touchgfx6Bitmap7getDataEv>
 801cd1c:	4607      	mov	r7, r0
 801cd1e:	b920      	cbnz	r0, 801cd2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801cd20:	4b8f      	ldr	r3, [pc, #572]	; (801cf60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801cd22:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801cd26:	4a8b      	ldr	r2, [pc, #556]	; (801cf54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801cd28:	e7e0      	b.n	801ccec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801cd2a:	f8d8 0000 	ldr.w	r0, [r8]
 801cd2e:	ab06      	add	r3, sp, #24
 801cd30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cd34:	f9b8 a000 	ldrsh.w	sl, [r8]
 801cd38:	c303      	stmia	r3!, {r0, r1}
 801cd3a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cd3e:	ab08      	add	r3, sp, #32
 801cd40:	f8d9 0000 	ldr.w	r0, [r9]
 801cd44:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801cd48:	c303      	stmia	r3!, {r0, r1}
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	f7fd fefe 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cd50:	4680      	mov	r8, r0
 801cd52:	4630      	mov	r0, r6
 801cd54:	4e83      	ldr	r6, [pc, #524]	; (801cf64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801cd56:	f7fd ff33 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cd5a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801cd5e:	f10d 0920 	add.w	r9, sp, #32
 801cd62:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801cd66:	a806      	add	r0, sp, #24
 801cd68:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801cd6c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801cd70:	f7fb fb0a 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd74:	4648      	mov	r0, r9
 801cd76:	f7fb fb07 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd7a:	a80a      	add	r0, sp, #40	; 0x28
 801cd7c:	f7fb fb04 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd80:	4b79      	ldr	r3, [pc, #484]	; (801cf68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801cd82:	2100      	movs	r1, #0
 801cd84:	f9b6 2000 	ldrsh.w	r2, [r6]
 801cd88:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd8c:	4648      	mov	r0, r9
 801cd8e:	910c      	str	r1, [sp, #48]	; 0x30
 801cd90:	a90c      	add	r1, sp, #48	; 0x30
 801cd92:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801cd96:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801cd9a:	f7f8 fac9 	bl	8015330 <_ZN8touchgfx4RectaNERKS0_>
 801cd9e:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801cda2:	9602      	str	r6, [sp, #8]
 801cda4:	f1bc 0f00 	cmp.w	ip, #0
 801cda8:	f000 80a4 	beq.w	801cef4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cdac:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801cdb0:	2e00      	cmp	r6, #0
 801cdb2:	f000 809f 	beq.w	801cef4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cdb6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801cdba:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801cdbe:	4288      	cmp	r0, r1
 801cdc0:	db36      	blt.n	801ce30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801cdc2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801cdc6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801cdca:	429a      	cmp	r2, r3
 801cdcc:	db30      	blt.n	801ce30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801cdce:	4460      	add	r0, ip
 801cdd0:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801cdd4:	4461      	add	r1, ip
 801cdd6:	b200      	sxth	r0, r0
 801cdd8:	b209      	sxth	r1, r1
 801cdda:	4288      	cmp	r0, r1
 801cddc:	dc28      	bgt.n	801ce30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801cdde:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801cde2:	4432      	add	r2, r6
 801cde4:	440b      	add	r3, r1
 801cde6:	b212      	sxth	r2, r2
 801cde8:	b21b      	sxth	r3, r3
 801cdea:	429a      	cmp	r2, r3
 801cdec:	dc20      	bgt.n	801ce30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801cdee:	6823      	ldr	r3, [r4, #0]
 801cdf0:	4620      	mov	r0, r4
 801cdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdf4:	4798      	blx	r3
 801cdf6:	4682      	mov	sl, r0
 801cdf8:	6828      	ldr	r0, [r5, #0]
 801cdfa:	6803      	ldr	r3, [r0, #0]
 801cdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdfe:	4798      	blx	r3
 801ce00:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ce04:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ce08:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ce0c:	9303      	str	r3, [sp, #12]
 801ce0e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ce12:	1a9b      	subs	r3, r3, r2
 801ce14:	b29b      	uxth	r3, r3
 801ce16:	b21c      	sxth	r4, r3
 801ce18:	2c00      	cmp	r4, #0
 801ce1a:	dc0e      	bgt.n	801ce3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801ce1c:	b134      	cbz	r4, 801ce2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801ce1e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ce22:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ce26:	4413      	add	r3, r2
 801ce28:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ce2c:	463c      	mov	r4, r7
 801ce2e:	e00b      	b.n	801ce48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ce30:	4b4e      	ldr	r3, [pc, #312]	; (801cf6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ce32:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ce36:	4a47      	ldr	r2, [pc, #284]	; (801cf54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ce38:	e758      	b.n	801ccec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ce3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce3e:	ebab 0303 	sub.w	r3, fp, r3
 801ce42:	443c      	add	r4, r7
 801ce44:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ce48:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ce4c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ce50:	1a9b      	subs	r3, r3, r2
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	b219      	sxth	r1, r3
 801ce56:	2900      	cmp	r1, #0
 801ce58:	dd50      	ble.n	801cefc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801ce5a:	9a03      	ldr	r2, [sp, #12]
 801ce5c:	fb02 4401 	mla	r4, r2, r1, r4
 801ce60:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ce64:	1ad3      	subs	r3, r2, r3
 801ce66:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ce6a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ce6e:	f1bc 0f00 	cmp.w	ip, #0
 801ce72:	dd3f      	ble.n	801cef4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ce74:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ce78:	2e00      	cmp	r6, #0
 801ce7a:	dd3b      	ble.n	801cef4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ce7c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ce80:	2203      	movs	r2, #3
 801ce82:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ce86:	fb0a f801 	mul.w	r8, sl, r1
 801ce8a:	fb13 8802 	smlabb	r8, r3, r2, r8
 801ce8e:	9a02      	ldr	r2, [sp, #8]
 801ce90:	4480      	add	r8, r0
 801ce92:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801ce96:	8812      	ldrh	r2, [r2, #0]
 801ce98:	4584      	cmp	ip, r0
 801ce9a:	eba2 0303 	sub.w	r3, r2, r3
 801ce9e:	bfa8      	it	ge
 801cea0:	4684      	movge	ip, r0
 801cea2:	459c      	cmp	ip, r3
 801cea4:	bfa8      	it	ge
 801cea6:	469c      	movge	ip, r3
 801cea8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801ceac:	429e      	cmp	r6, r3
 801ceae:	bfa8      	it	ge
 801ceb0:	461e      	movge	r6, r3
 801ceb2:	4b2d      	ldr	r3, [pc, #180]	; (801cf68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801ceb4:	881b      	ldrh	r3, [r3, #0]
 801ceb6:	1a59      	subs	r1, r3, r1
 801ceb8:	4633      	mov	r3, r6
 801ceba:	428e      	cmp	r6, r1
 801cebc:	bfa8      	it	ge
 801cebe:	460b      	movge	r3, r1
 801cec0:	4562      	cmp	r2, ip
 801cec2:	9302      	str	r3, [sp, #8]
 801cec4:	d12d      	bne.n	801cf22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801cec6:	455a      	cmp	r2, fp
 801cec8:	d12b      	bne.n	801cf22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801ceca:	6828      	ldr	r0, [r5, #0]
 801cecc:	6803      	ldr	r3, [r0, #0]
 801cece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ced0:	4798      	blx	r3
 801ced2:	07c3      	lsls	r3, r0, #31
 801ced4:	d51b      	bpl.n	801cf0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801ced6:	6828      	ldr	r0, [r5, #0]
 801ced8:	9b02      	ldr	r3, [sp, #8]
 801ceda:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801cede:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801cee2:	6803      	ldr	r3, [r0, #0]
 801cee4:	f8cd b000 	str.w	fp, [sp]
 801cee8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801ceea:	4623      	mov	r3, r4
 801ceec:	e899 0006 	ldmia.w	r9, {r1, r2}
 801cef0:	47a8      	blx	r5
 801cef2:	4607      	mov	r7, r0
 801cef4:	4638      	mov	r0, r7
 801cef6:	b00f      	add	sp, #60	; 0x3c
 801cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cefc:	bf1f      	itttt	ne
 801cefe:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801cf02:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801cf06:	189b      	addne	r3, r3, r2
 801cf08:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801cf0c:	e7ad      	b.n	801ce6a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801cf0e:	6828      	ldr	r0, [r5, #0]
 801cf10:	4642      	mov	r2, r8
 801cf12:	4621      	mov	r1, r4
 801cf14:	6803      	ldr	r3, [r0, #0]
 801cf16:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801cf18:	9b02      	ldr	r3, [sp, #8]
 801cf1a:	fb03 f30a 	mul.w	r3, r3, sl
 801cf1e:	47a8      	blx	r5
 801cf20:	e7e8      	b.n	801cef4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cf22:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801cf26:	f04f 0900 	mov.w	r9, #0
 801cf2a:	9b02      	ldr	r3, [sp, #8]
 801cf2c:	454b      	cmp	r3, r9
 801cf2e:	dde1      	ble.n	801cef4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cf30:	6828      	ldr	r0, [r5, #0]
 801cf32:	4642      	mov	r2, r8
 801cf34:	4621      	mov	r1, r4
 801cf36:	44d0      	add	r8, sl
 801cf38:	6803      	ldr	r3, [r0, #0]
 801cf3a:	f109 0901 	add.w	r9, r9, #1
 801cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf40:	461e      	mov	r6, r3
 801cf42:	465b      	mov	r3, fp
 801cf44:	47b0      	blx	r6
 801cf46:	9b03      	ldr	r3, [sp, #12]
 801cf48:	441c      	add	r4, r3
 801cf4a:	e7ee      	b.n	801cf2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801cf4c:	2000bc68 	.word	0x2000bc68
 801cf50:	08028d71 	.word	0x08028d71
 801cf54:	08029551 	.word	0x08029551
 801cf58:	08028d3f 	.word	0x08028d3f
 801cf5c:	08028e25 	.word	0x08028e25
 801cf60:	08028e7a 	.word	0x08028e7a
 801cf64:	2000bc62 	.word	0x2000bc62
 801cf68:	2000bc64 	.word	0x2000bc64
 801cf6c:	08028eb8 	.word	0x08028eb8

0801cf70 <_ZN8touchgfx8LCD24bppC1Ev>:
 801cf70:	4a0b      	ldr	r2, [pc, #44]	; (801cfa0 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801cf72:	6002      	str	r2, [r0, #0]
 801cf74:	2200      	movs	r2, #0
 801cf76:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801cf7a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801cf7e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801cf82:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801cf86:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801cf8a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801cf8e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801cf92:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801cf96:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801cf9a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801cf9e:	4770      	bx	lr
 801cfa0:	0802919c 	.word	0x0802919c

0801cfa4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801cfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfa8:	b093      	sub	sp, #76	; 0x4c
 801cfaa:	880c      	ldrh	r4, [r1, #0]
 801cfac:	4605      	mov	r5, r0
 801cfae:	460f      	mov	r7, r1
 801cfb0:	4691      	mov	r9, r2
 801cfb2:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801cfb6:	b12c      	cbz	r4, 801cfc4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801cfb8:	4b71      	ldr	r3, [pc, #452]	; (801d180 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801cfba:	2167      	movs	r1, #103	; 0x67
 801cfbc:	4a71      	ldr	r2, [pc, #452]	; (801d184 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801cfbe:	4872      	ldr	r0, [pc, #456]	; (801d188 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801cfc0:	f007 fb16 	bl	80245f0 <__assert_func>
 801cfc4:	6810      	ldr	r0, [r2, #0]
 801cfc6:	ae0e      	add	r6, sp, #56	; 0x38
 801cfc8:	6851      	ldr	r1, [r2, #4]
 801cfca:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801d190 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801cfce:	c603      	stmia	r6!, {r0, r1}
 801cfd0:	6818      	ldr	r0, [r3, #0]
 801cfd2:	ae10      	add	r6, sp, #64	; 0x40
 801cfd4:	6859      	ldr	r1, [r3, #4]
 801cfd6:	c603      	stmia	r6!, {r0, r1}
 801cfd8:	a80e      	add	r0, sp, #56	; 0x38
 801cfda:	f7fb f9d5 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cfde:	4649      	mov	r1, r9
 801cfe0:	a810      	add	r0, sp, #64	; 0x40
 801cfe2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801d18c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801cfe6:	f7fb f9b7 	bl	8018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cfea:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cfee:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cff2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801cff6:	f8d9 0000 	ldr.w	r0, [r9]
 801cffa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cffe:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d002:	440d      	add	r5, r1
 801d004:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d008:	440a      	add	r2, r1
 801d00a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d00e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d012:	4413      	add	r3, r2
 801d014:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d018:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d01c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d01e:	6803      	ldr	r3, [r0, #0]
 801d020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d024:	4798      	blx	r3
 801d026:	2801      	cmp	r0, #1
 801d028:	d11e      	bne.n	801d068 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d02a:	220b      	movs	r2, #11
 801d02c:	9008      	str	r0, [sp, #32]
 801d02e:	b2b6      	uxth	r6, r6
 801d030:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d034:	9207      	str	r2, [sp, #28]
 801d036:	4629      	mov	r1, r5
 801d038:	f8ba 2000 	ldrh.w	r2, [sl]
 801d03c:	f8cd 8010 	str.w	r8, [sp, #16]
 801d040:	9601      	str	r6, [sp, #4]
 801d042:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d046:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d04a:	9203      	str	r2, [sp, #12]
 801d04c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d050:	9202      	str	r2, [sp, #8]
 801d052:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d056:	9200      	str	r2, [sp, #0]
 801d058:	463a      	mov	r2, r7
 801d05a:	f8d9 0000 	ldr.w	r0, [r9]
 801d05e:	f7f8 fdb5 	bl	8015bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d062:	b013      	add	sp, #76	; 0x4c
 801d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d068:	f8d9 0000 	ldr.w	r0, [r9]
 801d06c:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d070:	6803      	ldr	r3, [r0, #0]
 801d072:	6a1b      	ldr	r3, [r3, #32]
 801d074:	4798      	blx	r3
 801d076:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d07a:	f8ba 3000 	ldrh.w	r3, [sl]
 801d07e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d082:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d086:	fb01 2303 	mla	r3, r1, r3, r2
 801d08a:	4621      	mov	r1, r4
 801d08c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d090:	4418      	add	r0, r3
 801d092:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d096:	930c      	str	r3, [sp, #48]	; 0x30
 801d098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d09a:	4299      	cmp	r1, r3
 801d09c:	da6a      	bge.n	801d174 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d09e:	1cc2      	adds	r2, r0, #3
 801d0a0:	46aa      	mov	sl, r5
 801d0a2:	ebaa 0305 	sub.w	r3, sl, r5
 801d0a6:	429e      	cmp	r6, r3
 801d0a8:	dd55      	ble.n	801d156 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d0aa:	2404      	movs	r4, #4
 801d0ac:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d0b0:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d0b4:	eb07 0e03 	add.w	lr, r7, r3
 801d0b8:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d0bc:	b184      	cbz	r4, 801d0e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d0be:	2cff      	cmp	r4, #255	; 0xff
 801d0c0:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d0c4:	d10e      	bne.n	801d0e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d0c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d0ca:	d10b      	bne.n	801d0e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d0cc:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d0d0:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d0d4:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d0d8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d0dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d0e0:	3203      	adds	r2, #3
 801d0e2:	e7de      	b.n	801d0a2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d0e4:	fb08 f404 	mul.w	r4, r8, r4
 801d0e8:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d0ec:	1c63      	adds	r3, r4, #1
 801d0ee:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d0f2:	121b      	asrs	r3, r3, #8
 801d0f4:	b29c      	uxth	r4, r3
 801d0f6:	43db      	mvns	r3, r3
 801d0f8:	fb1b fb04 	smulbb	fp, fp, r4
 801d0fc:	b2db      	uxtb	r3, r3
 801d0fe:	fb0c bc03 	mla	ip, ip, r3, fp
 801d102:	fa1f fc8c 	uxth.w	ip, ip
 801d106:	f10c 0b01 	add.w	fp, ip, #1
 801d10a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d10e:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d112:	fb1b fb03 	smulbb	fp, fp, r3
 801d116:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d11a:	f802 cc03 	strb.w	ip, [r2, #-3]
 801d11e:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d122:	fb0c bc04 	mla	ip, ip, r4, fp
 801d126:	fa1f fc8c 	uxth.w	ip, ip
 801d12a:	f10c 0b01 	add.w	fp, ip, #1
 801d12e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d132:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d136:	f802 cc02 	strb.w	ip, [r2, #-2]
 801d13a:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801d13e:	f89e e002 	ldrb.w	lr, [lr, #2]
 801d142:	fb1c f303 	smulbb	r3, ip, r3
 801d146:	fb0e 3304 	mla	r3, lr, r4, r3
 801d14a:	b29b      	uxth	r3, r3
 801d14c:	1c5c      	adds	r4, r3, #1
 801d14e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d152:	121b      	asrs	r3, r3, #8
 801d154:	e7c2      	b.n	801d0dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d158:	3101      	adds	r1, #1
 801d15a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d15c:	881b      	ldrh	r3, [r3, #0]
 801d15e:	1b9b      	subs	r3, r3, r6
 801d160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d164:	4413      	add	r3, r2
 801d166:	4418      	add	r0, r3
 801d168:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d16c:	1b9b      	subs	r3, r3, r6
 801d16e:	444b      	add	r3, r9
 801d170:	441d      	add	r5, r3
 801d172:	e791      	b.n	801d098 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d174:	4b05      	ldr	r3, [pc, #20]	; (801d18c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801d176:	6818      	ldr	r0, [r3, #0]
 801d178:	6803      	ldr	r3, [r0, #0]
 801d17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d17c:	4798      	blx	r3
 801d17e:	e770      	b.n	801d062 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d180:	08028ca3 	.word	0x08028ca3
 801d184:	08029373 	.word	0x08029373
 801d188:	08028d3f 	.word	0x08028d3f
 801d18c:	2000bc68 	.word	0x2000bc68
 801d190:	2000bc62 	.word	0x2000bc62

0801d194 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d198:	4614      	mov	r4, r2
 801d19a:	880a      	ldrh	r2, [r1, #0]
 801d19c:	b091      	sub	sp, #68	; 0x44
 801d19e:	4680      	mov	r8, r0
 801d1a0:	2a01      	cmp	r2, #1
 801d1a2:	460e      	mov	r6, r1
 801d1a4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d1a8:	d005      	beq.n	801d1b6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801d1aa:	4b6d      	ldr	r3, [pc, #436]	; (801d360 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801d1ac:	21b5      	movs	r1, #181	; 0xb5
 801d1ae:	4a6d      	ldr	r2, [pc, #436]	; (801d364 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801d1b0:	486d      	ldr	r0, [pc, #436]	; (801d368 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801d1b2:	f007 fa1d 	bl	80245f0 <__assert_func>
 801d1b6:	6820      	ldr	r0, [r4, #0]
 801d1b8:	ad0c      	add	r5, sp, #48	; 0x30
 801d1ba:	6861      	ldr	r1, [r4, #4]
 801d1bc:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d36c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801d1c0:	c503      	stmia	r5!, {r0, r1}
 801d1c2:	6818      	ldr	r0, [r3, #0]
 801d1c4:	ad0e      	add	r5, sp, #56	; 0x38
 801d1c6:	6859      	ldr	r1, [r3, #4]
 801d1c8:	c503      	stmia	r5!, {r0, r1}
 801d1ca:	a80c      	add	r0, sp, #48	; 0x30
 801d1cc:	f7fb f8dc 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d1d0:	4621      	mov	r1, r4
 801d1d2:	a80e      	add	r0, sp, #56	; 0x38
 801d1d4:	f7fb f8c0 	bl	8018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d1d8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d1dc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d1e0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d1e4:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801d1e8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d1ec:	eb08 0401 	add.w	r4, r8, r1
 801d1f0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d1f4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d370 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801d1f8:	440a      	add	r2, r1
 801d1fa:	f8d8 0000 	ldr.w	r0, [r8]
 801d1fe:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d202:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d206:	4413      	add	r3, r2
 801d208:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d20c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d210:	930a      	str	r3, [sp, #40]	; 0x28
 801d212:	6803      	ldr	r3, [r0, #0]
 801d214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d218:	4798      	blx	r3
 801d21a:	2801      	cmp	r0, #1
 801d21c:	d11e      	bne.n	801d25c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801d21e:	220b      	movs	r2, #11
 801d220:	9008      	str	r0, [sp, #32]
 801d222:	b2ad      	uxth	r5, r5
 801d224:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d228:	9207      	str	r2, [sp, #28]
 801d22a:	4621      	mov	r1, r4
 801d22c:	f8b9 2000 	ldrh.w	r2, [r9]
 801d230:	9501      	str	r5, [sp, #4]
 801d232:	9206      	str	r2, [sp, #24]
 801d234:	2200      	movs	r2, #0
 801d236:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801d23a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d23e:	9203      	str	r2, [sp, #12]
 801d240:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d244:	9202      	str	r2, [sp, #8]
 801d246:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d24a:	9200      	str	r2, [sp, #0]
 801d24c:	4632      	mov	r2, r6
 801d24e:	f8d8 0000 	ldr.w	r0, [r8]
 801d252:	f7f8 fcbb 	bl	8015bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d256:	b011      	add	sp, #68	; 0x44
 801d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d25c:	f8d8 0000 	ldr.w	r0, [r8]
 801d260:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801d264:	6803      	ldr	r3, [r0, #0]
 801d266:	6a1b      	ldr	r3, [r3, #32]
 801d268:	4798      	blx	r3
 801d26a:	f8b9 3000 	ldrh.w	r3, [r9]
 801d26e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801d272:	f04f 0e00 	mov.w	lr, #0
 801d276:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d27a:	fa1f f987 	uxth.w	r9, r7
 801d27e:	fb01 2303 	mla	r3, r1, r3, r2
 801d282:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801d286:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d28a:	b289      	uxth	r1, r1
 801d28c:	4418      	add	r0, r3
 801d28e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d292:	930b      	str	r3, [sp, #44]	; 0x2c
 801d294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d296:	459e      	cmp	lr, r3
 801d298:	da5c      	bge.n	801d354 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801d29a:	1cc3      	adds	r3, r0, #3
 801d29c:	46a2      	mov	sl, r4
 801d29e:	ebaa 0204 	sub.w	r2, sl, r4
 801d2a2:	4295      	cmp	r5, r2
 801d2a4:	dd46      	ble.n	801d334 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801d2a6:	f04f 0c03 	mov.w	ip, #3
 801d2aa:	f04f 0b04 	mov.w	fp, #4
 801d2ae:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801d2b2:	2fff      	cmp	r7, #255	; 0xff
 801d2b4:	fb1c b202 	smlabb	r2, ip, r2, fp
 801d2b8:	eb06 0c02 	add.w	ip, r6, r2
 801d2bc:	f816 b002 	ldrb.w	fp, [r6, r2]
 801d2c0:	d02f      	beq.n	801d322 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801d2c2:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801d2c6:	fb12 f201 	smulbb	r2, r2, r1
 801d2ca:	fb0b 2209 	mla	r2, fp, r9, r2
 801d2ce:	b292      	uxth	r2, r2
 801d2d0:	f102 0b01 	add.w	fp, r2, #1
 801d2d4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d2d8:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801d2dc:	fb1b fb01 	smulbb	fp, fp, r1
 801d2e0:	1212      	asrs	r2, r2, #8
 801d2e2:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d2e6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d2ea:	fb02 b209 	mla	r2, r2, r9, fp
 801d2ee:	b292      	uxth	r2, r2
 801d2f0:	f102 0b01 	add.w	fp, r2, #1
 801d2f4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d2f8:	1212      	asrs	r2, r2, #8
 801d2fa:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d2fe:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d302:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801d306:	fb1c fc01 	smulbb	ip, ip, r1
 801d30a:	fb02 c209 	mla	r2, r2, r9, ip
 801d30e:	b292      	uxth	r2, r2
 801d310:	f102 0c01 	add.w	ip, r2, #1
 801d314:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d318:	1212      	asrs	r2, r2, #8
 801d31a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d31e:	3303      	adds	r3, #3
 801d320:	e7bd      	b.n	801d29e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801d322:	f803 bc03 	strb.w	fp, [r3, #-3]
 801d326:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d32a:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d32e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d332:	e7f2      	b.n	801d31a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801d334:	4b0d      	ldr	r3, [pc, #52]	; (801d36c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d336:	f10e 0e01 	add.w	lr, lr, #1
 801d33a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d33c:	881b      	ldrh	r3, [r3, #0]
 801d33e:	1b5b      	subs	r3, r3, r5
 801d340:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d344:	4413      	add	r3, r2
 801d346:	4418      	add	r0, r3
 801d348:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d34c:	1b5b      	subs	r3, r3, r5
 801d34e:	4443      	add	r3, r8
 801d350:	441c      	add	r4, r3
 801d352:	e79f      	b.n	801d294 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801d354:	4b06      	ldr	r3, [pc, #24]	; (801d370 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d356:	6818      	ldr	r0, [r3, #0]
 801d358:	6803      	ldr	r3, [r0, #0]
 801d35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d35c:	4798      	blx	r3
 801d35e:	e77a      	b.n	801d256 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801d360:	08028baf 	.word	0x08028baf
 801d364:	08029266 	.word	0x08029266
 801d368:	08028d3f 	.word	0x08028d3f
 801d36c:	2000bc62 	.word	0x2000bc62
 801d370:	2000bc68 	.word	0x2000bc68

0801d374 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d374:	b570      	push	{r4, r5, r6, lr}
 801d376:	780d      	ldrb	r5, [r1, #0]
 801d378:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801d37c:	2d01      	cmp	r5, #1
 801d37e:	d00d      	beq.n	801d39c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801d380:	d307      	bcc.n	801d392 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801d382:	2d02      	cmp	r5, #2
 801d384:	d10f      	bne.n	801d3a6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801d386:	4b08      	ldr	r3, [pc, #32]	; (801d3a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801d388:	215a      	movs	r1, #90	; 0x5a
 801d38a:	4a08      	ldr	r2, [pc, #32]	; (801d3ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801d38c:	4808      	ldr	r0, [pc, #32]	; (801d3b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801d38e:	f007 f92f 	bl	80245f0 <__assert_func>
 801d392:	9404      	str	r4, [sp, #16]
 801d394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d398:	f7ff be04 	b.w	801cfa4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d39c:	9404      	str	r4, [sp, #16]
 801d39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d3a2:	f7ff bef7 	b.w	801d194 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d3a6:	bd70      	pop	{r4, r5, r6, pc}
 801d3a8:	08028b64 	.word	0x08028b64
 801d3ac:	080291e4 	.word	0x080291e4
 801d3b0:	08028d3f 	.word	0x08028d3f

0801d3b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b8:	b08b      	sub	sp, #44	; 0x2c
 801d3ba:	460c      	mov	r4, r1
 801d3bc:	4680      	mov	r8, r0
 801d3be:	469a      	mov	sl, r3
 801d3c0:	6808      	ldr	r0, [r1, #0]
 801d3c2:	ab06      	add	r3, sp, #24
 801d3c4:	6849      	ldr	r1, [r1, #4]
 801d3c6:	c303      	stmia	r3!, {r0, r1}
 801d3c8:	6810      	ldr	r0, [r2, #0]
 801d3ca:	ab08      	add	r3, sp, #32
 801d3cc:	6851      	ldr	r1, [r2, #4]
 801d3ce:	c303      	stmia	r3!, {r0, r1}
 801d3d0:	a806      	add	r0, sp, #24
 801d3d2:	f7fa ffd9 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3d6:	4621      	mov	r1, r4
 801d3d8:	a808      	add	r0, sp, #32
 801d3da:	4c61      	ldr	r4, [pc, #388]	; (801d560 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801d3dc:	f7fa ffbc 	bl	8018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3e0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d3e4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d3e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d3ec:	6820      	ldr	r0, [r4, #0]
 801d3ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d3f2:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801d3f6:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801d3fa:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801d3fe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d402:	440a      	add	r2, r1
 801d404:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d408:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d40c:	4413      	add	r3, r2
 801d40e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d412:	6803      	ldr	r3, [r0, #0]
 801d414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d416:	4798      	blx	r3
 801d418:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d41c:	d118      	bne.n	801d450 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801d41e:	f010 0f20 	tst.w	r0, #32
 801d422:	6820      	ldr	r0, [r4, #0]
 801d424:	d017      	beq.n	801d456 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801d426:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d42a:	b2bf      	uxth	r7, r7
 801d42c:	6801      	ldr	r1, [r0, #0]
 801d42e:	9402      	str	r4, [sp, #8]
 801d430:	fa1f f489 	uxth.w	r4, r9
 801d434:	f8cd a00c 	str.w	sl, [sp, #12]
 801d438:	9401      	str	r4, [sp, #4]
 801d43a:	9700      	str	r7, [sp, #0]
 801d43c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d440:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d442:	4641      	mov	r1, r8
 801d444:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d448:	47a0      	blx	r4
 801d44a:	b00b      	add	sp, #44	; 0x2c
 801d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d450:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d454:	e7e5      	b.n	801d422 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d456:	6803      	ldr	r3, [r0, #0]
 801d458:	6a1b      	ldr	r3, [r3, #32]
 801d45a:	4798      	blx	r3
 801d45c:	4b41      	ldr	r3, [pc, #260]	; (801d564 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801d45e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d462:	f04f 0c00 	mov.w	ip, #0
 801d466:	881a      	ldrh	r2, [r3, #0]
 801d468:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d46c:	fb04 1202 	mla	r2, r4, r2, r1
 801d470:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d474:	4410      	add	r0, r2
 801d476:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801d47a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801d47e:	0092      	lsls	r2, r2, #2
 801d480:	9105      	str	r1, [sp, #20]
 801d482:	9204      	str	r2, [sp, #16]
 801d484:	45cc      	cmp	ip, r9
 801d486:	da65      	bge.n	801d554 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801d488:	1cc4      	adds	r4, r0, #3
 801d48a:	f108 0504 	add.w	r5, r8, #4
 801d48e:	f04f 0e00 	mov.w	lr, #0
 801d492:	45be      	cmp	lr, r7
 801d494:	da4d      	bge.n	801d532 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801d496:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d49a:	b181      	cbz	r1, 801d4be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801d49c:	29ff      	cmp	r1, #255	; 0xff
 801d49e:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801d4a2:	d111      	bne.n	801d4c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d4a4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d4a8:	d10e      	bne.n	801d4c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d4aa:	f804 bc03 	strb.w	fp, [r4, #-3]
 801d4ae:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801d4b2:	f804 2c02 	strb.w	r2, [r4, #-2]
 801d4b6:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801d4ba:	f804 2c01 	strb.w	r2, [r4, #-1]
 801d4be:	f10e 0e01 	add.w	lr, lr, #1
 801d4c2:	3403      	adds	r4, #3
 801d4c4:	3504      	adds	r5, #4
 801d4c6:	e7e4      	b.n	801d492 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801d4c8:	fb0a f101 	mul.w	r1, sl, r1
 801d4cc:	1c4a      	adds	r2, r1, #1
 801d4ce:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801d4d2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d4d6:	1212      	asrs	r2, r2, #8
 801d4d8:	b296      	uxth	r6, r2
 801d4da:	43d2      	mvns	r2, r2
 801d4dc:	fb1b fb06 	smulbb	fp, fp, r6
 801d4e0:	b2d2      	uxtb	r2, r2
 801d4e2:	fb01 b102 	mla	r1, r1, r2, fp
 801d4e6:	b289      	uxth	r1, r1
 801d4e8:	f101 0b01 	add.w	fp, r1, #1
 801d4ec:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d4f0:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801d4f4:	fb1b fb02 	smulbb	fp, fp, r2
 801d4f8:	1209      	asrs	r1, r1, #8
 801d4fa:	f804 1c03 	strb.w	r1, [r4, #-3]
 801d4fe:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801d502:	fb01 b106 	mla	r1, r1, r6, fp
 801d506:	b289      	uxth	r1, r1
 801d508:	f101 0b01 	add.w	fp, r1, #1
 801d50c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d510:	1209      	asrs	r1, r1, #8
 801d512:	f804 1c02 	strb.w	r1, [r4, #-2]
 801d516:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d51a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d51e:	fb11 f202 	smulbb	r2, r1, r2
 801d522:	fb0b 2206 	mla	r2, fp, r6, r2
 801d526:	b292      	uxth	r2, r2
 801d528:	1c56      	adds	r6, r2, #1
 801d52a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d52e:	1212      	asrs	r2, r2, #8
 801d530:	e7c3      	b.n	801d4ba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801d532:	881a      	ldrh	r2, [r3, #0]
 801d534:	f10c 0c01 	add.w	ip, ip, #1
 801d538:	9905      	ldr	r1, [sp, #20]
 801d53a:	1bd2      	subs	r2, r2, r7
 801d53c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d540:	440a      	add	r2, r1
 801d542:	9904      	ldr	r1, [sp, #16]
 801d544:	4410      	add	r0, r2
 801d546:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d54a:	1bd2      	subs	r2, r2, r7
 801d54c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d550:	4490      	add	r8, r2
 801d552:	e797      	b.n	801d484 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801d554:	4b02      	ldr	r3, [pc, #8]	; (801d560 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801d556:	6818      	ldr	r0, [r3, #0]
 801d558:	6803      	ldr	r3, [r0, #0]
 801d55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d55c:	4798      	blx	r3
 801d55e:	e774      	b.n	801d44a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801d560:	2000bc68 	.word	0x2000bc68
 801d564:	2000bc62 	.word	0x2000bc62

0801d568 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d56c:	b085      	sub	sp, #20
 801d56e:	4606      	mov	r6, r0
 801d570:	460c      	mov	r4, r1
 801d572:	4691      	mov	r9, r2
 801d574:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801d578:	4698      	mov	r8, r3
 801d57a:	b385      	cbz	r5, 801d5de <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d57c:	4608      	mov	r0, r1
 801d57e:	f7fd fae5 	bl	801ab4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d582:	4607      	mov	r7, r0
 801d584:	4620      	mov	r0, r4
 801d586:	f7fd fb1b 	bl	801abc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d58a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d58e:	4620      	mov	r0, r4
 801d590:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d594:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d598:	f8ad 700c 	strh.w	r7, [sp, #12]
 801d59c:	f7fd fc62 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5a0:	2801      	cmp	r0, #1
 801d5a2:	d00f      	beq.n	801d5c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d5a4:	4620      	mov	r0, r4
 801d5a6:	f7fd fc5d 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5aa:	2802      	cmp	r0, #2
 801d5ac:	d00a      	beq.n	801d5c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d5ae:	4620      	mov	r0, r4
 801d5b0:	f7fd fc58 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5b4:	280b      	cmp	r0, #11
 801d5b6:	d005      	beq.n	801d5c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d5b8:	4b1b      	ldr	r3, [pc, #108]	; (801d628 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801d5ba:	2142      	movs	r1, #66	; 0x42
 801d5bc:	4a1b      	ldr	r2, [pc, #108]	; (801d62c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801d5be:	481c      	ldr	r0, [pc, #112]	; (801d630 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801d5c0:	f007 f816 	bl	80245f0 <__assert_func>
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	f7fd fc4d 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5ca:	2802      	cmp	r0, #2
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	d109      	bne.n	801d5e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801d5d0:	f7fd fbc4 	bl	801ad5c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d5d4:	462b      	mov	r3, r5
 801d5d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d5d8:	a902      	add	r1, sp, #8
 801d5da:	f7ff feeb 	bl	801d3b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d5de:	b005      	add	sp, #20
 801d5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5e4:	f7fd fc3e 	bl	801ae64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5e8:	280b      	cmp	r0, #11
 801d5ea:	d10e      	bne.n	801d60a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801d5ec:	4620      	mov	r0, r4
 801d5ee:	f7fd fbb5 	bl	801ad5c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d5f2:	4606      	mov	r6, r0
 801d5f4:	4620      	mov	r0, r4
 801d5f6:	f7fd fbe3 	bl	801adc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d5fa:	9500      	str	r5, [sp, #0]
 801d5fc:	4601      	mov	r1, r0
 801d5fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d600:	aa02      	add	r2, sp, #8
 801d602:	4630      	mov	r0, r6
 801d604:	f7ff feb6 	bl	801d374 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d608:	e7e9      	b.n	801d5de <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d60a:	6833      	ldr	r3, [r6, #0]
 801d60c:	4620      	mov	r0, r4
 801d60e:	691f      	ldr	r7, [r3, #16]
 801d610:	f7fd fba4 	bl	801ad5c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d614:	2300      	movs	r3, #0
 801d616:	4601      	mov	r1, r0
 801d618:	aa02      	add	r2, sp, #8
 801d61a:	4630      	mov	r0, r6
 801d61c:	e9cd 5300 	strd	r5, r3, [sp]
 801d620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d622:	47b8      	blx	r7
 801d624:	e7db      	b.n	801d5de <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d626:	bf00      	nop
 801d628:	08028bfd 	.word	0x08028bfd
 801d62c:	080292ef 	.word	0x080292ef
 801d630:	08028d3f 	.word	0x08028d3f

0801d634 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d634:	b570      	push	{r4, r5, r6, lr}
 801d636:	9d04      	ldr	r5, [sp, #16]
 801d638:	460c      	mov	r4, r1
 801d63a:	4619      	mov	r1, r3
 801d63c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d640:	2a0c      	cmp	r2, #12
 801d642:	d826      	bhi.n	801d692 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801d644:	e8df f002 	tbb	[pc, r2]
 801d648:	200e1407 	.word	0x200e1407
 801d64c:	20202020 	.word	0x20202020
 801d650:	20202020 	.word	0x20202020
 801d654:	20          	.byte	0x20
 801d655:	00          	.byte	0x00
 801d656:	4b0f      	ldr	r3, [pc, #60]	; (801d694 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801d658:	f240 117f 	movw	r1, #383	; 0x17f
 801d65c:	4a0e      	ldr	r2, [pc, #56]	; (801d698 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d65e:	480f      	ldr	r0, [pc, #60]	; (801d69c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801d660:	f006 ffc6 	bl	80245f0 <__assert_func>
 801d664:	462a      	mov	r2, r5
 801d666:	4620      	mov	r0, r4
 801d668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d66c:	f7ff bea2 	b.w	801d3b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d670:	6802      	ldr	r2, [r0, #0]
 801d672:	2600      	movs	r6, #0
 801d674:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d678:	6916      	ldr	r6, [r2, #16]
 801d67a:	462b      	mov	r3, r5
 801d67c:	460a      	mov	r2, r1
 801d67e:	4621      	mov	r1, r4
 801d680:	46b4      	mov	ip, r6
 801d682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d686:	4760      	bx	ip
 801d688:	4b05      	ldr	r3, [pc, #20]	; (801d6a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801d68a:	f240 1191 	movw	r1, #401	; 0x191
 801d68e:	4a02      	ldr	r2, [pc, #8]	; (801d698 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d690:	e7e5      	b.n	801d65e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801d692:	bd70      	pop	{r4, r5, r6, pc}
 801d694:	08028f18 	.word	0x08028f18
 801d698:	080295d7 	.word	0x080295d7
 801d69c:	08028d3f 	.word	0x08028d3f
 801d6a0:	08028f59 	.word	0x08028f59

0801d6a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801d6a4:	b158      	cbz	r0, 801d6be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801d6a6:	2902      	cmp	r1, #2
 801d6a8:	d00f      	beq.n	801d6ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801d6aa:	2903      	cmp	r1, #3
 801d6ac:	d010      	beq.n	801d6d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801d6ae:	2901      	cmp	r1, #1
 801d6b0:	d101      	bne.n	801d6b6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d6b2:	2001      	movs	r0, #1
 801d6b4:	4770      	bx	lr
 801d6b6:	4b08      	ldr	r3, [pc, #32]	; (801d6d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801d6b8:	8819      	ldrh	r1, [r3, #0]
 801d6ba:	4248      	negs	r0, r1
 801d6bc:	4770      	bx	lr
 801d6be:	2902      	cmp	r1, #2
 801d6c0:	d006      	beq.n	801d6d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801d6c2:	2903      	cmp	r1, #3
 801d6c4:	d0f7      	beq.n	801d6b6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d6c6:	2901      	cmp	r1, #1
 801d6c8:	d1f3      	bne.n	801d6b2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801d6ca:	4b03      	ldr	r3, [pc, #12]	; (801d6d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801d6cc:	8818      	ldrh	r0, [r3, #0]
 801d6ce:	4770      	bx	lr
 801d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 801d6d4:	4770      	bx	lr
 801d6d6:	bf00      	nop
 801d6d8:	2000bc62 	.word	0x2000bc62

0801d6dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801d6dc:	b170      	cbz	r0, 801d6fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801d6de:	2902      	cmp	r1, #2
 801d6e0:	d012      	beq.n	801d708 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801d6e2:	2903      	cmp	r1, #3
 801d6e4:	d006      	beq.n	801d6f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801d6e6:	2901      	cmp	r1, #1
 801d6e8:	d001      	beq.n	801d6ee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801d6ea:	2001      	movs	r0, #1
 801d6ec:	4770      	bx	lr
 801d6ee:	4b08      	ldr	r3, [pc, #32]	; (801d710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801d6f0:	8818      	ldrh	r0, [r3, #0]
 801d6f2:	4770      	bx	lr
 801d6f4:	4b06      	ldr	r3, [pc, #24]	; (801d710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801d6f6:	8818      	ldrh	r0, [r3, #0]
 801d6f8:	4240      	negs	r0, r0
 801d6fa:	4770      	bx	lr
 801d6fc:	2902      	cmp	r1, #2
 801d6fe:	d0f9      	beq.n	801d6f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801d700:	2903      	cmp	r1, #3
 801d702:	d0f2      	beq.n	801d6ea <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801d704:	2901      	cmp	r1, #1
 801d706:	d1f2      	bne.n	801d6ee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801d708:	f04f 30ff 	mov.w	r0, #4294967295
 801d70c:	4770      	bx	lr
 801d70e:	bf00      	nop
 801d710:	2000bc62 	.word	0x2000bc62

0801d714 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d718:	b095      	sub	sp, #84	; 0x54
 801d71a:	9109      	str	r1, [sp, #36]	; 0x24
 801d71c:	a910      	add	r1, sp, #64	; 0x40
 801d71e:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801d722:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801d726:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801d72a:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801d72e:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801d732:	e881 000c 	stmia.w	r1, {r2, r3}
 801d736:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801d73a:	9306      	str	r3, [sp, #24]
 801d73c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801d740:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801d744:	930e      	str	r3, [sp, #56]	; 0x38
 801d746:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801d74a:	798f      	ldrb	r7, [r1, #6]
 801d74c:	930a      	str	r3, [sp, #40]	; 0x28
 801d74e:	7b4b      	ldrb	r3, [r1, #13]
 801d750:	0158      	lsls	r0, r3, #5
 801d752:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d756:	4338      	orrs	r0, r7
 801d758:	9008      	str	r0, [sp, #32]
 801d75a:	f000 8174 	beq.w	801da46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d75e:	011b      	lsls	r3, r3, #4
 801d760:	79c8      	ldrb	r0, [r1, #7]
 801d762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d766:	4303      	orrs	r3, r0
 801d768:	9307      	str	r3, [sp, #28]
 801d76a:	f000 816c 	beq.w	801da46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d76e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d772:	b29b      	uxth	r3, r3
 801d774:	2e00      	cmp	r6, #0
 801d776:	f000 8112 	beq.w	801d99e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801d77a:	1af6      	subs	r6, r6, r3
 801d77c:	b2b6      	uxth	r6, r6
 801d77e:	0433      	lsls	r3, r6, #16
 801d780:	d502      	bpl.n	801d788 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d782:	1bad      	subs	r5, r5, r6
 801d784:	2600      	movs	r6, #0
 801d786:	b22d      	sxth	r5, r5
 801d788:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d78c:	a810      	add	r0, sp, #64	; 0x40
 801d78e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d792:	428d      	cmp	r5, r1
 801d794:	b28b      	uxth	r3, r1
 801d796:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801d79a:	bfbf      	itttt	lt
 801d79c:	18f6      	addlt	r6, r6, r3
 801d79e:	1b75      	sublt	r5, r6, r5
 801d7a0:	b2ae      	uxthlt	r6, r5
 801d7a2:	460d      	movlt	r5, r1
 801d7a4:	8891      	ldrh	r1, [r2, #4]
 801d7a6:	440b      	add	r3, r1
 801d7a8:	4629      	mov	r1, r5
 801d7aa:	b21b      	sxth	r3, r3
 801d7ac:	930d      	str	r3, [sp, #52]	; 0x34
 801d7ae:	88d3      	ldrh	r3, [r2, #6]
 801d7b0:	9a06      	ldr	r2, [sp, #24]
 801d7b2:	449a      	add	sl, r3
 801d7b4:	fa0f f38a 	sxth.w	r3, sl
 801d7b8:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801d7bc:	930c      	str	r3, [sp, #48]	; 0x30
 801d7be:	4bb8      	ldr	r3, [pc, #736]	; (801daa0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801d7c0:	f893 b000 	ldrb.w	fp, [r3]
 801d7c4:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d7c8:	f1dc 0300 	rsbs	r3, ip, #0
 801d7cc:	eb43 030c 	adc.w	r3, r3, ip
 801d7d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801d7d2:	464b      	mov	r3, r9
 801d7d4:	f7fa fcb2 	bl	801813c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d7d8:	4629      	mov	r1, r5
 801d7da:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801d7de:	464b      	mov	r3, r9
 801d7e0:	9a06      	ldr	r2, [sp, #24]
 801d7e2:	a810      	add	r0, sp, #64	; 0x40
 801d7e4:	f7fa fcc2 	bl	801816c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d7e8:	a914      	add	r1, sp, #80	; 0x50
 801d7ea:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d7ee:	a813      	add	r0, sp, #76	; 0x4c
 801d7f0:	f7fa fd9c 	bl	801832c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d7f4:	f1b9 0f00 	cmp.w	r9, #0
 801d7f8:	f040 80d4 	bne.w	801d9a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801d7fc:	f1bb 0f01 	cmp.w	fp, #1
 801d800:	f040 80d8 	bne.w	801d9b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801d804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d806:	2b00      	cmp	r3, #0
 801d808:	f040 8122 	bne.w	801da50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801d80c:	4ba5      	ldr	r3, [pc, #660]	; (801daa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801d80e:	6818      	ldr	r0, [r3, #0]
 801d810:	6803      	ldr	r3, [r0, #0]
 801d812:	6a1b      	ldr	r3, [r3, #32]
 801d814:	4798      	blx	r3
 801d816:	4aa4      	ldr	r2, [pc, #656]	; (801daa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d818:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801d81c:	8811      	ldrh	r1, [r2, #0]
 801d81e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d822:	fb01 2303 	mla	r3, r1, r3, r2
 801d826:	2201      	movs	r2, #1
 801d828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d82c:	4590      	cmp	r8, r2
 801d82e:	4403      	add	r3, r0
 801d830:	9307      	str	r3, [sp, #28]
 801d832:	fa02 f308 	lsl.w	r3, r2, r8
 801d836:	f103 33ff 	add.w	r3, r3, #4294967295
 801d83a:	b2db      	uxtb	r3, r3
 801d83c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d83e:	f000 8109 	beq.w	801da54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801d842:	f1b8 0f02 	cmp.w	r8, #2
 801d846:	f000 813e 	beq.w	801dac6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801d84a:	f1b8 0f04 	cmp.w	r8, #4
 801d84e:	f000 8132 	beq.w	801dab6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801d852:	b906      	cbnz	r6, 801d856 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801d854:	b174      	cbz	r4, 801d874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801d856:	fb17 6304 	smlabb	r3, r7, r4, r6
 801d85a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d85c:	ebaa 0a04 	sub.w	sl, sl, r4
 801d860:	fb13 f308 	smulbb	r3, r3, r8
 801d864:	fa1f fa8a 	uxth.w	sl, sl
 801d868:	b29b      	uxth	r3, r3
 801d86a:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801d86e:	f003 0407 	and.w	r4, r3, #7
 801d872:	9124      	str	r1, [sp, #144]	; 0x90
 801d874:	4649      	mov	r1, r9
 801d876:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d878:	f7ff ff14 	bl	801d6a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801d87c:	4649      	mov	r1, r9
 801d87e:	4683      	mov	fp, r0
 801d880:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d882:	f7ff ff2b 	bl	801d6dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801d886:	9906      	ldr	r1, [sp, #24]
 801d888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d88a:	1bad      	subs	r5, r5, r6
 801d88c:	1a5b      	subs	r3, r3, r1
 801d88e:	459a      	cmp	sl, r3
 801d890:	bfa8      	it	ge
 801d892:	469a      	movge	sl, r3
 801d894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d896:	1b5d      	subs	r5, r3, r5
 801d898:	9b08      	ldr	r3, [sp, #32]
 801d89a:	429d      	cmp	r5, r3
 801d89c:	bfd4      	ite	le
 801d89e:	ebc6 0605 	rsble	r6, r6, r5
 801d8a2:	ebc6 0603 	rsbgt	r6, r6, r3
 801d8a6:	1bbf      	subs	r7, r7, r6
 801d8a8:	fb0b 0016 	mls	r0, fp, r6, r0
 801d8ac:	fb08 f307 	mul.w	r3, r8, r7
 801d8b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d8b4:	9308      	str	r3, [sp, #32]
 801d8b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d8b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d8bc:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d8c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d8c4:	930c      	str	r3, [sp, #48]	; 0x30
 801d8c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d8c8:	b2db      	uxtb	r3, r3
 801d8ca:	930d      	str	r3, [sp, #52]	; 0x34
 801d8cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8ce:	7819      	ldrb	r1, [r3, #0]
 801d8d0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d8d4:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801d8d8:	4121      	asrs	r1, r4
 801d8da:	9306      	str	r3, [sp, #24]
 801d8dc:	fb03 0b0b 	mla	fp, r3, fp, r0
 801d8e0:	b2c9      	uxtb	r1, r1
 801d8e2:	f1ba 0f00 	cmp.w	sl, #0
 801d8e6:	f340 80d1 	ble.w	801da8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801d8ea:	46b6      	mov	lr, r6
 801d8ec:	9807      	ldr	r0, [sp, #28]
 801d8ee:	f1be 0f00 	cmp.w	lr, #0
 801d8f2:	f340 80b8 	ble.w	801da66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801d8f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d8f8:	400b      	ands	r3, r1
 801d8fa:	d03e      	beq.n	801d97a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801d8fc:	fb13 f302 	smulbb	r3, r3, r2
 801d900:	2bfe      	cmp	r3, #254	; 0xfe
 801d902:	dd03      	ble.n	801d90c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801d904:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d906:	2dff      	cmp	r5, #255	; 0xff
 801d908:	f000 80a6 	beq.w	801da58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801d90c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d90e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d910:	fb15 f303 	smulbb	r3, r5, r3
 801d914:	b29b      	uxth	r3, r3
 801d916:	1c5d      	adds	r5, r3, #1
 801d918:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d91c:	7805      	ldrb	r5, [r0, #0]
 801d91e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d922:	fa1f fc83 	uxth.w	ip, r3
 801d926:	43db      	mvns	r3, r3
 801d928:	fb17 f90c 	smulbb	r9, r7, ip
 801d92c:	b2db      	uxtb	r3, r3
 801d92e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d930:	fb05 9503 	mla	r5, r5, r3, r9
 801d934:	b2ad      	uxth	r5, r5
 801d936:	f105 0901 	add.w	r9, r5, #1
 801d93a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d93e:	fb17 f90c 	smulbb	r9, r7, ip
 801d942:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d944:	122d      	asrs	r5, r5, #8
 801d946:	fb17 fc0c 	smulbb	ip, r7, ip
 801d94a:	7005      	strb	r5, [r0, #0]
 801d94c:	7845      	ldrb	r5, [r0, #1]
 801d94e:	fb05 9503 	mla	r5, r5, r3, r9
 801d952:	b2ad      	uxth	r5, r5
 801d954:	f105 0901 	add.w	r9, r5, #1
 801d958:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d95c:	122d      	asrs	r5, r5, #8
 801d95e:	7045      	strb	r5, [r0, #1]
 801d960:	7885      	ldrb	r5, [r0, #2]
 801d962:	fb05 cc03 	mla	ip, r5, r3, ip
 801d966:	fa1f fc8c 	uxth.w	ip, ip
 801d96a:	f10c 0301 	add.w	r3, ip, #1
 801d96e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d972:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d976:	f880 c002 	strb.w	ip, [r0, #2]
 801d97a:	4444      	add	r4, r8
 801d97c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d980:	b2a4      	uxth	r4, r4
 801d982:	2c07      	cmp	r4, #7
 801d984:	bf89      	itett	hi
 801d986:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801d988:	fa41 f108 	asrls.w	r1, r1, r8
 801d98c:	2400      	movhi	r4, #0
 801d98e:	7859      	ldrbhi	r1, [r3, #1]
 801d990:	bf8a      	itet	hi
 801d992:	3301      	addhi	r3, #1
 801d994:	b2c9      	uxtbls	r1, r1
 801d996:	9324      	strhi	r3, [sp, #144]	; 0x90
 801d998:	9b06      	ldr	r3, [sp, #24]
 801d99a:	4418      	add	r0, r3
 801d99c:	e7a7      	b.n	801d8ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801d99e:	441d      	add	r5, r3
 801d9a0:	b22d      	sxth	r5, r5
 801d9a2:	e6f1      	b.n	801d788 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d9a4:	f1b9 0f01 	cmp.w	r9, #1
 801d9a8:	f47f af2c 	bne.w	801d804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d9ac:	f1bb 0f01 	cmp.w	fp, #1
 801d9b0:	f47f af28 	bne.w	801d804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d9b4:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801daa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801d9b8:	f8db 0000 	ldr.w	r0, [fp]
 801d9bc:	6803      	ldr	r3, [r0, #0]
 801d9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9c0:	4798      	blx	r3
 801d9c2:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801d9c6:	465a      	mov	r2, fp
 801d9c8:	d006      	beq.n	801d9d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801d9ca:	f1b8 0f04 	cmp.w	r8, #4
 801d9ce:	d13d      	bne.n	801da4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801d9d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9d2:	3300      	adds	r3, #0
 801d9d4:	bf18      	it	ne
 801d9d6:	2301      	movne	r3, #1
 801d9d8:	05c0      	lsls	r0, r0, #23
 801d9da:	d567      	bpl.n	801daac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d9dc:	f1b8 0f08 	cmp.w	r8, #8
 801d9e0:	d164      	bne.n	801daac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	bf0c      	ite	eq
 801d9e6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801d9ea:	2180      	movne	r1, #128	; 0x80
 801d9ec:	2e00      	cmp	r6, #0
 801d9ee:	f47f af09 	bne.w	801d804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d9f2:	2c00      	cmp	r4, #0
 801d9f4:	f47f af06 	bne.w	801d804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d9f8:	9b08      	ldr	r3, [sp, #32]
 801d9fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d9fc:	442b      	add	r3, r5
 801d9fe:	4283      	cmp	r3, r0
 801da00:	f73f af00 	bgt.w	801d804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801da04:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801da08:	4403      	add	r3, r0
 801da0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801da0c:	4283      	cmp	r3, r0
 801da0e:	f73f aef9 	bgt.w	801d804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801da12:	f1b8 0f08 	cmp.w	r8, #8
 801da16:	6810      	ldr	r0, [r2, #0]
 801da18:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801da1c:	bf18      	it	ne
 801da1e:	3701      	addne	r7, #1
 801da20:	6804      	ldr	r4, [r0, #0]
 801da22:	9105      	str	r1, [sp, #20]
 801da24:	bf18      	it	ne
 801da26:	f027 0701 	bicne.w	r7, r7, #1
 801da2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801da2c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801da30:	bf18      	it	ne
 801da32:	b2bf      	uxthne	r7, r7
 801da34:	9104      	str	r1, [sp, #16]
 801da36:	9926      	ldr	r1, [sp, #152]	; 0x98
 801da38:	e9cd 7a00 	strd	r7, sl, [sp]
 801da3c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801da40:	9924      	ldr	r1, [sp, #144]	; 0x90
 801da42:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801da44:	47a0      	blx	r4
 801da46:	b015      	add	sp, #84	; 0x54
 801da48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da4c:	2300      	movs	r3, #0
 801da4e:	e7c3      	b.n	801d9d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801da50:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da52:	e6e0      	b.n	801d816 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801da54:	22ff      	movs	r2, #255	; 0xff
 801da56:	e6fc      	b.n	801d852 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801da58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da5a:	7003      	strb	r3, [r0, #0]
 801da5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da5e:	7043      	strb	r3, [r0, #1]
 801da60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da62:	7083      	strb	r3, [r0, #2]
 801da64:	e789      	b.n	801d97a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801da66:	9b08      	ldr	r3, [sp, #32]
 801da68:	b153      	cbz	r3, 801da80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801da6a:	441c      	add	r4, r3
 801da6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da6e:	b2a4      	uxth	r4, r4
 801da70:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801da74:	f004 0407 	and.w	r4, r4, #7
 801da78:	7819      	ldrb	r1, [r3, #0]
 801da7a:	9324      	str	r3, [sp, #144]	; 0x90
 801da7c:	4121      	asrs	r1, r4
 801da7e:	b2c9      	uxtb	r1, r1
 801da80:	9b07      	ldr	r3, [sp, #28]
 801da82:	f10a 3aff 	add.w	sl, sl, #4294967295
 801da86:	445b      	add	r3, fp
 801da88:	9307      	str	r3, [sp, #28]
 801da8a:	e72a      	b.n	801d8e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801da8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d1d9      	bne.n	801da46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801da92:	4b04      	ldr	r3, [pc, #16]	; (801daa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801da94:	6818      	ldr	r0, [r3, #0]
 801da96:	6803      	ldr	r3, [r0, #0]
 801da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da9a:	4798      	blx	r3
 801da9c:	e7d3      	b.n	801da46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801da9e:	bf00      	nop
 801daa0:	2000bc60 	.word	0x2000bc60
 801daa4:	2000bc68 	.word	0x2000bc68
 801daa8:	2000bc62 	.word	0x2000bc62
 801daac:	2b00      	cmp	r3, #0
 801daae:	f43f aea9 	beq.w	801d804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dab2:	2180      	movs	r1, #128	; 0x80
 801dab4:	e79a      	b.n	801d9ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801dab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dab8:	b11b      	cbz	r3, 801dac2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801daba:	07fb      	lsls	r3, r7, #31
 801dabc:	d501      	bpl.n	801dac2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801dabe:	3701      	adds	r7, #1
 801dac0:	b2bf      	uxth	r7, r7
 801dac2:	2211      	movs	r2, #17
 801dac4:	e6c5      	b.n	801d852 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801dac6:	2255      	movs	r2, #85	; 0x55
 801dac8:	e6c3      	b.n	801d852 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801daca:	bf00      	nop

0801dacc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801dacc:	b538      	push	{r3, r4, r5, lr}
 801dace:	4c15      	ldr	r4, [pc, #84]	; (801db24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801dad0:	4605      	mov	r5, r0
 801dad2:	7823      	ldrb	r3, [r4, #0]
 801dad4:	f3bf 8f5b 	dmb	ish
 801dad8:	07da      	lsls	r2, r3, #31
 801dada:	d40b      	bmi.n	801daf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dadc:	4620      	mov	r0, r4
 801dade:	f006 fd5e 	bl	802459e <__cxa_guard_acquire>
 801dae2:	b138      	cbz	r0, 801daf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dae4:	4620      	mov	r0, r4
 801dae6:	f006 fd66 	bl	80245b6 <__cxa_guard_release>
 801daea:	4a0f      	ldr	r2, [pc, #60]	; (801db28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801daec:	490f      	ldr	r1, [pc, #60]	; (801db2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801daee:	4810      	ldr	r0, [pc, #64]	; (801db30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801daf0:	f006 fd4b 	bl	802458a <__aeabi_atexit>
 801daf4:	4c0f      	ldr	r4, [pc, #60]	; (801db34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801daf6:	7823      	ldrb	r3, [r4, #0]
 801daf8:	f3bf 8f5b 	dmb	ish
 801dafc:	07db      	lsls	r3, r3, #31
 801dafe:	d40b      	bmi.n	801db18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801db00:	4620      	mov	r0, r4
 801db02:	f006 fd4c 	bl	802459e <__cxa_guard_acquire>
 801db06:	b138      	cbz	r0, 801db18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801db08:	4620      	mov	r0, r4
 801db0a:	f006 fd54 	bl	80245b6 <__cxa_guard_release>
 801db0e:	4a06      	ldr	r2, [pc, #24]	; (801db28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801db10:	4909      	ldr	r1, [pc, #36]	; (801db38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801db12:	480a      	ldr	r0, [pc, #40]	; (801db3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801db14:	f006 fd39 	bl	802458a <__aeabi_atexit>
 801db18:	4b05      	ldr	r3, [pc, #20]	; (801db30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801db1a:	612b      	str	r3, [r5, #16]
 801db1c:	4b07      	ldr	r3, [pc, #28]	; (801db3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801db1e:	616b      	str	r3, [r5, #20]
 801db20:	bd38      	pop	{r3, r4, r5, pc}
 801db22:	bf00      	nop
 801db24:	2000bd74 	.word	0x2000bd74
 801db28:	20000000 	.word	0x20000000
 801db2c:	0801c703 	.word	0x0801c703
 801db30:	20000084 	.word	0x20000084
 801db34:	2000bd78 	.word	0x2000bd78
 801db38:	0801c701 	.word	0x0801c701
 801db3c:	20000088 	.word	0x20000088

0801db40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801db40:	b538      	push	{r3, r4, r5, lr}
 801db42:	4c15      	ldr	r4, [pc, #84]	; (801db98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801db44:	4605      	mov	r5, r0
 801db46:	7823      	ldrb	r3, [r4, #0]
 801db48:	f3bf 8f5b 	dmb	ish
 801db4c:	07da      	lsls	r2, r3, #31
 801db4e:	d40b      	bmi.n	801db68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801db50:	4620      	mov	r0, r4
 801db52:	f006 fd24 	bl	802459e <__cxa_guard_acquire>
 801db56:	b138      	cbz	r0, 801db68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801db58:	4620      	mov	r0, r4
 801db5a:	f006 fd2c 	bl	80245b6 <__cxa_guard_release>
 801db5e:	4a0f      	ldr	r2, [pc, #60]	; (801db9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801db60:	490f      	ldr	r1, [pc, #60]	; (801dba0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801db62:	4810      	ldr	r0, [pc, #64]	; (801dba4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801db64:	f006 fd11 	bl	802458a <__aeabi_atexit>
 801db68:	4c0f      	ldr	r4, [pc, #60]	; (801dba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801db6a:	7823      	ldrb	r3, [r4, #0]
 801db6c:	f3bf 8f5b 	dmb	ish
 801db70:	07db      	lsls	r3, r3, #31
 801db72:	d40b      	bmi.n	801db8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801db74:	4620      	mov	r0, r4
 801db76:	f006 fd12 	bl	802459e <__cxa_guard_acquire>
 801db7a:	b138      	cbz	r0, 801db8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801db7c:	4620      	mov	r0, r4
 801db7e:	f006 fd1a 	bl	80245b6 <__cxa_guard_release>
 801db82:	4a06      	ldr	r2, [pc, #24]	; (801db9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801db84:	4909      	ldr	r1, [pc, #36]	; (801dbac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801db86:	480a      	ldr	r0, [pc, #40]	; (801dbb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801db88:	f006 fcff 	bl	802458a <__aeabi_atexit>
 801db8c:	4b05      	ldr	r3, [pc, #20]	; (801dba4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801db8e:	60ab      	str	r3, [r5, #8]
 801db90:	4b07      	ldr	r3, [pc, #28]	; (801dbb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801db92:	60eb      	str	r3, [r5, #12]
 801db94:	bd38      	pop	{r3, r4, r5, pc}
 801db96:	bf00      	nop
 801db98:	2000bd54 	.word	0x2000bd54
 801db9c:	20000000 	.word	0x20000000
 801dba0:	0801c707 	.word	0x0801c707
 801dba4:	20000064 	.word	0x20000064
 801dba8:	2000bd58 	.word	0x2000bd58
 801dbac:	0801c705 	.word	0x0801c705
 801dbb0:	20000068 	.word	0x20000068

0801dbb4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801dbb4:	b510      	push	{r4, lr}
 801dbb6:	4604      	mov	r4, r0
 801dbb8:	f7ff ff88 	bl	801dacc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbc2:	f7ff bfbd 	b.w	801db40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801dbc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801dbc8:	b538      	push	{r3, r4, r5, lr}
 801dbca:	4c15      	ldr	r4, [pc, #84]	; (801dc20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801dbcc:	4605      	mov	r5, r0
 801dbce:	7823      	ldrb	r3, [r4, #0]
 801dbd0:	f3bf 8f5b 	dmb	ish
 801dbd4:	07da      	lsls	r2, r3, #31
 801dbd6:	d40b      	bmi.n	801dbf0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dbd8:	4620      	mov	r0, r4
 801dbda:	f006 fce0 	bl	802459e <__cxa_guard_acquire>
 801dbde:	b138      	cbz	r0, 801dbf0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dbe0:	4620      	mov	r0, r4
 801dbe2:	f006 fce8 	bl	80245b6 <__cxa_guard_release>
 801dbe6:	4a0f      	ldr	r2, [pc, #60]	; (801dc24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dbe8:	490f      	ldr	r1, [pc, #60]	; (801dc28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801dbea:	4810      	ldr	r0, [pc, #64]	; (801dc2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dbec:	f006 fccd 	bl	802458a <__aeabi_atexit>
 801dbf0:	4c0f      	ldr	r4, [pc, #60]	; (801dc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801dbf2:	7823      	ldrb	r3, [r4, #0]
 801dbf4:	f3bf 8f5b 	dmb	ish
 801dbf8:	07db      	lsls	r3, r3, #31
 801dbfa:	d40b      	bmi.n	801dc14 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dbfc:	4620      	mov	r0, r4
 801dbfe:	f006 fcce 	bl	802459e <__cxa_guard_acquire>
 801dc02:	b138      	cbz	r0, 801dc14 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dc04:	4620      	mov	r0, r4
 801dc06:	f006 fcd6 	bl	80245b6 <__cxa_guard_release>
 801dc0a:	4a06      	ldr	r2, [pc, #24]	; (801dc24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dc0c:	4909      	ldr	r1, [pc, #36]	; (801dc34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801dc0e:	480a      	ldr	r0, [pc, #40]	; (801dc38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dc10:	f006 fcbb 	bl	802458a <__aeabi_atexit>
 801dc14:	4b05      	ldr	r3, [pc, #20]	; (801dc2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dc16:	622b      	str	r3, [r5, #32]
 801dc18:	4b07      	ldr	r3, [pc, #28]	; (801dc38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dc1a:	626b      	str	r3, [r5, #36]	; 0x24
 801dc1c:	bd38      	pop	{r3, r4, r5, pc}
 801dc1e:	bf00      	nop
 801dc20:	2000bd7c 	.word	0x2000bd7c
 801dc24:	20000000 	.word	0x20000000
 801dc28:	0801c6fb 	.word	0x0801c6fb
 801dc2c:	2000008c 	.word	0x2000008c
 801dc30:	2000bd80 	.word	0x2000bd80
 801dc34:	0801c6f9 	.word	0x0801c6f9
 801dc38:	20000090 	.word	0x20000090

0801dc3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801dc3c:	b538      	push	{r3, r4, r5, lr}
 801dc3e:	4c15      	ldr	r4, [pc, #84]	; (801dc94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801dc40:	4605      	mov	r5, r0
 801dc42:	7823      	ldrb	r3, [r4, #0]
 801dc44:	f3bf 8f5b 	dmb	ish
 801dc48:	07da      	lsls	r2, r3, #31
 801dc4a:	d40b      	bmi.n	801dc64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801dc4c:	4620      	mov	r0, r4
 801dc4e:	f006 fca6 	bl	802459e <__cxa_guard_acquire>
 801dc52:	b138      	cbz	r0, 801dc64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801dc54:	4620      	mov	r0, r4
 801dc56:	f006 fcae 	bl	80245b6 <__cxa_guard_release>
 801dc5a:	4a0f      	ldr	r2, [pc, #60]	; (801dc98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dc5c:	490f      	ldr	r1, [pc, #60]	; (801dc9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801dc5e:	4810      	ldr	r0, [pc, #64]	; (801dca0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dc60:	f006 fc93 	bl	802458a <__aeabi_atexit>
 801dc64:	4c0f      	ldr	r4, [pc, #60]	; (801dca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801dc66:	7823      	ldrb	r3, [r4, #0]
 801dc68:	f3bf 8f5b 	dmb	ish
 801dc6c:	07db      	lsls	r3, r3, #31
 801dc6e:	d40b      	bmi.n	801dc88 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801dc70:	4620      	mov	r0, r4
 801dc72:	f006 fc94 	bl	802459e <__cxa_guard_acquire>
 801dc76:	b138      	cbz	r0, 801dc88 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801dc78:	4620      	mov	r0, r4
 801dc7a:	f006 fc9c 	bl	80245b6 <__cxa_guard_release>
 801dc7e:	4a06      	ldr	r2, [pc, #24]	; (801dc98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dc80:	4909      	ldr	r1, [pc, #36]	; (801dca8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801dc82:	480a      	ldr	r0, [pc, #40]	; (801dcac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801dc84:	f006 fc81 	bl	802458a <__aeabi_atexit>
 801dc88:	4b05      	ldr	r3, [pc, #20]	; (801dca0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dc8a:	61ab      	str	r3, [r5, #24]
 801dc8c:	4b07      	ldr	r3, [pc, #28]	; (801dcac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801dc8e:	61eb      	str	r3, [r5, #28]
 801dc90:	bd38      	pop	{r3, r4, r5, pc}
 801dc92:	bf00      	nop
 801dc94:	2000bd5c 	.word	0x2000bd5c
 801dc98:	20000000 	.word	0x20000000
 801dc9c:	0801c6ff 	.word	0x0801c6ff
 801dca0:	2000006c 	.word	0x2000006c
 801dca4:	2000bd60 	.word	0x2000bd60
 801dca8:	0801c6fd 	.word	0x0801c6fd
 801dcac:	20000070 	.word	0x20000070

0801dcb0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801dcb0:	b510      	push	{r4, lr}
 801dcb2:	4604      	mov	r4, r0
 801dcb4:	f7ff ff88 	bl	801dbc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801dcb8:	4620      	mov	r0, r4
 801dcba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcbe:	f7ff bfbd 	b.w	801dc3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801dcc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801dcc4:	b538      	push	{r3, r4, r5, lr}
 801dcc6:	4c15      	ldr	r4, [pc, #84]	; (801dd1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801dcc8:	4605      	mov	r5, r0
 801dcca:	7823      	ldrb	r3, [r4, #0]
 801dccc:	f3bf 8f5b 	dmb	ish
 801dcd0:	07da      	lsls	r2, r3, #31
 801dcd2:	d40b      	bmi.n	801dcec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	f006 fc62 	bl	802459e <__cxa_guard_acquire>
 801dcda:	b138      	cbz	r0, 801dcec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801dcdc:	4620      	mov	r0, r4
 801dcde:	f006 fc6a 	bl	80245b6 <__cxa_guard_release>
 801dce2:	4a0f      	ldr	r2, [pc, #60]	; (801dd20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801dce4:	490f      	ldr	r1, [pc, #60]	; (801dd24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801dce6:	4810      	ldr	r0, [pc, #64]	; (801dd28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801dce8:	f006 fc4f 	bl	802458a <__aeabi_atexit>
 801dcec:	4c0f      	ldr	r4, [pc, #60]	; (801dd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801dcee:	7823      	ldrb	r3, [r4, #0]
 801dcf0:	f3bf 8f5b 	dmb	ish
 801dcf4:	07db      	lsls	r3, r3, #31
 801dcf6:	d40b      	bmi.n	801dd10 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801dcf8:	4620      	mov	r0, r4
 801dcfa:	f006 fc50 	bl	802459e <__cxa_guard_acquire>
 801dcfe:	b138      	cbz	r0, 801dd10 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801dd00:	4620      	mov	r0, r4
 801dd02:	f006 fc58 	bl	80245b6 <__cxa_guard_release>
 801dd06:	4a06      	ldr	r2, [pc, #24]	; (801dd20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801dd08:	4909      	ldr	r1, [pc, #36]	; (801dd30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801dd0a:	480a      	ldr	r0, [pc, #40]	; (801dd34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801dd0c:	f006 fc3d 	bl	802458a <__aeabi_atexit>
 801dd10:	4b05      	ldr	r3, [pc, #20]	; (801dd28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801dd12:	632b      	str	r3, [r5, #48]	; 0x30
 801dd14:	4b07      	ldr	r3, [pc, #28]	; (801dd34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801dd16:	636b      	str	r3, [r5, #52]	; 0x34
 801dd18:	bd38      	pop	{r3, r4, r5, pc}
 801dd1a:	bf00      	nop
 801dd1c:	2000bd64 	.word	0x2000bd64
 801dd20:	20000000 	.word	0x20000000
 801dd24:	0801c6f3 	.word	0x0801c6f3
 801dd28:	20000074 	.word	0x20000074
 801dd2c:	2000bd68 	.word	0x2000bd68
 801dd30:	0801c6f1 	.word	0x0801c6f1
 801dd34:	20000078 	.word	0x20000078

0801dd38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801dd38:	b538      	push	{r3, r4, r5, lr}
 801dd3a:	4c15      	ldr	r4, [pc, #84]	; (801dd90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801dd3c:	4605      	mov	r5, r0
 801dd3e:	7823      	ldrb	r3, [r4, #0]
 801dd40:	f3bf 8f5b 	dmb	ish
 801dd44:	07da      	lsls	r2, r3, #31
 801dd46:	d40b      	bmi.n	801dd60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801dd48:	4620      	mov	r0, r4
 801dd4a:	f006 fc28 	bl	802459e <__cxa_guard_acquire>
 801dd4e:	b138      	cbz	r0, 801dd60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801dd50:	4620      	mov	r0, r4
 801dd52:	f006 fc30 	bl	80245b6 <__cxa_guard_release>
 801dd56:	4a0f      	ldr	r2, [pc, #60]	; (801dd94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801dd58:	490f      	ldr	r1, [pc, #60]	; (801dd98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801dd5a:	4810      	ldr	r0, [pc, #64]	; (801dd9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801dd5c:	f006 fc15 	bl	802458a <__aeabi_atexit>
 801dd60:	4c0f      	ldr	r4, [pc, #60]	; (801dda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801dd62:	7823      	ldrb	r3, [r4, #0]
 801dd64:	f3bf 8f5b 	dmb	ish
 801dd68:	07db      	lsls	r3, r3, #31
 801dd6a:	d40b      	bmi.n	801dd84 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801dd6c:	4620      	mov	r0, r4
 801dd6e:	f006 fc16 	bl	802459e <__cxa_guard_acquire>
 801dd72:	b138      	cbz	r0, 801dd84 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801dd74:	4620      	mov	r0, r4
 801dd76:	f006 fc1e 	bl	80245b6 <__cxa_guard_release>
 801dd7a:	4a06      	ldr	r2, [pc, #24]	; (801dd94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801dd7c:	4909      	ldr	r1, [pc, #36]	; (801dda4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801dd7e:	480a      	ldr	r0, [pc, #40]	; (801dda8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801dd80:	f006 fc03 	bl	802458a <__aeabi_atexit>
 801dd84:	4b05      	ldr	r3, [pc, #20]	; (801dd9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801dd86:	62ab      	str	r3, [r5, #40]	; 0x28
 801dd88:	4b07      	ldr	r3, [pc, #28]	; (801dda8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801dd8a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801dd8c:	bd38      	pop	{r3, r4, r5, pc}
 801dd8e:	bf00      	nop
 801dd90:	2000bd3c 	.word	0x2000bd3c
 801dd94:	20000000 	.word	0x20000000
 801dd98:	0801c6f7 	.word	0x0801c6f7
 801dd9c:	2000004c 	.word	0x2000004c
 801dda0:	2000bd40 	.word	0x2000bd40
 801dda4:	0801c6f5 	.word	0x0801c6f5
 801dda8:	20000050 	.word	0x20000050

0801ddac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ddac:	b510      	push	{r4, lr}
 801ddae:	4604      	mov	r4, r0
 801ddb0:	f7ff ff88 	bl	801dcc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ddb4:	4620      	mov	r0, r4
 801ddb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ddba:	f7ff bfbd 	b.w	801dd38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ddc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ddc0:	b538      	push	{r3, r4, r5, lr}
 801ddc2:	4c15      	ldr	r4, [pc, #84]	; (801de18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ddc4:	4605      	mov	r5, r0
 801ddc6:	7823      	ldrb	r3, [r4, #0]
 801ddc8:	f3bf 8f5b 	dmb	ish
 801ddcc:	07da      	lsls	r2, r3, #31
 801ddce:	d40b      	bmi.n	801dde8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	f006 fbe4 	bl	802459e <__cxa_guard_acquire>
 801ddd6:	b138      	cbz	r0, 801dde8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ddd8:	4620      	mov	r0, r4
 801ddda:	f006 fbec 	bl	80245b6 <__cxa_guard_release>
 801ddde:	4a0f      	ldr	r2, [pc, #60]	; (801de1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801dde0:	490f      	ldr	r1, [pc, #60]	; (801de20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801dde2:	4810      	ldr	r0, [pc, #64]	; (801de24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801dde4:	f006 fbd1 	bl	802458a <__aeabi_atexit>
 801dde8:	4c0f      	ldr	r4, [pc, #60]	; (801de28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ddea:	7823      	ldrb	r3, [r4, #0]
 801ddec:	f3bf 8f5b 	dmb	ish
 801ddf0:	07db      	lsls	r3, r3, #31
 801ddf2:	d40b      	bmi.n	801de0c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	f006 fbd2 	bl	802459e <__cxa_guard_acquire>
 801ddfa:	b138      	cbz	r0, 801de0c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ddfc:	4620      	mov	r0, r4
 801ddfe:	f006 fbda 	bl	80245b6 <__cxa_guard_release>
 801de02:	4a06      	ldr	r2, [pc, #24]	; (801de1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801de04:	4909      	ldr	r1, [pc, #36]	; (801de2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801de06:	480a      	ldr	r0, [pc, #40]	; (801de30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801de08:	f006 fbbf 	bl	802458a <__aeabi_atexit>
 801de0c:	4b05      	ldr	r3, [pc, #20]	; (801de24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801de0e:	642b      	str	r3, [r5, #64]	; 0x40
 801de10:	4b07      	ldr	r3, [pc, #28]	; (801de30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801de12:	646b      	str	r3, [r5, #68]	; 0x44
 801de14:	bd38      	pop	{r3, r4, r5, pc}
 801de16:	bf00      	nop
 801de18:	2000bd6c 	.word	0x2000bd6c
 801de1c:	20000000 	.word	0x20000000
 801de20:	0801c6eb 	.word	0x0801c6eb
 801de24:	2000007c 	.word	0x2000007c
 801de28:	2000bd70 	.word	0x2000bd70
 801de2c:	0801c6e9 	.word	0x0801c6e9
 801de30:	20000080 	.word	0x20000080

0801de34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801de34:	b538      	push	{r3, r4, r5, lr}
 801de36:	4c15      	ldr	r4, [pc, #84]	; (801de8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801de38:	4605      	mov	r5, r0
 801de3a:	7823      	ldrb	r3, [r4, #0]
 801de3c:	f3bf 8f5b 	dmb	ish
 801de40:	07da      	lsls	r2, r3, #31
 801de42:	d40b      	bmi.n	801de5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801de44:	4620      	mov	r0, r4
 801de46:	f006 fbaa 	bl	802459e <__cxa_guard_acquire>
 801de4a:	b138      	cbz	r0, 801de5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801de4c:	4620      	mov	r0, r4
 801de4e:	f006 fbb2 	bl	80245b6 <__cxa_guard_release>
 801de52:	4a0f      	ldr	r2, [pc, #60]	; (801de90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801de54:	490f      	ldr	r1, [pc, #60]	; (801de94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801de56:	4810      	ldr	r0, [pc, #64]	; (801de98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801de58:	f006 fb97 	bl	802458a <__aeabi_atexit>
 801de5c:	4c0f      	ldr	r4, [pc, #60]	; (801de9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801de5e:	7823      	ldrb	r3, [r4, #0]
 801de60:	f3bf 8f5b 	dmb	ish
 801de64:	07db      	lsls	r3, r3, #31
 801de66:	d40b      	bmi.n	801de80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801de68:	4620      	mov	r0, r4
 801de6a:	f006 fb98 	bl	802459e <__cxa_guard_acquire>
 801de6e:	b138      	cbz	r0, 801de80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801de70:	4620      	mov	r0, r4
 801de72:	f006 fba0 	bl	80245b6 <__cxa_guard_release>
 801de76:	4a06      	ldr	r2, [pc, #24]	; (801de90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801de78:	4909      	ldr	r1, [pc, #36]	; (801dea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801de7a:	480a      	ldr	r0, [pc, #40]	; (801dea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801de7c:	f006 fb85 	bl	802458a <__aeabi_atexit>
 801de80:	4b05      	ldr	r3, [pc, #20]	; (801de98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801de82:	63ab      	str	r3, [r5, #56]	; 0x38
 801de84:	4b07      	ldr	r3, [pc, #28]	; (801dea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801de86:	63eb      	str	r3, [r5, #60]	; 0x3c
 801de88:	bd38      	pop	{r3, r4, r5, pc}
 801de8a:	bf00      	nop
 801de8c:	2000bd4c 	.word	0x2000bd4c
 801de90:	20000000 	.word	0x20000000
 801de94:	0801c6ef 	.word	0x0801c6ef
 801de98:	2000005c 	.word	0x2000005c
 801de9c:	2000bd50 	.word	0x2000bd50
 801dea0:	0801c6ed 	.word	0x0801c6ed
 801dea4:	20000060 	.word	0x20000060

0801dea8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801dea8:	b510      	push	{r4, lr}
 801deaa:	4604      	mov	r4, r0
 801deac:	f7ff ff88 	bl	801ddc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801deb0:	4620      	mov	r0, r4
 801deb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deb6:	f7ff bfbd 	b.w	801de34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801debc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801debc:	b538      	push	{r3, r4, r5, lr}
 801debe:	4c15      	ldr	r4, [pc, #84]	; (801df14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801dec0:	4605      	mov	r5, r0
 801dec2:	7823      	ldrb	r3, [r4, #0]
 801dec4:	f3bf 8f5b 	dmb	ish
 801dec8:	07da      	lsls	r2, r3, #31
 801deca:	d40b      	bmi.n	801dee4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801decc:	4620      	mov	r0, r4
 801dece:	f006 fb66 	bl	802459e <__cxa_guard_acquire>
 801ded2:	b138      	cbz	r0, 801dee4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ded4:	4620      	mov	r0, r4
 801ded6:	f006 fb6e 	bl	80245b6 <__cxa_guard_release>
 801deda:	4a0f      	ldr	r2, [pc, #60]	; (801df18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801dedc:	490f      	ldr	r1, [pc, #60]	; (801df1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801dede:	4810      	ldr	r0, [pc, #64]	; (801df20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801dee0:	f006 fb53 	bl	802458a <__aeabi_atexit>
 801dee4:	4c0f      	ldr	r4, [pc, #60]	; (801df24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801dee6:	7823      	ldrb	r3, [r4, #0]
 801dee8:	f3bf 8f5b 	dmb	ish
 801deec:	07db      	lsls	r3, r3, #31
 801deee:	d40b      	bmi.n	801df08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801def0:	4620      	mov	r0, r4
 801def2:	f006 fb54 	bl	802459e <__cxa_guard_acquire>
 801def6:	b138      	cbz	r0, 801df08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801def8:	4620      	mov	r0, r4
 801defa:	f006 fb5c 	bl	80245b6 <__cxa_guard_release>
 801defe:	4a06      	ldr	r2, [pc, #24]	; (801df18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801df00:	4909      	ldr	r1, [pc, #36]	; (801df28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801df02:	480a      	ldr	r0, [pc, #40]	; (801df2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801df04:	f006 fb41 	bl	802458a <__aeabi_atexit>
 801df08:	4b05      	ldr	r3, [pc, #20]	; (801df20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801df0a:	652b      	str	r3, [r5, #80]	; 0x50
 801df0c:	4b07      	ldr	r3, [pc, #28]	; (801df2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801df0e:	656b      	str	r3, [r5, #84]	; 0x54
 801df10:	bd38      	pop	{r3, r4, r5, pc}
 801df12:	bf00      	nop
 801df14:	2000bd44 	.word	0x2000bd44
 801df18:	20000000 	.word	0x20000000
 801df1c:	0801c6e3 	.word	0x0801c6e3
 801df20:	20000054 	.word	0x20000054
 801df24:	2000bd48 	.word	0x2000bd48
 801df28:	0801c6e1 	.word	0x0801c6e1
 801df2c:	20000058 	.word	0x20000058

0801df30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801df30:	b538      	push	{r3, r4, r5, lr}
 801df32:	4c15      	ldr	r4, [pc, #84]	; (801df88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801df34:	4605      	mov	r5, r0
 801df36:	7823      	ldrb	r3, [r4, #0]
 801df38:	f3bf 8f5b 	dmb	ish
 801df3c:	07da      	lsls	r2, r3, #31
 801df3e:	d40b      	bmi.n	801df58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801df40:	4620      	mov	r0, r4
 801df42:	f006 fb2c 	bl	802459e <__cxa_guard_acquire>
 801df46:	b138      	cbz	r0, 801df58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801df48:	4620      	mov	r0, r4
 801df4a:	f006 fb34 	bl	80245b6 <__cxa_guard_release>
 801df4e:	4a0f      	ldr	r2, [pc, #60]	; (801df8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801df50:	490f      	ldr	r1, [pc, #60]	; (801df90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801df52:	4810      	ldr	r0, [pc, #64]	; (801df94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801df54:	f006 fb19 	bl	802458a <__aeabi_atexit>
 801df58:	4c0f      	ldr	r4, [pc, #60]	; (801df98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801df5a:	7823      	ldrb	r3, [r4, #0]
 801df5c:	f3bf 8f5b 	dmb	ish
 801df60:	07db      	lsls	r3, r3, #31
 801df62:	d40b      	bmi.n	801df7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801df64:	4620      	mov	r0, r4
 801df66:	f006 fb1a 	bl	802459e <__cxa_guard_acquire>
 801df6a:	b138      	cbz	r0, 801df7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801df6c:	4620      	mov	r0, r4
 801df6e:	f006 fb22 	bl	80245b6 <__cxa_guard_release>
 801df72:	4a06      	ldr	r2, [pc, #24]	; (801df8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801df74:	4909      	ldr	r1, [pc, #36]	; (801df9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801df76:	480a      	ldr	r0, [pc, #40]	; (801dfa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801df78:	f006 fb07 	bl	802458a <__aeabi_atexit>
 801df7c:	4b05      	ldr	r3, [pc, #20]	; (801df94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801df7e:	64ab      	str	r3, [r5, #72]	; 0x48
 801df80:	4b07      	ldr	r3, [pc, #28]	; (801dfa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801df82:	64eb      	str	r3, [r5, #76]	; 0x4c
 801df84:	bd38      	pop	{r3, r4, r5, pc}
 801df86:	bf00      	nop
 801df88:	2000bd34 	.word	0x2000bd34
 801df8c:	20000000 	.word	0x20000000
 801df90:	0801c6e7 	.word	0x0801c6e7
 801df94:	20000044 	.word	0x20000044
 801df98:	2000bd38 	.word	0x2000bd38
 801df9c:	0801c6e5 	.word	0x0801c6e5
 801dfa0:	20000048 	.word	0x20000048

0801dfa4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801dfa4:	b510      	push	{r4, lr}
 801dfa6:	4604      	mov	r4, r0
 801dfa8:	f7ff ff88 	bl	801debc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801dfac:	4620      	mov	r0, r4
 801dfae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfb2:	f7ff bfbd 	b.w	801df30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801dfb6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801dfb6:	b510      	push	{r4, lr}
 801dfb8:	4604      	mov	r4, r0
 801dfba:	f7ff fff3 	bl	801dfa4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801dfbe:	4620      	mov	r0, r4
 801dfc0:	f7ff ff72 	bl	801dea8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801dfc4:	4620      	mov	r0, r4
 801dfc6:	f7ff fe73 	bl	801dcb0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801dfca:	4620      	mov	r0, r4
 801dfcc:	f7ff fdf2 	bl	801dbb4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfd6:	f7ff bee9 	b.w	801ddac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801dfdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801dfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfe0:	b087      	sub	sp, #28
 801dfe2:	7888      	ldrb	r0, [r1, #2]
 801dfe4:	4616      	mov	r6, r2
 801dfe6:	9001      	str	r0, [sp, #4]
 801dfe8:	7848      	ldrb	r0, [r1, #1]
 801dfea:	9100      	str	r1, [sp, #0]
 801dfec:	9002      	str	r0, [sp, #8]
 801dfee:	7808      	ldrb	r0, [r1, #0]
 801dff0:	9901      	ldr	r1, [sp, #4]
 801dff2:	9003      	str	r0, [sp, #12]
 801dff4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801dff8:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801dffc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e000:	9902      	ldr	r1, [sp, #8]
 801e002:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e006:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e00a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e00e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e012:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e016:	9005      	str	r0, [sp, #20]
 801e018:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e01c:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e020:	2d00      	cmp	r5, #0
 801e022:	eb06 080a 	add.w	r8, r6, sl
 801e026:	db4a      	blt.n	801e0be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e028:	45a9      	cmp	r9, r5
 801e02a:	dd48      	ble.n	801e0be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e02c:	f1bc 0f00 	cmp.w	ip, #0
 801e030:	db43      	blt.n	801e0ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e032:	45e6      	cmp	lr, ip
 801e034:	dd41      	ble.n	801e0ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e036:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e03a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e03e:	441e      	add	r6, r3
 801e040:	f11c 0001 	adds.w	r0, ip, #1
 801e044:	d43e      	bmi.n	801e0c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e046:	4586      	cmp	lr, r0
 801e048:	dd3c      	ble.n	801e0c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e04a:	2a00      	cmp	r2, #0
 801e04c:	d03a      	beq.n	801e0c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e04e:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e052:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e056:	4418      	add	r0, r3
 801e058:	3501      	adds	r5, #1
 801e05a:	d437      	bmi.n	801e0cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e05c:	45a9      	cmp	r9, r5
 801e05e:	dd35      	ble.n	801e0cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e060:	b3a4      	cbz	r4, 801e0cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e062:	f1bc 0f00 	cmp.w	ip, #0
 801e066:	db2f      	blt.n	801e0c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e068:	45e6      	cmp	lr, ip
 801e06a:	dd2d      	ble.n	801e0c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e06c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e074:	441d      	add	r5, r3
 801e076:	f11c 0c01 	adds.w	ip, ip, #1
 801e07a:	d42a      	bmi.n	801e0d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e07c:	45e6      	cmp	lr, ip
 801e07e:	dd28      	ble.n	801e0d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e080:	b33a      	cbz	r2, 801e0d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e082:	44c6      	add	lr, r8
 801e084:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e088:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e08c:	4463      	add	r3, ip
 801e08e:	ea6f 0c07 	mvn.w	ip, r7
 801e092:	2a0f      	cmp	r2, #15
 801e094:	f896 a000 	ldrb.w	sl, [r6]
 801e098:	fa5f fc8c 	uxtb.w	ip, ip
 801e09c:	f890 b000 	ldrb.w	fp, [r0]
 801e0a0:	f895 9000 	ldrb.w	r9, [r5]
 801e0a4:	7819      	ldrb	r1, [r3, #0]
 801e0a6:	d801      	bhi.n	801e0ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e0a8:	2c0f      	cmp	r4, #15
 801e0aa:	d914      	bls.n	801e0d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e0ac:	4b40      	ldr	r3, [pc, #256]	; (801e1b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e0ae:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e0b2:	4a40      	ldr	r2, [pc, #256]	; (801e1b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e0b4:	4840      	ldr	r0, [pc, #256]	; (801e1b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e0b6:	f006 fa9b 	bl	80245f0 <__assert_func>
 801e0ba:	ae05      	add	r6, sp, #20
 801e0bc:	e7c0      	b.n	801e040 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e0be:	a805      	add	r0, sp, #20
 801e0c0:	4606      	mov	r6, r0
 801e0c2:	e7c9      	b.n	801e058 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e0c4:	a805      	add	r0, sp, #20
 801e0c6:	e7c7      	b.n	801e058 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e0c8:	ad05      	add	r5, sp, #20
 801e0ca:	e7d4      	b.n	801e076 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e0cc:	ab05      	add	r3, sp, #20
 801e0ce:	461d      	mov	r5, r3
 801e0d0:	e7dd      	b.n	801e08e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e0d2:	ab05      	add	r3, sp, #20
 801e0d4:	e7db      	b.n	801e08e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e0d6:	b292      	uxth	r2, r2
 801e0d8:	b2a4      	uxth	r4, r4
 801e0da:	fa1f fc8c 	uxth.w	ip, ip
 801e0de:	fb02 f804 	mul.w	r8, r2, r4
 801e0e2:	0112      	lsls	r2, r2, #4
 801e0e4:	b2bf      	uxth	r7, r7
 801e0e6:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e0ea:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e0ee:	eba2 0208 	sub.w	r2, r2, r8
 801e0f2:	b2a4      	uxth	r4, r4
 801e0f4:	b292      	uxth	r2, r2
 801e0f6:	ebae 0e04 	sub.w	lr, lr, r4
 801e0fa:	fb02 fb0b 	mul.w	fp, r2, fp
 801e0fe:	fa1f fe8e 	uxth.w	lr, lr
 801e102:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e106:	fb04 aa09 	mla	sl, r4, r9, sl
 801e10a:	fb08 aa01 	mla	sl, r8, r1, sl
 801e10e:	9903      	ldr	r1, [sp, #12]
 801e110:	fb11 f90c 	smulbb	r9, r1, ip
 801e114:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e118:	9900      	ldr	r1, [sp, #0]
 801e11a:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e11e:	fa1f fa8a 	uxth.w	sl, sl
 801e122:	f10a 0901 	add.w	r9, sl, #1
 801e126:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e12a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e12e:	f881 a000 	strb.w	sl, [r1]
 801e132:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e136:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e13a:	fb02 fa0a 	mul.w	sl, r2, sl
 801e13e:	9902      	ldr	r1, [sp, #8]
 801e140:	fb0e aa09 	mla	sl, lr, r9, sl
 801e144:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e148:	fb04 aa09 	mla	sl, r4, r9, sl
 801e14c:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e150:	fb08 a909 	mla	r9, r8, r9, sl
 801e154:	fb11 fa0c 	smulbb	sl, r1, ip
 801e158:	9900      	ldr	r1, [sp, #0]
 801e15a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e15e:	fb09 a907 	mla	r9, r9, r7, sl
 801e162:	fa1f f989 	uxth.w	r9, r9
 801e166:	f109 0a01 	add.w	sl, r9, #1
 801e16a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e16e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e172:	f881 9001 	strb.w	r9, [r1, #1]
 801e176:	7880      	ldrb	r0, [r0, #2]
 801e178:	78b6      	ldrb	r6, [r6, #2]
 801e17a:	4342      	muls	r2, r0
 801e17c:	78a8      	ldrb	r0, [r5, #2]
 801e17e:	789b      	ldrb	r3, [r3, #2]
 801e180:	fb0e 2206 	mla	r2, lr, r6, r2
 801e184:	fb04 2400 	mla	r4, r4, r0, r2
 801e188:	fb08 4803 	mla	r8, r8, r3, r4
 801e18c:	9b01      	ldr	r3, [sp, #4]
 801e18e:	fb13 fc0c 	smulbb	ip, r3, ip
 801e192:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e196:	fb08 c707 	mla	r7, r8, r7, ip
 801e19a:	b2bf      	uxth	r7, r7
 801e19c:	f107 0c01 	add.w	ip, r7, #1
 801e1a0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e1a4:	123f      	asrs	r7, r7, #8
 801e1a6:	708f      	strb	r7, [r1, #2]
 801e1a8:	b007      	add	sp, #28
 801e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1ae:	bf00      	nop
 801e1b0:	08028f07 	.word	0x08028f07
 801e1b4:	080293fe 	.word	0x080293fe
 801e1b8:	08028fd0 	.word	0x08028fd0

0801e1bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1c0:	ed2d 8b08 	vpush	{d8-d11}
 801e1c4:	b095      	sub	sp, #84	; 0x54
 801e1c6:	eeb0 aa40 	vmov.f32	s20, s0
 801e1ca:	eef0 9a60 	vmov.f32	s19, s1
 801e1ce:	930a      	str	r3, [sp, #40]	; 0x28
 801e1d0:	eeb0 9a41 	vmov.f32	s18, s2
 801e1d4:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e1d8:	eeb0 8a62 	vmov.f32	s16, s5
 801e1dc:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801e1de:	eef0 8a43 	vmov.f32	s17, s6
 801e1e2:	930c      	str	r3, [sp, #48]	; 0x30
 801e1e4:	eef0 ba44 	vmov.f32	s23, s8
 801e1e8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e1ec:	eeb0 ba64 	vmov.f32	s22, s9
 801e1f0:	9013      	str	r0, [sp, #76]	; 0x4c
 801e1f2:	eef0 aa45 	vmov.f32	s21, s10
 801e1f6:	9310      	str	r3, [sp, #64]	; 0x40
 801e1f8:	6860      	ldr	r0, [r4, #4]
 801e1fa:	910f      	str	r1, [sp, #60]	; 0x3c
 801e1fc:	9212      	str	r2, [sp, #72]	; 0x48
 801e1fe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e200:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801e204:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e208:	fb00 1303 	mla	r3, r0, r3, r1
 801e20c:	6821      	ldr	r1, [r4, #0]
 801e20e:	6854      	ldr	r4, [r2, #4]
 801e210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e214:	18cb      	adds	r3, r1, r3
 801e216:	930b      	str	r3, [sp, #44]	; 0x2c
 801e218:	6813      	ldr	r3, [r2, #0]
 801e21a:	930e      	str	r3, [sp, #56]	; 0x38
 801e21c:	1d23      	adds	r3, r4, #4
 801e21e:	9309      	str	r3, [sp, #36]	; 0x24
 801e220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e222:	43db      	mvns	r3, r3
 801e224:	b2db      	uxtb	r3, r3
 801e226:	930d      	str	r3, [sp, #52]	; 0x34
 801e228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	dc03      	bgt.n	801e236 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e22e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e230:	2b00      	cmp	r3, #0
 801e232:	f340 823c 	ble.w	801e6ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e238:	2b00      	cmp	r3, #0
 801e23a:	f340 8115 	ble.w	801e468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801e23e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e240:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e242:	1412      	asrs	r2, r2, #16
 801e244:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e248:	d431      	bmi.n	801e2ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e24a:	1c51      	adds	r1, r2, #1
 801e24c:	428d      	cmp	r5, r1
 801e24e:	dd31      	ble.n	801e2b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e250:	2b00      	cmp	r3, #0
 801e252:	db2f      	blt.n	801e2b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e254:	1c59      	adds	r1, r3, #1
 801e256:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e258:	4288      	cmp	r0, r1
 801e25a:	dd2b      	ble.n	801e2b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e25e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e260:	3b01      	subs	r3, #1
 801e262:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e264:	fb02 1203 	mla	r2, r2, r3, r1
 801e268:	1412      	asrs	r2, r2, #16
 801e26a:	d42d      	bmi.n	801e2c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e26c:	3201      	adds	r2, #1
 801e26e:	4295      	cmp	r5, r2
 801e270:	dd2a      	ble.n	801e2c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e272:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e274:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e276:	fb02 1303 	mla	r3, r2, r3, r1
 801e27a:	141b      	asrs	r3, r3, #16
 801e27c:	d424      	bmi.n	801e2c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e27e:	3301      	adds	r3, #1
 801e280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e282:	429a      	cmp	r2, r3
 801e284:	dd20      	ble.n	801e2c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e288:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801e28c:	f103 0c03 	add.w	ip, r3, #3
 801e290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e292:	9311      	str	r3, [sp, #68]	; 0x44
 801e294:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e296:	2b00      	cmp	r3, #0
 801e298:	f300 814f 	bgt.w	801e53a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801e29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e29e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e2a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e2a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2a8:	441a      	add	r2, r3
 801e2aa:	920b      	str	r2, [sp, #44]	; 0x2c
 801e2ac:	e0de      	b.n	801e46c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e2ae:	1c51      	adds	r1, r2, #1
 801e2b0:	f040 80cb 	bne.w	801e44a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2b4:	42aa      	cmp	r2, r5
 801e2b6:	f280 80c8 	bge.w	801e44a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2ba:	1c5f      	adds	r7, r3, #1
 801e2bc:	f2c0 80c5 	blt.w	801e44a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e2c2:	4293      	cmp	r3, r2
 801e2c4:	f280 80c1 	bge.w	801e44a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e2cc:	9311      	str	r3, [sp, #68]	; 0x44
 801e2ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	dde3      	ble.n	801e29c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801e2d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e2d6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e2d8:	141a      	asrs	r2, r3, #16
 801e2da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e2dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e2de:	1400      	asrs	r0, r0, #16
 801e2e0:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e2e4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e2e8:	f100 810e 	bmi.w	801e508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e2ec:	1c46      	adds	r6, r0, #1
 801e2ee:	42b5      	cmp	r5, r6
 801e2f0:	f340 810c 	ble.w	801e50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e2f4:	2a00      	cmp	r2, #0
 801e2f6:	f2c0 8109 	blt.w	801e50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e2fa:	1c56      	adds	r6, r2, #1
 801e2fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e2fe:	42b4      	cmp	r4, r6
 801e300:	f340 8104 	ble.w	801e50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e304:	fb02 0005 	mla	r0, r2, r5, r0
 801e308:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e30a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e30c:	f814 e000 	ldrb.w	lr, [r4, r0]
 801e310:	4402      	add	r2, r0
 801e312:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e314:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e318:	eb00 080e 	add.w	r8, r0, lr
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	f000 80e4 	beq.w	801e4ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801e322:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e326:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e32a:	4484      	add	ip, r0
 801e32c:	2900      	cmp	r1, #0
 801e32e:	f000 80e5 	beq.w	801e4fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801e332:	1950      	adds	r0, r2, r5
 801e334:	5d52      	ldrb	r2, [r2, r5]
 801e336:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e338:	7840      	ldrb	r0, [r0, #1]
 801e33a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e33e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e342:	4422      	add	r2, r4
 801e344:	4420      	add	r0, r4
 801e346:	b29b      	uxth	r3, r3
 801e348:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e34a:	b289      	uxth	r1, r1
 801e34c:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801e350:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e354:	fb03 fa01 	mul.w	sl, r3, r1
 801e358:	011b      	lsls	r3, r3, #4
 801e35a:	f89c e000 	ldrb.w	lr, [ip]
 801e35e:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801e362:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801e366:	eba3 030a 	sub.w	r3, r3, sl
 801e36a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e36c:	b289      	uxth	r1, r1
 801e36e:	b29b      	uxth	r3, r3
 801e370:	eba9 0901 	sub.w	r9, r9, r1
 801e374:	fb03 fe0e 	mul.w	lr, r3, lr
 801e378:	fa1f f989 	uxth.w	r9, r9
 801e37c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e380:	f892 b000 	ldrb.w	fp, [r2]
 801e384:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e388:	f890 b000 	ldrb.w	fp, [r0]
 801e38c:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e390:	f897 b000 	ldrb.w	fp, [r7]
 801e394:	fb1b fb04 	smulbb	fp, fp, r4
 801e398:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e39c:	fb0e be06 	mla	lr, lr, r6, fp
 801e3a0:	fa1f fe8e 	uxth.w	lr, lr
 801e3a4:	f10e 0b01 	add.w	fp, lr, #1
 801e3a8:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801e3ac:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801e3b0:	f887 b000 	strb.w	fp, [r7]
 801e3b4:	f89c e001 	ldrb.w	lr, [ip, #1]
 801e3b8:	f898 b001 	ldrb.w	fp, [r8, #1]
 801e3bc:	fb03 fe0e 	mul.w	lr, r3, lr
 801e3c0:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e3c4:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e3c8:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e3cc:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e3d0:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e3d4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e3d8:	fb1b fb04 	smulbb	fp, fp, r4
 801e3dc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e3e0:	fb0e be06 	mla	lr, lr, r6, fp
 801e3e4:	fa1f fe8e 	uxth.w	lr, lr
 801e3e8:	f10e 0b01 	add.w	fp, lr, #1
 801e3ec:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e3f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e3f4:	f887 e001 	strb.w	lr, [r7, #1]
 801e3f8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e3fc:	f898 e002 	ldrb.w	lr, [r8, #2]
 801e400:	fb03 f30c 	mul.w	r3, r3, ip
 801e404:	fb09 330e 	mla	r3, r9, lr, r3
 801e408:	f892 e002 	ldrb.w	lr, [r2, #2]
 801e40c:	7882      	ldrb	r2, [r0, #2]
 801e40e:	fb01 310e 	mla	r1, r1, lr, r3
 801e412:	fb0a 1a02 	mla	sl, sl, r2, r1
 801e416:	78b9      	ldrb	r1, [r7, #2]
 801e418:	fb11 f104 	smulbb	r1, r1, r4
 801e41c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e420:	fb0a 1606 	mla	r6, sl, r6, r1
 801e424:	b2b6      	uxth	r6, r6
 801e426:	1c73      	adds	r3, r6, #1
 801e428:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e42c:	1236      	asrs	r6, r6, #8
 801e42e:	70be      	strb	r6, [r7, #2]
 801e430:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e432:	3703      	adds	r7, #3
 801e434:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e436:	4413      	add	r3, r2
 801e438:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e43a:	9327      	str	r3, [sp, #156]	; 0x9c
 801e43c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e43e:	4413      	add	r3, r2
 801e440:	9328      	str	r3, [sp, #160]	; 0xa0
 801e442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e444:	3b01      	subs	r3, #1
 801e446:	9311      	str	r3, [sp, #68]	; 0x44
 801e448:	e741      	b.n	801e2ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801e44a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e44c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e44e:	4413      	add	r3, r2
 801e450:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e452:	9327      	str	r3, [sp, #156]	; 0x9c
 801e454:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e456:	4413      	add	r3, r2
 801e458:	9328      	str	r3, [sp, #160]	; 0xa0
 801e45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e45c:	3b01      	subs	r3, #1
 801e45e:	930a      	str	r3, [sp, #40]	; 0x28
 801e460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e462:	3303      	adds	r3, #3
 801e464:	930b      	str	r3, [sp, #44]	; 0x2c
 801e466:	e6e6      	b.n	801e236 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e468:	f47f aef8 	bne.w	801e25c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e46e:	2b00      	cmp	r3, #0
 801e470:	f340 811d 	ble.w	801e6ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e478:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e47a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e47e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e482:	eef0 6a48 	vmov.f32	s13, s16
 801e486:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e48a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e48e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e492:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801e496:	eef0 6a68 	vmov.f32	s13, s17
 801e49a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e49e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801e4a2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e4a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e4aa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e4ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e4b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e4b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e4ba:	ee18 2a10 	vmov	r2, s16
 801e4be:	eeb0 8a47 	vmov.f32	s16, s14
 801e4c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4c6:	ee18 2a90 	vmov	r2, s17
 801e4ca:	9329      	str	r3, [sp, #164]	; 0xa4
 801e4cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e4ce:	eef0 8a67 	vmov.f32	s17, s15
 801e4d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4d6:	932a      	str	r3, [sp, #168]	; 0xa8
 801e4d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4dc:	3b01      	subs	r3, #1
 801e4de:	930f      	str	r3, [sp, #60]	; 0x3c
 801e4e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e4e2:	bf08      	it	eq
 801e4e4:	4613      	moveq	r3, r2
 801e4e6:	930a      	str	r3, [sp, #40]	; 0x28
 801e4e8:	e69e      	b.n	801e228 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e4ea:	b151      	cbz	r1, 801e502 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801e4ec:	5d52      	ldrb	r2, [r2, r5]
 801e4ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e4f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e4f4:	4402      	add	r2, r0
 801e4f6:	4640      	mov	r0, r8
 801e4f8:	46c4      	mov	ip, r8
 801e4fa:	e724      	b.n	801e346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e4fc:	4640      	mov	r0, r8
 801e4fe:	4642      	mov	r2, r8
 801e500:	e721      	b.n	801e346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e502:	4640      	mov	r0, r8
 801e504:	4642      	mov	r2, r8
 801e506:	e7f7      	b.n	801e4f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801e508:	1c46      	adds	r6, r0, #1
 801e50a:	d191      	bne.n	801e430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e50c:	4285      	cmp	r5, r0
 801e50e:	dd8f      	ble.n	801e430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e510:	1c54      	adds	r4, r2, #1
 801e512:	db8d      	blt.n	801e430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e514:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e516:	4294      	cmp	r4, r2
 801e518:	dd8a      	ble.n	801e430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e51a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e51c:	9002      	str	r0, [sp, #8]
 801e51e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e520:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801e524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e528:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e52c:	e9cd 5300 	strd	r5, r3, [sp]
 801e530:	4639      	mov	r1, r7
 801e532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e534:	f7ff fd52 	bl	801dfdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801e538:	e77a      	b.n	801e430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e53a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801e53c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e53e:	1410      	asrs	r0, r2, #16
 801e540:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e544:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e546:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e548:	1412      	asrs	r2, r2, #16
 801e54a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e54e:	fb05 2000 	mla	r0, r5, r0, r2
 801e552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e554:	f814 8000 	ldrb.w	r8, [r4, r0]
 801e558:	4402      	add	r2, r0
 801e55a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e55c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e560:	eb00 0708 	add.w	r7, r0, r8
 801e564:	2b00      	cmp	r3, #0
 801e566:	f000 8093 	beq.w	801e690 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801e56a:	7856      	ldrb	r6, [r2, #1]
 801e56c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e570:	4406      	add	r6, r0
 801e572:	2900      	cmp	r1, #0
 801e574:	f000 8095 	beq.w	801e6a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801e578:	1950      	adds	r0, r2, r5
 801e57a:	5d52      	ldrb	r2, [r2, r5]
 801e57c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e57e:	7840      	ldrb	r0, [r0, #1]
 801e580:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e584:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e588:	4422      	add	r2, r4
 801e58a:	4420      	add	r0, r4
 801e58c:	b29b      	uxth	r3, r3
 801e58e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e590:	b289      	uxth	r1, r1
 801e592:	f10c 0c03 	add.w	ip, ip, #3
 801e596:	f814 b008 	ldrb.w	fp, [r4, r8]
 801e59a:	fb03 f901 	mul.w	r9, r3, r1
 801e59e:	011b      	lsls	r3, r3, #4
 801e5a0:	f896 8000 	ldrb.w	r8, [r6]
 801e5a4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e5a8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e5ac:	eba3 0309 	sub.w	r3, r3, r9
 801e5b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e5b2:	b289      	uxth	r1, r1
 801e5b4:	b29b      	uxth	r3, r3
 801e5b6:	ebae 0e01 	sub.w	lr, lr, r1
 801e5ba:	fb03 f808 	mul.w	r8, r3, r8
 801e5be:	fa1f fe8e 	uxth.w	lr, lr
 801e5c2:	fb0e 880b 	mla	r8, lr, fp, r8
 801e5c6:	f892 b000 	ldrb.w	fp, [r2]
 801e5ca:	fb01 880b 	mla	r8, r1, fp, r8
 801e5ce:	f890 b000 	ldrb.w	fp, [r0]
 801e5d2:	fb09 880b 	mla	r8, r9, fp, r8
 801e5d6:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801e5da:	fb1b fb04 	smulbb	fp, fp, r4
 801e5de:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e5e2:	fb08 b80a 	mla	r8, r8, sl, fp
 801e5e6:	fa1f f888 	uxth.w	r8, r8
 801e5ea:	f108 0b01 	add.w	fp, r8, #1
 801e5ee:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e5f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e5f6:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801e5fa:	f896 8001 	ldrb.w	r8, [r6, #1]
 801e5fe:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e602:	fb03 f808 	mul.w	r8, r3, r8
 801e606:	fb0e 880b 	mla	r8, lr, fp, r8
 801e60a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e60e:	fb01 880b 	mla	r8, r1, fp, r8
 801e612:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e616:	fb09 880b 	mla	r8, r9, fp, r8
 801e61a:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801e61e:	fb1b fb04 	smulbb	fp, fp, r4
 801e622:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e626:	fb08 b80a 	mla	r8, r8, sl, fp
 801e62a:	fa1f f888 	uxth.w	r8, r8
 801e62e:	f108 0b01 	add.w	fp, r8, #1
 801e632:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e636:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e63a:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801e63e:	78b6      	ldrb	r6, [r6, #2]
 801e640:	78bf      	ldrb	r7, [r7, #2]
 801e642:	4373      	muls	r3, r6
 801e644:	7896      	ldrb	r6, [r2, #2]
 801e646:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e648:	fb0e 3307 	mla	r3, lr, r7, r3
 801e64c:	fb01 3306 	mla	r3, r1, r6, r3
 801e650:	7886      	ldrb	r6, [r0, #2]
 801e652:	fb09 3906 	mla	r9, r9, r6, r3
 801e656:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801e65a:	fb13 f304 	smulbb	r3, r3, r4
 801e65e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e662:	fb09 390a 	mla	r9, r9, sl, r3
 801e666:	fa1f f989 	uxth.w	r9, r9
 801e66a:	f109 0301 	add.w	r3, r9, #1
 801e66e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e672:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e674:	4413      	add	r3, r2
 801e676:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e678:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e67c:	9327      	str	r3, [sp, #156]	; 0x9c
 801e67e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e680:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801e684:	4413      	add	r3, r2
 801e686:	9328      	str	r3, [sp, #160]	; 0xa0
 801e688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e68a:	3b01      	subs	r3, #1
 801e68c:	9311      	str	r3, [sp, #68]	; 0x44
 801e68e:	e601      	b.n	801e294 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e690:	b151      	cbz	r1, 801e6a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801e692:	5d52      	ldrb	r2, [r2, r5]
 801e694:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e69a:	4402      	add	r2, r0
 801e69c:	4638      	mov	r0, r7
 801e69e:	463e      	mov	r6, r7
 801e6a0:	e774      	b.n	801e58c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801e6a2:	4638      	mov	r0, r7
 801e6a4:	463a      	mov	r2, r7
 801e6a6:	e771      	b.n	801e58c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801e6a8:	4638      	mov	r0, r7
 801e6aa:	463a      	mov	r2, r7
 801e6ac:	e7f7      	b.n	801e69e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801e6ae:	b015      	add	sp, #84	; 0x54
 801e6b0:	ecbd 8b08 	vpop	{d8-d11}
 801e6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e6b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801e6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6bc:	780d      	ldrb	r5, [r1, #0]
 801e6be:	f891 9002 	ldrb.w	r9, [r1, #2]
 801e6c2:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801e6c6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e6ca:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801e6ce:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801e6d2:	f891 9001 	ldrb.w	r9, [r1, #1]
 801e6d6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801e6da:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801e6de:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801e6e2:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801e6e6:	9501      	str	r5, [sp, #4]
 801e6e8:	fb06 470c 	mla	r7, r6, ip, r4
 801e6ec:	2e00      	cmp	r6, #0
 801e6ee:	eb02 0e07 	add.w	lr, r2, r7
 801e6f2:	db46      	blt.n	801e782 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801e6f4:	45b0      	cmp	r8, r6
 801e6f6:	dd44      	ble.n	801e782 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801e6f8:	2c00      	cmp	r4, #0
 801e6fa:	db40      	blt.n	801e77e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801e6fc:	45a4      	cmp	ip, r4
 801e6fe:	dd3e      	ble.n	801e77e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801e700:	5dd7      	ldrb	r7, [r2, r7]
 801e702:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e706:	441f      	add	r7, r3
 801e708:	1c62      	adds	r2, r4, #1
 801e70a:	d43d      	bmi.n	801e788 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e70c:	4594      	cmp	ip, r2
 801e70e:	dd3b      	ble.n	801e788 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e710:	f1ba 0f00 	cmp.w	sl, #0
 801e714:	d038      	beq.n	801e788 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e716:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801e71a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e71e:	441d      	add	r5, r3
 801e720:	3601      	adds	r6, #1
 801e722:	d435      	bmi.n	801e790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e724:	45b0      	cmp	r8, r6
 801e726:	dd33      	ble.n	801e790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e728:	b390      	cbz	r0, 801e790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e72a:	2c00      	cmp	r4, #0
 801e72c:	db2e      	blt.n	801e78c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801e72e:	45a4      	cmp	ip, r4
 801e730:	dd2c      	ble.n	801e78c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801e732:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801e736:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e73a:	441e      	add	r6, r3
 801e73c:	1c62      	adds	r2, r4, #1
 801e73e:	d42a      	bmi.n	801e796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e740:	4594      	cmp	ip, r2
 801e742:	dd28      	ble.n	801e796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e744:	f1ba 0f00 	cmp.w	sl, #0
 801e748:	d025      	beq.n	801e796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e74a:	44f4      	add	ip, lr
 801e74c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e750:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e754:	4413      	add	r3, r2
 801e756:	f1ba 0f0f 	cmp.w	sl, #15
 801e75a:	f897 8000 	ldrb.w	r8, [r7]
 801e75e:	f895 9000 	ldrb.w	r9, [r5]
 801e762:	f896 e000 	ldrb.w	lr, [r6]
 801e766:	f893 c000 	ldrb.w	ip, [r3]
 801e76a:	d801      	bhi.n	801e770 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801e76c:	280f      	cmp	r0, #15
 801e76e:	d914      	bls.n	801e79a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801e770:	4b29      	ldr	r3, [pc, #164]	; (801e818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801e772:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e776:	4a29      	ldr	r2, [pc, #164]	; (801e81c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801e778:	4829      	ldr	r0, [pc, #164]	; (801e820 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801e77a:	f005 ff39 	bl	80245f0 <__assert_func>
 801e77e:	af01      	add	r7, sp, #4
 801e780:	e7c2      	b.n	801e708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801e782:	ad01      	add	r5, sp, #4
 801e784:	462f      	mov	r7, r5
 801e786:	e7cb      	b.n	801e720 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e788:	ad01      	add	r5, sp, #4
 801e78a:	e7c9      	b.n	801e720 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e78c:	ae01      	add	r6, sp, #4
 801e78e:	e7d5      	b.n	801e73c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801e790:	ab01      	add	r3, sp, #4
 801e792:	461e      	mov	r6, r3
 801e794:	e7df      	b.n	801e756 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e796:	ab01      	add	r3, sp, #4
 801e798:	e7dd      	b.n	801e756 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e79a:	fa1f f48a 	uxth.w	r4, sl
 801e79e:	b280      	uxth	r0, r0
 801e7a0:	fb04 fa00 	mul.w	sl, r4, r0
 801e7a4:	0124      	lsls	r4, r4, #4
 801e7a6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e7aa:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801e7ae:	b282      	uxth	r2, r0
 801e7b0:	eba4 000a 	sub.w	r0, r4, sl
 801e7b4:	ebab 0b02 	sub.w	fp, fp, r2
 801e7b8:	b280      	uxth	r0, r0
 801e7ba:	fa1f fb8b 	uxth.w	fp, fp
 801e7be:	fb00 f909 	mul.w	r9, r0, r9
 801e7c2:	fb0b 9808 	mla	r8, fp, r8, r9
 801e7c6:	fb02 8e0e 	mla	lr, r2, lr, r8
 801e7ca:	fb0a ec0c 	mla	ip, sl, ip, lr
 801e7ce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e7d2:	f881 c000 	strb.w	ip, [r1]
 801e7d6:	786c      	ldrb	r4, [r5, #1]
 801e7d8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e7dc:	4344      	muls	r4, r0
 801e7de:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801e7e2:	7874      	ldrb	r4, [r6, #1]
 801e7e4:	fb02 cc04 	mla	ip, r2, r4, ip
 801e7e8:	785c      	ldrb	r4, [r3, #1]
 801e7ea:	fb0a c404 	mla	r4, sl, r4, ip
 801e7ee:	1224      	asrs	r4, r4, #8
 801e7f0:	704c      	strb	r4, [r1, #1]
 801e7f2:	78ad      	ldrb	r5, [r5, #2]
 801e7f4:	78bc      	ldrb	r4, [r7, #2]
 801e7f6:	4368      	muls	r0, r5
 801e7f8:	fb0b 0b04 	mla	fp, fp, r4, r0
 801e7fc:	78b0      	ldrb	r0, [r6, #2]
 801e7fe:	fb02 b000 	mla	r0, r2, r0, fp
 801e802:	789a      	ldrb	r2, [r3, #2]
 801e804:	fb0a 0a02 	mla	sl, sl, r2, r0
 801e808:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e80c:	f881 a002 	strb.w	sl, [r1, #2]
 801e810:	b003      	add	sp, #12
 801e812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e816:	bf00      	nop
 801e818:	08028f07 	.word	0x08028f07
 801e81c:	080293fe 	.word	0x080293fe
 801e820:	08028fd0 	.word	0x08028fd0

0801e824 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e828:	ed2d 8b0a 	vpush	{d8-d12}
 801e82c:	b08f      	sub	sp, #60	; 0x3c
 801e82e:	eeb0 aa40 	vmov.f32	s20, s0
 801e832:	eef0 9a60 	vmov.f32	s19, s1
 801e836:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801e838:	eeb0 9a41 	vmov.f32	s18, s2
 801e83c:	9307      	str	r3, [sp, #28]
 801e83e:	eeb0 8a62 	vmov.f32	s16, s5
 801e842:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801e846:	eef0 8a43 	vmov.f32	s17, s6
 801e84a:	900d      	str	r0, [sp, #52]	; 0x34
 801e84c:	eeb0 ca44 	vmov.f32	s24, s8
 801e850:	6860      	ldr	r0, [r4, #4]
 801e852:	eef0 ba64 	vmov.f32	s23, s9
 801e856:	9309      	str	r3, [sp, #36]	; 0x24
 801e858:	eeb0 ba45 	vmov.f32	s22, s10
 801e85c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e860:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801e864:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801e868:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e86c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e86e:	fb00 1303 	mla	r3, r0, r3, r1
 801e872:	6821      	ldr	r1, [r4, #0]
 801e874:	6854      	ldr	r4, [r2, #4]
 801e876:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e87a:	3404      	adds	r4, #4
 801e87c:	18cb      	adds	r3, r1, r3
 801e87e:	9308      	str	r3, [sp, #32]
 801e880:	6813      	ldr	r3, [r2, #0]
 801e882:	930a      	str	r3, [sp, #40]	; 0x28
 801e884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e886:	2b00      	cmp	r3, #0
 801e888:	dc03      	bgt.n	801e892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	f340 81d2 	ble.w	801ec36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801e892:	9b07      	ldr	r3, [sp, #28]
 801e894:	2b00      	cmp	r3, #0
 801e896:	f340 80e3 	ble.w	801ea60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801e89a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e89c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e89e:	1412      	asrs	r2, r2, #16
 801e8a0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e8a4:	d42f      	bmi.n	801e906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801e8a6:	1c51      	adds	r1, r2, #1
 801e8a8:	428d      	cmp	r5, r1
 801e8aa:	dd2f      	ble.n	801e90c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	db2d      	blt.n	801e90c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e8b0:	1c59      	adds	r1, r3, #1
 801e8b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8b4:	4288      	cmp	r0, r1
 801e8b6:	dd29      	ble.n	801e90c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e8b8:	9b07      	ldr	r3, [sp, #28]
 801e8ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e8bc:	3b01      	subs	r3, #1
 801e8be:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e8c0:	fb02 1203 	mla	r2, r2, r3, r1
 801e8c4:	1412      	asrs	r2, r2, #16
 801e8c6:	d42b      	bmi.n	801e920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8c8:	3201      	adds	r2, #1
 801e8ca:	4295      	cmp	r5, r2
 801e8cc:	dd28      	ble.n	801e920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e8d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e8d2:	fb02 1303 	mla	r3, r2, r3, r1
 801e8d6:	141b      	asrs	r3, r3, #16
 801e8d8:	d422      	bmi.n	801e920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8da:	3301      	adds	r3, #1
 801e8dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8de:	429a      	cmp	r2, r3
 801e8e0:	dd1e      	ble.n	801e920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8e2:	9b08      	ldr	r3, [sp, #32]
 801e8e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e8e8:	f103 0803 	add.w	r8, r3, #3
 801e8ec:	f1ba 0f00 	cmp.w	sl, #0
 801e8f0:	f300 8119 	bgt.w	801eb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801e8f4:	9b07      	ldr	r3, [sp, #28]
 801e8f6:	9a08      	ldr	r2, [sp, #32]
 801e8f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e900:	441a      	add	r2, r3
 801e902:	9208      	str	r2, [sp, #32]
 801e904:	e0ae      	b.n	801ea64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801e906:	1c51      	adds	r1, r2, #1
 801e908:	f040 809b 	bne.w	801ea42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e90c:	42aa      	cmp	r2, r5
 801e90e:	f280 8098 	bge.w	801ea42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e912:	1c5a      	adds	r2, r3, #1
 801e914:	f2c0 8095 	blt.w	801ea42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e91a:	4293      	cmp	r3, r2
 801e91c:	f280 8091 	bge.w	801ea42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e920:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801e924:	f1bb 0f00 	cmp.w	fp, #0
 801e928:	dde4      	ble.n	801e8f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e92a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e92c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e92e:	141a      	asrs	r2, r3, #16
 801e930:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e934:	1400      	asrs	r0, r0, #16
 801e936:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e93a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e93e:	f100 80dc 	bmi.w	801eafa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801e942:	1c47      	adds	r7, r0, #1
 801e944:	42bd      	cmp	r5, r7
 801e946:	f340 80da 	ble.w	801eafe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e94a:	2a00      	cmp	r2, #0
 801e94c:	f2c0 80d7 	blt.w	801eafe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e950:	f102 0c01 	add.w	ip, r2, #1
 801e954:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e956:	4567      	cmp	r7, ip
 801e958:	f340 80d1 	ble.w	801eafe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e95c:	fb02 0005 	mla	r0, r2, r5, r0
 801e960:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e964:	f817 8000 	ldrb.w	r8, [r7, r0]
 801e968:	4402      	add	r2, r0
 801e96a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e96e:	eb04 0c08 	add.w	ip, r4, r8
 801e972:	2b00      	cmp	r3, #0
 801e974:	f000 80b3 	beq.w	801eade <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801e978:	7857      	ldrb	r7, [r2, #1]
 801e97a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e97e:	4427      	add	r7, r4
 801e980:	2900      	cmp	r1, #0
 801e982:	f000 80b4 	beq.w	801eaee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801e986:	1950      	adds	r0, r2, r5
 801e988:	5d52      	ldrb	r2, [r2, r5]
 801e98a:	7840      	ldrb	r0, [r0, #1]
 801e98c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e990:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e994:	4422      	add	r2, r4
 801e996:	4420      	add	r0, r4
 801e998:	b29b      	uxth	r3, r3
 801e99a:	f814 a008 	ldrb.w	sl, [r4, r8]
 801e99e:	b289      	uxth	r1, r1
 801e9a0:	f897 8000 	ldrb.w	r8, [r7]
 801e9a4:	fb03 f901 	mul.w	r9, r3, r1
 801e9a8:	011b      	lsls	r3, r3, #4
 801e9aa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e9ae:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e9b2:	eba3 0309 	sub.w	r3, r3, r9
 801e9b6:	b289      	uxth	r1, r1
 801e9b8:	b29b      	uxth	r3, r3
 801e9ba:	ebae 0e01 	sub.w	lr, lr, r1
 801e9be:	fb03 f808 	mul.w	r8, r3, r8
 801e9c2:	fa1f fe8e 	uxth.w	lr, lr
 801e9c6:	fb0e 880a 	mla	r8, lr, sl, r8
 801e9ca:	f892 a000 	ldrb.w	sl, [r2]
 801e9ce:	fb01 880a 	mla	r8, r1, sl, r8
 801e9d2:	f890 a000 	ldrb.w	sl, [r0]
 801e9d6:	fb09 880a 	mla	r8, r9, sl, r8
 801e9da:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e9de:	f886 8000 	strb.w	r8, [r6]
 801e9e2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e9e6:	f89c a001 	ldrb.w	sl, [ip, #1]
 801e9ea:	fb03 f808 	mul.w	r8, r3, r8
 801e9ee:	fb0e 880a 	mla	r8, lr, sl, r8
 801e9f2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e9f6:	fb01 880a 	mla	r8, r1, sl, r8
 801e9fa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e9fe:	fb09 880a 	mla	r8, r9, sl, r8
 801ea02:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ea06:	f886 8001 	strb.w	r8, [r6, #1]
 801ea0a:	78bf      	ldrb	r7, [r7, #2]
 801ea0c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ea10:	437b      	muls	r3, r7
 801ea12:	7892      	ldrb	r2, [r2, #2]
 801ea14:	fb0e 330c 	mla	r3, lr, ip, r3
 801ea18:	fb01 3102 	mla	r1, r1, r2, r3
 801ea1c:	7882      	ldrb	r2, [r0, #2]
 801ea1e:	fb09 1902 	mla	r9, r9, r2, r1
 801ea22:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea26:	f886 9002 	strb.w	r9, [r6, #2]
 801ea2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea2c:	3603      	adds	r6, #3
 801ea2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ea30:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea34:	4413      	add	r3, r2
 801ea36:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ea38:	9323      	str	r3, [sp, #140]	; 0x8c
 801ea3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea3c:	4413      	add	r3, r2
 801ea3e:	9324      	str	r3, [sp, #144]	; 0x90
 801ea40:	e770      	b.n	801e924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801ea42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ea46:	4413      	add	r3, r2
 801ea48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ea4a:	9323      	str	r3, [sp, #140]	; 0x8c
 801ea4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea4e:	4413      	add	r3, r2
 801ea50:	9324      	str	r3, [sp, #144]	; 0x90
 801ea52:	9b07      	ldr	r3, [sp, #28]
 801ea54:	3b01      	subs	r3, #1
 801ea56:	9307      	str	r3, [sp, #28]
 801ea58:	9b08      	ldr	r3, [sp, #32]
 801ea5a:	3303      	adds	r3, #3
 801ea5c:	9308      	str	r3, [sp, #32]
 801ea5e:	e718      	b.n	801e892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ea60:	f47f af2a 	bne.w	801e8b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801ea64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	f340 80e5 	ble.w	801ec36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801ea6c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ea70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ea72:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ea76:	eef0 6a48 	vmov.f32	s13, s16
 801ea7a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ea7e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ea82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea86:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ea8a:	eef0 6a68 	vmov.f32	s13, s17
 801ea8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea92:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801ea96:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ea9a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ea9e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eaa2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eaa6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eaaa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eaae:	ee18 2a10 	vmov	r2, s16
 801eab2:	eeb0 8a47 	vmov.f32	s16, s14
 801eab6:	fb92 f3f3 	sdiv	r3, r2, r3
 801eaba:	ee18 2a90 	vmov	r2, s17
 801eabe:	9325      	str	r3, [sp, #148]	; 0x94
 801eac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eac2:	eef0 8a67 	vmov.f32	s17, s15
 801eac6:	fb92 f3f3 	sdiv	r3, r2, r3
 801eaca:	9326      	str	r3, [sp, #152]	; 0x98
 801eacc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ead0:	3b01      	subs	r3, #1
 801ead2:	930b      	str	r3, [sp, #44]	; 0x2c
 801ead4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ead6:	bf08      	it	eq
 801ead8:	4613      	moveq	r3, r2
 801eada:	9307      	str	r3, [sp, #28]
 801eadc:	e6d2      	b.n	801e884 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801eade:	b149      	cbz	r1, 801eaf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801eae0:	5d52      	ldrb	r2, [r2, r5]
 801eae2:	4660      	mov	r0, ip
 801eae4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eae8:	4422      	add	r2, r4
 801eaea:	4667      	mov	r7, ip
 801eaec:	e754      	b.n	801e998 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801eaee:	4660      	mov	r0, ip
 801eaf0:	4662      	mov	r2, ip
 801eaf2:	e751      	b.n	801e998 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801eaf4:	4660      	mov	r0, ip
 801eaf6:	4662      	mov	r2, ip
 801eaf8:	e7f7      	b.n	801eaea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801eafa:	1c47      	adds	r7, r0, #1
 801eafc:	d195      	bne.n	801ea2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eafe:	4285      	cmp	r5, r0
 801eb00:	dd93      	ble.n	801ea2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb02:	1c57      	adds	r7, r2, #1
 801eb04:	db91      	blt.n	801ea2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb06:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801eb08:	4297      	cmp	r7, r2
 801eb0a:	dd8e      	ble.n	801ea2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb0c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801eb10:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801eb14:	e9cd 5700 	strd	r5, r7, [sp]
 801eb18:	4623      	mov	r3, r4
 801eb1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb1c:	4631      	mov	r1, r6
 801eb1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eb20:	f7ff fdca 	bl	801e6b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801eb24:	e781      	b.n	801ea2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801eb28:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801eb2a:	1410      	asrs	r0, r2, #16
 801eb2c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eb30:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801eb32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801eb34:	1412      	asrs	r2, r2, #16
 801eb36:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eb3a:	fb05 2000 	mla	r0, r5, r0, r2
 801eb3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb40:	f816 e000 	ldrb.w	lr, [r6, r0]
 801eb44:	4402      	add	r2, r0
 801eb46:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eb4a:	eb04 070e 	add.w	r7, r4, lr
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	d063      	beq.n	801ec1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801eb52:	7856      	ldrb	r6, [r2, #1]
 801eb54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eb58:	4426      	add	r6, r4
 801eb5a:	2900      	cmp	r1, #0
 801eb5c:	d065      	beq.n	801ec2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801eb5e:	1950      	adds	r0, r2, r5
 801eb60:	5d52      	ldrb	r2, [r2, r5]
 801eb62:	7840      	ldrb	r0, [r0, #1]
 801eb64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb6c:	4422      	add	r2, r4
 801eb6e:	4420      	add	r0, r4
 801eb70:	b29b      	uxth	r3, r3
 801eb72:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801eb76:	b289      	uxth	r1, r1
 801eb78:	f896 e000 	ldrb.w	lr, [r6]
 801eb7c:	f108 0803 	add.w	r8, r8, #3
 801eb80:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb84:	fb03 f901 	mul.w	r9, r3, r1
 801eb88:	011b      	lsls	r3, r3, #4
 801eb8a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801eb8e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801eb92:	eba3 0309 	sub.w	r3, r3, r9
 801eb96:	b289      	uxth	r1, r1
 801eb98:	b29b      	uxth	r3, r3
 801eb9a:	ebac 0c01 	sub.w	ip, ip, r1
 801eb9e:	fb03 fe0e 	mul.w	lr, r3, lr
 801eba2:	fa1f fc8c 	uxth.w	ip, ip
 801eba6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ebaa:	f892 b000 	ldrb.w	fp, [r2]
 801ebae:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ebb2:	f890 b000 	ldrb.w	fp, [r0]
 801ebb6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ebba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ebbe:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ebc2:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ebc6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ebca:	fb03 fe0e 	mul.w	lr, r3, lr
 801ebce:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ebd2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ebd6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ebda:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ebde:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ebe2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ebe6:	f808 ec05 	strb.w	lr, [r8, #-5]
 801ebea:	78b6      	ldrb	r6, [r6, #2]
 801ebec:	78bf      	ldrb	r7, [r7, #2]
 801ebee:	4373      	muls	r3, r6
 801ebf0:	7896      	ldrb	r6, [r2, #2]
 801ebf2:	7882      	ldrb	r2, [r0, #2]
 801ebf4:	fb0c 3307 	mla	r3, ip, r7, r3
 801ebf8:	fb01 3306 	mla	r3, r1, r6, r3
 801ebfc:	fb09 3902 	mla	r9, r9, r2, r3
 801ec00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ec02:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ec04:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec08:	4413      	add	r3, r2
 801ec0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ec0c:	f808 9c04 	strb.w	r9, [r8, #-4]
 801ec10:	9323      	str	r3, [sp, #140]	; 0x8c
 801ec12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec14:	4413      	add	r3, r2
 801ec16:	9324      	str	r3, [sp, #144]	; 0x90
 801ec18:	e668      	b.n	801e8ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801ec1a:	b149      	cbz	r1, 801ec30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801ec1c:	5d52      	ldrb	r2, [r2, r5]
 801ec1e:	4638      	mov	r0, r7
 801ec20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec24:	4422      	add	r2, r4
 801ec26:	463e      	mov	r6, r7
 801ec28:	e7a2      	b.n	801eb70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ec2a:	4638      	mov	r0, r7
 801ec2c:	463a      	mov	r2, r7
 801ec2e:	e79f      	b.n	801eb70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ec30:	4638      	mov	r0, r7
 801ec32:	463a      	mov	r2, r7
 801ec34:	e7f7      	b.n	801ec26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801ec36:	b00f      	add	sp, #60	; 0x3c
 801ec38:	ecbd 8b0a 	vpop	{d8-d12}
 801ec3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec44:	b087      	sub	sp, #28
 801ec46:	7888      	ldrb	r0, [r1, #2]
 801ec48:	9002      	str	r0, [sp, #8]
 801ec4a:	7848      	ldrb	r0, [r1, #1]
 801ec4c:	9e02      	ldr	r6, [sp, #8]
 801ec4e:	9003      	str	r0, [sp, #12]
 801ec50:	7808      	ldrb	r0, [r1, #0]
 801ec52:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801ec56:	9004      	str	r0, [sp, #16]
 801ec58:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ec5c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801ec60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801ec64:	9e03      	ldr	r6, [sp, #12]
 801ec66:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801ec6a:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ec6e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801ec72:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801ec76:	fb04 7508 	mla	r5, r4, r8, r7
 801ec7a:	2c00      	cmp	r4, #0
 801ec7c:	eb02 0905 	add.w	r9, r2, r5
 801ec80:	db45      	blt.n	801ed0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801ec82:	45a2      	cmp	sl, r4
 801ec84:	dd43      	ble.n	801ed0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801ec86:	2f00      	cmp	r7, #0
 801ec88:	db3f      	blt.n	801ed0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801ec8a:	45b8      	cmp	r8, r7
 801ec8c:	dd3d      	ble.n	801ed0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801ec8e:	5d52      	ldrb	r2, [r2, r5]
 801ec90:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ec94:	1c7a      	adds	r2, r7, #1
 801ec96:	d43d      	bmi.n	801ed14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ec98:	4590      	cmp	r8, r2
 801ec9a:	dd3b      	ble.n	801ed14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ec9c:	f1bc 0f00 	cmp.w	ip, #0
 801eca0:	d038      	beq.n	801ed14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801eca2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eca6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ecaa:	3401      	adds	r4, #1
 801ecac:	d436      	bmi.n	801ed1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ecae:	45a2      	cmp	sl, r4
 801ecb0:	dd34      	ble.n	801ed1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ecb2:	f1be 0f00 	cmp.w	lr, #0
 801ecb6:	d031      	beq.n	801ed1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ecb8:	2f00      	cmp	r7, #0
 801ecba:	db2d      	blt.n	801ed18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801ecbc:	45b8      	cmp	r8, r7
 801ecbe:	dd2b      	ble.n	801ed18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801ecc0:	f819 2008 	ldrb.w	r2, [r9, r8]
 801ecc4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801ecc8:	3701      	adds	r7, #1
 801ecca:	d409      	bmi.n	801ece0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801eccc:	45b8      	cmp	r8, r7
 801ecce:	dd07      	ble.n	801ece0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ecd0:	f1bc 0f00 	cmp.w	ip, #0
 801ecd4:	d004      	beq.n	801ece0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ecd6:	44c8      	add	r8, r9
 801ecd8:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ecdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ece0:	f1bc 0f0f 	cmp.w	ip, #15
 801ece4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801ece8:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801ecec:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ecf0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ecf4:	d802      	bhi.n	801ecfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801ecf6:	f1be 0f0f 	cmp.w	lr, #15
 801ecfa:	d911      	bls.n	801ed20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801ecfc:	4b77      	ldr	r3, [pc, #476]	; (801eedc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801ecfe:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ed02:	4a77      	ldr	r2, [pc, #476]	; (801eee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801ed04:	4877      	ldr	r0, [pc, #476]	; (801eee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801ed06:	f005 fc73 	bl	80245f0 <__assert_func>
 801ed0a:	4606      	mov	r6, r0
 801ed0c:	e7c2      	b.n	801ec94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801ed0e:	4605      	mov	r5, r0
 801ed10:	4606      	mov	r6, r0
 801ed12:	e7ca      	b.n	801ecaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ed14:	4605      	mov	r5, r0
 801ed16:	e7c8      	b.n	801ecaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ed18:	4604      	mov	r4, r0
 801ed1a:	e7d5      	b.n	801ecc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801ed1c:	4604      	mov	r4, r0
 801ed1e:	e7df      	b.n	801ece0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ed20:	fa1f fc8c 	uxth.w	ip, ip
 801ed24:	fa1f f28e 	uxth.w	r2, lr
 801ed28:	fb02 fe0c 	mul.w	lr, r2, ip
 801ed2c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ed30:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801ed34:	ebac 070e 	sub.w	r7, ip, lr
 801ed38:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ed3c:	b292      	uxth	r2, r2
 801ed3e:	b2bf      	uxth	r7, r7
 801ed40:	1a9b      	subs	r3, r3, r2
 801ed42:	fb07 fc0a 	mul.w	ip, r7, sl
 801ed46:	b29b      	uxth	r3, r3
 801ed48:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ed4c:	9301      	str	r3, [sp, #4]
 801ed4e:	fb02 cc09 	mla	ip, r2, r9, ip
 801ed52:	fb0e cc08 	mla	ip, lr, r8, ip
 801ed56:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ed5a:	9305      	str	r3, [sp, #20]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	f000 80b9 	beq.w	801eed4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801ed62:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ed66:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ed6a:	fb0b fc0c 	mul.w	ip, fp, ip
 801ed6e:	fb0b f606 	mul.w	r6, fp, r6
 801ed72:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ed76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed7a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ed7e:	44dc      	add	ip, fp
 801ed80:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801ed84:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ed88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed8c:	fb0a fb0b 	mul.w	fp, sl, fp
 801ed90:	fb0a fa05 	mul.w	sl, sl, r5
 801ed94:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801ed98:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ed9c:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801eda0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801eda4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801eda8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801edac:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801edb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edb4:	0a36      	lsrs	r6, r6, #8
 801edb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edba:	44dc      	add	ip, fp
 801edbc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801edc0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801edc4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801edc8:	fb09 fb0b 	mul.w	fp, r9, fp
 801edcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edd0:	fb09 f904 	mul.w	r9, r9, r4
 801edd4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801edd8:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801eddc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ede0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ede4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ede8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801edec:	fb0c fc07 	mul.w	ip, ip, r7
 801edf0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801edf4:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801edf8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801edfc:	445d      	add	r5, fp
 801edfe:	fb08 f404 	mul.w	r4, r8, r4
 801ee02:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ee06:	fb08 f800 	mul.w	r8, r8, r0
 801ee0a:	0a2d      	lsrs	r5, r5, #8
 801ee0c:	0a20      	lsrs	r0, r4, #8
 801ee0e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801ee12:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ee16:	fb07 f70a 	mul.w	r7, r7, sl
 801ee1a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ee1e:	4404      	add	r4, r0
 801ee20:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801ee24:	0a24      	lsrs	r4, r4, #8
 801ee26:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801ee2a:	9801      	ldr	r0, [sp, #4]
 801ee2c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ee30:	fb03 cc00 	mla	ip, r3, r0, ip
 801ee34:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ee38:	fb00 7606 	mla	r6, r0, r6, r7
 801ee3c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801ee40:	fb04 cc0e 	mla	ip, r4, lr, ip
 801ee44:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ee48:	b280      	uxth	r0, r0
 801ee4a:	9c04      	ldr	r4, [sp, #16]
 801ee4c:	fb05 cc02 	mla	ip, r5, r2, ip
 801ee50:	fb0e 6e08 	mla	lr, lr, r8, r6
 801ee54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee58:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801ee5c:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801ee60:	fb02 ec0c 	mla	ip, r2, ip, lr
 801ee64:	9a05      	ldr	r2, [sp, #20]
 801ee66:	4342      	muls	r2, r0
 801ee68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee6c:	1c53      	adds	r3, r2, #1
 801ee6e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ee72:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ee76:	ea45 0c0c 	orr.w	ip, r5, ip
 801ee7a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ee7e:	fa5f f28c 	uxtb.w	r2, ip
 801ee82:	b2db      	uxtb	r3, r3
 801ee84:	fb14 f403 	smulbb	r4, r4, r3
 801ee88:	fb02 4200 	mla	r2, r2, r0, r4
 801ee8c:	b292      	uxth	r2, r2
 801ee8e:	1c54      	adds	r4, r2, #1
 801ee90:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801ee94:	9c03      	ldr	r4, [sp, #12]
 801ee96:	fb14 f403 	smulbb	r4, r4, r3
 801ee9a:	1212      	asrs	r2, r2, #8
 801ee9c:	700a      	strb	r2, [r1, #0]
 801ee9e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801eea2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801eea6:	fb02 4200 	mla	r2, r2, r0, r4
 801eeaa:	b292      	uxth	r2, r2
 801eeac:	1c54      	adds	r4, r2, #1
 801eeae:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801eeb2:	1212      	asrs	r2, r2, #8
 801eeb4:	704a      	strb	r2, [r1, #1]
 801eeb6:	9a02      	ldr	r2, [sp, #8]
 801eeb8:	fb12 f303 	smulbb	r3, r2, r3
 801eebc:	fb0c 3c00 	mla	ip, ip, r0, r3
 801eec0:	fa1f fc8c 	uxth.w	ip, ip
 801eec4:	f10c 0301 	add.w	r3, ip, #1
 801eec8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eecc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eed0:	f881 c002 	strb.w	ip, [r1, #2]
 801eed4:	b007      	add	sp, #28
 801eed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeda:	bf00      	nop
 801eedc:	08028f07 	.word	0x08028f07
 801eee0:	080293fe 	.word	0x080293fe
 801eee4:	08028fd0 	.word	0x08028fd0

0801eee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeec:	ed2d 8b08 	vpush	{d8-d11}
 801eef0:	b09b      	sub	sp, #108	; 0x6c
 801eef2:	eeb0 aa40 	vmov.f32	s20, s0
 801eef6:	eef0 9a60 	vmov.f32	s19, s1
 801eefa:	930a      	str	r3, [sp, #40]	; 0x28
 801eefc:	eeb0 9a41 	vmov.f32	s18, s2
 801ef00:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801ef04:	eeb0 8a62 	vmov.f32	s16, s5
 801ef08:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801ef0a:	eef0 8a43 	vmov.f32	s17, s6
 801ef0e:	9312      	str	r3, [sp, #72]	; 0x48
 801ef10:	eef0 ba44 	vmov.f32	s23, s8
 801ef14:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801ef18:	eeb0 ba64 	vmov.f32	s22, s9
 801ef1c:	9019      	str	r0, [sp, #100]	; 0x64
 801ef1e:	eef0 aa45 	vmov.f32	s21, s10
 801ef22:	9114      	str	r1, [sp, #80]	; 0x50
 801ef24:	9317      	str	r3, [sp, #92]	; 0x5c
 801ef26:	6868      	ldr	r0, [r5, #4]
 801ef28:	9218      	str	r2, [sp, #96]	; 0x60
 801ef2a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801ef2c:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801ef30:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801ef34:	fb00 1303 	mla	r3, r0, r3, r1
 801ef38:	6829      	ldr	r1, [r5, #0]
 801ef3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef3e:	18cb      	adds	r3, r1, r3
 801ef40:	930d      	str	r3, [sp, #52]	; 0x34
 801ef42:	6813      	ldr	r3, [r2, #0]
 801ef44:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef46:	6853      	ldr	r3, [r2, #4]
 801ef48:	3304      	adds	r3, #4
 801ef4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ef4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	dc03      	bgt.n	801ef5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ef52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	f340 8352 	ble.w	801f5fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801ef5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	f340 81a2 	ble.w	801f2a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801ef62:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ef64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef66:	1412      	asrs	r2, r2, #16
 801ef68:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ef6c:	d431      	bmi.n	801efd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801ef6e:	1c51      	adds	r1, r2, #1
 801ef70:	428c      	cmp	r4, r1
 801ef72:	dd31      	ble.n	801efd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	db2f      	blt.n	801efd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ef78:	1c59      	adds	r1, r3, #1
 801ef7a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ef7c:	4288      	cmp	r0, r1
 801ef7e:	dd2b      	ble.n	801efd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ef80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef82:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ef84:	3b01      	subs	r3, #1
 801ef86:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ef88:	fb02 1203 	mla	r2, r2, r3, r1
 801ef8c:	1412      	asrs	r2, r2, #16
 801ef8e:	d42d      	bmi.n	801efec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ef90:	3201      	adds	r2, #1
 801ef92:	4294      	cmp	r4, r2
 801ef94:	dd2a      	ble.n	801efec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ef96:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ef98:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ef9a:	fb02 1303 	mla	r3, r2, r3, r1
 801ef9e:	141b      	asrs	r3, r3, #16
 801efa0:	d424      	bmi.n	801efec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801efa2:	3301      	adds	r3, #1
 801efa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efa6:	429a      	cmp	r2, r3
 801efa8:	dd20      	ble.n	801efec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801efaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efac:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801efb0:	f103 0e03 	add.w	lr, r3, #3
 801efb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efb6:	9315      	str	r3, [sp, #84]	; 0x54
 801efb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801efba:	2b00      	cmp	r3, #0
 801efbc:	f300 81de 	bgt.w	801f37c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801efc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801efc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efcc:	441a      	add	r2, r3
 801efce:	920d      	str	r2, [sp, #52]	; 0x34
 801efd0:	e16b      	b.n	801f2aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801efd2:	1c51      	adds	r1, r2, #1
 801efd4:	f040 8158 	bne.w	801f288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801efd8:	42a2      	cmp	r2, r4
 801efda:	f280 8155 	bge.w	801f288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801efde:	1c5a      	adds	r2, r3, #1
 801efe0:	f2c0 8152 	blt.w	801f288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801efe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efe6:	4293      	cmp	r3, r2
 801efe8:	f280 814e 	bge.w	801f288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801efec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801eff0:	9316      	str	r3, [sp, #88]	; 0x58
 801eff2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801eff6:	9315      	str	r3, [sp, #84]	; 0x54
 801eff8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801effa:	2b00      	cmp	r3, #0
 801effc:	dde0      	ble.n	801efc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801effe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f000:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f002:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f006:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f008:	141b      	asrs	r3, r3, #16
 801f00a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f00e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f010:	1412      	asrs	r2, r2, #16
 801f012:	f100 819a 	bmi.w	801f34a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f016:	1c55      	adds	r5, r2, #1
 801f018:	42ac      	cmp	r4, r5
 801f01a:	f340 8198 	ble.w	801f34e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f01e:	2b00      	cmp	r3, #0
 801f020:	f2c0 8195 	blt.w	801f34e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f024:	1c5d      	adds	r5, r3, #1
 801f026:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f028:	42af      	cmp	r7, r5
 801f02a:	f340 8190 	ble.w	801f34e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f02e:	fb03 2304 	mla	r3, r3, r4, r2
 801f032:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f034:	18d5      	adds	r5, r2, r3
 801f036:	5cd3      	ldrb	r3, [r2, r3]
 801f038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f03e:	0e1f      	lsrs	r7, r3, #24
 801f040:	2800      	cmp	r0, #0
 801f042:	f000 8171 	beq.w	801f328 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f046:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f04a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f04e:	920e      	str	r2, [sp, #56]	; 0x38
 801f050:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f054:	2900      	cmp	r1, #0
 801f056:	f000 8172 	beq.w	801f33e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f05a:	eb05 0c04 	add.w	ip, r5, r4
 801f05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f060:	5d2d      	ldrb	r5, [r5, r4]
 801f062:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f066:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f06a:	950b      	str	r5, [sp, #44]	; 0x2c
 801f06c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f070:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f072:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f076:	0e15      	lsrs	r5, r2, #24
 801f078:	920f      	str	r2, [sp, #60]	; 0x3c
 801f07a:	b280      	uxth	r0, r0
 801f07c:	b289      	uxth	r1, r1
 801f07e:	fb00 fa01 	mul.w	sl, r0, r1
 801f082:	0100      	lsls	r0, r0, #4
 801f084:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f088:	eba0 080a 	sub.w	r8, r0, sl
 801f08c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f090:	b289      	uxth	r1, r1
 801f092:	fa1f f888 	uxth.w	r8, r8
 801f096:	1a52      	subs	r2, r2, r1
 801f098:	fb08 f00e 	mul.w	r0, r8, lr
 801f09c:	b292      	uxth	r2, r2
 801f09e:	fb02 0007 	mla	r0, r2, r7, r0
 801f0a2:	fb01 0009 	mla	r0, r1, r9, r0
 801f0a6:	fb0a 0005 	mla	r0, sl, r5, r0
 801f0aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f0ae:	2800      	cmp	r0, #0
 801f0b0:	f000 80dd 	beq.w	801f26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f0b4:	2fff      	cmp	r7, #255	; 0xff
 801f0b6:	d01a      	beq.n	801f0ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f0b8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f0bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f0c0:	fb07 fc0c 	mul.w	ip, r7, ip
 801f0c4:	435f      	muls	r7, r3
 801f0c6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f0ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f0ce:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f0d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f0d6:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f0da:	4463      	add	r3, ip
 801f0dc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f0e0:	0a1b      	lsrs	r3, r3, #8
 801f0e2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f0e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f0ea:	ea43 030b 	orr.w	r3, r3, fp
 801f0ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f0f2:	d01e      	beq.n	801f132 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f0f4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f0f6:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f0fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f0fe:	fb0e fb0b 	mul.w	fp, lr, fp
 801f102:	fb0e fe07 	mul.w	lr, lr, r7
 801f106:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f10a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f10e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f112:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f116:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f11a:	44dc      	add	ip, fp
 801f11c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f120:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f124:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f128:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f12c:	ea4c 070e 	orr.w	r7, ip, lr
 801f130:	970e      	str	r7, [sp, #56]	; 0x38
 801f132:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f136:	d01e      	beq.n	801f176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f138:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f13a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f13e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f142:	fb09 fe0e 	mul.w	lr, r9, lr
 801f146:	fb09 f907 	mul.w	r9, r9, r7
 801f14a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f14e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f152:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f156:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f15a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f15e:	44f4      	add	ip, lr
 801f160:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f164:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f168:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f16c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f170:	ea4c 0709 	orr.w	r7, ip, r9
 801f174:	970b      	str	r7, [sp, #44]	; 0x2c
 801f176:	2dff      	cmp	r5, #255	; 0xff
 801f178:	d01c      	beq.n	801f1b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f17a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f17c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f180:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f184:	fb05 fe0e 	mul.w	lr, r5, lr
 801f188:	437d      	muls	r5, r7
 801f18a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f18e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f192:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801f196:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f19a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f19e:	44f4      	add	ip, lr
 801f1a0:	0a2d      	lsrs	r5, r5, #8
 801f1a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1a6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f1aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1ae:	ea4c 0505 	orr.w	r5, ip, r5
 801f1b2:	950f      	str	r5, [sp, #60]	; 0x3c
 801f1b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f1b6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f1ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f1be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f1c2:	fb08 f505 	mul.w	r5, r8, r5
 801f1c6:	fb02 5507 	mla	r5, r2, r7, r5
 801f1ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f1cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f1d0:	fb01 5507 	mla	r5, r1, r7, r5
 801f1d4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f1d6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f1da:	fb0a 5507 	mla	r5, sl, r7, r5
 801f1de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f1e0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f1e4:	0a2d      	lsrs	r5, r5, #8
 801f1e6:	fb08 f807 	mul.w	r8, r8, r7
 801f1ea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f1ee:	fb02 8303 	mla	r3, r2, r3, r8
 801f1f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f1f4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f1f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f1fa:	fb01 330c 	mla	r3, r1, ip, r3
 801f1fe:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f202:	fb0a 3a01 	mla	sl, sl, r1, r3
 801f206:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f208:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f20a:	4343      	muls	r3, r0
 801f20c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f210:	1c58      	adds	r0, r3, #1
 801f212:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f216:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f21a:	ea45 050a 	orr.w	r5, r5, sl
 801f21e:	7833      	ldrb	r3, [r6, #0]
 801f220:	b2ea      	uxtb	r2, r5
 801f222:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f226:	fb12 f201 	smulbb	r2, r2, r1
 801f22a:	b2c0      	uxtb	r0, r0
 801f22c:	fb03 2300 	mla	r3, r3, r0, r2
 801f230:	b29b      	uxth	r3, r3
 801f232:	1c5a      	adds	r2, r3, #1
 801f234:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f238:	7872      	ldrb	r2, [r6, #1]
 801f23a:	fb12 f200 	smulbb	r2, r2, r0
 801f23e:	121b      	asrs	r3, r3, #8
 801f240:	7033      	strb	r3, [r6, #0]
 801f242:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f246:	0c2d      	lsrs	r5, r5, #16
 801f248:	fb03 2301 	mla	r3, r3, r1, r2
 801f24c:	b29b      	uxth	r3, r3
 801f24e:	1c5a      	adds	r2, r3, #1
 801f250:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f254:	121b      	asrs	r3, r3, #8
 801f256:	7073      	strb	r3, [r6, #1]
 801f258:	78b3      	ldrb	r3, [r6, #2]
 801f25a:	fb13 f000 	smulbb	r0, r3, r0
 801f25e:	fb05 0501 	mla	r5, r5, r1, r0
 801f262:	b2ad      	uxth	r5, r5
 801f264:	1c6b      	adds	r3, r5, #1
 801f266:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f26a:	122d      	asrs	r5, r5, #8
 801f26c:	70b5      	strb	r5, [r6, #2]
 801f26e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f270:	3603      	adds	r6, #3
 801f272:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f274:	4413      	add	r3, r2
 801f276:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f278:	932d      	str	r3, [sp, #180]	; 0xb4
 801f27a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f27c:	4413      	add	r3, r2
 801f27e:	932e      	str	r3, [sp, #184]	; 0xb8
 801f280:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f282:	3b01      	subs	r3, #1
 801f284:	9316      	str	r3, [sp, #88]	; 0x58
 801f286:	e6b7      	b.n	801eff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f288:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f28a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f28c:	4413      	add	r3, r2
 801f28e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f290:	932d      	str	r3, [sp, #180]	; 0xb4
 801f292:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f294:	4413      	add	r3, r2
 801f296:	932e      	str	r3, [sp, #184]	; 0xb8
 801f298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f29a:	3b01      	subs	r3, #1
 801f29c:	930a      	str	r3, [sp, #40]	; 0x28
 801f29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f2a0:	3303      	adds	r3, #3
 801f2a2:	930d      	str	r3, [sp, #52]	; 0x34
 801f2a4:	e659      	b.n	801ef5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f2a6:	f47f ae6b 	bne.w	801ef80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f2aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	f340 81a6 	ble.w	801f5fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f2b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f2b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f2bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f2c0:	eef0 6a48 	vmov.f32	s13, s16
 801f2c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f2c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f2cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2d0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801f2d4:	eef0 6a68 	vmov.f32	s13, s17
 801f2d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2dc:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801f2e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f2e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f2e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f2ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f2f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f2f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f2f8:	ee18 2a10 	vmov	r2, s16
 801f2fc:	eeb0 8a47 	vmov.f32	s16, s14
 801f300:	fb92 f3f3 	sdiv	r3, r2, r3
 801f304:	ee18 2a90 	vmov	r2, s17
 801f308:	932f      	str	r3, [sp, #188]	; 0xbc
 801f30a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f30c:	eef0 8a67 	vmov.f32	s17, s15
 801f310:	fb92 f3f3 	sdiv	r3, r2, r3
 801f314:	9330      	str	r3, [sp, #192]	; 0xc0
 801f316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f318:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f31a:	3b01      	subs	r3, #1
 801f31c:	9314      	str	r3, [sp, #80]	; 0x50
 801f31e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f320:	bf08      	it	eq
 801f322:	4613      	moveq	r3, r2
 801f324:	930a      	str	r3, [sp, #40]	; 0x28
 801f326:	e611      	b.n	801ef4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f328:	b161      	cbz	r1, 801f344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801f32a:	5d2a      	ldrb	r2, [r5, r4]
 801f32c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f32e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f332:	25ff      	movs	r5, #255	; 0xff
 801f334:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f338:	920b      	str	r2, [sp, #44]	; 0x2c
 801f33a:	46ae      	mov	lr, r5
 801f33c:	e69d      	b.n	801f07a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f33e:	25ff      	movs	r5, #255	; 0xff
 801f340:	46a9      	mov	r9, r5
 801f342:	e69a      	b.n	801f07a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f344:	25ff      	movs	r5, #255	; 0xff
 801f346:	46a9      	mov	r9, r5
 801f348:	e7f7      	b.n	801f33a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801f34a:	1c57      	adds	r7, r2, #1
 801f34c:	d18f      	bne.n	801f26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f34e:	4294      	cmp	r4, r2
 801f350:	dd8d      	ble.n	801f26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f352:	1c5d      	adds	r5, r3, #1
 801f354:	db8b      	blt.n	801f26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f356:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f358:	429d      	cmp	r5, r3
 801f35a:	dd88      	ble.n	801f26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f35c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801f35e:	9202      	str	r2, [sp, #8]
 801f360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f362:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801f366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f368:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f36a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f36e:	e9cd 4300 	strd	r4, r3, [sp]
 801f372:	4631      	mov	r1, r6
 801f374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f376:	f7ff fc63 	bl	801ec40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f37a:	e778      	b.n	801f26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f37c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f37e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f380:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f384:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f386:	1412      	asrs	r2, r2, #16
 801f388:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f38c:	141b      	asrs	r3, r3, #16
 801f38e:	fb04 2303 	mla	r3, r4, r3, r2
 801f392:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f394:	18d5      	adds	r5, r2, r3
 801f396:	5cd3      	ldrb	r3, [r2, r3]
 801f398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f39e:	0e1e      	lsrs	r6, r3, #24
 801f3a0:	2900      	cmp	r1, #0
 801f3a2:	f000 811b 	beq.w	801f5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801f3a6:	786a      	ldrb	r2, [r5, #1]
 801f3a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f3aa:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f3ae:	9210      	str	r2, [sp, #64]	; 0x40
 801f3b0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f3b4:	2800      	cmp	r0, #0
 801f3b6:	f000 811c 	beq.w	801f5f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801f3ba:	192a      	adds	r2, r5, r4
 801f3bc:	5d2d      	ldrb	r5, [r5, r4]
 801f3be:	7852      	ldrb	r2, [r2, #1]
 801f3c0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f3c4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f3c8:	950c      	str	r5, [sp, #48]	; 0x30
 801f3ca:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f3ce:	0e15      	lsrs	r5, r2, #24
 801f3d0:	9211      	str	r2, [sp, #68]	; 0x44
 801f3d2:	b289      	uxth	r1, r1
 801f3d4:	b280      	uxth	r0, r0
 801f3d6:	fb01 fa00 	mul.w	sl, r1, r0
 801f3da:	0109      	lsls	r1, r1, #4
 801f3dc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f3e0:	eba1 080a 	sub.w	r8, r1, sl
 801f3e4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f3e8:	b280      	uxth	r0, r0
 801f3ea:	fa1f f888 	uxth.w	r8, r8
 801f3ee:	1a12      	subs	r2, r2, r0
 801f3f0:	fb08 f10c 	mul.w	r1, r8, ip
 801f3f4:	b292      	uxth	r2, r2
 801f3f6:	fb02 1106 	mla	r1, r2, r6, r1
 801f3fa:	fb00 1109 	mla	r1, r0, r9, r1
 801f3fe:	fb0a 1105 	mla	r1, sl, r5, r1
 801f402:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f406:	2900      	cmp	r1, #0
 801f408:	f000 80da 	beq.w	801f5c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801f40c:	2eff      	cmp	r6, #255	; 0xff
 801f40e:	d016      	beq.n	801f43e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801f410:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f418:	4377      	muls	r7, r6
 801f41a:	435e      	muls	r6, r3
 801f41c:	0a3b      	lsrs	r3, r7, #8
 801f41e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f422:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f426:	443b      	add	r3, r7
 801f428:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801f42c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f430:	0a1b      	lsrs	r3, r3, #8
 801f432:	0a3f      	lsrs	r7, r7, #8
 801f434:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f438:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f43c:	433b      	orrs	r3, r7
 801f43e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f442:	d01d      	beq.n	801f480 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801f444:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f446:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f448:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f44c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f450:	fb0c f606 	mul.w	r6, ip, r6
 801f454:	fb0c fc07 	mul.w	ip, ip, r7
 801f458:	0a37      	lsrs	r7, r6, #8
 801f45a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f45e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f462:	4437      	add	r7, r6
 801f464:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801f468:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801f46c:	0a3f      	lsrs	r7, r7, #8
 801f46e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f472:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f476:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f47a:	ea47 060c 	orr.w	r6, r7, ip
 801f47e:	9610      	str	r6, [sp, #64]	; 0x40
 801f480:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f484:	d01d      	beq.n	801f4c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801f486:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f488:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f48c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f490:	fb09 fc0c 	mul.w	ip, r9, ip
 801f494:	fb09 f906 	mul.w	r9, r9, r6
 801f498:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f49c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f4a0:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801f4a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f4a8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f4ac:	4467      	add	r7, ip
 801f4ae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f4b2:	0a3f      	lsrs	r7, r7, #8
 801f4b4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f4b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f4bc:	ea47 0609 	orr.w	r6, r7, r9
 801f4c0:	960c      	str	r6, [sp, #48]	; 0x30
 801f4c2:	2dff      	cmp	r5, #255	; 0xff
 801f4c4:	d01a      	beq.n	801f4fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801f4c6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f4c8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f4cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f4d0:	fb05 fc0c 	mul.w	ip, r5, ip
 801f4d4:	4375      	muls	r5, r6
 801f4d6:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f4da:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f4de:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f4e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f4e6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f4ea:	4467      	add	r7, ip
 801f4ec:	0a2d      	lsrs	r5, r5, #8
 801f4ee:	0a3f      	lsrs	r7, r7, #8
 801f4f0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f4f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f4f8:	433d      	orrs	r5, r7
 801f4fa:	9511      	str	r5, [sp, #68]	; 0x44
 801f4fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f4fe:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801f502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f506:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f50a:	fb08 f505 	mul.w	r5, r8, r5
 801f50e:	fb02 5506 	mla	r5, r2, r6, r5
 801f512:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f514:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f518:	fb00 5506 	mla	r5, r0, r6, r5
 801f51c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f51e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f522:	fb0a 5506 	mla	r5, sl, r6, r5
 801f526:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f528:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f52c:	0a2d      	lsrs	r5, r5, #8
 801f52e:	fb08 f806 	mul.w	r8, r8, r6
 801f532:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f536:	fb02 8303 	mla	r3, r2, r3, r8
 801f53a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f53c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f540:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f542:	fb00 3307 	mla	r3, r0, r7, r3
 801f546:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f54a:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801f54e:	fb01 f30b 	mul.w	r3, r1, fp
 801f552:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f556:	1c59      	adds	r1, r3, #1
 801f558:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f55c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f560:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f564:	ea45 050c 	orr.w	r5, r5, ip
 801f568:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f56c:	b2ea      	uxtb	r2, r5
 801f56e:	b2c9      	uxtb	r1, r1
 801f570:	fb12 f20b 	smulbb	r2, r2, fp
 801f574:	fb03 2301 	mla	r3, r3, r1, r2
 801f578:	b29b      	uxth	r3, r3
 801f57a:	1c5a      	adds	r2, r3, #1
 801f57c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f580:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f584:	fb12 f201 	smulbb	r2, r2, r1
 801f588:	121b      	asrs	r3, r3, #8
 801f58a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f58e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f592:	0c2d      	lsrs	r5, r5, #16
 801f594:	fb03 230b 	mla	r3, r3, fp, r2
 801f598:	b29b      	uxth	r3, r3
 801f59a:	1c5a      	adds	r2, r3, #1
 801f59c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f5a0:	121b      	asrs	r3, r3, #8
 801f5a2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f5a6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f5aa:	fb13 f101 	smulbb	r1, r3, r1
 801f5ae:	fb05 150b 	mla	r5, r5, fp, r1
 801f5b2:	b2ad      	uxth	r5, r5
 801f5b4:	1c69      	adds	r1, r5, #1
 801f5b6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f5ba:	122d      	asrs	r5, r5, #8
 801f5bc:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f5c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f5c2:	f10e 0e03 	add.w	lr, lr, #3
 801f5c6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f5c8:	4413      	add	r3, r2
 801f5ca:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f5cc:	932d      	str	r3, [sp, #180]	; 0xb4
 801f5ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f5d0:	4413      	add	r3, r2
 801f5d2:	932e      	str	r3, [sp, #184]	; 0xb8
 801f5d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f5d6:	3b01      	subs	r3, #1
 801f5d8:	9315      	str	r3, [sp, #84]	; 0x54
 801f5da:	e4ed      	b.n	801efb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f5dc:	b160      	cbz	r0, 801f5f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801f5de:	5d2a      	ldrb	r2, [r5, r4]
 801f5e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f5e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f5e6:	25ff      	movs	r5, #255	; 0xff
 801f5e8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f5ec:	920c      	str	r2, [sp, #48]	; 0x30
 801f5ee:	46ac      	mov	ip, r5
 801f5f0:	e6ef      	b.n	801f3d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801f5f2:	25ff      	movs	r5, #255	; 0xff
 801f5f4:	46a9      	mov	r9, r5
 801f5f6:	e6ec      	b.n	801f3d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801f5f8:	25ff      	movs	r5, #255	; 0xff
 801f5fa:	46a9      	mov	r9, r5
 801f5fc:	e7f7      	b.n	801f5ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801f5fe:	b01b      	add	sp, #108	; 0x6c
 801f600:	ecbd 8b08 	vpop	{d8-d11}
 801f604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f608 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f60c:	b085      	sub	sp, #20
 801f60e:	7888      	ldrb	r0, [r1, #2]
 801f610:	4692      	mov	sl, r2
 801f612:	4698      	mov	r8, r3
 801f614:	9000      	str	r0, [sp, #0]
 801f616:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f61a:	7848      	ldrb	r0, [r1, #1]
 801f61c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f620:	9001      	str	r0, [sp, #4]
 801f622:	7808      	ldrb	r0, [r1, #0]
 801f624:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f628:	9002      	str	r0, [sp, #8]
 801f62a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f62e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801f632:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801f636:	fb04 560c 	mla	r6, r4, ip, r5
 801f63a:	2c00      	cmp	r4, #0
 801f63c:	eb02 0e06 	add.w	lr, r2, r6
 801f640:	9a00      	ldr	r2, [sp, #0]
 801f642:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f646:	9a01      	ldr	r2, [sp, #4]
 801f648:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f64c:	db3e      	blt.n	801f6cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801f64e:	45a1      	cmp	r9, r4
 801f650:	dd3c      	ble.n	801f6cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801f652:	2d00      	cmp	r5, #0
 801f654:	db38      	blt.n	801f6c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801f656:	45ac      	cmp	ip, r5
 801f658:	dd36      	ble.n	801f6c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801f65a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801f65e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801f662:	1c6e      	adds	r6, r5, #1
 801f664:	d435      	bmi.n	801f6d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f666:	45b4      	cmp	ip, r6
 801f668:	dd33      	ble.n	801f6d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f66a:	b393      	cbz	r3, 801f6d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f66c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801f670:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801f674:	3401      	adds	r4, #1
 801f676:	d430      	bmi.n	801f6da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f678:	45a1      	cmp	r9, r4
 801f67a:	dd2e      	ble.n	801f6da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f67c:	b36f      	cbz	r7, 801f6da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f67e:	2d00      	cmp	r5, #0
 801f680:	db29      	blt.n	801f6d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801f682:	45ac      	cmp	ip, r5
 801f684:	dd27      	ble.n	801f6d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801f686:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801f68a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801f68e:	3501      	adds	r5, #1
 801f690:	d407      	bmi.n	801f6a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f692:	45ac      	cmp	ip, r5
 801f694:	dd05      	ble.n	801f6a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f696:	b123      	cbz	r3, 801f6a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f698:	44f4      	add	ip, lr
 801f69a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f69e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801f6a2:	2b0f      	cmp	r3, #15
 801f6a4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f6a8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f6ac:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f6b0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f6b4:	d801      	bhi.n	801f6ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801f6b6:	2f0f      	cmp	r7, #15
 801f6b8:	d911      	bls.n	801f6de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801f6ba:	4b76      	ldr	r3, [pc, #472]	; (801f894 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801f6bc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f6c0:	4a75      	ldr	r2, [pc, #468]	; (801f898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801f6c2:	4876      	ldr	r0, [pc, #472]	; (801f89c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801f6c4:	f004 ff94 	bl	80245f0 <__assert_func>
 801f6c8:	4602      	mov	r2, r0
 801f6ca:	e7ca      	b.n	801f662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801f6cc:	4606      	mov	r6, r0
 801f6ce:	4602      	mov	r2, r0
 801f6d0:	e7d0      	b.n	801f674 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801f6d2:	4606      	mov	r6, r0
 801f6d4:	e7ce      	b.n	801f674 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801f6d6:	4604      	mov	r4, r0
 801f6d8:	e7d9      	b.n	801f68e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801f6da:	4604      	mov	r4, r0
 801f6dc:	e7e1      	b.n	801f6a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f6de:	b29b      	uxth	r3, r3
 801f6e0:	b2bf      	uxth	r7, r7
 801f6e2:	fb07 fe03 	mul.w	lr, r7, r3
 801f6e6:	011b      	lsls	r3, r3, #4
 801f6e8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f6ec:	eba3 0c0e 	sub.w	ip, r3, lr
 801f6f0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f6f4:	b2bf      	uxth	r7, r7
 801f6f6:	fa1f fc8c 	uxth.w	ip, ip
 801f6fa:	1bed      	subs	r5, r5, r7
 801f6fc:	fb0c f30a 	mul.w	r3, ip, sl
 801f700:	b2ad      	uxth	r5, r5
 801f702:	fb05 330b 	mla	r3, r5, fp, r3
 801f706:	fb07 3309 	mla	r3, r7, r9, r3
 801f70a:	fb0e 3308 	mla	r3, lr, r8, r3
 801f70e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f712:	9303      	str	r3, [sp, #12]
 801f714:	2b00      	cmp	r3, #0
 801f716:	f000 80b9 	beq.w	801f88c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801f71a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f71e:	d018      	beq.n	801f752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801f720:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f724:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f728:	fb0b f303 	mul.w	r3, fp, r3
 801f72c:	fb0b fb02 	mul.w	fp, fp, r2
 801f730:	0a1a      	lsrs	r2, r3, #8
 801f732:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f736:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f73a:	441a      	add	r2, r3
 801f73c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f740:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f744:	0a12      	lsrs	r2, r2, #8
 801f746:	0a1b      	lsrs	r3, r3, #8
 801f748:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f74c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f750:	431a      	orrs	r2, r3
 801f752:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f756:	d019      	beq.n	801f78c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801f758:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f75c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f760:	fb0a fb0b 	mul.w	fp, sl, fp
 801f764:	fb0a fa06 	mul.w	sl, sl, r6
 801f768:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f76c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f770:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f774:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f778:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f77c:	445e      	add	r6, fp
 801f77e:	0a1b      	lsrs	r3, r3, #8
 801f780:	0a36      	lsrs	r6, r6, #8
 801f782:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f786:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f78a:	431e      	orrs	r6, r3
 801f78c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f790:	d019      	beq.n	801f7c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801f792:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f796:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f79a:	fb09 fa0a 	mul.w	sl, r9, sl
 801f79e:	fb09 f904 	mul.w	r9, r9, r4
 801f7a2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f7a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f7aa:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f7ae:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f7b2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f7b6:	4454      	add	r4, sl
 801f7b8:	0a1b      	lsrs	r3, r3, #8
 801f7ba:	0a24      	lsrs	r4, r4, #8
 801f7bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7c0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f7c4:	431c      	orrs	r4, r3
 801f7c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f7ca:	d019      	beq.n	801f800 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801f7cc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f7d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f7d4:	fb08 f909 	mul.w	r9, r8, r9
 801f7d8:	fb08 f800 	mul.w	r8, r8, r0
 801f7dc:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f7e0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f7e4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f7e8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f7ec:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f7f0:	4448      	add	r0, r9
 801f7f2:	0a1b      	lsrs	r3, r3, #8
 801f7f4:	0a00      	lsrs	r0, r0, #8
 801f7f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7fa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f7fe:	4318      	orrs	r0, r3
 801f800:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f804:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f808:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f80c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f810:	fb0c f808 	mul.w	r8, ip, r8
 801f814:	fb0c f606 	mul.w	r6, ip, r6
 801f818:	fb05 8803 	mla	r8, r5, r3, r8
 801f81c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f820:	fb05 6202 	mla	r2, r5, r2, r6
 801f824:	fb07 8803 	mla	r8, r7, r3, r8
 801f828:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f82c:	fb0e 8303 	mla	r3, lr, r3, r8
 801f830:	0a1b      	lsrs	r3, r3, #8
 801f832:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801f836:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801f83a:	9c02      	ldr	r4, [sp, #8]
 801f83c:	fb07 2703 	mla	r7, r7, r3, r2
 801f840:	9a03      	ldr	r2, [sp, #12]
 801f842:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801f846:	43d2      	mvns	r2, r2
 801f848:	fb0e 7303 	mla	r3, lr, r3, r7
 801f84c:	b2d2      	uxtb	r2, r2
 801f84e:	0a1b      	lsrs	r3, r3, #8
 801f850:	4354      	muls	r4, r2
 801f852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f856:	1c60      	adds	r0, r4, #1
 801f858:	ea48 0303 	orr.w	r3, r8, r3
 801f85c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f860:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f864:	7008      	strb	r0, [r1, #0]
 801f866:	9801      	ldr	r0, [sp, #4]
 801f868:	4350      	muls	r0, r2
 801f86a:	1c44      	adds	r4, r0, #1
 801f86c:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801f870:	0a18      	lsrs	r0, r3, #8
 801f872:	0c1b      	lsrs	r3, r3, #16
 801f874:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f878:	7048      	strb	r0, [r1, #1]
 801f87a:	9800      	ldr	r0, [sp, #0]
 801f87c:	4350      	muls	r0, r2
 801f87e:	4602      	mov	r2, r0
 801f880:	3001      	adds	r0, #1
 801f882:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f886:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f88a:	708b      	strb	r3, [r1, #2]
 801f88c:	b005      	add	sp, #20
 801f88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f892:	bf00      	nop
 801f894:	08028f07 	.word	0x08028f07
 801f898:	080293fe 	.word	0x080293fe
 801f89c:	08028fd0 	.word	0x08028fd0

0801f8a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8a4:	ed2d 8b08 	vpush	{d8-d11}
 801f8a8:	b097      	sub	sp, #92	; 0x5c
 801f8aa:	eeb0 aa40 	vmov.f32	s20, s0
 801f8ae:	eef0 9a60 	vmov.f32	s19, s1
 801f8b2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801f8b4:	eeb0 9a41 	vmov.f32	s18, s2
 801f8b8:	9308      	str	r3, [sp, #32]
 801f8ba:	eeb0 8a62 	vmov.f32	s16, s5
 801f8be:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801f8c2:	eef0 8a43 	vmov.f32	s17, s6
 801f8c6:	9015      	str	r0, [sp, #84]	; 0x54
 801f8c8:	eef0 ba44 	vmov.f32	s23, s8
 801f8cc:	6868      	ldr	r0, [r5, #4]
 801f8ce:	eeb0 ba64 	vmov.f32	s22, s9
 801f8d2:	9112      	str	r1, [sp, #72]	; 0x48
 801f8d4:	eef0 aa45 	vmov.f32	s21, s10
 801f8d8:	9310      	str	r3, [sp, #64]	; 0x40
 801f8da:	9214      	str	r2, [sp, #80]	; 0x50
 801f8dc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801f8de:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801f8e2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f8e6:	fb00 1303 	mla	r3, r0, r3, r1
 801f8ea:	6829      	ldr	r1, [r5, #0]
 801f8ec:	6855      	ldr	r5, [r2, #4]
 801f8ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8f2:	3504      	adds	r5, #4
 801f8f4:	18cb      	adds	r3, r1, r3
 801f8f6:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8f8:	6813      	ldr	r3, [r2, #0]
 801f8fa:	9311      	str	r3, [sp, #68]	; 0x44
 801f8fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	dc03      	bgt.n	801f90a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f904:	2b00      	cmp	r3, #0
 801f906:	f340 8333 	ble.w	801ff70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801f90a:	9b08      	ldr	r3, [sp, #32]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	f340 8190 	ble.w	801fc32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f912:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f914:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f916:	1412      	asrs	r2, r2, #16
 801f918:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f91c:	d42f      	bmi.n	801f97e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801f91e:	1c51      	adds	r1, r2, #1
 801f920:	428c      	cmp	r4, r1
 801f922:	dd2f      	ble.n	801f984 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f924:	2b00      	cmp	r3, #0
 801f926:	db2d      	blt.n	801f984 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f928:	1c59      	adds	r1, r3, #1
 801f92a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f92c:	4288      	cmp	r0, r1
 801f92e:	dd29      	ble.n	801f984 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f930:	9b08      	ldr	r3, [sp, #32]
 801f932:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f934:	3b01      	subs	r3, #1
 801f936:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f938:	fb02 1203 	mla	r2, r2, r3, r1
 801f93c:	1412      	asrs	r2, r2, #16
 801f93e:	d42b      	bmi.n	801f998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f940:	3201      	adds	r2, #1
 801f942:	4294      	cmp	r4, r2
 801f944:	dd28      	ble.n	801f998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f946:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f948:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f94a:	fb02 1303 	mla	r3, r2, r3, r1
 801f94e:	141b      	asrs	r3, r3, #16
 801f950:	d422      	bmi.n	801f998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f952:	3301      	adds	r3, #1
 801f954:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f956:	429a      	cmp	r2, r3
 801f958:	dd1e      	ble.n	801f998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f95c:	f103 0803 	add.w	r8, r3, #3
 801f960:	9b08      	ldr	r3, [sp, #32]
 801f962:	9307      	str	r3, [sp, #28]
 801f964:	9b07      	ldr	r3, [sp, #28]
 801f966:	2b00      	cmp	r3, #0
 801f968:	f300 81ca 	bgt.w	801fd00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801f96c:	9b08      	ldr	r3, [sp, #32]
 801f96e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f974:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f978:	441a      	add	r2, r3
 801f97a:	920b      	str	r2, [sp, #44]	; 0x2c
 801f97c:	e15b      	b.n	801fc36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f97e:	1c51      	adds	r1, r2, #1
 801f980:	f040 8148 	bne.w	801fc14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f984:	42a2      	cmp	r2, r4
 801f986:	f280 8145 	bge.w	801fc14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f98a:	1c5a      	adds	r2, r3, #1
 801f98c:	f2c0 8142 	blt.w	801fc14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f990:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f992:	4293      	cmp	r3, r2
 801f994:	f280 813e 	bge.w	801fc14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f998:	9b08      	ldr	r3, [sp, #32]
 801f99a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f99e:	9307      	str	r3, [sp, #28]
 801f9a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	dde2      	ble.n	801f96c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801f9a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f9a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f9aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f9ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f9b0:	141b      	asrs	r3, r3, #16
 801f9b2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f9b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f9b8:	1412      	asrs	r2, r2, #16
 801f9ba:	f100 818b 	bmi.w	801fcd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801f9be:	1c56      	adds	r6, r2, #1
 801f9c0:	42b4      	cmp	r4, r6
 801f9c2:	f340 8189 	ble.w	801fcd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	f2c0 8186 	blt.w	801fcd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f9cc:	1c5e      	adds	r6, r3, #1
 801f9ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f9d0:	42b7      	cmp	r7, r6
 801f9d2:	f340 8181 	ble.w	801fcd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f9d6:	fb03 2304 	mla	r3, r3, r4, r2
 801f9da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f9dc:	18d6      	adds	r6, r2, r3
 801f9de:	5cd3      	ldrb	r3, [r2, r3]
 801f9e0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f9e4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f9e8:	2900      	cmp	r1, #0
 801f9ea:	f000 8163 	beq.w	801fcb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801f9ee:	7872      	ldrb	r2, [r6, #1]
 801f9f0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f9f4:	920c      	str	r2, [sp, #48]	; 0x30
 801f9f6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f9fa:	2800      	cmp	r0, #0
 801f9fc:	f000 8164 	beq.w	801fcc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801fa00:	1932      	adds	r2, r6, r4
 801fa02:	5d36      	ldrb	r6, [r6, r4]
 801fa04:	7852      	ldrb	r2, [r2, #1]
 801fa06:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801fa0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fa0e:	9609      	str	r6, [sp, #36]	; 0x24
 801fa10:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fa14:	0e16      	lsrs	r6, r2, #24
 801fa16:	920d      	str	r2, [sp, #52]	; 0x34
 801fa18:	b289      	uxth	r1, r1
 801fa1a:	b280      	uxth	r0, r0
 801fa1c:	fb01 fb00 	mul.w	fp, r1, r0
 801fa20:	0109      	lsls	r1, r1, #4
 801fa22:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801fa26:	eba1 090b 	sub.w	r9, r1, fp
 801fa2a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fa2e:	b280      	uxth	r0, r0
 801fa30:	fa1f f989 	uxth.w	r9, r9
 801fa34:	1a12      	subs	r2, r2, r0
 801fa36:	fb09 f108 	mul.w	r1, r9, r8
 801fa3a:	b292      	uxth	r2, r2
 801fa3c:	fb02 110c 	mla	r1, r2, ip, r1
 801fa40:	fb00 110a 	mla	r1, r0, sl, r1
 801fa44:	fb0b 1106 	mla	r1, fp, r6, r1
 801fa48:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa4c:	2900      	cmp	r1, #0
 801fa4e:	f000 80d2 	beq.w	801fbf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fa52:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa56:	d01b      	beq.n	801fa90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801fa58:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fa5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa60:	fb0c fe0e 	mul.w	lr, ip, lr
 801fa64:	fb0c fc03 	mul.w	ip, ip, r3
 801fa68:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801fa6c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa74:	4473      	add	r3, lr
 801fa76:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801fa7a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fa7e:	0a1b      	lsrs	r3, r3, #8
 801fa80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa88:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fa8c:	ea43 030e 	orr.w	r3, r3, lr
 801fa90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fa94:	d01e      	beq.n	801fad4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801fa96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fa98:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fa9c:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801faa0:	fb08 fc0c 	mul.w	ip, r8, ip
 801faa4:	fb08 f80e 	mul.w	r8, r8, lr
 801faa8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801faac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fab0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fab4:	44e6      	add	lr, ip
 801fab6:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801faba:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801fabe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fac2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fac6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801faca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801face:	ea4e 0708 	orr.w	r7, lr, r8
 801fad2:	970c      	str	r7, [sp, #48]	; 0x30
 801fad4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fad8:	d01e      	beq.n	801fb18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fadc:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801fae0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fae4:	fb0a f808 	mul.w	r8, sl, r8
 801fae8:	fb0a fa0c 	mul.w	sl, sl, ip
 801faec:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801faf0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801faf4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801faf8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fafc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb00:	44c6      	add	lr, r8
 801fb02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb12:	ea4e 070a 	orr.w	r7, lr, sl
 801fb16:	9709      	str	r7, [sp, #36]	; 0x24
 801fb18:	2eff      	cmp	r6, #255	; 0xff
 801fb1a:	d01d      	beq.n	801fb58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801fb1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fb1e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801fb22:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fb26:	fb06 f808 	mul.w	r8, r6, r8
 801fb2a:	fb06 f60c 	mul.w	r6, r6, ip
 801fb2e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801fb32:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801fb36:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fb3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb3e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fb42:	44c6      	add	lr, r8
 801fb44:	0a36      	lsrs	r6, r6, #8
 801fb46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb4a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb52:	ea4e 0606 	orr.w	r6, lr, r6
 801fb56:	960d      	str	r6, [sp, #52]	; 0x34
 801fb58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb5a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fb5e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb64:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb68:	43c9      	mvns	r1, r1
 801fb6a:	fb09 f606 	mul.w	r6, r9, r6
 801fb6e:	b2c9      	uxtb	r1, r1
 801fb70:	fb02 660c 	mla	r6, r2, ip, r6
 801fb74:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fb78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fb7a:	fb00 660c 	mla	r6, r0, ip, r6
 801fb7e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fb82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fb84:	fb0b 660c 	mla	r6, fp, ip, r6
 801fb88:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fb8c:	fb09 f90c 	mul.w	r9, r9, ip
 801fb90:	0a36      	lsrs	r6, r6, #8
 801fb92:	fb02 9303 	mla	r3, r2, r3, r9
 801fb96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb98:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb9c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801fba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fba2:	fb00 330e 	mla	r3, r0, lr, r3
 801fba6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801fbaa:	fb0b 3b00 	mla	fp, fp, r0, r3
 801fbae:	9b07      	ldr	r3, [sp, #28]
 801fbb0:	781b      	ldrb	r3, [r3, #0]
 801fbb2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fbb6:	fb03 f201 	mul.w	r2, r3, r1
 801fbba:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fbbe:	1c53      	adds	r3, r2, #1
 801fbc0:	ea46 060b 	orr.w	r6, r6, fp
 801fbc4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fbc8:	9a07      	ldr	r2, [sp, #28]
 801fbca:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801fbce:	7013      	strb	r3, [r2, #0]
 801fbd0:	7853      	ldrb	r3, [r2, #1]
 801fbd2:	434b      	muls	r3, r1
 801fbd4:	1c5a      	adds	r2, r3, #1
 801fbd6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fbda:	0a33      	lsrs	r3, r6, #8
 801fbdc:	0c36      	lsrs	r6, r6, #16
 801fbde:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fbe2:	9a07      	ldr	r2, [sp, #28]
 801fbe4:	7053      	strb	r3, [r2, #1]
 801fbe6:	7893      	ldrb	r3, [r2, #2]
 801fbe8:	4359      	muls	r1, r3
 801fbea:	1c4b      	adds	r3, r1, #1
 801fbec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fbf0:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801fbf4:	7096      	strb	r6, [r2, #2]
 801fbf6:	9b07      	ldr	r3, [sp, #28]
 801fbf8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fbfa:	3303      	adds	r3, #3
 801fbfc:	9307      	str	r3, [sp, #28]
 801fbfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fc00:	4413      	add	r3, r2
 801fc02:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fc04:	9329      	str	r3, [sp, #164]	; 0xa4
 801fc06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc08:	4413      	add	r3, r2
 801fc0a:	932a      	str	r3, [sp, #168]	; 0xa8
 801fc0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fc0e:	3b01      	subs	r3, #1
 801fc10:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc12:	e6c5      	b.n	801f9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801fc14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fc16:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fc18:	4413      	add	r3, r2
 801fc1a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fc1c:	9329      	str	r3, [sp, #164]	; 0xa4
 801fc1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc20:	4413      	add	r3, r2
 801fc22:	932a      	str	r3, [sp, #168]	; 0xa8
 801fc24:	9b08      	ldr	r3, [sp, #32]
 801fc26:	3b01      	subs	r3, #1
 801fc28:	9308      	str	r3, [sp, #32]
 801fc2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc2c:	3303      	adds	r3, #3
 801fc2e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fc30:	e66b      	b.n	801f90a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801fc32:	f47f ae7d 	bne.w	801f930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801fc36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	f340 8199 	ble.w	801ff70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801fc3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc44:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fc48:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fc4c:	eef0 6a48 	vmov.f32	s13, s16
 801fc50:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fc54:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fc58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc5c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801fc60:	eef0 6a68 	vmov.f32	s13, s17
 801fc64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc68:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801fc6c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fc70:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fc74:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fc78:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fc7c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fc80:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fc84:	ee18 2a10 	vmov	r2, s16
 801fc88:	eeb0 8a47 	vmov.f32	s16, s14
 801fc8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc90:	ee18 2a90 	vmov	r2, s17
 801fc94:	932b      	str	r3, [sp, #172]	; 0xac
 801fc96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc98:	eef0 8a67 	vmov.f32	s17, s15
 801fc9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fca0:	932c      	str	r3, [sp, #176]	; 0xb0
 801fca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fca6:	3b01      	subs	r3, #1
 801fca8:	9312      	str	r3, [sp, #72]	; 0x48
 801fcaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fcac:	bf08      	it	eq
 801fcae:	4613      	moveq	r3, r2
 801fcb0:	9308      	str	r3, [sp, #32]
 801fcb2:	e623      	b.n	801f8fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801fcb4:	b158      	cbz	r0, 801fcce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801fcb6:	5d32      	ldrb	r2, [r6, r4]
 801fcb8:	26ff      	movs	r6, #255	; 0xff
 801fcba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fcbe:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801fcc2:	9209      	str	r2, [sp, #36]	; 0x24
 801fcc4:	46b0      	mov	r8, r6
 801fcc6:	e6a7      	b.n	801fa18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801fcc8:	26ff      	movs	r6, #255	; 0xff
 801fcca:	46b2      	mov	sl, r6
 801fccc:	e6a4      	b.n	801fa18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801fcce:	26ff      	movs	r6, #255	; 0xff
 801fcd0:	46b2      	mov	sl, r6
 801fcd2:	e7f7      	b.n	801fcc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801fcd4:	1c57      	adds	r7, r2, #1
 801fcd6:	d18e      	bne.n	801fbf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fcd8:	4294      	cmp	r4, r2
 801fcda:	dd8c      	ble.n	801fbf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fcdc:	1c5e      	adds	r6, r3, #1
 801fcde:	db8a      	blt.n	801fbf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fce0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fce2:	429e      	cmp	r6, r3
 801fce4:	dd87      	ble.n	801fbf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fce6:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801fcea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fcee:	e9cd 4600 	strd	r4, r6, [sp]
 801fcf2:	462b      	mov	r3, r5
 801fcf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fcf6:	9907      	ldr	r1, [sp, #28]
 801fcf8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fcfa:	f7ff fc85 	bl	801f608 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801fcfe:	e77a      	b.n	801fbf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fd00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd02:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fd04:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fd08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fd0a:	1409      	asrs	r1, r1, #16
 801fd0c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801fd10:	141b      	asrs	r3, r3, #16
 801fd12:	fb04 1303 	mla	r3, r4, r3, r1
 801fd16:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fd18:	18ce      	adds	r6, r1, r3
 801fd1a:	5ccb      	ldrb	r3, [r1, r3]
 801fd1c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fd20:	0e1f      	lsrs	r7, r3, #24
 801fd22:	2a00      	cmp	r2, #0
 801fd24:	f000 8114 	beq.w	801ff50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801fd28:	7871      	ldrb	r1, [r6, #1]
 801fd2a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801fd2e:	910e      	str	r1, [sp, #56]	; 0x38
 801fd30:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801fd34:	2800      	cmp	r0, #0
 801fd36:	f000 8115 	beq.w	801ff64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801fd3a:	1931      	adds	r1, r6, r4
 801fd3c:	5d36      	ldrb	r6, [r6, r4]
 801fd3e:	7849      	ldrb	r1, [r1, #1]
 801fd40:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801fd44:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801fd48:	960a      	str	r6, [sp, #40]	; 0x28
 801fd4a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fd4e:	0e0e      	lsrs	r6, r1, #24
 801fd50:	910f      	str	r1, [sp, #60]	; 0x3c
 801fd52:	b292      	uxth	r2, r2
 801fd54:	b280      	uxth	r0, r0
 801fd56:	fb02 fb00 	mul.w	fp, r2, r0
 801fd5a:	0112      	lsls	r2, r2, #4
 801fd5c:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801fd60:	eba2 090b 	sub.w	r9, r2, fp
 801fd64:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fd68:	b280      	uxth	r0, r0
 801fd6a:	fa1f f989 	uxth.w	r9, r9
 801fd6e:	1a09      	subs	r1, r1, r0
 801fd70:	fb09 f20e 	mul.w	r2, r9, lr
 801fd74:	b289      	uxth	r1, r1
 801fd76:	fb01 2207 	mla	r2, r1, r7, r2
 801fd7a:	fb00 220a 	mla	r2, r0, sl, r2
 801fd7e:	fb0b 2206 	mla	r2, fp, r6, r2
 801fd82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fd86:	9213      	str	r2, [sp, #76]	; 0x4c
 801fd88:	2a00      	cmp	r2, #0
 801fd8a:	f000 80d4 	beq.w	801ff36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801fd8e:	2fff      	cmp	r7, #255	; 0xff
 801fd90:	d01a      	beq.n	801fdc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801fd92:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fd96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fd9a:	fb07 fc0c 	mul.w	ip, r7, ip
 801fd9e:	435f      	muls	r7, r3
 801fda0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fda4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fda8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdac:	4463      	add	r3, ip
 801fdae:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801fdb2:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801fdb6:	0a1b      	lsrs	r3, r3, #8
 801fdb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdc0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fdc4:	ea43 030c 	orr.w	r3, r3, ip
 801fdc8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fdcc:	d01f      	beq.n	801fe0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801fdce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fdd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fdd2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fdd6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fdda:	fb0e f707 	mul.w	r7, lr, r7
 801fdde:	fb0e fe0c 	mul.w	lr, lr, ip
 801fde2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fde6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fdea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fdee:	44bc      	add	ip, r7
 801fdf0:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801fdf4:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801fdf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe04:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fe08:	ea4c 020e 	orr.w	r2, ip, lr
 801fe0c:	920e      	str	r2, [sp, #56]	; 0x38
 801fe0e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fe12:	d01e      	beq.n	801fe52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801fe14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fe16:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fe1a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fe1e:	fb0a fe0e 	mul.w	lr, sl, lr
 801fe22:	fb0a fa07 	mul.w	sl, sl, r7
 801fe26:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fe2a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fe2e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fe32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe36:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fe3a:	44f4      	add	ip, lr
 801fe3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fe48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe4c:	ea4c 020a 	orr.w	r2, ip, sl
 801fe50:	920a      	str	r2, [sp, #40]	; 0x28
 801fe52:	2eff      	cmp	r6, #255	; 0xff
 801fe54:	d01c      	beq.n	801fe90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801fe56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe58:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fe5c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fe60:	fb06 fe0e 	mul.w	lr, r6, lr
 801fe64:	437e      	muls	r6, r7
 801fe66:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fe6a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fe6e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fe72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe76:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801fe7a:	44f4      	add	ip, lr
 801fe7c:	0a36      	lsrs	r6, r6, #8
 801fe7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe82:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe8a:	ea4c 0206 	orr.w	r2, ip, r6
 801fe8e:	920f      	str	r2, [sp, #60]	; 0x3c
 801fe90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fe92:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fe96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe9a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801fe9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fea0:	fb09 f606 	mul.w	r6, r9, r6
 801fea4:	fb01 6607 	mla	r6, r1, r7, r6
 801fea8:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801feac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801feae:	fb00 6607 	mla	r6, r0, r7, r6
 801feb2:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801feb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801feb8:	fb0b 6607 	mla	r6, fp, r7, r6
 801febc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fec2:	fb09 f907 	mul.w	r9, r9, r7
 801fec6:	0a36      	lsrs	r6, r6, #8
 801fec8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fece:	fb01 9303 	mla	r3, r1, r3, r9
 801fed2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fed6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801feda:	fb00 330c 	mla	r3, r0, ip, r3
 801fede:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801fee2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fee4:	43da      	mvns	r2, r3
 801fee6:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801feea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801feee:	b2d2      	uxtb	r2, r2
 801fef0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fef4:	fb03 f102 	mul.w	r1, r3, r2
 801fef8:	ea46 060e 	orr.w	r6, r6, lr
 801fefc:	1c4b      	adds	r3, r1, #1
 801fefe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ff02:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ff06:	f808 3c03 	strb.w	r3, [r8, #-3]
 801ff0a:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801ff0e:	4353      	muls	r3, r2
 801ff10:	1c59      	adds	r1, r3, #1
 801ff12:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ff16:	0a33      	lsrs	r3, r6, #8
 801ff18:	0c36      	lsrs	r6, r6, #16
 801ff1a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ff1e:	f808 3c02 	strb.w	r3, [r8, #-2]
 801ff22:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ff26:	435a      	muls	r2, r3
 801ff28:	1c53      	adds	r3, r2, #1
 801ff2a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ff2e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801ff32:	f808 6c01 	strb.w	r6, [r8, #-1]
 801ff36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ff38:	f108 0803 	add.w	r8, r8, #3
 801ff3c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ff3e:	4413      	add	r3, r2
 801ff40:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ff42:	9329      	str	r3, [sp, #164]	; 0xa4
 801ff44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ff46:	4413      	add	r3, r2
 801ff48:	932a      	str	r3, [sp, #168]	; 0xa8
 801ff4a:	9b07      	ldr	r3, [sp, #28]
 801ff4c:	3b01      	subs	r3, #1
 801ff4e:	e508      	b.n	801f962 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801ff50:	b158      	cbz	r0, 801ff6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801ff52:	5d31      	ldrb	r1, [r6, r4]
 801ff54:	26ff      	movs	r6, #255	; 0xff
 801ff56:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801ff5a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801ff5e:	910a      	str	r1, [sp, #40]	; 0x28
 801ff60:	46b6      	mov	lr, r6
 801ff62:	e6f6      	b.n	801fd52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801ff64:	26ff      	movs	r6, #255	; 0xff
 801ff66:	46b2      	mov	sl, r6
 801ff68:	e6f3      	b.n	801fd52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801ff6a:	26ff      	movs	r6, #255	; 0xff
 801ff6c:	46b2      	mov	sl, r6
 801ff6e:	e7f7      	b.n	801ff60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801ff70:	b017      	add	sp, #92	; 0x5c
 801ff72:	ecbd 8b08 	vpop	{d8-d11}
 801ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ff7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ff7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff80:	b08d      	sub	sp, #52	; 0x34
 801ff82:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801ff86:	9103      	str	r1, [sp, #12]
 801ff88:	fb07 5803 	mla	r8, r7, r3, r5
 801ff8c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ff90:	9803      	ldr	r0, [sp, #12]
 801ff92:	2f00      	cmp	r7, #0
 801ff94:	910b      	str	r1, [sp, #44]	; 0x2c
 801ff96:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ff9a:	9903      	ldr	r1, [sp, #12]
 801ff9c:	9c03      	ldr	r4, [sp, #12]
 801ff9e:	eb02 0608 	add.w	r6, r2, r8
 801ffa2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ffa6:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801ffaa:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801ffae:	7809      	ldrb	r1, [r1, #0]
 801ffb0:	7840      	ldrb	r0, [r0, #1]
 801ffb2:	78a4      	ldrb	r4, [r4, #2]
 801ffb4:	db51      	blt.n	802005a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ffb6:	45be      	cmp	lr, r7
 801ffb8:	dd4f      	ble.n	802005a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ffba:	2d00      	cmp	r5, #0
 801ffbc:	db49      	blt.n	8020052 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ffbe:	42ab      	cmp	r3, r5
 801ffc0:	dd47      	ble.n	8020052 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ffc2:	f812 2008 	ldrb.w	r2, [r2, r8]
 801ffc6:	9204      	str	r2, [sp, #16]
 801ffc8:	7872      	ldrb	r2, [r6, #1]
 801ffca:	9205      	str	r2, [sp, #20]
 801ffcc:	78b2      	ldrb	r2, [r6, #2]
 801ffce:	9206      	str	r2, [sp, #24]
 801ffd0:	1c6a      	adds	r2, r5, #1
 801ffd2:	d449      	bmi.n	8020068 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ffd4:	4293      	cmp	r3, r2
 801ffd6:	dd47      	ble.n	8020068 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ffd8:	f1bc 0f00 	cmp.w	ip, #0
 801ffdc:	d044      	beq.n	8020068 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ffde:	7972      	ldrb	r2, [r6, #5]
 801ffe0:	f896 b003 	ldrb.w	fp, [r6, #3]
 801ffe4:	f896 a004 	ldrb.w	sl, [r6, #4]
 801ffe8:	9201      	str	r2, [sp, #4]
 801ffea:	3701      	adds	r7, #1
 801ffec:	d444      	bmi.n	8020078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801ffee:	45be      	cmp	lr, r7
 801fff0:	dd42      	ble.n	8020078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801fff2:	f1b9 0f00 	cmp.w	r9, #0
 801fff6:	f000 80c1 	beq.w	802017c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801fffa:	2d00      	cmp	r5, #0
 801fffc:	db38      	blt.n	8020070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801fffe:	42ab      	cmp	r3, r5
 8020000:	dd36      	ble.n	8020070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020002:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020006:	f816 8002 	ldrb.w	r8, [r6, r2]
 802000a:	2203      	movs	r2, #3
 802000c:	fb03 6702 	mla	r7, r3, r2, r6
 8020010:	fb03 6202 	mla	r2, r3, r2, r6
 8020014:	787f      	ldrb	r7, [r7, #1]
 8020016:	f892 e002 	ldrb.w	lr, [r2, #2]
 802001a:	9702      	str	r7, [sp, #8]
 802001c:	3501      	adds	r5, #1
 802001e:	d432      	bmi.n	8020086 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020020:	42ab      	cmp	r3, r5
 8020022:	dd30      	ble.n	8020086 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020024:	f1bc 0f00 	cmp.w	ip, #0
 8020028:	d031      	beq.n	802008e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 802002a:	2703      	movs	r7, #3
 802002c:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020030:	5cb5      	ldrb	r5, [r6, r2]
 8020032:	fb03 6207 	mla	r2, r3, r7, r6
 8020036:	fb03 6307 	mla	r3, r3, r7, r6
 802003a:	7912      	ldrb	r2, [r2, #4]
 802003c:	795e      	ldrb	r6, [r3, #5]
 802003e:	f1bc 0f0f 	cmp.w	ip, #15
 8020042:	d927      	bls.n	8020094 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020044:	4b53      	ldr	r3, [pc, #332]	; (8020194 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8020046:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802004a:	4a53      	ldr	r2, [pc, #332]	; (8020198 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 802004c:	4853      	ldr	r0, [pc, #332]	; (802019c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802004e:	f004 facf 	bl	80245f0 <__assert_func>
 8020052:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020056:	9104      	str	r1, [sp, #16]
 8020058:	e7ba      	b.n	801ffd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802005a:	9401      	str	r4, [sp, #4]
 802005c:	4682      	mov	sl, r0
 802005e:	468b      	mov	fp, r1
 8020060:	9104      	str	r1, [sp, #16]
 8020062:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020066:	e7c0      	b.n	801ffea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020068:	9401      	str	r4, [sp, #4]
 802006a:	4682      	mov	sl, r0
 802006c:	468b      	mov	fp, r1
 802006e:	e7bc      	b.n	801ffea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020070:	46a6      	mov	lr, r4
 8020072:	9002      	str	r0, [sp, #8]
 8020074:	4688      	mov	r8, r1
 8020076:	e7d1      	b.n	802001c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020078:	4626      	mov	r6, r4
 802007a:	4602      	mov	r2, r0
 802007c:	460d      	mov	r5, r1
 802007e:	46a6      	mov	lr, r4
 8020080:	9002      	str	r0, [sp, #8]
 8020082:	4688      	mov	r8, r1
 8020084:	e7db      	b.n	802003e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020086:	4626      	mov	r6, r4
 8020088:	4602      	mov	r2, r0
 802008a:	460d      	mov	r5, r1
 802008c:	e7d7      	b.n	802003e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802008e:	4626      	mov	r6, r4
 8020090:	4602      	mov	r2, r0
 8020092:	460d      	mov	r5, r1
 8020094:	f1b9 0f0f 	cmp.w	r9, #15
 8020098:	d8d4      	bhi.n	8020044 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802009a:	fa1f f38c 	uxth.w	r3, ip
 802009e:	fa1f fc89 	uxth.w	ip, r9
 80200a2:	fb03 f70c 	mul.w	r7, r3, ip
 80200a6:	011b      	lsls	r3, r3, #4
 80200a8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80200ac:	9707      	str	r7, [sp, #28]
 80200ae:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80200b2:	fa1f fc8c 	uxth.w	ip, ip
 80200b6:	eba7 070c 	sub.w	r7, r7, ip
 80200ba:	b2bf      	uxth	r7, r7
 80200bc:	9709      	str	r7, [sp, #36]	; 0x24
 80200be:	9f07      	ldr	r7, [sp, #28]
 80200c0:	1bdb      	subs	r3, r3, r7
 80200c2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80200c6:	b29b      	uxth	r3, r3
 80200c8:	9708      	str	r7, [sp, #32]
 80200ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80200cc:	930a      	str	r3, [sp, #40]	; 0x28
 80200ce:	ea6f 0907 	mvn.w	r9, r7
 80200d2:	fb03 fb0b 	mul.w	fp, r3, fp
 80200d6:	9f04      	ldr	r7, [sp, #16]
 80200d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200da:	fa5f f989 	uxtb.w	r9, r9
 80200de:	fb03 bb07 	mla	fp, r3, r7, fp
 80200e2:	9f07      	ldr	r7, [sp, #28]
 80200e4:	fb11 f109 	smulbb	r1, r1, r9
 80200e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200ea:	fb0c b808 	mla	r8, ip, r8, fp
 80200ee:	fb10 f009 	smulbb	r0, r0, r9
 80200f2:	fb14 f409 	smulbb	r4, r4, r9
 80200f6:	fb07 8805 	mla	r8, r7, r5, r8
 80200fa:	9d08      	ldr	r5, [sp, #32]
 80200fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80200fe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020102:	fb08 1805 	mla	r8, r8, r5, r1
 8020106:	9d05      	ldr	r5, [sp, #20]
 8020108:	fa1f f888 	uxth.w	r8, r8
 802010c:	f108 0101 	add.w	r1, r8, #1
 8020110:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020114:	9903      	ldr	r1, [sp, #12]
 8020116:	ea4f 2828 	mov.w	r8, r8, asr #8
 802011a:	f881 8000 	strb.w	r8, [r1]
 802011e:	fb03 f10a 	mul.w	r1, r3, sl
 8020122:	fb07 1105 	mla	r1, r7, r5, r1
 8020126:	9d02      	ldr	r5, [sp, #8]
 8020128:	fb0c 1105 	mla	r1, ip, r5, r1
 802012c:	9d07      	ldr	r5, [sp, #28]
 802012e:	fb05 1102 	mla	r1, r5, r2, r1
 8020132:	9a08      	ldr	r2, [sp, #32]
 8020134:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020138:	fb01 0102 	mla	r1, r1, r2, r0
 802013c:	9a03      	ldr	r2, [sp, #12]
 802013e:	b289      	uxth	r1, r1
 8020140:	1c48      	adds	r0, r1, #1
 8020142:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020146:	1209      	asrs	r1, r1, #8
 8020148:	7051      	strb	r1, [r2, #1]
 802014a:	9a01      	ldr	r2, [sp, #4]
 802014c:	4353      	muls	r3, r2
 802014e:	9a06      	ldr	r2, [sp, #24]
 8020150:	fb07 3702 	mla	r7, r7, r2, r3
 8020154:	9b08      	ldr	r3, [sp, #32]
 8020156:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802015a:	fb05 c606 	mla	r6, r5, r6, ip
 802015e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020162:	fb06 4603 	mla	r6, r6, r3, r4
 8020166:	9b03      	ldr	r3, [sp, #12]
 8020168:	b2b6      	uxth	r6, r6
 802016a:	f106 0e01 	add.w	lr, r6, #1
 802016e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020172:	1236      	asrs	r6, r6, #8
 8020174:	709e      	strb	r6, [r3, #2]
 8020176:	b00d      	add	sp, #52	; 0x34
 8020178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802017c:	f1bc 0f0f 	cmp.w	ip, #15
 8020180:	f63f af60 	bhi.w	8020044 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020184:	4626      	mov	r6, r4
 8020186:	4602      	mov	r2, r0
 8020188:	460d      	mov	r5, r1
 802018a:	46a6      	mov	lr, r4
 802018c:	9002      	str	r0, [sp, #8]
 802018e:	4688      	mov	r8, r1
 8020190:	e783      	b.n	802009a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8020192:	bf00      	nop
 8020194:	08028f07 	.word	0x08028f07
 8020198:	080293fe 	.word	0x080293fe
 802019c:	08028fd0 	.word	0x08028fd0

080201a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80201a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a4:	ed2d 8b08 	vpush	{d8-d11}
 80201a8:	b0a1      	sub	sp, #132	; 0x84
 80201aa:	eeb0 aa40 	vmov.f32	s20, s0
 80201ae:	eef0 9a60 	vmov.f32	s19, s1
 80201b2:	9307      	str	r3, [sp, #28]
 80201b4:	eeb0 9a41 	vmov.f32	s18, s2
 80201b8:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80201bc:	eeb0 8a62 	vmov.f32	s16, s5
 80201c0:	9210      	str	r2, [sp, #64]	; 0x40
 80201c2:	eef0 8a43 	vmov.f32	s17, s6
 80201c6:	9308      	str	r3, [sp, #32]
 80201c8:	eef0 ba44 	vmov.f32	s23, s8
 80201cc:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80201d0:	eeb0 ba64 	vmov.f32	s22, s9
 80201d4:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80201d6:	eef0 aa45 	vmov.f32	s21, s10
 80201da:	930a      	str	r3, [sp, #40]	; 0x28
 80201dc:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80201e0:	901f      	str	r0, [sp, #124]	; 0x7c
 80201e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80201e4:	6850      	ldr	r0, [r2, #4]
 80201e6:	910e      	str	r1, [sp, #56]	; 0x38
 80201e8:	6812      	ldr	r2, [r2, #0]
 80201ea:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80201ee:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80201f2:	fb00 1303 	mla	r3, r0, r3, r1
 80201f6:	9908      	ldr	r1, [sp, #32]
 80201f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201fc:	18d3      	adds	r3, r2, r3
 80201fe:	2203      	movs	r2, #3
 8020200:	9309      	str	r3, [sp, #36]	; 0x24
 8020202:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	930c      	str	r3, [sp, #48]	; 0x30
 8020208:	f06f 0304 	mvn.w	r3, #4
 802020c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020210:	930d      	str	r3, [sp, #52]	; 0x34
 8020212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020214:	43db      	mvns	r3, r3
 8020216:	b2db      	uxtb	r3, r3
 8020218:	930b      	str	r3, [sp, #44]	; 0x2c
 802021a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802021c:	2b00      	cmp	r3, #0
 802021e:	dc03      	bgt.n	8020228 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020222:	2b00      	cmp	r3, #0
 8020224:	f340 81df 	ble.w	80205e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020228:	9b07      	ldr	r3, [sp, #28]
 802022a:	2b00      	cmp	r3, #0
 802022c:	f340 80f2 	ble.w	8020414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020230:	ea5f 4228 	movs.w	r2, r8, asr #16
 8020234:	ea4f 432b 	mov.w	r3, fp, asr #16
 8020238:	d430      	bmi.n	802029c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802023a:	1c51      	adds	r1, r2, #1
 802023c:	9808      	ldr	r0, [sp, #32]
 802023e:	4281      	cmp	r1, r0
 8020240:	da2f      	bge.n	80202a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020242:	2b00      	cmp	r3, #0
 8020244:	db2d      	blt.n	80202a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020246:	1c59      	adds	r1, r3, #1
 8020248:	980a      	ldr	r0, [sp, #40]	; 0x28
 802024a:	4288      	cmp	r0, r1
 802024c:	dd29      	ble.n	80202a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802024e:	9b07      	ldr	r3, [sp, #28]
 8020250:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020252:	3b01      	subs	r3, #1
 8020254:	fb02 8203 	mla	r2, r2, r3, r8
 8020258:	1412      	asrs	r2, r2, #16
 802025a:	d42d      	bmi.n	80202b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802025c:	3201      	adds	r2, #1
 802025e:	9908      	ldr	r1, [sp, #32]
 8020260:	4291      	cmp	r1, r2
 8020262:	dd29      	ble.n	80202b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020264:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020266:	fb02 b303 	mla	r3, r2, r3, fp
 802026a:	141b      	asrs	r3, r3, #16
 802026c:	d424      	bmi.n	80202b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802026e:	3301      	adds	r3, #1
 8020270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020272:	429a      	cmp	r2, r3
 8020274:	dd20      	ble.n	80202b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020278:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802027c:	1cde      	adds	r6, r3, #3
 802027e:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8020282:	f1bc 0f00 	cmp.w	ip, #0
 8020286:	f300 811f 	bgt.w	80204c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802028a:	9b07      	ldr	r3, [sp, #28]
 802028c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020292:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020296:	4423      	add	r3, r4
 8020298:	9309      	str	r3, [sp, #36]	; 0x24
 802029a:	e0bd      	b.n	8020418 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802029c:	1c57      	adds	r7, r2, #1
 802029e:	f040 80ae 	bne.w	80203fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202a2:	9908      	ldr	r1, [sp, #32]
 80202a4:	428a      	cmp	r2, r1
 80202a6:	f280 80aa 	bge.w	80203fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202aa:	1c5e      	adds	r6, r3, #1
 80202ac:	f2c0 80a7 	blt.w	80203fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80202b2:	4293      	cmp	r3, r2
 80202b4:	f280 80a3 	bge.w	80203fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202b8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80202bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80202be:	f1ba 0f00 	cmp.w	sl, #0
 80202c2:	dde2      	ble.n	802028a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80202c4:	ea5f 4028 	movs.w	r0, r8, asr #16
 80202c8:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80202cc:	ea4f 412b 	mov.w	r1, fp, asr #16
 80202d0:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80202d4:	f100 80df 	bmi.w	8020496 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80202d8:	1c45      	adds	r5, r0, #1
 80202da:	9f08      	ldr	r7, [sp, #32]
 80202dc:	42af      	cmp	r7, r5
 80202de:	f340 80dc 	ble.w	802049a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80202e2:	2900      	cmp	r1, #0
 80202e4:	f2c0 80d9 	blt.w	802049a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80202e8:	1c4d      	adds	r5, r1, #1
 80202ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80202ec:	42af      	cmp	r7, r5
 80202ee:	f340 80d4 	ble.w	802049a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80202f2:	9d08      	ldr	r5, [sp, #32]
 80202f4:	fb05 0101 	mla	r1, r5, r1, r0
 80202f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80202fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80202fe:	1845      	adds	r5, r0, r1
 8020300:	5c40      	ldrb	r0, [r0, r1]
 8020302:	792f      	ldrb	r7, [r5, #4]
 8020304:	7869      	ldrb	r1, [r5, #1]
 8020306:	9711      	str	r7, [sp, #68]	; 0x44
 8020308:	796f      	ldrb	r7, [r5, #5]
 802030a:	f895 e002 	ldrb.w	lr, [r5, #2]
 802030e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8020312:	9712      	str	r7, [sp, #72]	; 0x48
 8020314:	b17a      	cbz	r2, 8020336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8020316:	3505      	adds	r5, #5
 8020318:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802031a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802031c:	19ef      	adds	r7, r5, r7
 802031e:	5d2d      	ldrb	r5, [r5, r4]
 8020320:	787c      	ldrb	r4, [r7, #1]
 8020322:	9513      	str	r5, [sp, #76]	; 0x4c
 8020324:	9415      	str	r4, [sp, #84]	; 0x54
 8020326:	78bc      	ldrb	r4, [r7, #2]
 8020328:	9417      	str	r4, [sp, #92]	; 0x5c
 802032a:	78fc      	ldrb	r4, [r7, #3]
 802032c:	9414      	str	r4, [sp, #80]	; 0x50
 802032e:	793c      	ldrb	r4, [r7, #4]
 8020330:	9416      	str	r4, [sp, #88]	; 0x58
 8020332:	797c      	ldrb	r4, [r7, #5]
 8020334:	9418      	str	r4, [sp, #96]	; 0x60
 8020336:	b29b      	uxth	r3, r3
 8020338:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802033a:	b292      	uxth	r2, r2
 802033c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8020340:	fb03 f702 	mul.w	r7, r3, r2
 8020344:	011b      	lsls	r3, r3, #4
 8020346:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 802034a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802034e:	1bdb      	subs	r3, r3, r7
 8020350:	b292      	uxth	r2, r2
 8020352:	b29b      	uxth	r3, r3
 8020354:	ebac 0c02 	sub.w	ip, ip, r2
 8020358:	fb03 f909 	mul.w	r9, r3, r9
 802035c:	fa1f fc8c 	uxth.w	ip, ip
 8020360:	fb0c 9000 	mla	r0, ip, r0, r9
 8020364:	f896 9000 	ldrb.w	r9, [r6]
 8020368:	fb02 0004 	mla	r0, r2, r4, r0
 802036c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802036e:	fb07 0004 	mla	r0, r7, r4, r0
 8020372:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020374:	fb19 f904 	smulbb	r9, r9, r4
 8020378:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802037c:	fb00 9005 	mla	r0, r0, r5, r9
 8020380:	b280      	uxth	r0, r0
 8020382:	f100 0901 	add.w	r9, r0, #1
 8020386:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802038a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802038c:	4358      	muls	r0, r3
 802038e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020392:	fb0c 0101 	mla	r1, ip, r1, r0
 8020396:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020398:	f886 9000 	strb.w	r9, [r6]
 802039c:	fb02 1100 	mla	r1, r2, r0, r1
 80203a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80203a2:	fb07 1100 	mla	r1, r7, r0, r1
 80203a6:	7870      	ldrb	r0, [r6, #1]
 80203a8:	fb10 f004 	smulbb	r0, r0, r4
 80203ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80203b0:	fb01 0105 	mla	r1, r1, r5, r0
 80203b4:	b289      	uxth	r1, r1
 80203b6:	1c48      	adds	r0, r1, #1
 80203b8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80203bc:	1209      	asrs	r1, r1, #8
 80203be:	7071      	strb	r1, [r6, #1]
 80203c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80203c2:	434b      	muls	r3, r1
 80203c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80203c6:	fb0c 330e 	mla	r3, ip, lr, r3
 80203ca:	fb02 3201 	mla	r2, r2, r1, r3
 80203ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80203d0:	fb07 2703 	mla	r7, r7, r3, r2
 80203d4:	78b2      	ldrb	r2, [r6, #2]
 80203d6:	fb12 f204 	smulbb	r2, r2, r4
 80203da:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80203de:	fb07 2505 	mla	r5, r7, r5, r2
 80203e2:	b2ad      	uxth	r5, r5
 80203e4:	1c6f      	adds	r7, r5, #1
 80203e6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80203ea:	122d      	asrs	r5, r5, #8
 80203ec:	70b5      	strb	r5, [r6, #2]
 80203ee:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80203f0:	3603      	adds	r6, #3
 80203f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80203f6:	4498      	add	r8, r3
 80203f8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80203fa:	449b      	add	fp, r3
 80203fc:	e75f      	b.n	80202be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80203fe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020400:	4498      	add	r8, r3
 8020402:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020404:	449b      	add	fp, r3
 8020406:	9b07      	ldr	r3, [sp, #28]
 8020408:	3b01      	subs	r3, #1
 802040a:	9307      	str	r3, [sp, #28]
 802040c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802040e:	3303      	adds	r3, #3
 8020410:	9309      	str	r3, [sp, #36]	; 0x24
 8020412:	e709      	b.n	8020228 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020414:	f47f af1b 	bne.w	802024e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802041a:	2b00      	cmp	r3, #0
 802041c:	f340 80e3 	ble.w	80205e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020424:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020426:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802042a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802042e:	eef0 6a48 	vmov.f32	s13, s16
 8020432:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020436:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802043a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802043e:	ee16 8a90 	vmov	r8, s13
 8020442:	eef0 6a68 	vmov.f32	s13, s17
 8020446:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802044a:	ee16 ba90 	vmov	fp, s13
 802044e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020452:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020456:	ee37 8a48 	vsub.f32	s16, s14, s16
 802045a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802045e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020462:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020466:	ee18 2a10 	vmov	r2, s16
 802046a:	eeb0 8a47 	vmov.f32	s16, s14
 802046e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020472:	ee18 2a90 	vmov	r2, s17
 8020476:	9335      	str	r3, [sp, #212]	; 0xd4
 8020478:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802047a:	eef0 8a67 	vmov.f32	s17, s15
 802047e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020482:	9336      	str	r3, [sp, #216]	; 0xd8
 8020484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020486:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020488:	3b01      	subs	r3, #1
 802048a:	930e      	str	r3, [sp, #56]	; 0x38
 802048c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802048e:	bf08      	it	eq
 8020490:	4613      	moveq	r3, r2
 8020492:	9307      	str	r3, [sp, #28]
 8020494:	e6c1      	b.n	802021a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020496:	1c45      	adds	r5, r0, #1
 8020498:	d1a9      	bne.n	80203ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802049a:	9c08      	ldr	r4, [sp, #32]
 802049c:	42a0      	cmp	r0, r4
 802049e:	daa6      	bge.n	80203ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204a0:	1c4c      	adds	r4, r1, #1
 80204a2:	dba4      	blt.n	80203ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80204a6:	428c      	cmp	r4, r1
 80204a8:	dda1      	ble.n	80203ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80204ac:	9001      	str	r0, [sp, #4]
 80204ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80204b0:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80204b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204b6:	4631      	mov	r1, r6
 80204b8:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80204bc:	9300      	str	r3, [sp, #0]
 80204be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204c0:	9b08      	ldr	r3, [sp, #32]
 80204c2:	f7ff fd5b 	bl	801ff7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80204c6:	e792      	b.n	80203ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204c8:	ea4f 4228 	mov.w	r2, r8, asr #16
 80204cc:	9c08      	ldr	r4, [sp, #32]
 80204ce:	ea4f 402b 	mov.w	r0, fp, asr #16
 80204d2:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80204d6:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80204da:	fb04 2000 	mla	r0, r4, r0, r2
 80204de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80204e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80204e6:	4402      	add	r2, r0
 80204e8:	5c25      	ldrb	r5, [r4, r0]
 80204ea:	7894      	ldrb	r4, [r2, #2]
 80204ec:	7850      	ldrb	r0, [r2, #1]
 80204ee:	9411      	str	r4, [sp, #68]	; 0x44
 80204f0:	7954      	ldrb	r4, [r2, #5]
 80204f2:	f892 a003 	ldrb.w	sl, [r2, #3]
 80204f6:	f892 9004 	ldrb.w	r9, [r2, #4]
 80204fa:	9412      	str	r4, [sp, #72]	; 0x48
 80204fc:	b171      	cbz	r1, 802051c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80204fe:	3205      	adds	r2, #5
 8020500:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020502:	1917      	adds	r7, r2, r4
 8020504:	5d12      	ldrb	r2, [r2, r4]
 8020506:	9219      	str	r2, [sp, #100]	; 0x64
 8020508:	787a      	ldrb	r2, [r7, #1]
 802050a:	921b      	str	r2, [sp, #108]	; 0x6c
 802050c:	78ba      	ldrb	r2, [r7, #2]
 802050e:	921d      	str	r2, [sp, #116]	; 0x74
 8020510:	78fa      	ldrb	r2, [r7, #3]
 8020512:	921a      	str	r2, [sp, #104]	; 0x68
 8020514:	793a      	ldrb	r2, [r7, #4]
 8020516:	921c      	str	r2, [sp, #112]	; 0x70
 8020518:	797a      	ldrb	r2, [r7, #5]
 802051a:	921e      	str	r2, [sp, #120]	; 0x78
 802051c:	b29b      	uxth	r3, r3
 802051e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8020520:	b289      	uxth	r1, r1
 8020522:	3603      	adds	r6, #3
 8020524:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020528:	fb03 f201 	mul.w	r2, r3, r1
 802052c:	011b      	lsls	r3, r3, #4
 802052e:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8020532:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020536:	1a9b      	subs	r3, r3, r2
 8020538:	b289      	uxth	r1, r1
 802053a:	b29b      	uxth	r3, r3
 802053c:	1a7f      	subs	r7, r7, r1
 802053e:	fb03 fa0a 	mul.w	sl, r3, sl
 8020542:	b2bf      	uxth	r7, r7
 8020544:	fb03 f909 	mul.w	r9, r3, r9
 8020548:	fb07 a505 	mla	r5, r7, r5, sl
 802054c:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8020550:	fb07 9000 	mla	r0, r7, r0, r9
 8020554:	fb01 5504 	mla	r5, r1, r4, r5
 8020558:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802055a:	fb02 5504 	mla	r5, r2, r4, r5
 802055e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020560:	fb1a fa04 	smulbb	sl, sl, r4
 8020564:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020568:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802056a:	fb05 a50e 	mla	r5, r5, lr, sl
 802056e:	fb01 0004 	mla	r0, r1, r4, r0
 8020572:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020574:	b2ad      	uxth	r5, r5
 8020576:	fb02 0004 	mla	r0, r2, r4, r0
 802057a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802057c:	f105 0a01 	add.w	sl, r5, #1
 8020580:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020584:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020588:	122d      	asrs	r5, r5, #8
 802058a:	f806 5c06 	strb.w	r5, [r6, #-6]
 802058e:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8020592:	fb15 f504 	smulbb	r5, r5, r4
 8020596:	fb00 500e 	mla	r0, r0, lr, r5
 802059a:	b280      	uxth	r0, r0
 802059c:	1c45      	adds	r5, r0, #1
 802059e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80205a2:	1200      	asrs	r0, r0, #8
 80205a4:	f806 0c05 	strb.w	r0, [r6, #-5]
 80205a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80205aa:	4343      	muls	r3, r0
 80205ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80205ae:	fb07 3300 	mla	r3, r7, r0, r3
 80205b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80205b4:	fb01 3100 	mla	r1, r1, r0, r3
 80205b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80205ba:	fb02 1203 	mla	r2, r2, r3, r1
 80205be:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80205c2:	fb11 f104 	smulbb	r1, r1, r4
 80205c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80205ca:	fb02 120e 	mla	r2, r2, lr, r1
 80205ce:	b292      	uxth	r2, r2
 80205d0:	1c53      	adds	r3, r2, #1
 80205d2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80205d6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80205d8:	1212      	asrs	r2, r2, #8
 80205da:	4498      	add	r8, r3
 80205dc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80205de:	f806 2c04 	strb.w	r2, [r6, #-4]
 80205e2:	449b      	add	fp, r3
 80205e4:	e64d      	b.n	8020282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80205e6:	b021      	add	sp, #132	; 0x84
 80205e8:	ecbd 8b08 	vpop	{d8-d11}
 80205ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80205f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205f4:	b085      	sub	sp, #20
 80205f6:	784d      	ldrb	r5, [r1, #1]
 80205f8:	788e      	ldrb	r6, [r1, #2]
 80205fa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80205fe:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020602:	9403      	str	r4, [sp, #12]
 8020604:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020608:	780c      	ldrb	r4, [r1, #0]
 802060a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802060e:	fb07 ce03 	mla	lr, r7, r3, ip
 8020612:	2f00      	cmp	r7, #0
 8020614:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020618:	eb02 0b0e 	add.w	fp, r2, lr
 802061c:	db56      	blt.n	80206cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802061e:	45b9      	cmp	r9, r7
 8020620:	dd54      	ble.n	80206cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020622:	f1bc 0f00 	cmp.w	ip, #0
 8020626:	db4d      	blt.n	80206c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020628:	4563      	cmp	r3, ip
 802062a:	dd4b      	ble.n	80206c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 802062c:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020630:	9200      	str	r2, [sp, #0]
 8020632:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020636:	9201      	str	r2, [sp, #4]
 8020638:	f89b 2002 	ldrb.w	r2, [fp, #2]
 802063c:	9202      	str	r2, [sp, #8]
 802063e:	f11c 0201 	adds.w	r2, ip, #1
 8020642:	d44a      	bmi.n	80206da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020644:	4293      	cmp	r3, r2
 8020646:	dd48      	ble.n	80206da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020648:	2800      	cmp	r0, #0
 802064a:	d046      	beq.n	80206da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802064c:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020650:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020654:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020658:	3701      	adds	r7, #1
 802065a:	d446      	bmi.n	80206ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802065c:	45b9      	cmp	r9, r7
 802065e:	dd44      	ble.n	80206ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020660:	9a03      	ldr	r2, [sp, #12]
 8020662:	2a00      	cmp	r2, #0
 8020664:	d045      	beq.n	80206f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020666:	f1bc 0f00 	cmp.w	ip, #0
 802066a:	db3a      	blt.n	80206e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802066c:	4563      	cmp	r3, ip
 802066e:	dd38      	ble.n	80206e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020670:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020674:	f04f 0903 	mov.w	r9, #3
 8020678:	f81b 7002 	ldrb.w	r7, [fp, r2]
 802067c:	fb03 b209 	mla	r2, r3, r9, fp
 8020680:	fb03 b909 	mla	r9, r3, r9, fp
 8020684:	7852      	ldrb	r2, [r2, #1]
 8020686:	f899 9002 	ldrb.w	r9, [r9, #2]
 802068a:	f11c 0c01 	adds.w	ip, ip, #1
 802068e:	d40d      	bmi.n	80206ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020690:	4563      	cmp	r3, ip
 8020692:	dd0b      	ble.n	80206ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020694:	b160      	cbz	r0, 80206b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020696:	2603      	movs	r6, #3
 8020698:	fb13 6406 	smlabb	r4, r3, r6, r6
 802069c:	fb03 b506 	mla	r5, r3, r6, fp
 80206a0:	fb03 b306 	mla	r3, r3, r6, fp
 80206a4:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80206a8:	792d      	ldrb	r5, [r5, #4]
 80206aa:	795e      	ldrb	r6, [r3, #5]
 80206ac:	280f      	cmp	r0, #15
 80206ae:	d802      	bhi.n	80206b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80206b0:	9b03      	ldr	r3, [sp, #12]
 80206b2:	2b0f      	cmp	r3, #15
 80206b4:	d922      	bls.n	80206fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80206b6:	4b2f      	ldr	r3, [pc, #188]	; (8020774 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80206b8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80206bc:	4a2e      	ldr	r2, [pc, #184]	; (8020778 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80206be:	482f      	ldr	r0, [pc, #188]	; (802077c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80206c0:	f003 ff96 	bl	80245f0 <__assert_func>
 80206c4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80206c8:	9400      	str	r4, [sp, #0]
 80206ca:	e7b8      	b.n	802063e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80206cc:	46b2      	mov	sl, r6
 80206ce:	46a8      	mov	r8, r5
 80206d0:	46a6      	mov	lr, r4
 80206d2:	9400      	str	r4, [sp, #0]
 80206d4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80206d8:	e7be      	b.n	8020658 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80206da:	46b2      	mov	sl, r6
 80206dc:	46a8      	mov	r8, r5
 80206de:	46a6      	mov	lr, r4
 80206e0:	e7ba      	b.n	8020658 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80206e2:	46b1      	mov	r9, r6
 80206e4:	462a      	mov	r2, r5
 80206e6:	4627      	mov	r7, r4
 80206e8:	e7cf      	b.n	802068a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80206ea:	46b1      	mov	r9, r6
 80206ec:	462a      	mov	r2, r5
 80206ee:	4627      	mov	r7, r4
 80206f0:	e7dc      	b.n	80206ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80206f2:	280f      	cmp	r0, #15
 80206f4:	d8df      	bhi.n	80206b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80206f6:	46b1      	mov	r9, r6
 80206f8:	462a      	mov	r2, r5
 80206fa:	4627      	mov	r7, r4
 80206fc:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020700:	b280      	uxth	r0, r0
 8020702:	fb00 f30b 	mul.w	r3, r0, fp
 8020706:	0100      	lsls	r0, r0, #4
 8020708:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 802070c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020710:	1ac0      	subs	r0, r0, r3
 8020712:	fa1f fb8b 	uxth.w	fp, fp
 8020716:	b280      	uxth	r0, r0
 8020718:	ebac 0c0b 	sub.w	ip, ip, fp
 802071c:	9003      	str	r0, [sp, #12]
 802071e:	fa1f fc8c 	uxth.w	ip, ip
 8020722:	fb00 fe0e 	mul.w	lr, r0, lr
 8020726:	9800      	ldr	r0, [sp, #0]
 8020728:	fb0c ee00 	mla	lr, ip, r0, lr
 802072c:	9803      	ldr	r0, [sp, #12]
 802072e:	fb00 f808 	mul.w	r8, r0, r8
 8020732:	9801      	ldr	r0, [sp, #4]
 8020734:	fb0b ee07 	mla	lr, fp, r7, lr
 8020738:	fb0c 8800 	mla	r8, ip, r0, r8
 802073c:	fb03 ee04 	mla	lr, r3, r4, lr
 8020740:	fb0b 8202 	mla	r2, fp, r2, r8
 8020744:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020748:	fb03 2505 	mla	r5, r3, r5, r2
 802074c:	9a03      	ldr	r2, [sp, #12]
 802074e:	f881 e000 	strb.w	lr, [r1]
 8020752:	fb02 f00a 	mul.w	r0, r2, sl
 8020756:	9a02      	ldr	r2, [sp, #8]
 8020758:	122d      	asrs	r5, r5, #8
 802075a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802075e:	704d      	strb	r5, [r1, #1]
 8020760:	fb0b c909 	mla	r9, fp, r9, ip
 8020764:	fb03 9606 	mla	r6, r3, r6, r9
 8020768:	1236      	asrs	r6, r6, #8
 802076a:	708e      	strb	r6, [r1, #2]
 802076c:	b005      	add	sp, #20
 802076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020772:	bf00      	nop
 8020774:	08028f07 	.word	0x08028f07
 8020778:	080293fe 	.word	0x080293fe
 802077c:	08028fd0 	.word	0x08028fd0

08020780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020784:	ed2d 8b0a 	vpush	{d8-d12}
 8020788:	b09d      	sub	sp, #116	; 0x74
 802078a:	eeb0 aa40 	vmov.f32	s20, s0
 802078e:	eef0 9a60 	vmov.f32	s19, s1
 8020792:	9306      	str	r3, [sp, #24]
 8020794:	eeb0 9a41 	vmov.f32	s18, s2
 8020798:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 802079c:	eeb0 8a62 	vmov.f32	s16, s5
 80207a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80207a2:	eef0 8a43 	vmov.f32	s17, s6
 80207a6:	9307      	str	r3, [sp, #28]
 80207a8:	eeb0 ca44 	vmov.f32	s24, s8
 80207ac:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80207b0:	eef0 ba64 	vmov.f32	s23, s9
 80207b4:	eeb0 ba45 	vmov.f32	s22, s10
 80207b8:	9309      	str	r3, [sp, #36]	; 0x24
 80207ba:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80207be:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80207c2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80207c4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80207c8:	6850      	ldr	r0, [r2, #4]
 80207ca:	6812      	ldr	r2, [r2, #0]
 80207cc:	fb00 1303 	mla	r3, r0, r3, r1
 80207d0:	9907      	ldr	r1, [sp, #28]
 80207d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207d6:	18d3      	adds	r3, r2, r3
 80207d8:	2203      	movs	r2, #3
 80207da:	9308      	str	r3, [sp, #32]
 80207dc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80207de:	681b      	ldr	r3, [r3, #0]
 80207e0:	930a      	str	r3, [sp, #40]	; 0x28
 80207e2:	f06f 0304 	mvn.w	r3, #4
 80207e6:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80207ea:	fb11 3302 	smlabb	r3, r1, r2, r3
 80207ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80207f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	dc03      	bgt.n	80207fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80207f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	f340 8193 	ble.w	8020b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80207fe:	9b06      	ldr	r3, [sp, #24]
 8020800:	2b00      	cmp	r3, #0
 8020802:	f340 80d0 	ble.w	80209a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8020806:	1432      	asrs	r2, r6, #16
 8020808:	ea4f 4325 	mov.w	r3, r5, asr #16
 802080c:	d42f      	bmi.n	802086e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802080e:	1c51      	adds	r1, r2, #1
 8020810:	9807      	ldr	r0, [sp, #28]
 8020812:	4281      	cmp	r1, r0
 8020814:	da2e      	bge.n	8020874 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020816:	2b00      	cmp	r3, #0
 8020818:	db2c      	blt.n	8020874 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802081a:	1c59      	adds	r1, r3, #1
 802081c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802081e:	4288      	cmp	r0, r1
 8020820:	dd28      	ble.n	8020874 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020822:	9b06      	ldr	r3, [sp, #24]
 8020824:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020826:	3b01      	subs	r3, #1
 8020828:	fb02 6203 	mla	r2, r2, r3, r6
 802082c:	1412      	asrs	r2, r2, #16
 802082e:	d42c      	bmi.n	802088a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020830:	3201      	adds	r2, #1
 8020832:	9907      	ldr	r1, [sp, #28]
 8020834:	4291      	cmp	r1, r2
 8020836:	dd28      	ble.n	802088a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020838:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802083a:	fb02 5303 	mla	r3, r2, r3, r5
 802083e:	141b      	asrs	r3, r3, #16
 8020840:	d423      	bmi.n	802088a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020842:	3301      	adds	r3, #1
 8020844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020846:	429a      	cmp	r2, r3
 8020848:	dd1f      	ble.n	802088a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802084a:	9b08      	ldr	r3, [sp, #32]
 802084c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020850:	f103 0c03 	add.w	ip, r3, #3
 8020854:	f1be 0f00 	cmp.w	lr, #0
 8020858:	f300 80fa 	bgt.w	8020a50 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 802085c:	9b06      	ldr	r3, [sp, #24]
 802085e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020862:	9b08      	ldr	r3, [sp, #32]
 8020864:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020868:	4423      	add	r3, r4
 802086a:	9308      	str	r3, [sp, #32]
 802086c:	e09d      	b.n	80209aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802086e:	1c51      	adds	r1, r2, #1
 8020870:	f040 808e 	bne.w	8020990 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020874:	9907      	ldr	r1, [sp, #28]
 8020876:	428a      	cmp	r2, r1
 8020878:	f280 808a 	bge.w	8020990 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802087c:	1c5f      	adds	r7, r3, #1
 802087e:	f2c0 8087 	blt.w	8020990 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020884:	4293      	cmp	r3, r2
 8020886:	f280 8083 	bge.w	8020990 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802088a:	9f06      	ldr	r7, [sp, #24]
 802088c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020890:	2f00      	cmp	r7, #0
 8020892:	dde3      	ble.n	802085c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8020894:	1432      	asrs	r2, r6, #16
 8020896:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802089a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802089e:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80208a2:	f100 80bf 	bmi.w	8020a24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80208a6:	1c50      	adds	r0, r2, #1
 80208a8:	9c07      	ldr	r4, [sp, #28]
 80208aa:	4284      	cmp	r4, r0
 80208ac:	f340 80bc 	ble.w	8020a28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	f2c0 80b9 	blt.w	8020a28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80208b6:	1c58      	adds	r0, r3, #1
 80208b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80208ba:	4284      	cmp	r4, r0
 80208bc:	f340 80b4 	ble.w	8020a28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80208c0:	9807      	ldr	r0, [sp, #28]
 80208c2:	fb00 2303 	mla	r3, r0, r3, r2
 80208c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80208ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208ce:	441a      	add	r2, r3
 80208d0:	f810 c003 	ldrb.w	ip, [r0, r3]
 80208d4:	7953      	ldrb	r3, [r2, #5]
 80208d6:	7850      	ldrb	r0, [r2, #1]
 80208d8:	f892 e002 	ldrb.w	lr, [r2, #2]
 80208dc:	f892 9003 	ldrb.w	r9, [r2, #3]
 80208e0:	f892 8004 	ldrb.w	r8, [r2, #4]
 80208e4:	930e      	str	r3, [sp, #56]	; 0x38
 80208e6:	f1bb 0f00 	cmp.w	fp, #0
 80208ea:	d00f      	beq.n	802090c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80208ec:	3205      	adds	r2, #5
 80208ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80208f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80208f2:	18d3      	adds	r3, r2, r3
 80208f4:	5d12      	ldrb	r2, [r2, r4]
 80208f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80208f8:	785a      	ldrb	r2, [r3, #1]
 80208fa:	9211      	str	r2, [sp, #68]	; 0x44
 80208fc:	789a      	ldrb	r2, [r3, #2]
 80208fe:	9213      	str	r2, [sp, #76]	; 0x4c
 8020900:	78da      	ldrb	r2, [r3, #3]
 8020902:	9210      	str	r2, [sp, #64]	; 0x40
 8020904:	791a      	ldrb	r2, [r3, #4]
 8020906:	795b      	ldrb	r3, [r3, #5]
 8020908:	9212      	str	r2, [sp, #72]	; 0x48
 802090a:	9314      	str	r3, [sp, #80]	; 0x50
 802090c:	b28b      	uxth	r3, r1
 802090e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020910:	fa1f f28b 	uxth.w	r2, fp
 8020914:	fb03 fb02 	mul.w	fp, r3, r2
 8020918:	011b      	lsls	r3, r3, #4
 802091a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802091e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8020922:	eba3 030b 	sub.w	r3, r3, fp
 8020926:	b292      	uxth	r2, r2
 8020928:	b29b      	uxth	r3, r3
 802092a:	1a89      	subs	r1, r1, r2
 802092c:	fb03 f808 	mul.w	r8, r3, r8
 8020930:	b289      	uxth	r1, r1
 8020932:	fb03 f909 	mul.w	r9, r3, r9
 8020936:	fb01 8800 	mla	r8, r1, r0, r8
 802093a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802093c:	fb01 990c 	mla	r9, r1, ip, r9
 8020940:	fb02 8800 	mla	r8, r2, r0, r8
 8020944:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020946:	fb02 9904 	mla	r9, r2, r4, r9
 802094a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802094c:	fb0b 8800 	mla	r8, fp, r0, r8
 8020950:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020952:	fb0b 9904 	mla	r9, fp, r4, r9
 8020956:	4343      	muls	r3, r0
 8020958:	ea4f 2828 	mov.w	r8, r8, asr #8
 802095c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020960:	fb01 330e 	mla	r3, r1, lr, r3
 8020964:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020966:	f88a 9000 	strb.w	r9, [sl]
 802096a:	fb02 3201 	mla	r2, r2, r1, r3
 802096e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020970:	f88a 8001 	strb.w	r8, [sl, #1]
 8020974:	fb0b 2b03 	mla	fp, fp, r3, r2
 8020978:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 802097c:	f88a b002 	strb.w	fp, [sl, #2]
 8020980:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020982:	f10a 0a03 	add.w	sl, sl, #3
 8020986:	3f01      	subs	r7, #1
 8020988:	441e      	add	r6, r3
 802098a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802098c:	441d      	add	r5, r3
 802098e:	e77f      	b.n	8020890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020990:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020992:	441e      	add	r6, r3
 8020994:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020996:	441d      	add	r5, r3
 8020998:	9b06      	ldr	r3, [sp, #24]
 802099a:	3b01      	subs	r3, #1
 802099c:	9306      	str	r3, [sp, #24]
 802099e:	9b08      	ldr	r3, [sp, #32]
 80209a0:	3303      	adds	r3, #3
 80209a2:	9308      	str	r3, [sp, #32]
 80209a4:	e72b      	b.n	80207fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80209a6:	f47f af3c 	bne.w	8020822 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80209aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209ac:	2b00      	cmp	r3, #0
 80209ae:	f340 80b9 	ble.w	8020b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80209b2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80209b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80209b8:	ee79 9aab 	vadd.f32	s19, s19, s23
 80209bc:	eef0 6a48 	vmov.f32	s13, s16
 80209c0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80209c4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80209c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209cc:	ee16 6a90 	vmov	r6, s13
 80209d0:	eef0 6a68 	vmov.f32	s13, s17
 80209d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209d8:	ee16 5a90 	vmov	r5, s13
 80209dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80209e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80209e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80209e8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80209ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80209f0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80209f4:	ee18 2a10 	vmov	r2, s16
 80209f8:	eeb0 8a47 	vmov.f32	s16, s14
 80209fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a00:	ee18 2a90 	vmov	r2, s17
 8020a04:	9333      	str	r3, [sp, #204]	; 0xcc
 8020a06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a08:	eef0 8a67 	vmov.f32	s17, s15
 8020a0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a10:	9334      	str	r3, [sp, #208]	; 0xd0
 8020a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a16:	3b01      	subs	r3, #1
 8020a18:	930c      	str	r3, [sp, #48]	; 0x30
 8020a1a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a1c:	bf08      	it	eq
 8020a1e:	4613      	moveq	r3, r2
 8020a20:	9306      	str	r3, [sp, #24]
 8020a22:	e6e5      	b.n	80207f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8020a24:	1c54      	adds	r4, r2, #1
 8020a26:	d1ab      	bne.n	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a28:	9807      	ldr	r0, [sp, #28]
 8020a2a:	4282      	cmp	r2, r0
 8020a2c:	daa8      	bge.n	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a2e:	1c58      	adds	r0, r3, #1
 8020a30:	dba6      	blt.n	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020a34:	4298      	cmp	r0, r3
 8020a36:	dda3      	ble.n	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a38:	9000      	str	r0, [sp, #0]
 8020a3a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020a3c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8020a40:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8020a44:	9b07      	ldr	r3, [sp, #28]
 8020a46:	4651      	mov	r1, sl
 8020a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a4a:	f7ff fdd1 	bl	80205f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8020a4e:	e797      	b.n	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a50:	1431      	asrs	r1, r6, #16
 8020a52:	9c07      	ldr	r4, [sp, #28]
 8020a54:	1428      	asrs	r0, r5, #16
 8020a56:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020a5a:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8020a5e:	fb04 1000 	mla	r0, r4, r0, r1
 8020a62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020a64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020a66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020a6a:	4401      	add	r1, r0
 8020a6c:	5c20      	ldrb	r0, [r4, r0]
 8020a6e:	f891 8002 	ldrb.w	r8, [r1, #2]
 8020a72:	900e      	str	r0, [sp, #56]	; 0x38
 8020a74:	f891 a003 	ldrb.w	sl, [r1, #3]
 8020a78:	7848      	ldrb	r0, [r1, #1]
 8020a7a:	f891 9004 	ldrb.w	r9, [r1, #4]
 8020a7e:	f891 b005 	ldrb.w	fp, [r1, #5]
 8020a82:	b172      	cbz	r2, 8020aa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8020a84:	3105      	adds	r1, #5
 8020a86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a88:	190f      	adds	r7, r1, r4
 8020a8a:	5d09      	ldrb	r1, [r1, r4]
 8020a8c:	9115      	str	r1, [sp, #84]	; 0x54
 8020a8e:	7879      	ldrb	r1, [r7, #1]
 8020a90:	9117      	str	r1, [sp, #92]	; 0x5c
 8020a92:	78b9      	ldrb	r1, [r7, #2]
 8020a94:	9119      	str	r1, [sp, #100]	; 0x64
 8020a96:	78f9      	ldrb	r1, [r7, #3]
 8020a98:	9116      	str	r1, [sp, #88]	; 0x58
 8020a9a:	7939      	ldrb	r1, [r7, #4]
 8020a9c:	9118      	str	r1, [sp, #96]	; 0x60
 8020a9e:	7979      	ldrb	r1, [r7, #5]
 8020aa0:	911a      	str	r1, [sp, #104]	; 0x68
 8020aa2:	b29b      	uxth	r3, r3
 8020aa4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020aa6:	b292      	uxth	r2, r2
 8020aa8:	f10c 0c03 	add.w	ip, ip, #3
 8020aac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020ab0:	fb03 f102 	mul.w	r1, r3, r2
 8020ab4:	011b      	lsls	r3, r3, #4
 8020ab6:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8020aba:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020abe:	1a5b      	subs	r3, r3, r1
 8020ac0:	b292      	uxth	r2, r2
 8020ac2:	b29b      	uxth	r3, r3
 8020ac4:	1abf      	subs	r7, r7, r2
 8020ac6:	fb03 f909 	mul.w	r9, r3, r9
 8020aca:	b2bf      	uxth	r7, r7
 8020acc:	fb03 fa0a 	mul.w	sl, r3, sl
 8020ad0:	fb03 f30b 	mul.w	r3, r3, fp
 8020ad4:	fb07 9900 	mla	r9, r7, r0, r9
 8020ad8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020ada:	fb07 aa04 	mla	sl, r7, r4, sl
 8020ade:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020ae0:	fb02 9900 	mla	r9, r2, r0, r9
 8020ae4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020ae6:	fb07 3308 	mla	r3, r7, r8, r3
 8020aea:	fb01 9900 	mla	r9, r1, r0, r9
 8020aee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020af0:	fb02 aa04 	mla	sl, r2, r4, sl
 8020af4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020af6:	fb02 3200 	mla	r2, r2, r0, r3
 8020afa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020afc:	fb01 aa04 	mla	sl, r1, r4, sl
 8020b00:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020b04:	fb01 2103 	mla	r1, r1, r3, r2
 8020b08:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020b0a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020b0e:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8020b12:	1209      	asrs	r1, r1, #8
 8020b14:	441e      	add	r6, r3
 8020b16:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020b18:	f80c ac06 	strb.w	sl, [ip, #-6]
 8020b1c:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8020b20:	441d      	add	r5, r3
 8020b22:	e697      	b.n	8020854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8020b24:	b01d      	add	sp, #116	; 0x74
 8020b26:	ecbd 8b0a 	vpop	{d8-d12}
 8020b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8020b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b34:	b085      	sub	sp, #20
 8020b36:	7888      	ldrb	r0, [r1, #2]
 8020b38:	4691      	mov	r9, r2
 8020b3a:	9000      	str	r0, [sp, #0]
 8020b3c:	7848      	ldrb	r0, [r1, #1]
 8020b3e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8020b42:	9001      	str	r0, [sp, #4]
 8020b44:	7808      	ldrb	r0, [r1, #0]
 8020b46:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8020b4a:	9002      	str	r0, [sp, #8]
 8020b4c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020b50:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8020b54:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8020b58:	fb04 c603 	mla	r6, r4, r3, ip
 8020b5c:	2c00      	cmp	r4, #0
 8020b5e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8020b62:	9a00      	ldr	r2, [sp, #0]
 8020b64:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020b68:	9a01      	ldr	r2, [sp, #4]
 8020b6a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020b6e:	db3a      	blt.n	8020be6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8020b70:	45a0      	cmp	r8, r4
 8020b72:	dd38      	ble.n	8020be6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8020b74:	f1bc 0f00 	cmp.w	ip, #0
 8020b78:	db33      	blt.n	8020be2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8020b7a:	4563      	cmp	r3, ip
 8020b7c:	dd31      	ble.n	8020be2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8020b7e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8020b82:	f11c 0601 	adds.w	r6, ip, #1
 8020b86:	d431      	bmi.n	8020bec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020b88:	42b3      	cmp	r3, r6
 8020b8a:	dd2f      	ble.n	8020bec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020b8c:	b375      	cbz	r5, 8020bec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020b8e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8020b92:	3401      	adds	r4, #1
 8020b94:	d42e      	bmi.n	8020bf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020b96:	45a0      	cmp	r8, r4
 8020b98:	dd2c      	ble.n	8020bf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020b9a:	b35f      	cbz	r7, 8020bf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020b9c:	f1bc 0f00 	cmp.w	ip, #0
 8020ba0:	db26      	blt.n	8020bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8020ba2:	4563      	cmp	r3, ip
 8020ba4:	dd24      	ble.n	8020bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8020ba6:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8020baa:	f11c 0c01 	adds.w	ip, ip, #1
 8020bae:	d405      	bmi.n	8020bbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020bb0:	4563      	cmp	r3, ip
 8020bb2:	dd03      	ble.n	8020bbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020bb4:	b115      	cbz	r5, 8020bbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020bb6:	3301      	adds	r3, #1
 8020bb8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8020bbc:	2d0f      	cmp	r5, #15
 8020bbe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020bc2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020bc6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020bca:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020bce:	d801      	bhi.n	8020bd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8020bd0:	2f0f      	cmp	r7, #15
 8020bd2:	d911      	bls.n	8020bf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8020bd4:	4b80      	ldr	r3, [pc, #512]	; (8020dd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8020bd6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020bda:	4a80      	ldr	r2, [pc, #512]	; (8020ddc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8020bdc:	4880      	ldr	r0, [pc, #512]	; (8020de0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8020bde:	f003 fd07 	bl	80245f0 <__assert_func>
 8020be2:	4602      	mov	r2, r0
 8020be4:	e7cd      	b.n	8020b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8020be6:	4606      	mov	r6, r0
 8020be8:	4602      	mov	r2, r0
 8020bea:	e7d2      	b.n	8020b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020bec:	4606      	mov	r6, r0
 8020bee:	e7d0      	b.n	8020b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020bf0:	4604      	mov	r4, r0
 8020bf2:	e7da      	b.n	8020baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8020bf4:	4604      	mov	r4, r0
 8020bf6:	e7e1      	b.n	8020bbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020bf8:	b2ab      	uxth	r3, r5
 8020bfa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020bfe:	b2bf      	uxth	r7, r7
 8020c00:	fb03 fe07 	mul.w	lr, r3, r7
 8020c04:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8020c08:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020c0c:	eba3 0c0e 	sub.w	ip, r3, lr
 8020c10:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020c14:	b2bf      	uxth	r7, r7
 8020c16:	fa1f fc8c 	uxth.w	ip, ip
 8020c1a:	eba5 0507 	sub.w	r5, r5, r7
 8020c1e:	fb0c f30a 	mul.w	r3, ip, sl
 8020c22:	b2ad      	uxth	r5, r5
 8020c24:	fb05 330b 	mla	r3, r5, fp, r3
 8020c28:	fb07 3309 	mla	r3, r7, r9, r3
 8020c2c:	fb0e 3308 	mla	r3, lr, r8, r3
 8020c30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020c34:	9303      	str	r3, [sp, #12]
 8020c36:	d018      	beq.n	8020c6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8020c38:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020c3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c40:	fb0b f303 	mul.w	r3, fp, r3
 8020c44:	fb0b fb02 	mul.w	fp, fp, r2
 8020c48:	0a1a      	lsrs	r2, r3, #8
 8020c4a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020c4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c52:	441a      	add	r2, r3
 8020c54:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8020c58:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020c5c:	0a12      	lsrs	r2, r2, #8
 8020c5e:	0a1b      	lsrs	r3, r3, #8
 8020c60:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c68:	431a      	orrs	r2, r3
 8020c6a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020c6e:	d019      	beq.n	8020ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8020c70:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020c74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c78:	fb0a fb0b 	mul.w	fp, sl, fp
 8020c7c:	fb0a fa06 	mul.w	sl, sl, r6
 8020c80:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020c84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020c88:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020c8c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c90:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020c94:	445e      	add	r6, fp
 8020c96:	0a1b      	lsrs	r3, r3, #8
 8020c98:	0a36      	lsrs	r6, r6, #8
 8020c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c9e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020ca2:	431e      	orrs	r6, r3
 8020ca4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020ca8:	d019      	beq.n	8020cde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8020caa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020cae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020cb2:	fb09 fa0a 	mul.w	sl, r9, sl
 8020cb6:	fb09 f904 	mul.w	r9, r9, r4
 8020cba:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020cbe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020cc2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8020cc6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020cca:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020cce:	4454      	add	r4, sl
 8020cd0:	0a1b      	lsrs	r3, r3, #8
 8020cd2:	0a24      	lsrs	r4, r4, #8
 8020cd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cd8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020cdc:	431c      	orrs	r4, r3
 8020cde:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020ce2:	d019      	beq.n	8020d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8020ce4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020ce8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020cec:	fb08 f909 	mul.w	r9, r8, r9
 8020cf0:	fb08 f800 	mul.w	r8, r8, r0
 8020cf4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020cf8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020cfc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020d00:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020d04:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020d08:	4448      	add	r0, r9
 8020d0a:	0a1b      	lsrs	r3, r3, #8
 8020d0c:	0a00      	lsrs	r0, r0, #8
 8020d0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d12:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020d16:	4318      	orrs	r0, r3
 8020d18:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020d1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d20:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020d24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020d28:	fb0c f808 	mul.w	r8, ip, r8
 8020d2c:	fb0c f606 	mul.w	r6, ip, r6
 8020d30:	fb05 8803 	mla	r8, r5, r3, r8
 8020d34:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020d38:	fb05 6202 	mla	r2, r5, r2, r6
 8020d3c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020d40:	fb07 8803 	mla	r8, r7, r3, r8
 8020d44:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020d48:	fb07 2704 	mla	r7, r7, r4, r2
 8020d4c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d50:	fb0e 8303 	mla	r3, lr, r3, r8
 8020d54:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8020d58:	fb0e 7e00 	mla	lr, lr, r0, r7
 8020d5c:	9803      	ldr	r0, [sp, #12]
 8020d5e:	b292      	uxth	r2, r2
 8020d60:	9c02      	ldr	r4, [sp, #8]
 8020d62:	0a1b      	lsrs	r3, r3, #8
 8020d64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d68:	4350      	muls	r0, r2
 8020d6a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d6e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020d72:	ea43 0e0e 	orr.w	lr, r3, lr
 8020d76:	1c43      	adds	r3, r0, #1
 8020d78:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020d7c:	fa5f f08e 	uxtb.w	r0, lr
 8020d80:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020d84:	b2db      	uxtb	r3, r3
 8020d86:	fb14 f403 	smulbb	r4, r4, r3
 8020d8a:	fb00 4002 	mla	r0, r0, r2, r4
 8020d8e:	b280      	uxth	r0, r0
 8020d90:	1c44      	adds	r4, r0, #1
 8020d92:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020d96:	9c01      	ldr	r4, [sp, #4]
 8020d98:	fb14 f403 	smulbb	r4, r4, r3
 8020d9c:	1200      	asrs	r0, r0, #8
 8020d9e:	7008      	strb	r0, [r1, #0]
 8020da0:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8020da4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020da8:	fb00 4002 	mla	r0, r0, r2, r4
 8020dac:	b280      	uxth	r0, r0
 8020dae:	1c44      	adds	r4, r0, #1
 8020db0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020db4:	1200      	asrs	r0, r0, #8
 8020db6:	7048      	strb	r0, [r1, #1]
 8020db8:	9800      	ldr	r0, [sp, #0]
 8020dba:	fb10 f303 	smulbb	r3, r0, r3
 8020dbe:	fb0e 3202 	mla	r2, lr, r2, r3
 8020dc2:	b292      	uxth	r2, r2
 8020dc4:	f102 0e01 	add.w	lr, r2, #1
 8020dc8:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020dcc:	1212      	asrs	r2, r2, #8
 8020dce:	708a      	strb	r2, [r1, #2]
 8020dd0:	b005      	add	sp, #20
 8020dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dd6:	bf00      	nop
 8020dd8:	08028f07 	.word	0x08028f07
 8020ddc:	080293fe 	.word	0x080293fe
 8020de0:	08028fd0 	.word	0x08028fd0

08020de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020de8:	ed2d 8b08 	vpush	{d8-d11}
 8020dec:	b099      	sub	sp, #100	; 0x64
 8020dee:	eeb0 aa40 	vmov.f32	s20, s0
 8020df2:	eef0 9a60 	vmov.f32	s19, s1
 8020df6:	9306      	str	r3, [sp, #24]
 8020df8:	eeb0 9a41 	vmov.f32	s18, s2
 8020dfc:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8020e00:	eeb0 8a62 	vmov.f32	s16, s5
 8020e04:	9216      	str	r2, [sp, #88]	; 0x58
 8020e06:	eef0 8a43 	vmov.f32	s17, s6
 8020e0a:	9307      	str	r3, [sp, #28]
 8020e0c:	eef0 ba44 	vmov.f32	s23, s8
 8020e10:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8020e14:	eeb0 ba64 	vmov.f32	s22, s9
 8020e18:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020e1a:	eef0 aa45 	vmov.f32	s21, s10
 8020e1e:	9310      	str	r3, [sp, #64]	; 0x40
 8020e20:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8020e24:	9017      	str	r0, [sp, #92]	; 0x5c
 8020e26:	9112      	str	r1, [sp, #72]	; 0x48
 8020e28:	6850      	ldr	r0, [r2, #4]
 8020e2a:	9315      	str	r3, [sp, #84]	; 0x54
 8020e2c:	6812      	ldr	r2, [r2, #0]
 8020e2e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8020e30:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8020e34:	fb00 1303 	mla	r3, r0, r3, r1
 8020e38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e3c:	18d3      	adds	r3, r2, r3
 8020e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8020e40:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	9311      	str	r3, [sp, #68]	; 0x44
 8020e46:	9b07      	ldr	r3, [sp, #28]
 8020e48:	009b      	lsls	r3, r3, #2
 8020e4a:	930e      	str	r3, [sp, #56]	; 0x38
 8020e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	dc03      	bgt.n	8020e5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020e52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	f340 833b 	ble.w	80214d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8020e5a:	9b06      	ldr	r3, [sp, #24]
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	f340 8197 	ble.w	8021190 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8020e62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e64:	1423      	asrs	r3, r4, #16
 8020e66:	1412      	asrs	r2, r2, #16
 8020e68:	d432      	bmi.n	8020ed0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8020e6a:	1c51      	adds	r1, r2, #1
 8020e6c:	9807      	ldr	r0, [sp, #28]
 8020e6e:	4288      	cmp	r0, r1
 8020e70:	dd31      	ble.n	8020ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	db2f      	blt.n	8020ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020e76:	1c59      	adds	r1, r3, #1
 8020e78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020e7a:	4288      	cmp	r0, r1
 8020e7c:	dd2b      	ble.n	8020ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020e7e:	9b06      	ldr	r3, [sp, #24]
 8020e80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020e82:	3b01      	subs	r3, #1
 8020e84:	992b      	ldr	r1, [sp, #172]	; 0xac
 8020e86:	fb02 1203 	mla	r2, r2, r3, r1
 8020e8a:	1412      	asrs	r2, r2, #16
 8020e8c:	d42e      	bmi.n	8020eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020e8e:	3201      	adds	r2, #1
 8020e90:	9907      	ldr	r1, [sp, #28]
 8020e92:	4291      	cmp	r1, r2
 8020e94:	dd2a      	ble.n	8020eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020e96:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020e98:	fb02 4303 	mla	r3, r2, r3, r4
 8020e9c:	141b      	asrs	r3, r3, #16
 8020e9e:	d425      	bmi.n	8020eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020ea0:	3301      	adds	r3, #1
 8020ea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ea4:	429a      	cmp	r2, r3
 8020ea6:	dd21      	ble.n	8020eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020eaa:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8020eae:	f103 0e03 	add.w	lr, r3, #3
 8020eb2:	9b06      	ldr	r3, [sp, #24]
 8020eb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8020eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	f300 81d2 	bgt.w	8021262 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8020ebe:	9b06      	ldr	r3, [sp, #24]
 8020ec0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ec6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020eca:	4423      	add	r3, r4
 8020ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8020ece:	e161      	b.n	8021194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8020ed0:	1c51      	adds	r1, r2, #1
 8020ed2:	f040 8150 	bne.w	8021176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020ed6:	9907      	ldr	r1, [sp, #28]
 8020ed8:	428a      	cmp	r2, r1
 8020eda:	f280 814c 	bge.w	8021176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020ede:	1c5a      	adds	r2, r3, #1
 8020ee0:	f2c0 8149 	blt.w	8021176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ee6:	4293      	cmp	r3, r2
 8020ee8:	f280 8145 	bge.w	8021176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020eec:	9b06      	ldr	r3, [sp, #24]
 8020eee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020ef0:	9314      	str	r3, [sp, #80]	; 0x50
 8020ef2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8020ef6:	9313      	str	r3, [sp, #76]	; 0x4c
 8020ef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	dddf      	ble.n	8020ebe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8020efe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020f00:	1423      	asrs	r3, r4, #16
 8020f02:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020f06:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020f0a:	1412      	asrs	r2, r2, #16
 8020f0c:	f100 8190 	bmi.w	8021230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8020f10:	1c55      	adds	r5, r2, #1
 8020f12:	9f07      	ldr	r7, [sp, #28]
 8020f14:	42af      	cmp	r7, r5
 8020f16:	f340 818d 	ble.w	8021234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	f2c0 818a 	blt.w	8021234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020f20:	1c5d      	adds	r5, r3, #1
 8020f22:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020f24:	42af      	cmp	r7, r5
 8020f26:	f340 8185 	ble.w	8021234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020f2a:	9d07      	ldr	r5, [sp, #28]
 8020f2c:	fb03 2305 	mla	r3, r3, r5, r2
 8020f30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f32:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020f3a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020f3e:	2800      	cmp	r0, #0
 8020f40:	f000 8167 	beq.w	8021212 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020f44:	686a      	ldr	r2, [r5, #4]
 8020f46:	920b      	str	r2, [sp, #44]	; 0x2c
 8020f48:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020f4c:	2900      	cmp	r1, #0
 8020f4e:	f000 8169 	beq.w	8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f54:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020f56:	18aa      	adds	r2, r5, r2
 8020f58:	59ed      	ldr	r5, [r5, r7]
 8020f5a:	6852      	ldr	r2, [r2, #4]
 8020f5c:	9508      	str	r5, [sp, #32]
 8020f5e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8020f62:	0e15      	lsrs	r5, r2, #24
 8020f64:	920c      	str	r2, [sp, #48]	; 0x30
 8020f66:	b280      	uxth	r0, r0
 8020f68:	b289      	uxth	r1, r1
 8020f6a:	fb00 fb01 	mul.w	fp, r0, r1
 8020f6e:	0100      	lsls	r0, r0, #4
 8020f70:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8020f74:	eba0 090b 	sub.w	r9, r0, fp
 8020f78:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8020f7c:	b289      	uxth	r1, r1
 8020f7e:	fa1f f989 	uxth.w	r9, r9
 8020f82:	1a52      	subs	r2, r2, r1
 8020f84:	fb09 f008 	mul.w	r0, r9, r8
 8020f88:	b292      	uxth	r2, r2
 8020f8a:	fb02 000c 	mla	r0, r2, ip, r0
 8020f8e:	fb01 000a 	mla	r0, r1, sl, r0
 8020f92:	fb0b 0005 	mla	r0, fp, r5, r0
 8020f96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020f9a:	2800      	cmp	r0, #0
 8020f9c:	f000 80e0 	beq.w	8021160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020fa0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020fa4:	d01b      	beq.n	8020fde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8020fa6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020faa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fae:	fb0c fe0e 	mul.w	lr, ip, lr
 8020fb2:	fb0c fc03 	mul.w	ip, ip, r3
 8020fb6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020fba:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020fbe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fc2:	4473      	add	r3, lr
 8020fc4:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020fc8:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020fcc:	0a1b      	lsrs	r3, r3, #8
 8020fce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fd6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020fda:	ea43 030e 	orr.w	r3, r3, lr
 8020fde:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020fe2:	d01e      	beq.n	8021022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8020fe4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020fe6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020fea:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020fee:	fb08 fc0c 	mul.w	ip, r8, ip
 8020ff2:	fb08 f80e 	mul.w	r8, r8, lr
 8020ff6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020ffa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020ffe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021002:	44e6      	add	lr, ip
 8021004:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021008:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802100c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021010:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021014:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021018:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802101c:	ea4e 0708 	orr.w	r7, lr, r8
 8021020:	970b      	str	r7, [sp, #44]	; 0x2c
 8021022:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021026:	d01e      	beq.n	8021066 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021028:	9f08      	ldr	r7, [sp, #32]
 802102a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802102e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021032:	fb0a f808 	mul.w	r8, sl, r8
 8021036:	fb0a fa0c 	mul.w	sl, sl, ip
 802103a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802103e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021042:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021046:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802104a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802104e:	44c6      	add	lr, r8
 8021050:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021054:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021058:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802105c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021060:	ea4e 070a 	orr.w	r7, lr, sl
 8021064:	9708      	str	r7, [sp, #32]
 8021066:	2dff      	cmp	r5, #255	; 0xff
 8021068:	d01d      	beq.n	80210a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 802106a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802106c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021070:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021074:	fb05 f808 	mul.w	r8, r5, r8
 8021078:	fb05 f50c 	mul.w	r5, r5, ip
 802107c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021080:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021084:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021088:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802108c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021090:	44c6      	add	lr, r8
 8021092:	0a2d      	lsrs	r5, r5, #8
 8021094:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021098:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802109c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210a0:	ea4e 0505 	orr.w	r5, lr, r5
 80210a4:	950c      	str	r5, [sp, #48]	; 0x30
 80210a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80210a8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80210ac:	9f08      	ldr	r7, [sp, #32]
 80210ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80210b6:	fb09 f505 	mul.w	r5, r9, r5
 80210ba:	fb02 550c 	mla	r5, r2, ip, r5
 80210be:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80210c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80210c4:	fb01 550c 	mla	r5, r1, ip, r5
 80210c8:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80210cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80210ce:	fb0b 550c 	mla	r5, fp, ip, r5
 80210d2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80210d6:	fb09 f90c 	mul.w	r9, r9, ip
 80210da:	0a2d      	lsrs	r5, r5, #8
 80210dc:	fb02 9303 	mla	r3, r2, r3, r9
 80210e0:	9a08      	ldr	r2, [sp, #32]
 80210e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80210e6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80210ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210ec:	fb01 330e 	mla	r3, r1, lr, r3
 80210f0:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80210f4:	fb0b 3b01 	mla	fp, fp, r1, r3
 80210f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80210fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80210fc:	4343      	muls	r3, r0
 80210fe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021102:	1c58      	adds	r0, r3, #1
 8021104:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021108:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802110c:	ea45 050b 	orr.w	r5, r5, fp
 8021110:	7833      	ldrb	r3, [r6, #0]
 8021112:	b2ea      	uxtb	r2, r5
 8021114:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021118:	fb12 f201 	smulbb	r2, r2, r1
 802111c:	b2c0      	uxtb	r0, r0
 802111e:	fb03 2300 	mla	r3, r3, r0, r2
 8021122:	b29b      	uxth	r3, r3
 8021124:	1c5a      	adds	r2, r3, #1
 8021126:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802112a:	7872      	ldrb	r2, [r6, #1]
 802112c:	fb12 f200 	smulbb	r2, r2, r0
 8021130:	121b      	asrs	r3, r3, #8
 8021132:	7033      	strb	r3, [r6, #0]
 8021134:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021138:	0c2d      	lsrs	r5, r5, #16
 802113a:	fb03 2301 	mla	r3, r3, r1, r2
 802113e:	b29b      	uxth	r3, r3
 8021140:	1c5a      	adds	r2, r3, #1
 8021142:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021146:	121b      	asrs	r3, r3, #8
 8021148:	7073      	strb	r3, [r6, #1]
 802114a:	78b3      	ldrb	r3, [r6, #2]
 802114c:	fb13 f000 	smulbb	r0, r3, r0
 8021150:	fb05 0501 	mla	r5, r5, r1, r0
 8021154:	b2ad      	uxth	r5, r5
 8021156:	1c6b      	adds	r3, r5, #1
 8021158:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802115c:	122d      	asrs	r5, r5, #8
 802115e:	70b5      	strb	r5, [r6, #2]
 8021160:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021162:	3603      	adds	r6, #3
 8021164:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021166:	4413      	add	r3, r2
 8021168:	932b      	str	r3, [sp, #172]	; 0xac
 802116a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802116c:	441c      	add	r4, r3
 802116e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021170:	3b01      	subs	r3, #1
 8021172:	9314      	str	r3, [sp, #80]	; 0x50
 8021174:	e6c0      	b.n	8020ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8021176:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021178:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802117a:	4413      	add	r3, r2
 802117c:	932b      	str	r3, [sp, #172]	; 0xac
 802117e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021180:	441c      	add	r4, r3
 8021182:	9b06      	ldr	r3, [sp, #24]
 8021184:	3b01      	subs	r3, #1
 8021186:	9306      	str	r3, [sp, #24]
 8021188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802118a:	3303      	adds	r3, #3
 802118c:	930a      	str	r3, [sp, #40]	; 0x28
 802118e:	e664      	b.n	8020e5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021190:	f47f ae75 	bne.w	8020e7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8021194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021196:	2b00      	cmp	r3, #0
 8021198:	f340 819a 	ble.w	80214d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802119c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80211a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80211a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80211aa:	eef0 6a48 	vmov.f32	s13, s16
 80211ae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80211b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80211b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211ba:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80211be:	eef0 6a68 	vmov.f32	s13, s17
 80211c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211c6:	ee16 4a90 	vmov	r4, s13
 80211ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80211ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80211d2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80211d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80211da:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80211de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80211e2:	ee18 2a10 	vmov	r2, s16
 80211e6:	eeb0 8a47 	vmov.f32	s16, s14
 80211ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80211ee:	ee18 2a90 	vmov	r2, s17
 80211f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80211f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80211f6:	eef0 8a67 	vmov.f32	s17, s15
 80211fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80211fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8021200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021202:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021204:	3b01      	subs	r3, #1
 8021206:	9312      	str	r3, [sp, #72]	; 0x48
 8021208:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802120a:	bf08      	it	eq
 802120c:	4613      	moveq	r3, r2
 802120e:	9306      	str	r3, [sp, #24]
 8021210:	e61c      	b.n	8020e4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021212:	b151      	cbz	r1, 802122a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021216:	58aa      	ldr	r2, [r5, r2]
 8021218:	25ff      	movs	r5, #255	; 0xff
 802121a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802121e:	9208      	str	r2, [sp, #32]
 8021220:	46a8      	mov	r8, r5
 8021222:	e6a0      	b.n	8020f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021224:	25ff      	movs	r5, #255	; 0xff
 8021226:	46aa      	mov	sl, r5
 8021228:	e69d      	b.n	8020f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802122a:	25ff      	movs	r5, #255	; 0xff
 802122c:	46aa      	mov	sl, r5
 802122e:	e7f7      	b.n	8021220 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8021230:	1c57      	adds	r7, r2, #1
 8021232:	d195      	bne.n	8021160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021234:	9d07      	ldr	r5, [sp, #28]
 8021236:	4295      	cmp	r5, r2
 8021238:	dd92      	ble.n	8021160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802123a:	1c5d      	adds	r5, r3, #1
 802123c:	db90      	blt.n	8021160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802123e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021240:	429d      	cmp	r5, r3
 8021242:	dd8d      	ble.n	8021160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021244:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021246:	9201      	str	r2, [sp, #4]
 8021248:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802124a:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802124e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021250:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021252:	9300      	str	r3, [sp, #0]
 8021254:	9b07      	ldr	r3, [sp, #28]
 8021256:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802125a:	4631      	mov	r1, r6
 802125c:	f7ff fc68 	bl	8020b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021260:	e77e      	b.n	8021160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021262:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021264:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021268:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802126a:	9d07      	ldr	r5, [sp, #28]
 802126c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021270:	1412      	asrs	r2, r2, #16
 8021272:	1423      	asrs	r3, r4, #16
 8021274:	fb05 2303 	mla	r3, r5, r3, r2
 8021278:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802127a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021282:	0e1e      	lsrs	r6, r3, #24
 8021284:	2900      	cmp	r1, #0
 8021286:	f000 8114 	beq.w	80214b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802128a:	686a      	ldr	r2, [r5, #4]
 802128c:	920d      	str	r2, [sp, #52]	; 0x34
 802128e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8021292:	2800      	cmp	r0, #0
 8021294:	f000 8116 	beq.w	80214c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8021298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802129a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802129c:	18aa      	adds	r2, r5, r2
 802129e:	59ed      	ldr	r5, [r5, r7]
 80212a0:	6852      	ldr	r2, [r2, #4]
 80212a2:	9509      	str	r5, [sp, #36]	; 0x24
 80212a4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80212a8:	0e15      	lsrs	r5, r2, #24
 80212aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80212ac:	b289      	uxth	r1, r1
 80212ae:	b280      	uxth	r0, r0
 80212b0:	fb01 fa00 	mul.w	sl, r1, r0
 80212b4:	0109      	lsls	r1, r1, #4
 80212b6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80212ba:	eba1 080a 	sub.w	r8, r1, sl
 80212be:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80212c2:	b280      	uxth	r0, r0
 80212c4:	fa1f f888 	uxth.w	r8, r8
 80212c8:	1a12      	subs	r2, r2, r0
 80212ca:	fb08 f10c 	mul.w	r1, r8, ip
 80212ce:	b292      	uxth	r2, r2
 80212d0:	fb02 1106 	mla	r1, r2, r6, r1
 80212d4:	fb00 1109 	mla	r1, r0, r9, r1
 80212d8:	fb0a 1105 	mla	r1, sl, r5, r1
 80212dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80212e0:	2900      	cmp	r1, #0
 80212e2:	f000 80da 	beq.w	802149a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80212e6:	2eff      	cmp	r6, #255	; 0xff
 80212e8:	d016      	beq.n	8021318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80212ea:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80212ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212f2:	4377      	muls	r7, r6
 80212f4:	435e      	muls	r6, r3
 80212f6:	0a3b      	lsrs	r3, r7, #8
 80212f8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80212fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021300:	443b      	add	r3, r7
 8021302:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021306:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802130a:	0a1b      	lsrs	r3, r3, #8
 802130c:	0a3f      	lsrs	r7, r7, #8
 802130e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021312:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021316:	433b      	orrs	r3, r7
 8021318:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802131c:	d01d      	beq.n	802135a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802131e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021320:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021322:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021326:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802132a:	fb0c f606 	mul.w	r6, ip, r6
 802132e:	fb0c fc07 	mul.w	ip, ip, r7
 8021332:	0a37      	lsrs	r7, r6, #8
 8021334:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021338:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802133c:	4437      	add	r7, r6
 802133e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021342:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021346:	0a3f      	lsrs	r7, r7, #8
 8021348:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802134c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021350:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021354:	ea47 060c 	orr.w	r6, r7, ip
 8021358:	960d      	str	r6, [sp, #52]	; 0x34
 802135a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802135e:	d01d      	beq.n	802139c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8021360:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021362:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021366:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802136a:	fb09 fc0c 	mul.w	ip, r9, ip
 802136e:	fb09 f906 	mul.w	r9, r9, r6
 8021372:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021376:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802137a:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802137e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021382:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8021386:	4467      	add	r7, ip
 8021388:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802138c:	0a3f      	lsrs	r7, r7, #8
 802138e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021392:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021396:	ea47 0609 	orr.w	r6, r7, r9
 802139a:	9609      	str	r6, [sp, #36]	; 0x24
 802139c:	2dff      	cmp	r5, #255	; 0xff
 802139e:	d01a      	beq.n	80213d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80213a0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80213a2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80213a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80213aa:	fb05 fc0c 	mul.w	ip, r5, ip
 80213ae:	4375      	muls	r5, r6
 80213b0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80213b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80213b8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80213bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80213c0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80213c4:	4467      	add	r7, ip
 80213c6:	0a2d      	lsrs	r5, r5, #8
 80213c8:	0a3f      	lsrs	r7, r7, #8
 80213ca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80213ce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80213d2:	433d      	orrs	r5, r7
 80213d4:	950f      	str	r5, [sp, #60]	; 0x3c
 80213d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80213d8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80213dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80213e4:	fb08 f505 	mul.w	r5, r8, r5
 80213e8:	fb02 5506 	mla	r5, r2, r6, r5
 80213ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80213ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80213f2:	fb00 5506 	mla	r5, r0, r6, r5
 80213f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80213f8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80213fc:	fb0a 5506 	mla	r5, sl, r6, r5
 8021400:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021402:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021406:	0a2d      	lsrs	r5, r5, #8
 8021408:	fb08 f806 	mul.w	r8, r8, r6
 802140c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021410:	fb02 8303 	mla	r3, r2, r3, r8
 8021414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021416:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802141a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802141c:	fb00 3307 	mla	r3, r0, r7, r3
 8021420:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021424:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021428:	fb01 f30b 	mul.w	r3, r1, fp
 802142c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021430:	1c59      	adds	r1, r3, #1
 8021432:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021436:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802143a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802143e:	ea45 050c 	orr.w	r5, r5, ip
 8021442:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021446:	b2ea      	uxtb	r2, r5
 8021448:	b2c9      	uxtb	r1, r1
 802144a:	fb12 f20b 	smulbb	r2, r2, fp
 802144e:	fb03 2301 	mla	r3, r3, r1, r2
 8021452:	b29b      	uxth	r3, r3
 8021454:	1c5a      	adds	r2, r3, #1
 8021456:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802145a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802145e:	fb12 f201 	smulbb	r2, r2, r1
 8021462:	121b      	asrs	r3, r3, #8
 8021464:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021468:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802146c:	0c2d      	lsrs	r5, r5, #16
 802146e:	fb03 230b 	mla	r3, r3, fp, r2
 8021472:	b29b      	uxth	r3, r3
 8021474:	1c5a      	adds	r2, r3, #1
 8021476:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802147a:	121b      	asrs	r3, r3, #8
 802147c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021480:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021484:	fb13 f101 	smulbb	r1, r3, r1
 8021488:	fb05 150b 	mla	r5, r5, fp, r1
 802148c:	b2ad      	uxth	r5, r5
 802148e:	1c69      	adds	r1, r5, #1
 8021490:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021494:	122d      	asrs	r5, r5, #8
 8021496:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802149a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802149c:	f10e 0e03 	add.w	lr, lr, #3
 80214a0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80214a2:	4413      	add	r3, r2
 80214a4:	932b      	str	r3, [sp, #172]	; 0xac
 80214a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80214a8:	441c      	add	r4, r3
 80214aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80214ac:	3b01      	subs	r3, #1
 80214ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80214b0:	e501      	b.n	8020eb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80214b2:	b150      	cbz	r0, 80214ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80214b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214b6:	58aa      	ldr	r2, [r5, r2]
 80214b8:	25ff      	movs	r5, #255	; 0xff
 80214ba:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80214be:	9209      	str	r2, [sp, #36]	; 0x24
 80214c0:	46ac      	mov	ip, r5
 80214c2:	e6f3      	b.n	80212ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80214c4:	25ff      	movs	r5, #255	; 0xff
 80214c6:	46a9      	mov	r9, r5
 80214c8:	e6f0      	b.n	80212ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80214ca:	25ff      	movs	r5, #255	; 0xff
 80214cc:	46a9      	mov	r9, r5
 80214ce:	e7f7      	b.n	80214c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80214d0:	b019      	add	sp, #100	; 0x64
 80214d2:	ecbd 8b08 	vpop	{d8-d11}
 80214d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080214dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80214dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214e0:	b085      	sub	sp, #20
 80214e2:	7888      	ldrb	r0, [r1, #2]
 80214e4:	4691      	mov	r9, r2
 80214e6:	9000      	str	r0, [sp, #0]
 80214e8:	7848      	ldrb	r0, [r1, #1]
 80214ea:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80214ee:	9001      	str	r0, [sp, #4]
 80214f0:	7808      	ldrb	r0, [r1, #0]
 80214f2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80214f6:	9002      	str	r0, [sp, #8]
 80214f8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80214fc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021500:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021504:	fb04 c603 	mla	r6, r4, r3, ip
 8021508:	2c00      	cmp	r4, #0
 802150a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802150e:	9a00      	ldr	r2, [sp, #0]
 8021510:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021514:	9a01      	ldr	r2, [sp, #4]
 8021516:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802151a:	db3a      	blt.n	8021592 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802151c:	45a0      	cmp	r8, r4
 802151e:	dd38      	ble.n	8021592 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021520:	f1bc 0f00 	cmp.w	ip, #0
 8021524:	db33      	blt.n	802158e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021526:	4563      	cmp	r3, ip
 8021528:	dd31      	ble.n	802158e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802152a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802152e:	f11c 0601 	adds.w	r6, ip, #1
 8021532:	d431      	bmi.n	8021598 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021534:	42b3      	cmp	r3, r6
 8021536:	dd2f      	ble.n	8021598 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021538:	b375      	cbz	r5, 8021598 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802153a:	f8de 6004 	ldr.w	r6, [lr, #4]
 802153e:	3401      	adds	r4, #1
 8021540:	d42e      	bmi.n	80215a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021542:	45a0      	cmp	r8, r4
 8021544:	dd2c      	ble.n	80215a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021546:	b35f      	cbz	r7, 80215a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021548:	f1bc 0f00 	cmp.w	ip, #0
 802154c:	db26      	blt.n	802159c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802154e:	4563      	cmp	r3, ip
 8021550:	dd24      	ble.n	802159c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021552:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021556:	f11c 0c01 	adds.w	ip, ip, #1
 802155a:	d405      	bmi.n	8021568 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802155c:	4563      	cmp	r3, ip
 802155e:	dd03      	ble.n	8021568 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021560:	b115      	cbz	r5, 8021568 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021562:	3301      	adds	r3, #1
 8021564:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021568:	2d0f      	cmp	r5, #15
 802156a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802156e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021572:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021576:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802157a:	d801      	bhi.n	8021580 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 802157c:	2f0f      	cmp	r7, #15
 802157e:	d911      	bls.n	80215a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8021580:	4b77      	ldr	r3, [pc, #476]	; (8021760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8021582:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021586:	4a77      	ldr	r2, [pc, #476]	; (8021764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8021588:	4877      	ldr	r0, [pc, #476]	; (8021768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802158a:	f003 f831 	bl	80245f0 <__assert_func>
 802158e:	4602      	mov	r2, r0
 8021590:	e7cd      	b.n	802152e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8021592:	4606      	mov	r6, r0
 8021594:	4602      	mov	r2, r0
 8021596:	e7d2      	b.n	802153e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021598:	4606      	mov	r6, r0
 802159a:	e7d0      	b.n	802153e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 802159c:	4604      	mov	r4, r0
 802159e:	e7da      	b.n	8021556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80215a0:	4604      	mov	r4, r0
 80215a2:	e7e1      	b.n	8021568 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80215a4:	b2ab      	uxth	r3, r5
 80215a6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80215aa:	b2bf      	uxth	r7, r7
 80215ac:	fb03 fe07 	mul.w	lr, r3, r7
 80215b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80215b4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80215b8:	eba3 0c0e 	sub.w	ip, r3, lr
 80215bc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80215c0:	b2bf      	uxth	r7, r7
 80215c2:	fa1f fc8c 	uxth.w	ip, ip
 80215c6:	eba5 0507 	sub.w	r5, r5, r7
 80215ca:	fb0c f30a 	mul.w	r3, ip, sl
 80215ce:	b2ad      	uxth	r5, r5
 80215d0:	fb05 330b 	mla	r3, r5, fp, r3
 80215d4:	fb07 3309 	mla	r3, r7, r9, r3
 80215d8:	fb0e 3308 	mla	r3, lr, r8, r3
 80215dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215e0:	9303      	str	r3, [sp, #12]
 80215e2:	d018      	beq.n	8021616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80215e4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80215e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80215ec:	fb0b f303 	mul.w	r3, fp, r3
 80215f0:	fb0b fb02 	mul.w	fp, fp, r2
 80215f4:	0a1a      	lsrs	r2, r3, #8
 80215f6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80215fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80215fe:	441a      	add	r2, r3
 8021600:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021604:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021608:	0a12      	lsrs	r2, r2, #8
 802160a:	0a1b      	lsrs	r3, r3, #8
 802160c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021610:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021614:	431a      	orrs	r2, r3
 8021616:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802161a:	d019      	beq.n	8021650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 802161c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021620:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021624:	fb0a fb0b 	mul.w	fp, sl, fp
 8021628:	fb0a fa06 	mul.w	sl, sl, r6
 802162c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021630:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021634:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021638:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802163c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021640:	445e      	add	r6, fp
 8021642:	0a1b      	lsrs	r3, r3, #8
 8021644:	0a36      	lsrs	r6, r6, #8
 8021646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802164a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802164e:	431e      	orrs	r6, r3
 8021650:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021654:	d019      	beq.n	802168a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021656:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802165a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802165e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021662:	fb09 f904 	mul.w	r9, r9, r4
 8021666:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802166a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802166e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021672:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021676:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802167a:	4454      	add	r4, sl
 802167c:	0a1b      	lsrs	r3, r3, #8
 802167e:	0a24      	lsrs	r4, r4, #8
 8021680:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021684:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021688:	431c      	orrs	r4, r3
 802168a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802168e:	d019      	beq.n	80216c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8021690:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021694:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021698:	fb08 f909 	mul.w	r9, r8, r9
 802169c:	fb08 f800 	mul.w	r8, r8, r0
 80216a0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80216a4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80216a8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80216ac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80216b0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80216b4:	4448      	add	r0, r9
 80216b6:	0a1b      	lsrs	r3, r3, #8
 80216b8:	0a00      	lsrs	r0, r0, #8
 80216ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216be:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80216c2:	4318      	orrs	r0, r3
 80216c4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80216c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80216cc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80216d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80216d4:	fb0c f808 	mul.w	r8, ip, r8
 80216d8:	fb0c f606 	mul.w	r6, ip, r6
 80216dc:	fb05 8803 	mla	r8, r5, r3, r8
 80216e0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80216e4:	fb05 6202 	mla	r2, r5, r2, r6
 80216e8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80216ec:	fb07 8803 	mla	r8, r7, r3, r8
 80216f0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80216f4:	fb07 2704 	mla	r7, r7, r4, r2
 80216f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80216fc:	fb0e 8303 	mla	r3, lr, r3, r8
 8021700:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021704:	9802      	ldr	r0, [sp, #8]
 8021706:	0a1b      	lsrs	r3, r3, #8
 8021708:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802170c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021710:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021714:	ea43 0e0e 	orr.w	lr, r3, lr
 8021718:	9b03      	ldr	r3, [sp, #12]
 802171a:	43db      	mvns	r3, r3
 802171c:	b2db      	uxtb	r3, r3
 802171e:	4358      	muls	r0, r3
 8021720:	1c42      	adds	r2, r0, #1
 8021722:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021726:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802172a:	700a      	strb	r2, [r1, #0]
 802172c:	9a01      	ldr	r2, [sp, #4]
 802172e:	435a      	muls	r2, r3
 8021730:	1c50      	adds	r0, r2, #1
 8021732:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021736:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802173a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802173e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021742:	704a      	strb	r2, [r1, #1]
 8021744:	9a00      	ldr	r2, [sp, #0]
 8021746:	435a      	muls	r2, r3
 8021748:	4613      	mov	r3, r2
 802174a:	3201      	adds	r2, #1
 802174c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021750:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021754:	f881 e002 	strb.w	lr, [r1, #2]
 8021758:	b005      	add	sp, #20
 802175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802175e:	bf00      	nop
 8021760:	08028f07 	.word	0x08028f07
 8021764:	080293fe 	.word	0x080293fe
 8021768:	08028fd0 	.word	0x08028fd0

0802176c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021770:	ed2d 8b08 	vpush	{d8-d11}
 8021774:	b097      	sub	sp, #92	; 0x5c
 8021776:	eeb0 aa40 	vmov.f32	s20, s0
 802177a:	eef0 9a60 	vmov.f32	s19, s1
 802177e:	9306      	str	r3, [sp, #24]
 8021780:	eeb0 9a41 	vmov.f32	s18, s2
 8021784:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021788:	eeb0 8a62 	vmov.f32	s16, s5
 802178c:	9214      	str	r2, [sp, #80]	; 0x50
 802178e:	eef0 8a43 	vmov.f32	s17, s6
 8021792:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021794:	eef0 ba44 	vmov.f32	s23, s8
 8021798:	9307      	str	r3, [sp, #28]
 802179a:	eeb0 ba64 	vmov.f32	s22, s9
 802179e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80217a2:	eef0 aa45 	vmov.f32	s21, s10
 80217a6:	9015      	str	r0, [sp, #84]	; 0x54
 80217a8:	9112      	str	r1, [sp, #72]	; 0x48
 80217aa:	6850      	ldr	r0, [r2, #4]
 80217ac:	9310      	str	r3, [sp, #64]	; 0x40
 80217ae:	6812      	ldr	r2, [r2, #0]
 80217b0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80217b2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80217b6:	fb00 1303 	mla	r3, r0, r3, r1
 80217ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217be:	18d3      	adds	r3, r2, r3
 80217c0:	930a      	str	r3, [sp, #40]	; 0x28
 80217c2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80217c4:	681b      	ldr	r3, [r3, #0]
 80217c6:	9311      	str	r3, [sp, #68]	; 0x44
 80217c8:	9b07      	ldr	r3, [sp, #28]
 80217ca:	009b      	lsls	r3, r3, #2
 80217cc:	930e      	str	r3, [sp, #56]	; 0x38
 80217ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	dc03      	bgt.n	80217dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80217d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	f340 832e 	ble.w	8021e38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80217dc:	9b06      	ldr	r3, [sp, #24]
 80217de:	2b00      	cmp	r3, #0
 80217e0:	f340 8186 	ble.w	8021af0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80217e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80217e6:	1423      	asrs	r3, r4, #16
 80217e8:	1412      	asrs	r2, r2, #16
 80217ea:	d42f      	bmi.n	802184c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80217ec:	1c51      	adds	r1, r2, #1
 80217ee:	9807      	ldr	r0, [sp, #28]
 80217f0:	4288      	cmp	r0, r1
 80217f2:	dd2e      	ble.n	8021852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	db2c      	blt.n	8021852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217f8:	1c59      	adds	r1, r3, #1
 80217fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80217fc:	4288      	cmp	r0, r1
 80217fe:	dd28      	ble.n	8021852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021800:	9b06      	ldr	r3, [sp, #24]
 8021802:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021804:	3b01      	subs	r3, #1
 8021806:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021808:	fb02 1203 	mla	r2, r2, r3, r1
 802180c:	1412      	asrs	r2, r2, #16
 802180e:	d42b      	bmi.n	8021868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021810:	3201      	adds	r2, #1
 8021812:	9907      	ldr	r1, [sp, #28]
 8021814:	4291      	cmp	r1, r2
 8021816:	dd27      	ble.n	8021868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021818:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802181a:	fb02 4303 	mla	r3, r2, r3, r4
 802181e:	141b      	asrs	r3, r3, #16
 8021820:	d422      	bmi.n	8021868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021822:	3301      	adds	r3, #1
 8021824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021826:	429a      	cmp	r2, r3
 8021828:	dd1e      	ble.n	8021868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802182a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802182c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021830:	1cdd      	adds	r5, r3, #3
 8021832:	f1bb 0f00 	cmp.w	fp, #0
 8021836:	f300 81c4 	bgt.w	8021bc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802183a:	9b06      	ldr	r3, [sp, #24]
 802183c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021842:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021846:	4423      	add	r3, r4
 8021848:	930a      	str	r3, [sp, #40]	; 0x28
 802184a:	e153      	b.n	8021af4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 802184c:	1c51      	adds	r1, r2, #1
 802184e:	f040 8142 	bne.w	8021ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021852:	9907      	ldr	r1, [sp, #28]
 8021854:	428a      	cmp	r2, r1
 8021856:	f280 813e 	bge.w	8021ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802185a:	1c5a      	adds	r2, r3, #1
 802185c:	f2c0 813b 	blt.w	8021ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021860:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021862:	4293      	cmp	r3, r2
 8021864:	f280 8137 	bge.w	8021ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021868:	9b06      	ldr	r3, [sp, #24]
 802186a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802186c:	9313      	str	r3, [sp, #76]	; 0x4c
 802186e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021870:	2b00      	cmp	r3, #0
 8021872:	dde2      	ble.n	802183a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8021874:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021876:	1423      	asrs	r3, r4, #16
 8021878:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802187a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802187e:	1409      	asrs	r1, r1, #16
 8021880:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8021884:	f100 8187 	bmi.w	8021b96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8021888:	1c4e      	adds	r6, r1, #1
 802188a:	9f07      	ldr	r7, [sp, #28]
 802188c:	42b7      	cmp	r7, r6
 802188e:	f340 8184 	ble.w	8021b9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021892:	2b00      	cmp	r3, #0
 8021894:	f2c0 8181 	blt.w	8021b9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021898:	1c5e      	adds	r6, r3, #1
 802189a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802189c:	42b7      	cmp	r7, r6
 802189e:	f340 817c 	ble.w	8021b9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80218a2:	9e07      	ldr	r6, [sp, #28]
 80218a4:	fb03 1306 	mla	r3, r3, r6, r1
 80218a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80218aa:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80218ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80218b2:	0e1f      	lsrs	r7, r3, #24
 80218b4:	2a00      	cmp	r2, #0
 80218b6:	f000 815c 	beq.w	8021b72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80218ba:	6871      	ldr	r1, [r6, #4]
 80218bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80218be:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80218c2:	2800      	cmp	r0, #0
 80218c4:	f000 815e 	beq.w	8021b84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80218c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80218ca:	eb06 0c01 	add.w	ip, r6, r1
 80218ce:	5876      	ldr	r6, [r6, r1]
 80218d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80218d4:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80218d8:	9608      	str	r6, [sp, #32]
 80218da:	0e0e      	lsrs	r6, r1, #24
 80218dc:	910c      	str	r1, [sp, #48]	; 0x30
 80218de:	b292      	uxth	r2, r2
 80218e0:	b280      	uxth	r0, r0
 80218e2:	fb02 fa00 	mul.w	sl, r2, r0
 80218e6:	0112      	lsls	r2, r2, #4
 80218e8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80218ec:	eba2 080a 	sub.w	r8, r2, sl
 80218f0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80218f4:	b280      	uxth	r0, r0
 80218f6:	fa1f f888 	uxth.w	r8, r8
 80218fa:	1a09      	subs	r1, r1, r0
 80218fc:	fb08 f20e 	mul.w	r2, r8, lr
 8021900:	b289      	uxth	r1, r1
 8021902:	fb01 2207 	mla	r2, r1, r7, r2
 8021906:	fb00 2209 	mla	r2, r0, r9, r2
 802190a:	fb0a 2206 	mla	r2, sl, r6, r2
 802190e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021912:	2a00      	cmp	r2, #0
 8021914:	f000 80d4 	beq.w	8021ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021918:	2fff      	cmp	r7, #255	; 0xff
 802191a:	d01a      	beq.n	8021952 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 802191c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021920:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021924:	fb07 fc0c 	mul.w	ip, r7, ip
 8021928:	435f      	muls	r7, r3
 802192a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802192e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021932:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8021936:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802193a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802193e:	4463      	add	r3, ip
 8021940:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021944:	0a1b      	lsrs	r3, r3, #8
 8021946:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802194a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802194e:	ea43 030b 	orr.w	r3, r3, fp
 8021952:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021956:	d01e      	beq.n	8021996 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021958:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802195a:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802195e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021962:	fb0e fb0b 	mul.w	fp, lr, fp
 8021966:	fb0e fe07 	mul.w	lr, lr, r7
 802196a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802196e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021972:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802197a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802197e:	44dc      	add	ip, fp
 8021980:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021984:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021988:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802198c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021990:	ea4c 070e 	orr.w	r7, ip, lr
 8021994:	970b      	str	r7, [sp, #44]	; 0x2c
 8021996:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802199a:	d01e      	beq.n	80219da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802199c:	9f08      	ldr	r7, [sp, #32]
 802199e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80219a2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80219a6:	fb09 fe0e 	mul.w	lr, r9, lr
 80219aa:	fb09 f907 	mul.w	r9, r9, r7
 80219ae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80219b2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80219b6:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80219ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219be:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80219c2:	44f4      	add	ip, lr
 80219c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80219d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219d4:	ea4c 0709 	orr.w	r7, ip, r9
 80219d8:	9708      	str	r7, [sp, #32]
 80219da:	2eff      	cmp	r6, #255	; 0xff
 80219dc:	d01c      	beq.n	8021a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80219de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80219e0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80219e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80219e8:	fb06 fe0e 	mul.w	lr, r6, lr
 80219ec:	437e      	muls	r6, r7
 80219ee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80219f2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80219f6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80219fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219fe:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021a02:	44f4      	add	ip, lr
 8021a04:	0a36      	lsrs	r6, r6, #8
 8021a06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a0a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a12:	ea4c 0606 	orr.w	r6, ip, r6
 8021a16:	960c      	str	r6, [sp, #48]	; 0x30
 8021a18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021a1a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a22:	2aff      	cmp	r2, #255	; 0xff
 8021a24:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a28:	fb08 f606 	mul.w	r6, r8, r6
 8021a2c:	fb01 6607 	mla	r6, r1, r7, r6
 8021a30:	9f08      	ldr	r7, [sp, #32]
 8021a32:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a36:	fb00 6607 	mla	r6, r0, r7, r6
 8021a3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021a3c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a40:	fb0a 6607 	mla	r6, sl, r7, r6
 8021a44:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021a46:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021a4a:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8021a4e:	fb08 f807 	mul.w	r8, r8, r7
 8021a52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a56:	fb01 8303 	mla	r3, r1, r3, r8
 8021a5a:	9908      	ldr	r1, [sp, #32]
 8021a5c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021a60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021a62:	fb00 330c 	mla	r3, r0, ip, r3
 8021a66:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021a6a:	fb0a 3a00 	mla	sl, sl, r0, r3
 8021a6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a76:	ea46 060a 	orr.w	r6, r6, sl
 8021a7a:	b2f0      	uxtb	r0, r6
 8021a7c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8021a80:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8021a84:	f000 8084 	beq.w	8021b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021a88:	43d2      	mvns	r2, r2
 8021a8a:	782b      	ldrb	r3, [r5, #0]
 8021a8c:	b2d2      	uxtb	r2, r2
 8021a8e:	fb03 f702 	mul.w	r7, r3, r2
 8021a92:	1c7b      	adds	r3, r7, #1
 8021a94:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021a98:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021a9c:	702b      	strb	r3, [r5, #0]
 8021a9e:	786b      	ldrb	r3, [r5, #1]
 8021aa0:	fb03 f002 	mul.w	r0, r3, r2
 8021aa4:	1c43      	adds	r3, r0, #1
 8021aa6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021aaa:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021aae:	706b      	strb	r3, [r5, #1]
 8021ab0:	78ab      	ldrb	r3, [r5, #2]
 8021ab2:	4353      	muls	r3, r2
 8021ab4:	1c5a      	adds	r2, r3, #1
 8021ab6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021aba:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021abe:	70ae      	strb	r6, [r5, #2]
 8021ac0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021ac2:	3503      	adds	r5, #3
 8021ac4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021ac6:	4413      	add	r3, r2
 8021ac8:	9329      	str	r3, [sp, #164]	; 0xa4
 8021aca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021acc:	441c      	add	r4, r3
 8021ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ad0:	3b01      	subs	r3, #1
 8021ad2:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ad4:	e6cb      	b.n	802186e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021ad6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021ad8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021ada:	4413      	add	r3, r2
 8021adc:	9329      	str	r3, [sp, #164]	; 0xa4
 8021ade:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ae0:	441c      	add	r4, r3
 8021ae2:	9b06      	ldr	r3, [sp, #24]
 8021ae4:	3b01      	subs	r3, #1
 8021ae6:	9306      	str	r3, [sp, #24]
 8021ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021aea:	3303      	adds	r3, #3
 8021aec:	930a      	str	r3, [sp, #40]	; 0x28
 8021aee:	e675      	b.n	80217dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021af0:	f47f ae86 	bne.w	8021800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8021af4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	f340 819e 	ble.w	8021e38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b02:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021b06:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021b0a:	eef0 6a48 	vmov.f32	s13, s16
 8021b0e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b12:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b1a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021b1e:	eef0 6a68 	vmov.f32	s13, s17
 8021b22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b26:	ee16 4a90 	vmov	r4, s13
 8021b2a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b2e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b32:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b36:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b3a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b3e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021b42:	ee18 2a10 	vmov	r2, s16
 8021b46:	eeb0 8a47 	vmov.f32	s16, s14
 8021b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b4e:	ee18 2a90 	vmov	r2, s17
 8021b52:	932b      	str	r3, [sp, #172]	; 0xac
 8021b54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b56:	eef0 8a67 	vmov.f32	s17, s15
 8021b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b5e:	932c      	str	r3, [sp, #176]	; 0xb0
 8021b60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021b62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b64:	3b01      	subs	r3, #1
 8021b66:	9312      	str	r3, [sp, #72]	; 0x48
 8021b68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b6a:	bf08      	it	eq
 8021b6c:	4613      	moveq	r3, r2
 8021b6e:	9306      	str	r3, [sp, #24]
 8021b70:	e62d      	b.n	80217ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8021b72:	b150      	cbz	r0, 8021b8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8021b74:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021b76:	5871      	ldr	r1, [r6, r1]
 8021b78:	26ff      	movs	r6, #255	; 0xff
 8021b7a:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8021b7e:	9108      	str	r1, [sp, #32]
 8021b80:	46b6      	mov	lr, r6
 8021b82:	e6ac      	b.n	80218de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8021b84:	26ff      	movs	r6, #255	; 0xff
 8021b86:	46b1      	mov	r9, r6
 8021b88:	e6a9      	b.n	80218de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8021b8a:	26ff      	movs	r6, #255	; 0xff
 8021b8c:	46b1      	mov	r9, r6
 8021b8e:	e7f7      	b.n	8021b80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8021b90:	7028      	strb	r0, [r5, #0]
 8021b92:	7069      	strb	r1, [r5, #1]
 8021b94:	e793      	b.n	8021abe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8021b96:	1c4f      	adds	r7, r1, #1
 8021b98:	d192      	bne.n	8021ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021b9a:	9e07      	ldr	r6, [sp, #28]
 8021b9c:	428e      	cmp	r6, r1
 8021b9e:	dd8f      	ble.n	8021ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021ba0:	1c5e      	adds	r6, r3, #1
 8021ba2:	db8d      	blt.n	8021ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021ba4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021ba6:	429e      	cmp	r6, r3
 8021ba8:	dd8a      	ble.n	8021ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021baa:	9600      	str	r6, [sp, #0]
 8021bac:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8021bb0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8021bb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021bb6:	4629      	mov	r1, r5
 8021bb8:	9b07      	ldr	r3, [sp, #28]
 8021bba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021bbc:	f7ff fc8e 	bl	80214dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8021bc0:	e77e      	b.n	8021ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021bc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021bc4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021bc8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021bca:	9e07      	ldr	r6, [sp, #28]
 8021bcc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021bd0:	1409      	asrs	r1, r1, #16
 8021bd2:	1423      	asrs	r3, r4, #16
 8021bd4:	fb06 1303 	mla	r3, r6, r3, r1
 8021bd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021bda:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021be2:	0e1f      	lsrs	r7, r3, #24
 8021be4:	2a00      	cmp	r2, #0
 8021be6:	f000 8113 	beq.w	8021e10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8021bea:	6871      	ldr	r1, [r6, #4]
 8021bec:	910d      	str	r1, [sp, #52]	; 0x34
 8021bee:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021bf2:	2800      	cmp	r0, #0
 8021bf4:	f000 8115 	beq.w	8021e22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8021bf8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021bfa:	eb06 0c01 	add.w	ip, r6, r1
 8021bfe:	5876      	ldr	r6, [r6, r1]
 8021c00:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021c04:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021c08:	9609      	str	r6, [sp, #36]	; 0x24
 8021c0a:	0e0e      	lsrs	r6, r1, #24
 8021c0c:	910f      	str	r1, [sp, #60]	; 0x3c
 8021c0e:	b292      	uxth	r2, r2
 8021c10:	b280      	uxth	r0, r0
 8021c12:	fb02 fa00 	mul.w	sl, r2, r0
 8021c16:	0112      	lsls	r2, r2, #4
 8021c18:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021c1c:	eba2 080a 	sub.w	r8, r2, sl
 8021c20:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021c24:	b280      	uxth	r0, r0
 8021c26:	fa1f f888 	uxth.w	r8, r8
 8021c2a:	1a09      	subs	r1, r1, r0
 8021c2c:	fb08 f20e 	mul.w	r2, r8, lr
 8021c30:	b289      	uxth	r1, r1
 8021c32:	fb01 2207 	mla	r2, r1, r7, r2
 8021c36:	fb00 2209 	mla	r2, r0, r9, r2
 8021c3a:	fb0a 2206 	mla	r2, sl, r6, r2
 8021c3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021c42:	2a00      	cmp	r2, #0
 8021c44:	f000 80da 	beq.w	8021dfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8021c48:	2fff      	cmp	r7, #255	; 0xff
 8021c4a:	d01a      	beq.n	8021c82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8021c4c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021c50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c54:	fb07 fc0c 	mul.w	ip, r7, ip
 8021c58:	435f      	muls	r7, r3
 8021c5a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021c5e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021c62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c66:	4463      	add	r3, ip
 8021c68:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8021c6c:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8021c70:	0a1b      	lsrs	r3, r3, #8
 8021c72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021c7e:	ea43 030c 	orr.w	r3, r3, ip
 8021c82:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021c86:	d021      	beq.n	8021ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8021c88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021c8a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021c8e:	fb0e f707 	mul.w	r7, lr, r7
 8021c92:	9713      	str	r7, [sp, #76]	; 0x4c
 8021c94:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021c96:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021c9a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8021c9c:	fb0e fe0c 	mul.w	lr, lr, ip
 8021ca0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021ca4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ca8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cac:	44bc      	add	ip, r7
 8021cae:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021cb2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021cb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021cba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021cbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cc2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021cc6:	ea4c 070e 	orr.w	r7, ip, lr
 8021cca:	970d      	str	r7, [sp, #52]	; 0x34
 8021ccc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021cd0:	d01e      	beq.n	8021d10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8021cd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021cd4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021cd8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021cdc:	fb09 fe0e 	mul.w	lr, r9, lr
 8021ce0:	fb09 f907 	mul.w	r9, r9, r7
 8021ce4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021ce8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021cec:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021cf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cf4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021cf8:	44f4      	add	ip, lr
 8021cfa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021cfe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d02:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021d06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d0a:	ea4c 0709 	orr.w	r7, ip, r9
 8021d0e:	9709      	str	r7, [sp, #36]	; 0x24
 8021d10:	2eff      	cmp	r6, #255	; 0xff
 8021d12:	d01c      	beq.n	8021d4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8021d14:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021d16:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021d1a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021d1e:	fb06 fe0e 	mul.w	lr, r6, lr
 8021d22:	437e      	muls	r6, r7
 8021d24:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021d28:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021d2c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021d30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d34:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021d38:	44f4      	add	ip, lr
 8021d3a:	0a36      	lsrs	r6, r6, #8
 8021d3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d48:	ea4c 0606 	orr.w	r6, ip, r6
 8021d4c:	960f      	str	r6, [sp, #60]	; 0x3c
 8021d4e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021d50:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021d54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d58:	2aff      	cmp	r2, #255	; 0xff
 8021d5a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d5e:	fb08 f606 	mul.w	r6, r8, r6
 8021d62:	fb01 6607 	mla	r6, r1, r7, r6
 8021d66:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021d68:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021d6c:	fb00 6607 	mla	r6, r0, r7, r6
 8021d70:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021d72:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021d76:	fb0a 6607 	mla	r6, sl, r7, r6
 8021d7a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021d7c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021d80:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8021d84:	fb08 f807 	mul.w	r8, r8, r7
 8021d88:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d8c:	fb01 8303 	mla	r3, r1, r3, r8
 8021d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021d92:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021d96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021d98:	fb00 330c 	mla	r3, r0, ip, r3
 8021d9c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8021da0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8021da4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021da8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021dac:	ea46 060e 	orr.w	r6, r6, lr
 8021db0:	b2f0      	uxtb	r0, r6
 8021db2:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8021db6:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8021dba:	d038      	beq.n	8021e2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8021dbc:	43d2      	mvns	r2, r2
 8021dbe:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8021dc2:	b2d2      	uxtb	r2, r2
 8021dc4:	4357      	muls	r7, r2
 8021dc6:	1c7b      	adds	r3, r7, #1
 8021dc8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021dcc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021dd0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8021dd4:	4350      	muls	r0, r2
 8021dd6:	f805 3c03 	strb.w	r3, [r5, #-3]
 8021dda:	1c43      	adds	r3, r0, #1
 8021ddc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021de0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021de4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021de8:	4353      	muls	r3, r2
 8021dea:	f805 1c02 	strb.w	r1, [r5, #-2]
 8021dee:	1c5a      	adds	r2, r3, #1
 8021df0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021df4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021df8:	f805 6c01 	strb.w	r6, [r5, #-1]
 8021dfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021dfe:	3503      	adds	r5, #3
 8021e00:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e06:	4413      	add	r3, r2
 8021e08:	9329      	str	r3, [sp, #164]	; 0xa4
 8021e0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e0c:	441c      	add	r4, r3
 8021e0e:	e510      	b.n	8021832 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8021e10:	b150      	cbz	r0, 8021e28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8021e12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021e14:	5871      	ldr	r1, [r6, r1]
 8021e16:	26ff      	movs	r6, #255	; 0xff
 8021e18:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8021e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8021e1e:	46b6      	mov	lr, r6
 8021e20:	e6f5      	b.n	8021c0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8021e22:	26ff      	movs	r6, #255	; 0xff
 8021e24:	46b1      	mov	r9, r6
 8021e26:	e6f2      	b.n	8021c0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8021e28:	26ff      	movs	r6, #255	; 0xff
 8021e2a:	46b1      	mov	r9, r6
 8021e2c:	e7f7      	b.n	8021e1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8021e2e:	f805 0c03 	strb.w	r0, [r5, #-3]
 8021e32:	f805 1c02 	strb.w	r1, [r5, #-2]
 8021e36:	e7df      	b.n	8021df8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8021e38:	b017      	add	sp, #92	; 0x5c
 8021e3a:	ecbd 8b08 	vpop	{d8-d11}
 8021e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021e44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8021e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e48:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8021e4c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021e50:	2800      	cmp	r0, #0
 8021e52:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8021e56:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8021e5a:	fb0c 0e03 	mla	lr, ip, r3, r0
 8021e5e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8021e62:	db6b      	blt.n	8021f3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e64:	4580      	cmp	r8, r0
 8021e66:	dd69      	ble.n	8021f3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e68:	f1bc 0f00 	cmp.w	ip, #0
 8021e6c:	db66      	blt.n	8021f3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e6e:	45e1      	cmp	r9, ip
 8021e70:	dd64      	ble.n	8021f3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e72:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021e76:	f01e 0f01 	tst.w	lr, #1
 8021e7a:	5d16      	ldrb	r6, [r2, r4]
 8021e7c:	bf0c      	ite	eq
 8021e7e:	f006 060f 	andeq.w	r6, r6, #15
 8021e82:	1136      	asrne	r6, r6, #4
 8021e84:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021e88:	b2f6      	uxtb	r6, r6
 8021e8a:	f110 0a01 	adds.w	sl, r0, #1
 8021e8e:	d457      	bmi.n	8021f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021e90:	45d0      	cmp	r8, sl
 8021e92:	dd55      	ble.n	8021f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021e94:	f1bc 0f00 	cmp.w	ip, #0
 8021e98:	db52      	blt.n	8021f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021e9a:	45e1      	cmp	r9, ip
 8021e9c:	dd50      	ble.n	8021f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021e9e:	2f00      	cmp	r7, #0
 8021ea0:	f000 80ac 	beq.w	8021ffc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8021ea4:	f10e 0b01 	add.w	fp, lr, #1
 8021ea8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8021eac:	f01b 0f01 	tst.w	fp, #1
 8021eb0:	5d14      	ldrb	r4, [r2, r4]
 8021eb2:	bf0c      	ite	eq
 8021eb4:	f004 040f 	andeq.w	r4, r4, #15
 8021eb8:	1124      	asrne	r4, r4, #4
 8021eba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021ebe:	b2e4      	uxtb	r4, r4
 8021ec0:	2d00      	cmp	r5, #0
 8021ec2:	f000 8096 	beq.w	8021ff2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8021ec6:	2800      	cmp	r0, #0
 8021ec8:	f10c 0c01 	add.w	ip, ip, #1
 8021ecc:	db3c      	blt.n	8021f48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021ece:	4580      	cmp	r8, r0
 8021ed0:	dd3a      	ble.n	8021f48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021ed2:	f1bc 0f00 	cmp.w	ip, #0
 8021ed6:	db37      	blt.n	8021f48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021ed8:	45e1      	cmp	r9, ip
 8021eda:	dd35      	ble.n	8021f48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021edc:	eb03 0b0e 	add.w	fp, r3, lr
 8021ee0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8021ee4:	f01b 0f01 	tst.w	fp, #1
 8021ee8:	5c10      	ldrb	r0, [r2, r0]
 8021eea:	bf0c      	ite	eq
 8021eec:	f000 000f 	andeq.w	r0, r0, #15
 8021ef0:	1100      	asrne	r0, r0, #4
 8021ef2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021ef6:	b2c0      	uxtb	r0, r0
 8021ef8:	f1ba 0f00 	cmp.w	sl, #0
 8021efc:	db26      	blt.n	8021f4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021efe:	45d0      	cmp	r8, sl
 8021f00:	dd24      	ble.n	8021f4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021f02:	f1bc 0f00 	cmp.w	ip, #0
 8021f06:	db21      	blt.n	8021f4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021f08:	45e1      	cmp	r9, ip
 8021f0a:	dd1f      	ble.n	8021f4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021f0c:	b307      	cbz	r7, 8021f50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8021f0e:	3301      	adds	r3, #1
 8021f10:	449e      	add	lr, r3
 8021f12:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021f16:	f01e 0f01 	tst.w	lr, #1
 8021f1a:	5cd3      	ldrb	r3, [r2, r3]
 8021f1c:	bf0c      	ite	eq
 8021f1e:	f003 030f 	andeq.w	r3, r3, #15
 8021f22:	111b      	asrne	r3, r3, #4
 8021f24:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021f28:	b2db      	uxtb	r3, r3
 8021f2a:	2f0f      	cmp	r7, #15
 8021f2c:	d911      	bls.n	8021f52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8021f2e:	4b35      	ldr	r3, [pc, #212]	; (8022004 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8021f30:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021f34:	4a34      	ldr	r2, [pc, #208]	; (8022008 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8021f36:	4835      	ldr	r0, [pc, #212]	; (802200c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8021f38:	f002 fb5a 	bl	80245f0 <__assert_func>
 8021f3c:	2600      	movs	r6, #0
 8021f3e:	e7a4      	b.n	8021e8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8021f40:	2400      	movs	r4, #0
 8021f42:	e7bd      	b.n	8021ec0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8021f44:	463c      	mov	r4, r7
 8021f46:	e7be      	b.n	8021ec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8021f48:	2000      	movs	r0, #0
 8021f4a:	e7d5      	b.n	8021ef8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8021f4c:	2300      	movs	r3, #0
 8021f4e:	e7ec      	b.n	8021f2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8021f50:	463b      	mov	r3, r7
 8021f52:	2d0f      	cmp	r5, #15
 8021f54:	d8eb      	bhi.n	8021f2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8021f56:	b2bf      	uxth	r7, r7
 8021f58:	b2ad      	uxth	r5, r5
 8021f5a:	fb07 f205 	mul.w	r2, r7, r5
 8021f5e:	013f      	lsls	r7, r7, #4
 8021f60:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8021f64:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8021f68:	1abf      	subs	r7, r7, r2
 8021f6a:	b2ad      	uxth	r5, r5
 8021f6c:	b2bf      	uxth	r7, r7
 8021f6e:	ebac 0c05 	sub.w	ip, ip, r5
 8021f72:	437c      	muls	r4, r7
 8021f74:	fa1f fc8c 	uxth.w	ip, ip
 8021f78:	fb06 440c 	mla	r4, r6, ip, r4
 8021f7c:	fb05 4400 	mla	r4, r5, r0, r4
 8021f80:	fb02 4203 	mla	r2, r2, r3, r4
 8021f84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021f88:	b38a      	cbz	r2, 8021fee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8021f8a:	4b21      	ldr	r3, [pc, #132]	; (8022010 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8021f8c:	681c      	ldr	r4, [r3, #0]
 8021f8e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8021f92:	b2e5      	uxtb	r5, r4
 8021f94:	4353      	muls	r3, r2
 8021f96:	1c5a      	adds	r2, r3, #1
 8021f98:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021f9c:	1212      	asrs	r2, r2, #8
 8021f9e:	b290      	uxth	r0, r2
 8021fa0:	43d2      	mvns	r2, r2
 8021fa2:	fb15 f500 	smulbb	r5, r5, r0
 8021fa6:	b2d3      	uxtb	r3, r2
 8021fa8:	780a      	ldrb	r2, [r1, #0]
 8021faa:	fb02 5203 	mla	r2, r2, r3, r5
 8021fae:	b292      	uxth	r2, r2
 8021fb0:	1c55      	adds	r5, r2, #1
 8021fb2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021fb6:	784d      	ldrb	r5, [r1, #1]
 8021fb8:	fb15 f503 	smulbb	r5, r5, r3
 8021fbc:	1212      	asrs	r2, r2, #8
 8021fbe:	700a      	strb	r2, [r1, #0]
 8021fc0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8021fc4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021fc8:	fb02 5200 	mla	r2, r2, r0, r5
 8021fcc:	b292      	uxth	r2, r2
 8021fce:	1c55      	adds	r5, r2, #1
 8021fd0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021fd4:	1212      	asrs	r2, r2, #8
 8021fd6:	704a      	strb	r2, [r1, #1]
 8021fd8:	788a      	ldrb	r2, [r1, #2]
 8021fda:	fb12 f303 	smulbb	r3, r2, r3
 8021fde:	fb04 3300 	mla	r3, r4, r0, r3
 8021fe2:	b29b      	uxth	r3, r3
 8021fe4:	1c5a      	adds	r2, r3, #1
 8021fe6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021fea:	121b      	asrs	r3, r3, #8
 8021fec:	708b      	strb	r3, [r1, #2]
 8021fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ff2:	2f0f      	cmp	r7, #15
 8021ff4:	d89b      	bhi.n	8021f2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8021ff6:	462b      	mov	r3, r5
 8021ff8:	4628      	mov	r0, r5
 8021ffa:	e7ac      	b.n	8021f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8021ffc:	2d00      	cmp	r5, #0
 8021ffe:	d1a1      	bne.n	8021f44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8022000:	462c      	mov	r4, r5
 8022002:	e7f8      	b.n	8021ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8022004:	08028f07 	.word	0x08028f07
 8022008:	080293fe 	.word	0x080293fe
 802200c:	08028fd0 	.word	0x08028fd0
 8022010:	2000bc90 	.word	0x2000bc90

08022014 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022018:	ed2d 8b08 	vpush	{d8-d11}
 802201c:	b097      	sub	sp, #92	; 0x5c
 802201e:	eeb0 aa40 	vmov.f32	s20, s0
 8022022:	eef0 9a60 	vmov.f32	s19, s1
 8022026:	9308      	str	r3, [sp, #32]
 8022028:	eeb0 9a41 	vmov.f32	s18, s2
 802202c:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022030:	eeb0 8a62 	vmov.f32	s16, s5
 8022034:	9214      	str	r2, [sp, #80]	; 0x50
 8022036:	eef0 8a43 	vmov.f32	s17, s6
 802203a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802203c:	eef0 ba44 	vmov.f32	s23, s8
 8022040:	9309      	str	r3, [sp, #36]	; 0x24
 8022042:	eeb0 ba64 	vmov.f32	s22, s9
 8022046:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 802204a:	eef0 aa45 	vmov.f32	s21, s10
 802204e:	9015      	str	r0, [sp, #84]	; 0x54
 8022050:	910c      	str	r1, [sp, #48]	; 0x30
 8022052:	930e      	str	r3, [sp, #56]	; 0x38
 8022054:	6850      	ldr	r0, [r2, #4]
 8022056:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802205a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802205e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8022062:	fb00 1803 	mla	r8, r0, r3, r1
 8022066:	6813      	ldr	r3, [r2, #0]
 8022068:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802206c:	4498      	add	r8, r3
 802206e:	f10b 0301 	add.w	r3, fp, #1
 8022072:	f023 0301 	bic.w	r3, r3, #1
 8022076:	930f      	str	r3, [sp, #60]	; 0x3c
 8022078:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802207a:	681f      	ldr	r7, [r3, #0]
 802207c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802207e:	2b00      	cmp	r3, #0
 8022080:	dc03      	bgt.n	802208a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022082:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022084:	2b00      	cmp	r3, #0
 8022086:	f340 8238 	ble.w	80224fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802208a:	9b08      	ldr	r3, [sp, #32]
 802208c:	2b00      	cmp	r3, #0
 802208e:	f340 810c 	ble.w	80222aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022092:	142a      	asrs	r2, r5, #16
 8022094:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022098:	d42c      	bmi.n	80220f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802209a:	1c51      	adds	r1, r2, #1
 802209c:	458b      	cmp	fp, r1
 802209e:	dd2c      	ble.n	80220fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	db2a      	blt.n	80220fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220a4:	1c59      	adds	r1, r3, #1
 80220a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80220a8:	4288      	cmp	r0, r1
 80220aa:	dd26      	ble.n	80220fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220ac:	9b08      	ldr	r3, [sp, #32]
 80220ae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220b0:	3b01      	subs	r3, #1
 80220b2:	fb02 5203 	mla	r2, r2, r3, r5
 80220b6:	1412      	asrs	r2, r2, #16
 80220b8:	d429      	bmi.n	802210e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220ba:	3201      	adds	r2, #1
 80220bc:	4593      	cmp	fp, r2
 80220be:	dd26      	ble.n	802210e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220c0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80220c2:	fb02 6303 	mla	r3, r2, r3, r6
 80220c6:	141b      	asrs	r3, r3, #16
 80220c8:	d421      	bmi.n	802210e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220ca:	3301      	adds	r3, #1
 80220cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220ce:	429a      	cmp	r2, r3
 80220d0:	dd1d      	ble.n	802210e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220d2:	f108 0e03 	add.w	lr, r8, #3
 80220d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80220da:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80220de:	f1b9 0f00 	cmp.w	r9, #0
 80220e2:	f300 814f 	bgt.w	8022384 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80220e6:	9b08      	ldr	r3, [sp, #32]
 80220e8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80220ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80220f0:	44a0      	add	r8, r4
 80220f2:	e0dc      	b.n	80222ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80220f4:	1c51      	adds	r1, r2, #1
 80220f6:	f040 80ce 	bne.w	8022296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80220fa:	4593      	cmp	fp, r2
 80220fc:	f340 80cb 	ble.w	8022296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022100:	1c5a      	adds	r2, r3, #1
 8022102:	f2c0 80c8 	blt.w	8022296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022108:	4293      	cmp	r3, r2
 802210a:	f280 80c4 	bge.w	8022296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802210e:	9b08      	ldr	r3, [sp, #32]
 8022110:	46c1      	mov	r9, r8
 8022112:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022116:	930d      	str	r3, [sp, #52]	; 0x34
 8022118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802211a:	2b00      	cmp	r3, #0
 802211c:	dde3      	ble.n	80220e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802211e:	1428      	asrs	r0, r5, #16
 8022120:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022124:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022128:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802212c:	f100 8111 	bmi.w	8022352 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8022130:	f100 0c01 	add.w	ip, r0, #1
 8022134:	45e3      	cmp	fp, ip
 8022136:	f340 810e 	ble.w	8022356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802213a:	2b00      	cmp	r3, #0
 802213c:	f2c0 810b 	blt.w	8022356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022140:	f103 0c01 	add.w	ip, r3, #1
 8022144:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022146:	4564      	cmp	r4, ip
 8022148:	f340 8105 	ble.w	8022356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802214c:	fb03 030a 	mla	r3, r3, sl, r0
 8022150:	0858      	lsrs	r0, r3, #1
 8022152:	07dc      	lsls	r4, r3, #31
 8022154:	5c38      	ldrb	r0, [r7, r0]
 8022156:	bf54      	ite	pl
 8022158:	f000 000f 	andpl.w	r0, r0, #15
 802215c:	1100      	asrmi	r0, r0, #4
 802215e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022162:	b2c0      	uxtb	r0, r0
 8022164:	2a00      	cmp	r2, #0
 8022166:	f000 80e1 	beq.w	802232c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802216a:	f103 0e01 	add.w	lr, r3, #1
 802216e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022172:	f01e 0f01 	tst.w	lr, #1
 8022176:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802217a:	bf0c      	ite	eq
 802217c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022180:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022184:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022188:	fa5f f48c 	uxtb.w	r4, ip
 802218c:	9410      	str	r4, [sp, #64]	; 0x40
 802218e:	b1f9      	cbz	r1, 80221d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022190:	4453      	add	r3, sl
 8022192:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022196:	07dc      	lsls	r4, r3, #31
 8022198:	f103 0301 	add.w	r3, r3, #1
 802219c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80221a0:	bf54      	ite	pl
 80221a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80221a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80221aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80221ae:	fa5f f48c 	uxtb.w	r4, ip
 80221b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80221b6:	940a      	str	r4, [sp, #40]	; 0x28
 80221b8:	07dc      	lsls	r4, r3, #31
 80221ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80221be:	bf54      	ite	pl
 80221c0:	f00c 030f 	andpl.w	r3, ip, #15
 80221c4:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80221c8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80221cc:	b2db      	uxtb	r3, r3
 80221ce:	9311      	str	r3, [sp, #68]	; 0x44
 80221d0:	b292      	uxth	r2, r2
 80221d2:	b289      	uxth	r1, r1
 80221d4:	0113      	lsls	r3, r2, #4
 80221d6:	fb02 fc01 	mul.w	ip, r2, r1
 80221da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80221dc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80221e0:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80221e4:	eba3 030c 	sub.w	r3, r3, ip
 80221e8:	b289      	uxth	r1, r1
 80221ea:	b29b      	uxth	r3, r3
 80221ec:	ebae 0e01 	sub.w	lr, lr, r1
 80221f0:	4353      	muls	r3, r2
 80221f2:	fa1f fe8e 	uxth.w	lr, lr
 80221f6:	fb00 320e 	mla	r2, r0, lr, r3
 80221fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80221fc:	fb01 2203 	mla	r2, r1, r3, r2
 8022200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022202:	fb0c 2203 	mla	r2, ip, r3, r2
 8022206:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802220a:	2a00      	cmp	r2, #0
 802220c:	d039      	beq.n	8022282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802220e:	4bbd      	ldr	r3, [pc, #756]	; (8022504 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022210:	6819      	ldr	r1, [r3, #0]
 8022212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022214:	fa5f fc81 	uxtb.w	ip, r1
 8022218:	435a      	muls	r2, r3
 802221a:	1c53      	adds	r3, r2, #1
 802221c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022220:	1212      	asrs	r2, r2, #8
 8022222:	b290      	uxth	r0, r2
 8022224:	43d2      	mvns	r2, r2
 8022226:	fb1c fc00 	smulbb	ip, ip, r0
 802222a:	b2d3      	uxtb	r3, r2
 802222c:	f899 2000 	ldrb.w	r2, [r9]
 8022230:	fb02 c203 	mla	r2, r2, r3, ip
 8022234:	b292      	uxth	r2, r2
 8022236:	f102 0c01 	add.w	ip, r2, #1
 802223a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802223e:	f899 c001 	ldrb.w	ip, [r9, #1]
 8022242:	fb1c fc03 	smulbb	ip, ip, r3
 8022246:	1212      	asrs	r2, r2, #8
 8022248:	f889 2000 	strb.w	r2, [r9]
 802224c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022250:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022254:	fb02 c200 	mla	r2, r2, r0, ip
 8022258:	b292      	uxth	r2, r2
 802225a:	f102 0c01 	add.w	ip, r2, #1
 802225e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022262:	1212      	asrs	r2, r2, #8
 8022264:	f889 2001 	strb.w	r2, [r9, #1]
 8022268:	f899 2002 	ldrb.w	r2, [r9, #2]
 802226c:	fb12 f303 	smulbb	r3, r2, r3
 8022270:	fb01 3300 	mla	r3, r1, r0, r3
 8022274:	b29b      	uxth	r3, r3
 8022276:	1c5a      	adds	r2, r3, #1
 8022278:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802227c:	121b      	asrs	r3, r3, #8
 802227e:	f889 3002 	strb.w	r3, [r9, #2]
 8022282:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022284:	f109 0903 	add.w	r9, r9, #3
 8022288:	441d      	add	r5, r3
 802228a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802228c:	441e      	add	r6, r3
 802228e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022290:	3b01      	subs	r3, #1
 8022292:	930d      	str	r3, [sp, #52]	; 0x34
 8022294:	e740      	b.n	8022118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022296:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022298:	f108 0803 	add.w	r8, r8, #3
 802229c:	441d      	add	r5, r3
 802229e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222a0:	441e      	add	r6, r3
 80222a2:	9b08      	ldr	r3, [sp, #32]
 80222a4:	3b01      	subs	r3, #1
 80222a6:	9308      	str	r3, [sp, #32]
 80222a8:	e6ef      	b.n	802208a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80222aa:	f47f aeff 	bne.w	80220ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80222ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	f340 8122 	ble.w	80224fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80222b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80222c0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80222c4:	eef0 6a48 	vmov.f32	s13, s16
 80222c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80222cc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80222d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222d4:	ee16 5a90 	vmov	r5, s13
 80222d8:	eef0 6a68 	vmov.f32	s13, s17
 80222dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222e0:	ee16 6a90 	vmov	r6, s13
 80222e4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80222e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80222ec:	ee37 8a48 	vsub.f32	s16, s14, s16
 80222f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80222f4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80222f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80222fc:	ee18 2a10 	vmov	r2, s16
 8022300:	eeb0 8a47 	vmov.f32	s16, s14
 8022304:	fb92 f3f3 	sdiv	r3, r2, r3
 8022308:	ee18 2a90 	vmov	r2, s17
 802230c:	932b      	str	r3, [sp, #172]	; 0xac
 802230e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022310:	eef0 8a67 	vmov.f32	s17, s15
 8022314:	fb92 f3f3 	sdiv	r3, r2, r3
 8022318:	932c      	str	r3, [sp, #176]	; 0xb0
 802231a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802231c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802231e:	3b01      	subs	r3, #1
 8022320:	930c      	str	r3, [sp, #48]	; 0x30
 8022322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022324:	bf08      	it	eq
 8022326:	4613      	moveq	r3, r2
 8022328:	9308      	str	r3, [sp, #32]
 802232a:	e6a7      	b.n	802207c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802232c:	2900      	cmp	r1, #0
 802232e:	f43f af4f 	beq.w	80221d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022332:	4453      	add	r3, sl
 8022334:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022338:	07db      	lsls	r3, r3, #31
 802233a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802233e:	bf54      	ite	pl
 8022340:	f00c 030f 	andpl.w	r3, ip, #15
 8022344:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022348:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802234c:	b2db      	uxtb	r3, r3
 802234e:	930a      	str	r3, [sp, #40]	; 0x28
 8022350:	e73e      	b.n	80221d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022352:	1c44      	adds	r4, r0, #1
 8022354:	d195      	bne.n	8022282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022356:	4583      	cmp	fp, r0
 8022358:	dd93      	ble.n	8022282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802235a:	1c5c      	adds	r4, r3, #1
 802235c:	db91      	blt.n	8022282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802235e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022360:	429c      	cmp	r4, r3
 8022362:	dd8e      	ble.n	8022282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022364:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022366:	9002      	str	r0, [sp, #8]
 8022368:	9815      	ldr	r0, [sp, #84]	; 0x54
 802236a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802236e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022370:	463a      	mov	r2, r7
 8022372:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022376:	e9cd b300 	strd	fp, r3, [sp]
 802237a:	4649      	mov	r1, r9
 802237c:	4653      	mov	r3, sl
 802237e:	f7ff fd61 	bl	8021e44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022382:	e77e      	b.n	8022282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022384:	142a      	asrs	r2, r5, #16
 8022386:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802238a:	1433      	asrs	r3, r6, #16
 802238c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022390:	fb0a 2303 	mla	r3, sl, r3, r2
 8022394:	085a      	lsrs	r2, r3, #1
 8022396:	07dc      	lsls	r4, r3, #31
 8022398:	5cba      	ldrb	r2, [r7, r2]
 802239a:	bf54      	ite	pl
 802239c:	f002 020f 	andpl.w	r2, r2, #15
 80223a0:	1112      	asrmi	r2, r2, #4
 80223a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80223a6:	b2d2      	uxtb	r2, r2
 80223a8:	2900      	cmp	r1, #0
 80223aa:	f000 8093 	beq.w	80224d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80223ae:	1c5c      	adds	r4, r3, #1
 80223b0:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80223b4:	07e4      	lsls	r4, r4, #31
 80223b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80223ba:	bf54      	ite	pl
 80223bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80223c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80223c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80223c8:	fa5f f48c 	uxtb.w	r4, ip
 80223cc:	9412      	str	r4, [sp, #72]	; 0x48
 80223ce:	b300      	cbz	r0, 8022412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80223d0:	4453      	add	r3, sl
 80223d2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80223d6:	07dc      	lsls	r4, r3, #31
 80223d8:	f103 0301 	add.w	r3, r3, #1
 80223dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80223e0:	bf54      	ite	pl
 80223e2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80223e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80223ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80223ee:	fa5f f48c 	uxtb.w	r4, ip
 80223f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80223f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80223f8:	07dc      	lsls	r4, r3, #31
 80223fa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80223fe:	bf54      	ite	pl
 8022400:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022404:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022408:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802240c:	fa5f f38c 	uxtb.w	r3, ip
 8022410:	9313      	str	r3, [sp, #76]	; 0x4c
 8022412:	b289      	uxth	r1, r1
 8022414:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022416:	b280      	uxth	r0, r0
 8022418:	fb01 f300 	mul.w	r3, r1, r0
 802241c:	0109      	lsls	r1, r1, #4
 802241e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022422:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022426:	1ac9      	subs	r1, r1, r3
 8022428:	b280      	uxth	r0, r0
 802242a:	b289      	uxth	r1, r1
 802242c:	ebac 0c00 	sub.w	ip, ip, r0
 8022430:	4361      	muls	r1, r4
 8022432:	fa1f fc8c 	uxth.w	ip, ip
 8022436:	fb02 120c 	mla	r2, r2, ip, r1
 802243a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802243c:	fb00 2001 	mla	r0, r0, r1, r2
 8022440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022442:	fb03 0302 	mla	r3, r3, r2, r0
 8022446:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802244a:	2b00      	cmp	r3, #0
 802244c:	d039      	beq.n	80224c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802244e:	4a2d      	ldr	r2, [pc, #180]	; (8022504 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022450:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022454:	6810      	ldr	r0, [r2, #0]
 8022456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022458:	fa5f fc80 	uxtb.w	ip, r0
 802245c:	4353      	muls	r3, r2
 802245e:	1c5a      	adds	r2, r3, #1
 8022460:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022464:	121b      	asrs	r3, r3, #8
 8022466:	b29a      	uxth	r2, r3
 8022468:	43db      	mvns	r3, r3
 802246a:	fb1c fc02 	smulbb	ip, ip, r2
 802246e:	b2db      	uxtb	r3, r3
 8022470:	fb01 c103 	mla	r1, r1, r3, ip
 8022474:	b289      	uxth	r1, r1
 8022476:	f101 0c01 	add.w	ip, r1, #1
 802247a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802247e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022482:	fb1c fc03 	smulbb	ip, ip, r3
 8022486:	1209      	asrs	r1, r1, #8
 8022488:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802248c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022490:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022494:	fb01 c102 	mla	r1, r1, r2, ip
 8022498:	b289      	uxth	r1, r1
 802249a:	f101 0c01 	add.w	ip, r1, #1
 802249e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80224a2:	1209      	asrs	r1, r1, #8
 80224a4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80224a8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80224ac:	fb11 f303 	smulbb	r3, r1, r3
 80224b0:	fb00 3002 	mla	r0, r0, r2, r3
 80224b4:	b280      	uxth	r0, r0
 80224b6:	1c42      	adds	r2, r0, #1
 80224b8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80224bc:	1200      	asrs	r0, r0, #8
 80224be:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80224c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80224c4:	f10e 0e03 	add.w	lr, lr, #3
 80224c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80224cc:	441d      	add	r5, r3
 80224ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80224d0:	441e      	add	r6, r3
 80224d2:	e604      	b.n	80220de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80224d4:	2800      	cmp	r0, #0
 80224d6:	d09c      	beq.n	8022412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80224d8:	4453      	add	r3, sl
 80224da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80224de:	07db      	lsls	r3, r3, #31
 80224e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80224e4:	bf54      	ite	pl
 80224e6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80224ea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80224ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80224f2:	fa5f f38c 	uxtb.w	r3, ip
 80224f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80224f8:	e78b      	b.n	8022412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80224fa:	b017      	add	sp, #92	; 0x5c
 80224fc:	ecbd 8b08 	vpop	{d8-d11}
 8022500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022504:	2000bc90 	.word	0x2000bc90

08022508 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802250c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022510:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022514:	2800      	cmp	r0, #0
 8022516:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802251a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802251e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022522:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022526:	db6b      	blt.n	8022600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022528:	4580      	cmp	r8, r0
 802252a:	dd69      	ble.n	8022600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802252c:	f1bc 0f00 	cmp.w	ip, #0
 8022530:	db66      	blt.n	8022600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022532:	45e1      	cmp	r9, ip
 8022534:	dd64      	ble.n	8022600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022536:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802253a:	f01e 0f01 	tst.w	lr, #1
 802253e:	5d16      	ldrb	r6, [r2, r4]
 8022540:	bf0c      	ite	eq
 8022542:	f006 060f 	andeq.w	r6, r6, #15
 8022546:	1136      	asrne	r6, r6, #4
 8022548:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802254c:	b2f6      	uxtb	r6, r6
 802254e:	f110 0a01 	adds.w	sl, r0, #1
 8022552:	d457      	bmi.n	8022604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022554:	45d0      	cmp	r8, sl
 8022556:	dd55      	ble.n	8022604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022558:	f1bc 0f00 	cmp.w	ip, #0
 802255c:	db52      	blt.n	8022604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802255e:	45e1      	cmp	r9, ip
 8022560:	dd50      	ble.n	8022604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022562:	2f00      	cmp	r7, #0
 8022564:	f000 80a5 	beq.w	80226b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022568:	f10e 0b01 	add.w	fp, lr, #1
 802256c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022570:	f01b 0f01 	tst.w	fp, #1
 8022574:	5d14      	ldrb	r4, [r2, r4]
 8022576:	bf0c      	ite	eq
 8022578:	f004 040f 	andeq.w	r4, r4, #15
 802257c:	1124      	asrne	r4, r4, #4
 802257e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022582:	b2e4      	uxtb	r4, r4
 8022584:	2d00      	cmp	r5, #0
 8022586:	f000 808f 	beq.w	80226a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802258a:	2800      	cmp	r0, #0
 802258c:	f10c 0c01 	add.w	ip, ip, #1
 8022590:	db3c      	blt.n	802260c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022592:	4580      	cmp	r8, r0
 8022594:	dd3a      	ble.n	802260c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022596:	f1bc 0f00 	cmp.w	ip, #0
 802259a:	db37      	blt.n	802260c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802259c:	45e1      	cmp	r9, ip
 802259e:	dd35      	ble.n	802260c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80225a0:	eb03 0b0e 	add.w	fp, r3, lr
 80225a4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80225a8:	f01b 0f01 	tst.w	fp, #1
 80225ac:	5c10      	ldrb	r0, [r2, r0]
 80225ae:	bf0c      	ite	eq
 80225b0:	f000 000f 	andeq.w	r0, r0, #15
 80225b4:	1100      	asrne	r0, r0, #4
 80225b6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80225ba:	b2c0      	uxtb	r0, r0
 80225bc:	f1ba 0f00 	cmp.w	sl, #0
 80225c0:	db26      	blt.n	8022610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225c2:	45d0      	cmp	r8, sl
 80225c4:	dd24      	ble.n	8022610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225c6:	f1bc 0f00 	cmp.w	ip, #0
 80225ca:	db21      	blt.n	8022610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225cc:	45e1      	cmp	r9, ip
 80225ce:	dd1f      	ble.n	8022610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225d0:	b307      	cbz	r7, 8022614 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80225d2:	3301      	adds	r3, #1
 80225d4:	449e      	add	lr, r3
 80225d6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80225da:	f01e 0f01 	tst.w	lr, #1
 80225de:	5cd3      	ldrb	r3, [r2, r3]
 80225e0:	bf0c      	ite	eq
 80225e2:	f003 030f 	andeq.w	r3, r3, #15
 80225e6:	111b      	asrne	r3, r3, #4
 80225e8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80225ec:	b2db      	uxtb	r3, r3
 80225ee:	2f0f      	cmp	r7, #15
 80225f0:	d911      	bls.n	8022616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80225f2:	4b32      	ldr	r3, [pc, #200]	; (80226bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80225f4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80225f8:	4a31      	ldr	r2, [pc, #196]	; (80226c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80225fa:	4832      	ldr	r0, [pc, #200]	; (80226c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80225fc:	f001 fff8 	bl	80245f0 <__assert_func>
 8022600:	2600      	movs	r6, #0
 8022602:	e7a4      	b.n	802254e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022604:	2400      	movs	r4, #0
 8022606:	e7bd      	b.n	8022584 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022608:	463c      	mov	r4, r7
 802260a:	e7be      	b.n	802258a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802260c:	2000      	movs	r0, #0
 802260e:	e7d5      	b.n	80225bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022610:	2300      	movs	r3, #0
 8022612:	e7ec      	b.n	80225ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022614:	463b      	mov	r3, r7
 8022616:	2d0f      	cmp	r5, #15
 8022618:	d8eb      	bhi.n	80225f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802261a:	b2bf      	uxth	r7, r7
 802261c:	b2ad      	uxth	r5, r5
 802261e:	fb07 f205 	mul.w	r2, r7, r5
 8022622:	013f      	lsls	r7, r7, #4
 8022624:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022628:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802262c:	1abf      	subs	r7, r7, r2
 802262e:	b2ad      	uxth	r5, r5
 8022630:	b2bf      	uxth	r7, r7
 8022632:	ebac 0c05 	sub.w	ip, ip, r5
 8022636:	437c      	muls	r4, r7
 8022638:	fa1f fc8c 	uxth.w	ip, ip
 802263c:	fb06 440c 	mla	r4, r6, ip, r4
 8022640:	fb05 4400 	mla	r4, r5, r0, r4
 8022644:	fb02 4303 	mla	r3, r2, r3, r4
 8022648:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802264c:	b353      	cbz	r3, 80226a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802264e:	4a1e      	ldr	r2, [pc, #120]	; (80226c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022650:	7808      	ldrb	r0, [r1, #0]
 8022652:	6814      	ldr	r4, [r2, #0]
 8022654:	b29a      	uxth	r2, r3
 8022656:	43db      	mvns	r3, r3
 8022658:	b2e5      	uxtb	r5, r4
 802265a:	b2db      	uxtb	r3, r3
 802265c:	fb15 f502 	smulbb	r5, r5, r2
 8022660:	fb00 5003 	mla	r0, r0, r3, r5
 8022664:	b280      	uxth	r0, r0
 8022666:	1c45      	adds	r5, r0, #1
 8022668:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802266c:	784d      	ldrb	r5, [r1, #1]
 802266e:	fb15 f503 	smulbb	r5, r5, r3
 8022672:	1200      	asrs	r0, r0, #8
 8022674:	7008      	strb	r0, [r1, #0]
 8022676:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802267a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802267e:	fb00 5002 	mla	r0, r0, r2, r5
 8022682:	b280      	uxth	r0, r0
 8022684:	1c45      	adds	r5, r0, #1
 8022686:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802268a:	1200      	asrs	r0, r0, #8
 802268c:	7048      	strb	r0, [r1, #1]
 802268e:	7888      	ldrb	r0, [r1, #2]
 8022690:	fb10 f303 	smulbb	r3, r0, r3
 8022694:	fb04 3202 	mla	r2, r4, r2, r3
 8022698:	b292      	uxth	r2, r2
 802269a:	1c53      	adds	r3, r2, #1
 802269c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80226a0:	1212      	asrs	r2, r2, #8
 80226a2:	708a      	strb	r2, [r1, #2]
 80226a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226a8:	2f0f      	cmp	r7, #15
 80226aa:	d8a2      	bhi.n	80225f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80226ac:	462b      	mov	r3, r5
 80226ae:	4628      	mov	r0, r5
 80226b0:	e7b3      	b.n	802261a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80226b2:	2d00      	cmp	r5, #0
 80226b4:	d1a8      	bne.n	8022608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80226b6:	462c      	mov	r4, r5
 80226b8:	e7f8      	b.n	80226ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80226ba:	bf00      	nop
 80226bc:	08028f07 	.word	0x08028f07
 80226c0:	080293fe 	.word	0x080293fe
 80226c4:	08028fd0 	.word	0x08028fd0
 80226c8:	2000bc90 	.word	0x2000bc90

080226cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80226cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d0:	ed2d 8b08 	vpush	{d8-d11}
 80226d4:	b095      	sub	sp, #84	; 0x54
 80226d6:	461c      	mov	r4, r3
 80226d8:	eeb0 aa40 	vmov.f32	s20, s0
 80226dc:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80226e0:	eef0 9a60 	vmov.f32	s19, s1
 80226e4:	920e      	str	r2, [sp, #56]	; 0x38
 80226e6:	eeb0 9a41 	vmov.f32	s18, s2
 80226ea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80226ec:	eeb0 8a62 	vmov.f32	s16, s5
 80226f0:	9307      	str	r3, [sp, #28]
 80226f2:	eef0 8a43 	vmov.f32	s17, s6
 80226f6:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80226fa:	eef0 ba44 	vmov.f32	s23, s8
 80226fe:	9013      	str	r0, [sp, #76]	; 0x4c
 8022700:	eeb0 ba64 	vmov.f32	s22, s9
 8022704:	9109      	str	r1, [sp, #36]	; 0x24
 8022706:	eef0 aa45 	vmov.f32	s21, s10
 802270a:	9308      	str	r3, [sp, #32]
 802270c:	6850      	ldr	r0, [r2, #4]
 802270e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022712:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022716:	fb00 1803 	mla	r8, r0, r3, r1
 802271a:	6813      	ldr	r3, [r2, #0]
 802271c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022720:	4498      	add	r8, r3
 8022722:	9b07      	ldr	r3, [sp, #28]
 8022724:	3301      	adds	r3, #1
 8022726:	f023 0301 	bic.w	r3, r3, #1
 802272a:	930b      	str	r3, [sp, #44]	; 0x2c
 802272c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802272e:	681f      	ldr	r7, [r3, #0]
 8022730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022732:	2b00      	cmp	r3, #0
 8022734:	dc03      	bgt.n	802273e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022738:	2b00      	cmp	r3, #0
 802273a:	f340 8238 	ble.w	8022bae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802273e:	2c00      	cmp	r4, #0
 8022740:	f340 8109 	ble.w	8022956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022744:	142a      	asrs	r2, r5, #16
 8022746:	ea4f 4326 	mov.w	r3, r6, asr #16
 802274a:	d42b      	bmi.n	80227a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802274c:	1c51      	adds	r1, r2, #1
 802274e:	9807      	ldr	r0, [sp, #28]
 8022750:	4288      	cmp	r0, r1
 8022752:	dd2a      	ble.n	80227aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022754:	2b00      	cmp	r3, #0
 8022756:	db28      	blt.n	80227aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022758:	1c59      	adds	r1, r3, #1
 802275a:	9808      	ldr	r0, [sp, #32]
 802275c:	4288      	cmp	r0, r1
 802275e:	dd24      	ble.n	80227aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022760:	1e63      	subs	r3, r4, #1
 8022762:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022764:	fb02 5203 	mla	r2, r2, r3, r5
 8022768:	1412      	asrs	r2, r2, #16
 802276a:	d429      	bmi.n	80227c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802276c:	3201      	adds	r2, #1
 802276e:	9907      	ldr	r1, [sp, #28]
 8022770:	4291      	cmp	r1, r2
 8022772:	dd25      	ble.n	80227c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022774:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022776:	fb02 6303 	mla	r3, r2, r3, r6
 802277a:	141b      	asrs	r3, r3, #16
 802277c:	d420      	bmi.n	80227c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802277e:	3301      	adds	r3, #1
 8022780:	9a08      	ldr	r2, [sp, #32]
 8022782:	429a      	cmp	r2, r3
 8022784:	dd1c      	ble.n	80227c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022786:	f108 0e03 	add.w	lr, r8, #3
 802278a:	46a1      	mov	r9, r4
 802278c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022790:	f1b9 0f00 	cmp.w	r9, #0
 8022794:	f300 8155 	bgt.w	8022a42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8022798:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802279c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227a0:	44a0      	add	r8, r4
 80227a2:	e0da      	b.n	802295a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80227a4:	1c50      	adds	r0, r2, #1
 80227a6:	f040 80ce 	bne.w	8022946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227aa:	9907      	ldr	r1, [sp, #28]
 80227ac:	4291      	cmp	r1, r2
 80227ae:	f340 80ca 	ble.w	8022946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227b2:	1c59      	adds	r1, r3, #1
 80227b4:	f2c0 80c7 	blt.w	8022946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227b8:	9a08      	ldr	r2, [sp, #32]
 80227ba:	4293      	cmp	r3, r2
 80227bc:	f280 80c3 	bge.w	8022946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227c0:	46a3      	mov	fp, r4
 80227c2:	46c1      	mov	r9, r8
 80227c4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80227c8:	f1bb 0f00 	cmp.w	fp, #0
 80227cc:	dde4      	ble.n	8022798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80227ce:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80227d2:	1428      	asrs	r0, r5, #16
 80227d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80227d8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80227dc:	920a      	str	r2, [sp, #40]	; 0x28
 80227de:	f100 8116 	bmi.w	8022a0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80227e2:	f100 0c01 	add.w	ip, r0, #1
 80227e6:	9a07      	ldr	r2, [sp, #28]
 80227e8:	4562      	cmp	r2, ip
 80227ea:	f340 8112 	ble.w	8022a12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	f2c0 810f 	blt.w	8022a12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80227f4:	f103 0c01 	add.w	ip, r3, #1
 80227f8:	9a08      	ldr	r2, [sp, #32]
 80227fa:	4562      	cmp	r2, ip
 80227fc:	f340 8109 	ble.w	8022a12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022800:	fb03 030a 	mla	r3, r3, sl, r0
 8022804:	0858      	lsrs	r0, r3, #1
 8022806:	07da      	lsls	r2, r3, #31
 8022808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802280a:	5c38      	ldrb	r0, [r7, r0]
 802280c:	bf54      	ite	pl
 802280e:	f000 000f 	andpl.w	r0, r0, #15
 8022812:	1100      	asrmi	r0, r0, #4
 8022814:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022818:	b2c0      	uxtb	r0, r0
 802281a:	2a00      	cmp	r2, #0
 802281c:	f000 80dd 	beq.w	80229da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022820:	f103 0e01 	add.w	lr, r3, #1
 8022824:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022828:	f01e 0f01 	tst.w	lr, #1
 802282c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022830:	bf0c      	ite	eq
 8022832:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022836:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802283a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802283e:	fa5f fc8c 	uxtb.w	ip, ip
 8022842:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022846:	b301      	cbz	r1, 802288a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022848:	4453      	add	r3, sl
 802284a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802284e:	07da      	lsls	r2, r3, #31
 8022850:	f103 0301 	add.w	r3, r3, #1
 8022854:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022858:	bf54      	ite	pl
 802285a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802285e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022862:	07da      	lsls	r2, r3, #31
 8022864:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022868:	fa5f fc8c 	uxtb.w	ip, ip
 802286c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8022870:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022874:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022878:	bf54      	ite	pl
 802287a:	f00c 030f 	andpl.w	r3, ip, #15
 802287e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022882:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022886:	b2db      	uxtb	r3, r3
 8022888:	9310      	str	r3, [sp, #64]	; 0x40
 802288a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802288e:	b289      	uxth	r1, r1
 8022890:	fb02 f301 	mul.w	r3, r2, r1
 8022894:	0112      	lsls	r2, r2, #4
 8022896:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802289a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802289e:	1ad2      	subs	r2, r2, r3
 80228a0:	fa1f fe81 	uxth.w	lr, r1
 80228a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80228a6:	b292      	uxth	r2, r2
 80228a8:	ebac 0c0e 	sub.w	ip, ip, lr
 80228ac:	434a      	muls	r2, r1
 80228ae:	fa1f fc8c 	uxth.w	ip, ip
 80228b2:	fb00 200c 	mla	r0, r0, ip, r2
 80228b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80228b8:	fb0e 0002 	mla	r0, lr, r2, r0
 80228bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228be:	fb03 0002 	mla	r0, r3, r2, r0
 80228c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80228c6:	b3a8      	cbz	r0, 8022934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80228c8:	4bbb      	ldr	r3, [pc, #748]	; (8022bb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80228ca:	28ff      	cmp	r0, #255	; 0xff
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80228d2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80228d6:	b2db      	uxtb	r3, r3
 80228d8:	f000 8092 	beq.w	8022a00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80228dc:	b282      	uxth	r2, r0
 80228de:	43c0      	mvns	r0, r0
 80228e0:	f899 e000 	ldrb.w	lr, [r9]
 80228e4:	fb13 f302 	smulbb	r3, r3, r2
 80228e8:	b2c0      	uxtb	r0, r0
 80228ea:	fb11 f102 	smulbb	r1, r1, r2
 80228ee:	fb0e 3300 	mla	r3, lr, r0, r3
 80228f2:	fb1c f202 	smulbb	r2, ip, r2
 80228f6:	b29b      	uxth	r3, r3
 80228f8:	f103 0e01 	add.w	lr, r3, #1
 80228fc:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022900:	121b      	asrs	r3, r3, #8
 8022902:	f889 3000 	strb.w	r3, [r9]
 8022906:	f899 3001 	ldrb.w	r3, [r9, #1]
 802290a:	fb03 1100 	mla	r1, r3, r0, r1
 802290e:	b289      	uxth	r1, r1
 8022910:	1c4b      	adds	r3, r1, #1
 8022912:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022916:	f899 3002 	ldrb.w	r3, [r9, #2]
 802291a:	fb03 2000 	mla	r0, r3, r0, r2
 802291e:	1209      	asrs	r1, r1, #8
 8022920:	b280      	uxth	r0, r0
 8022922:	f889 1001 	strb.w	r1, [r9, #1]
 8022926:	f100 0c01 	add.w	ip, r0, #1
 802292a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802292e:	1200      	asrs	r0, r0, #8
 8022930:	f889 0002 	strb.w	r0, [r9, #2]
 8022934:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022936:	f109 0903 	add.w	r9, r9, #3
 802293a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802293e:	441d      	add	r5, r3
 8022940:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022942:	441e      	add	r6, r3
 8022944:	e740      	b.n	80227c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022946:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022948:	3c01      	subs	r4, #1
 802294a:	f108 0803 	add.w	r8, r8, #3
 802294e:	441d      	add	r5, r3
 8022950:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022952:	441e      	add	r6, r3
 8022954:	e6f3      	b.n	802273e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022956:	f47f af03 	bne.w	8022760 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802295a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802295c:	2b00      	cmp	r3, #0
 802295e:	f340 8126 	ble.w	8022bae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022966:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022968:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802296c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022970:	eef0 6a48 	vmov.f32	s13, s16
 8022974:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022978:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802297c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022980:	ee16 5a90 	vmov	r5, s13
 8022984:	eef0 6a68 	vmov.f32	s13, s17
 8022988:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802298c:	ee16 6a90 	vmov	r6, s13
 8022990:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022994:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022998:	ee37 8a48 	vsub.f32	s16, s14, s16
 802299c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80229a0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80229a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80229a8:	ee18 2a10 	vmov	r2, s16
 80229ac:	eeb0 8a47 	vmov.f32	s16, s14
 80229b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80229b4:	ee18 2a90 	vmov	r2, s17
 80229b8:	9329      	str	r3, [sp, #164]	; 0xa4
 80229ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229bc:	eef0 8a67 	vmov.f32	s17, s15
 80229c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80229c4:	932a      	str	r3, [sp, #168]	; 0xa8
 80229c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80229ca:	3b01      	subs	r3, #1
 80229cc:	9309      	str	r3, [sp, #36]	; 0x24
 80229ce:	bf08      	it	eq
 80229d0:	4614      	moveq	r4, r2
 80229d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229d4:	bf18      	it	ne
 80229d6:	461c      	movne	r4, r3
 80229d8:	e6aa      	b.n	8022730 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80229da:	2900      	cmp	r1, #0
 80229dc:	f43f af55 	beq.w	802288a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80229e0:	4453      	add	r3, sl
 80229e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80229e6:	07db      	lsls	r3, r3, #31
 80229e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80229ec:	bf54      	ite	pl
 80229ee:	f00c 030f 	andpl.w	r3, ip, #15
 80229f2:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80229f6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80229fa:	b2db      	uxtb	r3, r3
 80229fc:	930c      	str	r3, [sp, #48]	; 0x30
 80229fe:	e744      	b.n	802288a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022a00:	f889 3000 	strb.w	r3, [r9]
 8022a04:	f889 1001 	strb.w	r1, [r9, #1]
 8022a08:	f889 c002 	strb.w	ip, [r9, #2]
 8022a0c:	e792      	b.n	8022934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a0e:	1c42      	adds	r2, r0, #1
 8022a10:	d190      	bne.n	8022934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a12:	9a07      	ldr	r2, [sp, #28]
 8022a14:	4282      	cmp	r2, r0
 8022a16:	dd8d      	ble.n	8022934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a18:	1c5a      	adds	r2, r3, #1
 8022a1a:	db8b      	blt.n	8022934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a1c:	9a08      	ldr	r2, [sp, #32]
 8022a1e:	429a      	cmp	r2, r3
 8022a20:	dd88      	ble.n	8022934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022a24:	9105      	str	r1, [sp, #20]
 8022a26:	4649      	mov	r1, r9
 8022a28:	9002      	str	r0, [sp, #8]
 8022a2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022a2c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022a30:	9b08      	ldr	r3, [sp, #32]
 8022a32:	463a      	mov	r2, r7
 8022a34:	9301      	str	r3, [sp, #4]
 8022a36:	9b07      	ldr	r3, [sp, #28]
 8022a38:	9300      	str	r3, [sp, #0]
 8022a3a:	4653      	mov	r3, sl
 8022a3c:	f7ff fd64 	bl	8022508 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8022a40:	e778      	b.n	8022934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a42:	142a      	asrs	r2, r5, #16
 8022a44:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022a48:	1433      	asrs	r3, r6, #16
 8022a4a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022a4e:	fb0a 2303 	mla	r3, sl, r3, r2
 8022a52:	085a      	lsrs	r2, r3, #1
 8022a54:	07d9      	lsls	r1, r3, #31
 8022a56:	5cba      	ldrb	r2, [r7, r2]
 8022a58:	bf54      	ite	pl
 8022a5a:	f002 020f 	andpl.w	r2, r2, #15
 8022a5e:	1112      	asrmi	r2, r2, #4
 8022a60:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022a64:	b2d2      	uxtb	r2, r2
 8022a66:	2800      	cmp	r0, #0
 8022a68:	f000 808a 	beq.w	8022b80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8022a6c:	f103 0b01 	add.w	fp, r3, #1
 8022a70:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8022a74:	f01b 0f01 	tst.w	fp, #1
 8022a78:	5c79      	ldrb	r1, [r7, r1]
 8022a7a:	bf0c      	ite	eq
 8022a7c:	f001 010f 	andeq.w	r1, r1, #15
 8022a80:	1109      	asrne	r1, r1, #4
 8022a82:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022a86:	b2c9      	uxtb	r1, r1
 8022a88:	9111      	str	r1, [sp, #68]	; 0x44
 8022a8a:	f1bc 0f00 	cmp.w	ip, #0
 8022a8e:	d019      	beq.n	8022ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022a90:	4453      	add	r3, sl
 8022a92:	0859      	lsrs	r1, r3, #1
 8022a94:	f013 0f01 	tst.w	r3, #1
 8022a98:	f103 0301 	add.w	r3, r3, #1
 8022a9c:	5c79      	ldrb	r1, [r7, r1]
 8022a9e:	bf0c      	ite	eq
 8022aa0:	f001 010f 	andeq.w	r1, r1, #15
 8022aa4:	1109      	asrne	r1, r1, #4
 8022aa6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022aaa:	b2c9      	uxtb	r1, r1
 8022aac:	910d      	str	r1, [sp, #52]	; 0x34
 8022aae:	0859      	lsrs	r1, r3, #1
 8022ab0:	07db      	lsls	r3, r3, #31
 8022ab2:	5c79      	ldrb	r1, [r7, r1]
 8022ab4:	bf54      	ite	pl
 8022ab6:	f001 010f 	andpl.w	r1, r1, #15
 8022aba:	1109      	asrmi	r1, r1, #4
 8022abc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022ac0:	b2c9      	uxtb	r1, r1
 8022ac2:	9112      	str	r1, [sp, #72]	; 0x48
 8022ac4:	b280      	uxth	r0, r0
 8022ac6:	fa1f fc8c 	uxth.w	ip, ip
 8022aca:	fb00 f30c 	mul.w	r3, r0, ip
 8022ace:	0100      	lsls	r0, r0, #4
 8022ad0:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022ad4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022ad8:	1ac0      	subs	r0, r0, r3
 8022ada:	fa1f fc8c 	uxth.w	ip, ip
 8022ade:	b280      	uxth	r0, r0
 8022ae0:	eba1 010c 	sub.w	r1, r1, ip
 8022ae4:	fa1f fb81 	uxth.w	fp, r1
 8022ae8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022aea:	4348      	muls	r0, r1
 8022aec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022aee:	fb02 020b 	mla	r2, r2, fp, r0
 8022af2:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022af6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022af8:	fb03 c302 	mla	r3, r3, r2, ip
 8022afc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b00:	b3ab      	cbz	r3, 8022b6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022b02:	4a2d      	ldr	r2, [pc, #180]	; (8022bb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022b04:	2bff      	cmp	r3, #255	; 0xff
 8022b06:	6811      	ldr	r1, [r2, #0]
 8022b08:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8022b0c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8022b10:	b2c9      	uxtb	r1, r1
 8022b12:	d045      	beq.n	8022ba0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8022b14:	b298      	uxth	r0, r3
 8022b16:	43db      	mvns	r3, r3
 8022b18:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8022b1c:	fb11 f100 	smulbb	r1, r1, r0
 8022b20:	b2db      	uxtb	r3, r3
 8022b22:	fb1c fc00 	smulbb	ip, ip, r0
 8022b26:	fb02 1103 	mla	r1, r2, r3, r1
 8022b2a:	fb1b f000 	smulbb	r0, fp, r0
 8022b2e:	b289      	uxth	r1, r1
 8022b30:	1c4a      	adds	r2, r1, #1
 8022b32:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022b36:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022b3a:	fb02 cc03 	mla	ip, r2, r3, ip
 8022b3e:	1209      	asrs	r1, r1, #8
 8022b40:	fa1f fc8c 	uxth.w	ip, ip
 8022b44:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022b48:	f10c 0201 	add.w	r2, ip, #1
 8022b4c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022b50:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8022b54:	fb02 0303 	mla	r3, r2, r3, r0
 8022b58:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022b5c:	b29b      	uxth	r3, r3
 8022b5e:	f80e cc02 	strb.w	ip, [lr, #-2]
 8022b62:	1c5a      	adds	r2, r3, #1
 8022b64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b68:	121b      	asrs	r3, r3, #8
 8022b6a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8022b6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022b70:	f10e 0e03 	add.w	lr, lr, #3
 8022b74:	f109 39ff 	add.w	r9, r9, #4294967295
 8022b78:	441d      	add	r5, r3
 8022b7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022b7c:	441e      	add	r6, r3
 8022b7e:	e607      	b.n	8022790 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8022b80:	f1bc 0f00 	cmp.w	ip, #0
 8022b84:	d09e      	beq.n	8022ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022b86:	4453      	add	r3, sl
 8022b88:	0859      	lsrs	r1, r3, #1
 8022b8a:	07db      	lsls	r3, r3, #31
 8022b8c:	5c79      	ldrb	r1, [r7, r1]
 8022b8e:	bf54      	ite	pl
 8022b90:	f001 010f 	andpl.w	r1, r1, #15
 8022b94:	1109      	asrmi	r1, r1, #4
 8022b96:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022b9a:	b2c9      	uxtb	r1, r1
 8022b9c:	910d      	str	r1, [sp, #52]	; 0x34
 8022b9e:	e791      	b.n	8022ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022ba0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022ba4:	f80e cc02 	strb.w	ip, [lr, #-2]
 8022ba8:	f80e bc01 	strb.w	fp, [lr, #-1]
 8022bac:	e7df      	b.n	8022b6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022bae:	b015      	add	sp, #84	; 0x54
 8022bb0:	ecbd 8b08 	vpop	{d8-d11}
 8022bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bb8:	2000bc90 	.word	0x2000bc90

08022bbc <CRC_Lock>:
 8022bbc:	4a1d      	ldr	r2, [pc, #116]	; (8022c34 <CRC_Lock+0x78>)
 8022bbe:	b530      	push	{r4, r5, lr}
 8022bc0:	6813      	ldr	r3, [r2, #0]
 8022bc2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022bc6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022bca:	f023 0301 	bic.w	r3, r3, #1
 8022bce:	6013      	str	r3, [r2, #0]
 8022bd0:	4b19      	ldr	r3, [pc, #100]	; (8022c38 <CRC_Lock+0x7c>)
 8022bd2:	681a      	ldr	r2, [r3, #0]
 8022bd4:	4022      	ands	r2, r4
 8022bd6:	42aa      	cmp	r2, r5
 8022bd8:	d005      	beq.n	8022be6 <CRC_Lock+0x2a>
 8022bda:	681b      	ldr	r3, [r3, #0]
 8022bdc:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022be0:	4023      	ands	r3, r4
 8022be2:	4293      	cmp	r3, r2
 8022be4:	d11d      	bne.n	8022c22 <CRC_Lock+0x66>
 8022be6:	4b15      	ldr	r3, [pc, #84]	; (8022c3c <CRC_Lock+0x80>)
 8022be8:	681b      	ldr	r3, [r3, #0]
 8022bea:	b9d3      	cbnz	r3, 8022c22 <CRC_Lock+0x66>
 8022bec:	4a14      	ldr	r2, [pc, #80]	; (8022c40 <CRC_Lock+0x84>)
 8022bee:	6813      	ldr	r3, [r2, #0]
 8022bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022bf4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8022bf8:	d006      	beq.n	8022c08 <CRC_Lock+0x4c>
 8022bfa:	6813      	ldr	r3, [r2, #0]
 8022bfc:	f240 4283 	movw	r2, #1155	; 0x483
 8022c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022c04:	4293      	cmp	r3, r2
 8022c06:	d10c      	bne.n	8022c22 <CRC_Lock+0x66>
 8022c08:	4b0e      	ldr	r3, [pc, #56]	; (8022c44 <CRC_Lock+0x88>)
 8022c0a:	2201      	movs	r2, #1
 8022c0c:	601a      	str	r2, [r3, #0]
 8022c0e:	681a      	ldr	r2, [r3, #0]
 8022c10:	2a00      	cmp	r2, #0
 8022c12:	d1fc      	bne.n	8022c0e <CRC_Lock+0x52>
 8022c14:	4b0c      	ldr	r3, [pc, #48]	; (8022c48 <CRC_Lock+0x8c>)
 8022c16:	6018      	str	r0, [r3, #0]
 8022c18:	6818      	ldr	r0, [r3, #0]
 8022c1a:	1a43      	subs	r3, r0, r1
 8022c1c:	4258      	negs	r0, r3
 8022c1e:	4158      	adcs	r0, r3
 8022c20:	bd30      	pop	{r4, r5, pc}
 8022c22:	4b0a      	ldr	r3, [pc, #40]	; (8022c4c <CRC_Lock+0x90>)
 8022c24:	2201      	movs	r2, #1
 8022c26:	601a      	str	r2, [r3, #0]
 8022c28:	681a      	ldr	r2, [r3, #0]
 8022c2a:	2a00      	cmp	r2, #0
 8022c2c:	d1fc      	bne.n	8022c28 <CRC_Lock+0x6c>
 8022c2e:	4b08      	ldr	r3, [pc, #32]	; (8022c50 <CRC_Lock+0x94>)
 8022c30:	e7f1      	b.n	8022c16 <CRC_Lock+0x5a>
 8022c32:	bf00      	nop
 8022c34:	e0002000 	.word	0xe0002000
 8022c38:	e000ed00 	.word	0xe000ed00
 8022c3c:	e0042000 	.word	0xe0042000
 8022c40:	5c001000 	.word	0x5c001000
 8022c44:	58024c08 	.word	0x58024c08
 8022c48:	58024c00 	.word	0x58024c00
 8022c4c:	40023008 	.word	0x40023008
 8022c50:	40023000 	.word	0x40023000

08022c54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022c54:	6101      	str	r1, [r0, #16]
 8022c56:	4770      	bx	lr

08022c58 <_ZN8touchgfx8Gestures4tickEv>:
 8022c58:	7b83      	ldrb	r3, [r0, #14]
 8022c5a:	b14b      	cbz	r3, 8022c70 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022c5c:	8903      	ldrh	r3, [r0, #8]
 8022c5e:	3301      	adds	r3, #1
 8022c60:	b29b      	uxth	r3, r3
 8022c62:	2b07      	cmp	r3, #7
 8022c64:	8103      	strh	r3, [r0, #8]
 8022c66:	bf81      	itttt	hi
 8022c68:	2300      	movhi	r3, #0
 8022c6a:	8143      	strhhi	r3, [r0, #10]
 8022c6c:	8183      	strhhi	r3, [r0, #12]
 8022c6e:	7383      	strbhi	r3, [r0, #14]
 8022c70:	4770      	bx	lr
	...

08022c74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022c74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022c78:	4604      	mov	r4, r0
 8022c7a:	4698      	mov	r8, r3
 8022c7c:	8880      	ldrh	r0, [r0, #4]
 8022c7e:	4617      	mov	r7, r2
 8022c80:	4b1d      	ldr	r3, [pc, #116]	; (8022cf8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8022c82:	460e      	mov	r6, r1
 8022c84:	f8ad 0006 	strh.w	r0, [sp, #6]
 8022c88:	eba8 0000 	sub.w	r0, r8, r0
 8022c8c:	9300      	str	r3, [sp, #0]
 8022c8e:	2300      	movs	r3, #0
 8022c90:	b280      	uxth	r0, r0
 8022c92:	8aa2      	ldrh	r2, [r4, #20]
 8022c94:	f88d 3004 	strb.w	r3, [sp, #4]
 8022c98:	b203      	sxth	r3, r0
 8022c9a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8022c9e:	88e1      	ldrh	r1, [r4, #6]
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022ca6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022caa:	bfb8      	it	lt
 8022cac:	4240      	neglt	r0, r0
 8022cae:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022cb2:	bfb8      	it	lt
 8022cb4:	b203      	sxthlt	r3, r0
 8022cb6:	4293      	cmp	r3, r2
 8022cb8:	dc08      	bgt.n	8022ccc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8022cba:	1a69      	subs	r1, r5, r1
 8022cbc:	b289      	uxth	r1, r1
 8022cbe:	b20b      	sxth	r3, r1
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	bfbc      	itt	lt
 8022cc4:	4249      	neglt	r1, r1
 8022cc6:	b20b      	sxthlt	r3, r1
 8022cc8:	429a      	cmp	r2, r3
 8022cca:	da13      	bge.n	8022cf4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8022ccc:	6920      	ldr	r0, [r4, #16]
 8022cce:	4669      	mov	r1, sp
 8022cd0:	eba8 0606 	sub.w	r6, r8, r6
 8022cd4:	1bef      	subs	r7, r5, r7
 8022cd6:	6803      	ldr	r3, [r0, #0]
 8022cd8:	685b      	ldr	r3, [r3, #4]
 8022cda:	4798      	blx	r3
 8022cdc:	2300      	movs	r3, #0
 8022cde:	2001      	movs	r0, #1
 8022ce0:	8166      	strh	r6, [r4, #10]
 8022ce2:	8123      	strh	r3, [r4, #8]
 8022ce4:	81a7      	strh	r7, [r4, #12]
 8022ce6:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022cea:	80e5      	strh	r5, [r4, #6]
 8022cec:	73a0      	strb	r0, [r4, #14]
 8022cee:	b004      	add	sp, #16
 8022cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022cf4:	2000      	movs	r0, #0
 8022cf6:	e7fa      	b.n	8022cee <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8022cf8:	080280a4 	.word	0x080280a4

08022cfc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cfe:	461e      	mov	r6, r3
 8022d00:	1e4b      	subs	r3, r1, #1
 8022d02:	b085      	sub	sp, #20
 8022d04:	4604      	mov	r4, r0
 8022d06:	2b01      	cmp	r3, #1
 8022d08:	460d      	mov	r5, r1
 8022d0a:	4617      	mov	r7, r2
 8022d0c:	d84b      	bhi.n	8022da6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022d0e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022d12:	1cd3      	adds	r3, r2, #3
 8022d14:	b29b      	uxth	r3, r3
 8022d16:	2b06      	cmp	r3, #6
 8022d18:	d916      	bls.n	8022d48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022d1a:	f8df c098 	ldr.w	ip, [pc, #152]	; 8022db4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8022d1e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022d22:	f8cd c004 	str.w	ip, [sp, #4]
 8022d26:	f04f 0c00 	mov.w	ip, #0
 8022d2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022d2e:	6900      	ldr	r0, [r0, #16]
 8022d30:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022d34:	a901      	add	r1, sp, #4
 8022d36:	f88d c008 	strb.w	ip, [sp, #8]
 8022d3a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022d3e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022d42:	6803      	ldr	r3, [r0, #0]
 8022d44:	689b      	ldr	r3, [r3, #8]
 8022d46:	4798      	blx	r3
 8022d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022d4c:	1cd3      	adds	r3, r2, #3
 8022d4e:	b29b      	uxth	r3, r3
 8022d50:	2b06      	cmp	r3, #6
 8022d52:	d916      	bls.n	8022d82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022d54:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8022db4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8022d58:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022d5c:	f8cd c004 	str.w	ip, [sp, #4]
 8022d60:	f04f 0c01 	mov.w	ip, #1
 8022d64:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022d68:	6920      	ldr	r0, [r4, #16]
 8022d6a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022d6e:	a901      	add	r1, sp, #4
 8022d70:	f88d c008 	strb.w	ip, [sp, #8]
 8022d74:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022d78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022d7c:	6803      	ldr	r3, [r0, #0]
 8022d7e:	689b      	ldr	r3, [r3, #8]
 8022d80:	4798      	blx	r3
 8022d82:	4b0b      	ldr	r3, [pc, #44]	; (8022db0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8022d84:	a901      	add	r1, sp, #4
 8022d86:	6920      	ldr	r0, [r4, #16]
 8022d88:	9301      	str	r3, [sp, #4]
 8022d8a:	2300      	movs	r3, #0
 8022d8c:	f88d 5008 	strb.w	r5, [sp, #8]
 8022d90:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022d94:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022d98:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022d9c:	6803      	ldr	r3, [r0, #0]
 8022d9e:	681b      	ldr	r3, [r3, #0]
 8022da0:	4798      	blx	r3
 8022da2:	b005      	add	sp, #20
 8022da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022da6:	2900      	cmp	r1, #0
 8022da8:	d1eb      	bne.n	8022d82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022daa:	80a2      	strh	r2, [r4, #4]
 8022dac:	80c6      	strh	r6, [r0, #6]
 8022dae:	e7e8      	b.n	8022d82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022db0:	08028090 	.word	0x08028090
 8022db4:	080280b8 	.word	0x080280b8

08022db8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8022db8:	10c9      	asrs	r1, r1, #3
 8022dba:	2900      	cmp	r1, #0
 8022dbc:	bfb8      	it	lt
 8022dbe:	4249      	neglt	r1, r1
 8022dc0:	2801      	cmp	r0, #1
 8022dc2:	d108      	bne.n	8022dd6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8022dc4:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8022dc8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8022dcc:	4601      	mov	r1, r0
 8022dce:	dd02      	ble.n	8022dd6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8022dd0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8022dd4:	4770      	bx	lr
 8022dd6:	29ff      	cmp	r1, #255	; 0xff
 8022dd8:	bfa8      	it	ge
 8022dda:	21ff      	movge	r1, #255	; 0xff
 8022ddc:	4608      	mov	r0, r1
 8022dde:	4770      	bx	lr

08022de0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8022de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022de4:	688c      	ldr	r4, [r1, #8]
 8022de6:	b087      	sub	sp, #28
 8022de8:	4607      	mov	r7, r0
 8022dea:	2c00      	cmp	r4, #0
 8022dec:	db2b      	blt.n	8022e46 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022dee:	6803      	ldr	r3, [r0, #0]
 8022df0:	68da      	ldr	r2, [r3, #12]
 8022df2:	42a2      	cmp	r2, r4
 8022df4:	dd27      	ble.n	8022e46 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022df6:	681a      	ldr	r2, [r3, #0]
 8022df8:	691e      	ldr	r6, [r3, #16]
 8022dfa:	68cd      	ldr	r5, [r1, #12]
 8022dfc:	fb06 2604 	mla	r6, r6, r4, r2
 8022e00:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8022e04:	698a      	ldr	r2, [r1, #24]
 8022e06:	f893 a004 	ldrb.w	sl, [r3, #4]
 8022e0a:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8022e0e:	9205      	str	r2, [sp, #20]
 8022e10:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8022e14:	9b05      	ldr	r3, [sp, #20]
 8022e16:	6839      	ldr	r1, [r7, #0]
 8022e18:	eb03 0c02 	add.w	ip, r3, r2
 8022e1c:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8022e20:	6889      	ldr	r1, [r1, #8]
 8022e22:	1898      	adds	r0, r3, r2
 8022e24:	4288      	cmp	r0, r1
 8022e26:	db02      	blt.n	8022e2e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8022e28:	1a8b      	subs	r3, r1, r2
 8022e2a:	2b00      	cmp	r3, #0
 8022e2c:	dd09      	ble.n	8022e42 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8022e2e:	6878      	ldr	r0, [r7, #4]
 8022e30:	6801      	ldr	r1, [r0, #0]
 8022e32:	9400      	str	r4, [sp, #0]
 8022e34:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8022e38:	4653      	mov	r3, sl
 8022e3a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8022e3e:	4631      	mov	r1, r6
 8022e40:	47d8      	blx	fp
 8022e42:	3d01      	subs	r5, #1
 8022e44:	d1e4      	bne.n	8022e10 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8022e46:	b007      	add	sp, #28
 8022e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e4c <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022e4c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8022e50:	b90b      	cbnz	r3, 8022e56 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8022e52:	f001 b974 	b.w	802413e <_ZN8touchgfx7Outline6lineToEii>
 8022e56:	4770      	bx	lr

08022e58 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8022e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e5c:	4604      	mov	r4, r0
 8022e5e:	2600      	movs	r6, #0
 8022e60:	4b8e      	ldr	r3, [pc, #568]	; (802309c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8022e62:	f100 0518 	add.w	r5, r0, #24
 8022e66:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8022e6a:	b086      	sub	sp, #24
 8022e6c:	4690      	mov	r8, r2
 8022e6e:	e9c0 3100 	strd	r3, r1, [r0]
 8022e72:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8022e76:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8022e7a:	4628      	mov	r0, r5
 8022e7c:	f001 fb75 	bl	802456a <_ZN8touchgfx15RenderingBufferC1Ev>
 8022e80:	4638      	mov	r0, r7
 8022e82:	f000 fb45 	bl	8023510 <_ZN8touchgfx7OutlineC1Ev>
 8022e86:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8022e8a:	f001 fb23 	bl	80244d4 <_ZN8touchgfx8ScanlineC1Ev>
 8022e8e:	2301      	movs	r3, #1
 8022e90:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8022e94:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8022e98:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022e9c:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8022ea0:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8022ea4:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8022ea8:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8022eac:	f7f4 fbe6 	bl	801767c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8022eb0:	b928      	cbnz	r0, 8022ebe <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8022eb2:	4b7b      	ldr	r3, [pc, #492]	; (80230a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8022eb4:	2118      	movs	r1, #24
 8022eb6:	4a7b      	ldr	r2, [pc, #492]	; (80230a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8022eb8:	487b      	ldr	r0, [pc, #492]	; (80230a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8022eba:	f001 fb99 	bl	80245f0 <__assert_func>
 8022ebe:	f9b8 2000 	ldrsh.w	r2, [r8]
 8022ec2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8022ec6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8022eca:	4410      	add	r0, r2
 8022ecc:	9602      	str	r6, [sp, #8]
 8022ece:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8022ed2:	b280      	uxth	r0, r0
 8022ed4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8022ed8:	fa0f fa80 	sxth.w	sl, r0
 8022edc:	f1ba 0f00 	cmp.w	sl, #0
 8022ee0:	dd70      	ble.n	8022fc4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022ee2:	4591      	cmp	r9, r2
 8022ee4:	dd6e      	ble.n	8022fc4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022ee6:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8022eea:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8022eee:	440b      	add	r3, r1
 8022ef0:	b29b      	uxth	r3, r3
 8022ef2:	b21e      	sxth	r6, r3
 8022ef4:	2e00      	cmp	r6, #0
 8022ef6:	dd65      	ble.n	8022fc4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022ef8:	458e      	cmp	lr, r1
 8022efa:	dd63      	ble.n	8022fc4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022efc:	45d1      	cmp	r9, sl
 8022efe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8022f02:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8022f06:	bfb8      	it	lt
 8022f08:	fa1f f089 	uxthlt.w	r0, r9
 8022f0c:	45b6      	cmp	lr, r6
 8022f0e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022f12:	bfb8      	it	lt
 8022f14:	fa1f f38e 	uxthlt.w	r3, lr
 8022f18:	1a80      	subs	r0, r0, r2
 8022f1a:	f8ad 100a 	strh.w	r1, [sp, #10]
 8022f1e:	1a5b      	subs	r3, r3, r1
 8022f20:	f8ad 000c 	strh.w	r0, [sp, #12]
 8022f24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022f28:	f10d 0808 	add.w	r8, sp, #8
 8022f2c:	ae04      	add	r6, sp, #16
 8022f2e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022f32:	e886 0003 	stmia.w	r6, {r0, r1}
 8022f36:	f8dc 3000 	ldr.w	r3, [ip]
 8022f3a:	4660      	mov	r0, ip
 8022f3c:	4631      	mov	r1, r6
 8022f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022f40:	4798      	blx	r3
 8022f42:	6861      	ldr	r1, [r4, #4]
 8022f44:	4640      	mov	r0, r8
 8022f46:	3104      	adds	r1, #4
 8022f48:	f7f5 fa06 	bl	8018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f4c:	4630      	mov	r0, r6
 8022f4e:	f7f5 fa1b 	bl	8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f52:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8022f56:	f7f4 fb21 	bl	801759c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8022f5a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8022f5e:	4638      	mov	r0, r7
 8022f60:	f000 fab2 	bl	80234c8 <_ZN8touchgfx7Outline5resetEv>
 8022f64:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022f68:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022f6c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8022f70:	015b      	lsls	r3, r3, #5
 8022f72:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8022f76:	0152      	lsls	r2, r2, #5
 8022f78:	60e3      	str	r3, [r4, #12]
 8022f7a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022f7e:	60a2      	str	r2, [r4, #8]
 8022f80:	015b      	lsls	r3, r3, #5
 8022f82:	6123      	str	r3, [r4, #16]
 8022f84:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8022f88:	015b      	lsls	r3, r3, #5
 8022f8a:	6163      	str	r3, [r4, #20]
 8022f8c:	4b47      	ldr	r3, [pc, #284]	; (80230ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8022f8e:	6818      	ldr	r0, [r3, #0]
 8022f90:	6803      	ldr	r3, [r0, #0]
 8022f92:	6a1b      	ldr	r3, [r3, #32]
 8022f94:	4798      	blx	r3
 8022f96:	4606      	mov	r6, r0
 8022f98:	f7ec fc0e 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8022f9c:	6803      	ldr	r3, [r0, #0]
 8022f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022fa0:	4798      	blx	r3
 8022fa2:	4607      	mov	r7, r0
 8022fa4:	f7ec fc08 	bl	800f7b8 <_ZN8touchgfx3HAL3lcdEv>
 8022fa8:	6803      	ldr	r3, [r0, #0]
 8022faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fac:	4798      	blx	r3
 8022fae:	280c      	cmp	r0, #12
 8022fb0:	d854      	bhi.n	802305c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8022fb2:	e8df f000 	tbb	[pc, r0]
 8022fb6:	554b      	.short	0x554b
 8022fb8:	2b6e0a66 	.word	0x2b6e0a66
 8022fbc:	5f5f5f3b 	.word	0x5f5f5f3b
 8022fc0:	5f5f      	.short	0x5f5f
 8022fc2:	6e          	.byte	0x6e
 8022fc3:	00          	.byte	0x00
 8022fc4:	2300      	movs	r3, #0
 8022fc6:	9303      	str	r3, [sp, #12]
 8022fc8:	e7ae      	b.n	8022f28 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8022fca:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022fce:	2108      	movs	r1, #8
 8022fd0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022fd4:	fb92 f1f1 	sdiv	r1, r2, r1
 8022fd8:	fb07 1303 	mla	r3, r7, r3, r1
 8022fdc:	441e      	add	r6, r3
 8022fde:	4253      	negs	r3, r2
 8022fe0:	f002 0207 	and.w	r2, r2, #7
 8022fe4:	f003 0307 	and.w	r3, r3, #7
 8022fe8:	bf58      	it	pl
 8022fea:	425a      	negpl	r2, r3
 8022fec:	b2d2      	uxtb	r2, r2
 8022fee:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022ff2:	4628      	mov	r0, r5
 8022ff4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8022ff8:	66e1      	str	r1, [r4, #108]	; 0x6c
 8022ffa:	e9cd 1700 	strd	r1, r7, [sp]
 8022ffe:	4631      	mov	r1, r6
 8023000:	f001 fabb 	bl	802457a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8023004:	4620      	mov	r0, r4
 8023006:	b006      	add	sp, #24
 8023008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802300c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023010:	2104      	movs	r1, #4
 8023012:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023016:	fb92 f1f1 	sdiv	r1, r2, r1
 802301a:	fb07 1303 	mla	r3, r7, r3, r1
 802301e:	441e      	add	r6, r3
 8023020:	4253      	negs	r3, r2
 8023022:	f002 0203 	and.w	r2, r2, #3
 8023026:	f003 0303 	and.w	r3, r3, #3
 802302a:	e7dd      	b.n	8022fe8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 802302c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023030:	2102      	movs	r1, #2
 8023032:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023036:	2a00      	cmp	r2, #0
 8023038:	fb92 f1f1 	sdiv	r1, r2, r1
 802303c:	f002 0201 	and.w	r2, r2, #1
 8023040:	fb07 1303 	mla	r3, r7, r3, r1
 8023044:	bfb8      	it	lt
 8023046:	4252      	neglt	r2, r2
 8023048:	441e      	add	r6, r3
 802304a:	e7cf      	b.n	8022fec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802304c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023050:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023054:	437b      	muls	r3, r7
 8023056:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802305a:	441e      	add	r6, r3
 802305c:	2200      	movs	r2, #0
 802305e:	e7c6      	b.n	8022fee <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8023060:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023064:	2103      	movs	r1, #3
 8023066:	fb07 f203 	mul.w	r2, r7, r3
 802306a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802306e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023072:	e7f2      	b.n	802305a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023074:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023078:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802307c:	fb07 2303 	mla	r3, r7, r3, r2
 8023080:	e7eb      	b.n	802305a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023082:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023086:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802308a:	437b      	muls	r3, r7
 802308c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023090:	e7e3      	b.n	802305a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023092:	4b07      	ldr	r3, [pc, #28]	; (80230b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8023094:	2156      	movs	r1, #86	; 0x56
 8023096:	4a03      	ldr	r2, [pc, #12]	; (80230a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023098:	e70e      	b.n	8022eb8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802309a:	bf00      	nop
 802309c:	08029724 	.word	0x08029724
 80230a0:	0802966e 	.word	0x0802966e
 80230a4:	0802972c 	.word	0x0802972c
 80230a8:	080296ca 	.word	0x080296ca
 80230ac:	2000bc68 	.word	0x2000bc68
 80230b0:	080296fe 	.word	0x080296fe

080230b4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80230b4:	6812      	ldr	r2, [r2, #0]
 80230b6:	2a00      	cmp	r2, #0
 80230b8:	db0b      	blt.n	80230d2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80230ba:	9800      	ldr	r0, [sp, #0]
 80230bc:	6800      	ldr	r0, [r0, #0]
 80230be:	4290      	cmp	r0, r2
 80230c0:	bfd4      	ite	le
 80230c2:	2002      	movle	r0, #2
 80230c4:	2000      	movgt	r0, #0
 80230c6:	680a      	ldr	r2, [r1, #0]
 80230c8:	2a00      	cmp	r2, #0
 80230ca:	da04      	bge.n	80230d6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80230cc:	f040 0004 	orr.w	r0, r0, #4
 80230d0:	4770      	bx	lr
 80230d2:	2001      	movs	r0, #1
 80230d4:	e7f7      	b.n	80230c6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80230d6:	681b      	ldr	r3, [r3, #0]
 80230d8:	4293      	cmp	r3, r2
 80230da:	bfd8      	it	le
 80230dc:	f040 0008 	orrle.w	r0, r0, #8
 80230e0:	4770      	bx	lr
	...

080230e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80230e4:	4b07      	ldr	r3, [pc, #28]	; (8023104 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80230e6:	b510      	push	{r4, lr}
 80230e8:	781b      	ldrb	r3, [r3, #0]
 80230ea:	2b01      	cmp	r3, #1
 80230ec:	d108      	bne.n	8023100 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80230ee:	6843      	ldr	r3, [r0, #4]
 80230f0:	6814      	ldr	r4, [r2, #0]
 80230f2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80230f6:	680b      	ldr	r3, [r1, #0]
 80230f8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80230fc:	6013      	str	r3, [r2, #0]
 80230fe:	600c      	str	r4, [r1, #0]
 8023100:	bd10      	pop	{r4, pc}
 8023102:	bf00      	nop
 8023104:	2000bc60 	.word	0x2000bc60

08023108 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023108:	b5f0      	push	{r4, r5, r6, r7, lr}
 802310a:	b085      	sub	sp, #20
 802310c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023110:	4604      	mov	r4, r0
 8023112:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023116:	b33b      	cbz	r3, 8023168 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023118:	aa02      	add	r2, sp, #8
 802311a:	a903      	add	r1, sp, #12
 802311c:	f7ff ffe2 	bl	80230e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023120:	68a3      	ldr	r3, [r4, #8]
 8023122:	9e03      	ldr	r6, [sp, #12]
 8023124:	aa02      	add	r2, sp, #8
 8023126:	9f02      	ldr	r7, [sp, #8]
 8023128:	a903      	add	r1, sp, #12
 802312a:	1af6      	subs	r6, r6, r3
 802312c:	68e3      	ldr	r3, [r4, #12]
 802312e:	4620      	mov	r0, r4
 8023130:	1aff      	subs	r7, r7, r3
 8023132:	f104 0314 	add.w	r3, r4, #20
 8023136:	9603      	str	r6, [sp, #12]
 8023138:	9300      	str	r3, [sp, #0]
 802313a:	f104 0310 	add.w	r3, r4, #16
 802313e:	9702      	str	r7, [sp, #8]
 8023140:	f7ff ffb8 	bl	80230b4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023144:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8023148:	4605      	mov	r5, r0
 802314a:	b97b      	cbnz	r3, 802316c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802314c:	463a      	mov	r2, r7
 802314e:	4631      	mov	r1, r6
 8023150:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023154:	f7ff fe7a 	bl	8022e4c <_ZN8touchgfx10Rasterizer6lineToEii>
 8023158:	9b03      	ldr	r3, [sp, #12]
 802315a:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802315e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8023162:	9b02      	ldr	r3, [sp, #8]
 8023164:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8023168:	b005      	add	sp, #20
 802316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802316c:	b110      	cbz	r0, 8023174 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802316e:	ea13 0200 	ands.w	r2, r3, r0
 8023172:	d11c      	bne.n	80231ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023174:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8023178:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 802317c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8023180:	b188      	cbz	r0, 80231a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8023182:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8023186:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802318a:	b913      	cbnz	r3, 8023192 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802318c:	4630      	mov	r0, r6
 802318e:	f001 f806 	bl	802419e <_ZN8touchgfx7Outline6moveToEii>
 8023192:	2300      	movs	r3, #0
 8023194:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023198:	2301      	movs	r3, #1
 802319a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802319e:	4630      	mov	r0, r6
 80231a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80231a4:	e7d6      	b.n	8023154 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80231a6:	4630      	mov	r0, r6
 80231a8:	f7ff fe50 	bl	8022e4c <_ZN8touchgfx10Rasterizer6lineToEii>
 80231ac:	e7f7      	b.n	802319e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80231ae:	4615      	mov	r5, r2
 80231b0:	e7d2      	b.n	8023158 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080231b2 <_ZN8touchgfx6Canvas5closeEv>:
 80231b2:	b538      	push	{r3, r4, r5, lr}
 80231b4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80231b8:	4604      	mov	r4, r0
 80231ba:	b993      	cbnz	r3, 80231e2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80231bc:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80231c0:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80231c4:	4213      	tst	r3, r2
 80231c6:	d10c      	bne.n	80231e2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80231c8:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80231cc:	b123      	cbz	r3, 80231d8 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80231ce:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80231d2:	4628      	mov	r0, r5
 80231d4:	f7ff fe3a 	bl	8022e4c <_ZN8touchgfx10Rasterizer6lineToEii>
 80231d8:	4628      	mov	r0, r5
 80231da:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80231de:	f7ff fe35 	bl	8022e4c <_ZN8touchgfx10Rasterizer6lineToEii>
 80231e2:	2300      	movs	r3, #0
 80231e4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80231e8:	bd38      	pop	{r3, r4, r5, pc}

080231ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80231ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231ec:	b085      	sub	sp, #20
 80231ee:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80231f2:	4604      	mov	r4, r0
 80231f4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80231f8:	b353      	cbz	r3, 8023250 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80231fa:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80231fe:	b90b      	cbnz	r3, 8023204 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8023200:	f7ff ffd7 	bl	80231b2 <_ZN8touchgfx6Canvas5closeEv>
 8023204:	aa02      	add	r2, sp, #8
 8023206:	a903      	add	r1, sp, #12
 8023208:	4620      	mov	r0, r4
 802320a:	f7ff ff6b 	bl	80230e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802320e:	68a3      	ldr	r3, [r4, #8]
 8023210:	9d03      	ldr	r5, [sp, #12]
 8023212:	aa02      	add	r2, sp, #8
 8023214:	9e02      	ldr	r6, [sp, #8]
 8023216:	a903      	add	r1, sp, #12
 8023218:	1aed      	subs	r5, r5, r3
 802321a:	68e3      	ldr	r3, [r4, #12]
 802321c:	4620      	mov	r0, r4
 802321e:	1af6      	subs	r6, r6, r3
 8023220:	f104 0314 	add.w	r3, r4, #20
 8023224:	9503      	str	r5, [sp, #12]
 8023226:	9300      	str	r3, [sp, #0]
 8023228:	f104 0310 	add.w	r3, r4, #16
 802322c:	9602      	str	r6, [sp, #8]
 802322e:	f7ff ff41 	bl	80230b4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023232:	4607      	mov	r7, r0
 8023234:	b170      	cbz	r0, 8023254 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8023236:	2301      	movs	r3, #1
 8023238:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802323c:	9a03      	ldr	r2, [sp, #12]
 802323e:	9b02      	ldr	r3, [sp, #8]
 8023240:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8023244:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8023248:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 802324c:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8023250:	b005      	add	sp, #20
 8023252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023254:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023258:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 802325c:	b92b      	cbnz	r3, 802326a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802325e:	4632      	mov	r2, r6
 8023260:	4629      	mov	r1, r5
 8023262:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023266:	f000 ff9a 	bl	802419e <_ZN8touchgfx7Outline6moveToEii>
 802326a:	2300      	movs	r3, #0
 802326c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023270:	2301      	movs	r3, #1
 8023272:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023276:	e7e1      	b.n	802323c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08023278 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8023278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802327c:	4604      	mov	r4, r0
 802327e:	b087      	sub	sp, #28
 8023280:	9105      	str	r1, [sp, #20]
 8023282:	f001 f8d0 	bl	8024426 <_ZN8touchgfx7Outline8getCellsEv>
 8023286:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802328a:	4605      	mov	r5, r0
 802328c:	f1b9 0f00 	cmp.w	r9, #0
 8023290:	d103      	bne.n	802329a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8023292:	2001      	movs	r0, #1
 8023294:	b007      	add	sp, #28
 8023296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802329a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802329e:	2e00      	cmp	r6, #0
 80232a0:	d139      	bne.n	8023316 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80232a2:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80232a6:	f105 0708 	add.w	r7, r5, #8
 80232aa:	4640      	mov	r0, r8
 80232ac:	f001 f8fd 	bl	80244aa <_ZN8touchgfx8Scanline5resetEv>
 80232b0:	f109 33ff 	add.w	r3, r9, #4294967295
 80232b4:	9303      	str	r3, [sp, #12]
 80232b6:	f9b5 b000 	ldrsh.w	fp, [r5]
 80232ba:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80232be:	46da      	mov	sl, fp
 80232c0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80232c4:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80232c8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80232cc:	9b03      	ldr	r3, [sp, #12]
 80232ce:	4416      	add	r6, r2
 80232d0:	9504      	str	r5, [sp, #16]
 80232d2:	463d      	mov	r5, r7
 80232d4:	3b01      	subs	r3, #1
 80232d6:	9303      	str	r3, [sp, #12]
 80232d8:	3301      	adds	r3, #1
 80232da:	d01e      	beq.n	802331a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80232dc:	3708      	adds	r7, #8
 80232de:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80232e2:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80232e6:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80232ea:	4290      	cmp	r0, r2
 80232ec:	d11e      	bne.n	802332c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80232ee:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80232f2:	4411      	add	r1, r2
 80232f4:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80232f8:	e7e8      	b.n	80232cc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80232fa:	1c91      	adds	r1, r2, #2
 80232fc:	f04f 0301 	mov.w	r3, #1
 8023300:	65e1      	str	r1, [r4, #92]	; 0x5c
 8023302:	8053      	strh	r3, [r2, #2]
 8023304:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023306:	1c91      	adds	r1, r2, #2
 8023308:	65a1      	str	r1, [r4, #88]	; 0x58
 802330a:	f8a2 b002 	strh.w	fp, [r2, #2]
 802330e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023310:	3201      	adds	r2, #1
 8023312:	6562      	str	r2, [r4, #84]	; 0x54
 8023314:	e03a      	b.n	802338c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023316:	2000      	movs	r0, #0
 8023318:	e7bc      	b.n	8023294 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802331a:	b951      	cbnz	r1, 8023332 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802331c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802331e:	2b00      	cmp	r3, #0
 8023320:	d0b7      	beq.n	8023292 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023322:	4641      	mov	r1, r8
 8023324:	9805      	ldr	r0, [sp, #20]
 8023326:	f7ff fd5b 	bl	8022de0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802332a:	e7b2      	b.n	8023292 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802332c:	2900      	cmp	r1, #0
 802332e:	d035      	beq.n	802339c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023330:	9504      	str	r5, [sp, #16]
 8023332:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8023336:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802333a:	f7ff fd3d 	bl	8022db8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802333e:	4605      	mov	r5, r0
 8023340:	b330      	cbz	r0, 8023390 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023342:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023344:	b182      	cbz	r2, 8023368 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023346:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023348:	454a      	cmp	r2, r9
 802334a:	d00d      	beq.n	8023368 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802334c:	4641      	mov	r1, r8
 802334e:	9805      	ldr	r0, [sp, #20]
 8023350:	f7ff fd46 	bl	8022de0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023354:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023358:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802335a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802335e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023360:	2300      	movs	r3, #0
 8023362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023364:	6563      	str	r3, [r4, #84]	; 0x54
 8023366:	65a2      	str	r2, [r4, #88]	; 0x58
 8023368:	f1bb 0f00 	cmp.w	fp, #0
 802336c:	db10      	blt.n	8023390 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802336e:	f7f4 f993 	bl	8017698 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023372:	4583      	cmp	fp, r0
 8023374:	d20c      	bcs.n	8023390 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023376:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023378:	f802 500b 	strb.w	r5, [r2, fp]
 802337c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802337e:	3201      	adds	r2, #1
 8023380:	455a      	cmp	r2, fp
 8023382:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8023384:	d1b9      	bne.n	80232fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8023386:	8811      	ldrh	r1, [r2, #0]
 8023388:	3101      	adds	r1, #1
 802338a:	8011      	strh	r1, [r2, #0]
 802338c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8023390:	9b03      	ldr	r3, [sp, #12]
 8023392:	3301      	adds	r3, #1
 8023394:	d0c2      	beq.n	802331c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8023396:	f10b 0a01 	add.w	sl, fp, #1
 802339a:	9d04      	ldr	r5, [sp, #16]
 802339c:	f9b5 3000 	ldrsh.w	r3, [r5]
 80233a0:	4553      	cmp	r3, sl
 80233a2:	dd88      	ble.n	80232b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80233a4:	01b1      	lsls	r1, r6, #6
 80233a6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80233aa:	f7ff fd05 	bl	8022db8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80233ae:	4683      	mov	fp, r0
 80233b0:	2800      	cmp	r0, #0
 80233b2:	d080      	beq.n	80232b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80233b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80233b6:	b183      	cbz	r3, 80233da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80233b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80233ba:	454b      	cmp	r3, r9
 80233bc:	d00d      	beq.n	80233da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80233be:	4641      	mov	r1, r8
 80233c0:	9805      	ldr	r0, [sp, #20]
 80233c2:	f7ff fd0d 	bl	8022de0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80233c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80233ca:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80233ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80233d0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80233d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80233d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80233d6:	2300      	movs	r3, #0
 80233d8:	6563      	str	r3, [r4, #84]	; 0x54
 80233da:	f9b5 3000 	ldrsh.w	r3, [r5]
 80233de:	464a      	mov	r2, r9
 80233e0:	f8cd b000 	str.w	fp, [sp]
 80233e4:	4651      	mov	r1, sl
 80233e6:	eba3 030a 	sub.w	r3, r3, sl
 80233ea:	4640      	mov	r0, r8
 80233ec:	f001 f884 	bl	80244f8 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80233f0:	e761      	b.n	80232b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080233f2 <_ZN8touchgfx6Canvas6renderEv>:
 80233f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80233f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80233f8:	4604      	mov	r4, r0
 80233fa:	b913      	cbnz	r3, 8023402 <_ZN8touchgfx6Canvas6renderEv+0x10>
 80233fc:	2001      	movs	r0, #1
 80233fe:	b003      	add	sp, #12
 8023400:	bd30      	pop	{r4, r5, pc}
 8023402:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8023406:	2b00      	cmp	r3, #0
 8023408:	d131      	bne.n	802346e <_ZN8touchgfx6Canvas6renderEv+0x7c>
 802340a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802340e:	2b00      	cmp	r3, #0
 8023410:	d0f4      	beq.n	80233fc <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023412:	6840      	ldr	r0, [r0, #4]
 8023414:	6803      	ldr	r3, [r0, #0]
 8023416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023418:	4798      	blx	r3
 802341a:	2800      	cmp	r0, #0
 802341c:	d0ee      	beq.n	80233fc <_ZN8touchgfx6Canvas6renderEv+0xa>
 802341e:	4620      	mov	r0, r4
 8023420:	f7ff fec7 	bl	80231b2 <_ZN8touchgfx6Canvas5closeEv>
 8023424:	6860      	ldr	r0, [r4, #4]
 8023426:	6803      	ldr	r3, [r0, #0]
 8023428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802342a:	4798      	blx	r3
 802342c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8023430:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8023434:	f7f3 f8c9 	bl	80165ca <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023438:	6860      	ldr	r0, [r4, #4]
 802343a:	6803      	ldr	r3, [r0, #0]
 802343c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802343e:	4798      	blx	r3
 8023440:	4605      	mov	r5, r0
 8023442:	6860      	ldr	r0, [r4, #4]
 8023444:	6803      	ldr	r3, [r0, #0]
 8023446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023448:	4798      	blx	r3
 802344a:	4601      	mov	r1, r0
 802344c:	4628      	mov	r0, r5
 802344e:	f7f3 f8bf 	bl	80165d0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8023452:	6860      	ldr	r0, [r4, #4]
 8023454:	6803      	ldr	r3, [r0, #0]
 8023456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023458:	4798      	blx	r3
 802345a:	f104 0318 	add.w	r3, r4, #24
 802345e:	4669      	mov	r1, sp
 8023460:	e9cd 3000 	strd	r3, r0, [sp]
 8023464:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023468:	f7ff ff06 	bl	8023278 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802346c:	e7c7      	b.n	80233fe <_ZN8touchgfx6Canvas6renderEv+0xc>
 802346e:	2000      	movs	r0, #0
 8023470:	e7c5      	b.n	80233fe <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023474 <_ZN8touchgfx6CanvasD1Ev>:
 8023474:	b538      	push	{r3, r4, r5, lr}
 8023476:	4605      	mov	r5, r0
 8023478:	4b08      	ldr	r3, [pc, #32]	; (802349c <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802347a:	4604      	mov	r4, r0
 802347c:	f845 3b2c 	str.w	r3, [r5], #44
 8023480:	4b07      	ldr	r3, [pc, #28]	; (80234a0 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023482:	6818      	ldr	r0, [r3, #0]
 8023484:	6803      	ldr	r3, [r0, #0]
 8023486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023488:	4798      	blx	r3
 802348a:	4628      	mov	r0, r5
 802348c:	f000 f814 	bl	80234b8 <_ZN8touchgfx7OutlineD1Ev>
 8023490:	f104 0018 	add.w	r0, r4, #24
 8023494:	f001 f870 	bl	8024578 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023498:	4620      	mov	r0, r4
 802349a:	bd38      	pop	{r3, r4, r5, pc}
 802349c:	08029724 	.word	0x08029724
 80234a0:	2000bc68 	.word	0x2000bc68

080234a4 <_ZN8touchgfx6CanvasD0Ev>:
 80234a4:	b510      	push	{r4, lr}
 80234a6:	4604      	mov	r4, r0
 80234a8:	f7ff ffe4 	bl	8023474 <_ZN8touchgfx6CanvasD1Ev>
 80234ac:	21b8      	movs	r1, #184	; 0xb8
 80234ae:	4620      	mov	r0, r4
 80234b0:	f001 f873 	bl	802459a <_ZdlPvj>
 80234b4:	4620      	mov	r0, r4
 80234b6:	bd10      	pop	{r4, pc}

080234b8 <_ZN8touchgfx7OutlineD1Ev>:
 80234b8:	4770      	bx	lr

080234ba <_ZN8touchgfx7OutlineD0Ev>:
 80234ba:	b510      	push	{r4, lr}
 80234bc:	4604      	mov	r4, r0
 80234be:	2148      	movs	r1, #72	; 0x48
 80234c0:	f001 f86b 	bl	802459a <_ZdlPvj>
 80234c4:	4620      	mov	r0, r4
 80234c6:	bd10      	pop	{r4, pc}

080234c8 <_ZN8touchgfx7Outline5resetEv>:
 80234c8:	b510      	push	{r4, lr}
 80234ca:	4604      	mov	r4, r0
 80234cc:	f7f4 f8fc 	bl	80176c8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80234d0:	60e0      	str	r0, [r4, #12]
 80234d2:	f7f4 f8ff 	bl	80176d4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80234d6:	68e3      	ldr	r3, [r4, #12]
 80234d8:	2200      	movs	r2, #0
 80234da:	08c0      	lsrs	r0, r0, #3
 80234dc:	6123      	str	r3, [r4, #16]
 80234de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80234e2:	6060      	str	r0, [r4, #4]
 80234e4:	82a3      	strh	r3, [r4, #20]
 80234e6:	82e3      	strh	r3, [r4, #22]
 80234e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80234ea:	60a2      	str	r2, [r4, #8]
 80234ec:	f023 0301 	bic.w	r3, r3, #1
 80234f0:	8322      	strh	r2, [r4, #24]
 80234f2:	8362      	strh	r2, [r4, #26]
 80234f4:	f043 0302 	orr.w	r3, r3, #2
 80234f8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80234fc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80234fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023502:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023506:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802350a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802350e:	bd10      	pop	{r4, pc}

08023510 <_ZN8touchgfx7OutlineC1Ev>:
 8023510:	4b0f      	ldr	r3, [pc, #60]	; (8023550 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023512:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023516:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802351a:	b510      	push	{r4, lr}
 802351c:	6003      	str	r3, [r0, #0]
 802351e:	2300      	movs	r3, #0
 8023520:	4604      	mov	r4, r0
 8023522:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023526:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802352a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802352e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023532:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023536:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802353a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802353e:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023542:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023546:	f7ff ffbf 	bl	80234c8 <_ZN8touchgfx7Outline5resetEv>
 802354a:	4620      	mov	r0, r4
 802354c:	bd10      	pop	{r4, pc}
 802354e:	bf00      	nop
 8023550:	08029784 	.word	0x08029784

08023554 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023558:	b093      	sub	sp, #76	; 0x4c
 802355a:	4604      	mov	r4, r0
 802355c:	1156      	asrs	r6, r2, #5
 802355e:	f002 0e1f 	and.w	lr, r2, #31
 8023562:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023564:	9305      	str	r3, [sp, #20]
 8023566:	1143      	asrs	r3, r0, #5
 8023568:	1145      	asrs	r5, r0, #5
 802356a:	930c      	str	r3, [sp, #48]	; 0x30
 802356c:	f000 031f 	and.w	r3, r0, #31
 8023570:	9303      	str	r3, [sp, #12]
 8023572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023574:	42b3      	cmp	r3, r6
 8023576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023578:	bfc8      	it	gt
 802357a:	6326      	strgt	r6, [r4, #48]	; 0x30
 802357c:	42b3      	cmp	r3, r6
 802357e:	bfdc      	itt	le
 8023580:	1c73      	addle	r3, r6, #1
 8023582:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023584:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023586:	42ab      	cmp	r3, r5
 8023588:	bfc8      	it	gt
 802358a:	462b      	movgt	r3, r5
 802358c:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023590:	bfc8      	it	gt
 8023592:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023594:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023596:	42ab      	cmp	r3, r5
 8023598:	bfd8      	it	le
 802359a:	462b      	movle	r3, r5
 802359c:	ea4f 1561 	mov.w	r5, r1, asr #5
 80235a0:	bfdc      	itt	le
 80235a2:	3301      	addle	r3, #1
 80235a4:	63a3      	strle	r3, [r4, #56]	; 0x38
 80235a6:	9b05      	ldr	r3, [sp, #20]
 80235a8:	eba3 0a01 	sub.w	sl, r3, r1
 80235ac:	1143      	asrs	r3, r0, #5
 80235ae:	429e      	cmp	r6, r3
 80235b0:	f040 8119 	bne.w	80237e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80235b4:	9b05      	ldr	r3, [sp, #20]
 80235b6:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80235ba:	9b03      	ldr	r3, [sp, #12]
 80235bc:	459e      	cmp	lr, r3
 80235be:	d12c      	bne.n	802361a <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80235c0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80235c4:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80235c8:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80235cc:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80235d0:	4291      	cmp	r1, r2
 80235d2:	d037      	beq.n	8023644 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80235d4:	8b61      	ldrh	r1, [r4, #26]
 80235d6:	8b22      	ldrh	r2, [r4, #24]
 80235d8:	430a      	orrs	r2, r1
 80235da:	d00b      	beq.n	80235f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80235dc:	2b00      	cmp	r3, #0
 80235de:	db09      	blt.n	80235f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80235e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80235e2:	429a      	cmp	r2, r3
 80235e4:	dd06      	ble.n	80235f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80235e6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80235ea:	429a      	cmp	r2, r3
 80235ec:	d308      	bcc.n	8023600 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80235ee:	2301      	movs	r3, #1
 80235f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80235f4:	f8a4 c014 	strh.w	ip, [r4, #20]
 80235f8:	82e6      	strh	r6, [r4, #22]
 80235fa:	2300      	movs	r3, #0
 80235fc:	8323      	strh	r3, [r4, #24]
 80235fe:	e0c6      	b.n	802378e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023600:	f104 0314 	add.w	r3, r4, #20
 8023604:	6922      	ldr	r2, [r4, #16]
 8023606:	cb03      	ldmia	r3!, {r0, r1}
 8023608:	6010      	str	r0, [r2, #0]
 802360a:	6051      	str	r1, [r2, #4]
 802360c:	6923      	ldr	r3, [r4, #16]
 802360e:	3308      	adds	r3, #8
 8023610:	6123      	str	r3, [r4, #16]
 8023612:	68a3      	ldr	r3, [r4, #8]
 8023614:	3301      	adds	r3, #1
 8023616:	60a3      	str	r3, [r4, #8]
 8023618:	e7ec      	b.n	80235f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802361a:	9b05      	ldr	r3, [sp, #20]
 802361c:	45ac      	cmp	ip, r5
 802361e:	f001 011f 	and.w	r1, r1, #31
 8023622:	8b20      	ldrh	r0, [r4, #24]
 8023624:	f003 031f 	and.w	r3, r3, #31
 8023628:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 802362c:	9304      	str	r3, [sp, #16]
 802362e:	9b03      	ldr	r3, [sp, #12]
 8023630:	eba3 020e 	sub.w	r2, r3, lr
 8023634:	d109      	bne.n	802364a <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023636:	9b04      	ldr	r3, [sp, #16]
 8023638:	4410      	add	r0, r2
 802363a:	4419      	add	r1, r3
 802363c:	8320      	strh	r0, [r4, #24]
 802363e:	fb02 8201 	mla	r2, r2, r1, r8
 8023642:	8362      	strh	r2, [r4, #26]
 8023644:	b013      	add	sp, #76	; 0x4c
 8023646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802364a:	f1ba 0f00 	cmp.w	sl, #0
 802364e:	f2c0 80a0 	blt.w	8023792 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8023652:	f1c1 0320 	rsb	r3, r1, #32
 8023656:	f04f 0b20 	mov.w	fp, #32
 802365a:	435a      	muls	r2, r3
 802365c:	2301      	movs	r3, #1
 802365e:	9302      	str	r3, [sp, #8]
 8023660:	4459      	add	r1, fp
 8023662:	fb92 f7fa 	sdiv	r7, r2, sl
 8023666:	fb0a 2217 	mls	r2, sl, r7, r2
 802366a:	2a00      	cmp	r2, #0
 802366c:	bfbc      	itt	lt
 802366e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023672:	4452      	addlt	r2, sl
 8023674:	fb07 8101 	mla	r1, r7, r1, r8
 8023678:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802367c:	4438      	add	r0, r7
 802367e:	b20b      	sxth	r3, r1
 8023680:	9902      	ldr	r1, [sp, #8]
 8023682:	b200      	sxth	r0, r0
 8023684:	9301      	str	r3, [sp, #4]
 8023686:	8363      	strh	r3, [r4, #26]
 8023688:	186b      	adds	r3, r5, r1
 802368a:	0435      	lsls	r5, r6, #16
 802368c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023690:	8320      	strh	r0, [r4, #24]
 8023692:	eb03 0905 	add.w	r9, r3, r5
 8023696:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802369a:	9300      	str	r3, [sp, #0]
 802369c:	45c1      	cmp	r9, r8
 802369e:	9505      	str	r5, [sp, #20]
 80236a0:	d014      	beq.n	80236cc <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80236a2:	9b01      	ldr	r3, [sp, #4]
 80236a4:	4303      	orrs	r3, r0
 80236a6:	d00b      	beq.n	80236c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80236a8:	2900      	cmp	r1, #0
 80236aa:	db09      	blt.n	80236c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80236ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80236ae:	428b      	cmp	r3, r1
 80236b0:	dd06      	ble.n	80236c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80236b2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80236b6:	4299      	cmp	r1, r3
 80236b8:	d374      	bcc.n	80237a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80236ba:	2301      	movs	r3, #1
 80236bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80236c0:	9b00      	ldr	r3, [sp, #0]
 80236c2:	82e6      	strh	r6, [r4, #22]
 80236c4:	82a3      	strh	r3, [r4, #20]
 80236c6:	2300      	movs	r3, #0
 80236c8:	8323      	strh	r3, [r4, #24]
 80236ca:	8363      	strh	r3, [r4, #26]
 80236cc:	9900      	ldr	r1, [sp, #0]
 80236ce:	eb0e 0307 	add.w	r3, lr, r7
 80236d2:	458c      	cmp	ip, r1
 80236d4:	d04e      	beq.n	8023774 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80236d6:	9903      	ldr	r1, [sp, #12]
 80236d8:	eba2 020a 	sub.w	r2, r2, sl
 80236dc:	1ac9      	subs	r1, r1, r3
 80236de:	9201      	str	r2, [sp, #4]
 80236e0:	440f      	add	r7, r1
 80236e2:	017f      	lsls	r7, r7, #5
 80236e4:	fb97 fefa 	sdiv	lr, r7, sl
 80236e8:	fb0a 771e 	mls	r7, sl, lr, r7
 80236ec:	2f00      	cmp	r7, #0
 80236ee:	bfbc      	itt	lt
 80236f0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80236f4:	4457      	addlt	r7, sl
 80236f6:	f10e 0101 	add.w	r1, lr, #1
 80236fa:	9106      	str	r1, [sp, #24]
 80236fc:	9a01      	ldr	r2, [sp, #4]
 80236fe:	8b20      	ldrh	r0, [r4, #24]
 8023700:	19d2      	adds	r2, r2, r7
 8023702:	8b61      	ldrh	r1, [r4, #26]
 8023704:	9d02      	ldr	r5, [sp, #8]
 8023706:	9201      	str	r2, [sp, #4]
 8023708:	bf5b      	ittet	pl
 802370a:	eba2 020a 	subpl.w	r2, r2, sl
 802370e:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8023712:	46f0      	movmi	r8, lr
 8023714:	9201      	strpl	r2, [sp, #4]
 8023716:	9a00      	ldr	r2, [sp, #0]
 8023718:	4440      	add	r0, r8
 802371a:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802371e:	4443      	add	r3, r8
 8023720:	442a      	add	r2, r5
 8023722:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023726:	9d05      	ldr	r5, [sp, #20]
 8023728:	b200      	sxth	r0, r0
 802372a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802372e:	b209      	sxth	r1, r1
 8023730:	4415      	add	r5, r2
 8023732:	8320      	strh	r0, [r4, #24]
 8023734:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023738:	8361      	strh	r1, [r4, #26]
 802373a:	9200      	str	r2, [sp, #0]
 802373c:	454d      	cmp	r5, r9
 802373e:	d016      	beq.n	802376e <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8023740:	4301      	orrs	r1, r0
 8023742:	d00d      	beq.n	8023760 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023744:	f1b8 0f00 	cmp.w	r8, #0
 8023748:	db0a      	blt.n	8023760 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802374a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802374c:	4541      	cmp	r1, r8
 802374e:	dd07      	ble.n	8023760 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023750:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023754:	4288      	cmp	r0, r1
 8023756:	d335      	bcc.n	80237c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023758:	f04f 0101 	mov.w	r1, #1
 802375c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023760:	9900      	ldr	r1, [sp, #0]
 8023762:	82e6      	strh	r6, [r4, #22]
 8023764:	82a1      	strh	r1, [r4, #20]
 8023766:	f04f 0100 	mov.w	r1, #0
 802376a:	8321      	strh	r1, [r4, #24]
 802376c:	8361      	strh	r1, [r4, #26]
 802376e:	9a00      	ldr	r2, [sp, #0]
 8023770:	4594      	cmp	ip, r2
 8023772:	d1c3      	bne.n	80236fc <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8023774:	9a03      	ldr	r2, [sp, #12]
 8023776:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802377a:	1ad3      	subs	r3, r2, r3
 802377c:	8b22      	ldrh	r2, [r4, #24]
 802377e:	441a      	add	r2, r3
 8023780:	8322      	strh	r2, [r4, #24]
 8023782:	9a04      	ldr	r2, [sp, #16]
 8023784:	3220      	adds	r2, #32
 8023786:	eba2 020b 	sub.w	r2, r2, fp
 802378a:	fb03 c302 	mla	r3, r3, r2, ip
 802378e:	8363      	strh	r3, [r4, #26]
 8023790:	e758      	b.n	8023644 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023792:	f04f 33ff 	mov.w	r3, #4294967295
 8023796:	434a      	muls	r2, r1
 8023798:	f1ca 0a00 	rsb	sl, sl, #0
 802379c:	f04f 0b00 	mov.w	fp, #0
 80237a0:	9302      	str	r3, [sp, #8]
 80237a2:	e75d      	b.n	8023660 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80237a4:	f104 0314 	add.w	r3, r4, #20
 80237a8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80237ac:	cb03      	ldmia	r3!, {r0, r1}
 80237ae:	f8c8 0000 	str.w	r0, [r8]
 80237b2:	f8c8 1004 	str.w	r1, [r8, #4]
 80237b6:	6923      	ldr	r3, [r4, #16]
 80237b8:	3308      	adds	r3, #8
 80237ba:	6123      	str	r3, [r4, #16]
 80237bc:	68a3      	ldr	r3, [r4, #8]
 80237be:	3301      	adds	r3, #1
 80237c0:	60a3      	str	r3, [r4, #8]
 80237c2:	e77d      	b.n	80236c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80237c4:	f104 0814 	add.w	r8, r4, #20
 80237c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80237cc:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80237d0:	f8c9 0000 	str.w	r0, [r9]
 80237d4:	f8c9 1004 	str.w	r1, [r9, #4]
 80237d8:	6921      	ldr	r1, [r4, #16]
 80237da:	3108      	adds	r1, #8
 80237dc:	6121      	str	r1, [r4, #16]
 80237de:	68a1      	ldr	r1, [r4, #8]
 80237e0:	3101      	adds	r1, #1
 80237e2:	60a1      	str	r1, [r4, #8]
 80237e4:	e7bc      	b.n	8023760 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80237e6:	1a83      	subs	r3, r0, r2
 80237e8:	9301      	str	r3, [sp, #4]
 80237ea:	f1ba 0f00 	cmp.w	sl, #0
 80237ee:	f040 8094 	bne.w	802391a <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80237f2:	9a01      	ldr	r2, [sp, #4]
 80237f4:	0049      	lsls	r1, r1, #1
 80237f6:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80237fa:	2a00      	cmp	r2, #0
 80237fc:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023800:	8b62      	ldrh	r2, [r4, #26]
 8023802:	bfaa      	itet	ge
 8023804:	f04f 0a20 	movge.w	sl, #32
 8023808:	f04f 38ff 	movlt.w	r8, #4294967295
 802380c:	f04f 0801 	movge.w	r8, #1
 8023810:	8b21      	ldrh	r1, [r4, #24]
 8023812:	ebaa 0e0e 	sub.w	lr, sl, lr
 8023816:	4471      	add	r1, lr
 8023818:	fb0e 2e03 	mla	lr, lr, r3, r2
 802381c:	eb08 0206 	add.w	r2, r8, r6
 8023820:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8023824:	b209      	sxth	r1, r1
 8023826:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 802382a:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 802382e:	8321      	strh	r1, [r4, #24]
 8023830:	fa0f fe8e 	sxth.w	lr, lr
 8023834:	42b7      	cmp	r7, r6
 8023836:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802383a:	d013      	beq.n	8023864 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 802383c:	ea51 010e 	orrs.w	r1, r1, lr
 8023840:	d00b      	beq.n	802385a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023842:	2800      	cmp	r0, #0
 8023844:	db09      	blt.n	802385a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023846:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023848:	4281      	cmp	r1, r0
 802384a:	dd06      	ble.n	802385a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802384c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023850:	4288      	cmp	r0, r1
 8023852:	d339      	bcc.n	80238c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8023854:	2101      	movs	r1, #1
 8023856:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802385a:	2100      	movs	r1, #0
 802385c:	82a5      	strh	r5, [r4, #20]
 802385e:	82e2      	strh	r2, [r4, #22]
 8023860:	8321      	strh	r1, [r4, #24]
 8023862:	8361      	strh	r1, [r4, #26]
 8023864:	f1aa 0610 	sub.w	r6, sl, #16
 8023868:	f04f 0e00 	mov.w	lr, #0
 802386c:	f04f 0b01 	mov.w	fp, #1
 8023870:	0076      	lsls	r6, r6, #1
 8023872:	fb06 f703 	mul.w	r7, r6, r3
 8023876:	b236      	sxth	r6, r6
 8023878:	b23f      	sxth	r7, r7
 802387a:	ea46 0107 	orr.w	r1, r6, r7
 802387e:	9100      	str	r1, [sp, #0]
 8023880:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023882:	428a      	cmp	r2, r1
 8023884:	d03e      	beq.n	8023904 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8023886:	4442      	add	r2, r8
 8023888:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802388c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023890:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8023894:	8326      	strh	r6, [r4, #24]
 8023896:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802389a:	8367      	strh	r7, [r4, #26]
 802389c:	4584      	cmp	ip, r0
 802389e:	d0ef      	beq.n	8023880 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80238a0:	9800      	ldr	r0, [sp, #0]
 80238a2:	b150      	cbz	r0, 80238ba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80238a4:	2900      	cmp	r1, #0
 80238a6:	db08      	blt.n	80238ba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80238a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80238aa:	4288      	cmp	r0, r1
 80238ac:	dd05      	ble.n	80238ba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80238ae:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80238b2:	4288      	cmp	r0, r1
 80238b4:	d315      	bcc.n	80238e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80238b6:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80238ba:	82a5      	strh	r5, [r4, #20]
 80238bc:	82e2      	strh	r2, [r4, #22]
 80238be:	f8a4 e018 	strh.w	lr, [r4, #24]
 80238c2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80238c6:	e7db      	b.n	8023880 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80238c8:	f104 0614 	add.w	r6, r4, #20
 80238cc:	6927      	ldr	r7, [r4, #16]
 80238ce:	ce03      	ldmia	r6!, {r0, r1}
 80238d0:	6038      	str	r0, [r7, #0]
 80238d2:	6079      	str	r1, [r7, #4]
 80238d4:	6921      	ldr	r1, [r4, #16]
 80238d6:	3108      	adds	r1, #8
 80238d8:	6121      	str	r1, [r4, #16]
 80238da:	68a1      	ldr	r1, [r4, #8]
 80238dc:	3101      	adds	r1, #1
 80238de:	60a1      	str	r1, [r4, #8]
 80238e0:	e7bb      	b.n	802385a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80238e2:	f104 0c14 	add.w	ip, r4, #20
 80238e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80238ea:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80238ee:	f8c9 0000 	str.w	r0, [r9]
 80238f2:	f8c9 1004 	str.w	r1, [r9, #4]
 80238f6:	6921      	ldr	r1, [r4, #16]
 80238f8:	3108      	adds	r1, #8
 80238fa:	6121      	str	r1, [r4, #16]
 80238fc:	68a1      	ldr	r1, [r4, #8]
 80238fe:	3101      	adds	r1, #1
 8023900:	60a1      	str	r1, [r4, #8]
 8023902:	e7da      	b.n	80238ba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023904:	9a03      	ldr	r2, [sp, #12]
 8023906:	8b61      	ldrh	r1, [r4, #26]
 8023908:	f1a2 0c20 	sub.w	ip, r2, #32
 802390c:	8b22      	ldrh	r2, [r4, #24]
 802390e:	44d4      	add	ip, sl
 8023910:	4462      	add	r2, ip
 8023912:	fb0c 1303 	mla	r3, ip, r3, r1
 8023916:	8322      	strh	r2, [r4, #24]
 8023918:	e739      	b.n	802378e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802391a:	9b01      	ldr	r3, [sp, #4]
 802391c:	2b00      	cmp	r3, #0
 802391e:	db3f      	blt.n	80239a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8023920:	2201      	movs	r2, #1
 8023922:	f1ce 0320 	rsb	r3, lr, #32
 8023926:	920b      	str	r2, [sp, #44]	; 0x2c
 8023928:	2220      	movs	r2, #32
 802392a:	fb0a f303 	mul.w	r3, sl, r3
 802392e:	9202      	str	r2, [sp, #8]
 8023930:	9a01      	ldr	r2, [sp, #4]
 8023932:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023936:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802393a:	fb93 f7f2 	sdiv	r7, r3, r2
 802393e:	fb02 3317 	mls	r3, r2, r7, r3
 8023942:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023946:	2b00      	cmp	r3, #0
 8023948:	9308      	str	r3, [sp, #32]
 802394a:	bfbc      	itt	lt
 802394c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023950:	189b      	addlt	r3, r3, r2
 8023952:	eb07 0b01 	add.w	fp, r7, r1
 8023956:	bfb8      	it	lt
 8023958:	9308      	strlt	r3, [sp, #32]
 802395a:	ea4f 136b 	mov.w	r3, fp, asr #5
 802395e:	9304      	str	r3, [sp, #16]
 8023960:	9b02      	ldr	r3, [sp, #8]
 8023962:	4573      	cmp	r3, lr
 8023964:	d133      	bne.n	80239ce <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8023966:	9b04      	ldr	r3, [sp, #16]
 8023968:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 802396c:	454b      	cmp	r3, r9
 802396e:	d045      	beq.n	80239fc <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8023970:	8b62      	ldrh	r2, [r4, #26]
 8023972:	8b23      	ldrh	r3, [r4, #24]
 8023974:	4313      	orrs	r3, r2
 8023976:	d00c      	beq.n	8023992 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023978:	f1b8 0f00 	cmp.w	r8, #0
 802397c:	db09      	blt.n	8023992 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802397e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023980:	4543      	cmp	r3, r8
 8023982:	dd06      	ble.n	8023992 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023984:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023988:	429a      	cmp	r2, r3
 802398a:	d313      	bcc.n	80239b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 802398c:	2301      	movs	r3, #1
 802398e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023992:	9b04      	ldr	r3, [sp, #16]
 8023994:	82e6      	strh	r6, [r4, #22]
 8023996:	82a3      	strh	r3, [r4, #20]
 8023998:	2300      	movs	r3, #0
 802399a:	8323      	strh	r3, [r4, #24]
 802399c:	8363      	strh	r3, [r4, #26]
 802399e:	e02d      	b.n	80239fc <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80239a0:	9a01      	ldr	r2, [sp, #4]
 80239a2:	fb0a f30e 	mul.w	r3, sl, lr
 80239a6:	4252      	negs	r2, r2
 80239a8:	9201      	str	r2, [sp, #4]
 80239aa:	f04f 32ff 	mov.w	r2, #4294967295
 80239ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80239b0:	2200      	movs	r2, #0
 80239b2:	e7bc      	b.n	802392e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80239b4:	f104 0314 	add.w	r3, r4, #20
 80239b8:	6922      	ldr	r2, [r4, #16]
 80239ba:	cb03      	ldmia	r3!, {r0, r1}
 80239bc:	6010      	str	r0, [r2, #0]
 80239be:	6051      	str	r1, [r2, #4]
 80239c0:	6923      	ldr	r3, [r4, #16]
 80239c2:	3308      	adds	r3, #8
 80239c4:	6123      	str	r3, [r4, #16]
 80239c6:	68a3      	ldr	r3, [r4, #8]
 80239c8:	3301      	adds	r3, #1
 80239ca:	60a3      	str	r3, [r4, #8]
 80239cc:	e7e1      	b.n	8023992 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80239ce:	f00b 031f 	and.w	r3, fp, #31
 80239d2:	f001 011f 	and.w	r1, r1, #31
 80239d6:	8b20      	ldrh	r0, [r4, #24]
 80239d8:	9309      	str	r3, [sp, #36]	; 0x24
 80239da:	9b02      	ldr	r3, [sp, #8]
 80239dc:	eba3 020e 	sub.w	r2, r3, lr
 80239e0:	8b63      	ldrh	r3, [r4, #26]
 80239e2:	9300      	str	r3, [sp, #0]
 80239e4:	9b04      	ldr	r3, [sp, #16]
 80239e6:	42ab      	cmp	r3, r5
 80239e8:	f040 80ef 	bne.w	8023bca <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80239ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239ee:	4410      	add	r0, r2
 80239f0:	4419      	add	r1, r3
 80239f2:	9b00      	ldr	r3, [sp, #0]
 80239f4:	8320      	strh	r0, [r4, #24]
 80239f6:	fb02 3101 	mla	r1, r2, r1, r3
 80239fa:	8361      	strh	r1, [r4, #26]
 80239fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80239fe:	9904      	ldr	r1, [sp, #16]
 8023a00:	4433      	add	r3, r6
 8023a02:	9300      	str	r3, [sp, #0]
 8023a04:	9a00      	ldr	r2, [sp, #0]
 8023a06:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023a0a:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8023a0e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023a12:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023a16:	4288      	cmp	r0, r1
 8023a18:	d018      	beq.n	8023a4c <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8023a1a:	8b60      	ldrh	r0, [r4, #26]
 8023a1c:	8b21      	ldrh	r1, [r4, #24]
 8023a1e:	ea50 0201 	orrs.w	r2, r0, r1
 8023a22:	d00c      	beq.n	8023a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	db0a      	blt.n	8023a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023a28:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023a2a:	4299      	cmp	r1, r3
 8023a2c:	dd07      	ble.n	8023a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023a2e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023a32:	4299      	cmp	r1, r3
 8023a34:	f0c0 818b 	bcc.w	8023d4e <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8023a38:	2301      	movs	r3, #1
 8023a3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023a3e:	9b04      	ldr	r3, [sp, #16]
 8023a40:	82a3      	strh	r3, [r4, #20]
 8023a42:	9b00      	ldr	r3, [sp, #0]
 8023a44:	82e3      	strh	r3, [r4, #22]
 8023a46:	2300      	movs	r3, #0
 8023a48:	8323      	strh	r3, [r4, #24]
 8023a4a:	8363      	strh	r3, [r4, #26]
 8023a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a4e:	9a00      	ldr	r2, [sp, #0]
 8023a50:	4293      	cmp	r3, r2
 8023a52:	f000 808d 	beq.w	8023b70 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8023a56:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8023a5a:	9901      	ldr	r1, [sp, #4]
 8023a5c:	9801      	ldr	r0, [sp, #4]
 8023a5e:	fb93 f1f1 	sdiv	r1, r3, r1
 8023a62:	fb00 3311 	mls	r3, r0, r1, r3
 8023a66:	9106      	str	r1, [sp, #24]
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	9307      	str	r3, [sp, #28]
 8023a6c:	da04      	bge.n	8023a78 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8023a6e:	1e4b      	subs	r3, r1, #1
 8023a70:	9306      	str	r3, [sp, #24]
 8023a72:	9b07      	ldr	r3, [sp, #28]
 8023a74:	4403      	add	r3, r0
 8023a76:	9307      	str	r3, [sp, #28]
 8023a78:	9b08      	ldr	r3, [sp, #32]
 8023a7a:	f04f 0c00 	mov.w	ip, #0
 8023a7e:	9901      	ldr	r1, [sp, #4]
 8023a80:	1a5b      	subs	r3, r3, r1
 8023a82:	4659      	mov	r1, fp
 8023a84:	9308      	str	r3, [sp, #32]
 8023a86:	9b02      	ldr	r3, [sp, #8]
 8023a88:	f1c3 0320 	rsb	r3, r3, #32
 8023a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8023a8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023a90:	9b02      	ldr	r3, [sp, #8]
 8023a92:	1a1b      	subs	r3, r3, r0
 8023a94:	9309      	str	r3, [sp, #36]	; 0x24
 8023a96:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8023a9a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023a9e:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8023aa2:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8023aa6:	181b      	adds	r3, r3, r0
 8023aa8:	bf58      	it	pl
 8023aaa:	9801      	ldrpl	r0, [sp, #4]
 8023aac:	9308      	str	r3, [sp, #32]
 8023aae:	bf54      	ite	pl
 8023ab0:	1a1b      	subpl	r3, r3, r0
 8023ab2:	9d06      	ldrmi	r5, [sp, #24]
 8023ab4:	9802      	ldr	r0, [sp, #8]
 8023ab6:	bf5e      	ittt	pl
 8023ab8:	9308      	strpl	r3, [sp, #32]
 8023aba:	9b06      	ldrpl	r3, [sp, #24]
 8023abc:	1c5d      	addpl	r5, r3, #1
 8023abe:	44ab      	add	fp, r5
 8023ac0:	ea4f 136b 	mov.w	r3, fp, asr #5
 8023ac4:	9304      	str	r3, [sp, #16]
 8023ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ac8:	4283      	cmp	r3, r0
 8023aca:	f040 815a 	bne.w	8023d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8023ace:	9b04      	ldr	r3, [sp, #16]
 8023ad0:	9a00      	ldr	r2, [sp, #0]
 8023ad2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8023ad6:	4543      	cmp	r3, r8
 8023ad8:	d01a      	beq.n	8023b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023ada:	8b61      	ldrh	r1, [r4, #26]
 8023adc:	8b23      	ldrh	r3, [r4, #24]
 8023ade:	430b      	orrs	r3, r1
 8023ae0:	d00e      	beq.n	8023b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023ae2:	f1be 0f00 	cmp.w	lr, #0
 8023ae6:	db0b      	blt.n	8023b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023ae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023aea:	4573      	cmp	r3, lr
 8023aec:	dd08      	ble.n	8023b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023aee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023af2:	4299      	cmp	r1, r3
 8023af4:	f0c0 8138 	bcc.w	8023d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8023af8:	f04f 0301 	mov.w	r3, #1
 8023afc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023b00:	9b04      	ldr	r3, [sp, #16]
 8023b02:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023b06:	82a3      	strh	r3, [r4, #20]
 8023b08:	9b00      	ldr	r3, [sp, #0]
 8023b0a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023b0e:	82e3      	strh	r3, [r4, #22]
 8023b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b12:	9a00      	ldr	r2, [sp, #0]
 8023b14:	441a      	add	r2, r3
 8023b16:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023b1a:	9200      	str	r2, [sp, #0]
 8023b1c:	9900      	ldr	r1, [sp, #0]
 8023b1e:	9a04      	ldr	r2, [sp, #16]
 8023b20:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8023b24:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023b28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023b2c:	4288      	cmp	r0, r1
 8023b2e:	d01a      	beq.n	8023b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8023b30:	8b60      	ldrh	r0, [r4, #26]
 8023b32:	8b21      	ldrh	r1, [r4, #24]
 8023b34:	ea50 0201 	orrs.w	r2, r0, r1
 8023b38:	d00d      	beq.n	8023b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	db0b      	blt.n	8023b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023b3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023b40:	4299      	cmp	r1, r3
 8023b42:	dd08      	ble.n	8023b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023b44:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023b48:	4299      	cmp	r1, r3
 8023b4a:	f0c0 81f9 	bcc.w	8023f40 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8023b4e:	f04f 0301 	mov.w	r3, #1
 8023b52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023b56:	9b04      	ldr	r3, [sp, #16]
 8023b58:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023b5c:	82a3      	strh	r3, [r4, #20]
 8023b5e:	9b00      	ldr	r3, [sp, #0]
 8023b60:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023b64:	82e3      	strh	r3, [r4, #22]
 8023b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b68:	4659      	mov	r1, fp
 8023b6a:	9a00      	ldr	r2, [sp, #0]
 8023b6c:	4293      	cmp	r3, r2
 8023b6e:	d192      	bne.n	8023a96 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8023b70:	9b02      	ldr	r3, [sp, #8]
 8023b72:	f1c3 0c20 	rsb	ip, r3, #32
 8023b76:	9b05      	ldr	r3, [sp, #20]
 8023b78:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8023b7c:	9b03      	ldr	r3, [sp, #12]
 8023b7e:	459c      	cmp	ip, r3
 8023b80:	f040 81f8 	bne.w	8023f74 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8023b84:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023b88:	9a00      	ldr	r2, [sp, #0]
 8023b8a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023b8e:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8023b92:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023b96:	4288      	cmp	r0, r1
 8023b98:	f43f ad54 	beq.w	8023644 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023b9c:	8b60      	ldrh	r0, [r4, #26]
 8023b9e:	8b21      	ldrh	r1, [r4, #24]
 8023ba0:	ea50 0201 	orrs.w	r2, r0, r1
 8023ba4:	d00c      	beq.n	8023bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023ba6:	2b00      	cmp	r3, #0
 8023ba8:	db0a      	blt.n	8023bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023baa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023bac:	4299      	cmp	r1, r3
 8023bae:	dd07      	ble.n	8023bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023bb0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023bb4:	4299      	cmp	r1, r3
 8023bb6:	f0c0 81d0 	bcc.w	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8023bba:	2301      	movs	r3, #1
 8023bbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023bc0:	9b00      	ldr	r3, [sp, #0]
 8023bc2:	f8a4 e014 	strh.w	lr, [r4, #20]
 8023bc6:	82e3      	strh	r3, [r4, #22]
 8023bc8:	e517      	b.n	80235fa <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8023bca:	2f00      	cmp	r7, #0
 8023bcc:	f2c0 8097 	blt.w	8023cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8023bd0:	2301      	movs	r3, #1
 8023bd2:	f1c1 0c20 	rsb	ip, r1, #32
 8023bd6:	9307      	str	r3, [sp, #28]
 8023bd8:	2320      	movs	r3, #32
 8023bda:	fb02 f20c 	mul.w	r2, r2, ip
 8023bde:	9306      	str	r3, [sp, #24]
 8023be0:	9b06      	ldr	r3, [sp, #24]
 8023be2:	fb92 fcf7 	sdiv	ip, r2, r7
 8023be6:	fb07 221c 	mls	r2, r7, ip, r2
 8023bea:	4419      	add	r1, r3
 8023bec:	9b00      	ldr	r3, [sp, #0]
 8023bee:	2a00      	cmp	r2, #0
 8023bf0:	bfbc      	itt	lt
 8023bf2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8023bf6:	19d2      	addlt	r2, r2, r7
 8023bf8:	fb0c 3101 	mla	r1, ip, r1, r3
 8023bfc:	9b07      	ldr	r3, [sp, #28]
 8023bfe:	4460      	add	r0, ip
 8023c00:	441d      	add	r5, r3
 8023c02:	0433      	lsls	r3, r6, #16
 8023c04:	b200      	sxth	r0, r0
 8023c06:	930a      	str	r3, [sp, #40]	; 0x28
 8023c08:	18eb      	adds	r3, r5, r3
 8023c0a:	b209      	sxth	r1, r1
 8023c0c:	8320      	strh	r0, [r4, #24]
 8023c0e:	454b      	cmp	r3, r9
 8023c10:	8361      	strh	r1, [r4, #26]
 8023c12:	d014      	beq.n	8023c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8023c14:	ea50 0301 	orrs.w	r3, r0, r1
 8023c18:	d00c      	beq.n	8023c34 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023c1a:	f1b8 0f00 	cmp.w	r8, #0
 8023c1e:	db09      	blt.n	8023c34 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023c22:	4543      	cmp	r3, r8
 8023c24:	dd06      	ble.n	8023c34 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023c26:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023c2a:	4299      	cmp	r1, r3
 8023c2c:	d36e      	bcc.n	8023d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8023c2e:	2301      	movs	r3, #1
 8023c30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023c34:	2300      	movs	r3, #0
 8023c36:	82a5      	strh	r5, [r4, #20]
 8023c38:	82e6      	strh	r6, [r4, #22]
 8023c3a:	8323      	strh	r3, [r4, #24]
 8023c3c:	8363      	strh	r3, [r4, #26]
 8023c3e:	9904      	ldr	r1, [sp, #16]
 8023c40:	eb0e 030c 	add.w	r3, lr, ip
 8023c44:	42a9      	cmp	r1, r5
 8023c46:	d04d      	beq.n	8023ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8023c48:	9902      	ldr	r1, [sp, #8]
 8023c4a:	1bd2      	subs	r2, r2, r7
 8023c4c:	1ac9      	subs	r1, r1, r3
 8023c4e:	9200      	str	r2, [sp, #0]
 8023c50:	448c      	add	ip, r1
 8023c52:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8023c56:	fb9c fef7 	sdiv	lr, ip, r7
 8023c5a:	fb07 cc1e 	mls	ip, r7, lr, ip
 8023c5e:	f1bc 0f00 	cmp.w	ip, #0
 8023c62:	bfbc      	itt	lt
 8023c64:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023c68:	44bc      	addlt	ip, r7
 8023c6a:	f10e 0101 	add.w	r1, lr, #1
 8023c6e:	910d      	str	r1, [sp, #52]	; 0x34
 8023c70:	9a00      	ldr	r2, [sp, #0]
 8023c72:	8b20      	ldrh	r0, [r4, #24]
 8023c74:	eb12 020c 	adds.w	r2, r2, ip
 8023c78:	8b61      	ldrh	r1, [r4, #26]
 8023c7a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023c7e:	9200      	str	r2, [sp, #0]
 8023c80:	bf5b      	ittet	pl
 8023c82:	1bd2      	subpl	r2, r2, r7
 8023c84:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8023c88:	46f0      	movmi	r8, lr
 8023c8a:	9200      	strpl	r2, [sp, #0]
 8023c8c:	9a07      	ldr	r2, [sp, #28]
 8023c8e:	4440      	add	r0, r8
 8023c90:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023c94:	4443      	add	r3, r8
 8023c96:	4415      	add	r5, r2
 8023c98:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c9e:	b200      	sxth	r0, r0
 8023ca0:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023ca4:	442a      	add	r2, r5
 8023ca6:	b209      	sxth	r1, r1
 8023ca8:	8320      	strh	r0, [r4, #24]
 8023caa:	454a      	cmp	r2, r9
 8023cac:	8361      	strh	r1, [r4, #26]
 8023cae:	d016      	beq.n	8023cde <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8023cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8023cb4:	d00d      	beq.n	8023cd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023cb6:	f1b8 0f00 	cmp.w	r8, #0
 8023cba:	db0a      	blt.n	8023cd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023cbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023cbe:	4541      	cmp	r1, r8
 8023cc0:	dd07      	ble.n	8023cd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023cc2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023cc6:	4288      	cmp	r0, r1
 8023cc8:	d330      	bcc.n	8023d2c <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8023cca:	f04f 0201 	mov.w	r2, #1
 8023cce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023cd2:	f04f 0200 	mov.w	r2, #0
 8023cd6:	82a5      	strh	r5, [r4, #20]
 8023cd8:	82e6      	strh	r6, [r4, #22]
 8023cda:	8322      	strh	r2, [r4, #24]
 8023cdc:	8362      	strh	r2, [r4, #26]
 8023cde:	9904      	ldr	r1, [sp, #16]
 8023ce0:	42a9      	cmp	r1, r5
 8023ce2:	d1c5      	bne.n	8023c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8023ce4:	9a02      	ldr	r2, [sp, #8]
 8023ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023ce8:	1ad3      	subs	r3, r2, r3
 8023cea:	8b22      	ldrh	r2, [r4, #24]
 8023cec:	3120      	adds	r1, #32
 8023cee:	441a      	add	r2, r3
 8023cf0:	8322      	strh	r2, [r4, #24]
 8023cf2:	9a06      	ldr	r2, [sp, #24]
 8023cf4:	1a89      	subs	r1, r1, r2
 8023cf6:	8b62      	ldrh	r2, [r4, #26]
 8023cf8:	fb03 2301 	mla	r3, r3, r1, r2
 8023cfc:	e64e      	b.n	802399c <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8023cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8023d02:	434a      	muls	r2, r1
 8023d04:	427f      	negs	r7, r7
 8023d06:	9307      	str	r3, [sp, #28]
 8023d08:	2300      	movs	r3, #0
 8023d0a:	e768      	b.n	8023bde <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8023d0c:	f104 0314 	add.w	r3, r4, #20
 8023d10:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023d14:	cb03      	ldmia	r3!, {r0, r1}
 8023d16:	f8c8 0000 	str.w	r0, [r8]
 8023d1a:	f8c8 1004 	str.w	r1, [r8, #4]
 8023d1e:	6923      	ldr	r3, [r4, #16]
 8023d20:	3308      	adds	r3, #8
 8023d22:	6123      	str	r3, [r4, #16]
 8023d24:	68a3      	ldr	r3, [r4, #8]
 8023d26:	3301      	adds	r3, #1
 8023d28:	60a3      	str	r3, [r4, #8]
 8023d2a:	e783      	b.n	8023c34 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023d2c:	f104 0814 	add.w	r8, r4, #20
 8023d30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023d34:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023d38:	f8c9 0000 	str.w	r0, [r9]
 8023d3c:	f8c9 1004 	str.w	r1, [r9, #4]
 8023d40:	6921      	ldr	r1, [r4, #16]
 8023d42:	3108      	adds	r1, #8
 8023d44:	6121      	str	r1, [r4, #16]
 8023d46:	68a1      	ldr	r1, [r4, #8]
 8023d48:	3101      	adds	r1, #1
 8023d4a:	60a1      	str	r1, [r4, #8]
 8023d4c:	e7c1      	b.n	8023cd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023d4e:	f104 0314 	add.w	r3, r4, #20
 8023d52:	6925      	ldr	r5, [r4, #16]
 8023d54:	cb03      	ldmia	r3!, {r0, r1}
 8023d56:	6028      	str	r0, [r5, #0]
 8023d58:	6069      	str	r1, [r5, #4]
 8023d5a:	6923      	ldr	r3, [r4, #16]
 8023d5c:	3308      	adds	r3, #8
 8023d5e:	6123      	str	r3, [r4, #16]
 8023d60:	68a3      	ldr	r3, [r4, #8]
 8023d62:	3301      	adds	r3, #1
 8023d64:	60a3      	str	r3, [r4, #8]
 8023d66:	e66a      	b.n	8023a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023d68:	f104 0314 	add.w	r3, r4, #20
 8023d6c:	6925      	ldr	r5, [r4, #16]
 8023d6e:	cb03      	ldmia	r3!, {r0, r1}
 8023d70:	6028      	str	r0, [r5, #0]
 8023d72:	6069      	str	r1, [r5, #4]
 8023d74:	6923      	ldr	r3, [r4, #16]
 8023d76:	3308      	adds	r3, #8
 8023d78:	6123      	str	r3, [r4, #16]
 8023d7a:	68a3      	ldr	r3, [r4, #8]
 8023d7c:	3301      	adds	r3, #1
 8023d7e:	60a3      	str	r3, [r4, #8]
 8023d80:	e6be      	b.n	8023b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023d82:	f00b 031f 	and.w	r3, fp, #31
 8023d86:	114f      	asrs	r7, r1, #5
 8023d88:	8b20      	ldrh	r0, [r4, #24]
 8023d8a:	f001 011f 	and.w	r1, r1, #31
 8023d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023d90:	9b04      	ldr	r3, [sp, #16]
 8023d92:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8023d96:	429f      	cmp	r7, r3
 8023d98:	d10a      	bne.n	8023db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8023d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d9c:	4418      	add	r0, r3
 8023d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023da0:	4419      	add	r1, r3
 8023da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023da4:	8320      	strh	r0, [r4, #24]
 8023da6:	fb03 9901 	mla	r9, r3, r1, r9
 8023daa:	f8a4 901a 	strh.w	r9, [r4, #26]
 8023dae:	e6af      	b.n	8023b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023db0:	2d00      	cmp	r5, #0
 8023db2:	f2c0 809b 	blt.w	8023eec <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8023db6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023db8:	f1c1 0320 	rsb	r3, r1, #32
 8023dbc:	4373      	muls	r3, r6
 8023dbe:	2601      	movs	r6, #1
 8023dc0:	960e      	str	r6, [sp, #56]	; 0x38
 8023dc2:	2620      	movs	r6, #32
 8023dc4:	960d      	str	r6, [sp, #52]	; 0x34
 8023dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023dc8:	fb93 f6f5 	sdiv	r6, r3, r5
 8023dcc:	4411      	add	r1, r2
 8023dce:	fb05 3316 	mls	r3, r5, r6, r3
 8023dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023dd4:	2b00      	cmp	r3, #0
 8023dd6:	4417      	add	r7, r2
 8023dd8:	9a00      	ldr	r2, [sp, #0]
 8023dda:	bfbc      	itt	lt
 8023ddc:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023de0:	195b      	addlt	r3, r3, r5
 8023de2:	0412      	lsls	r2, r2, #16
 8023de4:	fb06 9101 	mla	r1, r6, r1, r9
 8023de8:	4430      	add	r0, r6
 8023dea:	eb07 0902 	add.w	r9, r7, r2
 8023dee:	9210      	str	r2, [sp, #64]	; 0x40
 8023df0:	b200      	sxth	r0, r0
 8023df2:	b209      	sxth	r1, r1
 8023df4:	45c1      	cmp	r9, r8
 8023df6:	8320      	strh	r0, [r4, #24]
 8023df8:	8361      	strh	r1, [r4, #26]
 8023dfa:	d017      	beq.n	8023e2c <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8023dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8023e00:	d00d      	beq.n	8023e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023e02:	f1be 0f00 	cmp.w	lr, #0
 8023e06:	db0a      	blt.n	8023e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023e08:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e0a:	4571      	cmp	r1, lr
 8023e0c:	dd07      	ble.n	8023e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023e0e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023e12:	4288      	cmp	r0, r1
 8023e14:	d372      	bcc.n	8023efc <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8023e16:	f04f 0201 	mov.w	r2, #1
 8023e1a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023e1e:	9a00      	ldr	r2, [sp, #0]
 8023e20:	82a7      	strh	r7, [r4, #20]
 8023e22:	82e2      	strh	r2, [r4, #22]
 8023e24:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023e28:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e2e:	eb02 0e06 	add.w	lr, r2, r6
 8023e32:	9a04      	ldr	r2, [sp, #16]
 8023e34:	42ba      	cmp	r2, r7
 8023e36:	d049      	beq.n	8023ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8023e38:	9a02      	ldr	r2, [sp, #8]
 8023e3a:	1b5b      	subs	r3, r3, r5
 8023e3c:	eba2 010e 	sub.w	r1, r2, lr
 8023e40:	440e      	add	r6, r1
 8023e42:	0176      	lsls	r6, r6, #5
 8023e44:	fb96 f8f5 	sdiv	r8, r6, r5
 8023e48:	fb05 6618 	mls	r6, r5, r8, r6
 8023e4c:	2e00      	cmp	r6, #0
 8023e4e:	bfbc      	itt	lt
 8023e50:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8023e54:	1976      	addlt	r6, r6, r5
 8023e56:	f108 0201 	add.w	r2, r8, #1
 8023e5a:	9211      	str	r2, [sp, #68]	; 0x44
 8023e5c:	199b      	adds	r3, r3, r6
 8023e5e:	8b20      	ldrh	r0, [r4, #24]
 8023e60:	8b61      	ldrh	r1, [r4, #26]
 8023e62:	bf54      	ite	pl
 8023e64:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8023e68:	46c1      	movmi	r9, r8
 8023e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023e6c:	bf58      	it	pl
 8023e6e:	1b5b      	subpl	r3, r3, r5
 8023e70:	4448      	add	r0, r9
 8023e72:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8023e76:	4417      	add	r7, r2
 8023e78:	44ce      	add	lr, r9
 8023e7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023e7c:	b200      	sxth	r0, r0
 8023e7e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8023e82:	b209      	sxth	r1, r1
 8023e84:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023e88:	443a      	add	r2, r7
 8023e8a:	8320      	strh	r0, [r4, #24]
 8023e8c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023e90:	8361      	strh	r1, [r4, #26]
 8023e92:	4552      	cmp	r2, sl
 8023e94:	d017      	beq.n	8023ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8023e96:	ea50 0201 	orrs.w	r2, r0, r1
 8023e9a:	d00d      	beq.n	8023eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023e9c:	f1b9 0f00 	cmp.w	r9, #0
 8023ea0:	db0a      	blt.n	8023eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023ea2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023ea4:	4549      	cmp	r1, r9
 8023ea6:	dd07      	ble.n	8023eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023ea8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023eac:	4288      	cmp	r0, r1
 8023eae:	d336      	bcc.n	8023f1e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8023eb0:	f04f 0201 	mov.w	r2, #1
 8023eb4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023eb8:	9a00      	ldr	r2, [sp, #0]
 8023eba:	82a7      	strh	r7, [r4, #20]
 8023ebc:	82e2      	strh	r2, [r4, #22]
 8023ebe:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023ec2:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023ec6:	9a04      	ldr	r2, [sp, #16]
 8023ec8:	42ba      	cmp	r2, r7
 8023eca:	d1c7      	bne.n	8023e5c <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8023ecc:	9b02      	ldr	r3, [sp, #8]
 8023ece:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023ed0:	eba3 0e0e 	sub.w	lr, r3, lr
 8023ed4:	8b23      	ldrh	r3, [r4, #24]
 8023ed6:	3120      	adds	r1, #32
 8023ed8:	4473      	add	r3, lr
 8023eda:	8323      	strh	r3, [r4, #24]
 8023edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023ede:	1ac9      	subs	r1, r1, r3
 8023ee0:	8b63      	ldrh	r3, [r4, #26]
 8023ee2:	fb0e 3e01 	mla	lr, lr, r1, r3
 8023ee6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023eea:	e611      	b.n	8023b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023eec:	f04f 36ff 	mov.w	r6, #4294967295
 8023ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ef2:	426d      	negs	r5, r5
 8023ef4:	960e      	str	r6, [sp, #56]	; 0x38
 8023ef6:	2600      	movs	r6, #0
 8023ef8:	434b      	muls	r3, r1
 8023efa:	e763      	b.n	8023dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8023efc:	f104 0e14 	add.w	lr, r4, #20
 8023f00:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023f04:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023f08:	f8c8 0000 	str.w	r0, [r8]
 8023f0c:	f8c8 1004 	str.w	r1, [r8, #4]
 8023f10:	6921      	ldr	r1, [r4, #16]
 8023f12:	3108      	adds	r1, #8
 8023f14:	6121      	str	r1, [r4, #16]
 8023f16:	68a1      	ldr	r1, [r4, #8]
 8023f18:	3101      	adds	r1, #1
 8023f1a:	60a1      	str	r1, [r4, #8]
 8023f1c:	e77f      	b.n	8023e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023f1e:	f104 0914 	add.w	r9, r4, #20
 8023f22:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023f26:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8023f2a:	f8ca 0000 	str.w	r0, [sl]
 8023f2e:	f8ca 1004 	str.w	r1, [sl, #4]
 8023f32:	6921      	ldr	r1, [r4, #16]
 8023f34:	3108      	adds	r1, #8
 8023f36:	6121      	str	r1, [r4, #16]
 8023f38:	68a1      	ldr	r1, [r4, #8]
 8023f3a:	3101      	adds	r1, #1
 8023f3c:	60a1      	str	r1, [r4, #8]
 8023f3e:	e7bb      	b.n	8023eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023f40:	f104 0314 	add.w	r3, r4, #20
 8023f44:	6925      	ldr	r5, [r4, #16]
 8023f46:	cb03      	ldmia	r3!, {r0, r1}
 8023f48:	6028      	str	r0, [r5, #0]
 8023f4a:	6069      	str	r1, [r5, #4]
 8023f4c:	6923      	ldr	r3, [r4, #16]
 8023f4e:	3308      	adds	r3, #8
 8023f50:	6123      	str	r3, [r4, #16]
 8023f52:	68a3      	ldr	r3, [r4, #8]
 8023f54:	3301      	adds	r3, #1
 8023f56:	60a3      	str	r3, [r4, #8]
 8023f58:	e5fd      	b.n	8023b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023f5a:	f104 0314 	add.w	r3, r4, #20
 8023f5e:	6925      	ldr	r5, [r4, #16]
 8023f60:	cb03      	ldmia	r3!, {r0, r1}
 8023f62:	6028      	str	r0, [r5, #0]
 8023f64:	6069      	str	r1, [r5, #4]
 8023f66:	6923      	ldr	r3, [r4, #16]
 8023f68:	3308      	adds	r3, #8
 8023f6a:	6123      	str	r3, [r4, #16]
 8023f6c:	68a3      	ldr	r3, [r4, #8]
 8023f6e:	3301      	adds	r3, #1
 8023f70:	60a3      	str	r3, [r4, #8]
 8023f72:	e625      	b.n	8023bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023f74:	9b05      	ldr	r3, [sp, #20]
 8023f76:	ea4f 176b 	mov.w	r7, fp, asr #5
 8023f7a:	f00b 081f 	and.w	r8, fp, #31
 8023f7e:	8b20      	ldrh	r0, [r4, #24]
 8023f80:	f003 031f 	and.w	r3, r3, #31
 8023f84:	4577      	cmp	r7, lr
 8023f86:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8023f8a:	9302      	str	r3, [sp, #8]
 8023f8c:	9b03      	ldr	r3, [sp, #12]
 8023f8e:	eba3 050c 	sub.w	r5, r3, ip
 8023f92:	d108      	bne.n	8023fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8023f94:	9b02      	ldr	r3, [sp, #8]
 8023f96:	4428      	add	r0, r5
 8023f98:	4498      	add	r8, r3
 8023f9a:	8320      	strh	r0, [r4, #24]
 8023f9c:	fb05 9508 	mla	r5, r5, r8, r9
 8023fa0:	8365      	strh	r5, [r4, #26]
 8023fa2:	f7ff bb4f 	b.w	8023644 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023fa6:	9b05      	ldr	r3, [sp, #20]
 8023fa8:	ebb3 030b 	subs.w	r3, r3, fp
 8023fac:	f100 809c 	bmi.w	80240e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8023fb0:	f1c8 0120 	rsb	r1, r8, #32
 8023fb4:	2201      	movs	r2, #1
 8023fb6:	f04f 0b20 	mov.w	fp, #32
 8023fba:	434d      	muls	r5, r1
 8023fbc:	9201      	str	r2, [sp, #4]
 8023fbe:	9a01      	ldr	r2, [sp, #4]
 8023fc0:	44d8      	add	r8, fp
 8023fc2:	fb95 f6f3 	sdiv	r6, r5, r3
 8023fc6:	fb03 5516 	mls	r5, r3, r6, r5
 8023fca:	4417      	add	r7, r2
 8023fcc:	9a00      	ldr	r2, [sp, #0]
 8023fce:	2d00      	cmp	r5, #0
 8023fd0:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8023fd4:	bfbc      	itt	lt
 8023fd6:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023fda:	18ed      	addlt	r5, r5, r3
 8023fdc:	eb07 0a02 	add.w	sl, r7, r2
 8023fe0:	9204      	str	r2, [sp, #16]
 8023fe2:	fb06 9808 	mla	r8, r6, r8, r9
 8023fe6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023fea:	4430      	add	r0, r6
 8023fec:	fa0f f188 	sxth.w	r1, r8
 8023ff0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023ff4:	b200      	sxth	r0, r0
 8023ff6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023ffa:	8361      	strh	r1, [r4, #26]
 8023ffc:	8320      	strh	r0, [r4, #24]
 8023ffe:	45ca      	cmp	sl, r9
 8024000:	d015      	beq.n	802402e <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8024002:	ea50 0201 	orrs.w	r2, r0, r1
 8024006:	d00c      	beq.n	8024022 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024008:	f1b8 0f00 	cmp.w	r8, #0
 802400c:	db09      	blt.n	8024022 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802400e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024010:	4541      	cmp	r1, r8
 8024012:	dd06      	ble.n	8024022 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024014:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024018:	4288      	cmp	r0, r1
 802401a:	d36e      	bcc.n	80240fa <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802401c:	2101      	movs	r1, #1
 802401e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024022:	2100      	movs	r1, #0
 8024024:	9a00      	ldr	r2, [sp, #0]
 8024026:	82a7      	strh	r7, [r4, #20]
 8024028:	82e2      	strh	r2, [r4, #22]
 802402a:	8321      	strh	r1, [r4, #24]
 802402c:	8361      	strh	r1, [r4, #26]
 802402e:	45be      	cmp	lr, r7
 8024030:	44b4      	add	ip, r6
 8024032:	d048      	beq.n	80240c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8024034:	9a03      	ldr	r2, [sp, #12]
 8024036:	1aed      	subs	r5, r5, r3
 8024038:	eba2 010c 	sub.w	r1, r2, ip
 802403c:	440e      	add	r6, r1
 802403e:	0176      	lsls	r6, r6, #5
 8024040:	fb96 f8f3 	sdiv	r8, r6, r3
 8024044:	fb03 6618 	mls	r6, r3, r8, r6
 8024048:	2e00      	cmp	r6, #0
 802404a:	bfbc      	itt	lt
 802404c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024050:	18f6      	addlt	r6, r6, r3
 8024052:	f108 0201 	add.w	r2, r8, #1
 8024056:	9205      	str	r2, [sp, #20]
 8024058:	19ad      	adds	r5, r5, r6
 802405a:	8b20      	ldrh	r0, [r4, #24]
 802405c:	8b61      	ldrh	r1, [r4, #26]
 802405e:	bf54      	ite	pl
 8024060:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8024064:	46c1      	movmi	r9, r8
 8024066:	9a01      	ldr	r2, [sp, #4]
 8024068:	bf58      	it	pl
 802406a:	1aed      	subpl	r5, r5, r3
 802406c:	4448      	add	r0, r9
 802406e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024072:	4417      	add	r7, r2
 8024074:	44cc      	add	ip, r9
 8024076:	9a04      	ldr	r2, [sp, #16]
 8024078:	b200      	sxth	r0, r0
 802407a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802407e:	b209      	sxth	r1, r1
 8024080:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024084:	443a      	add	r2, r7
 8024086:	8320      	strh	r0, [r4, #24]
 8024088:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802408c:	8361      	strh	r1, [r4, #26]
 802408e:	4552      	cmp	r2, sl
 8024090:	d017      	beq.n	80240c2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8024092:	ea50 0201 	orrs.w	r2, r0, r1
 8024096:	d00d      	beq.n	80240b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024098:	f1b9 0f00 	cmp.w	r9, #0
 802409c:	db0a      	blt.n	80240b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802409e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80240a0:	4549      	cmp	r1, r9
 80240a2:	dd07      	ble.n	80240b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80240a4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80240a8:	4288      	cmp	r0, r1
 80240aa:	d337      	bcc.n	802411c <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80240ac:	f04f 0201 	mov.w	r2, #1
 80240b0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80240b4:	9a00      	ldr	r2, [sp, #0]
 80240b6:	82a7      	strh	r7, [r4, #20]
 80240b8:	82e2      	strh	r2, [r4, #22]
 80240ba:	f04f 0200 	mov.w	r2, #0
 80240be:	8322      	strh	r2, [r4, #24]
 80240c0:	8362      	strh	r2, [r4, #26]
 80240c2:	45be      	cmp	lr, r7
 80240c4:	d1c8      	bne.n	8024058 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80240c6:	9b03      	ldr	r3, [sp, #12]
 80240c8:	8b62      	ldrh	r2, [r4, #26]
 80240ca:	eba3 0c0c 	sub.w	ip, r3, ip
 80240ce:	8b23      	ldrh	r3, [r4, #24]
 80240d0:	4463      	add	r3, ip
 80240d2:	8323      	strh	r3, [r4, #24]
 80240d4:	9b02      	ldr	r3, [sp, #8]
 80240d6:	3320      	adds	r3, #32
 80240d8:	eba3 030b 	sub.w	r3, r3, fp
 80240dc:	fb0c 2c03 	mla	ip, ip, r3, r2
 80240e0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80240e4:	f7ff baae 	b.w	8023644 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80240e8:	f04f 32ff 	mov.w	r2, #4294967295
 80240ec:	fb05 f508 	mul.w	r5, r5, r8
 80240f0:	425b      	negs	r3, r3
 80240f2:	f04f 0b00 	mov.w	fp, #0
 80240f6:	9201      	str	r2, [sp, #4]
 80240f8:	e761      	b.n	8023fbe <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80240fa:	f104 0814 	add.w	r8, r4, #20
 80240fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024102:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024106:	f8c9 0000 	str.w	r0, [r9]
 802410a:	f8c9 1004 	str.w	r1, [r9, #4]
 802410e:	6921      	ldr	r1, [r4, #16]
 8024110:	3108      	adds	r1, #8
 8024112:	6121      	str	r1, [r4, #16]
 8024114:	68a1      	ldr	r1, [r4, #8]
 8024116:	3101      	adds	r1, #1
 8024118:	60a1      	str	r1, [r4, #8]
 802411a:	e782      	b.n	8024022 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802411c:	f104 0914 	add.w	r9, r4, #20
 8024120:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024124:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024128:	f8ca 0000 	str.w	r0, [sl]
 802412c:	f8ca 1004 	str.w	r1, [sl, #4]
 8024130:	6921      	ldr	r1, [r4, #16]
 8024132:	3108      	adds	r1, #8
 8024134:	6121      	str	r1, [r4, #16]
 8024136:	68a1      	ldr	r1, [r4, #8]
 8024138:	3101      	adds	r1, #1
 802413a:	60a1      	str	r1, [r4, #8]
 802413c:	e7ba      	b.n	80240b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802413e <_ZN8touchgfx7Outline6lineToEii>:
 802413e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024140:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024142:	4604      	mov	r4, r0
 8024144:	460d      	mov	r5, r1
 8024146:	4616      	mov	r6, r2
 8024148:	079b      	lsls	r3, r3, #30
 802414a:	d526      	bpl.n	802419a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802414c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024150:	ea85 0001 	eor.w	r0, r5, r1
 8024154:	ea86 0302 	eor.w	r3, r6, r2
 8024158:	4303      	orrs	r3, r0
 802415a:	d01e      	beq.n	802419a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802415c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802415e:	114b      	asrs	r3, r1, #5
 8024160:	9600      	str	r6, [sp, #0]
 8024162:	4283      	cmp	r3, r0
 8024164:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024166:	bfb8      	it	lt
 8024168:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802416a:	3301      	adds	r3, #1
 802416c:	4283      	cmp	r3, r0
 802416e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024170:	bfc8      	it	gt
 8024172:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024174:	116b      	asrs	r3, r5, #5
 8024176:	4283      	cmp	r3, r0
 8024178:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802417a:	bfb8      	it	lt
 802417c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802417e:	3301      	adds	r3, #1
 8024180:	4283      	cmp	r3, r0
 8024182:	4620      	mov	r0, r4
 8024184:	bfc8      	it	gt
 8024186:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024188:	462b      	mov	r3, r5
 802418a:	f7ff f9e3 	bl	8023554 <_ZN8touchgfx7Outline10renderLineEiiii>
 802418e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024190:	f043 0301 	orr.w	r3, r3, #1
 8024194:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8024198:	63e3      	str	r3, [r4, #60]	; 0x3c
 802419a:	b002      	add	sp, #8
 802419c:	bd70      	pop	{r4, r5, r6, pc}

0802419e <_ZN8touchgfx7Outline6moveToEii>:
 802419e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80241a2:	4615      	mov	r5, r2
 80241a4:	4604      	mov	r4, r0
 80241a6:	460e      	mov	r6, r1
 80241a8:	079a      	lsls	r2, r3, #30
 80241aa:	d401      	bmi.n	80241b0 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80241ac:	f7ff f98c 	bl	80234c8 <_ZN8touchgfx7Outline5resetEv>
 80241b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80241b2:	07db      	lsls	r3, r3, #31
 80241b4:	d504      	bpl.n	80241c0 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80241b6:	4620      	mov	r0, r4
 80241b8:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80241bc:	f7ff ffbf 	bl	802413e <_ZN8touchgfx7Outline6lineToEii>
 80241c0:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80241c4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80241c8:	116f      	asrs	r7, r5, #5
 80241ca:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80241ce:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80241d2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80241d6:	4291      	cmp	r1, r2
 80241d8:	d015      	beq.n	8024206 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80241da:	8b61      	ldrh	r1, [r4, #26]
 80241dc:	8b22      	ldrh	r2, [r4, #24]
 80241de:	430a      	orrs	r2, r1
 80241e0:	d00b      	beq.n	80241fa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	db09      	blt.n	80241fa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80241e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80241e8:	429a      	cmp	r2, r3
 80241ea:	dd06      	ble.n	80241fa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80241ec:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80241f0:	429a      	cmp	r2, r3
 80241f2:	d30d      	bcc.n	8024210 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80241f4:	2301      	movs	r3, #1
 80241f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80241fa:	2300      	movs	r3, #0
 80241fc:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024200:	82e7      	strh	r7, [r4, #22]
 8024202:	8323      	strh	r3, [r4, #24]
 8024204:	8363      	strh	r3, [r4, #26]
 8024206:	61e6      	str	r6, [r4, #28]
 8024208:	62a5      	str	r5, [r4, #40]	; 0x28
 802420a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024210:	f104 0314 	add.w	r3, r4, #20
 8024214:	6922      	ldr	r2, [r4, #16]
 8024216:	cb03      	ldmia	r3!, {r0, r1}
 8024218:	6010      	str	r0, [r2, #0]
 802421a:	6051      	str	r1, [r2, #4]
 802421c:	6923      	ldr	r3, [r4, #16]
 802421e:	3308      	adds	r3, #8
 8024220:	6123      	str	r3, [r4, #16]
 8024222:	68a3      	ldr	r3, [r4, #8]
 8024224:	3301      	adds	r3, #1
 8024226:	60a3      	str	r3, [r4, #8]
 8024228:	e7e7      	b.n	80241fa <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802422a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802422a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802422e:	b0d1      	sub	sp, #324	; 0x144
 8024230:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024234:	466c      	mov	r4, sp
 8024236:	1a0d      	subs	r5, r1, r0
 8024238:	f100 0208 	add.w	r2, r0, #8
 802423c:	2d48      	cmp	r5, #72	; 0x48
 802423e:	f340 80ba 	ble.w	80243b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024242:	112d      	asrs	r5, r5, #4
 8024244:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024248:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802424c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024250:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024254:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024258:	681e      	ldr	r6, [r3, #0]
 802425a:	6006      	str	r6, [r0, #0]
 802425c:	685e      	ldr	r6, [r3, #4]
 802425e:	6046      	str	r6, [r0, #4]
 8024260:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024264:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024268:	f8a3 e002 	strh.w	lr, [r3, #2]
 802426c:	80df      	strh	r7, [r3, #6]
 802426e:	f1a1 0308 	sub.w	r3, r1, #8
 8024272:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8024276:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802427a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802427e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024282:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024286:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802428a:	45ac      	cmp	ip, r5
 802428c:	dd0f      	ble.n	80242ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802428e:	681d      	ldr	r5, [r3, #0]
 8024290:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024294:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8024298:	6015      	str	r5, [r2, #0]
 802429a:	685d      	ldr	r5, [r3, #4]
 802429c:	6055      	str	r5, [r2, #4]
 802429e:	f821 7c08 	strh.w	r7, [r1, #-8]
 80242a2:	f821 6c06 	strh.w	r6, [r1, #-6]
 80242a6:	f821 ec04 	strh.w	lr, [r1, #-4]
 80242aa:	f821 cc02 	strh.w	ip, [r1, #-2]
 80242ae:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80242b2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80242b6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80242ba:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80242be:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80242c2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80242c6:	4565      	cmp	r5, ip
 80242c8:	dd0d      	ble.n	80242e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80242ca:	6815      	ldr	r5, [r2, #0]
 80242cc:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80242d0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80242d4:	6005      	str	r5, [r0, #0]
 80242d6:	6855      	ldr	r5, [r2, #4]
 80242d8:	8107      	strh	r7, [r0, #8]
 80242da:	6045      	str	r5, [r0, #4]
 80242dc:	8146      	strh	r6, [r0, #10]
 80242de:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80242e2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80242e6:	f9b0 7000 	ldrsh.w	r7, [r0]
 80242ea:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80242ee:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80242f2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80242f6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80242fa:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80242fe:	45ac      	cmp	ip, r5
 8024300:	dd0f      	ble.n	8024322 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024302:	681d      	ldr	r5, [r3, #0]
 8024304:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024308:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802430c:	6005      	str	r5, [r0, #0]
 802430e:	685d      	ldr	r5, [r3, #4]
 8024310:	6045      	str	r5, [r0, #4]
 8024312:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024316:	f821 6c06 	strh.w	r6, [r1, #-6]
 802431a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802431e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024322:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024326:	f102 0508 	add.w	r5, r2, #8
 802432a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802432e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024332:	462f      	mov	r7, r5
 8024334:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024338:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802433c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024340:	45b2      	cmp	sl, r6
 8024342:	dc18      	bgt.n	8024376 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024344:	3b08      	subs	r3, #8
 8024346:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802434a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802434e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024352:	45b2      	cmp	sl, r6
 8024354:	dbf6      	blt.n	8024344 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024356:	42ab      	cmp	r3, r5
 8024358:	681e      	ldr	r6, [r3, #0]
 802435a:	d30e      	bcc.n	802437a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802435c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024360:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024364:	602e      	str	r6, [r5, #0]
 8024366:	685e      	ldr	r6, [r3, #4]
 8024368:	606e      	str	r6, [r5, #4]
 802436a:	f8a3 9000 	strh.w	r9, [r3]
 802436e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024372:	809f      	strh	r7, [r3, #4]
 8024374:	80da      	strh	r2, [r3, #6]
 8024376:	462a      	mov	r2, r5
 8024378:	e7d3      	b.n	8024322 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802437a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802437e:	6006      	str	r6, [r0, #0]
 8024380:	685e      	ldr	r6, [r3, #4]
 8024382:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8024386:	6046      	str	r6, [r0, #4]
 8024388:	1a1e      	subs	r6, r3, r0
 802438a:	80da      	strh	r2, [r3, #6]
 802438c:	1b4a      	subs	r2, r1, r5
 802438e:	f8a3 e000 	strh.w	lr, [r3]
 8024392:	10d2      	asrs	r2, r2, #3
 8024394:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024398:	f8a3 8004 	strh.w	r8, [r3, #4]
 802439c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80243a0:	bfb5      	itete	lt
 80243a2:	e9c4 0300 	strdlt	r0, r3, [r4]
 80243a6:	4607      	movge	r7, r0
 80243a8:	460b      	movlt	r3, r1
 80243aa:	e9c4 5100 	strdge	r5, r1, [r4]
 80243ae:	4638      	mov	r0, r7
 80243b0:	3408      	adds	r4, #8
 80243b2:	4619      	mov	r1, r3
 80243b4:	e73f      	b.n	8024236 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80243b6:	4291      	cmp	r1, r2
 80243b8:	d925      	bls.n	8024406 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80243ba:	f1a2 0310 	sub.w	r3, r2, #16
 80243be:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80243c2:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80243c6:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80243ca:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80243ce:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80243d2:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80243d6:	42b5      	cmp	r5, r6
 80243d8:	dd13      	ble.n	8024402 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80243da:	461d      	mov	r5, r3
 80243dc:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80243e0:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80243e4:	3b08      	subs	r3, #8
 80243e6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80243ea:	619e      	str	r6, [r3, #24]
 80243ec:	42a8      	cmp	r0, r5
 80243ee:	686e      	ldr	r6, [r5, #4]
 80243f0:	f8a3 c010 	strh.w	ip, [r3, #16]
 80243f4:	61de      	str	r6, [r3, #28]
 80243f6:	825f      	strh	r7, [r3, #18]
 80243f8:	f8a3 8014 	strh.w	r8, [r3, #20]
 80243fc:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024400:	d1dd      	bne.n	80243be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024402:	3208      	adds	r2, #8
 8024404:	e7d7      	b.n	80243b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024406:	466b      	mov	r3, sp
 8024408:	429c      	cmp	r4, r3
 802440a:	d903      	bls.n	8024414 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802440c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024410:	3c08      	subs	r4, #8
 8024412:	e710      	b.n	8024236 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024414:	b051      	add	sp, #324	; 0x144
 8024416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802441a <_ZN8touchgfx7Outline9sortCellsEv>:
 802441a:	6881      	ldr	r1, [r0, #8]
 802441c:	b111      	cbz	r1, 8024424 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802441e:	68c0      	ldr	r0, [r0, #12]
 8024420:	f7ff bf03 	b.w	802422a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024424:	4770      	bx	lr

08024426 <_ZN8touchgfx7Outline8getCellsEv>:
 8024426:	b510      	push	{r4, lr}
 8024428:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802442a:	4604      	mov	r4, r0
 802442c:	07da      	lsls	r2, r3, #31
 802442e:	d507      	bpl.n	8024440 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024430:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024434:	f7ff fe83 	bl	802413e <_ZN8touchgfx7Outline6lineToEii>
 8024438:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802443a:	f023 0301 	bic.w	r3, r3, #1
 802443e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024440:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024442:	079b      	lsls	r3, r3, #30
 8024444:	d51a      	bpl.n	802447c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024446:	8b62      	ldrh	r2, [r4, #26]
 8024448:	8b23      	ldrh	r3, [r4, #24]
 802444a:	4313      	orrs	r3, r2
 802444c:	d00d      	beq.n	802446a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802444e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024452:	2b00      	cmp	r3, #0
 8024454:	db09      	blt.n	802446a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024456:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024458:	4293      	cmp	r3, r2
 802445a:	da06      	bge.n	802446a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802445c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024460:	429a      	cmp	r2, r3
 8024462:	d80d      	bhi.n	8024480 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024464:	2301      	movs	r3, #1
 8024466:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802446a:	68a0      	ldr	r0, [r4, #8]
 802446c:	b138      	cbz	r0, 802447e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802446e:	4620      	mov	r0, r4
 8024470:	f7ff ffd3 	bl	802441a <_ZN8touchgfx7Outline9sortCellsEv>
 8024474:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024476:	f023 0302 	bic.w	r3, r3, #2
 802447a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802447c:	68e0      	ldr	r0, [r4, #12]
 802447e:	bd10      	pop	{r4, pc}
 8024480:	f104 0314 	add.w	r3, r4, #20
 8024484:	6922      	ldr	r2, [r4, #16]
 8024486:	cb03      	ldmia	r3!, {r0, r1}
 8024488:	6010      	str	r0, [r2, #0]
 802448a:	6051      	str	r1, [r2, #4]
 802448c:	6923      	ldr	r3, [r4, #16]
 802448e:	3308      	adds	r3, #8
 8024490:	6123      	str	r3, [r4, #16]
 8024492:	68a3      	ldr	r3, [r4, #8]
 8024494:	3301      	adds	r3, #1
 8024496:	60a3      	str	r3, [r4, #8]
 8024498:	e7e7      	b.n	802446a <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802449a <_ZN8touchgfx8ScanlineD1Ev>:
 802449a:	4770      	bx	lr

0802449c <_ZN8touchgfx8ScanlineD0Ev>:
 802449c:	b510      	push	{r4, lr}
 802449e:	4604      	mov	r4, r0
 80244a0:	2124      	movs	r1, #36	; 0x24
 80244a2:	f000 f87a 	bl	802459a <_ZdlPvj>
 80244a6:	4620      	mov	r0, r4
 80244a8:	bd10      	pop	{r4, pc}

080244aa <_ZN8touchgfx8Scanline5resetEv>:
 80244aa:	b510      	push	{r4, lr}
 80244ac:	4604      	mov	r4, r0
 80244ae:	f7f3 f8f9 	bl	80176a4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80244b2:	61a0      	str	r0, [r4, #24]
 80244b4:	f7f3 f8fc 	bl	80176b0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80244b8:	61e0      	str	r0, [r4, #28]
 80244ba:	f7f3 f8ff 	bl	80176bc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80244be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80244c2:	6220      	str	r0, [r4, #32]
 80244c4:	6160      	str	r0, [r4, #20]
 80244c6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80244ca:	69e3      	ldr	r3, [r4, #28]
 80244cc:	6123      	str	r3, [r4, #16]
 80244ce:	2300      	movs	r3, #0
 80244d0:	60e3      	str	r3, [r4, #12]
 80244d2:	bd10      	pop	{r4, pc}

080244d4 <_ZN8touchgfx8ScanlineC1Ev>:
 80244d4:	4b07      	ldr	r3, [pc, #28]	; (80244f4 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80244d6:	b510      	push	{r4, lr}
 80244d8:	6003      	str	r3, [r0, #0]
 80244da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80244de:	4604      	mov	r4, r0
 80244e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80244e4:	2300      	movs	r3, #0
 80244e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80244ea:	6143      	str	r3, [r0, #20]
 80244ec:	f7ff ffdd 	bl	80244aa <_ZN8touchgfx8Scanline5resetEv>
 80244f0:	4620      	mov	r0, r4
 80244f2:	bd10      	pop	{r4, pc}
 80244f4:	08029794 	.word	0x08029794

080244f8 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80244f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244fc:	1e0c      	subs	r4, r1, #0
 80244fe:	4605      	mov	r5, r0
 8024500:	4617      	mov	r7, r2
 8024502:	461e      	mov	r6, r3
 8024504:	da03      	bge.n	802450e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024506:	4426      	add	r6, r4
 8024508:	2e01      	cmp	r6, #1
 802450a:	d421      	bmi.n	8024550 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802450c:	2400      	movs	r4, #0
 802450e:	f7f3 f8c3 	bl	8017698 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024512:	42a0      	cmp	r0, r4
 8024514:	d91c      	bls.n	8024550 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024516:	eb04 0806 	add.w	r8, r4, r6
 802451a:	f7f3 f8bd 	bl	8017698 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802451e:	4580      	cmp	r8, r0
 8024520:	d902      	bls.n	8024528 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024522:	f7f3 f8b9 	bl	8017698 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024526:	1b06      	subs	r6, r0, r4
 8024528:	69a8      	ldr	r0, [r5, #24]
 802452a:	4632      	mov	r2, r6
 802452c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024530:	4420      	add	r0, r4
 8024532:	f7f4 fdb0 	bl	8019096 <_ZN8touchgfx6memsetEPvhm>
 8024536:	686b      	ldr	r3, [r5, #4]
 8024538:	b2b2      	uxth	r2, r6
 802453a:	3301      	adds	r3, #1
 802453c:	42a3      	cmp	r3, r4
 802453e:	696b      	ldr	r3, [r5, #20]
 8024540:	d108      	bne.n	8024554 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024542:	8819      	ldrh	r1, [r3, #0]
 8024544:	440a      	add	r2, r1
 8024546:	801a      	strh	r2, [r3, #0]
 8024548:	3c01      	subs	r4, #1
 802454a:	4434      	add	r4, r6
 802454c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024554:	1c99      	adds	r1, r3, #2
 8024556:	6169      	str	r1, [r5, #20]
 8024558:	805a      	strh	r2, [r3, #2]
 802455a:	692b      	ldr	r3, [r5, #16]
 802455c:	1c9a      	adds	r2, r3, #2
 802455e:	612a      	str	r2, [r5, #16]
 8024560:	805c      	strh	r4, [r3, #2]
 8024562:	68eb      	ldr	r3, [r5, #12]
 8024564:	3301      	adds	r3, #1
 8024566:	60eb      	str	r3, [r5, #12]
 8024568:	e7ee      	b.n	8024548 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802456a <_ZN8touchgfx15RenderingBufferC1Ev>:
 802456a:	2200      	movs	r2, #0
 802456c:	6002      	str	r2, [r0, #0]
 802456e:	7102      	strb	r2, [r0, #4]
 8024570:	6102      	str	r2, [r0, #16]
 8024572:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024576:	4770      	bx	lr

08024578 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024578:	4770      	bx	lr

0802457a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802457a:	6083      	str	r3, [r0, #8]
 802457c:	9b00      	ldr	r3, [sp, #0]
 802457e:	6001      	str	r1, [r0, #0]
 8024580:	60c3      	str	r3, [r0, #12]
 8024582:	9b01      	ldr	r3, [sp, #4]
 8024584:	7102      	strb	r2, [r0, #4]
 8024586:	6103      	str	r3, [r0, #16]
 8024588:	4770      	bx	lr

0802458a <__aeabi_atexit>:
 802458a:	460b      	mov	r3, r1
 802458c:	4601      	mov	r1, r0
 802458e:	4618      	mov	r0, r3
 8024590:	f000 b852 	b.w	8024638 <__cxa_atexit>

08024594 <__cxa_pure_virtual>:
 8024594:	b508      	push	{r3, lr}
 8024596:	f000 f81f 	bl	80245d8 <_ZSt9terminatev>

0802459a <_ZdlPvj>:
 802459a:	f000 b80f 	b.w	80245bc <_ZdlPv>

0802459e <__cxa_guard_acquire>:
 802459e:	6803      	ldr	r3, [r0, #0]
 80245a0:	07db      	lsls	r3, r3, #31
 80245a2:	d406      	bmi.n	80245b2 <__cxa_guard_acquire+0x14>
 80245a4:	7843      	ldrb	r3, [r0, #1]
 80245a6:	b103      	cbz	r3, 80245aa <__cxa_guard_acquire+0xc>
 80245a8:	deff      	udf	#255	; 0xff
 80245aa:	2301      	movs	r3, #1
 80245ac:	7043      	strb	r3, [r0, #1]
 80245ae:	4618      	mov	r0, r3
 80245b0:	4770      	bx	lr
 80245b2:	2000      	movs	r0, #0
 80245b4:	4770      	bx	lr

080245b6 <__cxa_guard_release>:
 80245b6:	2301      	movs	r3, #1
 80245b8:	6003      	str	r3, [r0, #0]
 80245ba:	4770      	bx	lr

080245bc <_ZdlPv>:
 80245bc:	f000 b88e 	b.w	80246dc <free>

080245c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80245c0:	b508      	push	{r3, lr}
 80245c2:	4780      	blx	r0
 80245c4:	f000 f80d 	bl	80245e2 <abort>

080245c8 <_ZSt13get_terminatev>:
 80245c8:	4b02      	ldr	r3, [pc, #8]	; (80245d4 <_ZSt13get_terminatev+0xc>)
 80245ca:	6818      	ldr	r0, [r3, #0]
 80245cc:	f3bf 8f5b 	dmb	ish
 80245d0:	4770      	bx	lr
 80245d2:	bf00      	nop
 80245d4:	20000094 	.word	0x20000094

080245d8 <_ZSt9terminatev>:
 80245d8:	b508      	push	{r3, lr}
 80245da:	f7ff fff5 	bl	80245c8 <_ZSt13get_terminatev>
 80245de:	f7ff ffef 	bl	80245c0 <_ZN10__cxxabiv111__terminateEPFvvE>

080245e2 <abort>:
 80245e2:	b508      	push	{r3, lr}
 80245e4:	2006      	movs	r0, #6
 80245e6:	f000 fc3d 	bl	8024e64 <raise>
 80245ea:	2001      	movs	r0, #1
 80245ec:	f7df f824 	bl	8003638 <_exit>

080245f0 <__assert_func>:
 80245f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80245f2:	461c      	mov	r4, r3
 80245f4:	4b09      	ldr	r3, [pc, #36]	; (802461c <__assert_func+0x2c>)
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	4605      	mov	r5, r0
 80245fa:	68d8      	ldr	r0, [r3, #12]
 80245fc:	b152      	cbz	r2, 8024614 <__assert_func+0x24>
 80245fe:	4b08      	ldr	r3, [pc, #32]	; (8024620 <__assert_func+0x30>)
 8024600:	9100      	str	r1, [sp, #0]
 8024602:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024606:	4907      	ldr	r1, [pc, #28]	; (8024624 <__assert_func+0x34>)
 8024608:	462b      	mov	r3, r5
 802460a:	4622      	mov	r2, r4
 802460c:	f000 f828 	bl	8024660 <fiprintf>
 8024610:	f7ff ffe7 	bl	80245e2 <abort>
 8024614:	4b04      	ldr	r3, [pc, #16]	; (8024628 <__assert_func+0x38>)
 8024616:	461a      	mov	r2, r3
 8024618:	e7f2      	b.n	8024600 <__assert_func+0x10>
 802461a:	bf00      	nop
 802461c:	20000098 	.word	0x20000098
 8024620:	0802979c 	.word	0x0802979c
 8024624:	080297a9 	.word	0x080297a9
 8024628:	080297d7 	.word	0x080297d7

0802462c <atexit>:
 802462c:	2300      	movs	r3, #0
 802462e:	4601      	mov	r1, r0
 8024630:	461a      	mov	r2, r3
 8024632:	4618      	mov	r0, r3
 8024634:	f000 bcf2 	b.w	802501c <__register_exitproc>

08024638 <__cxa_atexit>:
 8024638:	b510      	push	{r4, lr}
 802463a:	4c05      	ldr	r4, [pc, #20]	; (8024650 <__cxa_atexit+0x18>)
 802463c:	4613      	mov	r3, r2
 802463e:	b12c      	cbz	r4, 802464c <__cxa_atexit+0x14>
 8024640:	460a      	mov	r2, r1
 8024642:	4601      	mov	r1, r0
 8024644:	2002      	movs	r0, #2
 8024646:	f000 fce9 	bl	802501c <__register_exitproc>
 802464a:	bd10      	pop	{r4, pc}
 802464c:	4620      	mov	r0, r4
 802464e:	e7fc      	b.n	802464a <__cxa_atexit+0x12>
 8024650:	0802501d 	.word	0x0802501d

08024654 <__errno>:
 8024654:	4b01      	ldr	r3, [pc, #4]	; (802465c <__errno+0x8>)
 8024656:	6818      	ldr	r0, [r3, #0]
 8024658:	4770      	bx	lr
 802465a:	bf00      	nop
 802465c:	20000098 	.word	0x20000098

08024660 <fiprintf>:
 8024660:	b40e      	push	{r1, r2, r3}
 8024662:	b503      	push	{r0, r1, lr}
 8024664:	4601      	mov	r1, r0
 8024666:	ab03      	add	r3, sp, #12
 8024668:	4805      	ldr	r0, [pc, #20]	; (8024680 <fiprintf+0x20>)
 802466a:	f853 2b04 	ldr.w	r2, [r3], #4
 802466e:	6800      	ldr	r0, [r0, #0]
 8024670:	9301      	str	r3, [sp, #4]
 8024672:	f000 f921 	bl	80248b8 <_vfiprintf_r>
 8024676:	b002      	add	sp, #8
 8024678:	f85d eb04 	ldr.w	lr, [sp], #4
 802467c:	b003      	add	sp, #12
 802467e:	4770      	bx	lr
 8024680:	20000098 	.word	0x20000098

08024684 <__libc_init_array>:
 8024684:	b570      	push	{r4, r5, r6, lr}
 8024686:	4e0d      	ldr	r6, [pc, #52]	; (80246bc <__libc_init_array+0x38>)
 8024688:	4c0d      	ldr	r4, [pc, #52]	; (80246c0 <__libc_init_array+0x3c>)
 802468a:	1ba4      	subs	r4, r4, r6
 802468c:	10a4      	asrs	r4, r4, #2
 802468e:	2500      	movs	r5, #0
 8024690:	42a5      	cmp	r5, r4
 8024692:	d109      	bne.n	80246a8 <__libc_init_array+0x24>
 8024694:	4e0b      	ldr	r6, [pc, #44]	; (80246c4 <__libc_init_array+0x40>)
 8024696:	4c0c      	ldr	r4, [pc, #48]	; (80246c8 <__libc_init_array+0x44>)
 8024698:	f000 ffb0 	bl	80255fc <_init>
 802469c:	1ba4      	subs	r4, r4, r6
 802469e:	10a4      	asrs	r4, r4, #2
 80246a0:	2500      	movs	r5, #0
 80246a2:	42a5      	cmp	r5, r4
 80246a4:	d105      	bne.n	80246b2 <__libc_init_array+0x2e>
 80246a6:	bd70      	pop	{r4, r5, r6, pc}
 80246a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80246ac:	4798      	blx	r3
 80246ae:	3501      	adds	r5, #1
 80246b0:	e7ee      	b.n	8024690 <__libc_init_array+0xc>
 80246b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80246b6:	4798      	blx	r3
 80246b8:	3501      	adds	r5, #1
 80246ba:	e7f2      	b.n	80246a2 <__libc_init_array+0x1e>
 80246bc:	08044100 	.word	0x08044100
 80246c0:	08044100 	.word	0x08044100
 80246c4:	08044100 	.word	0x08044100
 80246c8:	08044114 	.word	0x08044114

080246cc <malloc>:
 80246cc:	4b02      	ldr	r3, [pc, #8]	; (80246d8 <malloc+0xc>)
 80246ce:	4601      	mov	r1, r0
 80246d0:	6818      	ldr	r0, [r3, #0]
 80246d2:	f000 b86d 	b.w	80247b0 <_malloc_r>
 80246d6:	bf00      	nop
 80246d8:	20000098 	.word	0x20000098

080246dc <free>:
 80246dc:	4b02      	ldr	r3, [pc, #8]	; (80246e8 <free+0xc>)
 80246de:	4601      	mov	r1, r0
 80246e0:	6818      	ldr	r0, [r3, #0]
 80246e2:	f000 b817 	b.w	8024714 <_free_r>
 80246e6:	bf00      	nop
 80246e8:	20000098 	.word	0x20000098

080246ec <memcpy>:
 80246ec:	b510      	push	{r4, lr}
 80246ee:	1e43      	subs	r3, r0, #1
 80246f0:	440a      	add	r2, r1
 80246f2:	4291      	cmp	r1, r2
 80246f4:	d100      	bne.n	80246f8 <memcpy+0xc>
 80246f6:	bd10      	pop	{r4, pc}
 80246f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80246fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024700:	e7f7      	b.n	80246f2 <memcpy+0x6>

08024702 <memset>:
 8024702:	4402      	add	r2, r0
 8024704:	4603      	mov	r3, r0
 8024706:	4293      	cmp	r3, r2
 8024708:	d100      	bne.n	802470c <memset+0xa>
 802470a:	4770      	bx	lr
 802470c:	f803 1b01 	strb.w	r1, [r3], #1
 8024710:	e7f9      	b.n	8024706 <memset+0x4>
	...

08024714 <_free_r>:
 8024714:	b538      	push	{r3, r4, r5, lr}
 8024716:	4605      	mov	r5, r0
 8024718:	2900      	cmp	r1, #0
 802471a:	d045      	beq.n	80247a8 <_free_r+0x94>
 802471c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024720:	1f0c      	subs	r4, r1, #4
 8024722:	2b00      	cmp	r3, #0
 8024724:	bfb8      	it	lt
 8024726:	18e4      	addlt	r4, r4, r3
 8024728:	f000 feba 	bl	80254a0 <__malloc_lock>
 802472c:	4a1f      	ldr	r2, [pc, #124]	; (80247ac <_free_r+0x98>)
 802472e:	6813      	ldr	r3, [r2, #0]
 8024730:	4610      	mov	r0, r2
 8024732:	b933      	cbnz	r3, 8024742 <_free_r+0x2e>
 8024734:	6063      	str	r3, [r4, #4]
 8024736:	6014      	str	r4, [r2, #0]
 8024738:	4628      	mov	r0, r5
 802473a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802473e:	f000 beb0 	b.w	80254a2 <__malloc_unlock>
 8024742:	42a3      	cmp	r3, r4
 8024744:	d90c      	bls.n	8024760 <_free_r+0x4c>
 8024746:	6821      	ldr	r1, [r4, #0]
 8024748:	1862      	adds	r2, r4, r1
 802474a:	4293      	cmp	r3, r2
 802474c:	bf04      	itt	eq
 802474e:	681a      	ldreq	r2, [r3, #0]
 8024750:	685b      	ldreq	r3, [r3, #4]
 8024752:	6063      	str	r3, [r4, #4]
 8024754:	bf04      	itt	eq
 8024756:	1852      	addeq	r2, r2, r1
 8024758:	6022      	streq	r2, [r4, #0]
 802475a:	6004      	str	r4, [r0, #0]
 802475c:	e7ec      	b.n	8024738 <_free_r+0x24>
 802475e:	4613      	mov	r3, r2
 8024760:	685a      	ldr	r2, [r3, #4]
 8024762:	b10a      	cbz	r2, 8024768 <_free_r+0x54>
 8024764:	42a2      	cmp	r2, r4
 8024766:	d9fa      	bls.n	802475e <_free_r+0x4a>
 8024768:	6819      	ldr	r1, [r3, #0]
 802476a:	1858      	adds	r0, r3, r1
 802476c:	42a0      	cmp	r0, r4
 802476e:	d10b      	bne.n	8024788 <_free_r+0x74>
 8024770:	6820      	ldr	r0, [r4, #0]
 8024772:	4401      	add	r1, r0
 8024774:	1858      	adds	r0, r3, r1
 8024776:	4282      	cmp	r2, r0
 8024778:	6019      	str	r1, [r3, #0]
 802477a:	d1dd      	bne.n	8024738 <_free_r+0x24>
 802477c:	6810      	ldr	r0, [r2, #0]
 802477e:	6852      	ldr	r2, [r2, #4]
 8024780:	605a      	str	r2, [r3, #4]
 8024782:	4401      	add	r1, r0
 8024784:	6019      	str	r1, [r3, #0]
 8024786:	e7d7      	b.n	8024738 <_free_r+0x24>
 8024788:	d902      	bls.n	8024790 <_free_r+0x7c>
 802478a:	230c      	movs	r3, #12
 802478c:	602b      	str	r3, [r5, #0]
 802478e:	e7d3      	b.n	8024738 <_free_r+0x24>
 8024790:	6820      	ldr	r0, [r4, #0]
 8024792:	1821      	adds	r1, r4, r0
 8024794:	428a      	cmp	r2, r1
 8024796:	bf04      	itt	eq
 8024798:	6811      	ldreq	r1, [r2, #0]
 802479a:	6852      	ldreq	r2, [r2, #4]
 802479c:	6062      	str	r2, [r4, #4]
 802479e:	bf04      	itt	eq
 80247a0:	1809      	addeq	r1, r1, r0
 80247a2:	6021      	streq	r1, [r4, #0]
 80247a4:	605c      	str	r4, [r3, #4]
 80247a6:	e7c7      	b.n	8024738 <_free_r+0x24>
 80247a8:	bd38      	pop	{r3, r4, r5, pc}
 80247aa:	bf00      	nop
 80247ac:	2000bd84 	.word	0x2000bd84

080247b0 <_malloc_r>:
 80247b0:	b570      	push	{r4, r5, r6, lr}
 80247b2:	1ccd      	adds	r5, r1, #3
 80247b4:	f025 0503 	bic.w	r5, r5, #3
 80247b8:	3508      	adds	r5, #8
 80247ba:	2d0c      	cmp	r5, #12
 80247bc:	bf38      	it	cc
 80247be:	250c      	movcc	r5, #12
 80247c0:	2d00      	cmp	r5, #0
 80247c2:	4606      	mov	r6, r0
 80247c4:	db01      	blt.n	80247ca <_malloc_r+0x1a>
 80247c6:	42a9      	cmp	r1, r5
 80247c8:	d903      	bls.n	80247d2 <_malloc_r+0x22>
 80247ca:	230c      	movs	r3, #12
 80247cc:	6033      	str	r3, [r6, #0]
 80247ce:	2000      	movs	r0, #0
 80247d0:	bd70      	pop	{r4, r5, r6, pc}
 80247d2:	f000 fe65 	bl	80254a0 <__malloc_lock>
 80247d6:	4a21      	ldr	r2, [pc, #132]	; (802485c <_malloc_r+0xac>)
 80247d8:	6814      	ldr	r4, [r2, #0]
 80247da:	4621      	mov	r1, r4
 80247dc:	b991      	cbnz	r1, 8024804 <_malloc_r+0x54>
 80247de:	4c20      	ldr	r4, [pc, #128]	; (8024860 <_malloc_r+0xb0>)
 80247e0:	6823      	ldr	r3, [r4, #0]
 80247e2:	b91b      	cbnz	r3, 80247ec <_malloc_r+0x3c>
 80247e4:	4630      	mov	r0, r6
 80247e6:	f000 fb05 	bl	8024df4 <_sbrk_r>
 80247ea:	6020      	str	r0, [r4, #0]
 80247ec:	4629      	mov	r1, r5
 80247ee:	4630      	mov	r0, r6
 80247f0:	f000 fb00 	bl	8024df4 <_sbrk_r>
 80247f4:	1c43      	adds	r3, r0, #1
 80247f6:	d124      	bne.n	8024842 <_malloc_r+0x92>
 80247f8:	230c      	movs	r3, #12
 80247fa:	6033      	str	r3, [r6, #0]
 80247fc:	4630      	mov	r0, r6
 80247fe:	f000 fe50 	bl	80254a2 <__malloc_unlock>
 8024802:	e7e4      	b.n	80247ce <_malloc_r+0x1e>
 8024804:	680b      	ldr	r3, [r1, #0]
 8024806:	1b5b      	subs	r3, r3, r5
 8024808:	d418      	bmi.n	802483c <_malloc_r+0x8c>
 802480a:	2b0b      	cmp	r3, #11
 802480c:	d90f      	bls.n	802482e <_malloc_r+0x7e>
 802480e:	600b      	str	r3, [r1, #0]
 8024810:	50cd      	str	r5, [r1, r3]
 8024812:	18cc      	adds	r4, r1, r3
 8024814:	4630      	mov	r0, r6
 8024816:	f000 fe44 	bl	80254a2 <__malloc_unlock>
 802481a:	f104 000b 	add.w	r0, r4, #11
 802481e:	1d23      	adds	r3, r4, #4
 8024820:	f020 0007 	bic.w	r0, r0, #7
 8024824:	1ac3      	subs	r3, r0, r3
 8024826:	d0d3      	beq.n	80247d0 <_malloc_r+0x20>
 8024828:	425a      	negs	r2, r3
 802482a:	50e2      	str	r2, [r4, r3]
 802482c:	e7d0      	b.n	80247d0 <_malloc_r+0x20>
 802482e:	428c      	cmp	r4, r1
 8024830:	684b      	ldr	r3, [r1, #4]
 8024832:	bf16      	itet	ne
 8024834:	6063      	strne	r3, [r4, #4]
 8024836:	6013      	streq	r3, [r2, #0]
 8024838:	460c      	movne	r4, r1
 802483a:	e7eb      	b.n	8024814 <_malloc_r+0x64>
 802483c:	460c      	mov	r4, r1
 802483e:	6849      	ldr	r1, [r1, #4]
 8024840:	e7cc      	b.n	80247dc <_malloc_r+0x2c>
 8024842:	1cc4      	adds	r4, r0, #3
 8024844:	f024 0403 	bic.w	r4, r4, #3
 8024848:	42a0      	cmp	r0, r4
 802484a:	d005      	beq.n	8024858 <_malloc_r+0xa8>
 802484c:	1a21      	subs	r1, r4, r0
 802484e:	4630      	mov	r0, r6
 8024850:	f000 fad0 	bl	8024df4 <_sbrk_r>
 8024854:	3001      	adds	r0, #1
 8024856:	d0cf      	beq.n	80247f8 <_malloc_r+0x48>
 8024858:	6025      	str	r5, [r4, #0]
 802485a:	e7db      	b.n	8024814 <_malloc_r+0x64>
 802485c:	2000bd84 	.word	0x2000bd84
 8024860:	2000bd88 	.word	0x2000bd88

08024864 <__sfputc_r>:
 8024864:	6893      	ldr	r3, [r2, #8]
 8024866:	3b01      	subs	r3, #1
 8024868:	2b00      	cmp	r3, #0
 802486a:	b410      	push	{r4}
 802486c:	6093      	str	r3, [r2, #8]
 802486e:	da08      	bge.n	8024882 <__sfputc_r+0x1e>
 8024870:	6994      	ldr	r4, [r2, #24]
 8024872:	42a3      	cmp	r3, r4
 8024874:	db01      	blt.n	802487a <__sfputc_r+0x16>
 8024876:	290a      	cmp	r1, #10
 8024878:	d103      	bne.n	8024882 <__sfputc_r+0x1e>
 802487a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802487e:	f000 bb0d 	b.w	8024e9c <__swbuf_r>
 8024882:	6813      	ldr	r3, [r2, #0]
 8024884:	1c58      	adds	r0, r3, #1
 8024886:	6010      	str	r0, [r2, #0]
 8024888:	7019      	strb	r1, [r3, #0]
 802488a:	4608      	mov	r0, r1
 802488c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024890:	4770      	bx	lr

08024892 <__sfputs_r>:
 8024892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024894:	4606      	mov	r6, r0
 8024896:	460f      	mov	r7, r1
 8024898:	4614      	mov	r4, r2
 802489a:	18d5      	adds	r5, r2, r3
 802489c:	42ac      	cmp	r4, r5
 802489e:	d101      	bne.n	80248a4 <__sfputs_r+0x12>
 80248a0:	2000      	movs	r0, #0
 80248a2:	e007      	b.n	80248b4 <__sfputs_r+0x22>
 80248a4:	463a      	mov	r2, r7
 80248a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80248aa:	4630      	mov	r0, r6
 80248ac:	f7ff ffda 	bl	8024864 <__sfputc_r>
 80248b0:	1c43      	adds	r3, r0, #1
 80248b2:	d1f3      	bne.n	802489c <__sfputs_r+0xa>
 80248b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080248b8 <_vfiprintf_r>:
 80248b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248bc:	460c      	mov	r4, r1
 80248be:	b09d      	sub	sp, #116	; 0x74
 80248c0:	4617      	mov	r7, r2
 80248c2:	461d      	mov	r5, r3
 80248c4:	4606      	mov	r6, r0
 80248c6:	b118      	cbz	r0, 80248d0 <_vfiprintf_r+0x18>
 80248c8:	6983      	ldr	r3, [r0, #24]
 80248ca:	b90b      	cbnz	r3, 80248d0 <_vfiprintf_r+0x18>
 80248cc:	f000 fcfa 	bl	80252c4 <__sinit>
 80248d0:	4b7c      	ldr	r3, [pc, #496]	; (8024ac4 <_vfiprintf_r+0x20c>)
 80248d2:	429c      	cmp	r4, r3
 80248d4:	d158      	bne.n	8024988 <_vfiprintf_r+0xd0>
 80248d6:	6874      	ldr	r4, [r6, #4]
 80248d8:	89a3      	ldrh	r3, [r4, #12]
 80248da:	0718      	lsls	r0, r3, #28
 80248dc:	d55e      	bpl.n	802499c <_vfiprintf_r+0xe4>
 80248de:	6923      	ldr	r3, [r4, #16]
 80248e0:	2b00      	cmp	r3, #0
 80248e2:	d05b      	beq.n	802499c <_vfiprintf_r+0xe4>
 80248e4:	2300      	movs	r3, #0
 80248e6:	9309      	str	r3, [sp, #36]	; 0x24
 80248e8:	2320      	movs	r3, #32
 80248ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80248ee:	2330      	movs	r3, #48	; 0x30
 80248f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80248f4:	9503      	str	r5, [sp, #12]
 80248f6:	f04f 0b01 	mov.w	fp, #1
 80248fa:	46b8      	mov	r8, r7
 80248fc:	4645      	mov	r5, r8
 80248fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024902:	b10b      	cbz	r3, 8024908 <_vfiprintf_r+0x50>
 8024904:	2b25      	cmp	r3, #37	; 0x25
 8024906:	d154      	bne.n	80249b2 <_vfiprintf_r+0xfa>
 8024908:	ebb8 0a07 	subs.w	sl, r8, r7
 802490c:	d00b      	beq.n	8024926 <_vfiprintf_r+0x6e>
 802490e:	4653      	mov	r3, sl
 8024910:	463a      	mov	r2, r7
 8024912:	4621      	mov	r1, r4
 8024914:	4630      	mov	r0, r6
 8024916:	f7ff ffbc 	bl	8024892 <__sfputs_r>
 802491a:	3001      	adds	r0, #1
 802491c:	f000 80c2 	beq.w	8024aa4 <_vfiprintf_r+0x1ec>
 8024920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024922:	4453      	add	r3, sl
 8024924:	9309      	str	r3, [sp, #36]	; 0x24
 8024926:	f898 3000 	ldrb.w	r3, [r8]
 802492a:	2b00      	cmp	r3, #0
 802492c:	f000 80ba 	beq.w	8024aa4 <_vfiprintf_r+0x1ec>
 8024930:	2300      	movs	r3, #0
 8024932:	f04f 32ff 	mov.w	r2, #4294967295
 8024936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802493a:	9304      	str	r3, [sp, #16]
 802493c:	9307      	str	r3, [sp, #28]
 802493e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024942:	931a      	str	r3, [sp, #104]	; 0x68
 8024944:	46a8      	mov	r8, r5
 8024946:	2205      	movs	r2, #5
 8024948:	f818 1b01 	ldrb.w	r1, [r8], #1
 802494c:	485e      	ldr	r0, [pc, #376]	; (8024ac8 <_vfiprintf_r+0x210>)
 802494e:	f7db fc5f 	bl	8000210 <memchr>
 8024952:	9b04      	ldr	r3, [sp, #16]
 8024954:	bb78      	cbnz	r0, 80249b6 <_vfiprintf_r+0xfe>
 8024956:	06d9      	lsls	r1, r3, #27
 8024958:	bf44      	itt	mi
 802495a:	2220      	movmi	r2, #32
 802495c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024960:	071a      	lsls	r2, r3, #28
 8024962:	bf44      	itt	mi
 8024964:	222b      	movmi	r2, #43	; 0x2b
 8024966:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802496a:	782a      	ldrb	r2, [r5, #0]
 802496c:	2a2a      	cmp	r2, #42	; 0x2a
 802496e:	d02a      	beq.n	80249c6 <_vfiprintf_r+0x10e>
 8024970:	9a07      	ldr	r2, [sp, #28]
 8024972:	46a8      	mov	r8, r5
 8024974:	2000      	movs	r0, #0
 8024976:	250a      	movs	r5, #10
 8024978:	4641      	mov	r1, r8
 802497a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802497e:	3b30      	subs	r3, #48	; 0x30
 8024980:	2b09      	cmp	r3, #9
 8024982:	d969      	bls.n	8024a58 <_vfiprintf_r+0x1a0>
 8024984:	b360      	cbz	r0, 80249e0 <_vfiprintf_r+0x128>
 8024986:	e024      	b.n	80249d2 <_vfiprintf_r+0x11a>
 8024988:	4b50      	ldr	r3, [pc, #320]	; (8024acc <_vfiprintf_r+0x214>)
 802498a:	429c      	cmp	r4, r3
 802498c:	d101      	bne.n	8024992 <_vfiprintf_r+0xda>
 802498e:	68b4      	ldr	r4, [r6, #8]
 8024990:	e7a2      	b.n	80248d8 <_vfiprintf_r+0x20>
 8024992:	4b4f      	ldr	r3, [pc, #316]	; (8024ad0 <_vfiprintf_r+0x218>)
 8024994:	429c      	cmp	r4, r3
 8024996:	bf08      	it	eq
 8024998:	68f4      	ldreq	r4, [r6, #12]
 802499a:	e79d      	b.n	80248d8 <_vfiprintf_r+0x20>
 802499c:	4621      	mov	r1, r4
 802499e:	4630      	mov	r0, r6
 80249a0:	f000 face 	bl	8024f40 <__swsetup_r>
 80249a4:	2800      	cmp	r0, #0
 80249a6:	d09d      	beq.n	80248e4 <_vfiprintf_r+0x2c>
 80249a8:	f04f 30ff 	mov.w	r0, #4294967295
 80249ac:	b01d      	add	sp, #116	; 0x74
 80249ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249b2:	46a8      	mov	r8, r5
 80249b4:	e7a2      	b.n	80248fc <_vfiprintf_r+0x44>
 80249b6:	4a44      	ldr	r2, [pc, #272]	; (8024ac8 <_vfiprintf_r+0x210>)
 80249b8:	1a80      	subs	r0, r0, r2
 80249ba:	fa0b f000 	lsl.w	r0, fp, r0
 80249be:	4318      	orrs	r0, r3
 80249c0:	9004      	str	r0, [sp, #16]
 80249c2:	4645      	mov	r5, r8
 80249c4:	e7be      	b.n	8024944 <_vfiprintf_r+0x8c>
 80249c6:	9a03      	ldr	r2, [sp, #12]
 80249c8:	1d11      	adds	r1, r2, #4
 80249ca:	6812      	ldr	r2, [r2, #0]
 80249cc:	9103      	str	r1, [sp, #12]
 80249ce:	2a00      	cmp	r2, #0
 80249d0:	db01      	blt.n	80249d6 <_vfiprintf_r+0x11e>
 80249d2:	9207      	str	r2, [sp, #28]
 80249d4:	e004      	b.n	80249e0 <_vfiprintf_r+0x128>
 80249d6:	4252      	negs	r2, r2
 80249d8:	f043 0302 	orr.w	r3, r3, #2
 80249dc:	9207      	str	r2, [sp, #28]
 80249de:	9304      	str	r3, [sp, #16]
 80249e0:	f898 3000 	ldrb.w	r3, [r8]
 80249e4:	2b2e      	cmp	r3, #46	; 0x2e
 80249e6:	d10e      	bne.n	8024a06 <_vfiprintf_r+0x14e>
 80249e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80249ec:	2b2a      	cmp	r3, #42	; 0x2a
 80249ee:	d138      	bne.n	8024a62 <_vfiprintf_r+0x1aa>
 80249f0:	9b03      	ldr	r3, [sp, #12]
 80249f2:	1d1a      	adds	r2, r3, #4
 80249f4:	681b      	ldr	r3, [r3, #0]
 80249f6:	9203      	str	r2, [sp, #12]
 80249f8:	2b00      	cmp	r3, #0
 80249fa:	bfb8      	it	lt
 80249fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8024a00:	f108 0802 	add.w	r8, r8, #2
 8024a04:	9305      	str	r3, [sp, #20]
 8024a06:	4d33      	ldr	r5, [pc, #204]	; (8024ad4 <_vfiprintf_r+0x21c>)
 8024a08:	f898 1000 	ldrb.w	r1, [r8]
 8024a0c:	2203      	movs	r2, #3
 8024a0e:	4628      	mov	r0, r5
 8024a10:	f7db fbfe 	bl	8000210 <memchr>
 8024a14:	b140      	cbz	r0, 8024a28 <_vfiprintf_r+0x170>
 8024a16:	2340      	movs	r3, #64	; 0x40
 8024a18:	1b40      	subs	r0, r0, r5
 8024a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8024a1e:	9b04      	ldr	r3, [sp, #16]
 8024a20:	4303      	orrs	r3, r0
 8024a22:	f108 0801 	add.w	r8, r8, #1
 8024a26:	9304      	str	r3, [sp, #16]
 8024a28:	f898 1000 	ldrb.w	r1, [r8]
 8024a2c:	482a      	ldr	r0, [pc, #168]	; (8024ad8 <_vfiprintf_r+0x220>)
 8024a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024a32:	2206      	movs	r2, #6
 8024a34:	f108 0701 	add.w	r7, r8, #1
 8024a38:	f7db fbea 	bl	8000210 <memchr>
 8024a3c:	2800      	cmp	r0, #0
 8024a3e:	d037      	beq.n	8024ab0 <_vfiprintf_r+0x1f8>
 8024a40:	4b26      	ldr	r3, [pc, #152]	; (8024adc <_vfiprintf_r+0x224>)
 8024a42:	bb1b      	cbnz	r3, 8024a8c <_vfiprintf_r+0x1d4>
 8024a44:	9b03      	ldr	r3, [sp, #12]
 8024a46:	3307      	adds	r3, #7
 8024a48:	f023 0307 	bic.w	r3, r3, #7
 8024a4c:	3308      	adds	r3, #8
 8024a4e:	9303      	str	r3, [sp, #12]
 8024a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a52:	444b      	add	r3, r9
 8024a54:	9309      	str	r3, [sp, #36]	; 0x24
 8024a56:	e750      	b.n	80248fa <_vfiprintf_r+0x42>
 8024a58:	fb05 3202 	mla	r2, r5, r2, r3
 8024a5c:	2001      	movs	r0, #1
 8024a5e:	4688      	mov	r8, r1
 8024a60:	e78a      	b.n	8024978 <_vfiprintf_r+0xc0>
 8024a62:	2300      	movs	r3, #0
 8024a64:	f108 0801 	add.w	r8, r8, #1
 8024a68:	9305      	str	r3, [sp, #20]
 8024a6a:	4619      	mov	r1, r3
 8024a6c:	250a      	movs	r5, #10
 8024a6e:	4640      	mov	r0, r8
 8024a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024a74:	3a30      	subs	r2, #48	; 0x30
 8024a76:	2a09      	cmp	r2, #9
 8024a78:	d903      	bls.n	8024a82 <_vfiprintf_r+0x1ca>
 8024a7a:	2b00      	cmp	r3, #0
 8024a7c:	d0c3      	beq.n	8024a06 <_vfiprintf_r+0x14e>
 8024a7e:	9105      	str	r1, [sp, #20]
 8024a80:	e7c1      	b.n	8024a06 <_vfiprintf_r+0x14e>
 8024a82:	fb05 2101 	mla	r1, r5, r1, r2
 8024a86:	2301      	movs	r3, #1
 8024a88:	4680      	mov	r8, r0
 8024a8a:	e7f0      	b.n	8024a6e <_vfiprintf_r+0x1b6>
 8024a8c:	ab03      	add	r3, sp, #12
 8024a8e:	9300      	str	r3, [sp, #0]
 8024a90:	4622      	mov	r2, r4
 8024a92:	4b13      	ldr	r3, [pc, #76]	; (8024ae0 <_vfiprintf_r+0x228>)
 8024a94:	a904      	add	r1, sp, #16
 8024a96:	4630      	mov	r0, r6
 8024a98:	f3af 8000 	nop.w
 8024a9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024aa0:	4681      	mov	r9, r0
 8024aa2:	d1d5      	bne.n	8024a50 <_vfiprintf_r+0x198>
 8024aa4:	89a3      	ldrh	r3, [r4, #12]
 8024aa6:	065b      	lsls	r3, r3, #25
 8024aa8:	f53f af7e 	bmi.w	80249a8 <_vfiprintf_r+0xf0>
 8024aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024aae:	e77d      	b.n	80249ac <_vfiprintf_r+0xf4>
 8024ab0:	ab03      	add	r3, sp, #12
 8024ab2:	9300      	str	r3, [sp, #0]
 8024ab4:	4622      	mov	r2, r4
 8024ab6:	4b0a      	ldr	r3, [pc, #40]	; (8024ae0 <_vfiprintf_r+0x228>)
 8024ab8:	a904      	add	r1, sp, #16
 8024aba:	4630      	mov	r0, r6
 8024abc:	f000 f888 	bl	8024bd0 <_printf_i>
 8024ac0:	e7ec      	b.n	8024a9c <_vfiprintf_r+0x1e4>
 8024ac2:	bf00      	nop
 8024ac4:	08029834 	.word	0x08029834
 8024ac8:	080297dc 	.word	0x080297dc
 8024acc:	08029854 	.word	0x08029854
 8024ad0:	08029814 	.word	0x08029814
 8024ad4:	080297e2 	.word	0x080297e2
 8024ad8:	080297e6 	.word	0x080297e6
 8024adc:	00000000 	.word	0x00000000
 8024ae0:	08024893 	.word	0x08024893

08024ae4 <_printf_common>:
 8024ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ae8:	4691      	mov	r9, r2
 8024aea:	461f      	mov	r7, r3
 8024aec:	688a      	ldr	r2, [r1, #8]
 8024aee:	690b      	ldr	r3, [r1, #16]
 8024af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024af4:	4293      	cmp	r3, r2
 8024af6:	bfb8      	it	lt
 8024af8:	4613      	movlt	r3, r2
 8024afa:	f8c9 3000 	str.w	r3, [r9]
 8024afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024b02:	4606      	mov	r6, r0
 8024b04:	460c      	mov	r4, r1
 8024b06:	b112      	cbz	r2, 8024b0e <_printf_common+0x2a>
 8024b08:	3301      	adds	r3, #1
 8024b0a:	f8c9 3000 	str.w	r3, [r9]
 8024b0e:	6823      	ldr	r3, [r4, #0]
 8024b10:	0699      	lsls	r1, r3, #26
 8024b12:	bf42      	ittt	mi
 8024b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8024b18:	3302      	addmi	r3, #2
 8024b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8024b1e:	6825      	ldr	r5, [r4, #0]
 8024b20:	f015 0506 	ands.w	r5, r5, #6
 8024b24:	d107      	bne.n	8024b36 <_printf_common+0x52>
 8024b26:	f104 0a19 	add.w	sl, r4, #25
 8024b2a:	68e3      	ldr	r3, [r4, #12]
 8024b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8024b30:	1a9b      	subs	r3, r3, r2
 8024b32:	42ab      	cmp	r3, r5
 8024b34:	dc28      	bgt.n	8024b88 <_printf_common+0xa4>
 8024b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8024b3a:	6822      	ldr	r2, [r4, #0]
 8024b3c:	3300      	adds	r3, #0
 8024b3e:	bf18      	it	ne
 8024b40:	2301      	movne	r3, #1
 8024b42:	0692      	lsls	r2, r2, #26
 8024b44:	d42d      	bmi.n	8024ba2 <_printf_common+0xbe>
 8024b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024b4a:	4639      	mov	r1, r7
 8024b4c:	4630      	mov	r0, r6
 8024b4e:	47c0      	blx	r8
 8024b50:	3001      	adds	r0, #1
 8024b52:	d020      	beq.n	8024b96 <_printf_common+0xb2>
 8024b54:	6823      	ldr	r3, [r4, #0]
 8024b56:	68e5      	ldr	r5, [r4, #12]
 8024b58:	f8d9 2000 	ldr.w	r2, [r9]
 8024b5c:	f003 0306 	and.w	r3, r3, #6
 8024b60:	2b04      	cmp	r3, #4
 8024b62:	bf08      	it	eq
 8024b64:	1aad      	subeq	r5, r5, r2
 8024b66:	68a3      	ldr	r3, [r4, #8]
 8024b68:	6922      	ldr	r2, [r4, #16]
 8024b6a:	bf0c      	ite	eq
 8024b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024b70:	2500      	movne	r5, #0
 8024b72:	4293      	cmp	r3, r2
 8024b74:	bfc4      	itt	gt
 8024b76:	1a9b      	subgt	r3, r3, r2
 8024b78:	18ed      	addgt	r5, r5, r3
 8024b7a:	f04f 0900 	mov.w	r9, #0
 8024b7e:	341a      	adds	r4, #26
 8024b80:	454d      	cmp	r5, r9
 8024b82:	d11a      	bne.n	8024bba <_printf_common+0xd6>
 8024b84:	2000      	movs	r0, #0
 8024b86:	e008      	b.n	8024b9a <_printf_common+0xb6>
 8024b88:	2301      	movs	r3, #1
 8024b8a:	4652      	mov	r2, sl
 8024b8c:	4639      	mov	r1, r7
 8024b8e:	4630      	mov	r0, r6
 8024b90:	47c0      	blx	r8
 8024b92:	3001      	adds	r0, #1
 8024b94:	d103      	bne.n	8024b9e <_printf_common+0xba>
 8024b96:	f04f 30ff 	mov.w	r0, #4294967295
 8024b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b9e:	3501      	adds	r5, #1
 8024ba0:	e7c3      	b.n	8024b2a <_printf_common+0x46>
 8024ba2:	18e1      	adds	r1, r4, r3
 8024ba4:	1c5a      	adds	r2, r3, #1
 8024ba6:	2030      	movs	r0, #48	; 0x30
 8024ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024bac:	4422      	add	r2, r4
 8024bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024bb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024bb6:	3302      	adds	r3, #2
 8024bb8:	e7c5      	b.n	8024b46 <_printf_common+0x62>
 8024bba:	2301      	movs	r3, #1
 8024bbc:	4622      	mov	r2, r4
 8024bbe:	4639      	mov	r1, r7
 8024bc0:	4630      	mov	r0, r6
 8024bc2:	47c0      	blx	r8
 8024bc4:	3001      	adds	r0, #1
 8024bc6:	d0e6      	beq.n	8024b96 <_printf_common+0xb2>
 8024bc8:	f109 0901 	add.w	r9, r9, #1
 8024bcc:	e7d8      	b.n	8024b80 <_printf_common+0x9c>
	...

08024bd0 <_printf_i>:
 8024bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8024bd8:	460c      	mov	r4, r1
 8024bda:	7e09      	ldrb	r1, [r1, #24]
 8024bdc:	b085      	sub	sp, #20
 8024bde:	296e      	cmp	r1, #110	; 0x6e
 8024be0:	4617      	mov	r7, r2
 8024be2:	4606      	mov	r6, r0
 8024be4:	4698      	mov	r8, r3
 8024be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024be8:	f000 80b3 	beq.w	8024d52 <_printf_i+0x182>
 8024bec:	d822      	bhi.n	8024c34 <_printf_i+0x64>
 8024bee:	2963      	cmp	r1, #99	; 0x63
 8024bf0:	d036      	beq.n	8024c60 <_printf_i+0x90>
 8024bf2:	d80a      	bhi.n	8024c0a <_printf_i+0x3a>
 8024bf4:	2900      	cmp	r1, #0
 8024bf6:	f000 80b9 	beq.w	8024d6c <_printf_i+0x19c>
 8024bfa:	2958      	cmp	r1, #88	; 0x58
 8024bfc:	f000 8083 	beq.w	8024d06 <_printf_i+0x136>
 8024c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8024c08:	e032      	b.n	8024c70 <_printf_i+0xa0>
 8024c0a:	2964      	cmp	r1, #100	; 0x64
 8024c0c:	d001      	beq.n	8024c12 <_printf_i+0x42>
 8024c0e:	2969      	cmp	r1, #105	; 0x69
 8024c10:	d1f6      	bne.n	8024c00 <_printf_i+0x30>
 8024c12:	6820      	ldr	r0, [r4, #0]
 8024c14:	6813      	ldr	r3, [r2, #0]
 8024c16:	0605      	lsls	r5, r0, #24
 8024c18:	f103 0104 	add.w	r1, r3, #4
 8024c1c:	d52a      	bpl.n	8024c74 <_printf_i+0xa4>
 8024c1e:	681b      	ldr	r3, [r3, #0]
 8024c20:	6011      	str	r1, [r2, #0]
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	da03      	bge.n	8024c2e <_printf_i+0x5e>
 8024c26:	222d      	movs	r2, #45	; 0x2d
 8024c28:	425b      	negs	r3, r3
 8024c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8024c2e:	486f      	ldr	r0, [pc, #444]	; (8024dec <_printf_i+0x21c>)
 8024c30:	220a      	movs	r2, #10
 8024c32:	e039      	b.n	8024ca8 <_printf_i+0xd8>
 8024c34:	2973      	cmp	r1, #115	; 0x73
 8024c36:	f000 809d 	beq.w	8024d74 <_printf_i+0x1a4>
 8024c3a:	d808      	bhi.n	8024c4e <_printf_i+0x7e>
 8024c3c:	296f      	cmp	r1, #111	; 0x6f
 8024c3e:	d020      	beq.n	8024c82 <_printf_i+0xb2>
 8024c40:	2970      	cmp	r1, #112	; 0x70
 8024c42:	d1dd      	bne.n	8024c00 <_printf_i+0x30>
 8024c44:	6823      	ldr	r3, [r4, #0]
 8024c46:	f043 0320 	orr.w	r3, r3, #32
 8024c4a:	6023      	str	r3, [r4, #0]
 8024c4c:	e003      	b.n	8024c56 <_printf_i+0x86>
 8024c4e:	2975      	cmp	r1, #117	; 0x75
 8024c50:	d017      	beq.n	8024c82 <_printf_i+0xb2>
 8024c52:	2978      	cmp	r1, #120	; 0x78
 8024c54:	d1d4      	bne.n	8024c00 <_printf_i+0x30>
 8024c56:	2378      	movs	r3, #120	; 0x78
 8024c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024c5c:	4864      	ldr	r0, [pc, #400]	; (8024df0 <_printf_i+0x220>)
 8024c5e:	e055      	b.n	8024d0c <_printf_i+0x13c>
 8024c60:	6813      	ldr	r3, [r2, #0]
 8024c62:	1d19      	adds	r1, r3, #4
 8024c64:	681b      	ldr	r3, [r3, #0]
 8024c66:	6011      	str	r1, [r2, #0]
 8024c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024c70:	2301      	movs	r3, #1
 8024c72:	e08c      	b.n	8024d8e <_printf_i+0x1be>
 8024c74:	681b      	ldr	r3, [r3, #0]
 8024c76:	6011      	str	r1, [r2, #0]
 8024c78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024c7c:	bf18      	it	ne
 8024c7e:	b21b      	sxthne	r3, r3
 8024c80:	e7cf      	b.n	8024c22 <_printf_i+0x52>
 8024c82:	6813      	ldr	r3, [r2, #0]
 8024c84:	6825      	ldr	r5, [r4, #0]
 8024c86:	1d18      	adds	r0, r3, #4
 8024c88:	6010      	str	r0, [r2, #0]
 8024c8a:	0628      	lsls	r0, r5, #24
 8024c8c:	d501      	bpl.n	8024c92 <_printf_i+0xc2>
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	e002      	b.n	8024c98 <_printf_i+0xc8>
 8024c92:	0668      	lsls	r0, r5, #25
 8024c94:	d5fb      	bpl.n	8024c8e <_printf_i+0xbe>
 8024c96:	881b      	ldrh	r3, [r3, #0]
 8024c98:	4854      	ldr	r0, [pc, #336]	; (8024dec <_printf_i+0x21c>)
 8024c9a:	296f      	cmp	r1, #111	; 0x6f
 8024c9c:	bf14      	ite	ne
 8024c9e:	220a      	movne	r2, #10
 8024ca0:	2208      	moveq	r2, #8
 8024ca2:	2100      	movs	r1, #0
 8024ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024ca8:	6865      	ldr	r5, [r4, #4]
 8024caa:	60a5      	str	r5, [r4, #8]
 8024cac:	2d00      	cmp	r5, #0
 8024cae:	f2c0 8095 	blt.w	8024ddc <_printf_i+0x20c>
 8024cb2:	6821      	ldr	r1, [r4, #0]
 8024cb4:	f021 0104 	bic.w	r1, r1, #4
 8024cb8:	6021      	str	r1, [r4, #0]
 8024cba:	2b00      	cmp	r3, #0
 8024cbc:	d13d      	bne.n	8024d3a <_printf_i+0x16a>
 8024cbe:	2d00      	cmp	r5, #0
 8024cc0:	f040 808e 	bne.w	8024de0 <_printf_i+0x210>
 8024cc4:	4665      	mov	r5, ip
 8024cc6:	2a08      	cmp	r2, #8
 8024cc8:	d10b      	bne.n	8024ce2 <_printf_i+0x112>
 8024cca:	6823      	ldr	r3, [r4, #0]
 8024ccc:	07db      	lsls	r3, r3, #31
 8024cce:	d508      	bpl.n	8024ce2 <_printf_i+0x112>
 8024cd0:	6923      	ldr	r3, [r4, #16]
 8024cd2:	6862      	ldr	r2, [r4, #4]
 8024cd4:	429a      	cmp	r2, r3
 8024cd6:	bfde      	ittt	le
 8024cd8:	2330      	movle	r3, #48	; 0x30
 8024cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024cde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024ce2:	ebac 0305 	sub.w	r3, ip, r5
 8024ce6:	6123      	str	r3, [r4, #16]
 8024ce8:	f8cd 8000 	str.w	r8, [sp]
 8024cec:	463b      	mov	r3, r7
 8024cee:	aa03      	add	r2, sp, #12
 8024cf0:	4621      	mov	r1, r4
 8024cf2:	4630      	mov	r0, r6
 8024cf4:	f7ff fef6 	bl	8024ae4 <_printf_common>
 8024cf8:	3001      	adds	r0, #1
 8024cfa:	d14d      	bne.n	8024d98 <_printf_i+0x1c8>
 8024cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8024d00:	b005      	add	sp, #20
 8024d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024d06:	4839      	ldr	r0, [pc, #228]	; (8024dec <_printf_i+0x21c>)
 8024d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8024d0c:	6813      	ldr	r3, [r2, #0]
 8024d0e:	6821      	ldr	r1, [r4, #0]
 8024d10:	1d1d      	adds	r5, r3, #4
 8024d12:	681b      	ldr	r3, [r3, #0]
 8024d14:	6015      	str	r5, [r2, #0]
 8024d16:	060a      	lsls	r2, r1, #24
 8024d18:	d50b      	bpl.n	8024d32 <_printf_i+0x162>
 8024d1a:	07ca      	lsls	r2, r1, #31
 8024d1c:	bf44      	itt	mi
 8024d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8024d22:	6021      	strmi	r1, [r4, #0]
 8024d24:	b91b      	cbnz	r3, 8024d2e <_printf_i+0x15e>
 8024d26:	6822      	ldr	r2, [r4, #0]
 8024d28:	f022 0220 	bic.w	r2, r2, #32
 8024d2c:	6022      	str	r2, [r4, #0]
 8024d2e:	2210      	movs	r2, #16
 8024d30:	e7b7      	b.n	8024ca2 <_printf_i+0xd2>
 8024d32:	064d      	lsls	r5, r1, #25
 8024d34:	bf48      	it	mi
 8024d36:	b29b      	uxthmi	r3, r3
 8024d38:	e7ef      	b.n	8024d1a <_printf_i+0x14a>
 8024d3a:	4665      	mov	r5, ip
 8024d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8024d40:	fb02 3311 	mls	r3, r2, r1, r3
 8024d44:	5cc3      	ldrb	r3, [r0, r3]
 8024d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8024d4a:	460b      	mov	r3, r1
 8024d4c:	2900      	cmp	r1, #0
 8024d4e:	d1f5      	bne.n	8024d3c <_printf_i+0x16c>
 8024d50:	e7b9      	b.n	8024cc6 <_printf_i+0xf6>
 8024d52:	6813      	ldr	r3, [r2, #0]
 8024d54:	6825      	ldr	r5, [r4, #0]
 8024d56:	6961      	ldr	r1, [r4, #20]
 8024d58:	1d18      	adds	r0, r3, #4
 8024d5a:	6010      	str	r0, [r2, #0]
 8024d5c:	0628      	lsls	r0, r5, #24
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	d501      	bpl.n	8024d66 <_printf_i+0x196>
 8024d62:	6019      	str	r1, [r3, #0]
 8024d64:	e002      	b.n	8024d6c <_printf_i+0x19c>
 8024d66:	066a      	lsls	r2, r5, #25
 8024d68:	d5fb      	bpl.n	8024d62 <_printf_i+0x192>
 8024d6a:	8019      	strh	r1, [r3, #0]
 8024d6c:	2300      	movs	r3, #0
 8024d6e:	6123      	str	r3, [r4, #16]
 8024d70:	4665      	mov	r5, ip
 8024d72:	e7b9      	b.n	8024ce8 <_printf_i+0x118>
 8024d74:	6813      	ldr	r3, [r2, #0]
 8024d76:	1d19      	adds	r1, r3, #4
 8024d78:	6011      	str	r1, [r2, #0]
 8024d7a:	681d      	ldr	r5, [r3, #0]
 8024d7c:	6862      	ldr	r2, [r4, #4]
 8024d7e:	2100      	movs	r1, #0
 8024d80:	4628      	mov	r0, r5
 8024d82:	f7db fa45 	bl	8000210 <memchr>
 8024d86:	b108      	cbz	r0, 8024d8c <_printf_i+0x1bc>
 8024d88:	1b40      	subs	r0, r0, r5
 8024d8a:	6060      	str	r0, [r4, #4]
 8024d8c:	6863      	ldr	r3, [r4, #4]
 8024d8e:	6123      	str	r3, [r4, #16]
 8024d90:	2300      	movs	r3, #0
 8024d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024d96:	e7a7      	b.n	8024ce8 <_printf_i+0x118>
 8024d98:	6923      	ldr	r3, [r4, #16]
 8024d9a:	462a      	mov	r2, r5
 8024d9c:	4639      	mov	r1, r7
 8024d9e:	4630      	mov	r0, r6
 8024da0:	47c0      	blx	r8
 8024da2:	3001      	adds	r0, #1
 8024da4:	d0aa      	beq.n	8024cfc <_printf_i+0x12c>
 8024da6:	6823      	ldr	r3, [r4, #0]
 8024da8:	079b      	lsls	r3, r3, #30
 8024daa:	d413      	bmi.n	8024dd4 <_printf_i+0x204>
 8024dac:	68e0      	ldr	r0, [r4, #12]
 8024dae:	9b03      	ldr	r3, [sp, #12]
 8024db0:	4298      	cmp	r0, r3
 8024db2:	bfb8      	it	lt
 8024db4:	4618      	movlt	r0, r3
 8024db6:	e7a3      	b.n	8024d00 <_printf_i+0x130>
 8024db8:	2301      	movs	r3, #1
 8024dba:	464a      	mov	r2, r9
 8024dbc:	4639      	mov	r1, r7
 8024dbe:	4630      	mov	r0, r6
 8024dc0:	47c0      	blx	r8
 8024dc2:	3001      	adds	r0, #1
 8024dc4:	d09a      	beq.n	8024cfc <_printf_i+0x12c>
 8024dc6:	3501      	adds	r5, #1
 8024dc8:	68e3      	ldr	r3, [r4, #12]
 8024dca:	9a03      	ldr	r2, [sp, #12]
 8024dcc:	1a9b      	subs	r3, r3, r2
 8024dce:	42ab      	cmp	r3, r5
 8024dd0:	dcf2      	bgt.n	8024db8 <_printf_i+0x1e8>
 8024dd2:	e7eb      	b.n	8024dac <_printf_i+0x1dc>
 8024dd4:	2500      	movs	r5, #0
 8024dd6:	f104 0919 	add.w	r9, r4, #25
 8024dda:	e7f5      	b.n	8024dc8 <_printf_i+0x1f8>
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d1ac      	bne.n	8024d3a <_printf_i+0x16a>
 8024de0:	7803      	ldrb	r3, [r0, #0]
 8024de2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024de6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024dea:	e76c      	b.n	8024cc6 <_printf_i+0xf6>
 8024dec:	080297ed 	.word	0x080297ed
 8024df0:	080297fe 	.word	0x080297fe

08024df4 <_sbrk_r>:
 8024df4:	b538      	push	{r3, r4, r5, lr}
 8024df6:	4c06      	ldr	r4, [pc, #24]	; (8024e10 <_sbrk_r+0x1c>)
 8024df8:	2300      	movs	r3, #0
 8024dfa:	4605      	mov	r5, r0
 8024dfc:	4608      	mov	r0, r1
 8024dfe:	6023      	str	r3, [r4, #0]
 8024e00:	f7de fc92 	bl	8003728 <_sbrk>
 8024e04:	1c43      	adds	r3, r0, #1
 8024e06:	d102      	bne.n	8024e0e <_sbrk_r+0x1a>
 8024e08:	6823      	ldr	r3, [r4, #0]
 8024e0a:	b103      	cbz	r3, 8024e0e <_sbrk_r+0x1a>
 8024e0c:	602b      	str	r3, [r5, #0]
 8024e0e:	bd38      	pop	{r3, r4, r5, pc}
 8024e10:	2000cb28 	.word	0x2000cb28

08024e14 <_raise_r>:
 8024e14:	291f      	cmp	r1, #31
 8024e16:	b538      	push	{r3, r4, r5, lr}
 8024e18:	4604      	mov	r4, r0
 8024e1a:	460d      	mov	r5, r1
 8024e1c:	d904      	bls.n	8024e28 <_raise_r+0x14>
 8024e1e:	2316      	movs	r3, #22
 8024e20:	6003      	str	r3, [r0, #0]
 8024e22:	f04f 30ff 	mov.w	r0, #4294967295
 8024e26:	bd38      	pop	{r3, r4, r5, pc}
 8024e28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024e2a:	b112      	cbz	r2, 8024e32 <_raise_r+0x1e>
 8024e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024e30:	b94b      	cbnz	r3, 8024e46 <_raise_r+0x32>
 8024e32:	4620      	mov	r0, r4
 8024e34:	f000 f830 	bl	8024e98 <_getpid_r>
 8024e38:	462a      	mov	r2, r5
 8024e3a:	4601      	mov	r1, r0
 8024e3c:	4620      	mov	r0, r4
 8024e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e42:	f000 b817 	b.w	8024e74 <_kill_r>
 8024e46:	2b01      	cmp	r3, #1
 8024e48:	d00a      	beq.n	8024e60 <_raise_r+0x4c>
 8024e4a:	1c59      	adds	r1, r3, #1
 8024e4c:	d103      	bne.n	8024e56 <_raise_r+0x42>
 8024e4e:	2316      	movs	r3, #22
 8024e50:	6003      	str	r3, [r0, #0]
 8024e52:	2001      	movs	r0, #1
 8024e54:	e7e7      	b.n	8024e26 <_raise_r+0x12>
 8024e56:	2400      	movs	r4, #0
 8024e58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024e5c:	4628      	mov	r0, r5
 8024e5e:	4798      	blx	r3
 8024e60:	2000      	movs	r0, #0
 8024e62:	e7e0      	b.n	8024e26 <_raise_r+0x12>

08024e64 <raise>:
 8024e64:	4b02      	ldr	r3, [pc, #8]	; (8024e70 <raise+0xc>)
 8024e66:	4601      	mov	r1, r0
 8024e68:	6818      	ldr	r0, [r3, #0]
 8024e6a:	f7ff bfd3 	b.w	8024e14 <_raise_r>
 8024e6e:	bf00      	nop
 8024e70:	20000098 	.word	0x20000098

08024e74 <_kill_r>:
 8024e74:	b538      	push	{r3, r4, r5, lr}
 8024e76:	4c07      	ldr	r4, [pc, #28]	; (8024e94 <_kill_r+0x20>)
 8024e78:	2300      	movs	r3, #0
 8024e7a:	4605      	mov	r5, r0
 8024e7c:	4608      	mov	r0, r1
 8024e7e:	4611      	mov	r1, r2
 8024e80:	6023      	str	r3, [r4, #0]
 8024e82:	f7de fbc9 	bl	8003618 <_kill>
 8024e86:	1c43      	adds	r3, r0, #1
 8024e88:	d102      	bne.n	8024e90 <_kill_r+0x1c>
 8024e8a:	6823      	ldr	r3, [r4, #0]
 8024e8c:	b103      	cbz	r3, 8024e90 <_kill_r+0x1c>
 8024e8e:	602b      	str	r3, [r5, #0]
 8024e90:	bd38      	pop	{r3, r4, r5, pc}
 8024e92:	bf00      	nop
 8024e94:	2000cb28 	.word	0x2000cb28

08024e98 <_getpid_r>:
 8024e98:	f7de bbb6 	b.w	8003608 <_getpid>

08024e9c <__swbuf_r>:
 8024e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e9e:	460e      	mov	r6, r1
 8024ea0:	4614      	mov	r4, r2
 8024ea2:	4605      	mov	r5, r0
 8024ea4:	b118      	cbz	r0, 8024eae <__swbuf_r+0x12>
 8024ea6:	6983      	ldr	r3, [r0, #24]
 8024ea8:	b90b      	cbnz	r3, 8024eae <__swbuf_r+0x12>
 8024eaa:	f000 fa0b 	bl	80252c4 <__sinit>
 8024eae:	4b21      	ldr	r3, [pc, #132]	; (8024f34 <__swbuf_r+0x98>)
 8024eb0:	429c      	cmp	r4, r3
 8024eb2:	d12a      	bne.n	8024f0a <__swbuf_r+0x6e>
 8024eb4:	686c      	ldr	r4, [r5, #4]
 8024eb6:	69a3      	ldr	r3, [r4, #24]
 8024eb8:	60a3      	str	r3, [r4, #8]
 8024eba:	89a3      	ldrh	r3, [r4, #12]
 8024ebc:	071a      	lsls	r2, r3, #28
 8024ebe:	d52e      	bpl.n	8024f1e <__swbuf_r+0x82>
 8024ec0:	6923      	ldr	r3, [r4, #16]
 8024ec2:	b363      	cbz	r3, 8024f1e <__swbuf_r+0x82>
 8024ec4:	6923      	ldr	r3, [r4, #16]
 8024ec6:	6820      	ldr	r0, [r4, #0]
 8024ec8:	1ac0      	subs	r0, r0, r3
 8024eca:	6963      	ldr	r3, [r4, #20]
 8024ecc:	b2f6      	uxtb	r6, r6
 8024ece:	4283      	cmp	r3, r0
 8024ed0:	4637      	mov	r7, r6
 8024ed2:	dc04      	bgt.n	8024ede <__swbuf_r+0x42>
 8024ed4:	4621      	mov	r1, r4
 8024ed6:	4628      	mov	r0, r5
 8024ed8:	f000 f98a 	bl	80251f0 <_fflush_r>
 8024edc:	bb28      	cbnz	r0, 8024f2a <__swbuf_r+0x8e>
 8024ede:	68a3      	ldr	r3, [r4, #8]
 8024ee0:	3b01      	subs	r3, #1
 8024ee2:	60a3      	str	r3, [r4, #8]
 8024ee4:	6823      	ldr	r3, [r4, #0]
 8024ee6:	1c5a      	adds	r2, r3, #1
 8024ee8:	6022      	str	r2, [r4, #0]
 8024eea:	701e      	strb	r6, [r3, #0]
 8024eec:	6963      	ldr	r3, [r4, #20]
 8024eee:	3001      	adds	r0, #1
 8024ef0:	4283      	cmp	r3, r0
 8024ef2:	d004      	beq.n	8024efe <__swbuf_r+0x62>
 8024ef4:	89a3      	ldrh	r3, [r4, #12]
 8024ef6:	07db      	lsls	r3, r3, #31
 8024ef8:	d519      	bpl.n	8024f2e <__swbuf_r+0x92>
 8024efa:	2e0a      	cmp	r6, #10
 8024efc:	d117      	bne.n	8024f2e <__swbuf_r+0x92>
 8024efe:	4621      	mov	r1, r4
 8024f00:	4628      	mov	r0, r5
 8024f02:	f000 f975 	bl	80251f0 <_fflush_r>
 8024f06:	b190      	cbz	r0, 8024f2e <__swbuf_r+0x92>
 8024f08:	e00f      	b.n	8024f2a <__swbuf_r+0x8e>
 8024f0a:	4b0b      	ldr	r3, [pc, #44]	; (8024f38 <__swbuf_r+0x9c>)
 8024f0c:	429c      	cmp	r4, r3
 8024f0e:	d101      	bne.n	8024f14 <__swbuf_r+0x78>
 8024f10:	68ac      	ldr	r4, [r5, #8]
 8024f12:	e7d0      	b.n	8024eb6 <__swbuf_r+0x1a>
 8024f14:	4b09      	ldr	r3, [pc, #36]	; (8024f3c <__swbuf_r+0xa0>)
 8024f16:	429c      	cmp	r4, r3
 8024f18:	bf08      	it	eq
 8024f1a:	68ec      	ldreq	r4, [r5, #12]
 8024f1c:	e7cb      	b.n	8024eb6 <__swbuf_r+0x1a>
 8024f1e:	4621      	mov	r1, r4
 8024f20:	4628      	mov	r0, r5
 8024f22:	f000 f80d 	bl	8024f40 <__swsetup_r>
 8024f26:	2800      	cmp	r0, #0
 8024f28:	d0cc      	beq.n	8024ec4 <__swbuf_r+0x28>
 8024f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8024f2e:	4638      	mov	r0, r7
 8024f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024f32:	bf00      	nop
 8024f34:	08029834 	.word	0x08029834
 8024f38:	08029854 	.word	0x08029854
 8024f3c:	08029814 	.word	0x08029814

08024f40 <__swsetup_r>:
 8024f40:	4b32      	ldr	r3, [pc, #200]	; (802500c <__swsetup_r+0xcc>)
 8024f42:	b570      	push	{r4, r5, r6, lr}
 8024f44:	681d      	ldr	r5, [r3, #0]
 8024f46:	4606      	mov	r6, r0
 8024f48:	460c      	mov	r4, r1
 8024f4a:	b125      	cbz	r5, 8024f56 <__swsetup_r+0x16>
 8024f4c:	69ab      	ldr	r3, [r5, #24]
 8024f4e:	b913      	cbnz	r3, 8024f56 <__swsetup_r+0x16>
 8024f50:	4628      	mov	r0, r5
 8024f52:	f000 f9b7 	bl	80252c4 <__sinit>
 8024f56:	4b2e      	ldr	r3, [pc, #184]	; (8025010 <__swsetup_r+0xd0>)
 8024f58:	429c      	cmp	r4, r3
 8024f5a:	d10f      	bne.n	8024f7c <__swsetup_r+0x3c>
 8024f5c:	686c      	ldr	r4, [r5, #4]
 8024f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f62:	b29a      	uxth	r2, r3
 8024f64:	0715      	lsls	r5, r2, #28
 8024f66:	d42c      	bmi.n	8024fc2 <__swsetup_r+0x82>
 8024f68:	06d0      	lsls	r0, r2, #27
 8024f6a:	d411      	bmi.n	8024f90 <__swsetup_r+0x50>
 8024f6c:	2209      	movs	r2, #9
 8024f6e:	6032      	str	r2, [r6, #0]
 8024f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024f74:	81a3      	strh	r3, [r4, #12]
 8024f76:	f04f 30ff 	mov.w	r0, #4294967295
 8024f7a:	e03e      	b.n	8024ffa <__swsetup_r+0xba>
 8024f7c:	4b25      	ldr	r3, [pc, #148]	; (8025014 <__swsetup_r+0xd4>)
 8024f7e:	429c      	cmp	r4, r3
 8024f80:	d101      	bne.n	8024f86 <__swsetup_r+0x46>
 8024f82:	68ac      	ldr	r4, [r5, #8]
 8024f84:	e7eb      	b.n	8024f5e <__swsetup_r+0x1e>
 8024f86:	4b24      	ldr	r3, [pc, #144]	; (8025018 <__swsetup_r+0xd8>)
 8024f88:	429c      	cmp	r4, r3
 8024f8a:	bf08      	it	eq
 8024f8c:	68ec      	ldreq	r4, [r5, #12]
 8024f8e:	e7e6      	b.n	8024f5e <__swsetup_r+0x1e>
 8024f90:	0751      	lsls	r1, r2, #29
 8024f92:	d512      	bpl.n	8024fba <__swsetup_r+0x7a>
 8024f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024f96:	b141      	cbz	r1, 8024faa <__swsetup_r+0x6a>
 8024f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024f9c:	4299      	cmp	r1, r3
 8024f9e:	d002      	beq.n	8024fa6 <__swsetup_r+0x66>
 8024fa0:	4630      	mov	r0, r6
 8024fa2:	f7ff fbb7 	bl	8024714 <_free_r>
 8024fa6:	2300      	movs	r3, #0
 8024fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8024faa:	89a3      	ldrh	r3, [r4, #12]
 8024fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024fb0:	81a3      	strh	r3, [r4, #12]
 8024fb2:	2300      	movs	r3, #0
 8024fb4:	6063      	str	r3, [r4, #4]
 8024fb6:	6923      	ldr	r3, [r4, #16]
 8024fb8:	6023      	str	r3, [r4, #0]
 8024fba:	89a3      	ldrh	r3, [r4, #12]
 8024fbc:	f043 0308 	orr.w	r3, r3, #8
 8024fc0:	81a3      	strh	r3, [r4, #12]
 8024fc2:	6923      	ldr	r3, [r4, #16]
 8024fc4:	b94b      	cbnz	r3, 8024fda <__swsetup_r+0x9a>
 8024fc6:	89a3      	ldrh	r3, [r4, #12]
 8024fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024fd0:	d003      	beq.n	8024fda <__swsetup_r+0x9a>
 8024fd2:	4621      	mov	r1, r4
 8024fd4:	4630      	mov	r0, r6
 8024fd6:	f000 fa23 	bl	8025420 <__smakebuf_r>
 8024fda:	89a2      	ldrh	r2, [r4, #12]
 8024fdc:	f012 0301 	ands.w	r3, r2, #1
 8024fe0:	d00c      	beq.n	8024ffc <__swsetup_r+0xbc>
 8024fe2:	2300      	movs	r3, #0
 8024fe4:	60a3      	str	r3, [r4, #8]
 8024fe6:	6963      	ldr	r3, [r4, #20]
 8024fe8:	425b      	negs	r3, r3
 8024fea:	61a3      	str	r3, [r4, #24]
 8024fec:	6923      	ldr	r3, [r4, #16]
 8024fee:	b953      	cbnz	r3, 8025006 <__swsetup_r+0xc6>
 8024ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ff4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8024ff8:	d1ba      	bne.n	8024f70 <__swsetup_r+0x30>
 8024ffa:	bd70      	pop	{r4, r5, r6, pc}
 8024ffc:	0792      	lsls	r2, r2, #30
 8024ffe:	bf58      	it	pl
 8025000:	6963      	ldrpl	r3, [r4, #20]
 8025002:	60a3      	str	r3, [r4, #8]
 8025004:	e7f2      	b.n	8024fec <__swsetup_r+0xac>
 8025006:	2000      	movs	r0, #0
 8025008:	e7f7      	b.n	8024ffa <__swsetup_r+0xba>
 802500a:	bf00      	nop
 802500c:	20000098 	.word	0x20000098
 8025010:	08029834 	.word	0x08029834
 8025014:	08029854 	.word	0x08029854
 8025018:	08029814 	.word	0x08029814

0802501c <__register_exitproc>:
 802501c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025020:	4d2c      	ldr	r5, [pc, #176]	; (80250d4 <__register_exitproc+0xb8>)
 8025022:	682c      	ldr	r4, [r5, #0]
 8025024:	4607      	mov	r7, r0
 8025026:	460e      	mov	r6, r1
 8025028:	4691      	mov	r9, r2
 802502a:	4698      	mov	r8, r3
 802502c:	b934      	cbnz	r4, 802503c <__register_exitproc+0x20>
 802502e:	4b2a      	ldr	r3, [pc, #168]	; (80250d8 <__register_exitproc+0xbc>)
 8025030:	4c2a      	ldr	r4, [pc, #168]	; (80250dc <__register_exitproc+0xc0>)
 8025032:	602c      	str	r4, [r5, #0]
 8025034:	b113      	cbz	r3, 802503c <__register_exitproc+0x20>
 8025036:	681b      	ldr	r3, [r3, #0]
 8025038:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802503c:	6863      	ldr	r3, [r4, #4]
 802503e:	2b1f      	cmp	r3, #31
 8025040:	dd3d      	ble.n	80250be <__register_exitproc+0xa2>
 8025042:	4b27      	ldr	r3, [pc, #156]	; (80250e0 <__register_exitproc+0xc4>)
 8025044:	b91b      	cbnz	r3, 802504e <__register_exitproc+0x32>
 8025046:	f04f 30ff 	mov.w	r0, #4294967295
 802504a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802504e:	208c      	movs	r0, #140	; 0x8c
 8025050:	f7ff fb3c 	bl	80246cc <malloc>
 8025054:	4604      	mov	r4, r0
 8025056:	2800      	cmp	r0, #0
 8025058:	d0f5      	beq.n	8025046 <__register_exitproc+0x2a>
 802505a:	2300      	movs	r3, #0
 802505c:	682a      	ldr	r2, [r5, #0]
 802505e:	6002      	str	r2, [r0, #0]
 8025060:	6043      	str	r3, [r0, #4]
 8025062:	6028      	str	r0, [r5, #0]
 8025064:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025068:	b30f      	cbz	r7, 80250ae <__register_exitproc+0x92>
 802506a:	f44f 7084 	mov.w	r0, #264	; 0x108
 802506e:	f7ff fb2d 	bl	80246cc <malloc>
 8025072:	2800      	cmp	r0, #0
 8025074:	d0e7      	beq.n	8025046 <__register_exitproc+0x2a>
 8025076:	2300      	movs	r3, #0
 8025078:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802507c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8025080:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025084:	6862      	ldr	r2, [r4, #4]
 8025086:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802508a:	2301      	movs	r3, #1
 802508c:	4093      	lsls	r3, r2
 802508e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8025092:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8025096:	431a      	orrs	r2, r3
 8025098:	2f02      	cmp	r7, #2
 802509a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802509e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80250a2:	bf02      	ittt	eq
 80250a4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80250a8:	4313      	orreq	r3, r2
 80250aa:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80250ae:	6863      	ldr	r3, [r4, #4]
 80250b0:	1c5a      	adds	r2, r3, #1
 80250b2:	3302      	adds	r3, #2
 80250b4:	6062      	str	r2, [r4, #4]
 80250b6:	2000      	movs	r0, #0
 80250b8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80250bc:	e7c5      	b.n	802504a <__register_exitproc+0x2e>
 80250be:	2f00      	cmp	r7, #0
 80250c0:	d0f5      	beq.n	80250ae <__register_exitproc+0x92>
 80250c2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80250c6:	2800      	cmp	r0, #0
 80250c8:	d1dc      	bne.n	8025084 <__register_exitproc+0x68>
 80250ca:	4b05      	ldr	r3, [pc, #20]	; (80250e0 <__register_exitproc+0xc4>)
 80250cc:	2b00      	cmp	r3, #0
 80250ce:	d0ba      	beq.n	8025046 <__register_exitproc+0x2a>
 80250d0:	e7cb      	b.n	802506a <__register_exitproc+0x4e>
 80250d2:	bf00      	nop
 80250d4:	2000bf20 	.word	0x2000bf20
 80250d8:	08029810 	.word	0x08029810
 80250dc:	2000be94 	.word	0x2000be94
 80250e0:	080246cd 	.word	0x080246cd

080250e4 <__sflush_r>:
 80250e4:	898a      	ldrh	r2, [r1, #12]
 80250e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80250ea:	4605      	mov	r5, r0
 80250ec:	0710      	lsls	r0, r2, #28
 80250ee:	460c      	mov	r4, r1
 80250f0:	d458      	bmi.n	80251a4 <__sflush_r+0xc0>
 80250f2:	684b      	ldr	r3, [r1, #4]
 80250f4:	2b00      	cmp	r3, #0
 80250f6:	dc05      	bgt.n	8025104 <__sflush_r+0x20>
 80250f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80250fa:	2b00      	cmp	r3, #0
 80250fc:	dc02      	bgt.n	8025104 <__sflush_r+0x20>
 80250fe:	2000      	movs	r0, #0
 8025100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025106:	2e00      	cmp	r6, #0
 8025108:	d0f9      	beq.n	80250fe <__sflush_r+0x1a>
 802510a:	2300      	movs	r3, #0
 802510c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025110:	682f      	ldr	r7, [r5, #0]
 8025112:	6a21      	ldr	r1, [r4, #32]
 8025114:	602b      	str	r3, [r5, #0]
 8025116:	d032      	beq.n	802517e <__sflush_r+0x9a>
 8025118:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802511a:	89a3      	ldrh	r3, [r4, #12]
 802511c:	075a      	lsls	r2, r3, #29
 802511e:	d505      	bpl.n	802512c <__sflush_r+0x48>
 8025120:	6863      	ldr	r3, [r4, #4]
 8025122:	1ac0      	subs	r0, r0, r3
 8025124:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025126:	b10b      	cbz	r3, 802512c <__sflush_r+0x48>
 8025128:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802512a:	1ac0      	subs	r0, r0, r3
 802512c:	2300      	movs	r3, #0
 802512e:	4602      	mov	r2, r0
 8025130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025132:	6a21      	ldr	r1, [r4, #32]
 8025134:	4628      	mov	r0, r5
 8025136:	47b0      	blx	r6
 8025138:	1c43      	adds	r3, r0, #1
 802513a:	89a3      	ldrh	r3, [r4, #12]
 802513c:	d106      	bne.n	802514c <__sflush_r+0x68>
 802513e:	6829      	ldr	r1, [r5, #0]
 8025140:	291d      	cmp	r1, #29
 8025142:	d848      	bhi.n	80251d6 <__sflush_r+0xf2>
 8025144:	4a29      	ldr	r2, [pc, #164]	; (80251ec <__sflush_r+0x108>)
 8025146:	40ca      	lsrs	r2, r1
 8025148:	07d6      	lsls	r6, r2, #31
 802514a:	d544      	bpl.n	80251d6 <__sflush_r+0xf2>
 802514c:	2200      	movs	r2, #0
 802514e:	6062      	str	r2, [r4, #4]
 8025150:	04d9      	lsls	r1, r3, #19
 8025152:	6922      	ldr	r2, [r4, #16]
 8025154:	6022      	str	r2, [r4, #0]
 8025156:	d504      	bpl.n	8025162 <__sflush_r+0x7e>
 8025158:	1c42      	adds	r2, r0, #1
 802515a:	d101      	bne.n	8025160 <__sflush_r+0x7c>
 802515c:	682b      	ldr	r3, [r5, #0]
 802515e:	b903      	cbnz	r3, 8025162 <__sflush_r+0x7e>
 8025160:	6560      	str	r0, [r4, #84]	; 0x54
 8025162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025164:	602f      	str	r7, [r5, #0]
 8025166:	2900      	cmp	r1, #0
 8025168:	d0c9      	beq.n	80250fe <__sflush_r+0x1a>
 802516a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802516e:	4299      	cmp	r1, r3
 8025170:	d002      	beq.n	8025178 <__sflush_r+0x94>
 8025172:	4628      	mov	r0, r5
 8025174:	f7ff face 	bl	8024714 <_free_r>
 8025178:	2000      	movs	r0, #0
 802517a:	6360      	str	r0, [r4, #52]	; 0x34
 802517c:	e7c0      	b.n	8025100 <__sflush_r+0x1c>
 802517e:	2301      	movs	r3, #1
 8025180:	4628      	mov	r0, r5
 8025182:	47b0      	blx	r6
 8025184:	1c41      	adds	r1, r0, #1
 8025186:	d1c8      	bne.n	802511a <__sflush_r+0x36>
 8025188:	682b      	ldr	r3, [r5, #0]
 802518a:	2b00      	cmp	r3, #0
 802518c:	d0c5      	beq.n	802511a <__sflush_r+0x36>
 802518e:	2b1d      	cmp	r3, #29
 8025190:	d001      	beq.n	8025196 <__sflush_r+0xb2>
 8025192:	2b16      	cmp	r3, #22
 8025194:	d101      	bne.n	802519a <__sflush_r+0xb6>
 8025196:	602f      	str	r7, [r5, #0]
 8025198:	e7b1      	b.n	80250fe <__sflush_r+0x1a>
 802519a:	89a3      	ldrh	r3, [r4, #12]
 802519c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80251a0:	81a3      	strh	r3, [r4, #12]
 80251a2:	e7ad      	b.n	8025100 <__sflush_r+0x1c>
 80251a4:	690f      	ldr	r7, [r1, #16]
 80251a6:	2f00      	cmp	r7, #0
 80251a8:	d0a9      	beq.n	80250fe <__sflush_r+0x1a>
 80251aa:	0793      	lsls	r3, r2, #30
 80251ac:	680e      	ldr	r6, [r1, #0]
 80251ae:	bf08      	it	eq
 80251b0:	694b      	ldreq	r3, [r1, #20]
 80251b2:	600f      	str	r7, [r1, #0]
 80251b4:	bf18      	it	ne
 80251b6:	2300      	movne	r3, #0
 80251b8:	eba6 0807 	sub.w	r8, r6, r7
 80251bc:	608b      	str	r3, [r1, #8]
 80251be:	f1b8 0f00 	cmp.w	r8, #0
 80251c2:	dd9c      	ble.n	80250fe <__sflush_r+0x1a>
 80251c4:	4643      	mov	r3, r8
 80251c6:	463a      	mov	r2, r7
 80251c8:	6a21      	ldr	r1, [r4, #32]
 80251ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80251cc:	4628      	mov	r0, r5
 80251ce:	47b0      	blx	r6
 80251d0:	2800      	cmp	r0, #0
 80251d2:	dc06      	bgt.n	80251e2 <__sflush_r+0xfe>
 80251d4:	89a3      	ldrh	r3, [r4, #12]
 80251d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80251da:	81a3      	strh	r3, [r4, #12]
 80251dc:	f04f 30ff 	mov.w	r0, #4294967295
 80251e0:	e78e      	b.n	8025100 <__sflush_r+0x1c>
 80251e2:	4407      	add	r7, r0
 80251e4:	eba8 0800 	sub.w	r8, r8, r0
 80251e8:	e7e9      	b.n	80251be <__sflush_r+0xda>
 80251ea:	bf00      	nop
 80251ec:	20400001 	.word	0x20400001

080251f0 <_fflush_r>:
 80251f0:	b538      	push	{r3, r4, r5, lr}
 80251f2:	690b      	ldr	r3, [r1, #16]
 80251f4:	4605      	mov	r5, r0
 80251f6:	460c      	mov	r4, r1
 80251f8:	b1db      	cbz	r3, 8025232 <_fflush_r+0x42>
 80251fa:	b118      	cbz	r0, 8025204 <_fflush_r+0x14>
 80251fc:	6983      	ldr	r3, [r0, #24]
 80251fe:	b90b      	cbnz	r3, 8025204 <_fflush_r+0x14>
 8025200:	f000 f860 	bl	80252c4 <__sinit>
 8025204:	4b0c      	ldr	r3, [pc, #48]	; (8025238 <_fflush_r+0x48>)
 8025206:	429c      	cmp	r4, r3
 8025208:	d109      	bne.n	802521e <_fflush_r+0x2e>
 802520a:	686c      	ldr	r4, [r5, #4]
 802520c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025210:	b17b      	cbz	r3, 8025232 <_fflush_r+0x42>
 8025212:	4621      	mov	r1, r4
 8025214:	4628      	mov	r0, r5
 8025216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802521a:	f7ff bf63 	b.w	80250e4 <__sflush_r>
 802521e:	4b07      	ldr	r3, [pc, #28]	; (802523c <_fflush_r+0x4c>)
 8025220:	429c      	cmp	r4, r3
 8025222:	d101      	bne.n	8025228 <_fflush_r+0x38>
 8025224:	68ac      	ldr	r4, [r5, #8]
 8025226:	e7f1      	b.n	802520c <_fflush_r+0x1c>
 8025228:	4b05      	ldr	r3, [pc, #20]	; (8025240 <_fflush_r+0x50>)
 802522a:	429c      	cmp	r4, r3
 802522c:	bf08      	it	eq
 802522e:	68ec      	ldreq	r4, [r5, #12]
 8025230:	e7ec      	b.n	802520c <_fflush_r+0x1c>
 8025232:	2000      	movs	r0, #0
 8025234:	bd38      	pop	{r3, r4, r5, pc}
 8025236:	bf00      	nop
 8025238:	08029834 	.word	0x08029834
 802523c:	08029854 	.word	0x08029854
 8025240:	08029814 	.word	0x08029814

08025244 <std>:
 8025244:	2300      	movs	r3, #0
 8025246:	b510      	push	{r4, lr}
 8025248:	4604      	mov	r4, r0
 802524a:	e9c0 3300 	strd	r3, r3, [r0]
 802524e:	6083      	str	r3, [r0, #8]
 8025250:	8181      	strh	r1, [r0, #12]
 8025252:	6643      	str	r3, [r0, #100]	; 0x64
 8025254:	81c2      	strh	r2, [r0, #14]
 8025256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802525a:	6183      	str	r3, [r0, #24]
 802525c:	4619      	mov	r1, r3
 802525e:	2208      	movs	r2, #8
 8025260:	305c      	adds	r0, #92	; 0x5c
 8025262:	f7ff fa4e 	bl	8024702 <memset>
 8025266:	4b05      	ldr	r3, [pc, #20]	; (802527c <std+0x38>)
 8025268:	6263      	str	r3, [r4, #36]	; 0x24
 802526a:	4b05      	ldr	r3, [pc, #20]	; (8025280 <std+0x3c>)
 802526c:	62a3      	str	r3, [r4, #40]	; 0x28
 802526e:	4b05      	ldr	r3, [pc, #20]	; (8025284 <std+0x40>)
 8025270:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025272:	4b05      	ldr	r3, [pc, #20]	; (8025288 <std+0x44>)
 8025274:	6224      	str	r4, [r4, #32]
 8025276:	6323      	str	r3, [r4, #48]	; 0x30
 8025278:	bd10      	pop	{r4, pc}
 802527a:	bf00      	nop
 802527c:	080254a5 	.word	0x080254a5
 8025280:	080254c7 	.word	0x080254c7
 8025284:	080254ff 	.word	0x080254ff
 8025288:	08025523 	.word	0x08025523

0802528c <_cleanup_r>:
 802528c:	4901      	ldr	r1, [pc, #4]	; (8025294 <_cleanup_r+0x8>)
 802528e:	f000 b885 	b.w	802539c <_fwalk_reent>
 8025292:	bf00      	nop
 8025294:	080251f1 	.word	0x080251f1

08025298 <__sfmoreglue>:
 8025298:	b570      	push	{r4, r5, r6, lr}
 802529a:	1e4a      	subs	r2, r1, #1
 802529c:	2568      	movs	r5, #104	; 0x68
 802529e:	4355      	muls	r5, r2
 80252a0:	460e      	mov	r6, r1
 80252a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80252a6:	f7ff fa83 	bl	80247b0 <_malloc_r>
 80252aa:	4604      	mov	r4, r0
 80252ac:	b140      	cbz	r0, 80252c0 <__sfmoreglue+0x28>
 80252ae:	2100      	movs	r1, #0
 80252b0:	e9c0 1600 	strd	r1, r6, [r0]
 80252b4:	300c      	adds	r0, #12
 80252b6:	60a0      	str	r0, [r4, #8]
 80252b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80252bc:	f7ff fa21 	bl	8024702 <memset>
 80252c0:	4620      	mov	r0, r4
 80252c2:	bd70      	pop	{r4, r5, r6, pc}

080252c4 <__sinit>:
 80252c4:	6983      	ldr	r3, [r0, #24]
 80252c6:	b510      	push	{r4, lr}
 80252c8:	4604      	mov	r4, r0
 80252ca:	bb33      	cbnz	r3, 802531a <__sinit+0x56>
 80252cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80252d0:	6503      	str	r3, [r0, #80]	; 0x50
 80252d2:	4b12      	ldr	r3, [pc, #72]	; (802531c <__sinit+0x58>)
 80252d4:	4a12      	ldr	r2, [pc, #72]	; (8025320 <__sinit+0x5c>)
 80252d6:	681b      	ldr	r3, [r3, #0]
 80252d8:	6282      	str	r2, [r0, #40]	; 0x28
 80252da:	4298      	cmp	r0, r3
 80252dc:	bf04      	itt	eq
 80252de:	2301      	moveq	r3, #1
 80252e0:	6183      	streq	r3, [r0, #24]
 80252e2:	f000 f81f 	bl	8025324 <__sfp>
 80252e6:	6060      	str	r0, [r4, #4]
 80252e8:	4620      	mov	r0, r4
 80252ea:	f000 f81b 	bl	8025324 <__sfp>
 80252ee:	60a0      	str	r0, [r4, #8]
 80252f0:	4620      	mov	r0, r4
 80252f2:	f000 f817 	bl	8025324 <__sfp>
 80252f6:	2200      	movs	r2, #0
 80252f8:	60e0      	str	r0, [r4, #12]
 80252fa:	2104      	movs	r1, #4
 80252fc:	6860      	ldr	r0, [r4, #4]
 80252fe:	f7ff ffa1 	bl	8025244 <std>
 8025302:	2201      	movs	r2, #1
 8025304:	2109      	movs	r1, #9
 8025306:	68a0      	ldr	r0, [r4, #8]
 8025308:	f7ff ff9c 	bl	8025244 <std>
 802530c:	2202      	movs	r2, #2
 802530e:	2112      	movs	r1, #18
 8025310:	68e0      	ldr	r0, [r4, #12]
 8025312:	f7ff ff97 	bl	8025244 <std>
 8025316:	2301      	movs	r3, #1
 8025318:	61a3      	str	r3, [r4, #24]
 802531a:	bd10      	pop	{r4, pc}
 802531c:	080297d8 	.word	0x080297d8
 8025320:	0802528d 	.word	0x0802528d

08025324 <__sfp>:
 8025324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025326:	4b1b      	ldr	r3, [pc, #108]	; (8025394 <__sfp+0x70>)
 8025328:	681e      	ldr	r6, [r3, #0]
 802532a:	69b3      	ldr	r3, [r6, #24]
 802532c:	4607      	mov	r7, r0
 802532e:	b913      	cbnz	r3, 8025336 <__sfp+0x12>
 8025330:	4630      	mov	r0, r6
 8025332:	f7ff ffc7 	bl	80252c4 <__sinit>
 8025336:	3648      	adds	r6, #72	; 0x48
 8025338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802533c:	3b01      	subs	r3, #1
 802533e:	d503      	bpl.n	8025348 <__sfp+0x24>
 8025340:	6833      	ldr	r3, [r6, #0]
 8025342:	b133      	cbz	r3, 8025352 <__sfp+0x2e>
 8025344:	6836      	ldr	r6, [r6, #0]
 8025346:	e7f7      	b.n	8025338 <__sfp+0x14>
 8025348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802534c:	b16d      	cbz	r5, 802536a <__sfp+0x46>
 802534e:	3468      	adds	r4, #104	; 0x68
 8025350:	e7f4      	b.n	802533c <__sfp+0x18>
 8025352:	2104      	movs	r1, #4
 8025354:	4638      	mov	r0, r7
 8025356:	f7ff ff9f 	bl	8025298 <__sfmoreglue>
 802535a:	6030      	str	r0, [r6, #0]
 802535c:	2800      	cmp	r0, #0
 802535e:	d1f1      	bne.n	8025344 <__sfp+0x20>
 8025360:	230c      	movs	r3, #12
 8025362:	603b      	str	r3, [r7, #0]
 8025364:	4604      	mov	r4, r0
 8025366:	4620      	mov	r0, r4
 8025368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802536a:	4b0b      	ldr	r3, [pc, #44]	; (8025398 <__sfp+0x74>)
 802536c:	6665      	str	r5, [r4, #100]	; 0x64
 802536e:	e9c4 5500 	strd	r5, r5, [r4]
 8025372:	60a5      	str	r5, [r4, #8]
 8025374:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025378:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802537c:	2208      	movs	r2, #8
 802537e:	4629      	mov	r1, r5
 8025380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025384:	f7ff f9bd 	bl	8024702 <memset>
 8025388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802538c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025390:	e7e9      	b.n	8025366 <__sfp+0x42>
 8025392:	bf00      	nop
 8025394:	080297d8 	.word	0x080297d8
 8025398:	ffff0001 	.word	0xffff0001

0802539c <_fwalk_reent>:
 802539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253a0:	4680      	mov	r8, r0
 80253a2:	4689      	mov	r9, r1
 80253a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80253a8:	2600      	movs	r6, #0
 80253aa:	b914      	cbnz	r4, 80253b2 <_fwalk_reent+0x16>
 80253ac:	4630      	mov	r0, r6
 80253ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80253b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80253b6:	3f01      	subs	r7, #1
 80253b8:	d501      	bpl.n	80253be <_fwalk_reent+0x22>
 80253ba:	6824      	ldr	r4, [r4, #0]
 80253bc:	e7f5      	b.n	80253aa <_fwalk_reent+0xe>
 80253be:	89ab      	ldrh	r3, [r5, #12]
 80253c0:	2b01      	cmp	r3, #1
 80253c2:	d907      	bls.n	80253d4 <_fwalk_reent+0x38>
 80253c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80253c8:	3301      	adds	r3, #1
 80253ca:	d003      	beq.n	80253d4 <_fwalk_reent+0x38>
 80253cc:	4629      	mov	r1, r5
 80253ce:	4640      	mov	r0, r8
 80253d0:	47c8      	blx	r9
 80253d2:	4306      	orrs	r6, r0
 80253d4:	3568      	adds	r5, #104	; 0x68
 80253d6:	e7ee      	b.n	80253b6 <_fwalk_reent+0x1a>

080253d8 <__swhatbuf_r>:
 80253d8:	b570      	push	{r4, r5, r6, lr}
 80253da:	460e      	mov	r6, r1
 80253dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253e0:	2900      	cmp	r1, #0
 80253e2:	b096      	sub	sp, #88	; 0x58
 80253e4:	4614      	mov	r4, r2
 80253e6:	461d      	mov	r5, r3
 80253e8:	da07      	bge.n	80253fa <__swhatbuf_r+0x22>
 80253ea:	2300      	movs	r3, #0
 80253ec:	602b      	str	r3, [r5, #0]
 80253ee:	89b3      	ldrh	r3, [r6, #12]
 80253f0:	061a      	lsls	r2, r3, #24
 80253f2:	d410      	bmi.n	8025416 <__swhatbuf_r+0x3e>
 80253f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80253f8:	e00e      	b.n	8025418 <__swhatbuf_r+0x40>
 80253fa:	466a      	mov	r2, sp
 80253fc:	f000 f8b8 	bl	8025570 <_fstat_r>
 8025400:	2800      	cmp	r0, #0
 8025402:	dbf2      	blt.n	80253ea <__swhatbuf_r+0x12>
 8025404:	9a01      	ldr	r2, [sp, #4]
 8025406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802540a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802540e:	425a      	negs	r2, r3
 8025410:	415a      	adcs	r2, r3
 8025412:	602a      	str	r2, [r5, #0]
 8025414:	e7ee      	b.n	80253f4 <__swhatbuf_r+0x1c>
 8025416:	2340      	movs	r3, #64	; 0x40
 8025418:	2000      	movs	r0, #0
 802541a:	6023      	str	r3, [r4, #0]
 802541c:	b016      	add	sp, #88	; 0x58
 802541e:	bd70      	pop	{r4, r5, r6, pc}

08025420 <__smakebuf_r>:
 8025420:	898b      	ldrh	r3, [r1, #12]
 8025422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025424:	079d      	lsls	r5, r3, #30
 8025426:	4606      	mov	r6, r0
 8025428:	460c      	mov	r4, r1
 802542a:	d507      	bpl.n	802543c <__smakebuf_r+0x1c>
 802542c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025430:	6023      	str	r3, [r4, #0]
 8025432:	6123      	str	r3, [r4, #16]
 8025434:	2301      	movs	r3, #1
 8025436:	6163      	str	r3, [r4, #20]
 8025438:	b002      	add	sp, #8
 802543a:	bd70      	pop	{r4, r5, r6, pc}
 802543c:	ab01      	add	r3, sp, #4
 802543e:	466a      	mov	r2, sp
 8025440:	f7ff ffca 	bl	80253d8 <__swhatbuf_r>
 8025444:	9900      	ldr	r1, [sp, #0]
 8025446:	4605      	mov	r5, r0
 8025448:	4630      	mov	r0, r6
 802544a:	f7ff f9b1 	bl	80247b0 <_malloc_r>
 802544e:	b948      	cbnz	r0, 8025464 <__smakebuf_r+0x44>
 8025450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025454:	059a      	lsls	r2, r3, #22
 8025456:	d4ef      	bmi.n	8025438 <__smakebuf_r+0x18>
 8025458:	f023 0303 	bic.w	r3, r3, #3
 802545c:	f043 0302 	orr.w	r3, r3, #2
 8025460:	81a3      	strh	r3, [r4, #12]
 8025462:	e7e3      	b.n	802542c <__smakebuf_r+0xc>
 8025464:	4b0d      	ldr	r3, [pc, #52]	; (802549c <__smakebuf_r+0x7c>)
 8025466:	62b3      	str	r3, [r6, #40]	; 0x28
 8025468:	89a3      	ldrh	r3, [r4, #12]
 802546a:	6020      	str	r0, [r4, #0]
 802546c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025470:	81a3      	strh	r3, [r4, #12]
 8025472:	9b00      	ldr	r3, [sp, #0]
 8025474:	6163      	str	r3, [r4, #20]
 8025476:	9b01      	ldr	r3, [sp, #4]
 8025478:	6120      	str	r0, [r4, #16]
 802547a:	b15b      	cbz	r3, 8025494 <__smakebuf_r+0x74>
 802547c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025480:	4630      	mov	r0, r6
 8025482:	f000 f887 	bl	8025594 <_isatty_r>
 8025486:	b128      	cbz	r0, 8025494 <__smakebuf_r+0x74>
 8025488:	89a3      	ldrh	r3, [r4, #12]
 802548a:	f023 0303 	bic.w	r3, r3, #3
 802548e:	f043 0301 	orr.w	r3, r3, #1
 8025492:	81a3      	strh	r3, [r4, #12]
 8025494:	89a3      	ldrh	r3, [r4, #12]
 8025496:	431d      	orrs	r5, r3
 8025498:	81a5      	strh	r5, [r4, #12]
 802549a:	e7cd      	b.n	8025438 <__smakebuf_r+0x18>
 802549c:	0802528d 	.word	0x0802528d

080254a0 <__malloc_lock>:
 80254a0:	4770      	bx	lr

080254a2 <__malloc_unlock>:
 80254a2:	4770      	bx	lr

080254a4 <__sread>:
 80254a4:	b510      	push	{r4, lr}
 80254a6:	460c      	mov	r4, r1
 80254a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80254ac:	f000 f894 	bl	80255d8 <_read_r>
 80254b0:	2800      	cmp	r0, #0
 80254b2:	bfab      	itete	ge
 80254b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80254b6:	89a3      	ldrhlt	r3, [r4, #12]
 80254b8:	181b      	addge	r3, r3, r0
 80254ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80254be:	bfac      	ite	ge
 80254c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80254c2:	81a3      	strhlt	r3, [r4, #12]
 80254c4:	bd10      	pop	{r4, pc}

080254c6 <__swrite>:
 80254c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254ca:	461f      	mov	r7, r3
 80254cc:	898b      	ldrh	r3, [r1, #12]
 80254ce:	05db      	lsls	r3, r3, #23
 80254d0:	4605      	mov	r5, r0
 80254d2:	460c      	mov	r4, r1
 80254d4:	4616      	mov	r6, r2
 80254d6:	d505      	bpl.n	80254e4 <__swrite+0x1e>
 80254d8:	2302      	movs	r3, #2
 80254da:	2200      	movs	r2, #0
 80254dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80254e0:	f000 f868 	bl	80255b4 <_lseek_r>
 80254e4:	89a3      	ldrh	r3, [r4, #12]
 80254e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80254ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80254ee:	81a3      	strh	r3, [r4, #12]
 80254f0:	4632      	mov	r2, r6
 80254f2:	463b      	mov	r3, r7
 80254f4:	4628      	mov	r0, r5
 80254f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80254fa:	f000 b817 	b.w	802552c <_write_r>

080254fe <__sseek>:
 80254fe:	b510      	push	{r4, lr}
 8025500:	460c      	mov	r4, r1
 8025502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025506:	f000 f855 	bl	80255b4 <_lseek_r>
 802550a:	1c43      	adds	r3, r0, #1
 802550c:	89a3      	ldrh	r3, [r4, #12]
 802550e:	bf15      	itete	ne
 8025510:	6560      	strne	r0, [r4, #84]	; 0x54
 8025512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802551a:	81a3      	strheq	r3, [r4, #12]
 802551c:	bf18      	it	ne
 802551e:	81a3      	strhne	r3, [r4, #12]
 8025520:	bd10      	pop	{r4, pc}

08025522 <__sclose>:
 8025522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025526:	f000 b813 	b.w	8025550 <_close_r>
	...

0802552c <_write_r>:
 802552c:	b538      	push	{r3, r4, r5, lr}
 802552e:	4c07      	ldr	r4, [pc, #28]	; (802554c <_write_r+0x20>)
 8025530:	4605      	mov	r5, r0
 8025532:	4608      	mov	r0, r1
 8025534:	4611      	mov	r1, r2
 8025536:	2200      	movs	r2, #0
 8025538:	6022      	str	r2, [r4, #0]
 802553a:	461a      	mov	r2, r3
 802553c:	f7de f8a3 	bl	8003686 <_write>
 8025540:	1c43      	adds	r3, r0, #1
 8025542:	d102      	bne.n	802554a <_write_r+0x1e>
 8025544:	6823      	ldr	r3, [r4, #0]
 8025546:	b103      	cbz	r3, 802554a <_write_r+0x1e>
 8025548:	602b      	str	r3, [r5, #0]
 802554a:	bd38      	pop	{r3, r4, r5, pc}
 802554c:	2000cb28 	.word	0x2000cb28

08025550 <_close_r>:
 8025550:	b538      	push	{r3, r4, r5, lr}
 8025552:	4c06      	ldr	r4, [pc, #24]	; (802556c <_close_r+0x1c>)
 8025554:	2300      	movs	r3, #0
 8025556:	4605      	mov	r5, r0
 8025558:	4608      	mov	r0, r1
 802555a:	6023      	str	r3, [r4, #0]
 802555c:	f7de f8af 	bl	80036be <_close>
 8025560:	1c43      	adds	r3, r0, #1
 8025562:	d102      	bne.n	802556a <_close_r+0x1a>
 8025564:	6823      	ldr	r3, [r4, #0]
 8025566:	b103      	cbz	r3, 802556a <_close_r+0x1a>
 8025568:	602b      	str	r3, [r5, #0]
 802556a:	bd38      	pop	{r3, r4, r5, pc}
 802556c:	2000cb28 	.word	0x2000cb28

08025570 <_fstat_r>:
 8025570:	b538      	push	{r3, r4, r5, lr}
 8025572:	4c07      	ldr	r4, [pc, #28]	; (8025590 <_fstat_r+0x20>)
 8025574:	2300      	movs	r3, #0
 8025576:	4605      	mov	r5, r0
 8025578:	4608      	mov	r0, r1
 802557a:	4611      	mov	r1, r2
 802557c:	6023      	str	r3, [r4, #0]
 802557e:	f7de f8aa 	bl	80036d6 <_fstat>
 8025582:	1c43      	adds	r3, r0, #1
 8025584:	d102      	bne.n	802558c <_fstat_r+0x1c>
 8025586:	6823      	ldr	r3, [r4, #0]
 8025588:	b103      	cbz	r3, 802558c <_fstat_r+0x1c>
 802558a:	602b      	str	r3, [r5, #0]
 802558c:	bd38      	pop	{r3, r4, r5, pc}
 802558e:	bf00      	nop
 8025590:	2000cb28 	.word	0x2000cb28

08025594 <_isatty_r>:
 8025594:	b538      	push	{r3, r4, r5, lr}
 8025596:	4c06      	ldr	r4, [pc, #24]	; (80255b0 <_isatty_r+0x1c>)
 8025598:	2300      	movs	r3, #0
 802559a:	4605      	mov	r5, r0
 802559c:	4608      	mov	r0, r1
 802559e:	6023      	str	r3, [r4, #0]
 80255a0:	f7de f8a9 	bl	80036f6 <_isatty>
 80255a4:	1c43      	adds	r3, r0, #1
 80255a6:	d102      	bne.n	80255ae <_isatty_r+0x1a>
 80255a8:	6823      	ldr	r3, [r4, #0]
 80255aa:	b103      	cbz	r3, 80255ae <_isatty_r+0x1a>
 80255ac:	602b      	str	r3, [r5, #0]
 80255ae:	bd38      	pop	{r3, r4, r5, pc}
 80255b0:	2000cb28 	.word	0x2000cb28

080255b4 <_lseek_r>:
 80255b4:	b538      	push	{r3, r4, r5, lr}
 80255b6:	4c07      	ldr	r4, [pc, #28]	; (80255d4 <_lseek_r+0x20>)
 80255b8:	4605      	mov	r5, r0
 80255ba:	4608      	mov	r0, r1
 80255bc:	4611      	mov	r1, r2
 80255be:	2200      	movs	r2, #0
 80255c0:	6022      	str	r2, [r4, #0]
 80255c2:	461a      	mov	r2, r3
 80255c4:	f7de f8a2 	bl	800370c <_lseek>
 80255c8:	1c43      	adds	r3, r0, #1
 80255ca:	d102      	bne.n	80255d2 <_lseek_r+0x1e>
 80255cc:	6823      	ldr	r3, [r4, #0]
 80255ce:	b103      	cbz	r3, 80255d2 <_lseek_r+0x1e>
 80255d0:	602b      	str	r3, [r5, #0]
 80255d2:	bd38      	pop	{r3, r4, r5, pc}
 80255d4:	2000cb28 	.word	0x2000cb28

080255d8 <_read_r>:
 80255d8:	b538      	push	{r3, r4, r5, lr}
 80255da:	4c07      	ldr	r4, [pc, #28]	; (80255f8 <_read_r+0x20>)
 80255dc:	4605      	mov	r5, r0
 80255de:	4608      	mov	r0, r1
 80255e0:	4611      	mov	r1, r2
 80255e2:	2200      	movs	r2, #0
 80255e4:	6022      	str	r2, [r4, #0]
 80255e6:	461a      	mov	r2, r3
 80255e8:	f7de f830 	bl	800364c <_read>
 80255ec:	1c43      	adds	r3, r0, #1
 80255ee:	d102      	bne.n	80255f6 <_read_r+0x1e>
 80255f0:	6823      	ldr	r3, [r4, #0]
 80255f2:	b103      	cbz	r3, 80255f6 <_read_r+0x1e>
 80255f4:	602b      	str	r3, [r5, #0]
 80255f6:	bd38      	pop	{r3, r4, r5, pc}
 80255f8:	2000cb28 	.word	0x2000cb28

080255fc <_init>:
 80255fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255fe:	bf00      	nop
 8025600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025602:	bc08      	pop	{r3}
 8025604:	469e      	mov	lr, r3
 8025606:	4770      	bx	lr

08025608 <_fini>:
 8025608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802560a:	bf00      	nop
 802560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802560e:	bc08      	pop	{r3}
 8025610:	469e      	mov	lr, r3
 8025612:	4770      	bx	lr
