
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002509c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004348  0802526c  0802526c  0003526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003cac  080295b4  080295b4  000395b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00050058  0802d260  0802d260  0003d260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000220  0807d2b8  0807d2b8  0008d2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0807d4d8  0807d4d8  00090100  2**0
                  CONTENTS
  7 .ARM          00000008  0807d4d8  0807d4d8  0008d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0807d4e0  0807d4e0  00090100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0807d4e0  0807d4e0  0008d4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0807d4f4  0807d4f4  0008d4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000100  20000000  0807d4fc  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ca3c  20000100  0807d5fc  00090100  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000cb3c  0807d5fc  0009cb3c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00090100  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005b23e  00000000  00000000  00090130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000efb4  00000000  00000000  000eb36e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004160  00000000  00000000  000fa328  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b28  00000000  00000000  000fe488  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af29  00000000  00000000  00101fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000416ff  00000000  00000000  0013ced9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012f24b  00000000  00000000  0017e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002ad823  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000116b4  00000000  00000000  002ad920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025254 	.word	0x08025254

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	08025254 	.word	0x08025254

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000011c 	.word	0x2000011c
 8000614:	20000174 	.word	0x20000174

08000618 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b098      	sub	sp, #96	; 0x60
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SecondTask+0x9c>)
 8000622:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000634:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SecondTask+0xa0>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000640:	2300      	movs	r3, #0
 8000642:	2200      	movs	r2, #0
 8000644:	f00b fd96 	bl	800c174 <xQueueGenericSend>
	osDelay(150);
 8000648:	2096      	movs	r0, #150	; 0x96
 800064a:	f00b faa5 	bl	800bb98 <osDelay>
			egt = (egt >= 760) ? 500: egt +12;
			tps = (tps >= 100) ? 0: tps + 4;
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
		}

		vehicle_spd = 0;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <SecondTask+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, vehicle_spd, oil_tmp, oil_press, iat, egt, tps, batt_v};
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <SecondTask+0xa8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <SecondTask+0xac>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <SecondTask+0xb0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <SecondTask+0xb4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <SecondTask+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <SecondTask+0xa4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	61fb      	str	r3, [r7, #28]
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <SecondTask+0xbc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	623b      	str	r3, [r7, #32]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <SecondTask+0xc0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <SecondTask+0xc4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SecondTask+0xc8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SecondTask+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SecondTask+0xd0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
	    xQueueSend(messageQ, &dispVals,0);
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SecondTask+0xd4>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	2300      	movs	r3, #0
 80006a6:	2200      	movs	r2, #0
 80006a8:	f00b fd64 	bl	800c174 <xQueueGenericSend>
		osDelay(50);
 80006ac:	2032      	movs	r0, #50	; 0x32
 80006ae:	f00b fa73 	bl	800bb98 <osDelay>
	{
 80006b2:	e7cc      	b.n	800064e <SecondTask+0x36>
 80006b4:	0802526c 	.word	0x0802526c
 80006b8:	200086c0 	.word	0x200086c0
 80006bc:	20000384 	.word	0x20000384
 80006c0:	20000004 	.word	0x20000004
 80006c4:	2000000c 	.word	0x2000000c
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000010 	.word	0x20000010
 80006d0:	20000014 	.word	0x20000014
 80006d4:	20000388 	.word	0x20000388
 80006d8:	2000038c 	.word	0x2000038c
 80006dc:	20000390 	.word	0x20000390
 80006e0:	20000394 	.word	0x20000394
 80006e4:	20000398 	.word	0x20000398
 80006e8:	2000039c 	.word	0x2000039c
 80006ec:	200086bc 	.word	0x200086bc

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	b08e      	sub	sp, #56	; 0x38
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f002 fcea 	bl	80030ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f85f 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f001 f9bd 	bl	8001a7c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000702:	f000 f917 	bl	8000934 <MX_ADC3_Init>
  MX_CRC_Init();
 8000706:	f000 faf5 	bl	8000cf4 <MX_CRC_Init>
  MX_DCMI_Init();
 800070a:	f000 fb15 	bl	8000d38 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800070e:	f000 fb47 	bl	8000da0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000712:	f001 f907 	bl	8001924 <MX_FMC_Init>
  MX_LTDC_Init();
 8000716:	f000 fb75 	bl	8000e04 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800071a:	f000 fbf5 	bl	8000f08 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800071e:	f000 fc1f 	bl	8000f60 <MX_RTC_Init>
  MX_SAI2_Init();
 8000722:	f000 fcc5 	bl	80010b0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000726:	f000 fd6b 	bl	8001200 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800072a:	f000 fd89 	bl	8001240 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800072e:	f000 fdb7 	bl	80012a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000732:	f000 fdf3 	bl	800131c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000736:	f000 fe9d 	bl	8001474 <MX_TIM2_Init>
  MX_TIM3_Init();
 800073a:	f000 ff11 	bl	8001560 <MX_TIM3_Init>
  MX_TIM5_Init();
 800073e:	f000 ff85 	bl	800164c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000742:	f000 fff9 	bl	8001738 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000746:	f001 f849 	bl	80017dc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800074a:	f001 f88b 	bl	8001864 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800074e:	f001 f8b9 	bl	80018c4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000752:	f00a fedd 	bl	800b510 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000756:	f000 f93f 	bl	80009d8 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 800075a:	f00d ff4b 	bl	800e5f4 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <main+0xbc>)
 8000760:	f107 041c 	add.w	r4, r7, #28
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f00b f9c1 	bl	800bb00 <osThreadCreate>
 800077e:	4602      	mov	r2, r0
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <main+0xc0>)
 8000782:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <main+0xc4>)
 8000786:	463c      	mov	r4, r7
 8000788:	461d      	mov	r5, r3
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000796:	463b      	mov	r3, r7
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00b f9b0 	bl	800bb00 <osThreadCreate>
 80007a0:	4602      	mov	r2, r0
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <main+0xc8>)
 80007a4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007a6:	f00b f988 	bl	800baba <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0xba>
 80007ac:	080252a0 	.word	0x080252a0
 80007b0:	2000bfbc 	.word	0x2000bfbc
 80007b4:	080252c4 	.word	0x080252c4
 80007b8:	2000bfb8 	.word	0x2000bfb8

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0b4      	sub	sp, #208	; 0xd0
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007c6:	2230      	movs	r2, #48	; 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f023 fdc5 	bl	802435a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2284      	movs	r2, #132	; 0x84
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f023 fdb6 	bl	802435a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80007ee:	f005 f943 	bl	8005a78 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b4d      	ldr	r3, [pc, #308]	; (8000928 <SystemClock_Config+0x16c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a4c      	ldr	r2, [pc, #304]	; (8000928 <SystemClock_Config+0x16c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b4a      	ldr	r3, [pc, #296]	; (8000928 <SystemClock_Config+0x16c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080a:	4b48      	ldr	r3, [pc, #288]	; (800092c <SystemClock_Config+0x170>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a47      	ldr	r2, [pc, #284]	; (800092c <SystemClock_Config+0x170>)
 8000810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	4b45      	ldr	r3, [pc, #276]	; (800092c <SystemClock_Config+0x170>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000822:	2309      	movs	r3, #9
 8000824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000844:	2319      	movs	r3, #25
 8000846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800084a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800084e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000858:	2309      	movs	r3, #9
 800085a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fa2a 	bl	8005cbc <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800086e:	f001 fb39 	bl	8001ee4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000872:	f005 f911 	bl	8005a98 <HAL_PWREx_EnableOverDrive>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800087c:	f001 fb32 	bl	8001ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000896:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008a6:	2106      	movs	r1, #6
 80008a8:	4618      	mov	r0, r3
 80008aa:	f005 fcab 	bl	8006204 <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008b4:	f001 fb16 	bl	8001ee4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <SystemClock_Config+0x174>)
 80008ba:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80008bc:	2364      	movs	r3, #100	; 0x64
 80008be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008d2:	2305      	movs	r3, #5
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f6:	2300      	movs	r3, #0
 80008f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80008fa:	2300      	movs	r3, #0
 80008fc:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	4618      	mov	r0, r3
 8000912:	f005 fe7b 	bl	800660c <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800091c:	f001 fae2 	bl	8001ee4 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	37d0      	adds	r7, #208	; 0xd0
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000
 8000930:	01b00868 	.word	0x01b00868

08000934 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_ADC3_Init+0x98>)
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <MX_ADC3_Init+0x9c>)
 800094a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_ADC3_Init+0x98>)
 800094e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000952:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ADC3_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_ADC3_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ADC3_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_ADC3_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_ADC3_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_ADC3_Init+0x98>)
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_ADC3_Init+0xa0>)
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_ADC3_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_ADC3_Init+0x98>)
 8000982:	2201      	movs	r2, #1
 8000984:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_ADC3_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_ADC3_Init+0x98>)
 8000990:	2201      	movs	r2, #1
 8000992:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_ADC3_Init+0x98>)
 8000996:	f002 fbe9 	bl	800316c <HAL_ADC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80009a0:	f001 faa0 	bl	8001ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_ADC3_Init+0x98>)
 80009b6:	f002 fc1d 	bl	80031f4 <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009c0:	f001 fa90 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000c304 	.word	0x2000c304
 80009d0:	40012200 	.word	0x40012200
 80009d4:	0f000001 	.word	0x0f000001

080009d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 80009e0:	4a30      	ldr	r2, [pc, #192]	; (8000aa4 <MX_CAN1_Init+0xcc>)
 80009e2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 80009e6:	2214      	movs	r2, #20
 80009e8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 80009f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80009fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a28:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a2a:	f002 fe27 	bl	800367c <HAL_CAN_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a34:	f001 fa56 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a66:	f002 ff05 	bl	8003874 <HAL_CAN_ConfigFilter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000a70:	f001 fa38 	bl	8001ee4 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a76:	f002 ffdd 	bl	8003a34 <HAL_CAN_Start>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8000a80:	f001 fa30 	bl	8001ee4 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a84:	2102      	movs	r1, #2
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_CAN1_Init+0xc8>)
 8000a88:	f003 f92a 	bl	8003ce0 <HAL_CAN_ActivateNotification>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 8000a92:	f001 fa27 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000c584 	.word	0x2000c584
 8000aa4:	40006400 	.word	0x40006400

08000aa8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000ab0:	4b7e      	ldr	r3, [pc, #504]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000ab2:	4a7f      	ldr	r2, [pc, #508]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f003 f800 	bl	8003abc <HAL_CAN_GetRxMessage>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8000ac2:	f001 fa0f 	bl	8001ee4 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000ac6:	4b7a      	ldr	r3, [pc, #488]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000ace:	d13d      	bne.n	8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000ad0:	4b77      	ldr	r3, [pc, #476]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d139      	bne.n	8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000ad8:	4b75      	ldr	r3, [pc, #468]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ada:	691b      	ldr	r3, [r3, #16]
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	d135      	bne.n	8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
  {
	 int rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8000ae0:	4b72      	ldr	r3, [pc, #456]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b71      	ldr	r3, [pc, #452]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	4313      	orrs	r3, r2
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
	 int tps_in = RxData[2];
 8000af0:	4b6e      	ldr	r3, [pc, #440]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
	 int iat_in = RxData[3];
 8000af6:	4b6d      	ldr	r3, [pc, #436]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000af8:	78db      	ldrb	r3, [r3, #3]
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
	 int map_in = (RxData[4] << 0) | (RxData[7] << 8);
 8000afc:	4b6b      	ldr	r3, [pc, #428]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b6a      	ldr	r3, [pc, #424]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b04:	79db      	ldrb	r3, [r3, #7]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	623b      	str	r3, [r7, #32]

	 rpm = (int)rpm_in;
 8000b0c:	4a69      	ldr	r2, [pc, #420]	; (8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b20:	ee17 2a90 	vmov	r2, s15
 8000b24:	4b64      	ldr	r3, [pc, #400]	; (8000cb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000b26:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 8000b28:	4a64      	ldr	r2, [pc, #400]	; (8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b44:	ee17 2a90 	vmov	r2, s15
 8000b48:	4b5d      	ldr	r3, [pc, #372]	; (8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000b4a:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000b4c:	4b58      	ldr	r3, [pc, #352]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f240 6202 	movw	r2, #1538	; 0x602
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d139      	bne.n	8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 8000b58:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d135      	bne.n	8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 8000b60:	4b53      	ldr	r3, [pc, #332]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d131      	bne.n	8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
  {

	 uint16_t vehicle_spd_in = (RxData[1] << 0) | (RxData[2] << 8);
 8000b68:	4b50      	ldr	r3, [pc, #320]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b4f      	ldr	r3, [pc, #316]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b70:	789b      	ldrb	r3, [r3, #2]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	83fb      	strh	r3, [r7, #30]
	 uint8_t oil_tmp_in = RxData[3];
 8000b7c:	4b4b      	ldr	r3, [pc, #300]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b7e:	78db      	ldrb	r3, [r3, #3]
 8000b80:	777b      	strb	r3, [r7, #29]
	 uint8_t oil_press_in = RxData[4];
 8000b82:	4b4a      	ldr	r3, [pc, #296]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b84:	791b      	ldrb	r3, [r3, #4]
 8000b86:	773b      	strb	r3, [r7, #28]
	 uint8_t fuel_press_in = RxData[5];
 8000b88:	4b48      	ldr	r3, [pc, #288]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b8a:	795b      	ldrb	r3, [r3, #5]
 8000b8c:	76fb      	strb	r3, [r7, #27]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8000b8e:	4b47      	ldr	r3, [pc, #284]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b90:	799b      	ldrb	r3, [r3, #6]
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b45      	ldr	r3, [pc, #276]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000b96:	79db      	ldrb	r3, [r3, #7]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	833b      	strh	r3, [r7, #24]

	 vehicle_spd = ((int)vehicle_spd_in)*1;
 8000ba2:	8bfb      	ldrh	r3, [r7, #30]
 8000ba4:	4a47      	ldr	r2, [pc, #284]	; (8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000ba6:	6013      	str	r3, [r2, #0]
	 oil_tmp = ((int)oil_tmp_in) * 1;
 8000ba8:	7f7b      	ldrb	r3, [r7, #29]
 8000baa:	4a47      	ldr	r2, [pc, #284]	; (8000cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000bac:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 8000bae:	7f3b      	ldrb	r3, [r7, #28]
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 8000bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc0:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000bc2:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 8000bc6:	8b3b      	ldrh	r3, [r7, #24]
 8000bc8:	4a42      	ldr	r2, [pc, #264]	; (8000cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000bca:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000bcc:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f240 6203 	movw	r2, #1539	; 0x603
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d123      	bne.n	8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
 8000bd8:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11f      	bne.n	8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	d11b      	bne.n	8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
  {
	 uint8_t lambda_in = RxData[2];
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000bea:	789b      	ldrb	r3, [r3, #2]
 8000bec:	75fb      	strb	r3, [r7, #23]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000bf0:	791b      	ldrb	r3, [r3, #4]
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000bf6:	795b      	ldrb	r3, [r3, #5]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	82bb      	strh	r3, [r7, #20]
	 lambda = ((float)lambda_in)*0.0078125f;
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	ee07 3a90 	vmov	s15, r3
 8000c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c0c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000cd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>
 8000c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c16:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 8000c1a:	8abb      	ldrh	r3, [r7, #20]
 8000c1c:	4a30      	ldr	r2, [pc, #192]	; (8000ce0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8000c1e:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f240 6204 	movw	r2, #1540	; 0x604
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d11f      	bne.n	8000c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d11b      	bne.n	8000c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d117      	bne.n	8000c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000c44:	78db      	ldrb	r3, [r3, #3]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	827b      	strh	r3, [r7, #18]
	 float battery_voltage = ((float)batt_in)*0.027f;
 8000c50:	8a7b      	ldrh	r3, [r7, #18]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>
 8000c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c62:	edc7 7a03 	vstr	s15, [r7, #12]
	 batt_v = battery_voltage;
 8000c66:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c74:	d116      	bne.n	8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d112      	bne.n	8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d10e      	bne.n	8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
    {
  	 uint16_t lambda_targ_in = RxData[7];
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000c88:	79db      	ldrb	r3, [r3, #7]
 8000c8a:	817b      	strh	r3, [r7, #10]
  	 lambda_targ = lambda_targ_in / 100.0f;
 8000c8c:	897b      	ldrh	r3, [r7, #10]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c96:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
 8000c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000ca0:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000c53c 	.word	0x2000c53c
 8000cb0:	2000c620 	.word	0x2000c620
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000390 	.word	0x20000390
 8000cc0:	20000398 	.word	0x20000398
 8000cc4:	20000384 	.word	0x20000384
 8000cc8:	20000388 	.word	0x20000388
 8000ccc:	3d800000 	.word	0x3d800000
 8000cd0:	2000038c 	.word	0x2000038c
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	3c000000 	.word	0x3c000000
 8000cdc:	20000010 	.word	0x20000010
 8000ce0:	20000394 	.word	0x20000394
 8000ce4:	3cdd2f1b 	.word	0x3cdd2f1b
 8000ce8:	2000039c 	.word	0x2000039c
 8000cec:	42c80000 	.word	0x42c80000
 8000cf0:	20000014 	.word	0x20000014

08000cf4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_CRC_Init+0x3c>)
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <MX_CRC_Init+0x40>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_CRC_Init+0x3c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_CRC_Init+0x3c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_CRC_Init+0x3c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_CRC_Init+0x3c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_CRC_Init+0x3c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_CRC_Init+0x3c>)
 8000d1e:	f003 fb41 	bl	80043a4 <HAL_CRC_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d28:	f001 f8dc 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000c134 	.word	0x2000c134
 8000d34:	40023000 	.word	0x40023000

08000d38 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <MX_DCMI_Init+0x64>)
 8000d40:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_DCMI_Init+0x60>)
 8000d86:	f003 fbf7 	bl	8004578 <HAL_DCMI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f001 f8a8 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000c34c 	.word	0x2000c34c
 8000d9c:	50050000 	.word	0x50050000

08000da0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <MX_DMA2D_Init+0x60>)
 8000da8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000dd6:	f003 fce3 	bl	80047a0 <HAL_DMA2D_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000de0:	f001 f880 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000de4:	2101      	movs	r1, #1
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_DMA2D_Init+0x5c>)
 8000de8:	f003 ffa4 	bl	8004d34 <HAL_DMA2D_ConfigLayer>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000df2:	f001 f877 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000c4fc 	.word	0x2000c4fc
 8000e00:	4002b000 	.word	0x4002b000

08000e04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2234      	movs	r2, #52	; 0x34
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f023 faa2 	bl	802435a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e18:	4a3a      	ldr	r2, [pc, #232]	; (8000f04 <MX_LTDC_Init+0x100>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e2e:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000e34:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e36:	2228      	movs	r2, #40	; 0x28
 8000e38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e3c:	2209      	movs	r2, #9
 8000e3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e42:	2235      	movs	r2, #53	; 0x35
 8000e44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000e46:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e48:	220b      	movs	r2, #11
 8000e4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e4e:	f240 2215 	movw	r2, #533	; 0x215
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e56:	f240 121b 	movw	r2, #283	; 0x11b
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e5e:	f240 2235 	movw	r2, #565	; 0x235
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e66:	f240 121d 	movw	r2, #285	; 0x11d
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e84:	481e      	ldr	r0, [pc, #120]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000e86:	f004 fa5f 	bl	8005348 <HAL_LTDC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e90:	f001 f828 	bl	8001ee4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000e98:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e9c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000ea2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ea6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000eac:	23ff      	movs	r3, #255	; 0xff
 8000eae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000ebe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000ec4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000eca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_LTDC_Init+0xfc>)
 8000eea:	f004 fbb5 	bl	8005658 <HAL_LTDC_ConfigLayer>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000ef4:	f000 fff6 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3738      	adds	r7, #56	; 0x38
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000c25c 	.word	0x2000c25c
 8000f04:	40016800 	.word	0x40016800

08000f08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_QUADSPI_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f14:	22ff      	movs	r2, #255	; 0xff
 8000f16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_QUADSPI_Init+0x50>)
 8000f44:	f004 fdf8 	bl	8005b38 <HAL_QSPI_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f000 ffc9 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000c63c 	.word	0x2000c63c
 8000f5c:	a0001000 	.word	0xa0001000

08000f60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b092      	sub	sp, #72	; 0x48
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f023 f9e9 	bl	802435a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <MX_RTC_Init+0x148>)
 8000f8a:	4a48      	ldr	r2, [pc, #288]	; (80010ac <MX_RTC_Init+0x14c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <MX_RTC_Init+0x148>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <MX_RTC_Init+0x148>)
 8000f96:	227f      	movs	r2, #127	; 0x7f
 8000f98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f9a:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <MX_RTC_Init+0x148>)
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <MX_RTC_Init+0x148>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fa6:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <MX_RTC_Init+0x148>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <MX_RTC_Init+0x148>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fb2:	483d      	ldr	r0, [pc, #244]	; (80010a8 <MX_RTC_Init+0x148>)
 8000fb4:	f006 f84c 	bl	8007050 <HAL_RTC_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000fbe:	f000 ff91 	bl	8001ee4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4830      	ldr	r0, [pc, #192]	; (80010a8 <MX_RTC_Init+0x148>)
 8000fe6:	f006 f8af 	bl	8007148 <HAL_RTC_SetTime>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000ff0:	f000 ff78 	bl	8001ee4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001000:	2301      	movs	r3, #1
 8001002:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	4824      	ldr	r0, [pc, #144]	; (80010a8 <MX_RTC_Init+0x148>)
 8001016:	f006 f955 	bl	80072c4 <HAL_RTC_SetDate>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001020:	f000 ff60 	bl	8001ee4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001024:	2300      	movs	r3, #0
 8001026:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001028:	2300      	movs	r3, #0
 800102a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800102c:	2300      	movs	r3, #0
 800102e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800104e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_RTC_Init+0x148>)
 800105c:	f006 f9da 	bl	8007414 <HAL_RTC_SetAlarm>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001066:	f000 ff3d 	bl	8001ee4 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800106a:	2301      	movs	r3, #1
 800106c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	480a      	ldr	r0, [pc, #40]	; (80010a8 <MX_RTC_Init+0x148>)
 800107e:	f006 f9c9 	bl	8007414 <HAL_RTC_SetAlarm>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001088:	f000 ff2c 	bl	8001ee4 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800108c:	2202      	movs	r2, #2
 800108e:	2100      	movs	r1, #0
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_RTC_Init+0x148>)
 8001092:	f006 fb49 	bl	8007728 <HAL_RTCEx_SetTimeStamp>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800109c:	f000 ff22 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3748      	adds	r7, #72	; 0x48
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000c41c 	.word	0x2000c41c
 80010ac:	40002800 	.word	0x40002800

080010b0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010b4:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010b6:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <MX_SAI2_Init+0x140>)
 80010b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010ba:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010c0:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80010c6:	4b49      	ldr	r3, [pc, #292]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010c8:	2240      	movs	r2, #64	; 0x40
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010d8:	4b44      	ldr	r3, [pc, #272]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010e4:	4b41      	ldr	r3, [pc, #260]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010ea:	4b40      	ldr	r3, [pc, #256]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010f0:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010f2:	4a40      	ldr	r2, [pc, #256]	; (80011f4 <MX_SAI2_Init+0x144>)
 80010f4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010fc:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <MX_SAI2_Init+0x13c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001108:	4b38      	ldr	r3, [pc, #224]	; (80011ec <MX_SAI2_Init+0x13c>)
 800110a:	2200      	movs	r2, #0
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001110:	2208      	movs	r2, #8
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001114:	4b35      	ldr	r3, [pc, #212]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001116:	2201      	movs	r2, #1
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_SAI2_Init+0x13c>)
 800111c:	2200      	movs	r2, #0
 800111e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001122:	2200      	movs	r2, #0
 8001124:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001128:	2200      	movs	r2, #0
 800112a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <MX_SAI2_Init+0x13c>)
 800112e:	2200      	movs	r2, #0
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001134:	2200      	movs	r2, #0
 8001136:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <MX_SAI2_Init+0x13c>)
 800113a:	2201      	movs	r2, #1
 800113c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001140:	2200      	movs	r2, #0
 8001142:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001144:	4829      	ldr	r0, [pc, #164]	; (80011ec <MX_SAI2_Init+0x13c>)
 8001146:	f006 fb45 	bl	80077d4 <HAL_SAI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001150:	f000 fec8 	bl	8001ee4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001156:	4a29      	ldr	r2, [pc, #164]	; (80011fc <MX_SAI2_Init+0x14c>)
 8001158:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_SAI2_Init+0x148>)
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001162:	2203      	movs	r2, #3
 8001164:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_SAI2_Init+0x148>)
 800116e:	2200      	movs	r2, #0
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_SAI2_Init+0x148>)
 800117a:	2201      	movs	r2, #1
 800117c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_SAI2_Init+0x148>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_SAI2_Init+0x148>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SAI2_Init+0x148>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011a4:	2208      	movs	r2, #8
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011bc:	2200      	movs	r2, #0
 80011be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <MX_SAI2_Init+0x148>)
 80011da:	f006 fafb 	bl	80077d4 <HAL_SAI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80011e4:	f000 fe7e 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000c0b0 	.word	0x2000c0b0
 80011f0:	40015c04 	.word	0x40015c04
 80011f4:	0002ee00 	.word	0x0002ee00
 80011f8:	2000bf34 	.word	0x2000bf34
 80011fc:	40015c24 	.word	0x40015c24

08001200 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <MX_SDMMC1_SD_Init+0x3c>)
 8001208:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	2000c158 	.word	0x2000c158
 800123c:	40012c00 	.word	0x40012c00

08001240 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 8001246:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800124a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_SPDIFRX_Init+0x5c>)
 800128a:	f007 fd37 	bl	8008cfc <HAL_SPDIFRX_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001294:	f000 fe26 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000c064 	.word	0x2000c064

080012a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_SPI2_Init+0x74>)
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <MX_SPI2_Init+0x78>)
 80012a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_SPI2_Init+0x74>)
 80012ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_SPI2_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_SPI2_Init+0x74>)
 80012ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_SPI2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_SPI2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_SPI2_Init+0x74>)
 80012ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_SPI2_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_SPI2_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_SPI2_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_SPI2_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_SPI2_Init+0x74>)
 80012ee:	2207      	movs	r2, #7
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_SPI2_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_SPI2_Init+0x74>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_SPI2_Init+0x74>)
 8001300:	f007 fd58 	bl	8008db4 <HAL_SPI_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 fdeb 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000bfc0 	.word	0x2000bfc0
 8001318:	40003800 	.word	0x40003800

0800131c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09a      	sub	sp, #104	; 0x68
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	222c      	movs	r2, #44	; 0x2c
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f022 ffff 	bl	802435a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <MX_TIM1_Init+0x150>)
 800135e:	4a44      	ldr	r2, [pc, #272]	; (8001470 <MX_TIM1_Init+0x154>)
 8001360:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <MX_TIM1_Init+0x150>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <MX_TIM1_Init+0x150>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <MX_TIM1_Init+0x150>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <MX_TIM1_Init+0x150>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <MX_TIM1_Init+0x150>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_TIM1_Init+0x150>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001386:	4839      	ldr	r0, [pc, #228]	; (800146c <MX_TIM1_Init+0x150>)
 8001388:	f007 fda6 	bl	8008ed8 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001392:	f000 fda7 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a0:	4619      	mov	r1, r3
 80013a2:	4832      	ldr	r0, [pc, #200]	; (800146c <MX_TIM1_Init+0x150>)
 80013a4:	f008 f850 	bl	8009448 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013ae:	f000 fd99 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b2:	482e      	ldr	r0, [pc, #184]	; (800146c <MX_TIM1_Init+0x150>)
 80013b4:	f007 fde6 	bl	8008f84 <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013be:	f000 fd91 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4825      	ldr	r0, [pc, #148]	; (800146c <MX_TIM1_Init+0x150>)
 80013d6:	f008 fcb1 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80013e0:	f000 fd80 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e4:	2360      	movs	r3, #96	; 0x60
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	4818      	ldr	r0, [pc, #96]	; (800146c <MX_TIM1_Init+0x150>)
 800140a:	f007 ff05 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001414:	f000 fd66 	bl	8001ee4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800142c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001430:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800143a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM1_Init+0x150>)
 800144e:	f008 fd03 	bl	8009e58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001458:	f000 fd44 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM1_Init+0x150>)
 800145e:	f001 fa3b 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 8001462:	bf00      	nop
 8001464:	3768      	adds	r7, #104	; 0x68
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000c43c 	.word	0x2000c43c
 8001470:	40010000 	.word	0x40010000

08001474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_TIM2_Init+0xe8>)
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <MX_TIM2_Init+0xe8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <MX_TIM2_Init+0xe8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_TIM2_Init+0xe8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <MX_TIM2_Init+0xe8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <MX_TIM2_Init+0xe8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014cc:	4823      	ldr	r0, [pc, #140]	; (800155c <MX_TIM2_Init+0xe8>)
 80014ce:	f007 fd03 	bl	8008ed8 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014d8:	f000 fd04 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	4619      	mov	r1, r3
 80014e8:	481c      	ldr	r0, [pc, #112]	; (800155c <MX_TIM2_Init+0xe8>)
 80014ea:	f007 ffad 	bl	8009448 <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014f4:	f000 fcf6 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f8:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_TIM2_Init+0xe8>)
 80014fa:	f007 fd43 	bl	8008f84 <HAL_TIM_PWM_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001504:	f000 fcee 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <MX_TIM2_Init+0xe8>)
 8001518:	f008 fc10 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001522:	f000 fcdf 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	; 0x60
 8001528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	4619      	mov	r1, r3
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM2_Init+0xe8>)
 800153e:	f007 fe6b 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001548:	f000 fccc 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM2_Init+0xe8>)
 800154e:	f001 f9c3 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	; 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000c544 	.word	0x2000c544

08001560 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_TIM3_Init+0xe4>)
 8001594:	4a2c      	ldr	r2, [pc, #176]	; (8001648 <MX_TIM3_Init+0xe8>)
 8001596:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_TIM3_Init+0xe4>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_TIM3_Init+0xe4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_TIM3_Init+0xe4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_TIM3_Init+0xe4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_TIM3_Init+0xe4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b6:	4823      	ldr	r0, [pc, #140]	; (8001644 <MX_TIM3_Init+0xe4>)
 80015b8:	f007 fc8e 	bl	8008ed8 <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015c2:	f000 fc8f 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d0:	4619      	mov	r1, r3
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <MX_TIM3_Init+0xe4>)
 80015d4:	f007 ff38 	bl	8009448 <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015de:	f000 fc81 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e2:	4818      	ldr	r0, [pc, #96]	; (8001644 <MX_TIM3_Init+0xe4>)
 80015e4:	f007 fcce 	bl	8008f84 <HAL_TIM_PWM_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015ee:	f000 fc79 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <MX_TIM3_Init+0xe4>)
 8001602:	f008 fb9b 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800160c:	f000 fc6a 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001610:	2360      	movs	r3, #96	; 0x60
 8001612:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM3_Init+0xe4>)
 8001628:	f007 fdf6 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001632:	f000 fc57 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM3_Init+0xe4>)
 8001638:	f001 f94e 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000c21c 	.word	0x2000c21c
 8001648:	40000400 	.word	0x40000400

0800164c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	; 0x38
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <MX_TIM5_Init+0xe4>)
 8001680:	4a2c      	ldr	r2, [pc, #176]	; (8001734 <MX_TIM5_Init+0xe8>)
 8001682:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <MX_TIM5_Init+0xe4>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <MX_TIM5_Init+0xe4>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <MX_TIM5_Init+0xe4>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <MX_TIM5_Init+0xe4>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <MX_TIM5_Init+0xe4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016a2:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_TIM5_Init+0xe4>)
 80016a4:	f007 fc18 	bl	8008ed8 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80016ae:	f000 fc19 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016bc:	4619      	mov	r1, r3
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <MX_TIM5_Init+0xe4>)
 80016c0:	f007 fec2 	bl	8009448 <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80016ca:	f000 fc0b 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM5_Init+0xe4>)
 80016d0:	f007 fc58 	bl	8008f84 <HAL_TIM_PWM_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80016da:	f000 fc03 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4810      	ldr	r0, [pc, #64]	; (8001730 <MX_TIM5_Init+0xe4>)
 80016ee:	f008 fb25 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80016f8:	f000 fbf4 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fc:	2360      	movs	r3, #96	; 0x60
 80016fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	220c      	movs	r2, #12
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM5_Init+0xe4>)
 8001714:	f007 fd80 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800171e:	f000 fbe1 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM5_Init+0xe4>)
 8001724:	f001 f8d8 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 8001728:	bf00      	nop
 800172a:	3738      	adds	r7, #56	; 0x38
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000c1dc 	.word	0x2000c1dc
 8001734:	40000c00 	.word	0x40000c00

08001738 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_TIM8_Init+0x9c>)
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <MX_TIM8_Init+0xa0>)
 800175a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_TIM8_Init+0x9c>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_TIM8_Init+0x9c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_TIM8_Init+0x9c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM8_Init+0x9c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_TIM8_Init+0x9c>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_TIM8_Init+0x9c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001780:	4814      	ldr	r0, [pc, #80]	; (80017d4 <MX_TIM8_Init+0x9c>)
 8001782:	f007 fba9 	bl	8008ed8 <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 fbaa 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_TIM8_Init+0x9c>)
 800179e:	f007 fe53 	bl	8009448 <HAL_TIM_ConfigClockSource>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80017a8:	f000 fb9c 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM8_Init+0x9c>)
 80017be:	f008 fabd 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80017c8:	f000 fb8c 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000c024 	.word	0x2000c024
 80017d8:	40010400 	.word	0x40010400

080017dc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	615a      	str	r2, [r3, #20]
 80017f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_TIM12_Init+0x80>)
 80017f6:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <MX_TIM12_Init+0x84>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_TIM12_Init+0x80>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_TIM12_Init+0x80>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_TIM12_Init+0x80>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_TIM12_Init+0x80>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_TIM12_Init+0x80>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001818:	4810      	ldr	r0, [pc, #64]	; (800185c <MX_TIM12_Init+0x80>)
 800181a:	f007 fbb3 	bl	8008f84 <HAL_TIM_PWM_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001824:	f000 fb5e 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001828:	2360      	movs	r3, #96	; 0x60
 800182a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	; (800185c <MX_TIM12_Init+0x80>)
 8001840:	f007 fcea 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800184a:	f000 fb4b 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <MX_TIM12_Init+0x80>)
 8001850:	f001 f842 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000c5ac 	.word	0x2000c5ac
 8001860:	40001800 	.word	0x40001800

08001864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <MX_USART1_UART_Init+0x5c>)
 800186c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_USART1_UART_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_USART1_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_USART1_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART1_UART_Init+0x58>)
 80018a8:	f008 fb72 	bl	8009f90 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018b2:	f000 fb17 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000c39c 	.word	0x2000c39c
 80018c0:	40011000 	.word	0x40011000

080018c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_USART6_UART_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART6_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART6_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART6_UART_Init+0x58>)
 8001908:	f008 fb42 	bl	8009f90 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001912:	f000 fae7 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000c47c 	.word	0x2000c47c
 8001920:	40011400 	.word	0x40011400

08001924 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
 8001938:	615a      	str	r2, [r3, #20]
 800193a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800193c:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <MX_FMC_Init+0x14c>)
 800193e:	4a4d      	ldr	r2, [pc, #308]	; (8001a74 <MX_FMC_Init+0x150>)
 8001940:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001942:	4b4b      	ldr	r3, [pc, #300]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001948:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <MX_FMC_Init+0x14c>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800194e:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001950:	2204      	movs	r2, #4
 8001952:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001954:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001956:	2210      	movs	r2, #16
 8001958:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800195a:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <MX_FMC_Init+0x14c>)
 800195c:	2240      	movs	r2, #64	; 0x40
 800195e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001962:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001966:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001968:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <MX_FMC_Init+0x14c>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001974:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001980:	2200      	movs	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001984:	2302      	movs	r3, #2
 8001986:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001988:	2307      	movs	r3, #7
 800198a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001990:	2307      	movs	r3, #7
 8001992:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001994:	2303      	movs	r3, #3
 8001996:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001998:	2302      	movs	r3, #2
 800199a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4832      	ldr	r0, [pc, #200]	; (8001a70 <MX_FMC_Init+0x14c>)
 80019a6:	f007 f929 	bl	8008bfc <HAL_SDRAM_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80019b0:	f000 fa98 	bl	8001ee4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <MX_FMC_Init+0x154>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <MX_FMC_Init+0x154>)
 80019c0:	2210      	movs	r2, #16
 80019c2:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <MX_FMC_Init+0x154>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <MX_FMC_Init+0x154>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80019d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d4:	4928      	ldr	r1, [pc, #160]	; (8001a78 <MX_FMC_Init+0x154>)
 80019d6:	4826      	ldr	r0, [pc, #152]	; (8001a70 <MX_FMC_Init+0x14c>)
 80019d8:	f007 f944 	bl	8008c64 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f001 fba3 	bl	8003128 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <MX_FMC_Init+0x154>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <MX_FMC_Init+0x154>)
 80019ea:	2210      	movs	r2, #16
 80019ec:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_FMC_Init+0x154>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <MX_FMC_Init+0x154>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80019fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fe:	491e      	ldr	r1, [pc, #120]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a00:	481b      	ldr	r0, [pc, #108]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001a02:	f007 f92f 	bl	8008c64 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a08:	2203      	movs	r2, #3
 8001a0a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a0e:	2210      	movs	r2, #16
 8001a10:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a14:	2208      	movs	r2, #8
 8001a16:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a22:	4915      	ldr	r1, [pc, #84]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001a26:	f007 f91d 	bl	8008c64 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001a2a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001a2e:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a38:	2210      	movs	r2, #16
 8001a3a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a46:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	490a      	ldr	r1, [pc, #40]	; (8001a78 <MX_FMC_Init+0x154>)
 8001a4e:	4808      	ldr	r0, [pc, #32]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001a50:	f007 f908 	bl	8008c64 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001a54:	f240 712b 	movw	r1, #1835	; 0x72b
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_FMC_Init+0x14c>)
 8001a5a:	f007 f92e 	bl	8008cba <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001a5e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001a62:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a66:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000c5ec 	.word	0x2000c5ec
 8001a74:	a0000140 	.word	0xa0000140
 8001a78:	20000374 	.word	0x20000374

08001a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b090      	sub	sp, #64	; 0x40
 8001a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a92:	4baf      	ldr	r3, [pc, #700]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4aae      	ldr	r2, [pc, #696]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001a98:	f043 0310 	orr.w	r3, r3, #16
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4bac      	ldr	r3, [pc, #688]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aaa:	4ba9      	ldr	r3, [pc, #676]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4aa8      	ldr	r2, [pc, #672]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4ba6      	ldr	r3, [pc, #664]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4ba3      	ldr	r3, [pc, #652]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4aa2      	ldr	r2, [pc, #648]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4ba0      	ldr	r3, [pc, #640]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ada:	4b9d      	ldr	r3, [pc, #628]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a9c      	ldr	r2, [pc, #624]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b9a      	ldr	r3, [pc, #616]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4b97      	ldr	r3, [pc, #604]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a96      	ldr	r2, [pc, #600]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b94      	ldr	r3, [pc, #592]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b91      	ldr	r3, [pc, #580]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b8e      	ldr	r3, [pc, #568]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a8a      	ldr	r2, [pc, #552]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a84      	ldr	r2, [pc, #528]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a7e      	ldr	r2, [pc, #504]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b6a:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a78      	ldr	r2, [pc, #480]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	4b73      	ldr	r3, [pc, #460]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a72      	ldr	r2, [pc, #456]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <MX_GPIO_Init+0x2d4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	486d      	ldr	r0, [pc, #436]	; (8001d54 <MX_GPIO_Init+0x2d8>)
 8001ba0:	f003 fbb8 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	210c      	movs	r1, #12
 8001ba8:	486b      	ldr	r0, [pc, #428]	; (8001d58 <MX_GPIO_Init+0x2dc>)
 8001baa:	f003 fbb3 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	486a      	ldr	r0, [pc, #424]	; (8001d5c <MX_GPIO_Init+0x2e0>)
 8001bb4:	f003 fbae 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bbe:	4866      	ldr	r0, [pc, #408]	; (8001d58 <MX_GPIO_Init+0x2dc>)
 8001bc0:	f003 fba8 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bca:	4865      	ldr	r0, [pc, #404]	; (8001d60 <MX_GPIO_Init+0x2e4>)
 8001bcc:	f003 fba2 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	21c8      	movs	r1, #200	; 0xc8
 8001bd4:	4863      	ldr	r0, [pc, #396]	; (8001d64 <MX_GPIO_Init+0x2e8>)
 8001bd6:	f003 fb9d 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001bda:	2308      	movs	r3, #8
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	485e      	ldr	r0, [pc, #376]	; (8001d68 <MX_GPIO_Init+0x2ec>)
 8001bee:	f003 f9cf 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001bf2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c04:	230b      	movs	r3, #11
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4855      	ldr	r0, [pc, #340]	; (8001d64 <MX_GPIO_Init+0x2e8>)
 8001c10:	f003 f9be 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001c14:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c26:	230a      	movs	r3, #10
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	484e      	ldr	r0, [pc, #312]	; (8001d6c <MX_GPIO_Init+0x2f0>)
 8001c32:	f003 f9ad 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4849      	ldr	r0, [pc, #292]	; (8001d70 <MX_GPIO_Init+0x2f4>)
 8001c4c:	f003 f9a0 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001c50:	2340      	movs	r3, #64	; 0x40
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c54:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <MX_GPIO_Init+0x2f8>)
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	483c      	ldr	r0, [pc, #240]	; (8001d54 <MX_GPIO_Init+0x2d8>)
 8001c64:	f003 f994 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001c68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c82:	4619      	mov	r1, r3
 8001c84:	483c      	ldr	r0, [pc, #240]	; (8001d78 <MX_GPIO_Init+0x2fc>)
 8001c86:	f003 f983 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	482c      	ldr	r0, [pc, #176]	; (8001d54 <MX_GPIO_Init+0x2d8>)
 8001ca2:	f003 f975 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001ca6:	f241 030c 	movw	r3, #4108	; 0x100c
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4826      	ldr	r0, [pc, #152]	; (8001d58 <MX_GPIO_Init+0x2dc>)
 8001cc0:	f003 f966 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4828      	ldr	r0, [pc, #160]	; (8001d7c <MX_GPIO_Init+0x300>)
 8001cda:	f003 f959 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001cde:	2308      	movs	r3, #8
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4819      	ldr	r0, [pc, #100]	; (8001d5c <MX_GPIO_Init+0x2e0>)
 8001cf6:	f003 f94b 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4811      	ldr	r0, [pc, #68]	; (8001d54 <MX_GPIO_Init+0x2d8>)
 8001d0e:	f003 f93f 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001d12:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d24:	4619      	mov	r1, r3
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <MX_GPIO_Init+0x2e4>)
 8001d28:	f003 f932 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4806      	ldr	r0, [pc, #24]	; (8001d60 <MX_GPIO_Init+0x2e4>)
 8001d46:	f003 f923 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4e:	e017      	b.n	8001d80 <MX_GPIO_Init+0x304>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40022800 	.word	0x40022800
 8001d60:	40021c00 	.word	0x40021c00
 8001d64:	40021800 	.word	0x40021800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40022400 	.word	0x40022400
 8001d74:	10120000 	.word	0x10120000
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <MX_GPIO_Init+0x418>)
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4841      	ldr	r0, [pc, #260]	; (8001e98 <MX_GPIO_Init+0x41c>)
 8001d92:	f003 f8fd 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d96:	2310      	movs	r3, #16
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001da6:	230a      	movs	r3, #10
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	4619      	mov	r1, r3
 8001db0:	483a      	ldr	r0, [pc, #232]	; (8001e9c <MX_GPIO_Init+0x420>)
 8001db2:	f003 f8ed 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001db6:	23c8      	movs	r3, #200	; 0xc8
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4834      	ldr	r0, [pc, #208]	; (8001ea0 <MX_GPIO_Init+0x424>)
 8001dce:	f003 f8df 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001de2:	230a      	movs	r3, #10
 8001de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dea:	4619      	mov	r1, r3
 8001dec:	482d      	ldr	r0, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0x428>)
 8001dee:	f003 f8cf 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001df2:	2332      	movs	r3, #50	; 0x32
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e02:	230b      	movs	r3, #11
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4825      	ldr	r0, [pc, #148]	; (8001ea4 <MX_GPIO_Init+0x428>)
 8001e0e:	f003 f8bf 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001e12:	2304      	movs	r3, #4
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e16:	2300      	movs	r3, #0
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	4619      	mov	r1, r3
 8001e24:	481e      	ldr	r0, [pc, #120]	; (8001ea0 <MX_GPIO_Init+0x424>)
 8001e26:	f003 f8b3 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e2a:	2386      	movs	r3, #134	; 0x86
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e3a:	230b      	movs	r3, #11
 8001e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e42:	4619      	mov	r1, r3
 8001e44:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <MX_GPIO_Init+0x42c>)
 8001e46:	f003 f8a3 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e4a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e50:	2312      	movs	r3, #18
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e64:	4619      	mov	r1, r3
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_GPIO_Init+0x420>)
 8001e68:	f003 f892 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e6c:	2328      	movs	r3, #40	; 0x28
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <MX_GPIO_Init+0x42c>)
 8001e88:	f003 f882 	bl	8004f90 <HAL_GPIO_Init>

}
 8001e8c:	bf00      	nop
 8001e8e:	3740      	adds	r7, #64	; 0x40
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	10120000 	.word	0x10120000
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021c00 	.word	0x40021c00
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020000 	.word	0x40020000

08001eac <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001eb4:	f00c fba4 	bl	800e600 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f009 fe6d 	bl	800bb98 <osDelay>
 8001ebe:	e7fb      	b.n	8001eb8 <StartDefaultTask+0xc>

08001ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ed2:	f001 f909 	bl	80030e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40001000 	.word	0x40001000

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	f06f 0001 	mvn.w	r0, #1
 8001f32:	f002 f9ff 	bl	8004334 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a21      	ldr	r2, [pc, #132]	; (8001fe8 <HAL_ADC_MspInit+0xa4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d13c      	bne.n	8001fe0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f84:	f043 0320 	orr.w	r3, r3, #32
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_ADC_MspInit+0xa8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001fae:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001fb2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <HAL_ADC_MspInit+0xac>)
 8001fc4:	f002 ffe4 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <HAL_ADC_MspInit+0xb0>)
 8001fdc:	f002 ffd8 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40012200 	.word	0x40012200
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40021400 	.word	0x40021400
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_CAN_MspInit+0x8c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d130      	bne.n	800207c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_CAN_MspInit+0x90>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_CAN_MspInit+0x90>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_CAN_MspInit+0x90>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_CAN_MspInit+0x90>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_CAN_MspInit+0x90>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_CAN_MspInit+0x90>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800204a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800205c:	2309      	movs	r3, #9
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4809      	ldr	r0, [pc, #36]	; (800208c <HAL_CAN_MspInit+0x94>)
 8002068:	f002 ff92 	bl	8004f90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2105      	movs	r1, #5
 8002070:	2014      	movs	r0, #20
 8002072:	f002 f95f 	bl	8004334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002076:	2014      	movs	r0, #20
 8002078:	f002 f978 	bl	800436c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40006400 	.word	0x40006400
 8002088:	40023800 	.word	0x40023800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_CRC_MspInit+0x38>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10b      	bne.n	80020ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_CRC_MspInit+0x3c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_CRC_MspInit+0x3c>)
 80020a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <HAL_CRC_MspInit+0x3c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023000 	.word	0x40023000
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a50      	ldr	r2, [pc, #320]	; (8002230 <HAL_DCMI_MspInit+0x160>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	f040 809a 	bne.w	8002228 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80020f4:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002100:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	623b      	str	r3, [r7, #32]
 800210a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800210c:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a48      	ldr	r2, [pc, #288]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002112:	f043 0310 	orr.w	r3, r3, #16
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a3c      	ldr	r2, [pc, #240]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002146:	6313      	str	r3, [r2, #48]	; 0x30
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002154:	4b37      	ldr	r3, [pc, #220]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_DCMI_MspInit+0x164>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002184:	2360      	movs	r3, #96	; 0x60
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002194:	230d      	movs	r3, #13
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	4826      	ldr	r0, [pc, #152]	; (8002238 <HAL_DCMI_MspInit+0x168>)
 80021a0:	f002 fef6 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80021a4:	2308      	movs	r3, #8
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021b4:	230d      	movs	r3, #13
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	481f      	ldr	r0, [pc, #124]	; (800223c <HAL_DCMI_MspInit+0x16c>)
 80021c0:	f002 fee6 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80021c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021d6:	230d      	movs	r3, #13
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	4817      	ldr	r0, [pc, #92]	; (8002240 <HAL_DCMI_MspInit+0x170>)
 80021e2:	f002 fed5 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80021e6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021f8:	230d      	movs	r3, #13
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	4810      	ldr	r0, [pc, #64]	; (8002244 <HAL_DCMI_MspInit+0x174>)
 8002204:	f002 fec4 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002208:	2350      	movs	r3, #80	; 0x50
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002218:	230d      	movs	r3, #13
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4809      	ldr	r0, [pc, #36]	; (8002248 <HAL_DCMI_MspInit+0x178>)
 8002224:	f002 feb4 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002228:	bf00      	nop
 800222a:	3738      	adds	r7, #56	; 0x38
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	50050000 	.word	0x50050000
 8002234:	40023800 	.word	0x40023800
 8002238:	40021000 	.word	0x40021000
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40021800 	.word	0x40021800
 8002244:	40021c00 	.word	0x40021c00
 8002248:	40020000 	.word	0x40020000

0800224c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <HAL_DMA2D_MspInit+0x44>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d113      	bne.n	8002286 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_DMA2D_MspInit+0x48>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <HAL_DMA2D_MspInit+0x48>)
 8002264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_DMA2D_MspInit+0x48>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2105      	movs	r1, #5
 800227a:	205a      	movs	r0, #90	; 0x5a
 800227c:	f002 f85a 	bl	8004334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002280:	205a      	movs	r0, #90	; 0x5a
 8002282:	f002 f873 	bl	800436c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	4002b000 	.word	0x4002b000
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_DMA2D_MspDeInit+0x2c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d108      	bne.n	80022bc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_DMA2D_MspDeInit+0x30>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <HAL_DMA2D_MspDeInit+0x30>)
 80022b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80022b6:	205a      	movs	r0, #90	; 0x5a
 80022b8:	f002 f866 	bl	8004388 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	4002b000 	.word	0x4002b000
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a55      	ldr	r2, [pc, #340]	; (8002440 <HAL_LTDC_MspInit+0x174>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f040 80a3 	bne.w	8002436 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022f0:	4b54      	ldr	r3, [pc, #336]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	4a53      	ldr	r2, [pc, #332]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 80022f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022fa:	6453      	str	r3, [r2, #68]	; 0x44
 80022fc:	4b51      	ldr	r3, [pc, #324]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002308:	4b4e      	ldr	r3, [pc, #312]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4a4d      	ldr	r2, [pc, #308]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800230e:	f043 0310 	orr.w	r3, r3, #16
 8002312:	6313      	str	r3, [r2, #48]	; 0x30
 8002314:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002320:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a47      	ldr	r2, [pc, #284]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 8002326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
 800232c:	4b45      	ldr	r3, [pc, #276]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a41      	ldr	r2, [pc, #260]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800233e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002350:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	4a3b      	ldr	r2, [pc, #236]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 8002356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800235a:	6313      	str	r3, [r2, #48]	; 0x30
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a35      	ldr	r2, [pc, #212]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_LTDC_MspInit+0x178>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002380:	2310      	movs	r3, #16
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002390:	230e      	movs	r3, #14
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002398:	4619      	mov	r1, r3
 800239a:	482b      	ldr	r0, [pc, #172]	; (8002448 <HAL_LTDC_MspInit+0x17c>)
 800239c:	f002 fdf8 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80023a0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023b2:	230e      	movs	r3, #14
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ba:	4619      	mov	r1, r3
 80023bc:	4823      	ldr	r0, [pc, #140]	; (800244c <HAL_LTDC_MspInit+0x180>)
 80023be:	f002 fde7 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80023c2:	23f7      	movs	r3, #247	; 0xf7
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d2:	230e      	movs	r3, #14
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80023d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023da:	4619      	mov	r1, r3
 80023dc:	481c      	ldr	r0, [pc, #112]	; (8002450 <HAL_LTDC_MspInit+0x184>)
 80023de:	f002 fdd7 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80023f4:	2309      	movs	r3, #9
 80023f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	4619      	mov	r1, r3
 80023fe:	4815      	ldr	r0, [pc, #84]	; (8002454 <HAL_LTDC_MspInit+0x188>)
 8002400:	f002 fdc6 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002404:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002416:	230e      	movs	r3, #14
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800241a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241e:	4619      	mov	r1, r3
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <HAL_LTDC_MspInit+0x18c>)
 8002422:	f002 fdb5 	bl	8004f90 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2105      	movs	r1, #5
 800242a:	2058      	movs	r0, #88	; 0x58
 800242c:	f001 ff82 	bl	8004334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002430:	2058      	movs	r0, #88	; 0x58
 8002432:	f001 ff9b 	bl	800436c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3738      	adds	r7, #56	; 0x38
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40016800 	.word	0x40016800
 8002444:	40023800 	.word	0x40023800
 8002448:	40021000 	.word	0x40021000
 800244c:	40022400 	.word	0x40022400
 8002450:	40022800 	.word	0x40022800
 8002454:	40021800 	.word	0x40021800
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	; 0x30
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_QSPI_MspInit+0x10c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d170      	bne.n	8002560 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800247e:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_QSPI_MspInit+0x110>)
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_QSPI_MspInit+0x110>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6393      	str	r3, [r2, #56]	; 0x38
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_QSPI_MspInit+0x110>)
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002496:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_QSPI_MspInit+0x110>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_QSPI_MspInit+0x110>)
 800249c:	f043 0310 	orr.w	r3, r3, #16
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_QSPI_MspInit+0x110>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_QSPI_MspInit+0x110>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a2e      	ldr	r2, [pc, #184]	; (800256c <HAL_QSPI_MspInit+0x110>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b2c      	ldr	r3, [pc, #176]	; (800256c <HAL_QSPI_MspInit+0x110>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_QSPI_MspInit+0x110>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a28      	ldr	r2, [pc, #160]	; (800256c <HAL_QSPI_MspInit+0x110>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_QSPI_MspInit+0x110>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80024de:	2304      	movs	r3, #4
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ea:	2303      	movs	r3, #3
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024ee:	2309      	movs	r3, #9
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	4619      	mov	r1, r3
 80024f8:	481d      	ldr	r0, [pc, #116]	; (8002570 <HAL_QSPI_MspInit+0x114>)
 80024fa:	f002 fd49 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80024fe:	2340      	movs	r3, #64	; 0x40
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800250e:	230a      	movs	r3, #10
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	4816      	ldr	r0, [pc, #88]	; (8002574 <HAL_QSPI_MspInit+0x118>)
 800251a:	f002 fd39 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251e:	2304      	movs	r3, #4
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800252e:	2309      	movs	r3, #9
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	480e      	ldr	r0, [pc, #56]	; (8002574 <HAL_QSPI_MspInit+0x118>)
 800253a:	f002 fd29 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800253e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002550:	2309      	movs	r3, #9
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	4807      	ldr	r0, [pc, #28]	; (8002578 <HAL_QSPI_MspInit+0x11c>)
 800255c:	f002 fd18 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002560:	bf00      	nop
 8002562:	3730      	adds	r7, #48	; 0x30
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	a0001000 	.word	0xa0001000
 800256c:	40023800 	.word	0x40023800
 8002570:	40021000 	.word	0x40021000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020c00 	.word	0x40020c00

0800257c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_RTC_MspInit+0x2c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d105      	bne.n	800259a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <HAL_RTC_MspInit+0x30>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_RTC_MspInit+0x30>)
 8002594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40002800 	.word	0x40002800
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a25      	ldr	r2, [pc, #148]	; (8002664 <HAL_SD_MspInit+0xb4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d144      	bne.n	800265c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_SD_MspInit+0xb8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_SD_MspInit+0xb8>)
 80025d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_SD_MspInit+0xb8>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_SD_MspInit+0xb8>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <HAL_SD_MspInit+0xb8>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_SD_MspInit+0xb8>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_SD_MspInit+0xb8>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_SD_MspInit+0xb8>)
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_SD_MspInit+0xb8>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800261a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800261e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800262c:	230c      	movs	r3, #12
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	480d      	ldr	r0, [pc, #52]	; (800266c <HAL_SD_MspInit+0xbc>)
 8002638:	f002 fcaa 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800263c:	2304      	movs	r3, #4
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800264c:	230c      	movs	r3, #12
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4806      	ldr	r0, [pc, #24]	; (8002670 <HAL_SD_MspInit+0xc0>)
 8002658:	f002 fc9a 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40023800 	.word	0x40023800
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00

08002674 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002694:	d127      	bne.n	80026e6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002696:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_SPDIFRX_MspInit+0x7c>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80026d6:	2308      	movs	r3, #8
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <HAL_SPDIFRX_MspInit+0x80>)
 80026e2:	f002 fc55 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020c00 	.word	0x40020c00

080026f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a25      	ldr	r2, [pc, #148]	; (80027ac <HAL_SPI_MspInit+0xb4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d144      	bne.n	80027a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002762:	2302      	movs	r3, #2
 8002764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002772:	2305      	movs	r3, #5
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	480d      	ldr	r0, [pc, #52]	; (80027b4 <HAL_SPI_MspInit+0xbc>)
 800277e:	f002 fc07 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002782:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002794:	2305      	movs	r3, #5
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	4806      	ldr	r0, [pc, #24]	; (80027b8 <HAL_SPI_MspInit+0xc0>)
 80027a0:	f002 fbf6 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40003800 	.word	0x40003800
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40020400 	.word	0x40020400

080027bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2e      	ldr	r2, [pc, #184]	; (8002884 <HAL_TIM_Base_MspInit+0xc8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10c      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ce:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80027e6:	e046      	b.n	8002876 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d10c      	bne.n	800280c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a24      	ldr	r2, [pc, #144]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
}
 800280a:	e034      	b.n	8002876 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_TIM_Base_MspInit+0xd0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10c      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697b      	ldr	r3, [r7, #20]
}
 800282e:	e022      	b.n	8002876 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_TIM_Base_MspInit+0xd4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10c      	bne.n	8002854 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 8002840:	f043 0308 	orr.w	r3, r3, #8
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
}
 8002852:	e010      	b.n	8002876 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_TIM_Base_MspInit+0xd8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10b      	bne.n	8002876 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_TIM_Base_MspInit+0xcc>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40010000 	.word	0x40010000
 8002888:	40023800 	.word	0x40023800
 800288c:	40000400 	.word	0x40000400
 8002890:	40000c00 	.word	0x40000c00
 8002894:	40010400 	.word	0x40010400

08002898 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_TIM_PWM_MspInit+0x38>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10b      	bne.n	80028c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40001800 	.word	0x40001800
 80028d4:	40023800 	.word	0x40023800

080028d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <HAL_TIM_MspPostInit+0x178>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11d      	bne.n	8002936 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a55      	ldr	r2, [pc, #340]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002924:	2301      	movs	r3, #1
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	484a      	ldr	r0, [pc, #296]	; (8002a58 <HAL_TIM_MspPostInit+0x180>)
 8002930:	f002 fb2e 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002934:	e087      	b.n	8002a46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293e:	d11d      	bne.n	800297c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a43      	ldr	r2, [pc, #268]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800296a:	2301      	movs	r3, #1
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	4838      	ldr	r0, [pc, #224]	; (8002a58 <HAL_TIM_MspPostInit+0x180>)
 8002976:	f002 fb0b 	bl	8004f90 <HAL_GPIO_Init>
}
 800297a:	e064      	b.n	8002a46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a36      	ldr	r2, [pc, #216]	; (8002a5c <HAL_TIM_MspPostInit+0x184>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11c      	bne.n	80029c0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a32      	ldr	r2, [pc, #200]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800299e:	2310      	movs	r3, #16
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ae:	2302      	movs	r3, #2
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	4829      	ldr	r0, [pc, #164]	; (8002a60 <HAL_TIM_MspPostInit+0x188>)
 80029ba:	f002 fae9 	bl	8004f90 <HAL_GPIO_Init>
}
 80029be:	e042      	b.n	8002a46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_TIM_MspPostInit+0x18c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d11c      	bne.n	8002a04 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029f2:	2302      	movs	r3, #2
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	481a      	ldr	r0, [pc, #104]	; (8002a68 <HAL_TIM_MspPostInit+0x190>)
 80029fe:	f002 fac7 	bl	8004f90 <HAL_GPIO_Init>
}
 8002a02:	e020      	b.n	8002a46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_MspPostInit+0x194>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d11b      	bne.n	8002a46 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_TIM_MspPostInit+0x17c>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002a26:	2340      	movs	r3, #64	; 0x40
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a36:	2309      	movs	r3, #9
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480b      	ldr	r0, [pc, #44]	; (8002a70 <HAL_TIM_MspPostInit+0x198>)
 8002a42:	f002 faa5 	bl	8004f90 <HAL_GPIO_Init>
}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40001800 	.word	0x40001800
 8002a70:	40021c00 	.word	0x40021c00

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3c      	ldr	r2, [pc, #240]	; (8002b84 <HAL_UART_MspInit+0x110>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d145      	bne.n	8002b22 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a96:	4b3c      	ldr	r3, [pc, #240]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002a9c:	f043 0310 	orr.w	r3, r3, #16
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a35      	ldr	r2, [pc, #212]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aee:	2307      	movs	r3, #7
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	4619      	mov	r1, r3
 8002af8:	4824      	ldr	r0, [pc, #144]	; (8002b8c <HAL_UART_MspInit+0x118>)
 8002afa:	f002 fa49 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b10:	2307      	movs	r3, #7
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	481d      	ldr	r0, [pc, #116]	; (8002b90 <HAL_UART_MspInit+0x11c>)
 8002b1c:	f002 fa38 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b20:	e02c      	b.n	8002b7c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_UART_MspInit+0x120>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d127      	bne.n	8002b7c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	4a15      	ldr	r2, [pc, #84]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	6453      	str	r3, [r2, #68]	; 0x44
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_UART_MspInit+0x114>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002b5c:	23c0      	movs	r3, #192	; 0xc0
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	4619      	mov	r1, r3
 8002b76:	4808      	ldr	r0, [pc, #32]	; (8002b98 <HAL_UART_MspInit+0x124>)
 8002b78:	f002 fa0a 	bl	8004f90 <HAL_GPIO_Init>
}
 8002b7c:	bf00      	nop
 8002b7e:	3730      	adds	r7, #48	; 0x30
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40011000 	.word	0x40011000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40011400 	.word	0x40011400
 8002b98:	40020800 	.word	0x40020800

08002b9c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <HAL_FMC_MspInit+0x100>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d16d      	bne.n	8002c94 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002bb8:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <HAL_FMC_MspInit+0x100>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_FMC_MspInit+0x104>)
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	4a37      	ldr	r2, [pc, #220]	; (8002ca0 <HAL_FMC_MspInit+0x104>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6393      	str	r3, [r2, #56]	; 0x38
 8002bca:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <HAL_FMC_MspInit+0x104>)
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8002bd6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002bda:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002be8:	230c      	movs	r3, #12
 8002bea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	482c      	ldr	r0, [pc, #176]	; (8002ca4 <HAL_FMC_MspInit+0x108>)
 8002bf2:	f002 f9cd 	bl	8004f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8002bf6:	f248 1333 	movw	r3, #33075	; 0x8133
 8002bfa:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c08:	230c      	movs	r3, #12
 8002c0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4825      	ldr	r0, [pc, #148]	; (8002ca8 <HAL_FMC_MspInit+0x10c>)
 8002c12:	f002 f9bd 	bl	8004f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8002c16:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c1a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c28:	230c      	movs	r3, #12
 8002c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	481e      	ldr	r0, [pc, #120]	; (8002cac <HAL_FMC_MspInit+0x110>)
 8002c32:	f002 f9ad 	bl	8004f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8002c36:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c3a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c48:	230c      	movs	r3, #12
 8002c4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4817      	ldr	r0, [pc, #92]	; (8002cb0 <HAL_FMC_MspInit+0x114>)
 8002c52:	f002 f99d 	bl	8004f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002c56:	2328      	movs	r3, #40	; 0x28
 8002c58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c66:	230c      	movs	r3, #12
 8002c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4811      	ldr	r0, [pc, #68]	; (8002cb4 <HAL_FMC_MspInit+0x118>)
 8002c70:	f002 f98e 	bl	8004f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c74:	2308      	movs	r3, #8
 8002c76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c84:	230c      	movs	r3, #12
 8002c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	480a      	ldr	r0, [pc, #40]	; (8002cb8 <HAL_FMC_MspInit+0x11c>)
 8002c8e:	f002 f97f 	bl	8004f90 <HAL_GPIO_Init>
 8002c92:	e000      	b.n	8002c96 <HAL_FMC_MspInit+0xfa>
    return;
 8002c94:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200003a0 	.word	0x200003a0
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40021800 	.word	0x40021800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021c00 	.word	0x40021c00
 8002cb8:	40020800 	.word	0x40020800

08002cbc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002cc4:	f7ff ff6a 	bl	8002b9c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <HAL_SAI_MspInit+0xbc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d124      	bne.n	8002d2c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_SAI_MspInit+0xc0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_SAI_MspInit+0xc4>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_SAI_MspInit+0xc4>)
 8002cf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_SAI_MspInit+0xc4>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_SAI_MspInit+0xc0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_SAI_MspInit+0xc0>)
 8002d0a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002d0c:	23f0      	movs	r3, #240	; 0xf0
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d1c:	230a      	movs	r3, #10
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	481c      	ldr	r0, [pc, #112]	; (8002d98 <HAL_SAI_MspInit+0xc8>)
 8002d28:	f002 f932 	bl	8004f90 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_SAI_MspInit+0xcc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d125      	bne.n	8002d82 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_SAI_MspInit+0xc0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_SAI_MspInit+0xc4>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_SAI_MspInit+0xc4>)
 8002d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d48:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_SAI_MspInit+0xc4>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_SAI_MspInit+0xc0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_SAI_MspInit+0xc0>)
 8002d5e:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d72:	230a      	movs	r3, #10
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4808      	ldr	r0, [pc, #32]	; (8002da0 <HAL_SAI_MspInit+0xd0>)
 8002d7e:	f002 f907 	bl	8004f90 <HAL_GPIO_Init>

    }
}
 8002d82:	bf00      	nop
 8002d84:	3728      	adds	r7, #40	; 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40015c04 	.word	0x40015c04
 8002d90:	200003a4 	.word	0x200003a4
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40015c24 	.word	0x40015c24
 8002da0:	40021800 	.word	0x40021800

08002da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002db4:	2200      	movs	r2, #0
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	2036      	movs	r0, #54	; 0x36
 8002dba:	f001 fabb 	bl	8004334 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002dbe:	2036      	movs	r0, #54	; 0x36
 8002dc0:	f001 fad4 	bl	800436c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <HAL_InitTick+0xa0>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <HAL_InitTick+0xa0>)
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_InitTick+0xa0>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ddc:	f107 0210 	add.w	r2, r7, #16
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fbde 	bl	80065a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002dec:	f003 fbb4 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 8002df0:	4603      	mov	r3, r0
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <HAL_InitTick+0xa4>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	3b01      	subs	r3, #1
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_InitTick+0xa8>)
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <HAL_InitTick+0xac>)
 8002e08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_InitTick+0xa8>)
 8002e0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <HAL_InitTick+0xa8>)
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_InitTick+0xa8>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_InitTick+0xa8>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e24:	4809      	ldr	r0, [pc, #36]	; (8002e4c <HAL_InitTick+0xa8>)
 8002e26:	f006 f857 	bl	8008ed8 <HAL_TIM_Base_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e30:	4806      	ldr	r0, [pc, #24]	; (8002e4c <HAL_InitTick+0xa8>)
 8002e32:	f006 f87d 	bl	8008f30 <HAL_TIM_Base_Start_IT>
 8002e36:	4603      	mov	r3, r0
 8002e38:	e000      	b.n	8002e3c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3730      	adds	r7, #48	; 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	431bde83 	.word	0x431bde83
 8002e4c:	2000c688 	.word	0x2000c688
 8002e50:	40001000 	.word	0x40001000

08002e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <HardFault_Handler+0x4>

08002e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <MemManage_Handler+0x4>

08002e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <BusFault_Handler+0x4>

08002e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <UsageFault_Handler+0x4>

08002e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <CAN1_RX0_IRQHandler+0x10>)
 8002e8e:	f000 ff4d 	bl	8003d2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000c584 	.word	0x2000c584

08002e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM6_DAC_IRQHandler+0x10>)
 8002ea2:	f006 f89a 	bl	8008fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000c688 	.word	0x2000c688

08002eb0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <LTDC_IRQHandler+0x10>)
 8002eb6:	f002 fb17 	bl	80054e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000c25c 	.word	0x2000c25c

08002ec4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <DMA2D_IRQHandler+0x10>)
 8002eca:	f001 fe22 	bl	8004b12 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000c4fc 	.word	0x2000c4fc

08002ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
	return 1;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <_kill>:

int _kill(int pid, int sig)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ef2:	f021 f9db 	bl	80242ac <__errno>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	2316      	movs	r3, #22
 8002efa:	6013      	str	r3, [r2, #0]
	return -1;
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_exit>:

void _exit (int status)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f10:	f04f 31ff 	mov.w	r1, #4294967295
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffe7 	bl	8002ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f1a:	e7fe      	b.n	8002f1a <_exit+0x12>

08002f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00a      	b.n	8002f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f2e:	f3af 8000 	nop.w
 8002f32:	4601      	mov	r1, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3301      	adds	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dbf0      	blt.n	8002f2e <_read+0x12>
	}

return len;
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e009      	b.n	8002f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf1      	blt.n	8002f68 <_write+0x12>
	}
	return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_close>:

int _close(int file)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
	return -1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <_isatty>:

int _isatty(int file)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <_sbrk+0x50>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <_sbrk+0x16>
		heap_end = &end;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <_sbrk+0x50>)
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <_sbrk+0x54>)
 800300c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <_sbrk+0x50>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <_sbrk+0x50>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	466a      	mov	r2, sp
 800301e:	4293      	cmp	r3, r2
 8003020:	d907      	bls.n	8003032 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003022:	f021 f943 	bl	80242ac <__errno>
 8003026:	4602      	mov	r2, r0
 8003028:	230c      	movs	r3, #12
 800302a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800302c:	f04f 33ff 	mov.w	r3, #4294967295
 8003030:	e006      	b.n	8003040 <_sbrk+0x48>
	}

	heap_end += incr;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <_sbrk+0x50>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	4a03      	ldr	r2, [pc, #12]	; (8003048 <_sbrk+0x50>)
 800303c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200003a8 	.word	0x200003a8
 800304c:	2000cb40 	.word	0x2000cb40

08003050 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <SystemInit+0x28>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <SystemInit+0x28>)
 800305c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <SystemInit+0x28>)
 8003066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800306a:	609a      	str	r2, [r3, #8]
#endif
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800307c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003082:	e003      	b.n	800308c <LoopCopyDataInit>

08003084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800308a:	3104      	adds	r1, #4

0800308c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800308c:	480b      	ldr	r0, [pc, #44]	; (80030bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003094:	d3f6      	bcc.n	8003084 <CopyDataInit>
  ldr  r2, =_sbss
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003098:	e002      	b.n	80030a0 <LoopFillZerobss>

0800309a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800309a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800309c:	f842 3b04 	str.w	r3, [r2], #4

080030a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030a4:	d3f9      	bcc.n	800309a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030a6:	f7ff ffd3 	bl	8003050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030aa:	f021 f917 	bl	80242dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ae:	f7fd fb1f 	bl	80006f0 <main>
  bx  lr    
 80030b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030b4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80030b8:	0807d4fc 	.word	0x0807d4fc
  ldr  r0, =_sdata
 80030bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030c0:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 80030c4:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 80030c8:	2000cb3c 	.word	0x2000cb3c

080030cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC_IRQHandler>

080030ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d2:	2003      	movs	r0, #3
 80030d4:	f001 f923 	bl	800431e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d8:	2000      	movs	r0, #0
 80030da:	f7ff fe63 	bl	8002da4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80030de:	f7fe ff09 	bl	8001ef4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x20>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x24>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_IncTick+0x24>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000020 	.word	0x20000020
 800310c:	2000c6c8 	.word	0x2000c6c8

08003110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return uwTick;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_GetTick+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	2000c6c8 	.word	0x2000c6c8

08003128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff ffee 	bl	8003110 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d005      	beq.n	800314e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_Delay+0x40>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800314e:	bf00      	nop
 8003150:	f7ff ffde 	bl	8003110 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d8f7      	bhi.n	8003150 <HAL_Delay+0x28>
  {
  }
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000020 	.word	0x20000020

0800316c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e031      	b.n	80031e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe feda 	bl	8001f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d116      	bne.n	80031d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_ADC_Init+0x84>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	f043 0202 	orr.w	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f964 	bl	8003488 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
 80031d6:	e001      	b.n	80031dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	ffffeefd 	.word	0xffffeefd

080031f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x1c>
 800320c:	2302      	movs	r3, #2
 800320e:	e12a      	b.n	8003466 <HAL_ADC_ConfigChannel+0x272>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b09      	cmp	r3, #9
 800321e:	d93a      	bls.n	8003296 <HAL_ADC_ConfigChannel+0xa2>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003228:	d035      	beq.n	8003296 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68d9      	ldr	r1, [r3, #12]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	3b1e      	subs	r3, #30
 8003240:	2207      	movs	r2, #7
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	400a      	ands	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a87      	ldr	r2, [pc, #540]	; (8003474 <HAL_ADC_ConfigChannel+0x280>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10a      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	061a      	lsls	r2, r3, #24
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326e:	e035      	b.n	80032dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68d9      	ldr	r1, [r3, #12]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	4618      	mov	r0, r3
 8003282:	4603      	mov	r3, r0
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4403      	add	r3, r0
 8003288:	3b1e      	subs	r3, #30
 800328a:	409a      	lsls	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003294:	e022      	b.n	80032dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6919      	ldr	r1, [r3, #16]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	2207      	movs	r2, #7
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43da      	mvns	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	400a      	ands	r2, r1
 80032b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6919      	ldr	r1, [r3, #16]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	4603      	mov	r3, r0
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4403      	add	r3, r0
 80032d2:	409a      	lsls	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d824      	bhi.n	800332e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b05      	subs	r3, #5
 80032f6:	221f      	movs	r2, #31
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43da      	mvns	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	400a      	ands	r2, r1
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	4618      	mov	r0, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	3b05      	subs	r3, #5
 8003320:	fa00 f203 	lsl.w	r2, r0, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	635a      	str	r2, [r3, #52]	; 0x34
 800332c:	e04c      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d824      	bhi.n	8003380 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b23      	subs	r3, #35	; 0x23
 8003348:	221f      	movs	r2, #31
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	400a      	ands	r2, r1
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	4618      	mov	r0, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	3b23      	subs	r3, #35	; 0x23
 8003372:	fa00 f203 	lsl.w	r2, r0, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
 800337e:	e023      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	3b41      	subs	r3, #65	; 0x41
 8003392:	221f      	movs	r2, #31
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b41      	subs	r3, #65	; 0x41
 80033bc:	fa00 f203 	lsl.w	r2, r0, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2a      	ldr	r2, [pc, #168]	; (8003478 <HAL_ADC_ConfigChannel+0x284>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10a      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1f4>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_ADC_ConfigChannel+0x288>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_ADC_ConfigChannel+0x288>)
 80033e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80033e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_ADC_ConfigChannel+0x284>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d109      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x212>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b12      	cmp	r3, #18
 80033f8:	d105      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_ADC_ConfigChannel+0x288>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <HAL_ADC_ConfigChannel+0x288>)
 8003400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003404:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <HAL_ADC_ConfigChannel+0x284>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d125      	bne.n	800345c <HAL_ADC_ConfigChannel+0x268>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_ADC_ConfigChannel+0x280>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <HAL_ADC_ConfigChannel+0x22e>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b11      	cmp	r3, #17
 8003420:	d11c      	bne.n	800345c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_ADC_ConfigChannel+0x288>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <HAL_ADC_ConfigChannel+0x288>)
 8003428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800342c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a10      	ldr	r2, [pc, #64]	; (8003474 <HAL_ADC_ConfigChannel+0x280>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d111      	bne.n	800345c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_ADC_ConfigChannel+0x28c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a11      	ldr	r2, [pc, #68]	; (8003484 <HAL_ADC_ConfigChannel+0x290>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0c9a      	lsrs	r2, r3, #18
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800344e:	e002      	b.n	8003456 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3b01      	subs	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f9      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	10000012 	.word	0x10000012
 8003478:	40012000 	.word	0x40012000
 800347c:	40012300 	.word	0x40012300
 8003480:	20000018 	.word	0x20000018
 8003484:	431bde83 	.word	0x431bde83

08003488 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003490:	4b78      	ldr	r3, [pc, #480]	; (8003674 <ADC_Init+0x1ec>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4a77      	ldr	r2, [pc, #476]	; (8003674 <ADC_Init+0x1ec>)
 8003496:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800349a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800349c:	4b75      	ldr	r3, [pc, #468]	; (8003674 <ADC_Init+0x1ec>)
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4973      	ldr	r1, [pc, #460]	; (8003674 <ADC_Init+0x1ec>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	4a58      	ldr	r2, [pc, #352]	; (8003678 <ADC_Init+0x1f0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800352a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	e00f      	b.n	8003582 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003580:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0202 	bic.w	r2, r2, #2
 8003590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	005a      	lsls	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	3b01      	subs	r3, #1
 80035dc:	035a      	lsls	r2, r3, #13
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e007      	b.n	80035f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	3b01      	subs	r3, #1
 8003614:	051a      	lsls	r2, r3, #20
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800362c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800363a:	025a      	lsls	r2, r3, #9
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	029a      	lsls	r2, r3, #10
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40012300 	.word	0x40012300
 8003678:	0f000001 	.word	0x0f000001

0800367c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0ed      	b.n	800386a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fcac 	bl	8001ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0202 	bic.w	r2, r2, #2
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b0:	f7ff fd2e 	bl	8003110 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036b6:	e012      	b.n	80036de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036b8:	f7ff fd2a 	bl	8003110 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b0a      	cmp	r3, #10
 80036c4:	d90b      	bls.n	80036de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2205      	movs	r2, #5
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0c5      	b.n	800386a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e5      	bne.n	80036b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036fc:	f7ff fd08 	bl	8003110 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003702:	e012      	b.n	800372a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003704:	f7ff fd04 	bl	8003110 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d90b      	bls.n	800372a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2205      	movs	r2, #5
 8003722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e09f      	b.n	800386a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0e5      	beq.n	8003704 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7e1b      	ldrb	r3, [r3, #24]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d108      	bne.n	8003752 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e007      	b.n	8003762 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7e5b      	ldrb	r3, [r3, #25]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e007      	b.n	800378c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7e9b      	ldrb	r3, [r3, #26]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d108      	bne.n	80037a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e007      	b.n	80037b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0220 	bic.w	r2, r2, #32
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7edb      	ldrb	r3, [r3, #27]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0210 	bic.w	r2, r2, #16
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e007      	b.n	80037e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0210 	orr.w	r2, r2, #16
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7f1b      	ldrb	r3, [r3, #28]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d108      	bne.n	80037fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e007      	b.n	800380a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0208 	bic.w	r2, r2, #8
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	7f5b      	ldrb	r3, [r3, #29]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d108      	bne.n	8003824 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0204 	orr.w	r2, r2, #4
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800388a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d003      	beq.n	800389a <HAL_CAN_ConfigFilter+0x26>
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	2b02      	cmp	r3, #2
 8003896:	f040 80be 	bne.w	8003a16 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_CAN_ConfigFilter+0x1bc>)
 800389c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	431a      	orrs	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2201      	movs	r2, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d123      	bne.n	8003944 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43db      	mvns	r3, r3
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800391e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3248      	adds	r2, #72	; 0x48
 8003924:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003938:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	3348      	adds	r3, #72	; 0x48
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d122      	bne.n	8003992 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	431a      	orrs	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800396c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3248      	adds	r2, #72	; 0x48
 8003972:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003986:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	3348      	adds	r3, #72	; 0x48
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	401a      	ands	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039ac:	e007      	b.n	80039be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	401a      	ands	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80039d8:	e007      	b.n	80039ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a08:	f023 0201 	bic.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e006      	b.n	8003a24 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40006400 	.word	0x40006400

08003a34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d12e      	bne.n	8003aa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a60:	f7ff fb56 	bl	8003110 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a66:	e012      	b.n	8003a8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a68:	f7ff fb52 	bl	8003110 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b0a      	cmp	r3, #10
 8003a74:	d90b      	bls.n	8003a8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2205      	movs	r2, #5
 8003a86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e012      	b.n	8003ab4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e006      	b.n	8003ab4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
  }
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d003      	beq.n	8003ae0 <HAL_CAN_GetRxMessage+0x24>
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	f040 80f3 	bne.w	8003cc6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10e      	bne.n	8003b04 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0e7      	b.n	8003cd4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0d8      	b.n	8003cd4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	331b      	adds	r3, #27
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4413      	add	r3, r2
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0204 	and.w	r2, r3, #4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	331b      	adds	r3, #27
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4413      	add	r3, r2
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	0d5b      	lsrs	r3, r3, #21
 8003b50:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e00b      	b.n	8003b72 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	331b      	adds	r3, #27
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	4413      	add	r3, r2
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	331b      	adds	r3, #27
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	4413      	add	r3, r2
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0202 	and.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	331b      	adds	r3, #27
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	331b      	adds	r3, #27
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	4413      	add	r3, r2
 8003bac:	3304      	adds	r3, #4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	331b      	adds	r3, #27
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	0a1a      	lsrs	r2, r3, #8
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0c1a      	lsrs	r2, r3, #16
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3302      	adds	r3, #2
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0e1a      	lsrs	r2, r3, #24
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3303      	adds	r3, #3
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	3304      	adds	r3, #4
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0a1a      	lsrs	r2, r3, #8
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	3305      	adds	r3, #5
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0c1a      	lsrs	r2, r3, #16
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3306      	adds	r3, #6
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0e1a      	lsrs	r2, r3, #24
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3307      	adds	r3, #7
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d108      	bne.n	8003cb2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	e007      	b.n	8003cc2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0220 	orr.w	r2, r2, #32
 8003cc0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e006      	b.n	8003cd4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d002      	beq.n	8003cfe <HAL_CAN_ActivateNotification+0x1e>
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d109      	bne.n	8003d12 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6959      	ldr	r1, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e006      	b.n	8003d20 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d07c      	beq.n	8003e6c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d023      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2201      	movs	r2, #1
 8003d82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f97d 	bl	800408e <HAL_CAN_TxMailbox0CompleteCallback>
 8003d94:	e016      	b.n	8003dc4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e00c      	b.n	8003dc4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	e002      	b.n	8003dc4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f983 	bl	80040ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d024      	beq.n	8003e18 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f95d 	bl	80040a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8003de8:	e016      	b.n	8003e18 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfc:	e00c      	b.n	8003e18 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	e002      	b.n	8003e18 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f963 	bl	80040de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d024      	beq.n	8003e6c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f93d 	bl	80040b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e3c:	e016      	b.n	8003e6c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e50:	e00c      	b.n	8003e6c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	e002      	b.n	8003e6c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f943 	bl	80040f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f92a 	bl	8004106 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fc fdec 	bl	8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f90c 	bl	800412e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8f3 	bl	800411a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d006      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8f6 	bl	8004142 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2208      	movs	r2, #8
 8003f70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8ef 	bl	8004156 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d06c      	beq.n	8004066 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	f043 0304 	orr.w	r3, r3, #4
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03d      	beq.n	8004066 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d038      	beq.n	8004066 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	d017      	beq.n	800402e <HAL_CAN_IRQHandler+0x302>
 8003ffe:	2b30      	cmp	r3, #48	; 0x30
 8004000:	d804      	bhi.n	800400c <HAL_CAN_IRQHandler+0x2e0>
 8004002:	2b10      	cmp	r3, #16
 8004004:	d009      	beq.n	800401a <HAL_CAN_IRQHandler+0x2ee>
 8004006:	2b20      	cmp	r3, #32
 8004008:	d00c      	beq.n	8004024 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800400a:	e024      	b.n	8004056 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800400c:	2b50      	cmp	r3, #80	; 0x50
 800400e:	d018      	beq.n	8004042 <HAL_CAN_IRQHandler+0x316>
 8004010:	2b60      	cmp	r3, #96	; 0x60
 8004012:	d01b      	beq.n	800404c <HAL_CAN_IRQHandler+0x320>
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d00f      	beq.n	8004038 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004018:	e01d      	b.n	8004056 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f043 0308 	orr.w	r3, r3, #8
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004022:	e018      	b.n	8004056 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f043 0310 	orr.w	r3, r3, #16
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800402c:	e013      	b.n	8004056 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	f043 0320 	orr.w	r3, r3, #32
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004036:	e00e      	b.n	8004056 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004040:	e009      	b.n	8004056 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800404a:	e004      	b.n	8004056 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004054:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004064:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2204      	movs	r2, #4
 800406c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f872 	bl	800416a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004086:	bf00      	nop
 8004088:	3728      	adds	r7, #40	; 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800419c:	4013      	ands	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <__NVIC_SetPriorityGrouping+0x44>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ae:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <__NVIC_SetPriorityGrouping+0x40>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	60d3      	str	r3, [r2, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00
 80041c4:	05fa0000 	.word	0x05fa0000

080041c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <__NVIC_GetPriorityGrouping+0x18>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	f003 0307 	and.w	r3, r3, #7
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	db0b      	blt.n	800420e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	4907      	ldr	r1, [pc, #28]	; (800421c <__NVIC_EnableIRQ+0x38>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2001      	movs	r0, #1
 8004206:	fa00 f202 	lsl.w	r2, r0, r2
 800420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000e100 	.word	0xe000e100

08004220 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db10      	blt.n	8004254 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4909      	ldr	r1, [pc, #36]	; (8004260 <__NVIC_DisableIRQ+0x40>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2001      	movs	r0, #1
 8004242:	fa00 f202 	lsl.w	r2, r0, r2
 8004246:	3320      	adds	r3, #32
 8004248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800424c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004250:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100

08004264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db0a      	blt.n	800428e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	490c      	ldr	r1, [pc, #48]	; (80042b0 <__NVIC_SetPriority+0x4c>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	440b      	add	r3, r1
 8004288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800428c:	e00a      	b.n	80042a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <__NVIC_SetPriority+0x50>)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3b04      	subs	r3, #4
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	440b      	add	r3, r1
 80042a2:	761a      	strb	r2, [r3, #24]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	e000e100 	.word	0xe000e100
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f1c3 0307 	rsb	r3, r3, #7
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	bf28      	it	cs
 80042d6:	2304      	movcs	r3, #4
 80042d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3304      	adds	r3, #4
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d902      	bls.n	80042e8 <NVIC_EncodePriority+0x30>
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3b03      	subs	r3, #3
 80042e6:	e000      	b.n	80042ea <NVIC_EncodePriority+0x32>
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	401a      	ands	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004300:	f04f 31ff 	mov.w	r1, #4294967295
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43d9      	mvns	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004310:	4313      	orrs	r3, r2
         );
}
 8004312:	4618      	mov	r0, r3
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff ff2a 	bl	8004180 <__NVIC_SetPriorityGrouping>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004346:	f7ff ff3f 	bl	80041c8 <__NVIC_GetPriorityGrouping>
 800434a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	6978      	ldr	r0, [r7, #20]
 8004352:	f7ff ffb1 	bl	80042b8 <NVIC_EncodePriority>
 8004356:	4602      	mov	r2, r0
 8004358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff80 	bl	8004264 <__NVIC_SetPriority>
}
 8004364:	bf00      	nop
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff32 	bl	80041e4 <__NVIC_EnableIRQ>
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff42 	bl	8004220 <__NVIC_DisableIRQ>
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e054      	b.n	8004460 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7f5b      	ldrb	r3, [r3, #29]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fd fe62 	bl	8002090 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10c      	bne.n	80043f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <HAL_CRC_Init+0xc4>)
 80043e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0218 	bic.w	r2, r2, #24
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	e00c      	b.n	800440e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f834 	bl	800446c <HAL_CRCEx_Polynomial_Set>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e028      	b.n	8004460 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	795b      	ldrb	r3, [r3, #5]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f04f 32ff 	mov.w	r2, #4294967295
 800441e:	611a      	str	r2, [r3, #16]
 8004420:	e004      	b.n	800442c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6912      	ldr	r2, [r2, #16]
 800442a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	04c11db7 	.word	0x04c11db7

0800446c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800447c:	231f      	movs	r3, #31
 800447e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004480:	bf00      	nop
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	613a      	str	r2, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b18      	cmp	r3, #24
 80044a4:	d846      	bhi.n	8004534 <HAL_CRCEx_Polynomial_Set+0xc8>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	0800453b 	.word	0x0800453b
 80044b0:	08004535 	.word	0x08004535
 80044b4:	08004535 	.word	0x08004535
 80044b8:	08004535 	.word	0x08004535
 80044bc:	08004535 	.word	0x08004535
 80044c0:	08004535 	.word	0x08004535
 80044c4:	08004535 	.word	0x08004535
 80044c8:	08004535 	.word	0x08004535
 80044cc:	08004529 	.word	0x08004529
 80044d0:	08004535 	.word	0x08004535
 80044d4:	08004535 	.word	0x08004535
 80044d8:	08004535 	.word	0x08004535
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004535 	.word	0x08004535
 80044e4:	08004535 	.word	0x08004535
 80044e8:	08004535 	.word	0x08004535
 80044ec:	0800451d 	.word	0x0800451d
 80044f0:	08004535 	.word	0x08004535
 80044f4:	08004535 	.word	0x08004535
 80044f8:	08004535 	.word	0x08004535
 80044fc:	08004535 	.word	0x08004535
 8004500:	08004535 	.word	0x08004535
 8004504:	08004535 	.word	0x08004535
 8004508:	08004535 	.word	0x08004535
 800450c:	08004511 	.word	0x08004511
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d913      	bls.n	800453e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800451a:	e010      	b.n	800453e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b07      	cmp	r3, #7
 8004520:	d90f      	bls.n	8004542 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004526:	e00c      	b.n	8004542 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b0f      	cmp	r3, #15
 800452c:	d90b      	bls.n	8004546 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004532:	e008      	b.n	8004546 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	e006      	b.n	8004548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800453a:	bf00      	nop
 800453c:	e004      	b.n	8004548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004546:	bf00      	nop
  }
  if (status == HAL_OK)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 0118 	bic.w	r1, r3, #24
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e069      	b.n	800465e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fd9a 	bl	80020d0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_DCMI_Init+0xf0>)
 80045be:	400b      	ands	r3, r1
 80045c0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6819      	ldr	r1, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004606:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b10      	cmp	r3, #16
 8004616:	d112      	bne.n	800463e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7f1b      	ldrb	r3, [r3, #28]
 800461c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7f5b      	ldrb	r3, [r3, #29]
 8004622:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004624:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7f9b      	ldrb	r3, [r3, #30]
 800462a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800462c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7fdb      	ldrb	r3, [r3, #31]
 8004634:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800463a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800463c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 021e 	orr.w	r2, r2, #30
 800464c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	ffe0f007 	.word	0xffe0f007

0800466c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_DMA_Start_IT+0x26>
 800468e:	2302      	movs	r3, #2
 8004690:	e048      	b.n	8004724 <HAL_DMA_Start_IT+0xb8>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d137      	bne.n	8004716 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f842 	bl	8004744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c4:	223f      	movs	r2, #63	; 0x3f
 80046c6:	409a      	lsls	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0216 	orr.w	r2, r2, #22
 80046da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0208 	orr.w	r2, r2, #8
 8004702:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e005      	b.n	8004722 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800471e:	2302      	movs	r3, #2
 8004720:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d108      	bne.n	8004784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004782:	e007      	b.n	8004794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e039      	b.n	8004826 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd fd40 	bl	800224c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	f023 0107 	bic.w	r1, r3, #7
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_DMA2D_Init+0x90>)
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d1      	ldr	r1, [r2, #12]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	430b      	orrs	r3, r1
 8004814:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	ffffc000 	.word	0xffffc000

08004834 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e05f      	b.n	8004906 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004846:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_DMA2D_DeInit+0xdc>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02e      	beq.n	80048b0 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f8c1 	bl	80049e8 <HAL_DMA2D_Abort>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d021      	beq.n	80048b0 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e04a      	b.n	8004906 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b20      	cmp	r3, #32
 800487c:	d108      	bne.n	8004890 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800487e:	2100      	movs	r1, #0
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f8f7 	bl	8004a74 <HAL_DMA2D_CLUTLoading_Abort>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d011      	beq.n	80048b0 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e03a      	b.n	8004906 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b20      	cmp	r3, #32
 800489c:	d108      	bne.n	80048b0 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800489e:	2101      	movs	r1, #1
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8e7 	bl	8004a74 <HAL_DMA2D_CLUTLoading_Abort>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e02a      	b.n	8004906 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	223f      	movs	r2, #63	; 0x3f
 80048be:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2200      	movs	r2, #0
 80048d6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2200      	movs	r2, #0
 80048e6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fd fcd5 	bl	8002298 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800

08004914 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_DMA2D_Start_IT+0x1c>
 800492c:	2302      	movs	r3, #2
 800492e:	e020      	b.n	8004972 <HAL_DMA2D_Start_IT+0x5e>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fa84 	bl	8004e58 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800495e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af02      	add	r7, sp, #8
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8004992:	2302      	movs	r3, #2
 8004994:	e024      	b.n	80049e0 <HAL_DMA2D_BlendingStart_IT+0x66>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fa4d 	bl	8004e58 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80049cc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 0205 	bic.w	r2, r3, #5
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0204 	orr.w	r2, r2, #4
 8004a02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a04:	f7fe fb84 	bl	8003110 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a0a:	e017      	b.n	8004a3c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004a0c:	f7fe fb80 	bl	8003110 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a1a:	d90f      	bls.n	8004a3c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e017      	b.n	8004a6c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e0      	bne.n	8004a0c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8004a58:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3324      	adds	r3, #36	; 0x24
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0204 	orr.w	r2, r2, #4
 8004a94:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d103      	bne.n	8004aa4 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	331c      	adds	r3, #28
 8004aa2:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa4:	f7fe fb34 	bl	8003110 <HAL_GetTick>
 8004aa8:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004aaa:	e017      	b.n	8004adc <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004aac:	f7fe fb30 	bl	8003110 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aba:	d90f      	bls.n	8004adc <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2203      	movs	r2, #3
 8004acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e016      	b.n	8004b0a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e1      	bne.n	8004aac <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004af6:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d026      	beq.n	8004b82 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d021      	beq.n	8004b82 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b4c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d026      	beq.n	8004bda <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d021      	beq.n	8004bda <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2220      	movs	r2, #32
 8004bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	f043 0202 	orr.w	r2, r3, #2
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d026      	beq.n	8004c32 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d021      	beq.n	8004c32 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2208      	movs	r2, #8
 8004c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2204      	movs	r2, #4
 8004c16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00e      	beq.n	8004c64 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c54:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f853 	bl	8004d0a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d024      	beq.n	8004cb8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01f      	beq.n	8004cb8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c86:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01f      	beq.n	8004d02 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01a      	beq.n	8004d02 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cda:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f80e 	bl	8004d1e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_DMA2D_ConfigLayer+0x20>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e079      	b.n	8004e48 <HAL_DMA2D_ConfigLayer+0x114>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	3318      	adds	r3, #24
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004d7e:	4b35      	ldr	r3, [pc, #212]	; (8004e54 <HAL_DMA2D_ConfigLayer+0x120>)
 8004d80:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b0a      	cmp	r3, #10
 8004d88:	d003      	beq.n	8004d92 <HAL_DMA2D_ConfigLayer+0x5e>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b09      	cmp	r3, #9
 8004d90:	d107      	bne.n	8004da2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e005      	b.n	8004dae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d120      	bne.n	8004df6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	ea02 0103 	and.w	r1, r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b0a      	cmp	r3, #10
 8004ddc:	d003      	beq.n	8004de6 <HAL_DMA2D_ConfigLayer+0xb2>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d127      	bne.n	8004e36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
 8004df4:	e01f      	b.n	8004e36 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	ea02 0103 	and.w	r1, r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b0a      	cmp	r3, #10
 8004e1e:	d003      	beq.n	8004e28 <HAL_DMA2D_ConfigLayer+0xf4>
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b09      	cmp	r3, #9
 8004e26:	d106      	bne.n	8004e36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e34:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	ff03000f 	.word	0xff03000f

08004e58 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b08b      	sub	sp, #44	; 0x2c
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	041a      	lsls	r2, r3, #16
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e90:	d174      	bne.n	8004f7c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e98:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ea0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ea8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d108      	bne.n	8004eca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	e053      	b.n	8004f72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d106      	bne.n	8004ee0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ede:	e048      	b.n	8004f72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d111      	bne.n	8004f0c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	0cdb      	lsrs	r3, r3, #19
 8004eec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	0a9b      	lsrs	r3, r3, #10
 8004ef2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	02db      	lsls	r3, r3, #11
 8004f02:	4313      	orrs	r3, r2
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	e032      	b.n	8004f72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d117      	bne.n	8004f44 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	0fdb      	lsrs	r3, r3, #31
 8004f18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	0cdb      	lsrs	r3, r3, #19
 8004f1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	0adb      	lsrs	r3, r3, #11
 8004f24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	029b      	lsls	r3, r3, #10
 8004f34:	431a      	orrs	r2, r3
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	03db      	lsls	r3, r3, #15
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	e016      	b.n	8004f72 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	0f1b      	lsrs	r3, r3, #28
 8004f48:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	0d1b      	lsrs	r3, r3, #20
 8004f4e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	0b1b      	lsrs	r3, r3, #12
 8004f54:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	011a      	lsls	r2, r3, #4
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	431a      	orrs	r2, r3
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004f7a:	e003      	b.n	8004f84 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	60da      	str	r2, [r3, #12]
}
 8004f84:	bf00      	nop
 8004f86:	372c      	adds	r7, #44	; 0x2c
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	e175      	b.n	800529c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	f040 8164 	bne.w	8005296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d00b      	beq.n	8004fee <HAL_GPIO_Init+0x5e>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d007      	beq.n	8004fee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fe2:	2b11      	cmp	r3, #17
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b12      	cmp	r3, #18
 8004fec:	d130      	bne.n	8005050 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4313      	orrs	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005024:	2201      	movs	r2, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 0201 	and.w	r2, r3, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	2203      	movs	r2, #3
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x100>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b12      	cmp	r3, #18
 800508e:	d123      	bne.n	80050d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	08da      	lsrs	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3208      	adds	r2, #8
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	220f      	movs	r2, #15
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	08da      	lsrs	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3208      	adds	r2, #8
 80050d2:	69b9      	ldr	r1, [r7, #24]
 80050d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2203      	movs	r2, #3
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 0203 	and.w	r2, r3, #3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80be 	beq.w	8005296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800511a:	4b65      	ldr	r3, [pc, #404]	; (80052b0 <HAL_GPIO_Init+0x320>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4a64      	ldr	r2, [pc, #400]	; (80052b0 <HAL_GPIO_Init+0x320>)
 8005120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005124:	6453      	str	r3, [r2, #68]	; 0x44
 8005126:	4b62      	ldr	r3, [pc, #392]	; (80052b0 <HAL_GPIO_Init+0x320>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005132:	4a60      	ldr	r2, [pc, #384]	; (80052b4 <HAL_GPIO_Init+0x324>)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	220f      	movs	r2, #15
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a57      	ldr	r2, [pc, #348]	; (80052b8 <HAL_GPIO_Init+0x328>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d037      	beq.n	80051ce <HAL_GPIO_Init+0x23e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a56      	ldr	r2, [pc, #344]	; (80052bc <HAL_GPIO_Init+0x32c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d031      	beq.n	80051ca <HAL_GPIO_Init+0x23a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a55      	ldr	r2, [pc, #340]	; (80052c0 <HAL_GPIO_Init+0x330>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d02b      	beq.n	80051c6 <HAL_GPIO_Init+0x236>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a54      	ldr	r2, [pc, #336]	; (80052c4 <HAL_GPIO_Init+0x334>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d025      	beq.n	80051c2 <HAL_GPIO_Init+0x232>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a53      	ldr	r2, [pc, #332]	; (80052c8 <HAL_GPIO_Init+0x338>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01f      	beq.n	80051be <HAL_GPIO_Init+0x22e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a52      	ldr	r2, [pc, #328]	; (80052cc <HAL_GPIO_Init+0x33c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d019      	beq.n	80051ba <HAL_GPIO_Init+0x22a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a51      	ldr	r2, [pc, #324]	; (80052d0 <HAL_GPIO_Init+0x340>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_GPIO_Init+0x226>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a50      	ldr	r2, [pc, #320]	; (80052d4 <HAL_GPIO_Init+0x344>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00d      	beq.n	80051b2 <HAL_GPIO_Init+0x222>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a4f      	ldr	r2, [pc, #316]	; (80052d8 <HAL_GPIO_Init+0x348>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <HAL_GPIO_Init+0x21e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a4e      	ldr	r2, [pc, #312]	; (80052dc <HAL_GPIO_Init+0x34c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d101      	bne.n	80051aa <HAL_GPIO_Init+0x21a>
 80051a6:	2309      	movs	r3, #9
 80051a8:	e012      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051aa:	230a      	movs	r3, #10
 80051ac:	e010      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051ae:	2308      	movs	r3, #8
 80051b0:	e00e      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051b2:	2307      	movs	r3, #7
 80051b4:	e00c      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051b6:	2306      	movs	r3, #6
 80051b8:	e00a      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051ba:	2305      	movs	r3, #5
 80051bc:	e008      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051be:	2304      	movs	r3, #4
 80051c0:	e006      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051c2:	2303      	movs	r3, #3
 80051c4:	e004      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e002      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_GPIO_Init+0x240>
 80051ce:	2300      	movs	r3, #0
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	f002 0203 	and.w	r2, r2, #3
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	4093      	lsls	r3, r2
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051e0:	4934      	ldr	r1, [pc, #208]	; (80052b4 <HAL_GPIO_Init+0x324>)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	3302      	adds	r3, #2
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051ee:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <HAL_GPIO_Init+0x350>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	43db      	mvns	r3, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005212:	4a33      	ldr	r2, [pc, #204]	; (80052e0 <HAL_GPIO_Init+0x350>)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005218:	4b31      	ldr	r3, [pc, #196]	; (80052e0 <HAL_GPIO_Init+0x350>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <HAL_GPIO_Init+0x350>)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005242:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <HAL_GPIO_Init+0x350>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	43db      	mvns	r3, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005266:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <HAL_GPIO_Init+0x350>)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800526c:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <HAL_GPIO_Init+0x350>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	43db      	mvns	r3, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <HAL_GPIO_Init+0x350>)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3301      	adds	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b0f      	cmp	r3, #15
 80052a0:	f67f ae86 	bls.w	8004fb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052a4:	bf00      	nop
 80052a6:	3724      	adds	r7, #36	; 0x24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40013800 	.word	0x40013800
 80052b8:	40020000 	.word	0x40020000
 80052bc:	40020400 	.word	0x40020400
 80052c0:	40020800 	.word	0x40020800
 80052c4:	40020c00 	.word	0x40020c00
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40021400 	.word	0x40021400
 80052d0:	40021800 	.word	0x40021800
 80052d4:	40021c00 	.word	0x40021c00
 80052d8:	40022000 	.word	0x40022000
 80052dc:	40022400 	.word	0x40022400
 80052e0:	40013c00 	.word	0x40013c00

080052e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e001      	b.n	8005306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
 8005320:	4613      	mov	r3, r2
 8005322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005324:	787b      	ldrb	r3, [r7, #1]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800532a:	887a      	ldrh	r2, [r7, #2]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005330:	e003      	b.n	800533a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005332:	887b      	ldrh	r3, [r7, #2]
 8005334:	041a      	lsls	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	619a      	str	r2, [r3, #24]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e0bf      	b.n	80054da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc ffac 	bl	80022cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800538a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6899      	ldr	r1, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_LTDC_Init+0x19c>)
 80053bc:	400b      	ands	r3, r1
 80053be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6899      	ldr	r1, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68d9      	ldr	r1, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b3e      	ldr	r3, [pc, #248]	; (80054e4 <HAL_LTDC_Init+0x19c>)
 80053ea:	400b      	ands	r3, r1
 80053ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68d9      	ldr	r1, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6919      	ldr	r1, [r3, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <HAL_LTDC_Init+0x19c>)
 8005418:	400b      	ands	r3, r1
 800541a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6919      	ldr	r1, [r3, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6959      	ldr	r1, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <HAL_LTDC_Init+0x19c>)
 8005446:	400b      	ands	r3, r1
 8005448:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6959      	ldr	r1, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800548a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0206 	orr.w	r2, r2, #6
 80054b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	f000f800 	.word	0xf000f800

080054e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d023      	beq.n	8005552 <HAL_LTDC_IRQHandler+0x6a>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01e      	beq.n	8005552 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0204 	bic.w	r2, r2, #4
 8005522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2204      	movs	r2, #4
 800552a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2204      	movs	r2, #4
 8005540:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f86f 	bl	8005630 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d023      	beq.n	80055a4 <HAL_LTDC_IRQHandler+0xbc>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01e      	beq.n	80055a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0202 	bic.w	r2, r2, #2
 8005574:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2202      	movs	r2, #2
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005584:	f043 0202 	orr.w	r2, r3, #2
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2204      	movs	r2, #4
 8005592:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f846 	bl	8005630 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01b      	beq.n	80055e6 <HAL_LTDC_IRQHandler+0xfe>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d016      	beq.n	80055e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2201      	movs	r2, #1
 80055ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f00e ffcb 	bl	801457c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01b      	beq.n	8005628 <HAL_LTDC_IRQHandler+0x140>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0208 	bic.w	r2, r2, #8
 8005608:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2208      	movs	r2, #8
 8005610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f80e 	bl	8005644 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005658:	b5b0      	push	{r4, r5, r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_LTDC_ConfigLayer+0x1a>
 800566e:	2302      	movs	r3, #2
 8005670:	e02c      	b.n	80056cc <HAL_LTDC_ConfigLayer+0x74>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2134      	movs	r1, #52	; 0x34
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4614      	mov	r4, r2
 8005696:	461d      	mov	r5, r3
 8005698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800569a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800569c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800569e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f849 	bl	8005744 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bdb0      	pop	{r4, r5, r7, pc}

080056d4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_LTDC_ProgramLineEvent+0x18>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e023      	b.n	8005734 <HAL_LTDC_ProgramLineEvent+0x60>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800570c:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40016800 	.word	0x40016800

08005744 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005744:	b480      	push	{r7}
 8005746:	b089      	sub	sp, #36	; 0x24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	0c1b      	lsrs	r3, r3, #16
 800575c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005760:	4413      	add	r3, r2
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	01db      	lsls	r3, r3, #7
 8005770:	4413      	add	r3, r2
 8005772:	3384      	adds	r3, #132	; 0x84
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	4611      	mov	r1, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	01d2      	lsls	r2, r2, #7
 8005780:	440a      	add	r2, r1
 8005782:	3284      	adds	r2, #132	; 0x84
 8005784:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005788:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579a:	4413      	add	r3, r2
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4619      	mov	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	01db      	lsls	r3, r3, #7
 80057a8:	440b      	add	r3, r1
 80057aa:	3384      	adds	r3, #132	; 0x84
 80057ac:	4619      	mov	r1, r3
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057c2:	4413      	add	r3, r2
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	4413      	add	r3, r2
 80057d4:	3384      	adds	r3, #132	; 0x84
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	4611      	mov	r1, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	01d2      	lsls	r2, r2, #7
 80057e2:	440a      	add	r2, r1
 80057e4:	3284      	adds	r2, #132	; 0x84
 80057e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80057ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057fa:	4413      	add	r3, r2
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	01db      	lsls	r3, r3, #7
 8005808:	440b      	add	r3, r1
 800580a:	3384      	adds	r3, #132	; 0x84
 800580c:	4619      	mov	r1, r3
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4313      	orrs	r3, r2
 8005812:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	01db      	lsls	r3, r3, #7
 800581e:	4413      	add	r3, r2
 8005820:	3384      	adds	r3, #132	; 0x84
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	4611      	mov	r1, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	01d2      	lsls	r2, r2, #7
 800582e:	440a      	add	r2, r1
 8005830:	3284      	adds	r2, #132	; 0x84
 8005832:	f023 0307 	bic.w	r3, r3, #7
 8005836:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	01db      	lsls	r3, r3, #7
 8005842:	4413      	add	r3, r2
 8005844:	3384      	adds	r3, #132	; 0x84
 8005846:	461a      	mov	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800585e:	041b      	lsls	r3, r3, #16
 8005860:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	01db      	lsls	r3, r3, #7
 8005874:	4413      	add	r3, r2
 8005876:	3384      	adds	r3, #132	; 0x84
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	4413      	add	r3, r2
 8005886:	3384      	adds	r3, #132	; 0x84
 8005888:	461a      	mov	r2, r3
 800588a:	2300      	movs	r3, #0
 800588c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005894:	461a      	mov	r2, r3
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	431a      	orrs	r2, r3
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	01db      	lsls	r3, r3, #7
 80058a8:	440b      	add	r3, r1
 80058aa:	3384      	adds	r3, #132	; 0x84
 80058ac:	4619      	mov	r1, r3
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	01db      	lsls	r3, r3, #7
 80058be:	4413      	add	r3, r2
 80058c0:	3384      	adds	r3, #132	; 0x84
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	4611      	mov	r1, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	01d2      	lsls	r2, r2, #7
 80058ce:	440a      	add	r2, r1
 80058d0:	3284      	adds	r2, #132	; 0x84
 80058d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	01db      	lsls	r3, r3, #7
 80058e2:	4413      	add	r3, r2
 80058e4:	3384      	adds	r3, #132	; 0x84
 80058e6:	461a      	mov	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	01db      	lsls	r3, r3, #7
 80058f8:	4413      	add	r3, r2
 80058fa:	3384      	adds	r3, #132	; 0x84
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4619      	mov	r1, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	01db      	lsls	r3, r3, #7
 8005908:	440b      	add	r3, r1
 800590a:	3384      	adds	r3, #132	; 0x84
 800590c:	4619      	mov	r1, r3
 800590e:	4b58      	ldr	r3, [pc, #352]	; (8005a70 <LTDC_SetConfig+0x32c>)
 8005910:	4013      	ands	r3, r2
 8005912:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	6809      	ldr	r1, [r1, #0]
 8005920:	4608      	mov	r0, r1
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	01c9      	lsls	r1, r1, #7
 8005926:	4401      	add	r1, r0
 8005928:	3184      	adds	r1, #132	; 0x84
 800592a:	4313      	orrs	r3, r2
 800592c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	01db      	lsls	r3, r3, #7
 8005938:	4413      	add	r3, r2
 800593a:	3384      	adds	r3, #132	; 0x84
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	01db      	lsls	r3, r3, #7
 8005948:	4413      	add	r3, r2
 800594a:	3384      	adds	r3, #132	; 0x84
 800594c:	461a      	mov	r2, r3
 800594e:	2300      	movs	r3, #0
 8005950:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	01db      	lsls	r3, r3, #7
 800595c:	4413      	add	r3, r2
 800595e:	3384      	adds	r3, #132	; 0x84
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005970:	2304      	movs	r3, #4
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e01b      	b.n	80059ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800597e:	2303      	movs	r3, #3
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e014      	b.n	80059ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d00b      	beq.n	80059a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005990:	2b02      	cmp	r3, #2
 8005992:	d007      	beq.n	80059a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005998:	2b03      	cmp	r3, #3
 800599a:	d003      	beq.n	80059a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80059a0:	2b07      	cmp	r3, #7
 80059a2:	d102      	bne.n	80059aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80059a4:	2302      	movs	r3, #2
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e001      	b.n	80059ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80059aa:	2301      	movs	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	01db      	lsls	r3, r3, #7
 80059b8:	4413      	add	r3, r2
 80059ba:	3384      	adds	r3, #132	; 0x84
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4611      	mov	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	01d2      	lsls	r2, r2, #7
 80059c8:	440a      	add	r2, r1
 80059ca:	3284      	adds	r2, #132	; 0x84
 80059cc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80059d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
 80059dc:	041a      	lsls	r2, r3, #16
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6859      	ldr	r1, [r3, #4]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1acb      	subs	r3, r1, r3
 80059e8:	69f9      	ldr	r1, [r7, #28]
 80059ea:	fb01 f303 	mul.w	r3, r1, r3
 80059ee:	3303      	adds	r3, #3
 80059f0:	68f9      	ldr	r1, [r7, #12]
 80059f2:	6809      	ldr	r1, [r1, #0]
 80059f4:	4608      	mov	r0, r1
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	01c9      	lsls	r1, r1, #7
 80059fa:	4401      	add	r1, r0
 80059fc:	3184      	adds	r1, #132	; 0x84
 80059fe:	4313      	orrs	r3, r2
 8005a00:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	01db      	lsls	r3, r3, #7
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3384      	adds	r3, #132	; 0x84
 8005a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	01db      	lsls	r3, r3, #7
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3384      	adds	r3, #132	; 0x84
 8005a20:	4619      	mov	r1, r3
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <LTDC_SetConfig+0x330>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	01db      	lsls	r3, r3, #7
 8005a32:	4413      	add	r3, r2
 8005a34:	3384      	adds	r3, #132	; 0x84
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	4413      	add	r3, r2
 8005a4a:	3384      	adds	r3, #132	; 0x84
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	4611      	mov	r1, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	01d2      	lsls	r2, r2, #7
 8005a58:	440a      	add	r2, r1
 8005a5a:	3284      	adds	r2, #132	; 0x84
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	6013      	str	r3, [r2, #0]
}
 8005a62:	bf00      	nop
 8005a64:	3724      	adds	r7, #36	; 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	fffff8f8 	.word	0xfffff8f8
 8005a74:	fffff800 	.word	0xfffff800

08005a78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a86:	6013      	str	r3, [r2, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40007000 	.word	0x40007000

08005a98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6413      	str	r3, [r2, #64]	; 0x40
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005aba:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac6:	f7fd fb23 	bl	8003110 <HAL_GetTick>
 8005aca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005acc:	e009      	b.n	8005ae2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ace:	f7fd fb1f 	bl	8003110 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005adc:	d901      	bls.n	8005ae2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e022      	b.n	8005b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aee:	d1ee      	bne.n	8005ace <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0f      	ldr	r2, [pc, #60]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005afc:	f7fd fb08 	bl	8003110 <HAL_GetTick>
 8005b00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b02:	e009      	b.n	8005b18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b04:	f7fd fb04 	bl	8003110 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b12:	d901      	bls.n	8005b18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e007      	b.n	8005b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b24:	d1ee      	bne.n	8005b04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40007000 	.word	0x40007000

08005b38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b40:	f7fd fae6 	bl	8003110 <HAL_GetTick>
 8005b44:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e067      	b.n	8005c20 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fc fc79 	bl	800245c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005b6a:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f85e 	bl	8005c30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	021a      	lsls	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2120      	movs	r1, #32
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f856 	bl	8005c4c <QSPI_WaitFlagStateUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005ba4:	7afb      	ldrb	r3, [r7, #11]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d135      	bne.n	8005c16 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <HAL_QSPI_Init+0xf0>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6852      	ldr	r2, [r2, #4]
 8005bb8:	0611      	lsls	r1, r2, #24
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68d2      	ldr	r2, [r2, #12]
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	69d2      	ldr	r2, [r2, #28]
 8005bc4:	4311      	orrs	r1, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6a12      	ldr	r2, [r2, #32]
 8005bca:	4311      	orrs	r1, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <HAL_QSPI_Init+0xf4>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6912      	ldr	r2, [r2, #16]
 8005be2:	0411      	lsls	r1, r2, #16
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6952      	ldr	r2, [r2, #20]
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6992      	ldr	r2, [r2, #24]
 8005bee:	4311      	orrs	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	00ffff2f 	.word	0x00ffff2f
 8005c2c:	ffe0f8fe 	.word	0xffe0f8fe

08005c30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c5c:	e01a      	b.n	8005c94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d016      	beq.n	8005c94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fd fa53 	bl	8003110 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c88:	f043 0201 	orr.w	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e00e      	b.n	8005cb2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bf14      	ite	ne
 8005ca2:	2301      	movne	r3, #1
 8005ca4:	2300      	moveq	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d1d6      	bne.n	8005c5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e291      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8087 	beq.w	8005dee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ce0:	4b96      	ldr	r3, [pc, #600]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 030c 	and.w	r3, r3, #12
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d00c      	beq.n	8005d06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cec:	4b93      	ldr	r3, [pc, #588]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d112      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62>
 8005cf8:	4b90      	ldr	r3, [pc, #576]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d04:	d10b      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d06:	4b8d      	ldr	r3, [pc, #564]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d06c      	beq.n	8005dec <HAL_RCC_OscConfig+0x130>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d168      	bne.n	8005dec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e26b      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_OscConfig+0x7a>
 8005d28:	4b84      	ldr	r3, [pc, #528]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a83      	ldr	r2, [pc, #524]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e02e      	b.n	8005d94 <HAL_RCC_OscConfig+0xd8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCC_OscConfig+0x9c>
 8005d3e:	4b7f      	ldr	r3, [pc, #508]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a7e      	ldr	r2, [pc, #504]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	4b7c      	ldr	r3, [pc, #496]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a7b      	ldr	r2, [pc, #492]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e01d      	b.n	8005d94 <HAL_RCC_OscConfig+0xd8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d60:	d10c      	bne.n	8005d7c <HAL_RCC_OscConfig+0xc0>
 8005d62:	4b76      	ldr	r3, [pc, #472]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a75      	ldr	r2, [pc, #468]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	4b73      	ldr	r3, [pc, #460]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a72      	ldr	r2, [pc, #456]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e00b      	b.n	8005d94 <HAL_RCC_OscConfig+0xd8>
 8005d7c:	4b6f      	ldr	r3, [pc, #444]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a6e      	ldr	r2, [pc, #440]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	4b6c      	ldr	r3, [pc, #432]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a6b      	ldr	r2, [pc, #428]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d013      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9c:	f7fd f9b8 	bl	8003110 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005da4:	f7fd f9b4 	bl	8003110 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b64      	cmp	r3, #100	; 0x64
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e21f      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db6:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0xe8>
 8005dc2:	e014      	b.n	8005dee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fd f9a4 	bl	8003110 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fd f9a0 	bl	8003110 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e20b      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dde:	4b57      	ldr	r3, [pc, #348]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x110>
 8005dea:	e000      	b.n	8005dee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d069      	beq.n	8005ece <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dfa:	4b50      	ldr	r3, [pc, #320]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e06:	4b4d      	ldr	r3, [pc, #308]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d11c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x190>
 8005e12:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d116      	bne.n	8005e4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1e:	4b47      	ldr	r3, [pc, #284]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <HAL_RCC_OscConfig+0x17a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d001      	beq.n	8005e36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e1df      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e36:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	493d      	ldr	r1, [pc, #244]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e4a:	e040      	b.n	8005ece <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d023      	beq.n	8005e9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e54:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a38      	ldr	r2, [pc, #224]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fd f956 	bl	8003110 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e68:	f7fd f952 	bl	8003110 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1bd      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7a:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e86:	4b2d      	ldr	r3, [pc, #180]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4929      	ldr	r1, [pc, #164]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]
 8005e9a:	e018      	b.n	8005ece <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e9c:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a26      	ldr	r2, [pc, #152]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fd f932 	bl	8003110 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fd f92e 	bl	8003110 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e199      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	4b1e      	ldr	r3, [pc, #120]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d038      	beq.n	8005f4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d019      	beq.n	8005f16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee2:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005ee8:	f043 0301 	orr.w	r3, r3, #1
 8005eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eee:	f7fd f90f 	bl	8003110 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef6:	f7fd f90b 	bl	8003110 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e176      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x23a>
 8005f14:	e01a      	b.n	8005f4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1a:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <HAL_RCC_OscConfig+0x280>)
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f22:	f7fd f8f5 	bl	8003110 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f28:	e00a      	b.n	8005f40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2a:	f7fd f8f1 	bl	8003110 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d903      	bls.n	8005f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e15c      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
 8005f3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f40:	4b91      	ldr	r3, [pc, #580]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ee      	bne.n	8005f2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80a4 	beq.w	80060a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5a:	4b8b      	ldr	r3, [pc, #556]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10d      	bne.n	8005f82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f66:	4b88      	ldr	r3, [pc, #544]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	4a87      	ldr	r2, [pc, #540]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f70:	6413      	str	r3, [r2, #64]	; 0x40
 8005f72:	4b85      	ldr	r3, [pc, #532]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f82:	4b82      	ldr	r3, [pc, #520]	; (800618c <HAL_RCC_OscConfig+0x4d0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d118      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f8e:	4b7f      	ldr	r3, [pc, #508]	; (800618c <HAL_RCC_OscConfig+0x4d0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a7e      	ldr	r2, [pc, #504]	; (800618c <HAL_RCC_OscConfig+0x4d0>)
 8005f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9a:	f7fd f8b9 	bl	8003110 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa2:	f7fd f8b5 	bl	8003110 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b64      	cmp	r3, #100	; 0x64
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e120      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb4:	4b75      	ldr	r3, [pc, #468]	; (800618c <HAL_RCC_OscConfig+0x4d0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x31a>
 8005fc8:	4b6f      	ldr	r3, [pc, #444]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	4a6e      	ldr	r2, [pc, #440]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd4:	e02d      	b.n	8006032 <HAL_RCC_OscConfig+0x376>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x33c>
 8005fde:	4b6a      	ldr	r3, [pc, #424]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a69      	ldr	r2, [pc, #420]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fea:	4b67      	ldr	r3, [pc, #412]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	4a66      	ldr	r2, [pc, #408]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8005ff0:	f023 0304 	bic.w	r3, r3, #4
 8005ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff6:	e01c      	b.n	8006032 <HAL_RCC_OscConfig+0x376>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b05      	cmp	r3, #5
 8005ffe:	d10c      	bne.n	800601a <HAL_RCC_OscConfig+0x35e>
 8006000:	4b61      	ldr	r3, [pc, #388]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	4a60      	ldr	r2, [pc, #384]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006006:	f043 0304 	orr.w	r3, r3, #4
 800600a:	6713      	str	r3, [r2, #112]	; 0x70
 800600c:	4b5e      	ldr	r3, [pc, #376]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	4a5d      	ldr	r2, [pc, #372]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	6713      	str	r3, [r2, #112]	; 0x70
 8006018:	e00b      	b.n	8006032 <HAL_RCC_OscConfig+0x376>
 800601a:	4b5b      	ldr	r3, [pc, #364]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	4a5a      	ldr	r2, [pc, #360]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	6713      	str	r3, [r2, #112]	; 0x70
 8006026:	4b58      	ldr	r3, [pc, #352]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a57      	ldr	r2, [pc, #348]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800602c:	f023 0304 	bic.w	r3, r3, #4
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d015      	beq.n	8006066 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603a:	f7fd f869 	bl	8003110 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006040:	e00a      	b.n	8006058 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006042:	f7fd f865 	bl	8003110 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006050:	4293      	cmp	r3, r2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e0ce      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006058:	4b4b      	ldr	r3, [pc, #300]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0ee      	beq.n	8006042 <HAL_RCC_OscConfig+0x386>
 8006064:	e014      	b.n	8006090 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006066:	f7fd f853 	bl	8003110 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800606c:	e00a      	b.n	8006084 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606e:	f7fd f84f 	bl	8003110 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e0b8      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006084:	4b40      	ldr	r3, [pc, #256]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ee      	bne.n	800606e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d105      	bne.n	80060a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	4a3b      	ldr	r2, [pc, #236]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800609c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80a4 	beq.w	80061f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ac:	4b36      	ldr	r3, [pc, #216]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d06b      	beq.n	8006190 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d149      	bne.n	8006154 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c0:	4b31      	ldr	r3, [pc, #196]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 80060c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060cc:	f7fd f820 	bl	8003110 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fd f81c 	bl	8003110 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e087      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	4b28      	ldr	r3, [pc, #160]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69da      	ldr	r2, [r3, #28]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	019b      	lsls	r3, r3, #6
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	3b01      	subs	r3, #1
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	4313      	orrs	r3, r2
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800611a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800611e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a18      	ldr	r2, [pc, #96]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800612a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fc fff0 	bl	8003110 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fc ffec 	bl	8003110 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e057      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	4b10      	ldr	r3, [pc, #64]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x478>
 8006152:	e04f      	b.n	80061f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a0b      	ldr	r2, [pc, #44]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800615a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800615e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006160:	f7fc ffd6 	bl	8003110 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006168:	f7fc ffd2 	bl	8003110 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e03d      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617a:	4b03      	ldr	r3, [pc, #12]	; (8006188 <HAL_RCC_OscConfig+0x4cc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x4ac>
 8006186:	e035      	b.n	80061f4 <HAL_RCC_OscConfig+0x538>
 8006188:	40023800 	.word	0x40023800
 800618c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <HAL_RCC_OscConfig+0x544>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d028      	beq.n	80061f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d121      	bne.n	80061f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d11a      	bne.n	80061f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061c0:	4013      	ands	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d111      	bne.n	80061f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	3b01      	subs	r3, #1
 80061da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061dc:	429a      	cmp	r2, r3
 80061de:	d107      	bne.n	80061f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800

08006204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0d0      	b.n	80063be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800621c:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d910      	bls.n	800624c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 020f 	bic.w	r2, r3, #15
 8006232:	4965      	ldr	r1, [pc, #404]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4313      	orrs	r3, r2
 8006238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0b8      	b.n	80063be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d020      	beq.n	800629a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 800626a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800626e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800627c:	4b53      	ldr	r3, [pc, #332]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006286:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006288:	4b50      	ldr	r3, [pc, #320]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	494d      	ldr	r1, [pc, #308]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006296:	4313      	orrs	r3, r2
 8006298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d040      	beq.n	8006328 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b47      	ldr	r3, [pc, #284]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d115      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d107      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c6:	4b41      	ldr	r3, [pc, #260]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e073      	b.n	80063be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e06b      	b.n	80063be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062e6:	4b39      	ldr	r3, [pc, #228]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f023 0203 	bic.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4936      	ldr	r1, [pc, #216]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f8:	f7fc ff0a 	bl	8003110 <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006300:	f7fc ff06 	bl	8003110 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e053      	b.n	80063be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 020c 	and.w	r2, r3, #12
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	429a      	cmp	r2, r3
 8006326:	d1eb      	bne.n	8006300 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d210      	bcs.n	8006358 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 020f 	bic.w	r2, r3, #15
 800633e:	4922      	ldr	r1, [pc, #136]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	4313      	orrs	r3, r2
 8006344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e032      	b.n	80063be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4916      	ldr	r1, [pc, #88]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	490e      	ldr	r1, [pc, #56]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006396:	f000 f821 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800639a:	4601      	mov	r1, r0
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <HAL_RCC_ClockConfig+0x1c8>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <HAL_RCC_ClockConfig+0x1cc>)
 80063a8:	5cd3      	ldrb	r3, [r2, r3]
 80063aa:	fa21 f303 	lsr.w	r3, r1, r3
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <HAL_RCC_ClockConfig+0x1d0>)
 80063b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1d4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fc fcf4 	bl	8002da4 <HAL_InitTick>

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023c00 	.word	0x40023c00
 80063cc:	40023800 	.word	0x40023800
 80063d0:	080259dc 	.word	0x080259dc
 80063d4:	20000018 	.word	0x20000018
 80063d8:	2000001c 	.word	0x2000001c

080063dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	2300      	movs	r3, #0
 80063ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f2:	4b50      	ldr	r3, [pc, #320]	; (8006534 <HAL_RCC_GetSysClockFreq+0x158>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d007      	beq.n	800640e <HAL_RCC_GetSysClockFreq+0x32>
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d008      	beq.n	8006414 <HAL_RCC_GetSysClockFreq+0x38>
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 808d 	bne.w	8006522 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006408:	4b4b      	ldr	r3, [pc, #300]	; (8006538 <HAL_RCC_GetSysClockFreq+0x15c>)
 800640a:	60bb      	str	r3, [r7, #8]
      break;
 800640c:	e08c      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800640e:	4b4b      	ldr	r3, [pc, #300]	; (800653c <HAL_RCC_GetSysClockFreq+0x160>)
 8006410:	60bb      	str	r3, [r7, #8]
      break;
 8006412:	e089      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006414:	4b47      	ldr	r3, [pc, #284]	; (8006534 <HAL_RCC_GetSysClockFreq+0x158>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800641c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800641e:	4b45      	ldr	r3, [pc, #276]	; (8006534 <HAL_RCC_GetSysClockFreq+0x158>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d023      	beq.n	8006472 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642a:	4b42      	ldr	r3, [pc, #264]	; (8006534 <HAL_RCC_GetSysClockFreq+0x158>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	099b      	lsrs	r3, r3, #6
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	ea03 0501 	and.w	r5, r3, r1
 8006440:	ea04 0602 	and.w	r6, r4, r2
 8006444:	4a3d      	ldr	r2, [pc, #244]	; (800653c <HAL_RCC_GetSysClockFreq+0x160>)
 8006446:	fb02 f106 	mul.w	r1, r2, r6
 800644a:	2200      	movs	r2, #0
 800644c:	fb02 f205 	mul.w	r2, r2, r5
 8006450:	440a      	add	r2, r1
 8006452:	493a      	ldr	r1, [pc, #232]	; (800653c <HAL_RCC_GetSysClockFreq+0x160>)
 8006454:	fba5 0101 	umull	r0, r1, r5, r1
 8006458:	1853      	adds	r3, r2, r1
 800645a:	4619      	mov	r1, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	461a      	mov	r2, r3
 8006464:	4623      	mov	r3, r4
 8006466:	f7f9 ff23 	bl	80002b0 <__aeabi_uldivmod>
 800646a:	4603      	mov	r3, r0
 800646c:	460c      	mov	r4, r1
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e049      	b.n	8006506 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <HAL_RCC_GetSysClockFreq+0x158>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	099b      	lsrs	r3, r3, #6
 8006478:	f04f 0400 	mov.w	r4, #0
 800647c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	ea03 0501 	and.w	r5, r3, r1
 8006488:	ea04 0602 	and.w	r6, r4, r2
 800648c:	4629      	mov	r1, r5
 800648e:	4632      	mov	r2, r6
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	f04f 0400 	mov.w	r4, #0
 8006498:	0154      	lsls	r4, r2, #5
 800649a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800649e:	014b      	lsls	r3, r1, #5
 80064a0:	4619      	mov	r1, r3
 80064a2:	4622      	mov	r2, r4
 80064a4:	1b49      	subs	r1, r1, r5
 80064a6:	eb62 0206 	sbc.w	r2, r2, r6
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	f04f 0400 	mov.w	r4, #0
 80064b2:	0194      	lsls	r4, r2, #6
 80064b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80064b8:	018b      	lsls	r3, r1, #6
 80064ba:	1a5b      	subs	r3, r3, r1
 80064bc:	eb64 0402 	sbc.w	r4, r4, r2
 80064c0:	f04f 0100 	mov.w	r1, #0
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	00e2      	lsls	r2, r4, #3
 80064ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064ce:	00d9      	lsls	r1, r3, #3
 80064d0:	460b      	mov	r3, r1
 80064d2:	4614      	mov	r4, r2
 80064d4:	195b      	adds	r3, r3, r5
 80064d6:	eb44 0406 	adc.w	r4, r4, r6
 80064da:	f04f 0100 	mov.w	r1, #0
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	02a2      	lsls	r2, r4, #10
 80064e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80064e8:	0299      	lsls	r1, r3, #10
 80064ea:	460b      	mov	r3, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	4621      	mov	r1, r4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f04f 0400 	mov.w	r4, #0
 80064f8:	461a      	mov	r2, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	f7f9 fed8 	bl	80002b0 <__aeabi_uldivmod>
 8006500:	4603      	mov	r3, r0
 8006502:	460c      	mov	r4, r1
 8006504:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCC_GetSysClockFreq+0x158>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	3301      	adds	r3, #1
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	60bb      	str	r3, [r7, #8]
      break;
 8006520:	e002      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006522:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006524:	60bb      	str	r3, [r7, #8]
      break;
 8006526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006528:	68bb      	ldr	r3, [r7, #8]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800
 8006538:	00f42400 	.word	0x00f42400
 800653c:	017d7840 	.word	0x017d7840

08006540 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <HAL_RCC_GetHCLKFreq+0x14>)
 8006546:	681b      	ldr	r3, [r3, #0]
}
 8006548:	4618      	mov	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000018 	.word	0x20000018

08006558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800655c:	f7ff fff0 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 8006560:	4601      	mov	r1, r0
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	0a9b      	lsrs	r3, r3, #10
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	4a03      	ldr	r2, [pc, #12]	; (800657c <HAL_RCC_GetPCLK1Freq+0x24>)
 800656e:	5cd3      	ldrb	r3, [r2, r3]
 8006570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40023800 	.word	0x40023800
 800657c:	080259ec 	.word	0x080259ec

08006580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006584:	f7ff ffdc 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 8006588:	4601      	mov	r1, r0
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	0b5b      	lsrs	r3, r3, #13
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	4a03      	ldr	r2, [pc, #12]	; (80065a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006596:	5cd3      	ldrb	r3, [r2, r3]
 8006598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800659c:	4618      	mov	r0, r3
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40023800 	.word	0x40023800
 80065a4:	080259ec 	.word	0x080259ec

080065a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	220f      	movs	r2, #15
 80065b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065b8:	4b12      	ldr	r3, [pc, #72]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 0203 	and.w	r2, r3, #3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	08db      	lsrs	r3, r3, #3
 80065e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065ea:	4b07      	ldr	r3, [pc, #28]	; (8006608 <HAL_RCC_GetClockConfig+0x60>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	601a      	str	r2, [r3, #0]
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40023800 	.word	0x40023800
 8006608:	40023c00 	.word	0x40023c00

0800660c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006634:	4b69      	ldr	r3, [pc, #420]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4a68      	ldr	r2, [pc, #416]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800663e:	6093      	str	r3, [r2, #8]
 8006640:	4b66      	ldr	r3, [pc, #408]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	4964      	ldr	r1, [pc, #400]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664a:	4313      	orrs	r3, r2
 800664c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006656:	2301      	movs	r3, #1
 8006658:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d017      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006666:	4b5d      	ldr	r3, [pc, #372]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006674:	4959      	ldr	r1, [pc, #356]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006684:	d101      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006686:	2301      	movs	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006692:	2301      	movs	r3, #1
 8006694:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066a2:	4b4e      	ldr	r3, [pc, #312]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	494a      	ldr	r1, [pc, #296]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c0:	d101      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80066c2:	2301      	movs	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80066ce:	2301      	movs	r3, #1
 80066d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066de:	2301      	movs	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 808b 	beq.w	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066f0:	4b3a      	ldr	r3, [pc, #232]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	4a39      	ldr	r2, [pc, #228]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fa:	6413      	str	r3, [r2, #64]	; 0x40
 80066fc:	4b37      	ldr	r3, [pc, #220]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006708:	4b35      	ldr	r3, [pc, #212]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a34      	ldr	r2, [pc, #208]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800670e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006714:	f7fc fcfc 	bl	8003110 <HAL_GetTick>
 8006718:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800671a:	e008      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671c:	f7fc fcf8 	bl	8003110 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e355      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800672e:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800673a:	4b28      	ldr	r3, [pc, #160]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800673c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d035      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	429a      	cmp	r2, r3
 8006756:	d02e      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006758:	4b20      	ldr	r3, [pc, #128]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006760:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006762:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006766:	4a1d      	ldr	r2, [pc, #116]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800676e:	4b1b      	ldr	r3, [pc, #108]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	4a1a      	ldr	r2, [pc, #104]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006778:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800677a:	4a18      	ldr	r2, [pc, #96]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006780:	4b16      	ldr	r3, [pc, #88]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d114      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fc fcc0 	bl	8003110 <HAL_GetTick>
 8006790:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006792:	e00a      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006794:	f7fc fcbc 	bl	8003110 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e317      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0ee      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c2:	d111      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067d0:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067d2:	400b      	ands	r3, r1
 80067d4:	4901      	ldr	r1, [pc, #4]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
 80067da:	e00b      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067dc:	40023800 	.word	0x40023800
 80067e0:	40007000 	.word	0x40007000
 80067e4:	0ffffcff 	.word	0x0ffffcff
 80067e8:	4bb0      	ldr	r3, [pc, #704]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4aaf      	ldr	r2, [pc, #700]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067f2:	6093      	str	r3, [r2, #8]
 80067f4:	4bad      	ldr	r3, [pc, #692]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006800:	49aa      	ldr	r1, [pc, #680]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006802:	4313      	orrs	r3, r2
 8006804:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	d010      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006812:	4ba6      	ldr	r3, [pc, #664]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	4aa4      	ldr	r2, [pc, #656]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800681a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800681e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006822:	4ba2      	ldr	r3, [pc, #648]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006824:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	499f      	ldr	r1, [pc, #636]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006840:	4b9a      	ldr	r3, [pc, #616]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800684e:	4997      	ldr	r1, [pc, #604]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006862:	4b92      	ldr	r3, [pc, #584]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006868:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006870:	498e      	ldr	r1, [pc, #568]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006884:	4b89      	ldr	r3, [pc, #548]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006892:	4986      	ldr	r1, [pc, #536]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068a6:	4b81      	ldr	r3, [pc, #516]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	497d      	ldr	r1, [pc, #500]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068c8:	4b78      	ldr	r3, [pc, #480]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ce:	f023 0203 	bic.w	r2, r3, #3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	4975      	ldr	r1, [pc, #468]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068ea:	4b70      	ldr	r3, [pc, #448]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f0:	f023 020c 	bic.w	r2, r3, #12
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f8:	496c      	ldr	r1, [pc, #432]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800690c:	4b67      	ldr	r3, [pc, #412]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691a:	4964      	ldr	r1, [pc, #400]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800692e:	4b5f      	ldr	r3, [pc, #380]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006934:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	495b      	ldr	r1, [pc, #364]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006950:	4b56      	ldr	r3, [pc, #344]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	4953      	ldr	r1, [pc, #332]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006960:	4313      	orrs	r3, r2
 8006962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006972:	4b4e      	ldr	r3, [pc, #312]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006978:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006980:	494a      	ldr	r1, [pc, #296]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006994:	4b45      	ldr	r3, [pc, #276]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a2:	4942      	ldr	r1, [pc, #264]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069b6:	4b3d      	ldr	r3, [pc, #244]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c4:	4939      	ldr	r1, [pc, #228]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069d8:	4b34      	ldr	r3, [pc, #208]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e6:	4931      	ldr	r1, [pc, #196]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d011      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069fa:	4b2c      	ldr	r3, [pc, #176]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a08:	4928      	ldr	r1, [pc, #160]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a18:	d101      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a3a:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a48:	4918      	ldr	r1, [pc, #96]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a5c:	4b13      	ldr	r3, [pc, #76]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6c:	490f      	ldr	r1, [pc, #60]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d005      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a82:	f040 80d8 	bne.w	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a86:	4b09      	ldr	r3, [pc, #36]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a08      	ldr	r2, [pc, #32]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a92:	f7fc fb3d 	bl	8003110 <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a98:	e00a      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a9a:	f7fc fb39 	bl	8003110 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b64      	cmp	r3, #100	; 0x64
 8006aa6:	d903      	bls.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e196      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006aac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab0:	4b6c      	ldr	r3, [pc, #432]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1ee      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d021      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11d      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ad0:	4b64      	ldr	r3, [pc, #400]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ade:	4b61      	ldr	r3, [pc, #388]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae4:	0e1b      	lsrs	r3, r3, #24
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	019a      	lsls	r2, r3, #6
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	431a      	orrs	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	061b      	lsls	r3, r3, #24
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	071b      	lsls	r3, r3, #28
 8006b04:	4957      	ldr	r1, [pc, #348]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b20:	d00a      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d02e      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b36:	d129      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b38:	4b4a      	ldr	r3, [pc, #296]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b46:	4b47      	ldr	r3, [pc, #284]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b4c:	0f1b      	lsrs	r3, r3, #28
 8006b4e:	f003 0307 	and.w	r3, r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	019a      	lsls	r2, r3, #6
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	061b      	lsls	r3, r3, #24
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	071b      	lsls	r3, r3, #28
 8006b6c:	493d      	ldr	r1, [pc, #244]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b74:	4b3b      	ldr	r3, [pc, #236]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7a:	f023 021f 	bic.w	r2, r3, #31
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	3b01      	subs	r3, #1
 8006b84:	4937      	ldr	r1, [pc, #220]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01d      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b98:	4b32      	ldr	r3, [pc, #200]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9e:	0e1b      	lsrs	r3, r3, #24
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ba6:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bac:	0f1b      	lsrs	r3, r3, #28
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	019a      	lsls	r2, r3, #6
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	061b      	lsls	r3, r3, #24
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	071b      	lsls	r3, r3, #28
 8006bcc:	4925      	ldr	r1, [pc, #148]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d011      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	019a      	lsls	r2, r3, #6
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	071b      	lsls	r3, r3, #28
 8006bfc:	4919      	ldr	r1, [pc, #100]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c04:	4b17      	ldr	r3, [pc, #92]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a16      	ldr	r2, [pc, #88]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c10:	f7fc fa7e 	bl	8003110 <HAL_GetTick>
 8006c14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c18:	f7fc fa7a 	bl	8003110 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b64      	cmp	r3, #100	; 0x64
 8006c24:	d901      	bls.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e0d7      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c2a:	4b0e      	ldr	r3, [pc, #56]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f0      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	f040 80cd 	bne.w	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c3e:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4a:	f7fc fa61 	bl	8003110 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c50:	e00a      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c52:	f7fc fa5d 	bl	8003110 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b64      	cmp	r3, #100	; 0x64
 8006c5e:	d903      	bls.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e0ba      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006c64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c68:	4b5e      	ldr	r3, [pc, #376]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c74:	d0ed      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d02e      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d12a      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c9e:	4b51      	ldr	r3, [pc, #324]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca4:	0c1b      	lsrs	r3, r3, #16
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cac:	4b4d      	ldr	r3, [pc, #308]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	0f1b      	lsrs	r3, r3, #28
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	019a      	lsls	r2, r3, #6
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	061b      	lsls	r3, r3, #24
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	071b      	lsls	r3, r3, #28
 8006cd2:	4944      	ldr	r1, [pc, #272]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cda:	4b42      	ldr	r3, [pc, #264]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	493d      	ldr	r1, [pc, #244]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d022      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d08:	d11d      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d0a:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d10:	0e1b      	lsrs	r3, r3, #24
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d18:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1e:	0f1b      	lsrs	r3, r3, #28
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	019a      	lsls	r2, r3, #6
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	431a      	orrs	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	061b      	lsls	r3, r3, #24
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	071b      	lsls	r3, r3, #28
 8006d3e:	4929      	ldr	r1, [pc, #164]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d028      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d58:	0e1b      	lsrs	r3, r3, #24
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d60:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d66:	0c1b      	lsrs	r3, r3, #16
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	019a      	lsls	r2, r3, #6
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	061b      	lsls	r3, r3, #24
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	071b      	lsls	r3, r3, #28
 8006d86:	4917      	ldr	r1, [pc, #92]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	4911      	ldr	r1, [pc, #68]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006da4:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db0:	f7fc f9ae 	bl	8003110 <HAL_GetTick>
 8006db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006db8:	f7fc f9aa 	bl	8003110 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e007      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd6:	d1ef      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40023800 	.word	0x40023800

08006de8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e06:	f040 8086 	bne.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006e0a:	4b8d      	ldr	r3, [pc, #564]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e10:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e18:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e20:	d03e      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e26:	d073      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d000      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006e2c:	e074      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e2e:	4b84      	ldr	r3, [pc, #528]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d108      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e3a:	4b81      	ldr	r3, [pc, #516]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e42:	4a80      	ldr	r2, [pc, #512]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	e007      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e4c:	4b7c      	ldr	r3, [pc, #496]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e54:	4a7c      	ldr	r2, [pc, #496]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e5c:	4b78      	ldr	r3, [pc, #480]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	0e1b      	lsrs	r3, r3, #24
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e6a:	4b75      	ldr	r3, [pc, #468]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e70:	099b      	lsrs	r3, r3, #6
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	fb02 f203 	mul.w	r2, r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006e84:	4b6e      	ldr	r3, [pc, #440]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9c:	617b      	str	r3, [r7, #20]
        break;
 8006e9e:	e03b      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006ea0:	4b67      	ldr	r3, [pc, #412]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d108      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006eac:	4b64      	ldr	r3, [pc, #400]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb4:	4a63      	ldr	r2, [pc, #396]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	e007      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ebe:	4b60      	ldr	r3, [pc, #384]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec6:	4a60      	ldr	r2, [pc, #384]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ecc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006ece:	4b5c      	ldr	r3, [pc, #368]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed4:	0e1b      	lsrs	r3, r3, #24
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006edc:	4b58      	ldr	r3, [pc, #352]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee2:	099b      	lsrs	r3, r3, #6
 8006ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	fb02 f203 	mul.w	r2, r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006ef6:	4b52      	ldr	r3, [pc, #328]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]
        break;
 8006f0e:	e003      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f10:	4b4e      	ldr	r3, [pc, #312]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006f12:	617b      	str	r3, [r7, #20]
        break;
 8006f14:	e000      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006f16:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1e:	f040 8086 	bne.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006f22:	4b47      	ldr	r3, [pc, #284]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f28:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f30:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f38:	d03e      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f3e:	d073      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d000      	beq.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006f44:	e074      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006f46:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d108      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f52:	4b3b      	ldr	r3, [pc, #236]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f5a:	4a3a      	ldr	r2, [pc, #232]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e007      	b.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006f64:	4b36      	ldr	r3, [pc, #216]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f6c:	4a36      	ldr	r2, [pc, #216]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006f74:	4b32      	ldr	r3, [pc, #200]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7a:	0e1b      	lsrs	r3, r3, #24
 8006f7c:	f003 030f 	and.w	r3, r3, #15
 8006f80:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006f82:	4b2f      	ldr	r3, [pc, #188]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f88:	099b      	lsrs	r3, r3, #6
 8006f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	fb02 f203 	mul.w	r2, r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006f9c:	4b28      	ldr	r3, [pc, #160]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb4:	617b      	str	r3, [r7, #20]
        break;
 8006fb6:	e03b      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006fb8:	4b21      	ldr	r3, [pc, #132]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fc4:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	e007      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006fd6:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fde:	4a1a      	ldr	r2, [pc, #104]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fec:	0e1b      	lsrs	r3, r3, #24
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ff4:	4b12      	ldr	r3, [pc, #72]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ffa:	099b      	lsrs	r3, r3, #6
 8006ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	fb02 f203 	mul.w	r2, r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800700e:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	617b      	str	r3, [r7, #20]
        break;
 8007026:	e003      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800702a:	617b      	str	r3, [r7, #20]
        break;
 800702c:	e000      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800702e:	bf00      	nop

  return frequency;
 8007030:	697b      	ldr	r3, [r7, #20]
}
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40023800 	.word	0x40023800
 8007044:	00f42400 	.word	0x00f42400
 8007048:	017d7840 	.word	0x017d7840
 800704c:	00bb8000 	.word	0x00bb8000

08007050 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e06b      	b.n	800713a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	7f5b      	ldrb	r3, [r3, #29]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d105      	bne.n	8007078 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fb fa82 	bl	800257c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	22ca      	movs	r2, #202	; 0xca
 8007084:	625a      	str	r2, [r3, #36]	; 0x24
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2253      	movs	r2, #83	; 0x53
 800708c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fb00 	bl	8007694 <RTC_EnterInitMode>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	22ff      	movs	r2, #255	; 0xff
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2204      	movs	r2, #4
 80070a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e046      	b.n	800713a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6899      	ldr	r1, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b23      	ldr	r3, [pc, #140]	; (8007144 <HAL_RTC_Init+0xf4>)
 80070b8:	400b      	ands	r3, r1
 80070ba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6899      	ldr	r1, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	68d2      	ldr	r2, [r2, #12]
 80070e2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6919      	ldr	r1, [r3, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	041a      	lsls	r2, r3, #16
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007106:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0208 	bic.w	r2, r2, #8
 8007116:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	22ff      	movs	r2, #255	; 0xff
 8007130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007138:	2300      	movs	r3, #0
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	ff8fffbf 	.word	0xff8fffbf

08007148 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	7f1b      	ldrb	r3, [r3, #28]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_RTC_SetTime+0x1c>
 8007160:	2302      	movs	r3, #2
 8007162:	e0a8      	b.n	80072b6 <HAL_RTC_SetTime+0x16e>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2202      	movs	r2, #2
 800716e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d126      	bne.n	80071c4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 faac 	bl	80076ec <RTC_ByteToBcd2>
 8007194:	4603      	mov	r3, r0
 8007196:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 faa5 	bl	80076ec <RTC_ByteToBcd2>
 80071a2:	4603      	mov	r3, r0
 80071a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80071a6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	789b      	ldrb	r3, [r3, #2]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fa9d 	bl	80076ec <RTC_ByteToBcd2>
 80071b2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80071b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	7b1b      	ldrb	r3, [r3, #12]
 80071bc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	e018      	b.n	80071f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80071e4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80071ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	7b1b      	ldrb	r3, [r3, #12]
 80071f0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	22ca      	movs	r2, #202	; 0xca
 80071fc:	625a      	str	r2, [r3, #36]	; 0x24
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2253      	movs	r2, #83	; 0x53
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fa44 	bl	8007694 <RTC_EnterInitMode>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	22ff      	movs	r2, #255	; 0xff
 8007218:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2204      	movs	r2, #4
 800721e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e045      	b.n	80072b6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	6979      	ldr	r1, [r7, #20]
 8007230:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <HAL_RTC_SetTime+0x178>)
 8007232:	400b      	ands	r3, r1
 8007234:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007244:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6899      	ldr	r1, [r3, #8]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	431a      	orrs	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800726c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d111      	bne.n	80072a0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f9e1 	bl	8007644 <HAL_RTC_WaitForSynchro>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	22ff      	movs	r2, #255	; 0xff
 800728e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2204      	movs	r2, #4
 8007294:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e00a      	b.n	80072b6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80072b4:	2300      	movs	r3, #0
  }
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd90      	pop	{r4, r7, pc}
 80072be:	bf00      	nop
 80072c0:	007f7f7f 	.word	0x007f7f7f

080072c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80072c4:	b590      	push	{r4, r7, lr}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	7f1b      	ldrb	r3, [r3, #28]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_RTC_SetDate+0x1c>
 80072dc:	2302      	movs	r3, #2
 80072de:	e092      	b.n	8007406 <HAL_RTC_SetDate+0x142>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2202      	movs	r2, #2
 80072ea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10e      	bne.n	8007310 <HAL_RTC_SetDate+0x4c>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	f023 0310 	bic.w	r3, r3, #16
 8007306:	b2db      	uxtb	r3, r3
 8007308:	330a      	adds	r3, #10
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d11c      	bne.n	8007350 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	78db      	ldrb	r3, [r3, #3]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f9e6 	bl	80076ec <RTC_ByteToBcd2>
 8007320:	4603      	mov	r3, r0
 8007322:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 f9df 	bl	80076ec <RTC_ByteToBcd2>
 800732e:	4603      	mov	r3, r0
 8007330:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007332:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	789b      	ldrb	r3, [r3, #2]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 f9d7 	bl	80076ec <RTC_ByteToBcd2>
 800733e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007340:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e00e      	b.n	800736e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	78db      	ldrb	r3, [r3, #3]
 8007354:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	785b      	ldrb	r3, [r3, #1]
 800735a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800735c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007362:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	22ca      	movs	r2, #202	; 0xca
 8007374:	625a      	str	r2, [r3, #36]	; 0x24
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2253      	movs	r2, #83	; 0x53
 800737c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 f988 	bl	8007694 <RTC_EnterInitMode>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	22ff      	movs	r2, #255	; 0xff
 8007390:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2204      	movs	r2, #4
 8007396:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e031      	b.n	8007406 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	6979      	ldr	r1, [r7, #20]
 80073a8:	4b19      	ldr	r3, [pc, #100]	; (8007410 <HAL_RTC_SetDate+0x14c>)
 80073aa:	400b      	ands	r3, r1
 80073ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d111      	bne.n	80073f0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f939 	bl	8007644 <HAL_RTC_WaitForSynchro>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	22ff      	movs	r2, #255	; 0xff
 80073de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2204      	movs	r2, #4
 80073e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e00a      	b.n	8007406 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007404:	2300      	movs	r3, #0
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	bd90      	pop	{r4, r7, pc}
 800740e:	bf00      	nop
 8007410:	00ffff3f 	.word	0x00ffff3f

08007414 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	7f1b      	ldrb	r3, [r3, #28]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_RTC_SetAlarm+0x24>
 8007434:	2302      	movs	r3, #2
 8007436:	e101      	b.n	800763c <HAL_RTC_SetAlarm+0x228>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2202      	movs	r2, #2
 8007442:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d137      	bne.n	80074ba <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f942 	bl	80076ec <RTC_ByteToBcd2>
 8007468:	4603      	mov	r3, r0
 800746a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 f93b 	bl	80076ec <RTC_ByteToBcd2>
 8007476:	4603      	mov	r3, r0
 8007478:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800747a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	789b      	ldrb	r3, [r3, #2]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f933 	bl	80076ec <RTC_ByteToBcd2>
 8007486:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007488:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	7b1b      	ldrb	r3, [r3, #12]
 8007490:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007492:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f925 	bl	80076ec <RTC_ByteToBcd2>
 80074a2:	4603      	mov	r3, r0
 80074a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80074a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80074ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	e023      	b.n	8007502 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	785b      	ldrb	r3, [r3, #1]
 80074d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80074da:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80074e0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	7b1b      	ldrb	r3, [r3, #12]
 80074e6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80074e8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80074f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80074f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80074fe:	4313      	orrs	r3, r2
 8007500:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	4313      	orrs	r3, r2
 800750c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	22ca      	movs	r2, #202	; 0xca
 8007514:	625a      	str	r2, [r3, #36]	; 0x24
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2253      	movs	r2, #83	; 0x53
 800751c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007526:	d13f      	bne.n	80075a8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007536:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007546:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007548:	f7fb fde2 	bl	8003110 <HAL_GetTick>
 800754c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800754e:	e013      	b.n	8007578 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007550:	f7fb fdde 	bl	8003110 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800755e:	d90b      	bls.n	8007578 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	22ff      	movs	r2, #255	; 0xff
 8007566:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2203      	movs	r2, #3
 800756c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e061      	b.n	800763c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0e4      	beq.n	8007550 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a4:	609a      	str	r2, [r3, #8]
 80075a6:	e03e      	b.n	8007626 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075b6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075c6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075c8:	f7fb fda2 	bl	8003110 <HAL_GetTick>
 80075cc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80075ce:	e013      	b.n	80075f8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80075d0:	f7fb fd9e 	bl	8003110 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075de:	d90b      	bls.n	80075f8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2203      	movs	r2, #3
 80075ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e021      	b.n	800763c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0e4      	beq.n	80075d0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007624:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	22ff      	movs	r2, #255	; 0xff
 800762c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3724      	adds	r7, #36	; 0x24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd90      	pop	{r4, r7, pc}

08007644 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800765e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007660:	f7fb fd56 	bl	8003110 <HAL_GetTick>
 8007664:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007666:	e009      	b.n	800767c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007668:	f7fb fd52 	bl	8003110 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007676:	d901      	bls.n	800767c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e007      	b.n	800768c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0ee      	beq.n	8007668 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d119      	bne.n	80076e2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f04f 32ff 	mov.w	r2, #4294967295
 80076b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076b8:	f7fb fd2a 	bl	8003110 <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076be:	e009      	b.n	80076d4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80076c0:	f7fb fd26 	bl	8003110 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ce:	d901      	bls.n	80076d4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e007      	b.n	80076e4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0ee      	beq.n	80076c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80076fa:	e005      	b.n	8007708 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	3b0a      	subs	r3, #10
 8007706:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	2b09      	cmp	r3, #9
 800770c:	d8f6      	bhi.n	80076fc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	b2da      	uxtb	r2, r3
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	4313      	orrs	r3, r2
 800771a:	b2db      	uxtb	r3, r3
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	7f1b      	ldrb	r3, [r3, #28]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007740:	2302      	movs	r3, #2
 8007742:	e03e      	b.n	80077c2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2202      	movs	r2, #2
 800774e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	4b1e      	ldr	r3, [pc, #120]	; (80077d0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007758:	4013      	ands	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	22ca      	movs	r2, #202	; 0xca
 800776a:	625a      	str	r2, [r3, #36]	; 0x24
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2253      	movs	r2, #83	; 0x53
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0206 	bic.w	r2, r2, #6
 8007782:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	430a      	orrs	r2, r1
 8007792:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077aa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	22ff      	movs	r2, #255	; 0xff
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	fffff7f7 	.word	0xfffff7f7

080077d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e149      	b.n	8007a86 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fb fa62 	bl	8002cd0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f94f 	bl	8007ab8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d007      	beq.n	8007832 <HAL_SAI_Init+0x5e>
 8007822:	2b01      	cmp	r3, #1
 8007824:	d302      	bcc.n	800782c <HAL_SAI_Init+0x58>
 8007826:	2b02      	cmp	r3, #2
 8007828:	d006      	beq.n	8007838 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800782a:	e008      	b.n	800783e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
      break;
 8007830:	e005      	b.n	800783e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007832:	2310      	movs	r3, #16
 8007834:	61fb      	str	r3, [r7, #28]
      break;
 8007836:	e002      	b.n	800783e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007838:	2320      	movs	r3, #32
 800783a:	61fb      	str	r3, [r7, #28]
      break;
 800783c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d81d      	bhi.n	8007882 <HAL_SAI_Init+0xae>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_SAI_Init+0x78>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	0800785d 	.word	0x0800785d
 8007850:	08007863 	.word	0x08007863
 8007854:	0800786b 	.word	0x0800786b
 8007858:	08007873 	.word	0x08007873
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007860:	e010      	b.n	8007884 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007866:	617b      	str	r3, [r7, #20]
      }
      break;
 8007868:	e00c      	b.n	8007884 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800786a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800786e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007870:	e008      	b.n	8007884 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007876:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007880:	e000      	b.n	8007884 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007882:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a81      	ldr	r2, [pc, #516]	; (8007a90 <HAL_SAI_Init+0x2bc>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d004      	beq.n	8007898 <HAL_SAI_Init+0xc4>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a80      	ldr	r2, [pc, #512]	; (8007a94 <HAL_SAI_Init+0x2c0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d103      	bne.n	80078a0 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007898:	4a7f      	ldr	r2, [pc, #508]	; (8007a98 <HAL_SAI_Init+0x2c4>)
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	e002      	b.n	80078a6 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80078a0:	4a7e      	ldr	r2, [pc, #504]	; (8007a9c <HAL_SAI_Init+0x2c8>)
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d043      	beq.n	8007936 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a76      	ldr	r2, [pc, #472]	; (8007a90 <HAL_SAI_Init+0x2bc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_SAI_Init+0xf2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a74      	ldr	r2, [pc, #464]	; (8007a94 <HAL_SAI_Init+0x2c0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d104      	bne.n	80078d0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80078ca:	f7ff fa8d 	bl	8006de8 <HAL_RCCEx_GetPeriphCLKFreq>
 80078ce:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a72      	ldr	r2, [pc, #456]	; (8007aa0 <HAL_SAI_Init+0x2cc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_SAI_Init+0x110>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a71      	ldr	r2, [pc, #452]	; (8007aa4 <HAL_SAI_Init+0x2d0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d104      	bne.n	80078ee <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80078e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80078e8:	f7ff fa7e 	bl	8006de8 <HAL_RCCEx_GetPeriphCLKFreq>
 80078ec:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	461a      	mov	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	025b      	lsls	r3, r3, #9
 8007900:	fbb2 f3f3 	udiv	r3, r2, r3
 8007904:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4a67      	ldr	r2, [pc, #412]	; (8007aa8 <HAL_SAI_Init+0x2d4>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	08da      	lsrs	r2, r3, #3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	4b64      	ldr	r3, [pc, #400]	; (8007aa8 <HAL_SAI_Init+0x2d4>)
 8007918:	fba3 2301 	umull	r2, r3, r3, r1
 800791c:	08da      	lsrs	r2, r3, #3
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	1aca      	subs	r2, r1, r3
 8007928:	2a08      	cmp	r2, #8
 800792a:	d904      	bls.n	8007936 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_SAI_Init+0x172>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d109      	bne.n	800795a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_SAI_Init+0x17e>
 800794e:	2300      	movs	r3, #0
 8007950:	e001      	b.n	8007956 <HAL_SAI_Init+0x182>
 8007952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	e008      	b.n	800796c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795e:	2b01      	cmp	r3, #1
 8007960:	d102      	bne.n	8007968 <HAL_SAI_Init+0x194>
 8007962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007966:	e000      	b.n	800796a <HAL_SAI_Init+0x196>
 8007968:	2300      	movs	r3, #0
 800796a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6819      	ldr	r1, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4b4d      	ldr	r3, [pc, #308]	; (8007aac <HAL_SAI_Init+0x2d8>)
 8007978:	400b      	ands	r3, r1
 800797a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007990:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	431a      	orrs	r2, r3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80079a4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079b0:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	051b      	lsls	r3, r3, #20
 80079b8:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6859      	ldr	r1, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	4b38      	ldr	r3, [pc, #224]	; (8007ab0 <HAL_SAI_Init+0x2dc>)
 80079ce:	400b      	ands	r3, r1
 80079d0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6859      	ldr	r1, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699a      	ldr	r2, [r3, #24]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6899      	ldr	r1, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b2e      	ldr	r3, [pc, #184]	; (8007ab4 <HAL_SAI_Init+0x2e0>)
 80079fc:	400b      	ands	r3, r1
 80079fe:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6899      	ldr	r1, [r3, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007a10:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007a16:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007a1c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	3b01      	subs	r3, #1
 8007a24:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007a26:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68d9      	ldr	r1, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007a3e:	400b      	ands	r3, r1
 8007a40:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68d9      	ldr	r1, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a56:	041b      	lsls	r3, r3, #16
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40015804 	.word	0x40015804
 8007a94:	40015824 	.word	0x40015824
 8007a98:	40015800 	.word	0x40015800
 8007a9c:	40015c00 	.word	0x40015c00
 8007aa0:	40015c04 	.word	0x40015c04
 8007aa4:	40015c24 	.word	0x40015c24
 8007aa8:	cccccccd 	.word	0xcccccccd
 8007aac:	ff05c010 	.word	0xff05c010
 8007ab0:	ffff1ff0 	.word	0xffff1ff0
 8007ab4:	fff88000 	.word	0xfff88000

08007ab8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007ab8:	b490      	push	{r4, r7}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007ac0:	4b16      	ldr	r3, [pc, #88]	; (8007b1c <SAI_Disable+0x64>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a16      	ldr	r2, [pc, #88]	; (8007b20 <SAI_Disable+0x68>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	0b1b      	lsrs	r3, r3, #12
 8007acc:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ae0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	1e5c      	subs	r4, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10a      	bne.n	8007b00 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	73fb      	strb	r3, [r7, #15]
      break;
 8007afe:	e006      	b.n	8007b0e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e9      	bne.n	8007ae2 <SAI_Disable+0x2a>

  return status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc90      	pop	{r4, r7}
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000018 	.word	0x20000018
 8007b20:	95cbec1b 	.word	0x95cbec1b

08007b24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e022      	b.n	8007b7c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fa fd31 	bl	80025b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2203      	movs	r2, #3
 8007b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f814 	bl	8007b84 <HAL_SD_InitCard>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e00a      	b.n	8007b7c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b84:	b5b0      	push	{r4, r5, r7, lr}
 8007b86:	b08e      	sub	sp, #56	; 0x38
 8007b88:	af04      	add	r7, sp, #16
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007b94:	2300      	movs	r3, #0
 8007b96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007ba0:	2376      	movs	r3, #118	; 0x76
 8007ba2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681d      	ldr	r5, [r3, #0]
 8007ba8:	466c      	mov	r4, sp
 8007baa:	f107 0314 	add.w	r3, r7, #20
 8007bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007bb6:	f107 0308 	add.w	r3, r7, #8
 8007bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f002 ff51 	bl	800aa64 <SDMMC_Init>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e03b      	b.n	8007c4c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007be2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f002 ff74 	bl	800aad6 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bfc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fde6 	bl	80087d0 <SD_PowerON>
 8007c04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e013      	b.n	8007c4c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fd05 	bl	8008634 <SD_InitCard>
 8007c2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00b      	beq.n	8007c4a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3728      	adds	r7, #40	; 0x28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bdb0      	pop	{r4, r5, r7, pc}

08007c54 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08c      	sub	sp, #48	; 0x30
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d107      	bne.n	8007c7c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0cc      	b.n	8007e16 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	f040 80c5 	bne.w	8007e14 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	441a      	add	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d907      	bls.n	8007cae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e0b3      	b.n	8007e16 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	4a53      	ldr	r2, [pc, #332]	; (8007e20 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007cd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	4a52      	ldr	r2, [pc, #328]	; (8007e24 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007cdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3380      	adds	r3, #128	; 0x80
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	025b      	lsls	r3, r3, #9
 8007cf8:	089b      	lsrs	r3, r3, #2
 8007cfa:	f7fc fcb7 	bl	800466c <HAL_DMA_Start_IT>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d017      	beq.n	8007d34 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007d12:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a43      	ldr	r2, [pc, #268]	; (8007e28 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e070      	b.n	8007e16 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0208 	orr.w	r2, r2, #8
 8007d42:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d002      	beq.n	8007d52 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	025b      	lsls	r3, r3, #9
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f002 ff4e 	bl	800abfc <SDMMC_CmdBlockLength>
 8007d60:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00f      	beq.n	8007d88 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a2e      	ldr	r2, [pc, #184]	; (8007e28 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e046      	b.n	8007e16 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	025b      	lsls	r3, r3, #9
 8007d92:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d94:	2390      	movs	r3, #144	; 0x90
 8007d96:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f107 0210 	add.w	r2, r7, #16
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f002 fef8 	bl	800aba4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d90a      	bls.n	8007dd0 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2282      	movs	r2, #130	; 0x82
 8007dbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f002 ff5c 	bl	800ac84 <SDMMC_CmdReadMultiBlock>
 8007dcc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007dce:	e009      	b.n	8007de4 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2281      	movs	r2, #129	; 0x81
 8007dd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f002 ff2f 	bl	800ac40 <SDMMC_CmdReadSingleBlock>
 8007de2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d012      	beq.n	8007e10 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a0e      	ldr	r2, [pc, #56]	; (8007e28 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e002      	b.n	8007e16 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	e000      	b.n	8007e16 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8007e14:	2302      	movs	r3, #2
  }
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3730      	adds	r7, #48	; 0x30
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	0800851f 	.word	0x0800851f
 8007e24:	08008591 	.word	0x08008591
 8007e28:	004005ff 	.word	0x004005ff

08007e2c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08c      	sub	sp, #48	; 0x30
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d107      	bne.n	8007e54 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0cf      	b.n	8007ff4 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f040 80c8 	bne.w	8007ff2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d907      	bls.n	8007e86 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e0b6      	b.n	8007ff4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2203      	movs	r2, #3
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f042 021a 	orr.w	r2, r2, #26
 8007ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eaa:	4a54      	ldr	r2, [pc, #336]	; (8007ffc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007eac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	4a53      	ldr	r2, [pc, #332]	; (8008000 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007eb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	2200      	movs	r2, #0
 8007ebc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d002      	beq.n	8007ecc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	025b      	lsls	r3, r3, #9
 8007eca:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f002 fe91 	bl	800abfc <SDMMC_CmdBlockLength>
 8007eda:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00f      	beq.n	8007f02 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a47      	ldr	r2, [pc, #284]	; (8008004 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e078      	b.n	8007ff4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d90a      	bls.n	8007f1e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	22a0      	movs	r2, #160	; 0xa0
 8007f0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f14:	4618      	mov	r0, r3
 8007f16:	f002 fef9 	bl	800ad0c <SDMMC_CmdWriteMultiBlock>
 8007f1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f1c:	e009      	b.n	8007f32 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2290      	movs	r2, #144	; 0x90
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f002 fecc 	bl	800acc8 <SDMMC_CmdWriteSingleBlock>
 8007f30:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d012      	beq.n	8007f5e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a31      	ldr	r2, [pc, #196]	; (8008004 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e04a      	b.n	8007ff4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f042 0208 	orr.w	r2, r2, #8
 8007f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3380      	adds	r3, #128	; 0x80
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	025b      	lsls	r3, r3, #9
 8007f80:	089b      	lsrs	r3, r3, #2
 8007f82:	f7fc fb73 	bl	800466c <HAL_DMA_Start_IT>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01a      	beq.n	8007fc2 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 021a 	bic.w	r2, r2, #26
 8007f9a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a18      	ldr	r2, [pc, #96]	; (8008004 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e018      	b.n	8007ff4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	025b      	lsls	r3, r3, #9
 8007fcc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007fce:	2390      	movs	r3, #144	; 0x90
 8007fd0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f107 0210 	add.w	r2, r7, #16
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f002 fddb 	bl	800aba4 <SDMMC_ConfigData>

      return HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e000      	b.n	8007ff4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007ff2:	2302      	movs	r3, #2
  }
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3730      	adds	r7, #48	; 0x30
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	080084f5 	.word	0x080084f5
 8008000:	08008591 	.word	0x08008591
 8008004:	004005ff 	.word	0x004005ff

08008008 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800802a:	0f9b      	lsrs	r3, r3, #30
 800802c:	b2da      	uxtb	r2, r3
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008036:	0e9b      	lsrs	r3, r3, #26
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	b2da      	uxtb	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008048:	0e1b      	lsrs	r3, r3, #24
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	b2da      	uxtb	r2, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800805a:	0c1b      	lsrs	r3, r3, #16
 800805c:	b2da      	uxtb	r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008072:	b2da      	uxtb	r2, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800807c:	0d1b      	lsrs	r3, r3, #20
 800807e:	b29a      	uxth	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	b2da      	uxtb	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800809a:	0bdb      	lsrs	r3, r3, #15
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ac:	0b9b      	lsrs	r3, r3, #14
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080be:	0b5b      	lsrs	r3, r3, #13
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d0:	0b1b      	lsrs	r3, r3, #12
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d163      	bne.n	80081b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080f0:	009a      	lsls	r2, r3, #2
 80080f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080f6:	4013      	ands	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80080fc:	0f92      	lsrs	r2, r2, #30
 80080fe:	431a      	orrs	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008108:	0edb      	lsrs	r3, r3, #27
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811a:	0e1b      	lsrs	r3, r3, #24
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812c:	0d5b      	lsrs	r3, r3, #21
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800813e:	0c9b      	lsrs	r3, r3, #18
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	b2da      	uxtb	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008150:	0bdb      	lsrs	r3, r3, #15
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	b2da      	uxtb	r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	7e1b      	ldrb	r3, [r3, #24]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	3302      	adds	r3, #2
 8008174:	2201      	movs	r2, #1
 8008176:	fa02 f303 	lsl.w	r3, r2, r3
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800817e:	fb02 f203 	mul.w	r2, r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	7a1b      	ldrb	r3, [r3, #8]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	2201      	movs	r2, #1
 8008192:	409a      	lsls	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80081a0:	0a52      	lsrs	r2, r2, #9
 80081a2:	fb02 f203 	mul.w	r2, r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b0:	661a      	str	r2, [r3, #96]	; 0x60
 80081b2:	e031      	b.n	8008218 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d11d      	bne.n	80081f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081c0:	041b      	lsls	r3, r3, #16
 80081c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	431a      	orrs	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	029a      	lsls	r2, r3, #10
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	661a      	str	r2, [r3, #96]	; 0x60
 80081f6:	e00f      	b.n	8008218 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a58      	ldr	r2, [pc, #352]	; (8008360 <HAL_SD_GetCardCSD+0x344>)
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e09d      	b.n	8008354 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821c:	0b9b      	lsrs	r3, r3, #14
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	b2da      	uxtb	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822e:	09db      	lsrs	r3, r3, #7
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008240:	b2db      	uxtb	r3, r3
 8008242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008246:	b2da      	uxtb	r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008250:	0fdb      	lsrs	r3, r3, #31
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	0f5b      	lsrs	r3, r3, #29
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	b2da      	uxtb	r2, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	0e9b      	lsrs	r3, r3, #26
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	b2da      	uxtb	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	0d9b      	lsrs	r3, r3, #22
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	b2da      	uxtb	r2, r3
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	0d5b      	lsrs	r3, r3, #21
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	b2da      	uxtb	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ae:	0c1b      	lsrs	r3, r3, #16
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c2:	0bdb      	lsrs	r3, r3, #15
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d6:	0b9b      	lsrs	r3, r3, #14
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ea:	0b5b      	lsrs	r3, r3, #13
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	0b1b      	lsrs	r3, r3, #12
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	0a9b      	lsrs	r3, r3, #10
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	b2da      	uxtb	r2, r3
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	b2da      	uxtb	r2, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833a:	085b      	lsrs	r3, r3, #1
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008342:	b2da      	uxtb	r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	004005ff 	.word	0x004005ff

08008364 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80083bc:	b5b0      	push	{r4, r5, r7, lr}
 80083be:	b08e      	sub	sp, #56	; 0x38
 80083c0:	af04      	add	r7, sp, #16
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2203      	movs	r2, #3
 80083ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d02e      	beq.n	8008434 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083dc:	d106      	bne.n	80083ec <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
 80083ea:	e029      	b.n	8008440 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f2:	d10a      	bne.n	800840a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 faa1 	bl	800893c <SD_WideBus_Enable>
 80083fa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
 8008408:	e01a      	b.n	8008440 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10a      	bne.n	8008426 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fade 	bl	80089d2 <SD_WideBus_Disable>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
 8008424:	e00c      	b.n	8008440 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
 8008432:	e005      	b.n	8008440 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a18      	ldr	r2, [pc, #96]	; (80084b0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800844e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e024      	b.n	80084a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681d      	ldr	r5, [r3, #0]
 8008482:	466c      	mov	r4, sp
 8008484:	f107 0318 	add.w	r3, r7, #24
 8008488:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800848c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008496:	4628      	mov	r0, r5
 8008498:	f002 fae4 	bl	800aa64 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3728      	adds	r7, #40	; 0x28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bdb0      	pop	{r4, r5, r7, pc}
 80084ae:	bf00      	nop
 80084b0:	004005ff 	.word	0x004005ff

080084b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa10 	bl	80088ec <SD_SendStatus>
 80084cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	0a5b      	lsrs	r3, r3, #9
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80084ea:	693b      	ldr	r3, [r7, #16]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008510:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008512:	bf00      	nop
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	2b82      	cmp	r3, #130	; 0x82
 8008532:	d111      	bne.n	8008558 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f002 fc09 	bl	800ad50 <SDMMC_CmdStopTransfer>
 800853e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d008      	beq.n	8008558 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	431a      	orrs	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f7ff fd58 	bl	8008008 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0208 	bic.w	r2, r2, #8
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008570:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f003 f84f 	bl	800b624 <HAL_SD_RxCpltCallback>
#endif
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fc f8c4 	bl	800472c <HAL_DMA_GetError>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d03e      	beq.n	8008628 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d002      	beq.n	80085c6 <SD_DMAError+0x36>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d12d      	bne.n	8008622 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a19      	ldr	r2, [pc, #100]	; (8008630 <SD_DMAError+0xa0>)
 80085cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80085dc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80085ea:	6978      	ldr	r0, [r7, #20]
 80085ec:	f7ff ff62 	bl	80084b4 <HAL_SD_GetCardState>
 80085f0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b06      	cmp	r3, #6
 80085f6:	d002      	beq.n	80085fe <SD_DMAError+0x6e>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d10a      	bne.n	8008614 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f002 fba4 	bl	800ad50 <SDMMC_CmdStopTransfer>
 8008608:	4602      	mov	r2, r0
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	431a      	orrs	r2, r3
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2200      	movs	r2, #0
 8008620:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008622:	6978      	ldr	r0, [r7, #20]
 8008624:	f7ff fcf0 	bl	8008008 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008628:	bf00      	nop
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	004005ff 	.word	0x004005ff

08008634 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008634:	b5b0      	push	{r4, r5, r7, lr}
 8008636:	b094      	sub	sp, #80	; 0x50
 8008638:	af04      	add	r7, sp, #16
 800863a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800863c:	2301      	movs	r3, #1
 800863e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f002 fa55 	bl	800aaf4 <SDMMC_GetPowerState>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d102      	bne.n	8008656 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008654:	e0b7      	b.n	80087c6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865a:	2b03      	cmp	r3, #3
 800865c:	d02f      	beq.n	80086be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fc7f 	bl	800af66 <SDMMC_CmdSendCID>
 8008668:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800866a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <SD_InitCard+0x40>
    {
      return errorstate;
 8008670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008672:	e0a8      	b.n	80087c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2100      	movs	r1, #0
 800867a:	4618      	mov	r0, r3
 800867c:	f002 fa7f 	bl	800ab7e <SDMMC_GetResponse>
 8008680:	4602      	mov	r2, r0
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2104      	movs	r1, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f002 fa76 	bl	800ab7e <SDMMC_GetResponse>
 8008692:	4602      	mov	r2, r0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2108      	movs	r1, #8
 800869e:	4618      	mov	r0, r3
 80086a0:	f002 fa6d 	bl	800ab7e <SDMMC_GetResponse>
 80086a4:	4602      	mov	r2, r0
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	210c      	movs	r1, #12
 80086b0:	4618      	mov	r0, r3
 80086b2:	f002 fa64 	bl	800ab7e <SDMMC_GetResponse>
 80086b6:	4602      	mov	r2, r0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d00d      	beq.n	80086e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f107 020e 	add.w	r2, r7, #14
 80086ce:	4611      	mov	r1, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f002 fc85 	bl	800afe0 <SDMMC_CmdSetRelAdd>
 80086d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80086de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e0:	e071      	b.n	80087c6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d036      	beq.n	8008758 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	461a      	mov	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	f002 fc4f 	bl	800afa2 <SDMMC_CmdSendCSD>
 8008704:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <SD_InitCard+0xdc>
    {
      return errorstate;
 800870c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870e:	e05a      	b.n	80087c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f002 fa31 	bl	800ab7e <SDMMC_GetResponse>
 800871c:	4602      	mov	r2, r0
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2104      	movs	r1, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f002 fa28 	bl	800ab7e <SDMMC_GetResponse>
 800872e:	4602      	mov	r2, r0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2108      	movs	r1, #8
 800873a:	4618      	mov	r0, r3
 800873c:	f002 fa1f 	bl	800ab7e <SDMMC_GetResponse>
 8008740:	4602      	mov	r2, r0
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	210c      	movs	r1, #12
 800874c:	4618      	mov	r0, r3
 800874e:	f002 fa16 	bl	800ab7e <SDMMC_GetResponse>
 8008752:	4602      	mov	r2, r0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2104      	movs	r1, #4
 800875e:	4618      	mov	r0, r3
 8008760:	f002 fa0d 	bl	800ab7e <SDMMC_GetResponse>
 8008764:	4603      	mov	r3, r0
 8008766:	0d1a      	lsrs	r2, r3, #20
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff fc52 	bl	800801c <HAL_SD_GetCardCSD>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800877e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008782:	e020      	b.n	80087c6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6819      	ldr	r1, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878c:	041b      	lsls	r3, r3, #16
 800878e:	f04f 0400 	mov.w	r4, #0
 8008792:	461a      	mov	r2, r3
 8008794:	4623      	mov	r3, r4
 8008796:	4608      	mov	r0, r1
 8008798:	f002 fafc 	bl	800ad94 <SDMMC_CmdSelDesel>
 800879c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800879e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <SD_InitCard+0x174>
  {
    return errorstate;
 80087a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a6:	e00e      	b.n	80087c6 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681d      	ldr	r5, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	466c      	mov	r4, sp
 80087b0:	f103 0210 	add.w	r2, r3, #16
 80087b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80087b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087ba:	3304      	adds	r3, #4
 80087bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087be:	4628      	mov	r0, r5
 80087c0:	f002 f950 	bl	800aa64 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3740      	adds	r7, #64	; 0x40
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080087d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 faf6 	bl	800adda <SDMMC_CmdGoIdleState>
 80087ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	e072      	b.n	80088e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f002 fb09 	bl	800ae16 <SDMMC_CmdOperCond>
 8008804:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00d      	beq.n	8008828 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f002 fadf 	bl	800adda <SDMMC_CmdGoIdleState>
 800881c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	e05b      	b.n	80088e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008832:	2b01      	cmp	r3, #1
 8008834:	d137      	bne.n	80088a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2100      	movs	r1, #0
 800883c:	4618      	mov	r0, r3
 800883e:	f002 fb09 	bl	800ae54 <SDMMC_CmdAppCommand>
 8008842:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d02d      	beq.n	80088a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800884a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800884e:	e047      	b.n	80088e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f002 fafc 	bl	800ae54 <SDMMC_CmdAppCommand>
 800885c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <SD_PowerON+0x98>
    {
      return errorstate;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	e03b      	b.n	80088e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	491e      	ldr	r1, [pc, #120]	; (80088e8 <SD_PowerON+0x118>)
 800886e:	4618      	mov	r0, r3
 8008870:	f002 fb12 	bl	800ae98 <SDMMC_CmdAppOperCommand>
 8008874:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800887c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008880:	e02e      	b.n	80088e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f002 f978 	bl	800ab7e <SDMMC_GetResponse>
 800888e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	0fdb      	lsrs	r3, r3, #31
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <SD_PowerON+0xcc>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <SD_PowerON+0xce>
 800889c:	2300      	movs	r3, #0
 800889e:	613b      	str	r3, [r7, #16]

    count++;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d802      	bhi.n	80088b6 <SD_PowerON+0xe6>
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0cc      	beq.n	8008850 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80088bc:	4293      	cmp	r3, r2
 80088be:	d902      	bls.n	80088c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80088c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088c4:	e00c      	b.n	80088e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	645a      	str	r2, [r3, #68]	; 0x44
 80088d6:	e002      	b.n	80088de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	c1100000 	.word	0xc1100000

080088ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80088fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008900:	e018      	b.n	8008934 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f002 fb87 	bl	800b022 <SDMMC_CmdSendStatus>
 8008914:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <SD_SendStatus+0x34>
  {
    return errorstate;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	e009      	b.n	8008934 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f002 f929 	bl	800ab7e <SDMMC_GetResponse>
 800892c:	4602      	mov	r2, r0
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	2300      	movs	r3, #0
 800894a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2100      	movs	r1, #0
 8008952:	4618      	mov	r0, r3
 8008954:	f002 f913 	bl	800ab7e <SDMMC_GetResponse>
 8008958:	4603      	mov	r3, r0
 800895a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008962:	d102      	bne.n	800896a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008968:	e02f      	b.n	80089ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800896a:	f107 030c 	add.w	r3, r7, #12
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f879 	bl	8008a68 <SD_FindSCR>
 8008976:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	e023      	b.n	80089ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01c      	beq.n	80089c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008994:	041b      	lsls	r3, r3, #16
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f002 fa5b 	bl	800ae54 <SDMMC_CmdAppCommand>
 800899e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	e00f      	b.n	80089ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2102      	movs	r1, #2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f002 fa95 	bl	800aee0 <SDMMC_CmdBusWidth>
 80089b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	e003      	b.n	80089ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	e001      	b.n	80089ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2100      	movs	r1, #0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f002 f8c8 	bl	800ab7e <SDMMC_GetResponse>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089f8:	d102      	bne.n	8008a00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089fe:	e02f      	b.n	8008a60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008a00:	f107 030c 	add.w	r3, r7, #12
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f82e 	bl	8008a68 <SD_FindSCR>
 8008a0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	e023      	b.n	8008a60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01c      	beq.n	8008a5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2a:	041b      	lsls	r3, r3, #16
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f002 fa10 	bl	800ae54 <SDMMC_CmdAppCommand>
 8008a34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	e00f      	b.n	8008a60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f002 fa4a 	bl	800aee0 <SDMMC_CmdBusWidth>
 8008a4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	e003      	b.n	8008a60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e001      	b.n	8008a60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b08f      	sub	sp, #60	; 0x3c
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a72:	f7fa fb4d 	bl	8003110 <HAL_GetTick>
 8008a76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60bb      	str	r3, [r7, #8]
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2108      	movs	r1, #8
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f002 f8b4 	bl	800abfc <SDMMC_CmdBlockLength>
 8008a94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	e0a9      	b.n	8008bf4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa8:	041b      	lsls	r3, r3, #16
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f002 f9d1 	bl	800ae54 <SDMMC_CmdAppCommand>
 8008ab2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <SD_FindSCR+0x56>
  {
    return errorstate;
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	e09a      	b.n	8008bf4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008abe:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008ac8:	2330      	movs	r3, #48	; 0x30
 8008aca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008acc:	2302      	movs	r3, #2
 8008ace:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f107 0210 	add.w	r2, r7, #16
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f002 f85e 	bl	800aba4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f002 fa19 	bl	800af24 <SDMMC_CmdSendSCR>
 8008af2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d022      	beq.n	8008b40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	e07a      	b.n	8008bf4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00e      	beq.n	8008b2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6819      	ldr	r1, [r3, #0]
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	f107 0208 	add.w	r2, r7, #8
 8008b18:	18d4      	adds	r4, r2, r3
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	f001 ffce 	bl	800aabc <SDMMC_ReadFIFO>
 8008b20:	4603      	mov	r3, r0
 8008b22:	6023      	str	r3, [r4, #0]
      index++;
 8008b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b26:	3301      	adds	r3, #1
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b2a:	f7fa faf1 	bl	8003110 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d102      	bne.n	8008b40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b3e:	e059      	b.n	8008bf4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b46:	f240 432a 	movw	r3, #1066	; 0x42a
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0d6      	beq.n	8008afe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d005      	beq.n	8008b6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2208      	movs	r2, #8
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b66:	2308      	movs	r3, #8
 8008b68:	e044      	b.n	8008bf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b80:	2302      	movs	r3, #2
 8008b82:	e037      	b.n	8008bf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d005      	beq.n	8008b9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2220      	movs	r2, #32
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008b9a:	2320      	movs	r3, #32
 8008b9c:	e02a      	b.n	8008bf4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	061a      	lsls	r2, r3, #24
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	021b      	lsls	r3, r3, #8
 8008bb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	0a1b      	lsrs	r3, r3, #8
 8008bba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008bbe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	0e1b      	lsrs	r3, r3, #24
 8008bc4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	601a      	str	r2, [r3, #0]
    scr++;
 8008bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bcc:	3304      	adds	r3, #4
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	061a      	lsls	r2, r3, #24
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	021b      	lsls	r3, r3, #8
 8008bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bdc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	0a1b      	lsrs	r3, r3, #8
 8008be2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008be6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	0e1b      	lsrs	r3, r3, #24
 8008bec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	373c      	adds	r7, #60	; 0x3c
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}

08008bfc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e025      	b.n	8008c5c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d106      	bne.n	8008c2a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7fa f849 	bl	8002cbc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f001 fdeb 	bl	800a818 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	f001 fe55 	bl	800a8fc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d101      	bne.n	8008c80 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e018      	b.n	8008cb2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 feb3 	bl	800a9fc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d104      	bne.n	8008ca8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2205      	movs	r2, #5
 8008ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008ca6:	e003      	b.n	8008cb0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d101      	bne.n	8008cd4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e00e      	b.n	8008cf2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 feab 	bl	800aa3e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e04c      	b.n	8008da8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7f9 fca6 	bl	8002674 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0203 	bic.w	r2, r2, #3
 8008d3e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <HAL_SPDIFRX_Init+0xb4>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008d58:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008d5e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008d64:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008d6a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008d70:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008d76:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008d7c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008d82:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008d88:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	fff88407 	.word	0xfff88407

08008db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e084      	b.n	8008ed0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7f9 fc89 	bl	80026f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2202      	movs	r2, #2
 8008dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dfc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e06:	d902      	bls.n	8008e0e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	e002      	b.n	8008e14 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e1c:	d007      	beq.n	8008e2e <HAL_SPI_Init+0x7a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e26:	d002      	beq.n	8008e2e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10b      	bne.n	8008e4e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e3e:	d903      	bls.n	8008e48 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	631a      	str	r2, [r3, #48]	; 0x30
 8008e46:	e002      	b.n	8008e4e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	ea42 0103 	orr.w	r1, r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	0c1b      	lsrs	r3, r3, #16
 8008e8e:	f003 0204 	and.w	r2, r3, #4
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	ea42 0103 	orr.w	r1, r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	69da      	ldr	r2, [r3, #28]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ebe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e01d      	b.n	8008f26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7f9 fc5c 	bl	80027bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f000 fb78 	bl	800960c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0201 	orr.w	r2, r2, #1
 8008f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <HAL_TIM_Base_Start_IT+0x50>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d00b      	beq.n	8008f72 <HAL_TIM_Base_Start_IT+0x42>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f60:	d007      	beq.n	8008f72 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	00010007 	.word	0x00010007

08008f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e01d      	b.n	8008fd2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7f9 fc74 	bl	8002898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f000 fb22 	bl	800960c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0302 	and.w	r3, r3, #2
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d122      	bne.n	8009036 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d11b      	bne.n	8009036 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0202 	mvn.w	r2, #2
 8009006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fad7 	bl	80095d0 <HAL_TIM_IC_CaptureCallback>
 8009022:	e005      	b.n	8009030 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fac9 	bl	80095bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fada 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b04      	cmp	r3, #4
 8009042:	d122      	bne.n	800908a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b04      	cmp	r3, #4
 8009050:	d11b      	bne.n	800908a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f06f 0204 	mvn.w	r2, #4
 800905a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 faad 	bl	80095d0 <HAL_TIM_IC_CaptureCallback>
 8009076:	e005      	b.n	8009084 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa9f 	bl	80095bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fab0 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b08      	cmp	r3, #8
 8009096:	d122      	bne.n	80090de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d11b      	bne.n	80090de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f06f 0208 	mvn.w	r2, #8
 80090ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2204      	movs	r2, #4
 80090b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fa83 	bl	80095d0 <HAL_TIM_IC_CaptureCallback>
 80090ca:	e005      	b.n	80090d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa75 	bl	80095bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa86 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f003 0310 	and.w	r3, r3, #16
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d122      	bne.n	8009132 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	d11b      	bne.n	8009132 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f06f 0210 	mvn.w	r2, #16
 8009102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2208      	movs	r2, #8
 8009108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa59 	bl	80095d0 <HAL_TIM_IC_CaptureCallback>
 800911e:	e005      	b.n	800912c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa4b 	bl	80095bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fa5c 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10e      	bne.n	800915e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b01      	cmp	r3, #1
 800914c:	d107      	bne.n	800915e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f06f 0201 	mvn.w	r2, #1
 8009156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7f8 feb1 	bl	8001ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009168:	2b80      	cmp	r3, #128	; 0x80
 800916a:	d10e      	bne.n	800918a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009176:	2b80      	cmp	r3, #128	; 0x80
 8009178:	d107      	bne.n	800918a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 feef 	bl	8009f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009198:	d10e      	bne.n	80091b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a4:	2b80      	cmp	r3, #128	; 0x80
 80091a6:	d107      	bne.n	80091b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80091b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fee2 	bl	8009f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	d10e      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b40      	cmp	r3, #64	; 0x40
 80091d2:	d107      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa0a 	bl	80095f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d10e      	bne.n	8009210 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d107      	bne.n	8009210 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0220 	mvn.w	r2, #32
 8009208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fea2 	bl	8009f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800922e:	2302      	movs	r3, #2
 8009230:	e105      	b.n	800943e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2202      	movs	r2, #2
 800923e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b14      	cmp	r3, #20
 8009246:	f200 80f0 	bhi.w	800942a <HAL_TIM_PWM_ConfigChannel+0x212>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	080092a5 	.word	0x080092a5
 8009254:	0800942b 	.word	0x0800942b
 8009258:	0800942b 	.word	0x0800942b
 800925c:	0800942b 	.word	0x0800942b
 8009260:	080092e5 	.word	0x080092e5
 8009264:	0800942b 	.word	0x0800942b
 8009268:	0800942b 	.word	0x0800942b
 800926c:	0800942b 	.word	0x0800942b
 8009270:	08009327 	.word	0x08009327
 8009274:	0800942b 	.word	0x0800942b
 8009278:	0800942b 	.word	0x0800942b
 800927c:	0800942b 	.word	0x0800942b
 8009280:	08009367 	.word	0x08009367
 8009284:	0800942b 	.word	0x0800942b
 8009288:	0800942b 	.word	0x0800942b
 800928c:	0800942b 	.word	0x0800942b
 8009290:	080093a9 	.word	0x080093a9
 8009294:	0800942b 	.word	0x0800942b
 8009298:	0800942b 	.word	0x0800942b
 800929c:	0800942b 	.word	0x0800942b
 80092a0:	080093e9 	.word	0x080093e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fa4e 	bl	800974c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699a      	ldr	r2, [r3, #24]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0208 	orr.w	r2, r2, #8
 80092be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699a      	ldr	r2, [r3, #24]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0204 	bic.w	r2, r2, #4
 80092ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6999      	ldr	r1, [r3, #24]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	619a      	str	r2, [r3, #24]
      break;
 80092e2:	e0a3      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 faa0 	bl	8009830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699a      	ldr	r2, [r3, #24]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800930e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6999      	ldr	r1, [r3, #24]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	021a      	lsls	r2, r3, #8
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	619a      	str	r2, [r3, #24]
      break;
 8009324:	e082      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 faf7 	bl	8009920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69da      	ldr	r2, [r3, #28]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f042 0208 	orr.w	r2, r2, #8
 8009340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	69da      	ldr	r2, [r3, #28]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0204 	bic.w	r2, r2, #4
 8009350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69d9      	ldr	r1, [r3, #28]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	61da      	str	r2, [r3, #28]
      break;
 8009364:	e062      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fb4d 	bl	8009a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69da      	ldr	r2, [r3, #28]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69da      	ldr	r2, [r3, #28]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69d9      	ldr	r1, [r3, #28]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	021a      	lsls	r2, r3, #8
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	61da      	str	r2, [r3, #28]
      break;
 80093a6:	e041      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68b9      	ldr	r1, [r7, #8]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fb84 	bl	8009abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0208 	orr.w	r2, r2, #8
 80093c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0204 	bic.w	r2, r2, #4
 80093d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093e6:	e021      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68b9      	ldr	r1, [r7, #8]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fbb6 	bl	8009b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	021a      	lsls	r2, r3, #8
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009428:	e000      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800942a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop

08009448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_TIM_ConfigClockSource+0x18>
 800945c:	2302      	movs	r3, #2
 800945e:	e0a6      	b.n	80095ae <HAL_TIM_ConfigClockSource+0x166>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4b4f      	ldr	r3, [pc, #316]	; (80095b8 <HAL_TIM_ConfigClockSource+0x170>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009486:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b40      	cmp	r3, #64	; 0x40
 8009496:	d067      	beq.n	8009568 <HAL_TIM_ConfigClockSource+0x120>
 8009498:	2b40      	cmp	r3, #64	; 0x40
 800949a:	d80b      	bhi.n	80094b4 <HAL_TIM_ConfigClockSource+0x6c>
 800949c:	2b10      	cmp	r3, #16
 800949e:	d073      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
 80094a0:	2b10      	cmp	r3, #16
 80094a2:	d802      	bhi.n	80094aa <HAL_TIM_ConfigClockSource+0x62>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d06f      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80094a8:	e078      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80094aa:	2b20      	cmp	r3, #32
 80094ac:	d06c      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
 80094ae:	2b30      	cmp	r3, #48	; 0x30
 80094b0:	d06a      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80094b2:	e073      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80094b4:	2b70      	cmp	r3, #112	; 0x70
 80094b6:	d00d      	beq.n	80094d4 <HAL_TIM_ConfigClockSource+0x8c>
 80094b8:	2b70      	cmp	r3, #112	; 0x70
 80094ba:	d804      	bhi.n	80094c6 <HAL_TIM_ConfigClockSource+0x7e>
 80094bc:	2b50      	cmp	r3, #80	; 0x50
 80094be:	d033      	beq.n	8009528 <HAL_TIM_ConfigClockSource+0xe0>
 80094c0:	2b60      	cmp	r3, #96	; 0x60
 80094c2:	d041      	beq.n	8009548 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80094c4:	e06a      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80094c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ca:	d066      	beq.n	800959a <HAL_TIM_ConfigClockSource+0x152>
 80094cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d0:	d017      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80094d2:	e063      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	6899      	ldr	r1, [r3, #8]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f000 fc0a 	bl	8009cfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	609a      	str	r2, [r3, #8]
      break;
 8009500:	e04c      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6899      	ldr	r1, [r3, #8]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f000 fbf3 	bl	8009cfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009524:	609a      	str	r2, [r3, #8]
      break;
 8009526:	e039      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	6859      	ldr	r1, [r3, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	461a      	mov	r2, r3
 8009536:	f000 fb67 	bl	8009c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2150      	movs	r1, #80	; 0x50
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fbc0 	bl	8009cc6 <TIM_ITRx_SetConfig>
      break;
 8009546:	e029      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6859      	ldr	r1, [r3, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	461a      	mov	r2, r3
 8009556:	f000 fb86 	bl	8009c66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2160      	movs	r1, #96	; 0x60
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fbb0 	bl	8009cc6 <TIM_ITRx_SetConfig>
      break;
 8009566:	e019      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	6859      	ldr	r1, [r3, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	461a      	mov	r2, r3
 8009576:	f000 fb47 	bl	8009c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2140      	movs	r1, #64	; 0x40
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fba0 	bl	8009cc6 <TIM_ITRx_SetConfig>
      break;
 8009586:	e009      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f000 fb97 	bl	8009cc6 <TIM_ITRx_SetConfig>
      break;
 8009598:	e000      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800959a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	fffeff88 	.word	0xfffeff88

080095bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a40      	ldr	r2, [pc, #256]	; (8009720 <TIM_Base_SetConfig+0x114>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d013      	beq.n	800964c <TIM_Base_SetConfig+0x40>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800962a:	d00f      	beq.n	800964c <TIM_Base_SetConfig+0x40>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a3d      	ldr	r2, [pc, #244]	; (8009724 <TIM_Base_SetConfig+0x118>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00b      	beq.n	800964c <TIM_Base_SetConfig+0x40>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a3c      	ldr	r2, [pc, #240]	; (8009728 <TIM_Base_SetConfig+0x11c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d007      	beq.n	800964c <TIM_Base_SetConfig+0x40>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a3b      	ldr	r2, [pc, #236]	; (800972c <TIM_Base_SetConfig+0x120>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d003      	beq.n	800964c <TIM_Base_SetConfig+0x40>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a3a      	ldr	r2, [pc, #232]	; (8009730 <TIM_Base_SetConfig+0x124>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d108      	bne.n	800965e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2f      	ldr	r2, [pc, #188]	; (8009720 <TIM_Base_SetConfig+0x114>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d02b      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800966c:	d027      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a2c      	ldr	r2, [pc, #176]	; (8009724 <TIM_Base_SetConfig+0x118>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d023      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a2b      	ldr	r2, [pc, #172]	; (8009728 <TIM_Base_SetConfig+0x11c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d01f      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a2a      	ldr	r2, [pc, #168]	; (800972c <TIM_Base_SetConfig+0x120>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d01b      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a29      	ldr	r2, [pc, #164]	; (8009730 <TIM_Base_SetConfig+0x124>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d017      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a28      	ldr	r2, [pc, #160]	; (8009734 <TIM_Base_SetConfig+0x128>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d013      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a27      	ldr	r2, [pc, #156]	; (8009738 <TIM_Base_SetConfig+0x12c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d00f      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a26      	ldr	r2, [pc, #152]	; (800973c <TIM_Base_SetConfig+0x130>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d00b      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a25      	ldr	r2, [pc, #148]	; (8009740 <TIM_Base_SetConfig+0x134>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d007      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a24      	ldr	r2, [pc, #144]	; (8009744 <TIM_Base_SetConfig+0x138>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d003      	beq.n	80096be <TIM_Base_SetConfig+0xb2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a23      	ldr	r2, [pc, #140]	; (8009748 <TIM_Base_SetConfig+0x13c>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d108      	bne.n	80096d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a0a      	ldr	r2, [pc, #40]	; (8009720 <TIM_Base_SetConfig+0x114>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d003      	beq.n	8009704 <TIM_Base_SetConfig+0xf8>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a0c      	ldr	r2, [pc, #48]	; (8009730 <TIM_Base_SetConfig+0x124>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d103      	bne.n	800970c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	615a      	str	r2, [r3, #20]
}
 8009712:	bf00      	nop
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40010000 	.word	0x40010000
 8009724:	40000400 	.word	0x40000400
 8009728:	40000800 	.word	0x40000800
 800972c:	40000c00 	.word	0x40000c00
 8009730:	40010400 	.word	0x40010400
 8009734:	40014000 	.word	0x40014000
 8009738:	40014400 	.word	0x40014400
 800973c:	40014800 	.word	0x40014800
 8009740:	40001800 	.word	0x40001800
 8009744:	40001c00 	.word	0x40001c00
 8009748:	40002000 	.word	0x40002000

0800974c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	f023 0201 	bic.w	r2, r3, #1
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	4b2b      	ldr	r3, [pc, #172]	; (8009824 <TIM_OC1_SetConfig+0xd8>)
 8009778:	4013      	ands	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f023 0303 	bic.w	r3, r3, #3
 8009782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	4313      	orrs	r3, r2
 800978c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f023 0302 	bic.w	r3, r3, #2
 8009794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a21      	ldr	r2, [pc, #132]	; (8009828 <TIM_OC1_SetConfig+0xdc>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_OC1_SetConfig+0x64>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a20      	ldr	r2, [pc, #128]	; (800982c <TIM_OC1_SetConfig+0xe0>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d10c      	bne.n	80097ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f023 0308 	bic.w	r3, r3, #8
 80097b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	4313      	orrs	r3, r2
 80097c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f023 0304 	bic.w	r3, r3, #4
 80097c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a16      	ldr	r2, [pc, #88]	; (8009828 <TIM_OC1_SetConfig+0xdc>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d003      	beq.n	80097da <TIM_OC1_SetConfig+0x8e>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a15      	ldr	r2, [pc, #84]	; (800982c <TIM_OC1_SetConfig+0xe0>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d111      	bne.n	80097fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	621a      	str	r2, [r3, #32]
}
 8009818:	bf00      	nop
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	fffeff8f 	.word	0xfffeff8f
 8009828:	40010000 	.word	0x40010000
 800982c:	40010400 	.word	0x40010400

08009830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	f023 0210 	bic.w	r2, r3, #16
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	4b2e      	ldr	r3, [pc, #184]	; (8009914 <TIM_OC2_SetConfig+0xe4>)
 800985c:	4013      	ands	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	4313      	orrs	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f023 0320 	bic.w	r3, r3, #32
 800987a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a23      	ldr	r2, [pc, #140]	; (8009918 <TIM_OC2_SetConfig+0xe8>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d003      	beq.n	8009898 <TIM_OC2_SetConfig+0x68>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a22      	ldr	r2, [pc, #136]	; (800991c <TIM_OC2_SetConfig+0xec>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d10d      	bne.n	80098b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800989e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	011b      	lsls	r3, r3, #4
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a18      	ldr	r2, [pc, #96]	; (8009918 <TIM_OC2_SetConfig+0xe8>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_OC2_SetConfig+0x94>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a17      	ldr	r2, [pc, #92]	; (800991c <TIM_OC2_SetConfig+0xec>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d113      	bne.n	80098ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	4313      	orrs	r3, r2
 80098de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	621a      	str	r2, [r3, #32]
}
 8009906:	bf00      	nop
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	feff8fff 	.word	0xfeff8fff
 8009918:	40010000 	.word	0x40010000
 800991c:	40010400 	.word	0x40010400

08009920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	4b2d      	ldr	r3, [pc, #180]	; (8009a00 <TIM_OC3_SetConfig+0xe0>)
 800994c:	4013      	ands	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a22      	ldr	r2, [pc, #136]	; (8009a04 <TIM_OC3_SetConfig+0xe4>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d003      	beq.n	8009986 <TIM_OC3_SetConfig+0x66>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a21      	ldr	r2, [pc, #132]	; (8009a08 <TIM_OC3_SetConfig+0xe8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d10d      	bne.n	80099a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800998c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a17      	ldr	r2, [pc, #92]	; (8009a04 <TIM_OC3_SetConfig+0xe4>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d003      	beq.n	80099b2 <TIM_OC3_SetConfig+0x92>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a16      	ldr	r2, [pc, #88]	; (8009a08 <TIM_OC3_SetConfig+0xe8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d113      	bne.n	80099da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	621a      	str	r2, [r3, #32]
}
 80099f4:	bf00      	nop
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	fffeff8f 	.word	0xfffeff8f
 8009a04:	40010000 	.word	0x40010000
 8009a08:	40010400 	.word	0x40010400

08009a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4b1e      	ldr	r3, [pc, #120]	; (8009ab0 <TIM_OC4_SetConfig+0xa4>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	031b      	lsls	r3, r3, #12
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a13      	ldr	r2, [pc, #76]	; (8009ab4 <TIM_OC4_SetConfig+0xa8>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d003      	beq.n	8009a74 <TIM_OC4_SetConfig+0x68>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a12      	ldr	r2, [pc, #72]	; (8009ab8 <TIM_OC4_SetConfig+0xac>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d109      	bne.n	8009a88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	019b      	lsls	r3, r3, #6
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	621a      	str	r2, [r3, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	feff8fff 	.word	0xfeff8fff
 8009ab4:	40010000 	.word	0x40010000
 8009ab8:	40010400 	.word	0x40010400

08009abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4b1b      	ldr	r3, [pc, #108]	; (8009b54 <TIM_OC5_SetConfig+0x98>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a12      	ldr	r2, [pc, #72]	; (8009b58 <TIM_OC5_SetConfig+0x9c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d003      	beq.n	8009b1a <TIM_OC5_SetConfig+0x5e>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a11      	ldr	r2, [pc, #68]	; (8009b5c <TIM_OC5_SetConfig+0xa0>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d109      	bne.n	8009b2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	021b      	lsls	r3, r3, #8
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	621a      	str	r2, [r3, #32]
}
 8009b48:	bf00      	nop
 8009b4a:	371c      	adds	r7, #28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	fffeff8f 	.word	0xfffeff8f
 8009b58:	40010000 	.word	0x40010000
 8009b5c:	40010400 	.word	0x40010400

08009b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <TIM_OC6_SetConfig+0x9c>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	021b      	lsls	r3, r3, #8
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	051b      	lsls	r3, r3, #20
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a13      	ldr	r2, [pc, #76]	; (8009c00 <TIM_OC6_SetConfig+0xa0>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d003      	beq.n	8009bc0 <TIM_OC6_SetConfig+0x60>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a12      	ldr	r2, [pc, #72]	; (8009c04 <TIM_OC6_SetConfig+0xa4>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d109      	bne.n	8009bd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	029b      	lsls	r3, r3, #10
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	621a      	str	r2, [r3, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	feff8fff 	.word	0xfeff8fff
 8009c00:	40010000 	.word	0x40010000
 8009c04:	40010400 	.word	0x40010400

08009c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	f023 0201 	bic.w	r2, r3, #1
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f023 030a 	bic.w	r3, r3, #10
 8009c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	621a      	str	r2, [r3, #32]
}
 8009c5a:	bf00      	nop
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b087      	sub	sp, #28
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	60f8      	str	r0, [r7, #12]
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	f023 0210 	bic.w	r2, r3, #16
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	031b      	lsls	r3, r3, #12
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	011b      	lsls	r3, r3, #4
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	621a      	str	r2, [r3, #32]
}
 8009cba:	bf00      	nop
 8009cbc:	371c      	adds	r7, #28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f043 0307 	orr.w	r3, r3, #7
 8009ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	609a      	str	r2, [r3, #8]
}
 8009cf0:	bf00      	nop
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	021a      	lsls	r2, r3, #8
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	609a      	str	r2, [r3, #8]
}
 8009d30:	bf00      	nop
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e06d      	b.n	8009e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a30      	ldr	r2, [pc, #192]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d004      	beq.n	8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a2f      	ldr	r2, [pc, #188]	; (8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d108      	bne.n	8009d9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a20      	ldr	r2, [pc, #128]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d022      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc6:	d01d      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a1d      	ldr	r2, [pc, #116]	; (8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d018      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1c      	ldr	r2, [pc, #112]	; (8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d013      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1a      	ldr	r2, [pc, #104]	; (8009e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00e      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a15      	ldr	r2, [pc, #84]	; (8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d009      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a16      	ldr	r2, [pc, #88]	; (8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d004      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a15      	ldr	r2, [pc, #84]	; (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10c      	bne.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	40010000 	.word	0x40010000
 8009e40:	40010400 	.word	0x40010400
 8009e44:	40000400 	.word	0x40000400
 8009e48:	40000800 	.word	0x40000800
 8009e4c:	40000c00 	.word	0x40000c00
 8009e50:	40014000 	.word	0x40014000
 8009e54:	40001800 	.word	0x40001800

08009e58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d101      	bne.n	8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e70:	2302      	movs	r3, #2
 8009e72:	e065      	b.n	8009f40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	041b      	lsls	r3, r3, #16
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a16      	ldr	r2, [pc, #88]	; (8009f4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d004      	beq.n	8009f02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a14      	ldr	r2, [pc, #80]	; (8009f50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d115      	bne.n	8009f2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	051b      	lsls	r3, r3, #20
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	69db      	ldr	r3, [r3, #28]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	40010000 	.word	0x40010000
 8009f50:	40010400 	.word	0x40010400

08009f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e040      	b.n	800a024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d106      	bne.n	8009fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7f8 fd5e 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2224      	movs	r2, #36	; 0x24
 8009fbc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0201 	bic.w	r2, r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f82c 	bl	800a02c <UART_SetConfig>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e022      	b.n	800a024 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 faca 	bl	800a580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a00a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0201 	orr.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fb51 	bl	800a6c4 <UART_CheckIdleState>
 800a022:	4603      	mov	r3, r0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a034:	2300      	movs	r3, #0
 800a036:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	431a      	orrs	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	4313      	orrs	r3, r2
 800a052:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	4bb1      	ldr	r3, [pc, #708]	; (800a320 <UART_SetConfig+0x2f4>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	6939      	ldr	r1, [r7, #16]
 800a064:	430b      	orrs	r3, r1
 800a066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a9f      	ldr	r2, [pc, #636]	; (800a324 <UART_SetConfig+0x2f8>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d121      	bne.n	800a0f0 <UART_SetConfig+0xc4>
 800a0ac:	4b9e      	ldr	r3, [pc, #632]	; (800a328 <UART_SetConfig+0x2fc>)
 800a0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d816      	bhi.n	800a0e8 <UART_SetConfig+0xbc>
 800a0ba:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <UART_SetConfig+0x94>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a0d1 	.word	0x0800a0d1
 800a0c4:	0800a0dd 	.word	0x0800a0dd
 800a0c8:	0800a0d7 	.word	0x0800a0d7
 800a0cc:	0800a0e3 	.word	0x0800a0e3
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	77fb      	strb	r3, [r7, #31]
 800a0d4:	e151      	b.n	800a37a <UART_SetConfig+0x34e>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	77fb      	strb	r3, [r7, #31]
 800a0da:	e14e      	b.n	800a37a <UART_SetConfig+0x34e>
 800a0dc:	2304      	movs	r3, #4
 800a0de:	77fb      	strb	r3, [r7, #31]
 800a0e0:	e14b      	b.n	800a37a <UART_SetConfig+0x34e>
 800a0e2:	2308      	movs	r3, #8
 800a0e4:	77fb      	strb	r3, [r7, #31]
 800a0e6:	e148      	b.n	800a37a <UART_SetConfig+0x34e>
 800a0e8:	2310      	movs	r3, #16
 800a0ea:	77fb      	strb	r3, [r7, #31]
 800a0ec:	bf00      	nop
 800a0ee:	e144      	b.n	800a37a <UART_SetConfig+0x34e>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a8d      	ldr	r2, [pc, #564]	; (800a32c <UART_SetConfig+0x300>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d134      	bne.n	800a164 <UART_SetConfig+0x138>
 800a0fa:	4b8b      	ldr	r3, [pc, #556]	; (800a328 <UART_SetConfig+0x2fc>)
 800a0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a100:	f003 030c 	and.w	r3, r3, #12
 800a104:	2b0c      	cmp	r3, #12
 800a106:	d829      	bhi.n	800a15c <UART_SetConfig+0x130>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <UART_SetConfig+0xe4>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a145 	.word	0x0800a145
 800a114:	0800a15d 	.word	0x0800a15d
 800a118:	0800a15d 	.word	0x0800a15d
 800a11c:	0800a15d 	.word	0x0800a15d
 800a120:	0800a151 	.word	0x0800a151
 800a124:	0800a15d 	.word	0x0800a15d
 800a128:	0800a15d 	.word	0x0800a15d
 800a12c:	0800a15d 	.word	0x0800a15d
 800a130:	0800a14b 	.word	0x0800a14b
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a15d 	.word	0x0800a15d
 800a13c:	0800a15d 	.word	0x0800a15d
 800a140:	0800a157 	.word	0x0800a157
 800a144:	2300      	movs	r3, #0
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e117      	b.n	800a37a <UART_SetConfig+0x34e>
 800a14a:	2302      	movs	r3, #2
 800a14c:	77fb      	strb	r3, [r7, #31]
 800a14e:	e114      	b.n	800a37a <UART_SetConfig+0x34e>
 800a150:	2304      	movs	r3, #4
 800a152:	77fb      	strb	r3, [r7, #31]
 800a154:	e111      	b.n	800a37a <UART_SetConfig+0x34e>
 800a156:	2308      	movs	r3, #8
 800a158:	77fb      	strb	r3, [r7, #31]
 800a15a:	e10e      	b.n	800a37a <UART_SetConfig+0x34e>
 800a15c:	2310      	movs	r3, #16
 800a15e:	77fb      	strb	r3, [r7, #31]
 800a160:	bf00      	nop
 800a162:	e10a      	b.n	800a37a <UART_SetConfig+0x34e>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a71      	ldr	r2, [pc, #452]	; (800a330 <UART_SetConfig+0x304>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d120      	bne.n	800a1b0 <UART_SetConfig+0x184>
 800a16e:	4b6e      	ldr	r3, [pc, #440]	; (800a328 <UART_SetConfig+0x2fc>)
 800a170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a174:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a178:	2b10      	cmp	r3, #16
 800a17a:	d00f      	beq.n	800a19c <UART_SetConfig+0x170>
 800a17c:	2b10      	cmp	r3, #16
 800a17e:	d802      	bhi.n	800a186 <UART_SetConfig+0x15a>
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <UART_SetConfig+0x164>
 800a184:	e010      	b.n	800a1a8 <UART_SetConfig+0x17c>
 800a186:	2b20      	cmp	r3, #32
 800a188:	d005      	beq.n	800a196 <UART_SetConfig+0x16a>
 800a18a:	2b30      	cmp	r3, #48	; 0x30
 800a18c:	d009      	beq.n	800a1a2 <UART_SetConfig+0x176>
 800a18e:	e00b      	b.n	800a1a8 <UART_SetConfig+0x17c>
 800a190:	2300      	movs	r3, #0
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e0f1      	b.n	800a37a <UART_SetConfig+0x34e>
 800a196:	2302      	movs	r3, #2
 800a198:	77fb      	strb	r3, [r7, #31]
 800a19a:	e0ee      	b.n	800a37a <UART_SetConfig+0x34e>
 800a19c:	2304      	movs	r3, #4
 800a19e:	77fb      	strb	r3, [r7, #31]
 800a1a0:	e0eb      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	77fb      	strb	r3, [r7, #31]
 800a1a6:	e0e8      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	bf00      	nop
 800a1ae:	e0e4      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a5f      	ldr	r2, [pc, #380]	; (800a334 <UART_SetConfig+0x308>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d120      	bne.n	800a1fc <UART_SetConfig+0x1d0>
 800a1ba:	4b5b      	ldr	r3, [pc, #364]	; (800a328 <UART_SetConfig+0x2fc>)
 800a1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1c4:	2b40      	cmp	r3, #64	; 0x40
 800a1c6:	d00f      	beq.n	800a1e8 <UART_SetConfig+0x1bc>
 800a1c8:	2b40      	cmp	r3, #64	; 0x40
 800a1ca:	d802      	bhi.n	800a1d2 <UART_SetConfig+0x1a6>
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <UART_SetConfig+0x1b0>
 800a1d0:	e010      	b.n	800a1f4 <UART_SetConfig+0x1c8>
 800a1d2:	2b80      	cmp	r3, #128	; 0x80
 800a1d4:	d005      	beq.n	800a1e2 <UART_SetConfig+0x1b6>
 800a1d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a1d8:	d009      	beq.n	800a1ee <UART_SetConfig+0x1c2>
 800a1da:	e00b      	b.n	800a1f4 <UART_SetConfig+0x1c8>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	77fb      	strb	r3, [r7, #31]
 800a1e0:	e0cb      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	77fb      	strb	r3, [r7, #31]
 800a1e6:	e0c8      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	77fb      	strb	r3, [r7, #31]
 800a1ec:	e0c5      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e0c2      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	77fb      	strb	r3, [r7, #31]
 800a1f8:	bf00      	nop
 800a1fa:	e0be      	b.n	800a37a <UART_SetConfig+0x34e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a4d      	ldr	r2, [pc, #308]	; (800a338 <UART_SetConfig+0x30c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d124      	bne.n	800a250 <UART_SetConfig+0x224>
 800a206:	4b48      	ldr	r3, [pc, #288]	; (800a328 <UART_SetConfig+0x2fc>)
 800a208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a214:	d012      	beq.n	800a23c <UART_SetConfig+0x210>
 800a216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21a:	d802      	bhi.n	800a222 <UART_SetConfig+0x1f6>
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d007      	beq.n	800a230 <UART_SetConfig+0x204>
 800a220:	e012      	b.n	800a248 <UART_SetConfig+0x21c>
 800a222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a226:	d006      	beq.n	800a236 <UART_SetConfig+0x20a>
 800a228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a22c:	d009      	beq.n	800a242 <UART_SetConfig+0x216>
 800a22e:	e00b      	b.n	800a248 <UART_SetConfig+0x21c>
 800a230:	2300      	movs	r3, #0
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e0a1      	b.n	800a37a <UART_SetConfig+0x34e>
 800a236:	2302      	movs	r3, #2
 800a238:	77fb      	strb	r3, [r7, #31]
 800a23a:	e09e      	b.n	800a37a <UART_SetConfig+0x34e>
 800a23c:	2304      	movs	r3, #4
 800a23e:	77fb      	strb	r3, [r7, #31]
 800a240:	e09b      	b.n	800a37a <UART_SetConfig+0x34e>
 800a242:	2308      	movs	r3, #8
 800a244:	77fb      	strb	r3, [r7, #31]
 800a246:	e098      	b.n	800a37a <UART_SetConfig+0x34e>
 800a248:	2310      	movs	r3, #16
 800a24a:	77fb      	strb	r3, [r7, #31]
 800a24c:	bf00      	nop
 800a24e:	e094      	b.n	800a37a <UART_SetConfig+0x34e>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a39      	ldr	r2, [pc, #228]	; (800a33c <UART_SetConfig+0x310>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d124      	bne.n	800a2a4 <UART_SetConfig+0x278>
 800a25a:	4b33      	ldr	r3, [pc, #204]	; (800a328 <UART_SetConfig+0x2fc>)
 800a25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a268:	d012      	beq.n	800a290 <UART_SetConfig+0x264>
 800a26a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a26e:	d802      	bhi.n	800a276 <UART_SetConfig+0x24a>
 800a270:	2b00      	cmp	r3, #0
 800a272:	d007      	beq.n	800a284 <UART_SetConfig+0x258>
 800a274:	e012      	b.n	800a29c <UART_SetConfig+0x270>
 800a276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a27a:	d006      	beq.n	800a28a <UART_SetConfig+0x25e>
 800a27c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a280:	d009      	beq.n	800a296 <UART_SetConfig+0x26a>
 800a282:	e00b      	b.n	800a29c <UART_SetConfig+0x270>
 800a284:	2301      	movs	r3, #1
 800a286:	77fb      	strb	r3, [r7, #31]
 800a288:	e077      	b.n	800a37a <UART_SetConfig+0x34e>
 800a28a:	2302      	movs	r3, #2
 800a28c:	77fb      	strb	r3, [r7, #31]
 800a28e:	e074      	b.n	800a37a <UART_SetConfig+0x34e>
 800a290:	2304      	movs	r3, #4
 800a292:	77fb      	strb	r3, [r7, #31]
 800a294:	e071      	b.n	800a37a <UART_SetConfig+0x34e>
 800a296:	2308      	movs	r3, #8
 800a298:	77fb      	strb	r3, [r7, #31]
 800a29a:	e06e      	b.n	800a37a <UART_SetConfig+0x34e>
 800a29c:	2310      	movs	r3, #16
 800a29e:	77fb      	strb	r3, [r7, #31]
 800a2a0:	bf00      	nop
 800a2a2:	e06a      	b.n	800a37a <UART_SetConfig+0x34e>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a25      	ldr	r2, [pc, #148]	; (800a340 <UART_SetConfig+0x314>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d124      	bne.n	800a2f8 <UART_SetConfig+0x2cc>
 800a2ae:	4b1e      	ldr	r3, [pc, #120]	; (800a328 <UART_SetConfig+0x2fc>)
 800a2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2bc:	d012      	beq.n	800a2e4 <UART_SetConfig+0x2b8>
 800a2be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c2:	d802      	bhi.n	800a2ca <UART_SetConfig+0x29e>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <UART_SetConfig+0x2ac>
 800a2c8:	e012      	b.n	800a2f0 <UART_SetConfig+0x2c4>
 800a2ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ce:	d006      	beq.n	800a2de <UART_SetConfig+0x2b2>
 800a2d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2d4:	d009      	beq.n	800a2ea <UART_SetConfig+0x2be>
 800a2d6:	e00b      	b.n	800a2f0 <UART_SetConfig+0x2c4>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	77fb      	strb	r3, [r7, #31]
 800a2dc:	e04d      	b.n	800a37a <UART_SetConfig+0x34e>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	77fb      	strb	r3, [r7, #31]
 800a2e2:	e04a      	b.n	800a37a <UART_SetConfig+0x34e>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	77fb      	strb	r3, [r7, #31]
 800a2e8:	e047      	b.n	800a37a <UART_SetConfig+0x34e>
 800a2ea:	2308      	movs	r3, #8
 800a2ec:	77fb      	strb	r3, [r7, #31]
 800a2ee:	e044      	b.n	800a37a <UART_SetConfig+0x34e>
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	77fb      	strb	r3, [r7, #31]
 800a2f4:	bf00      	nop
 800a2f6:	e040      	b.n	800a37a <UART_SetConfig+0x34e>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a11      	ldr	r2, [pc, #68]	; (800a344 <UART_SetConfig+0x318>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d139      	bne.n	800a376 <UART_SetConfig+0x34a>
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <UART_SetConfig+0x2fc>)
 800a304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a30c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a310:	d027      	beq.n	800a362 <UART_SetConfig+0x336>
 800a312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a316:	d817      	bhi.n	800a348 <UART_SetConfig+0x31c>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01c      	beq.n	800a356 <UART_SetConfig+0x32a>
 800a31c:	e027      	b.n	800a36e <UART_SetConfig+0x342>
 800a31e:	bf00      	nop
 800a320:	efff69f3 	.word	0xefff69f3
 800a324:	40011000 	.word	0x40011000
 800a328:	40023800 	.word	0x40023800
 800a32c:	40004400 	.word	0x40004400
 800a330:	40004800 	.word	0x40004800
 800a334:	40004c00 	.word	0x40004c00
 800a338:	40005000 	.word	0x40005000
 800a33c:	40011400 	.word	0x40011400
 800a340:	40007800 	.word	0x40007800
 800a344:	40007c00 	.word	0x40007c00
 800a348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a34c:	d006      	beq.n	800a35c <UART_SetConfig+0x330>
 800a34e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a352:	d009      	beq.n	800a368 <UART_SetConfig+0x33c>
 800a354:	e00b      	b.n	800a36e <UART_SetConfig+0x342>
 800a356:	2300      	movs	r3, #0
 800a358:	77fb      	strb	r3, [r7, #31]
 800a35a:	e00e      	b.n	800a37a <UART_SetConfig+0x34e>
 800a35c:	2302      	movs	r3, #2
 800a35e:	77fb      	strb	r3, [r7, #31]
 800a360:	e00b      	b.n	800a37a <UART_SetConfig+0x34e>
 800a362:	2304      	movs	r3, #4
 800a364:	77fb      	strb	r3, [r7, #31]
 800a366:	e008      	b.n	800a37a <UART_SetConfig+0x34e>
 800a368:	2308      	movs	r3, #8
 800a36a:	77fb      	strb	r3, [r7, #31]
 800a36c:	e005      	b.n	800a37a <UART_SetConfig+0x34e>
 800a36e:	2310      	movs	r3, #16
 800a370:	77fb      	strb	r3, [r7, #31]
 800a372:	bf00      	nop
 800a374:	e001      	b.n	800a37a <UART_SetConfig+0x34e>
 800a376:	2310      	movs	r3, #16
 800a378:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a382:	d17f      	bne.n	800a484 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a384:	7ffb      	ldrb	r3, [r7, #31]
 800a386:	2b08      	cmp	r3, #8
 800a388:	d85c      	bhi.n	800a444 <UART_SetConfig+0x418>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <UART_SetConfig+0x364>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3b5 	.word	0x0800a3b5
 800a394:	0800a3d5 	.word	0x0800a3d5
 800a398:	0800a3f5 	.word	0x0800a3f5
 800a39c:	0800a445 	.word	0x0800a445
 800a3a0:	0800a40d 	.word	0x0800a40d
 800a3a4:	0800a445 	.word	0x0800a445
 800a3a8:	0800a445 	.word	0x0800a445
 800a3ac:	0800a445 	.word	0x0800a445
 800a3b0:	0800a42d 	.word	0x0800a42d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3b4:	f7fc f8d0 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 800a3b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	005a      	lsls	r2, r3, #1
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	441a      	add	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	61bb      	str	r3, [r7, #24]
        break;
 800a3d2:	e03a      	b.n	800a44a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3d4:	f7fc f8d4 	bl	8006580 <HAL_RCC_GetPCLK2Freq>
 800a3d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	005a      	lsls	r2, r3, #1
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	441a      	add	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	61bb      	str	r3, [r7, #24]
        break;
 800a3f2:	e02a      	b.n	800a44a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	085a      	lsrs	r2, r3, #1
 800a3fa:	4b5f      	ldr	r3, [pc, #380]	; (800a578 <UART_SetConfig+0x54c>)
 800a3fc:	4413      	add	r3, r2
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	6852      	ldr	r2, [r2, #4]
 800a402:	fbb3 f3f2 	udiv	r3, r3, r2
 800a406:	b29b      	uxth	r3, r3
 800a408:	61bb      	str	r3, [r7, #24]
        break;
 800a40a:	e01e      	b.n	800a44a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a40c:	f7fb ffe6 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800a410:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	005a      	lsls	r2, r3, #1
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	085b      	lsrs	r3, r3, #1
 800a41c:	441a      	add	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	fbb2 f3f3 	udiv	r3, r2, r3
 800a426:	b29b      	uxth	r3, r3
 800a428:	61bb      	str	r3, [r7, #24]
        break;
 800a42a:	e00e      	b.n	800a44a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	b29b      	uxth	r3, r3
 800a440:	61bb      	str	r3, [r7, #24]
        break;
 800a442:	e002      	b.n	800a44a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	75fb      	strb	r3, [r7, #23]
        break;
 800a448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	2b0f      	cmp	r3, #15
 800a44e:	d916      	bls.n	800a47e <UART_SetConfig+0x452>
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a456:	d212      	bcs.n	800a47e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f023 030f 	bic.w	r3, r3, #15
 800a460:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	085b      	lsrs	r3, r3, #1
 800a466:	b29b      	uxth	r3, r3
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	897b      	ldrh	r3, [r7, #10]
 800a470:	4313      	orrs	r3, r2
 800a472:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	897a      	ldrh	r2, [r7, #10]
 800a47a:	60da      	str	r2, [r3, #12]
 800a47c:	e070      	b.n	800a560 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	75fb      	strb	r3, [r7, #23]
 800a482:	e06d      	b.n	800a560 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a484:	7ffb      	ldrb	r3, [r7, #31]
 800a486:	2b08      	cmp	r3, #8
 800a488:	d859      	bhi.n	800a53e <UART_SetConfig+0x512>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x464>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4b5 	.word	0x0800a4b5
 800a494:	0800a4d3 	.word	0x0800a4d3
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800a53f 	.word	0x0800a53f
 800a4a0:	0800a509 	.word	0x0800a509
 800a4a4:	0800a53f 	.word	0x0800a53f
 800a4a8:	0800a53f 	.word	0x0800a53f
 800a4ac:	0800a53f 	.word	0x0800a53f
 800a4b0:	0800a527 	.word	0x0800a527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4b4:	f7fc f850 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 800a4b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	085a      	lsrs	r2, r3, #1
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	441a      	add	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	61bb      	str	r3, [r7, #24]
        break;
 800a4d0:	e038      	b.n	800a544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4d2:	f7fc f855 	bl	8006580 <HAL_RCC_GetPCLK2Freq>
 800a4d6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	085a      	lsrs	r2, r3, #1
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	441a      	add	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	61bb      	str	r3, [r7, #24]
        break;
 800a4ee:	e029      	b.n	800a544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	085a      	lsrs	r2, r3, #1
 800a4f6:	4b21      	ldr	r3, [pc, #132]	; (800a57c <UART_SetConfig+0x550>)
 800a4f8:	4413      	add	r3, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	6852      	ldr	r2, [r2, #4]
 800a4fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a502:	b29b      	uxth	r3, r3
 800a504:	61bb      	str	r3, [r7, #24]
        break;
 800a506:	e01d      	b.n	800a544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a508:	f7fb ff68 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800a50c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	085a      	lsrs	r2, r3, #1
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	441a      	add	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a520:	b29b      	uxth	r3, r3
 800a522:	61bb      	str	r3, [r7, #24]
        break;
 800a524:	e00e      	b.n	800a544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	085b      	lsrs	r3, r3, #1
 800a52c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	fbb2 f3f3 	udiv	r3, r2, r3
 800a538:	b29b      	uxth	r3, r3
 800a53a:	61bb      	str	r3, [r7, #24]
        break;
 800a53c:	e002      	b.n	800a544 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	75fb      	strb	r3, [r7, #23]
        break;
 800a542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2b0f      	cmp	r3, #15
 800a548:	d908      	bls.n	800a55c <UART_SetConfig+0x530>
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a550:	d204      	bcs.n	800a55c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	60da      	str	r2, [r3, #12]
 800a55a:	e001      	b.n	800a560 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3720      	adds	r7, #32
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	01e84800 	.word	0x01e84800
 800a57c:	00f42400 	.word	0x00f42400

0800a580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	f003 0304 	and.w	r3, r3, #4
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00a      	beq.n	800a5ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	f003 0308 	and.w	r3, r3, #8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00a      	beq.n	800a610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	f003 0310 	and.w	r3, r3, #16
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00a      	beq.n	800a632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	430a      	orrs	r2, r1
 800a630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	f003 0320 	and.w	r3, r3, #32
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00a      	beq.n	800a654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	430a      	orrs	r2, r1
 800a652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01a      	beq.n	800a696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a67e:	d10a      	bne.n	800a696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	430a      	orrs	r2, r1
 800a6b6:	605a      	str	r2, [r3, #4]
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a6d2:	f7f8 fd1d 	bl	8003110 <HAL_GetTick>
 800a6d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0308 	and.w	r3, r3, #8
 800a6e2:	2b08      	cmp	r3, #8
 800a6e4:	d10e      	bne.n	800a704 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f814 	bl	800a722 <UART_WaitOnFlagUntilTimeout>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e00a      	b.n	800a71a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	603b      	str	r3, [r7, #0]
 800a72e:	4613      	mov	r3, r2
 800a730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a732:	e05d      	b.n	800a7f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73a:	d059      	beq.n	800a7f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a73c:	f7f8 fce8 	bl	8003110 <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d302      	bcc.n	800a752 <UART_WaitOnFlagUntilTimeout+0x30>
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d11b      	bne.n	800a78a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a760:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689a      	ldr	r2, [r3, #8]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0201 	bic.w	r2, r2, #1
 800a770:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2220      	movs	r2, #32
 800a77c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e042      	b.n	800a810 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0304 	and.w	r3, r3, #4
 800a794:	2b00      	cmp	r3, #0
 800a796:	d02b      	beq.n	800a7f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a6:	d123      	bne.n	800a7f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f022 0201 	bic.w	r2, r2, #1
 800a7d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e00f      	b.n	800a810 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	69da      	ldr	r2, [r3, #28]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	bf0c      	ite	eq
 800a800:	2301      	moveq	r3, #1
 800a802:	2300      	movne	r3, #0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	461a      	mov	r2, r3
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d092      	beq.n	800a734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d027      	beq.n	800a882 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	4b2f      	ldr	r3, [pc, #188]	; (800a8f8 <FMC_SDRAM_Init+0xe0>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a848:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a84e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a854:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a85a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a860:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a866:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a86c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a872:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	e032      	b.n	800a8e8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a88e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a898:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a89e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	4b12      	ldr	r3, [pc, #72]	; (800a8f8 <FMC_SDRAM_Init+0xe0>)
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8bc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a8c2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a8c8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a8ce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a8d4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	ffff8000 	.word	0xffff8000

0800a8fc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b087      	sub	sp, #28
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d02e      	beq.n	800a974 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a922:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	3b01      	subs	r3, #1
 800a930:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a932:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	3b01      	subs	r3, #1
 800a93a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a93c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	3b01      	subs	r3, #1
 800a944:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a946:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a950:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	3b01      	subs	r3, #1
 800a958:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a95a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	3b01      	subs	r3, #1
 800a962:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a964:	4313      	orrs	r3, r2
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	4313      	orrs	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	609a      	str	r2, [r3, #8]
 800a972:	e039      	b.n	800a9e8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	4b1e      	ldr	r3, [pc, #120]	; (800a9f8 <FMC_SDRAM_Timing_Init+0xfc>)
 800a97e:	4013      	ands	r3, r2
 800a980:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	3b01      	subs	r3, #1
 800a988:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	3b01      	subs	r3, #1
 800a990:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a992:	4313      	orrs	r3, r2
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	4313      	orrs	r3, r2
 800a998:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9a6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a9c0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a9ca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	ff0f0fff 	.word	0xff0f0fff

0800a9fc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa14:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aa1e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	695a      	ldr	r2, [r3, #20]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	431a      	orrs	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa64:	b084      	sub	sp, #16
 800aa66:	b480      	push	{r7}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	f107 001c 	add.w	r0, r7, #28
 800aa72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa7e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aa8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685a      	ldr	r2, [r3, #4]
 800aa9a:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <SDMMC_Init+0x54>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	b004      	add	sp, #16
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	ffff8100 	.word	0xffff8100

0800aabc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2203      	movs	r2, #3
 800aae2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800aae4:	2002      	movs	r0, #2
 800aae6:	f7f8 fb1f 	bl	8003128 <HAL_Delay>
  
  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0303 	and.w	r3, r3, #3
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab34:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <SDMMC_SendCommand+0x50>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	fffff000 	.word	0xfffff000

0800ab64 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	b2db      	uxtb	r3, r3
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3314      	adds	r3, #20
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	4413      	add	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
}  
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800abd0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800abd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800abee:	2300      	movs	r3, #0

}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac0a:	2310      	movs	r3, #16
 800ac0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac0e:	2340      	movs	r3, #64	; 0x40
 800ac10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac12:	2300      	movs	r3, #0
 800ac14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff ff74 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2c:	2110      	movs	r1, #16
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fa42 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800ac34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac36:	69fb      	ldr	r3, [r7, #28]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3720      	adds	r7, #32
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac4e:	2311      	movs	r3, #17
 800ac50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac52:	2340      	movs	r3, #64	; 0x40
 800ac54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac56:	2300      	movs	r3, #0
 800ac58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff ff52 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac70:	2111      	movs	r1, #17
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fa20 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800ac78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7a:	69fb      	ldr	r3, [r7, #28]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac92:	2312      	movs	r3, #18
 800ac94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac96:	2340      	movs	r3, #64	; 0x40
 800ac98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca4:	f107 0308 	add.w	r3, r7, #8
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff ff30 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb4:	2112      	movs	r1, #18
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f9fe 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800acbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acbe:	69fb      	ldr	r3, [r7, #28]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3720      	adds	r7, #32
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b088      	sub	sp, #32
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800acd6:	2318      	movs	r3, #24
 800acd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acda:	2340      	movs	r3, #64	; 0x40
 800acdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acde:	2300      	movs	r3, #0
 800ace0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ace2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff ff0e 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf8:	2118      	movs	r1, #24
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9dc 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800ad00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad02:	69fb      	ldr	r3, [r7, #28]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad1a:	2319      	movs	r3, #25
 800ad1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad1e:	2340      	movs	r3, #64	; 0x40
 800ad20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad2c:	f107 0308 	add.w	r3, r7, #8
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff feec 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3c:	2119      	movs	r1, #25
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f9ba 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800ad44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad46:	69fb      	ldr	r3, [r7, #28]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fecb 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ad7a:	4a05      	ldr	r2, [pc, #20]	; (800ad90 <SDMMC_CmdStopTransfer+0x40>)
 800ad7c:	210c      	movs	r1, #12
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f99a 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800ad84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad86:	69fb      	ldr	r3, [r7, #28]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3720      	adds	r7, #32
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	05f5e100 	.word	0x05f5e100

0800ad94 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	; 0x28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ada4:	2307      	movs	r3, #7
 800ada6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adac:	2300      	movs	r3, #0
 800adae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb6:	f107 0310 	add.w	r3, r7, #16
 800adba:	4619      	mov	r1, r3
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff fea7 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800adc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc6:	2107      	movs	r1, #7
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f975 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800adce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800add2:	4618      	mov	r0, r3
 800add4:	3728      	adds	r7, #40	; 0x28
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b088      	sub	sp, #32
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800adea:	2300      	movs	r3, #0
 800adec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf8:	f107 0308 	add.w	r3, r7, #8
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff fe86 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f92f 	bl	800b068 <SDMMC_GetCmdError>
 800ae0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b088      	sub	sp, #32
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae1e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae24:	2308      	movs	r3, #8
 800ae26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae28:	2340      	movs	r3, #64	; 0x40
 800ae2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fe67 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fb18 	bl	800b478 <SDMMC_GetCmdResp7>
 800ae48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3720      	adds	r7, #32
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae62:	2337      	movs	r3, #55	; 0x37
 800ae64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae66:	2340      	movs	r3, #64	; 0x40
 800ae68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae74:	f107 0308 	add.w	r3, r7, #8
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fe48 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ae80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae84:	2137      	movs	r1, #55	; 0x37
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f916 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800ae8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	4b0d      	ldr	r3, [pc, #52]	; (800aedc <SDMMC_CmdAppOperCommand+0x44>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aeaa:	2329      	movs	r3, #41	; 0x29
 800aeac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff fe24 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fa27 	bl	800b31c <SDMMC_GetCmdResp3>
 800aece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed0:	69fb      	ldr	r3, [r7, #28]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3720      	adds	r7, #32
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	80100000 	.word	0x80100000

0800aee0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aeee:	2306      	movs	r3, #6
 800aef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef2:	2340      	movs	r3, #64	; 0x40
 800aef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aefa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aefe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af00:	f107 0308 	add.w	r3, r7, #8
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff fe02 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af10:	2106      	movs	r1, #6
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f8d0 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800af18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af1a:	69fb      	ldr	r3, [r7, #28]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3720      	adds	r7, #32
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af30:	2333      	movs	r3, #51	; 0x33
 800af32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af34:	2340      	movs	r3, #64	; 0x40
 800af36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff fde1 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800af4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af52:	2133      	movs	r1, #51	; 0x33
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f8af 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800af5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af5c:	69fb      	ldr	r3, [r7, #28]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b088      	sub	sp, #32
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800af72:	2302      	movs	r3, #2
 800af74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800af76:	23c0      	movs	r3, #192	; 0xc0
 800af78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af7a:	2300      	movs	r3, #0
 800af7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fdc0 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f97d 	bl	800b290 <SDMMC_GetCmdResp2>
 800af96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af98:	69fb      	ldr	r3, [r7, #28]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b088      	sub	sp, #32
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800afb0:	2309      	movs	r3, #9
 800afb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800afb4:	23c0      	movs	r3, #192	; 0xc0
 800afb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afb8:	2300      	movs	r3, #0
 800afba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afc2:	f107 0308 	add.w	r3, r7, #8
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff fda1 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f95e 	bl	800b290 <SDMMC_GetCmdResp2>
 800afd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd6:	69fb      	ldr	r3, [r7, #28]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3720      	adds	r7, #32
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800afee:	2303      	movs	r3, #3
 800aff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aff2:	2340      	movs	r3, #64	; 0x40
 800aff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800affa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b000:	f107 0308 	add.w	r3, r7, #8
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff fd82 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	2103      	movs	r1, #3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f9bd 	bl	800b390 <SDMMC_GetCmdResp6>
 800b016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b018:	69fb      	ldr	r3, [r7, #28]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3720      	adds	r7, #32
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b088      	sub	sp, #32
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b030:	230d      	movs	r3, #13
 800b032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b034:	2340      	movs	r3, #64	; 0x40
 800b036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b042:	f107 0308 	add.w	r3, r7, #8
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fd61 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b04e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b052:	210d      	movs	r1, #13
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f82f 	bl	800b0b8 <SDMMC_GetCmdResp1>
 800b05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b05c:	69fb      	ldr	r3, [r7, #28]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b068:	b490      	push	{r4, r7}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b070:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <SDMMC_GetCmdError+0x48>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a0f      	ldr	r2, [pc, #60]	; (800b0b4 <SDMMC_GetCmdError+0x4c>)
 800b076:	fba2 2303 	umull	r2, r3, r2, r3
 800b07a:	0a5b      	lsrs	r3, r3, #9
 800b07c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b080:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b084:	4623      	mov	r3, r4
 800b086:	1e5c      	subs	r4, r3, #1
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b08c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b090:	e009      	b.n	800b0a6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0f2      	beq.n	800b084 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	22c5      	movs	r2, #197	; 0xc5
 800b0a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bc90      	pop	{r4, r7}
 800b0ae:	4770      	bx	lr
 800b0b0:	20000018 	.word	0x20000018
 800b0b4:	10624dd3 	.word	0x10624dd3

0800b0b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b0b8:	b590      	push	{r4, r7, lr}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0c6:	4b6f      	ldr	r3, [pc, #444]	; (800b284 <SDMMC_GetCmdResp1+0x1cc>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a6f      	ldr	r2, [pc, #444]	; (800b288 <SDMMC_GetCmdResp1+0x1d0>)
 800b0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d0:	0a5b      	lsrs	r3, r3, #9
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b0d8:	4623      	mov	r3, r4
 800b0da:	1e5c      	subs	r4, r3, #1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d102      	bne.n	800b0e6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0e4:	e0c9      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ea:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0f0      	beq.n	800b0d8 <SDMMC_GetCmdResp1+0x20>
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1eb      	bne.n	800b0d8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d004      	beq.n	800b116 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2204      	movs	r2, #4
 800b110:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b112:	2304      	movs	r3, #4
 800b114:	e0b1      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d004      	beq.n	800b12c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b128:	2301      	movs	r3, #1
 800b12a:	e0a6      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	22c5      	movs	r2, #197	; 0xc5
 800b130:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f7ff fd16 	bl	800ab64 <SDMMC_GetCommandResponse>
 800b138:	4603      	mov	r3, r0
 800b13a:	461a      	mov	r2, r3
 800b13c:	7afb      	ldrb	r3, [r7, #11]
 800b13e:	4293      	cmp	r3, r2
 800b140:	d001      	beq.n	800b146 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b142:	2301      	movs	r3, #1
 800b144:	e099      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b146:	2100      	movs	r1, #0
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f7ff fd18 	bl	800ab7e <SDMMC_GetResponse>
 800b14e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	4b4e      	ldr	r3, [pc, #312]	; (800b28c <SDMMC_GetCmdResp1+0x1d4>)
 800b154:	4013      	ands	r3, r2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e08d      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	da02      	bge.n	800b16a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b168:	e087      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b174:	2340      	movs	r3, #64	; 0x40
 800b176:	e080      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b182:	2380      	movs	r3, #128	; 0x80
 800b184:	e079      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b190:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b194:	e071      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1a4:	e069      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b4:	e061      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b1c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1c4:	e059      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b1d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1d4:	e051      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b1e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1e4:	e049      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b1f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1f4:	e041      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b204:	e039      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b214:	e031      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b220:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b224:	e029      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b230:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b234:	e021      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b244:	e019      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b254:	e011      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b264:	e009      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f003 0308 	and.w	r3, r3, #8
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b270:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b274:	e001      	b.n	800b27a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}
 800b282:	bf00      	nop
 800b284:	20000018 	.word	0x20000018
 800b288:	10624dd3 	.word	0x10624dd3
 800b28c:	fdffe008 	.word	0xfdffe008

0800b290 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b290:	b490      	push	{r4, r7}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b298:	4b1e      	ldr	r3, [pc, #120]	; (800b314 <SDMMC_GetCmdResp2+0x84>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a1e      	ldr	r2, [pc, #120]	; (800b318 <SDMMC_GetCmdResp2+0x88>)
 800b29e:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a2:	0a5b      	lsrs	r3, r3, #9
 800b2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2ac:	4623      	mov	r3, r4
 800b2ae:	1e5c      	subs	r4, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d102      	bne.n	800b2ba <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2b8:	e026      	b.n	800b308 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2be:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0f0      	beq.n	800b2ac <SDMMC_GetCmdResp2+0x1c>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1eb      	bne.n	800b2ac <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d8:	f003 0304 	and.w	r3, r3, #4
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d004      	beq.n	800b2ea <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2204      	movs	r2, #4
 800b2e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2e6:	2304      	movs	r3, #4
 800b2e8:	e00e      	b.n	800b308 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d004      	beq.n	800b300 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e003      	b.n	800b308 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	22c5      	movs	r2, #197	; 0xc5
 800b304:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc90      	pop	{r4, r7}
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	20000018 	.word	0x20000018
 800b318:	10624dd3 	.word	0x10624dd3

0800b31c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b31c:	b490      	push	{r4, r7}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b324:	4b18      	ldr	r3, [pc, #96]	; (800b388 <SDMMC_GetCmdResp3+0x6c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a18      	ldr	r2, [pc, #96]	; (800b38c <SDMMC_GetCmdResp3+0x70>)
 800b32a:	fba2 2303 	umull	r2, r3, r2, r3
 800b32e:	0a5b      	lsrs	r3, r3, #9
 800b330:	f241 3288 	movw	r2, #5000	; 0x1388
 800b334:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b338:	4623      	mov	r3, r4
 800b33a:	1e5c      	subs	r4, r3, #1
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b344:	e01b      	b.n	800b37e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0f0      	beq.n	800b338 <SDMMC_GetCmdResp3+0x1c>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1eb      	bne.n	800b338 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	f003 0304 	and.w	r3, r3, #4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2204      	movs	r2, #4
 800b370:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b372:	2304      	movs	r3, #4
 800b374:	e003      	b.n	800b37e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	22c5      	movs	r2, #197	; 0xc5
 800b37a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bc90      	pop	{r4, r7}
 800b386:	4770      	bx	lr
 800b388:	20000018 	.word	0x20000018
 800b38c:	10624dd3 	.word	0x10624dd3

0800b390 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b390:	b590      	push	{r4, r7, lr}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	460b      	mov	r3, r1
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b39e:	4b34      	ldr	r3, [pc, #208]	; (800b470 <SDMMC_GetCmdResp6+0xe0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a34      	ldr	r2, [pc, #208]	; (800b474 <SDMMC_GetCmdResp6+0xe4>)
 800b3a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a8:	0a5b      	lsrs	r3, r3, #9
 800b3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ae:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b3b2:	4623      	mov	r3, r4
 800b3b4:	1e5c      	subs	r4, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d102      	bne.n	800b3c0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3be:	e052      	b.n	800b466 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0f0      	beq.n	800b3b2 <SDMMC_GetCmdResp6+0x22>
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1eb      	bne.n	800b3b2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3de:	f003 0304 	and.w	r3, r3, #4
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d004      	beq.n	800b3f0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2204      	movs	r2, #4
 800b3ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3ec:	2304      	movs	r3, #4
 800b3ee:	e03a      	b.n	800b466 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2201      	movs	r2, #1
 800b400:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b402:	2301      	movs	r3, #1
 800b404:	e02f      	b.n	800b466 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7ff fbac 	bl	800ab64 <SDMMC_GetCommandResponse>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	4293      	cmp	r3, r2
 800b414:	d001      	beq.n	800b41a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b416:	2301      	movs	r3, #1
 800b418:	e025      	b.n	800b466 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	22c5      	movs	r2, #197	; 0xc5
 800b41e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b420:	2100      	movs	r1, #0
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f7ff fbab 	bl	800ab7e <SDMMC_GetResponse>
 800b428:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	0c1b      	lsrs	r3, r3, #16
 800b438:	b29a      	uxth	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b43e:	2300      	movs	r3, #0
 800b440:	e011      	b.n	800b466 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b44c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b450:	e009      	b.n	800b466 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b45c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b460:	e001      	b.n	800b466 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b466:	4618      	mov	r0, r3
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd90      	pop	{r4, r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000018 	.word	0x20000018
 800b474:	10624dd3 	.word	0x10624dd3

0800b478 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b478:	b490      	push	{r4, r7}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b480:	4b21      	ldr	r3, [pc, #132]	; (800b508 <SDMMC_GetCmdResp7+0x90>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a21      	ldr	r2, [pc, #132]	; (800b50c <SDMMC_GetCmdResp7+0x94>)
 800b486:	fba2 2303 	umull	r2, r3, r2, r3
 800b48a:	0a5b      	lsrs	r3, r3, #9
 800b48c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b490:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b494:	4623      	mov	r3, r4
 800b496:	1e5c      	subs	r4, r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d102      	bne.n	800b4a2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b49c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4a0:	e02c      	b.n	800b4fc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0f0      	beq.n	800b494 <SDMMC_GetCmdResp7+0x1c>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1eb      	bne.n	800b494 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d004      	beq.n	800b4d2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2204      	movs	r2, #4
 800b4cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	e014      	b.n	800b4fc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e009      	b.n	800b4fc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2240      	movs	r2, #64	; 0x40
 800b4f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b4fa:	2300      	movs	r3, #0
  
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bc90      	pop	{r4, r7}
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000018 	.word	0x20000018
 800b50c:	10624dd3 	.word	0x10624dd3

0800b510 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b510:	b580      	push	{r7, lr}
 800b512:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b514:	4904      	ldr	r1, [pc, #16]	; (800b528 <MX_FATFS_Init+0x18>)
 800b516:	4805      	ldr	r0, [pc, #20]	; (800b52c <MX_FATFS_Init+0x1c>)
 800b518:	f000 fa96 	bl	800ba48 <FATFS_LinkDriver>
 800b51c:	4603      	mov	r3, r0
 800b51e:	461a      	mov	r2, r3
 800b520:	4b03      	ldr	r3, [pc, #12]	; (800b530 <MX_FATFS_Init+0x20>)
 800b522:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b524:	bf00      	nop
 800b526:	bd80      	pop	{r7, pc}
 800b528:	2000c6d0 	.word	0x2000c6d0
 800b52c:	080259f4 	.word	0x080259f4
 800b530:	2000c6cc 	.word	0x2000c6cc

0800b534 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b53e:	f000 f87b 	bl	800b638 <BSP_SD_IsDetected>
 800b542:	4603      	mov	r3, r0
 800b544:	2b01      	cmp	r3, #1
 800b546:	d001      	beq.n	800b54c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b548:	2302      	movs	r3, #2
 800b54a:	e012      	b.n	800b572 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b54c:	480b      	ldr	r0, [pc, #44]	; (800b57c <BSP_SD_Init+0x48>)
 800b54e:	f7fc fae9 	bl	8007b24 <HAL_SD_Init>
 800b552:	4603      	mov	r3, r0
 800b554:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d109      	bne.n	800b570 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b55c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b560:	4806      	ldr	r0, [pc, #24]	; (800b57c <BSP_SD_Init+0x48>)
 800b562:	f7fc ff2b 	bl	80083bc <HAL_SD_ConfigWideBusOperation>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b570:	79fb      	ldrb	r3, [r7, #7]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	2000c158 	.word	0x2000c158

0800b580 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	68f9      	ldr	r1, [r7, #12]
 800b596:	4806      	ldr	r0, [pc, #24]	; (800b5b0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b598:	f7fc fb5c 	bl	8007c54 <HAL_SD_ReadBlocks_DMA>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	2000c158 	.word	0x2000c158

0800b5b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	68f9      	ldr	r1, [r7, #12]
 800b5ca:	4806      	ldr	r0, [pc, #24]	; (800b5e4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b5cc:	f7fc fc2e 	bl	8007e2c <HAL_SD_WriteBlocks_DMA>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3718      	adds	r7, #24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	2000c158 	.word	0x2000c158

0800b5e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b5ec:	4805      	ldr	r0, [pc, #20]	; (800b604 <BSP_SD_GetCardState+0x1c>)
 800b5ee:	f7fc ff61 	bl	80084b4 <HAL_SD_GetCardState>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	bf14      	ite	ne
 800b5f8:	2301      	movne	r3, #1
 800b5fa:	2300      	moveq	r3, #0
 800b5fc:	b2db      	uxtb	r3, r3
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	2000c158 	.word	0x2000c158

0800b608 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	4803      	ldr	r0, [pc, #12]	; (800b620 <BSP_SD_GetCardInfo+0x18>)
 800b614:	f7fc fea6 	bl	8008364 <HAL_SD_GetCardInfo>
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	2000c158 	.word	0x2000c158

0800b624 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b62c:	f000 f9b2 	bl	800b994 <BSP_SD_ReadCpltCallback>
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b63e:	2301      	movs	r3, #1
 800b640:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b642:	f000 f80b 	bl	800b65c <BSP_PlatformIsDetected>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b64c:	2300      	movs	r3, #0
 800b64e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	b2db      	uxtb	r3, r3
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b662:	2301      	movs	r3, #1
 800b664:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b66a:	4806      	ldr	r0, [pc, #24]	; (800b684 <BSP_PlatformIsDetected+0x28>)
 800b66c:	f7f9 fe3a 	bl	80052e4 <HAL_GPIO_ReadPin>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b676:	2300      	movs	r3, #0
 800b678:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b67a:	79fb      	ldrb	r3, [r7, #7]
}  
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	40020800 	.word	0x40020800

0800b688 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b690:	f000 fa26 	bl	800bae0 <osKernelSysTick>
 800b694:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b696:	e006      	b.n	800b6a6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b698:	f7ff ffa6 	bl	800b5e8 <BSP_SD_GetCardState>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e009      	b.n	800b6ba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b6a6:	f000 fa1b 	bl	800bae0 <osKernelSysTick>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d8f0      	bhi.n	800b698 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b6b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <SD_CheckStatus+0x38>)
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6d4:	f7ff ff88 	bl	800b5e8 <BSP_SD_GetCardState>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d107      	bne.n	800b6ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b6de:	4b07      	ldr	r3, [pc, #28]	; (800b6fc <SD_CheckStatus+0x38>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	f023 0301 	bic.w	r3, r3, #1
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	4b04      	ldr	r3, [pc, #16]	; (800b6fc <SD_CheckStatus+0x38>)
 800b6ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b6ee:	4b03      	ldr	r3, [pc, #12]	; (800b6fc <SD_CheckStatus+0x38>)
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	b2db      	uxtb	r3, r3
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20000021 	.word	0x20000021

0800b700 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b700:	b590      	push	{r4, r7, lr}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	4603      	mov	r3, r0
 800b708:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800b70a:	4b20      	ldr	r3, [pc, #128]	; (800b78c <SD_initialize+0x8c>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b710:	f000 f9da 	bl	800bac8 <osKernelRunning>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d030      	beq.n	800b77c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b71a:	f7ff ff0b 	bl	800b534 <BSP_SD_Init>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d107      	bne.n	800b734 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	4618      	mov	r0, r3
 800b728:	f7ff ffcc 	bl	800b6c4 <SD_CheckStatus>
 800b72c:	4603      	mov	r3, r0
 800b72e:	461a      	mov	r2, r3
 800b730:	4b16      	ldr	r3, [pc, #88]	; (800b78c <SD_initialize+0x8c>)
 800b732:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b734:	4b15      	ldr	r3, [pc, #84]	; (800b78c <SD_initialize+0x8c>)
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d01e      	beq.n	800b77c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b73e:	4b14      	ldr	r3, [pc, #80]	; (800b790 <SD_initialize+0x90>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10e      	bne.n	800b764 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b746:	4b13      	ldr	r3, [pc, #76]	; (800b794 <SD_initialize+0x94>)
 800b748:	f107 0408 	add.w	r4, r7, #8
 800b74c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b74e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b752:	f107 0308 	add.w	r3, r7, #8
 800b756:	2100      	movs	r1, #0
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 fa31 	bl	800bbc0 <osMessageCreate>
 800b75e:	4602      	mov	r2, r0
 800b760:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <SD_initialize+0x90>)
 800b762:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b764:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <SD_initialize+0x90>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d107      	bne.n	800b77c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b76c:	4b07      	ldr	r3, [pc, #28]	; (800b78c <SD_initialize+0x8c>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	b2db      	uxtb	r3, r3
 800b772:	f043 0301 	orr.w	r3, r3, #1
 800b776:	b2da      	uxtb	r2, r3
 800b778:	4b04      	ldr	r3, [pc, #16]	; (800b78c <SD_initialize+0x8c>)
 800b77a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b77c:	4b03      	ldr	r3, [pc, #12]	; (800b78c <SD_initialize+0x8c>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	b2db      	uxtb	r3, r3
}
 800b782:	4618      	mov	r0, r3
 800b784:	371c      	adds	r7, #28
 800b786:	46bd      	mov	sp, r7
 800b788:	bd90      	pop	{r4, r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20000021 	.word	0x20000021
 800b790:	200003ac 	.word	0x200003ac
 800b794:	080252e0 	.word	0x080252e0

0800b798 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff ff8d 	bl	800b6c4 <SD_CheckStatus>
 800b7aa:	4603      	mov	r3, r0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	; 0x28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	607a      	str	r2, [r7, #4]
 800b7be:	603b      	str	r3, [r7, #0]
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b7ca:	f247 5030 	movw	r0, #30000	; 0x7530
 800b7ce:	f7ff ff5b 	bl	800b688 <SD_CheckStatusWithTimeout>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da02      	bge.n	800b7de <SD_read+0x2a>
  {
    return res;
 800b7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7dc:	e032      	b.n	800b844 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	6879      	ldr	r1, [r7, #4]
 800b7e2:	68b8      	ldr	r0, [r7, #8]
 800b7e4:	f7ff fecc 	bl	800b580 <BSP_SD_ReadBlocks_DMA>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b7ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d124      	bne.n	800b840 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b7f6:	4b15      	ldr	r3, [pc, #84]	; (800b84c <SD_read+0x98>)
 800b7f8:	6819      	ldr	r1, [r3, #0]
 800b7fa:	f107 0314 	add.w	r3, r7, #20
 800b7fe:	f247 5230 	movw	r2, #30000	; 0x7530
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fa46 	bl	800bc94 <osMessageGet>

    if (event.status == osEventMessage)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2b10      	cmp	r3, #16
 800b80c:	d118      	bne.n	800b840 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d115      	bne.n	800b840 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b814:	f000 f964 	bl	800bae0 <osKernelSysTick>
 800b818:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b81a:	e008      	b.n	800b82e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b81c:	f7ff fee4 	bl	800b5e8 <BSP_SD_GetCardState>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d103      	bne.n	800b82e <SD_read+0x7a>
              {
                res = RES_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b82c:	e008      	b.n	800b840 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b82e:	f000 f957 	bl	800bae0 <osKernelSysTick>
 800b832:	4602      	mov	r2, r0
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	f247 522f 	movw	r2, #29999	; 0x752f
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d9ed      	bls.n	800b81c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b844:	4618      	mov	r0, r3
 800b846:	3728      	adds	r7, #40	; 0x28
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	200003ac 	.word	0x200003ac

0800b850 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08a      	sub	sp, #40	; 0x28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b866:	f247 5030 	movw	r0, #30000	; 0x7530
 800b86a:	f7ff ff0d 	bl	800b688 <SD_CheckStatusWithTimeout>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	da02      	bge.n	800b87a <SD_write+0x2a>
  {
    return res;
 800b874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b878:	e02e      	b.n	800b8d8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	68b8      	ldr	r0, [r7, #8]
 800b880:	f7ff fe98 	bl	800b5b4 <BSP_SD_WriteBlocks_DMA>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d124      	bne.n	800b8d4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b88a:	4b15      	ldr	r3, [pc, #84]	; (800b8e0 <SD_write+0x90>)
 800b88c:	6819      	ldr	r1, [r3, #0]
 800b88e:	f107 0314 	add.w	r3, r7, #20
 800b892:	f247 5230 	movw	r2, #30000	; 0x7530
 800b896:	4618      	mov	r0, r3
 800b898:	f000 f9fc 	bl	800bc94 <osMessageGet>

    if (event.status == osEventMessage)
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2b10      	cmp	r3, #16
 800b8a0:	d118      	bne.n	800b8d4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d115      	bne.n	800b8d4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b8a8:	f000 f91a 	bl	800bae0 <osKernelSysTick>
 800b8ac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b8ae:	e008      	b.n	800b8c2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b8b0:	f7ff fe9a 	bl	800b5e8 <BSP_SD_GetCardState>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d103      	bne.n	800b8c2 <SD_write+0x72>
          {
            res = RES_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b8c0:	e008      	b.n	800b8d4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b8c2:	f000 f90d 	bl	800bae0 <osKernelSysTick>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d9ed      	bls.n	800b8b0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3728      	adds	r7, #40	; 0x28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	200003ac 	.word	0x200003ac

0800b8e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08c      	sub	sp, #48	; 0x30
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	603a      	str	r2, [r7, #0]
 800b8ee:	71fb      	strb	r3, [r7, #7]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b8fa:	4b25      	ldr	r3, [pc, #148]	; (800b990 <SD_ioctl+0xac>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <SD_ioctl+0x28>
 800b908:	2303      	movs	r3, #3
 800b90a:	e03c      	b.n	800b986 <SD_ioctl+0xa2>

  switch (cmd)
 800b90c:	79bb      	ldrb	r3, [r7, #6]
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d834      	bhi.n	800b97c <SD_ioctl+0x98>
 800b912:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <SD_ioctl+0x34>)
 800b914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b918:	0800b929 	.word	0x0800b929
 800b91c:	0800b931 	.word	0x0800b931
 800b920:	0800b949 	.word	0x0800b949
 800b924:	0800b963 	.word	0x0800b963
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b92e:	e028      	b.n	800b982 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b930:	f107 030c 	add.w	r3, r7, #12
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff fe67 	bl	800b608 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b946:	e01c      	b.n	800b982 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b948:	f107 030c 	add.w	r3, r7, #12
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7ff fe5b 	bl	800b608 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	b29a      	uxth	r2, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b960:	e00f      	b.n	800b982 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fe4e 	bl	800b608 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	0a5a      	lsrs	r2, r3, #9
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b97a:	e002      	b.n	800b982 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b97c:	2304      	movs	r3, #4
 800b97e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b986:	4618      	mov	r0, r3
 800b988:	3730      	adds	r7, #48	; 0x30
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20000021 	.word	0x20000021

0800b994 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <BSP_SD_ReadCpltCallback+0x18>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2200      	movs	r2, #0
 800b99e:	2101      	movs	r1, #1
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 f937 	bl	800bc14 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b9a6:	bf00      	nop
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	200003ac 	.word	0x200003ac

0800b9b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9c6:	4b1f      	ldr	r3, [pc, #124]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800b9c8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d131      	bne.n	800ba34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9d0:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800b9d2:	7a5b      	ldrb	r3, [r3, #9]
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800b9da:	2100      	movs	r1, #0
 800b9dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9de:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800b9e0:	7a5b      	ldrb	r3, [r3, #9]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	4a17      	ldr	r2, [pc, #92]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9ee:	4b15      	ldr	r3, [pc, #84]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800b9f0:	7a5b      	ldrb	r3, [r3, #9]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800b9f8:	4413      	add	r3, r2
 800b9fa:	79fa      	ldrb	r2, [r7, #7]
 800b9fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9fe:	4b11      	ldr	r3, [pc, #68]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800ba00:	7a5b      	ldrb	r3, [r3, #9]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	b2d1      	uxtb	r1, r2
 800ba08:	4a0e      	ldr	r2, [pc, #56]	; (800ba44 <FATFS_LinkDriverEx+0x94>)
 800ba0a:	7251      	strb	r1, [r2, #9]
 800ba0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba0e:	7dbb      	ldrb	r3, [r7, #22]
 800ba10:	3330      	adds	r3, #48	; 0x30
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	223a      	movs	r2, #58	; 0x3a
 800ba1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	3302      	adds	r3, #2
 800ba24:	222f      	movs	r2, #47	; 0x2f
 800ba26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	3303      	adds	r3, #3
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	371c      	adds	r7, #28
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	200003b0 	.word	0x200003b0

0800ba48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba52:	2200      	movs	r2, #0
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff ffaa 	bl	800b9b0 <FATFS_LinkDriverEx>
 800ba5c:	4603      	mov	r3, r0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b085      	sub	sp, #20
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ba74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba78:	2b84      	cmp	r3, #132	; 0x84
 800ba7a:	d005      	beq.n	800ba88 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ba7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	3303      	adds	r3, #3
 800ba86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ba88:	68fb      	ldr	r3, [r7, #12]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba9c:	f3ef 8305 	mrs	r3, IPSR
 800baa0:	607b      	str	r3, [r7, #4]
  return(result);
 800baa2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	bf14      	ite	ne
 800baa8:	2301      	movne	r3, #1
 800baaa:	2300      	moveq	r3, #0
 800baac:	b2db      	uxtb	r3, r3
}
 800baae:	4618      	mov	r0, r3
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800babe:	f001 faff 	bl	800d0c0 <vTaskStartScheduler>
  
  return osOK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bacc:	f001 ff4a 	bl	800d964 <xTaskGetSchedulerState>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d101      	bne.n	800bada <osKernelRunning+0x12>
    return 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e000      	b.n	800badc <osKernelRunning+0x14>
  else
    return 1;
 800bada:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800badc:	4618      	mov	r0, r3
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bae4:	f7ff ffd7 	bl	800ba96 <inHandlerMode>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800baee:	f001 fc05 	bl	800d2fc <xTaskGetTickCountFromISR>
 800baf2:	4603      	mov	r3, r0
 800baf4:	e002      	b.n	800bafc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800baf6:	f001 fbf1 	bl	800d2dc <xTaskGetTickCount>
 800bafa:	4603      	mov	r3, r0
  }
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb02:	b089      	sub	sp, #36	; 0x24
 800bb04:	af04      	add	r7, sp, #16
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d020      	beq.n	800bb54 <osThreadCreate+0x54>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d01c      	beq.n	800bb54 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685c      	ldr	r4, [r3, #4]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681d      	ldr	r5, [r3, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691e      	ldr	r6, [r3, #16]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff ff9a 	bl	800ba66 <makeFreeRtosPriority>
 800bb32:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	695b      	ldr	r3, [r3, #20]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb3c:	9202      	str	r2, [sp, #8]
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	9100      	str	r1, [sp, #0]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	4632      	mov	r2, r6
 800bb46:	4629      	mov	r1, r5
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f001 f8e0 	bl	800cd0e <xTaskCreateStatic>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	e01c      	b.n	800bb8e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685c      	ldr	r4, [r3, #4]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb60:	b29e      	uxth	r6, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff ff7c 	bl	800ba66 <makeFreeRtosPriority>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	f107 030c 	add.w	r3, r7, #12
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	9200      	str	r2, [sp, #0]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	4632      	mov	r2, r6
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f001 f925 	bl	800cdce <xTaskCreate>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d001      	beq.n	800bb8e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e000      	b.n	800bb90 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb98 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <osDelay+0x16>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	e000      	b.n	800bbb0 <osDelay+0x18>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f001 fa4f 	bl	800d054 <vTaskDelay>
  
  return osOK;
 800bbb6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bbc0:	b590      	push	{r4, r7, lr}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af02      	add	r7, sp, #8
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d012      	beq.n	800bbf8 <osMessageCreate+0x38>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00e      	beq.n	800bbf8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6859      	ldr	r1, [r3, #4]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	689a      	ldr	r2, [r3, #8]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68dc      	ldr	r4, [r3, #12]
 800bbea:	2300      	movs	r3, #0
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	4623      	mov	r3, r4
 800bbf0:	f000 f9e2 	bl	800bfb8 <xQueueGenericCreateStatic>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	e008      	b.n	800bc0a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	4619      	mov	r1, r3
 800bc04:	f000 fa55 	bl	800c0b2 <xQueueGenericCreate>
 800bc08:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd90      	pop	{r4, r7, pc}
	...

0800bc14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bc20:	2300      	movs	r3, #0
 800bc22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <osMessagePut+0x1e>
    ticks = 1;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bc32:	f7ff ff30 	bl	800ba96 <inHandlerMode>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d018      	beq.n	800bc6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bc3c:	f107 0210 	add.w	r2, r7, #16
 800bc40:	f107 0108 	add.w	r1, r7, #8
 800bc44:	2300      	movs	r3, #0
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f000 fb96 	bl	800c378 <xQueueGenericSendFromISR>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d001      	beq.n	800bc56 <osMessagePut+0x42>
      return osErrorOS;
 800bc52:	23ff      	movs	r3, #255	; 0xff
 800bc54:	e018      	b.n	800bc88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d014      	beq.n	800bc86 <osMessagePut+0x72>
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <osMessagePut+0x7c>)
 800bc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	e00b      	b.n	800bc86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bc6e:	f107 0108 	add.w	r1, r7, #8
 800bc72:	2300      	movs	r3, #0
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 fa7c 	bl	800c174 <xQueueGenericSend>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d001      	beq.n	800bc86 <osMessagePut+0x72>
      return osErrorOS;
 800bc82:	23ff      	movs	r3, #255	; 0xff
 800bc84:	e000      	b.n	800bc88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	e000ed04 	.word	0xe000ed04

0800bc94 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bc94:	b590      	push	{r4, r7, lr}
 800bc96:	b08b      	sub	sp, #44	; 0x2c
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bcae:	2380      	movs	r3, #128	; 0x80
 800bcb0:	617b      	str	r3, [r7, #20]
    return event;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	461c      	mov	r4, r3
 800bcb6:	f107 0314 	add.w	r3, r7, #20
 800bcba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bcbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bcc2:	e054      	b.n	800bd6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd2:	d103      	bne.n	800bcdc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bcd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcda:	e009      	b.n	800bcf0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d006      	beq.n	800bcf0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <osMessageGet+0x5c>
      ticks = 1;
 800bcec:	2301      	movs	r3, #1
 800bcee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bcf0:	f7ff fed1 	bl	800ba96 <inHandlerMode>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d01c      	beq.n	800bd34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bcfa:	f107 0220 	add.w	r2, r7, #32
 800bcfe:	f107 0314 	add.w	r3, r7, #20
 800bd02:	3304      	adds	r3, #4
 800bd04:	4619      	mov	r1, r3
 800bd06:	68b8      	ldr	r0, [r7, #8]
 800bd08:	f000 fe56 	bl	800c9b8 <xQueueReceiveFromISR>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d102      	bne.n	800bd18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bd12:	2310      	movs	r3, #16
 800bd14:	617b      	str	r3, [r7, #20]
 800bd16:	e001      	b.n	800bd1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d01d      	beq.n	800bd5e <osMessageGet+0xca>
 800bd22:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <osMessageGet+0xe4>)
 800bd24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	e014      	b.n	800bd5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bd34:	f107 0314 	add.w	r3, r7, #20
 800bd38:	3304      	adds	r3, #4
 800bd3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	68b8      	ldr	r0, [r7, #8]
 800bd40:	f000 fc48 	bl	800c5d4 <xQueueReceive>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d102      	bne.n	800bd50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bd4a:	2310      	movs	r3, #16
 800bd4c:	617b      	str	r3, [r7, #20]
 800bd4e:	e006      	b.n	800bd5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <osMessageGet+0xc6>
 800bd56:	2300      	movs	r3, #0
 800bd58:	e000      	b.n	800bd5c <osMessageGet+0xc8>
 800bd5a:	2340      	movs	r3, #64	; 0x40
 800bd5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	461c      	mov	r4, r3
 800bd62:	f107 0314 	add.w	r3, r7, #20
 800bd66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	372c      	adds	r7, #44	; 0x2c
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd90      	pop	{r4, r7, pc}
 800bd76:	bf00      	nop
 800bd78:	e000ed04 	.word	0xe000ed04

0800bd7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f103 0208 	add.w	r2, r3, #8
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295
 800bd94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f103 0208 	add.w	r2, r3, #8
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f103 0208 	add.w	r2, r3, #8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bdca:	bf00      	nop
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b085      	sub	sp, #20
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	601a      	str	r2, [r3, #0]
}
 800be12:	bf00      	nop
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be1e:	b480      	push	{r7}
 800be20:	b085      	sub	sp, #20
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be34:	d103      	bne.n	800be3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	60fb      	str	r3, [r7, #12]
 800be3c:	e00c      	b.n	800be58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	3308      	adds	r3, #8
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	e002      	b.n	800be4c <vListInsert+0x2e>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	429a      	cmp	r2, r3
 800be56:	d2f6      	bcs.n	800be46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	601a      	str	r2, [r3, #0]
}
 800be84:	bf00      	nop
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	6892      	ldr	r2, [r2, #8]
 800bea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	6852      	ldr	r2, [r2, #4]
 800beb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d103      	bne.n	800bec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	1e5a      	subs	r2, r3, #1
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10b      	bne.n	800bf10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	b672      	cpsid	i
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	b662      	cpsie	i
 800bf0c:	60bb      	str	r3, [r7, #8]
 800bf0e:	e7fe      	b.n	800bf0e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800bf10:	f002 f86a 	bl	800dfe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1c:	68f9      	ldr	r1, [r7, #12]
 800bf1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf20:	fb01 f303 	mul.w	r3, r1, r3
 800bf24:	441a      	add	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf40:	3b01      	subs	r3, #1
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf46:	fb01 f303 	mul.w	r3, r1, r3
 800bf4a:	441a      	add	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	22ff      	movs	r2, #255	; 0xff
 800bf54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	22ff      	movs	r2, #255	; 0xff
 800bf5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d114      	bne.n	800bf90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d01a      	beq.n	800bfa4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	3310      	adds	r3, #16
 800bf72:	4618      	mov	r0, r3
 800bf74:	f001 fb36 	bl	800d5e4 <xTaskRemoveFromEventList>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d012      	beq.n	800bfa4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <xQueueGenericReset+0xd0>)
 800bf80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	e009      	b.n	800bfa4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	3310      	adds	r3, #16
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff fef1 	bl	800bd7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3324      	adds	r3, #36	; 0x24
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff feec 	bl	800bd7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bfa4:	f002 f852 	bl	800e04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bfa8:	2301      	movs	r3, #1
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08e      	sub	sp, #56	; 0x38
 800bfbc:	af02      	add	r7, sp, #8
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10b      	bne.n	800bfe4 <xQueueGenericCreateStatic+0x2c>
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	b672      	cpsid	i
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	b662      	cpsie	i
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfe2:	e7fe      	b.n	800bfe2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10b      	bne.n	800c002 <xQueueGenericCreateStatic+0x4a>
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	b672      	cpsid	i
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	b662      	cpsie	i
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
 800c000:	e7fe      	b.n	800c000 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <xQueueGenericCreateStatic+0x56>
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <xQueueGenericCreateStatic+0x5a>
 800c00e:	2301      	movs	r3, #1
 800c010:	e000      	b.n	800c014 <xQueueGenericCreateStatic+0x5c>
 800c012:	2300      	movs	r3, #0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10b      	bne.n	800c030 <xQueueGenericCreateStatic+0x78>
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	b672      	cpsid	i
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	b662      	cpsie	i
 800c02c:	623b      	str	r3, [r7, #32]
 800c02e:	e7fe      	b.n	800c02e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d102      	bne.n	800c03c <xQueueGenericCreateStatic+0x84>
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <xQueueGenericCreateStatic+0x88>
 800c03c:	2301      	movs	r3, #1
 800c03e:	e000      	b.n	800c042 <xQueueGenericCreateStatic+0x8a>
 800c040:	2300      	movs	r3, #0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10b      	bne.n	800c05e <xQueueGenericCreateStatic+0xa6>
 800c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04a:	b672      	cpsid	i
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	b662      	cpsie	i
 800c05a:	61fb      	str	r3, [r7, #28]
 800c05c:	e7fe      	b.n	800c05c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c05e:	2348      	movs	r3, #72	; 0x48
 800c060:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b48      	cmp	r3, #72	; 0x48
 800c066:	d00b      	beq.n	800c080 <xQueueGenericCreateStatic+0xc8>
 800c068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06c:	b672      	cpsid	i
 800c06e:	f383 8811 	msr	BASEPRI, r3
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	b662      	cpsie	i
 800c07c:	61bb      	str	r3, [r7, #24]
 800c07e:	e7fe      	b.n	800c07e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c080:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00d      	beq.n	800c0a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c094:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	4613      	mov	r3, r2
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 f846 	bl	800c134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3730      	adds	r7, #48	; 0x30
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b08a      	sub	sp, #40	; 0x28
 800c0b6:	af02      	add	r7, sp, #8
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10b      	bne.n	800c0de <xQueueGenericCreate+0x2c>
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	b672      	cpsid	i
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	b662      	cpsie	i
 800c0da:	613b      	str	r3, [r7, #16]
 800c0dc:	e7fe      	b.n	800c0dc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d102      	bne.n	800c0ea <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61fb      	str	r3, [r7, #28]
 800c0e8:	e004      	b.n	800c0f4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	fb02 f303 	mul.w	r3, r2, r3
 800c0f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	3348      	adds	r3, #72	; 0x48
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f002 f897 	bl	800e22c <pvPortMalloc>
 800c0fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d011      	beq.n	800c12a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	3348      	adds	r3, #72	; 0x48
 800c10e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c118:	79fa      	ldrb	r2, [r7, #7]
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	4613      	mov	r3, r2
 800c120:	697a      	ldr	r2, [r7, #20]
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f805 	bl	800c134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c12a:	69bb      	ldr	r3, [r7, #24]
	}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3720      	adds	r7, #32
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	e002      	b.n	800c156 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c162:	2101      	movs	r1, #1
 800c164:	69b8      	ldr	r0, [r7, #24]
 800c166:	f7ff febd 	bl	800bee4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c16a:	bf00      	nop
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08e      	sub	sp, #56	; 0x38
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
 800c180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c182:	2300      	movs	r3, #0
 800c184:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10b      	bne.n	800c1a8 <xQueueGenericSend+0x34>
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	b672      	cpsid	i
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	b662      	cpsie	i
 800c1a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1a6:	e7fe      	b.n	800c1a6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d103      	bne.n	800c1b6 <xQueueGenericSend+0x42>
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <xQueueGenericSend+0x46>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e000      	b.n	800c1bc <xQueueGenericSend+0x48>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10b      	bne.n	800c1d8 <xQueueGenericSend+0x64>
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	b672      	cpsid	i
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	b662      	cpsie	i
 800c1d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1d6:	e7fe      	b.n	800c1d6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d103      	bne.n	800c1e6 <xQueueGenericSend+0x72>
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d101      	bne.n	800c1ea <xQueueGenericSend+0x76>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e000      	b.n	800c1ec <xQueueGenericSend+0x78>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10b      	bne.n	800c208 <xQueueGenericSend+0x94>
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	b672      	cpsid	i
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	b662      	cpsie	i
 800c204:	623b      	str	r3, [r7, #32]
 800c206:	e7fe      	b.n	800c206 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c208:	f001 fbac 	bl	800d964 <xTaskGetSchedulerState>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d102      	bne.n	800c218 <xQueueGenericSend+0xa4>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d101      	bne.n	800c21c <xQueueGenericSend+0xa8>
 800c218:	2301      	movs	r3, #1
 800c21a:	e000      	b.n	800c21e <xQueueGenericSend+0xaa>
 800c21c:	2300      	movs	r3, #0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10b      	bne.n	800c23a <xQueueGenericSend+0xc6>
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	b672      	cpsid	i
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	b662      	cpsie	i
 800c236:	61fb      	str	r3, [r7, #28]
 800c238:	e7fe      	b.n	800c238 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c23a:	f001 fed5 	bl	800dfe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c246:	429a      	cmp	r2, r3
 800c248:	d302      	bcc.n	800c250 <xQueueGenericSend+0xdc>
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d129      	bne.n	800c2a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c256:	f000 fc4a 	bl	800caee <prvCopyDataToQueue>
 800c25a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	2b00      	cmp	r3, #0
 800c262:	d010      	beq.n	800c286 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	3324      	adds	r3, #36	; 0x24
 800c268:	4618      	mov	r0, r3
 800c26a:	f001 f9bb 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d013      	beq.n	800c29c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c274:	4b3f      	ldr	r3, [pc, #252]	; (800c374 <xQueueGenericSend+0x200>)
 800c276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	e00a      	b.n	800c29c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d007      	beq.n	800c29c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c28c:	4b39      	ldr	r3, [pc, #228]	; (800c374 <xQueueGenericSend+0x200>)
 800c28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c29c:	f001 fed6 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e063      	b.n	800c36c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d103      	bne.n	800c2b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2aa:	f001 fecf 	bl	800e04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e05c      	b.n	800c36c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d106      	bne.n	800c2c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2b8:	f107 0314 	add.w	r3, r7, #20
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f001 f9f5 	bl	800d6ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2c6:	f001 fec1 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2ca:	f000 ff5b 	bl	800d184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2ce:	f001 fe8b 	bl	800dfe8 <vPortEnterCritical>
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2d8:	b25b      	sxtb	r3, r3
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d103      	bne.n	800c2e8 <xQueueGenericSend+0x174>
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ee:	b25b      	sxtb	r3, r3
 800c2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f4:	d103      	bne.n	800c2fe <xQueueGenericSend+0x18a>
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2fe:	f001 fea5 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c302:	1d3a      	adds	r2, r7, #4
 800c304:	f107 0314 	add.w	r3, r7, #20
 800c308:	4611      	mov	r1, r2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f001 f9e4 	bl	800d6d8 <xTaskCheckForTimeOut>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d124      	bne.n	800c360 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c318:	f000 fce1 	bl	800ccde <prvIsQueueFull>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d018      	beq.n	800c354 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	3310      	adds	r3, #16
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	4611      	mov	r1, r2
 800c32a:	4618      	mov	r0, r3
 800c32c:	f001 f934 	bl	800d598 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c332:	f000 fc6c 	bl	800cc0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c336:	f000 ff33 	bl	800d1a0 <xTaskResumeAll>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f47f af7c 	bne.w	800c23a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c342:	4b0c      	ldr	r3, [pc, #48]	; (800c374 <xQueueGenericSend+0x200>)
 800c344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	e772      	b.n	800c23a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c356:	f000 fc5a 	bl	800cc0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c35a:	f000 ff21 	bl	800d1a0 <xTaskResumeAll>
 800c35e:	e76c      	b.n	800c23a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c362:	f000 fc54 	bl	800cc0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c366:	f000 ff1b 	bl	800d1a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c36a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3738      	adds	r7, #56	; 0x38
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	e000ed04 	.word	0xe000ed04

0800c378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08e      	sub	sp, #56	; 0x38
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10b      	bne.n	800c3a8 <xQueueGenericSendFromISR+0x30>
 800c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c394:	b672      	cpsid	i
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	b662      	cpsie	i
 800c3a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c3a6:	e7fe      	b.n	800c3a6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d103      	bne.n	800c3b6 <xQueueGenericSendFromISR+0x3e>
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <xQueueGenericSendFromISR+0x42>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e000      	b.n	800c3bc <xQueueGenericSendFromISR+0x44>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10b      	bne.n	800c3d8 <xQueueGenericSendFromISR+0x60>
 800c3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c4:	b672      	cpsid	i
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	b662      	cpsie	i
 800c3d4:	623b      	str	r3, [r7, #32]
 800c3d6:	e7fe      	b.n	800c3d6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d103      	bne.n	800c3e6 <xQueueGenericSendFromISR+0x6e>
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d101      	bne.n	800c3ea <xQueueGenericSendFromISR+0x72>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e000      	b.n	800c3ec <xQueueGenericSendFromISR+0x74>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10b      	bne.n	800c408 <xQueueGenericSendFromISR+0x90>
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	b672      	cpsid	i
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	b662      	cpsie	i
 800c404:	61fb      	str	r3, [r7, #28]
 800c406:	e7fe      	b.n	800c406 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c408:	f001 fece 	bl	800e1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c40c:	f3ef 8211 	mrs	r2, BASEPRI
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	b672      	cpsid	i
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	b662      	cpsie	i
 800c424:	61ba      	str	r2, [r7, #24]
 800c426:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c428:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c42a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c434:	429a      	cmp	r2, r3
 800c436:	d302      	bcc.n	800c43e <xQueueGenericSendFromISR+0xc6>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d12c      	bne.n	800c498 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	68b9      	ldr	r1, [r7, #8]
 800c44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c44e:	f000 fb4e 	bl	800caee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c452:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45a:	d112      	bne.n	800c482 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	d016      	beq.n	800c492 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	3324      	adds	r3, #36	; 0x24
 800c468:	4618      	mov	r0, r3
 800c46a:	f001 f8bb 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00e      	beq.n	800c492 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00b      	beq.n	800c492 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	e007      	b.n	800c492 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c486:	3301      	adds	r3, #1
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	b25a      	sxtb	r2, r3
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c492:	2301      	movs	r3, #1
 800c494:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c496:	e001      	b.n	800c49c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	637b      	str	r3, [r7, #52]	; 0x34
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3738      	adds	r7, #56	; 0x38
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b08e      	sub	sp, #56	; 0x38
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10b      	bne.n	800c4dc <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c8:	b672      	cpsid	i
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	b662      	cpsie	i
 800c4d8:	623b      	str	r3, [r7, #32]
 800c4da:	e7fe      	b.n	800c4da <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <xQueueGiveFromISR+0x4c>
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	b672      	cpsid	i
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	b662      	cpsie	i
 800c4f8:	61fb      	str	r3, [r7, #28]
 800c4fa:	e7fe      	b.n	800c4fa <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d103      	bne.n	800c50c <xQueueGiveFromISR+0x5c>
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <xQueueGiveFromISR+0x60>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e000      	b.n	800c512 <xQueueGiveFromISR+0x62>
 800c510:	2300      	movs	r3, #0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10b      	bne.n	800c52e <xQueueGiveFromISR+0x7e>
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	b672      	cpsid	i
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	b662      	cpsie	i
 800c52a:	61bb      	str	r3, [r7, #24]
 800c52c:	e7fe      	b.n	800c52c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c52e:	f001 fe3b 	bl	800e1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800c532:	f3ef 8211 	mrs	r2, BASEPRI
 800c536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53a:	b672      	cpsid	i
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	b662      	cpsie	i
 800c54a:	617a      	str	r2, [r7, #20]
 800c54c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c54e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c55e:	429a      	cmp	r2, r3
 800c560:	d22b      	bcs.n	800c5ba <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c574:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57c:	d112      	bne.n	800c5a4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d016      	beq.n	800c5b4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	4618      	mov	r0, r3
 800c58c:	f001 f82a 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00e      	beq.n	800c5b4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	e007      	b.n	800c5b4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	b25a      	sxtb	r2, r3
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b8:	e001      	b.n	800c5be <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3738      	adds	r7, #56	; 0x38
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08c      	sub	sp, #48	; 0x30
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10b      	bne.n	800c606 <xQueueReceive+0x32>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f2:	b672      	cpsid	i
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	b662      	cpsie	i
 800c602:	623b      	str	r3, [r7, #32]
 800c604:	e7fe      	b.n	800c604 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d103      	bne.n	800c614 <xQueueReceive+0x40>
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <xQueueReceive+0x44>
 800c614:	2301      	movs	r3, #1
 800c616:	e000      	b.n	800c61a <xQueueReceive+0x46>
 800c618:	2300      	movs	r3, #0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10b      	bne.n	800c636 <xQueueReceive+0x62>
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	b672      	cpsid	i
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	b662      	cpsie	i
 800c632:	61fb      	str	r3, [r7, #28]
 800c634:	e7fe      	b.n	800c634 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c636:	f001 f995 	bl	800d964 <xTaskGetSchedulerState>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <xQueueReceive+0x72>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <xQueueReceive+0x76>
 800c646:	2301      	movs	r3, #1
 800c648:	e000      	b.n	800c64c <xQueueReceive+0x78>
 800c64a:	2300      	movs	r3, #0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10b      	bne.n	800c668 <xQueueReceive+0x94>
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	b672      	cpsid	i
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	b662      	cpsie	i
 800c664:	61bb      	str	r3, [r7, #24]
 800c666:	e7fe      	b.n	800c666 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c668:	f001 fcbe 	bl	800dfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c674:	2b00      	cmp	r3, #0
 800c676:	d01f      	beq.n	800c6b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c67c:	f000 faa1 	bl	800cbc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c682:	1e5a      	subs	r2, r3, #1
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00f      	beq.n	800c6b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	3310      	adds	r3, #16
 800c694:	4618      	mov	r0, r3
 800c696:	f000 ffa5 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d007      	beq.n	800c6b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6a0:	4b3c      	ldr	r3, [pc, #240]	; (800c794 <xQueueReceive+0x1c0>)
 800c6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6b0:	f001 fccc 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e069      	b.n	800c78c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d103      	bne.n	800c6c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6be:	f001 fcc5 	bl	800e04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e062      	b.n	800c78c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d106      	bne.n	800c6da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6cc:	f107 0310 	add.w	r3, r7, #16
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 ffeb 	bl	800d6ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6da:	f001 fcb7 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6de:	f000 fd51 	bl	800d184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6e2:	f001 fc81 	bl	800dfe8 <vPortEnterCritical>
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ec:	b25b      	sxtb	r3, r3
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f2:	d103      	bne.n	800c6fc <xQueueReceive+0x128>
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c702:	b25b      	sxtb	r3, r3
 800c704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c708:	d103      	bne.n	800c712 <xQueueReceive+0x13e>
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	2200      	movs	r2, #0
 800c70e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c712:	f001 fc9b 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c716:	1d3a      	adds	r2, r7, #4
 800c718:	f107 0310 	add.w	r3, r7, #16
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 ffda 	bl	800d6d8 <xTaskCheckForTimeOut>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d123      	bne.n	800c772 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c72c:	f000 fac1 	bl	800ccb2 <prvIsQueueEmpty>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d017      	beq.n	800c766 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c738:	3324      	adds	r3, #36	; 0x24
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	4611      	mov	r1, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 ff2a 	bl	800d598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c746:	f000 fa62 	bl	800cc0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c74a:	f000 fd29 	bl	800d1a0 <xTaskResumeAll>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d189      	bne.n	800c668 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c754:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <xQueueReceive+0x1c0>)
 800c756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	e780      	b.n	800c668 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c768:	f000 fa51 	bl	800cc0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c76c:	f000 fd18 	bl	800d1a0 <xTaskResumeAll>
 800c770:	e77a      	b.n	800c668 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c774:	f000 fa4b 	bl	800cc0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c778:	f000 fd12 	bl	800d1a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c77e:	f000 fa98 	bl	800ccb2 <prvIsQueueEmpty>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	f43f af6f 	beq.w	800c668 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c78a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3730      	adds	r7, #48	; 0x30
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	e000ed04 	.word	0xe000ed04

0800c798 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08e      	sub	sp, #56	; 0x38
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10b      	bne.n	800c7cc <xQueueSemaphoreTake+0x34>
 800c7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b8:	b672      	cpsid	i
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	b662      	cpsie	i
 800c7c8:	623b      	str	r3, [r7, #32]
 800c7ca:	e7fe      	b.n	800c7ca <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <xQueueSemaphoreTake+0x54>
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	b672      	cpsid	i
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	b662      	cpsie	i
 800c7e8:	61fb      	str	r3, [r7, #28]
 800c7ea:	e7fe      	b.n	800c7ea <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7ec:	f001 f8ba 	bl	800d964 <xTaskGetSchedulerState>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d102      	bne.n	800c7fc <xQueueSemaphoreTake+0x64>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <xQueueSemaphoreTake+0x68>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e000      	b.n	800c802 <xQueueSemaphoreTake+0x6a>
 800c800:	2300      	movs	r3, #0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d10b      	bne.n	800c81e <xQueueSemaphoreTake+0x86>
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	b672      	cpsid	i
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	b662      	cpsie	i
 800c81a:	61bb      	str	r3, [r7, #24]
 800c81c:	e7fe      	b.n	800c81c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c81e:	f001 fbe3 	bl	800dfe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c826:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d024      	beq.n	800c878 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	1e5a      	subs	r2, r3, #1
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d104      	bne.n	800c848 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c83e:	f001 fa53 	bl	800dce8 <pvTaskIncrementMutexHeldCount>
 800c842:	4602      	mov	r2, r0
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00f      	beq.n	800c870 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	3310      	adds	r3, #16
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fec5 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d007      	beq.n	800c870 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c860:	4b54      	ldr	r3, [pc, #336]	; (800c9b4 <xQueueSemaphoreTake+0x21c>)
 800c862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c870:	f001 fbec 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800c874:	2301      	movs	r3, #1
 800c876:	e098      	b.n	800c9aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d112      	bne.n	800c8a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00b      	beq.n	800c89c <xQueueSemaphoreTake+0x104>
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	b672      	cpsid	i
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	b662      	cpsie	i
 800c898:	617b      	str	r3, [r7, #20]
 800c89a:	e7fe      	b.n	800c89a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c89c:	f001 fbd6 	bl	800e04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e082      	b.n	800c9aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8aa:	f107 030c 	add.w	r3, r7, #12
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 fefc 	bl	800d6ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8b8:	f001 fbc8 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8bc:	f000 fc62 	bl	800d184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8c0:	f001 fb92 	bl	800dfe8 <vPortEnterCritical>
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8ca:	b25b      	sxtb	r3, r3
 800c8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d0:	d103      	bne.n	800c8da <xQueueSemaphoreTake+0x142>
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8e0:	b25b      	sxtb	r3, r3
 800c8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e6:	d103      	bne.n	800c8f0 <xQueueSemaphoreTake+0x158>
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8f0:	f001 fbac 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8f4:	463a      	mov	r2, r7
 800c8f6:	f107 030c 	add.w	r3, r7, #12
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 feeb 	bl	800d6d8 <xTaskCheckForTimeOut>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d132      	bne.n	800c96e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c90a:	f000 f9d2 	bl	800ccb2 <prvIsQueueEmpty>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d026      	beq.n	800c962 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d109      	bne.n	800c930 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c91c:	f001 fb64 	bl	800dfe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	4618      	mov	r0, r3
 800c926:	f001 f83b 	bl	800d9a0 <xTaskPriorityInherit>
 800c92a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c92c:	f001 fb8e 	bl	800e04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c932:	3324      	adds	r3, #36	; 0x24
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	4611      	mov	r1, r2
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 fe2d 	bl	800d598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c93e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c940:	f000 f965 	bl	800cc0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c944:	f000 fc2c 	bl	800d1a0 <xTaskResumeAll>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f47f af67 	bne.w	800c81e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c950:	4b18      	ldr	r3, [pc, #96]	; (800c9b4 <xQueueSemaphoreTake+0x21c>)
 800c952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c956:	601a      	str	r2, [r3, #0]
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	e75d      	b.n	800c81e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c964:	f000 f953 	bl	800cc0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c968:	f000 fc1a 	bl	800d1a0 <xTaskResumeAll>
 800c96c:	e757      	b.n	800c81e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c96e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c970:	f000 f94d 	bl	800cc0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c974:	f000 fc14 	bl	800d1a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c97a:	f000 f99a 	bl	800ccb2 <prvIsQueueEmpty>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	f43f af4c 	beq.w	800c81e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00d      	beq.n	800c9a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c98c:	f001 fb2c 	bl	800dfe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c992:	f000 f894 	bl	800cabe <prvGetDisinheritPriorityAfterTimeout>
 800c996:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f001 f906 	bl	800dbb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c9a4:	f001 fb52 	bl	800e04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3738      	adds	r7, #56	; 0x38
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	e000ed04 	.word	0xe000ed04

0800c9b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08e      	sub	sp, #56	; 0x38
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10b      	bne.n	800c9e6 <xQueueReceiveFromISR+0x2e>
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	b672      	cpsid	i
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	b662      	cpsie	i
 800c9e2:	623b      	str	r3, [r7, #32]
 800c9e4:	e7fe      	b.n	800c9e4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <xQueueReceiveFromISR+0x3c>
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <xQueueReceiveFromISR+0x40>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e000      	b.n	800c9fa <xQueueReceiveFromISR+0x42>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10b      	bne.n	800ca16 <xQueueReceiveFromISR+0x5e>
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	b672      	cpsid	i
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	b662      	cpsie	i
 800ca12:	61fb      	str	r3, [r7, #28]
 800ca14:	e7fe      	b.n	800ca14 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca16:	f001 fbc7 	bl	800e1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca1a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	b672      	cpsid	i
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	b662      	cpsie	i
 800ca32:	61ba      	str	r2, [r7, #24]
 800ca34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d02f      	beq.n	800caa6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca50:	68b9      	ldr	r1, [r7, #8]
 800ca52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca54:	f000 f8b5 	bl	800cbc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	1e5a      	subs	r2, r3, #1
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca68:	d112      	bne.n	800ca90 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d016      	beq.n	800caa0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	3310      	adds	r3, #16
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fdb4 	bl	800d5e4 <xTaskRemoveFromEventList>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00e      	beq.n	800caa0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00b      	beq.n	800caa0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	e007      	b.n	800caa0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca94:	3301      	adds	r3, #1
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	b25a      	sxtb	r2, r3
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800caa0:	2301      	movs	r3, #1
 800caa2:	637b      	str	r3, [r7, #52]	; 0x34
 800caa4:	e001      	b.n	800caaa <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	637b      	str	r3, [r7, #52]	; 0x34
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3738      	adds	r7, #56	; 0x38
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cabe:	b480      	push	{r7}
 800cac0:	b085      	sub	sp, #20
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d006      	beq.n	800cadc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f1c3 0307 	rsb	r3, r3, #7
 800cad8:	60fb      	str	r3, [r7, #12]
 800cada:	e001      	b.n	800cae0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cae0:	68fb      	ldr	r3, [r7, #12]
	}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b086      	sub	sp, #24
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10d      	bne.n	800cb28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d14d      	bne.n	800cbb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 ffc1 	bl	800daa0 <xTaskPriorityDisinherit>
 800cb1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	609a      	str	r2, [r3, #8]
 800cb26:	e043      	b.n	800cbb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d119      	bne.n	800cb62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6858      	ldr	r0, [r3, #4]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb36:	461a      	mov	r2, r3
 800cb38:	68b9      	ldr	r1, [r7, #8]
 800cb3a:	f017 fc03 	bl	8024344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb46:	441a      	add	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d32b      	bcc.n	800cbb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	605a      	str	r2, [r3, #4]
 800cb60:	e026      	b.n	800cbb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	68d8      	ldr	r0, [r3, #12]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	f017 fbe9 	bl	8024344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7a:	425b      	negs	r3, r3
 800cb7c:	441a      	add	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d207      	bcs.n	800cb9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	689a      	ldr	r2, [r3, #8]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb96:	425b      	negs	r3, r3
 800cb98:	441a      	add	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d105      	bne.n	800cbb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cbb8:	697b      	ldr	r3, [r7, #20]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d018      	beq.n	800cc06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68da      	ldr	r2, [r3, #12]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbdc:	441a      	add	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	68da      	ldr	r2, [r3, #12]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d303      	bcc.n	800cbf6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68d9      	ldr	r1, [r3, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfe:	461a      	mov	r2, r3
 800cc00:	6838      	ldr	r0, [r7, #0]
 800cc02:	f017 fb9f 	bl	8024344 <memcpy>
	}
}
 800cc06:	bf00      	nop
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc16:	f001 f9e7 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc22:	e011      	b.n	800cc48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d012      	beq.n	800cc52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3324      	adds	r3, #36	; 0x24
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 fcd7 	bl	800d5e4 <xTaskRemoveFromEventList>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc3c:	f000 fdb0 	bl	800d7a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	dce9      	bgt.n	800cc24 <prvUnlockQueue+0x16>
 800cc50:	e000      	b.n	800cc54 <prvUnlockQueue+0x46>
					break;
 800cc52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	22ff      	movs	r2, #255	; 0xff
 800cc58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc5c:	f001 f9f6 	bl	800e04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc60:	f001 f9c2 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc6c:	e011      	b.n	800cc92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d012      	beq.n	800cc9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3310      	adds	r3, #16
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 fcb2 	bl	800d5e4 <xTaskRemoveFromEventList>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc86:	f000 fd8b 	bl	800d7a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	dce9      	bgt.n	800cc6e <prvUnlockQueue+0x60>
 800cc9a:	e000      	b.n	800cc9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cc9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	22ff      	movs	r2, #255	; 0xff
 800cca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cca6:	f001 f9d1 	bl	800e04c <vPortExitCritical>
}
 800ccaa:	bf00      	nop
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccba:	f001 f995 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	e001      	b.n	800ccd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cccc:	2300      	movs	r3, #0
 800ccce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ccd0:	f001 f9bc 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cce6:	f001 f97f 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d102      	bne.n	800ccfc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	60fb      	str	r3, [r7, #12]
 800ccfa:	e001      	b.n	800cd00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd00:	f001 f9a4 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800cd04:	68fb      	ldr	r3, [r7, #12]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b08e      	sub	sp, #56	; 0x38
 800cd12:	af04      	add	r7, sp, #16
 800cd14:	60f8      	str	r0, [r7, #12]
 800cd16:	60b9      	str	r1, [r7, #8]
 800cd18:	607a      	str	r2, [r7, #4]
 800cd1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10b      	bne.n	800cd3a <xTaskCreateStatic+0x2c>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	b672      	cpsid	i
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	b662      	cpsie	i
 800cd36:	623b      	str	r3, [r7, #32]
 800cd38:	e7fe      	b.n	800cd38 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10b      	bne.n	800cd58 <xTaskCreateStatic+0x4a>
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	b672      	cpsid	i
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	b662      	cpsie	i
 800cd54:	61fb      	str	r3, [r7, #28]
 800cd56:	e7fe      	b.n	800cd56 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd58:	2358      	movs	r3, #88	; 0x58
 800cd5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	2b58      	cmp	r3, #88	; 0x58
 800cd60:	d00b      	beq.n	800cd7a <xTaskCreateStatic+0x6c>
 800cd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd66:	b672      	cpsid	i
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	b662      	cpsie	i
 800cd76:	61bb      	str	r3, [r7, #24]
 800cd78:	e7fe      	b.n	800cd78 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01e      	beq.n	800cdc0 <xTaskCreateStatic+0xb2>
 800cd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01b      	beq.n	800cdc0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	2202      	movs	r2, #2
 800cd96:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	9303      	str	r3, [sp, #12]
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda0:	9302      	str	r3, [sp, #8]
 800cda2:	f107 0314 	add.w	r3, r7, #20
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	68b9      	ldr	r1, [r7, #8]
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 f850 	bl	800ce58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdba:	f000 f8e1 	bl	800cf80 <prvAddNewTaskToReadyList>
 800cdbe:	e001      	b.n	800cdc4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdc4:	697b      	ldr	r3, [r7, #20]
	}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3728      	adds	r7, #40	; 0x28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b08c      	sub	sp, #48	; 0x30
 800cdd2:	af04      	add	r7, sp, #16
 800cdd4:	60f8      	str	r0, [r7, #12]
 800cdd6:	60b9      	str	r1, [r7, #8]
 800cdd8:	603b      	str	r3, [r7, #0]
 800cdda:	4613      	mov	r3, r2
 800cddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cdde:	88fb      	ldrh	r3, [r7, #6]
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f001 fa22 	bl	800e22c <pvPortMalloc>
 800cde8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00e      	beq.n	800ce0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdf0:	2058      	movs	r0, #88	; 0x58
 800cdf2:	f001 fa1b 	bl	800e22c <pvPortMalloc>
 800cdf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d003      	beq.n	800ce06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	631a      	str	r2, [r3, #48]	; 0x30
 800ce04:	e005      	b.n	800ce12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce06:	6978      	ldr	r0, [r7, #20]
 800ce08:	f001 fadc 	bl	800e3c4 <vPortFree>
 800ce0c:	e001      	b.n	800ce12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d017      	beq.n	800ce48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce20:	88fa      	ldrh	r2, [r7, #6]
 800ce22:	2300      	movs	r3, #0
 800ce24:	9303      	str	r3, [sp, #12]
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	9302      	str	r3, [sp, #8]
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	9301      	str	r3, [sp, #4]
 800ce2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	68b9      	ldr	r1, [r7, #8]
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f000 f80e 	bl	800ce58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce3c:	69f8      	ldr	r0, [r7, #28]
 800ce3e:	f000 f89f 	bl	800cf80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce42:	2301      	movs	r3, #1
 800ce44:	61bb      	str	r3, [r7, #24]
 800ce46:	e002      	b.n	800ce4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce48:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce4e:	69bb      	ldr	r3, [r7, #24]
	}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3720      	adds	r7, #32
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b088      	sub	sp, #32
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	461a      	mov	r2, r3
 800ce70:	21a5      	movs	r1, #165	; 0xa5
 800ce72:	f017 fa72 	bl	802435a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce7a:	6879      	ldr	r1, [r7, #4]
 800ce7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ce80:	440b      	add	r3, r1
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4413      	add	r3, r2
 800ce86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	f023 0307 	bic.w	r3, r3, #7
 800ce8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	f003 0307 	and.w	r3, r3, #7
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00b      	beq.n	800ceb2 <prvInitialiseNewTask+0x5a>
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	b672      	cpsid	i
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	b662      	cpsie	i
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	e7fe      	b.n	800ceb0 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d01f      	beq.n	800cef8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceb8:	2300      	movs	r3, #0
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	e012      	b.n	800cee4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	4413      	add	r3, r2
 800cec4:	7819      	ldrb	r1, [r3, #0]
 800cec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	4413      	add	r3, r2
 800cecc:	3334      	adds	r3, #52	; 0x34
 800cece:	460a      	mov	r2, r1
 800ced0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	4413      	add	r3, r2
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d006      	beq.n	800ceec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	3301      	adds	r3, #1
 800cee2:	61fb      	str	r3, [r7, #28]
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	2b0f      	cmp	r3, #15
 800cee8:	d9e9      	bls.n	800cebe <prvInitialiseNewTask+0x66>
 800ceea:	e000      	b.n	800ceee <prvInitialiseNewTask+0x96>
			{
				break;
 800ceec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cef6:	e003      	b.n	800cf00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	2b06      	cmp	r3, #6
 800cf04:	d901      	bls.n	800cf0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf06:	2306      	movs	r3, #6
 800cf08:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf0e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf14:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf18:	2200      	movs	r2, #0
 800cf1a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	3304      	adds	r3, #4
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fe ff4b 	bl	800bdbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf28:	3318      	adds	r3, #24
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe ff46 	bl	800bdbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf38:	f1c3 0207 	rsb	r2, r3, #7
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf44:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	2200      	movs	r2, #0
 800cf4a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4e:	2200      	movs	r2, #0
 800cf50:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	68f9      	ldr	r1, [r7, #12]
 800cf5e:	69b8      	ldr	r0, [r7, #24]
 800cf60:	f000 ff3c 	bl	800dddc <pxPortInitialiseStack>
 800cf64:	4602      	mov	r2, r0
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf76:	bf00      	nop
 800cf78:	3720      	adds	r7, #32
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf88:	f001 f82e 	bl	800dfe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf8c:	4b2a      	ldr	r3, [pc, #168]	; (800d038 <prvAddNewTaskToReadyList+0xb8>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3301      	adds	r3, #1
 800cf92:	4a29      	ldr	r2, [pc, #164]	; (800d038 <prvAddNewTaskToReadyList+0xb8>)
 800cf94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf96:	4b29      	ldr	r3, [pc, #164]	; (800d03c <prvAddNewTaskToReadyList+0xbc>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d109      	bne.n	800cfb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf9e:	4a27      	ldr	r2, [pc, #156]	; (800d03c <prvAddNewTaskToReadyList+0xbc>)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfa4:	4b24      	ldr	r3, [pc, #144]	; (800d038 <prvAddNewTaskToReadyList+0xb8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d110      	bne.n	800cfce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfac:	f000 fc1e 	bl	800d7ec <prvInitialiseTaskLists>
 800cfb0:	e00d      	b.n	800cfce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfb2:	4b23      	ldr	r3, [pc, #140]	; (800d040 <prvAddNewTaskToReadyList+0xc0>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d109      	bne.n	800cfce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfba:	4b20      	ldr	r3, [pc, #128]	; (800d03c <prvAddNewTaskToReadyList+0xbc>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d802      	bhi.n	800cfce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfc8:	4a1c      	ldr	r2, [pc, #112]	; (800d03c <prvAddNewTaskToReadyList+0xbc>)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfce:	4b1d      	ldr	r3, [pc, #116]	; (800d044 <prvAddNewTaskToReadyList+0xc4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	4a1b      	ldr	r2, [pc, #108]	; (800d044 <prvAddNewTaskToReadyList+0xc4>)
 800cfd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	2201      	movs	r2, #1
 800cfde:	409a      	lsls	r2, r3
 800cfe0:	4b19      	ldr	r3, [pc, #100]	; (800d048 <prvAddNewTaskToReadyList+0xc8>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	4a18      	ldr	r2, [pc, #96]	; (800d048 <prvAddNewTaskToReadyList+0xc8>)
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	4613      	mov	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4a15      	ldr	r2, [pc, #84]	; (800d04c <prvAddNewTaskToReadyList+0xcc>)
 800cff8:	441a      	add	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3304      	adds	r3, #4
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7fe fee8 	bl	800bdd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d006:	f001 f821 	bl	800e04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d00a:	4b0d      	ldr	r3, [pc, #52]	; (800d040 <prvAddNewTaskToReadyList+0xc0>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00e      	beq.n	800d030 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d012:	4b0a      	ldr	r3, [pc, #40]	; (800d03c <prvAddNewTaskToReadyList+0xbc>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d207      	bcs.n	800d030 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d020:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <prvAddNewTaskToReadyList+0xd0>)
 800d022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d026:	601a      	str	r2, [r3, #0]
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	200004bc 	.word	0x200004bc
 800d03c:	200003bc 	.word	0x200003bc
 800d040:	200004c8 	.word	0x200004c8
 800d044:	200004d8 	.word	0x200004d8
 800d048:	200004c4 	.word	0x200004c4
 800d04c:	200003c0 	.word	0x200003c0
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d018      	beq.n	800d098 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d066:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <vTaskDelay+0x64>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00b      	beq.n	800d086 <vTaskDelay+0x32>
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	b672      	cpsid	i
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	b662      	cpsie	i
 800d082:	60bb      	str	r3, [r7, #8]
 800d084:	e7fe      	b.n	800d084 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d086:	f000 f87d 	bl	800d184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d08a:	2100      	movs	r1, #0
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fe3f 	bl	800dd10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d092:	f000 f885 	bl	800d1a0 <xTaskResumeAll>
 800d096:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d107      	bne.n	800d0ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d09e:	4b07      	ldr	r3, [pc, #28]	; (800d0bc <vTaskDelay+0x68>)
 800d0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0ae:	bf00      	nop
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	200004e4 	.word	0x200004e4
 800d0bc:	e000ed04 	.word	0xe000ed04

0800d0c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	; 0x28
 800d0c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0ce:	463a      	mov	r2, r7
 800d0d0:	1d39      	adds	r1, r7, #4
 800d0d2:	f107 0308 	add.w	r3, r7, #8
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7f3 fa84 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	9202      	str	r2, [sp, #8]
 800d0e4:	9301      	str	r3, [sp, #4]
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	460a      	mov	r2, r1
 800d0ee:	491f      	ldr	r1, [pc, #124]	; (800d16c <vTaskStartScheduler+0xac>)
 800d0f0:	481f      	ldr	r0, [pc, #124]	; (800d170 <vTaskStartScheduler+0xb0>)
 800d0f2:	f7ff fe0c 	bl	800cd0e <xTaskCreateStatic>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	4b1e      	ldr	r3, [pc, #120]	; (800d174 <vTaskStartScheduler+0xb4>)
 800d0fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d0fc:	4b1d      	ldr	r3, [pc, #116]	; (800d174 <vTaskStartScheduler+0xb4>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d104:	2301      	movs	r3, #1
 800d106:	617b      	str	r3, [r7, #20]
 800d108:	e001      	b.n	800d10e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d10a:	2300      	movs	r3, #0
 800d10c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d117      	bne.n	800d144 <vTaskStartScheduler+0x84>
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	b672      	cpsid	i
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	b662      	cpsie	i
 800d128:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d12a:	4b13      	ldr	r3, [pc, #76]	; (800d178 <vTaskStartScheduler+0xb8>)
 800d12c:	f04f 32ff 	mov.w	r2, #4294967295
 800d130:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d132:	4b12      	ldr	r3, [pc, #72]	; (800d17c <vTaskStartScheduler+0xbc>)
 800d134:	2201      	movs	r2, #1
 800d136:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d138:	4b11      	ldr	r3, [pc, #68]	; (800d180 <vTaskStartScheduler+0xc0>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d13e:	f000 fed7 	bl	800def0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d142:	e00f      	b.n	800d164 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14a:	d10b      	bne.n	800d164 <vTaskStartScheduler+0xa4>
 800d14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d150:	b672      	cpsid	i
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	b662      	cpsie	i
 800d160:	60fb      	str	r3, [r7, #12]
 800d162:	e7fe      	b.n	800d162 <vTaskStartScheduler+0xa2>
}
 800d164:	bf00      	nop
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	080252f0 	.word	0x080252f0
 800d170:	0800d7b9 	.word	0x0800d7b9
 800d174:	200004e0 	.word	0x200004e0
 800d178:	200004dc 	.word	0x200004dc
 800d17c:	200004c8 	.word	0x200004c8
 800d180:	200004c0 	.word	0x200004c0

0800d184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d184:	b480      	push	{r7}
 800d186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d188:	4b04      	ldr	r3, [pc, #16]	; (800d19c <vTaskSuspendAll+0x18>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3301      	adds	r3, #1
 800d18e:	4a03      	ldr	r2, [pc, #12]	; (800d19c <vTaskSuspendAll+0x18>)
 800d190:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d192:	bf00      	nop
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	200004e4 	.word	0x200004e4

0800d1a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1ae:	4b42      	ldr	r3, [pc, #264]	; (800d2b8 <xTaskResumeAll+0x118>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10b      	bne.n	800d1ce <xTaskResumeAll+0x2e>
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	b672      	cpsid	i
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	b662      	cpsie	i
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	e7fe      	b.n	800d1cc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d1ce:	f000 ff0b 	bl	800dfe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d1d2:	4b39      	ldr	r3, [pc, #228]	; (800d2b8 <xTaskResumeAll+0x118>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	4a37      	ldr	r2, [pc, #220]	; (800d2b8 <xTaskResumeAll+0x118>)
 800d1da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1dc:	4b36      	ldr	r3, [pc, #216]	; (800d2b8 <xTaskResumeAll+0x118>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d161      	bne.n	800d2a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d1e4:	4b35      	ldr	r3, [pc, #212]	; (800d2bc <xTaskResumeAll+0x11c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d05d      	beq.n	800d2a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1ec:	e02e      	b.n	800d24c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ee:	4b34      	ldr	r3, [pc, #208]	; (800d2c0 <xTaskResumeAll+0x120>)
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3318      	adds	r3, #24
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fe48 	bl	800be90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	3304      	adds	r3, #4
 800d204:	4618      	mov	r0, r3
 800d206:	f7fe fe43 	bl	800be90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20e:	2201      	movs	r2, #1
 800d210:	409a      	lsls	r2, r3
 800d212:	4b2c      	ldr	r3, [pc, #176]	; (800d2c4 <xTaskResumeAll+0x124>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4313      	orrs	r3, r2
 800d218:	4a2a      	ldr	r2, [pc, #168]	; (800d2c4 <xTaskResumeAll+0x124>)
 800d21a:	6013      	str	r3, [r2, #0]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d220:	4613      	mov	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4a27      	ldr	r2, [pc, #156]	; (800d2c8 <xTaskResumeAll+0x128>)
 800d22a:	441a      	add	r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3304      	adds	r3, #4
 800d230:	4619      	mov	r1, r3
 800d232:	4610      	mov	r0, r2
 800d234:	f7fe fdcf 	bl	800bdd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23c:	4b23      	ldr	r3, [pc, #140]	; (800d2cc <xTaskResumeAll+0x12c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	429a      	cmp	r2, r3
 800d244:	d302      	bcc.n	800d24c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d246:	4b22      	ldr	r3, [pc, #136]	; (800d2d0 <xTaskResumeAll+0x130>)
 800d248:	2201      	movs	r2, #1
 800d24a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d24c:	4b1c      	ldr	r3, [pc, #112]	; (800d2c0 <xTaskResumeAll+0x120>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1cc      	bne.n	800d1ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d001      	beq.n	800d25e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d25a:	f000 fb63 	bl	800d924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d25e:	4b1d      	ldr	r3, [pc, #116]	; (800d2d4 <xTaskResumeAll+0x134>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d010      	beq.n	800d28c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d26a:	f000 f859 	bl	800d320 <xTaskIncrementTick>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d274:	4b16      	ldr	r3, [pc, #88]	; (800d2d0 <xTaskResumeAll+0x130>)
 800d276:	2201      	movs	r2, #1
 800d278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d1f1      	bne.n	800d26a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d286:	4b13      	ldr	r3, [pc, #76]	; (800d2d4 <xTaskResumeAll+0x134>)
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d28c:	4b10      	ldr	r3, [pc, #64]	; (800d2d0 <xTaskResumeAll+0x130>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d009      	beq.n	800d2a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d294:	2301      	movs	r3, #1
 800d296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d298:	4b0f      	ldr	r3, [pc, #60]	; (800d2d8 <xTaskResumeAll+0x138>)
 800d29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d29e:	601a      	str	r2, [r3, #0]
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2a8:	f000 fed0 	bl	800e04c <vPortExitCritical>

	return xAlreadyYielded;
 800d2ac:	68bb      	ldr	r3, [r7, #8]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	200004e4 	.word	0x200004e4
 800d2bc:	200004bc 	.word	0x200004bc
 800d2c0:	2000047c 	.word	0x2000047c
 800d2c4:	200004c4 	.word	0x200004c4
 800d2c8:	200003c0 	.word	0x200003c0
 800d2cc:	200003bc 	.word	0x200003bc
 800d2d0:	200004d0 	.word	0x200004d0
 800d2d4:	200004cc 	.word	0x200004cc
 800d2d8:	e000ed04 	.word	0xe000ed04

0800d2dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d2e2:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <xTaskGetTickCount+0x1c>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d2e8:	687b      	ldr	r3, [r7, #4]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	200004c0 	.word	0x200004c0

0800d2fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d302:	f000 ff51 	bl	800e1a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d306:	2300      	movs	r3, #0
 800d308:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d30a:	4b04      	ldr	r3, [pc, #16]	; (800d31c <xTaskGetTickCountFromISR+0x20>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d310:	683b      	ldr	r3, [r7, #0]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	200004c0 	.word	0x200004c0

0800d320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d326:	2300      	movs	r3, #0
 800d328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d32a:	4b4f      	ldr	r3, [pc, #316]	; (800d468 <xTaskIncrementTick+0x148>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f040 8089 	bne.w	800d446 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d334:	4b4d      	ldr	r3, [pc, #308]	; (800d46c <xTaskIncrementTick+0x14c>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	3301      	adds	r3, #1
 800d33a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d33c:	4a4b      	ldr	r2, [pc, #300]	; (800d46c <xTaskIncrementTick+0x14c>)
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d121      	bne.n	800d38c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d348:	4b49      	ldr	r3, [pc, #292]	; (800d470 <xTaskIncrementTick+0x150>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00b      	beq.n	800d36a <xTaskIncrementTick+0x4a>
 800d352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d356:	b672      	cpsid	i
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	b662      	cpsie	i
 800d366:	603b      	str	r3, [r7, #0]
 800d368:	e7fe      	b.n	800d368 <xTaskIncrementTick+0x48>
 800d36a:	4b41      	ldr	r3, [pc, #260]	; (800d470 <xTaskIncrementTick+0x150>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	4b40      	ldr	r3, [pc, #256]	; (800d474 <xTaskIncrementTick+0x154>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a3e      	ldr	r2, [pc, #248]	; (800d470 <xTaskIncrementTick+0x150>)
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	4a3e      	ldr	r2, [pc, #248]	; (800d474 <xTaskIncrementTick+0x154>)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6013      	str	r3, [r2, #0]
 800d37e:	4b3e      	ldr	r3, [pc, #248]	; (800d478 <xTaskIncrementTick+0x158>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	4a3c      	ldr	r2, [pc, #240]	; (800d478 <xTaskIncrementTick+0x158>)
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	f000 facc 	bl	800d924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d38c:	4b3b      	ldr	r3, [pc, #236]	; (800d47c <xTaskIncrementTick+0x15c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	429a      	cmp	r2, r3
 800d394:	d348      	bcc.n	800d428 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d396:	4b36      	ldr	r3, [pc, #216]	; (800d470 <xTaskIncrementTick+0x150>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d104      	bne.n	800d3aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3a0:	4b36      	ldr	r3, [pc, #216]	; (800d47c <xTaskIncrementTick+0x15c>)
 800d3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a6:	601a      	str	r2, [r3, #0]
					break;
 800d3a8:	e03e      	b.n	800d428 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3aa:	4b31      	ldr	r3, [pc, #196]	; (800d470 <xTaskIncrementTick+0x150>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d203      	bcs.n	800d3ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3c2:	4a2e      	ldr	r2, [pc, #184]	; (800d47c <xTaskIncrementTick+0x15c>)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3c8:	e02e      	b.n	800d428 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fe fd5e 	bl	800be90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d004      	beq.n	800d3e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	3318      	adds	r3, #24
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fd55 	bl	800be90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	409a      	lsls	r2, r3
 800d3ee:	4b24      	ldr	r3, [pc, #144]	; (800d480 <xTaskIncrementTick+0x160>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	4a22      	ldr	r2, [pc, #136]	; (800d480 <xTaskIncrementTick+0x160>)
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4a1f      	ldr	r2, [pc, #124]	; (800d484 <xTaskIncrementTick+0x164>)
 800d406:	441a      	add	r2, r3
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	3304      	adds	r3, #4
 800d40c:	4619      	mov	r1, r3
 800d40e:	4610      	mov	r0, r2
 800d410:	f7fe fce1 	bl	800bdd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d418:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <xTaskIncrementTick+0x168>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	429a      	cmp	r2, r3
 800d420:	d3b9      	bcc.n	800d396 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d422:	2301      	movs	r3, #1
 800d424:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d426:	e7b6      	b.n	800d396 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d428:	4b17      	ldr	r3, [pc, #92]	; (800d488 <xTaskIncrementTick+0x168>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42e:	4915      	ldr	r1, [pc, #84]	; (800d484 <xTaskIncrementTick+0x164>)
 800d430:	4613      	mov	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	440b      	add	r3, r1
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d907      	bls.n	800d450 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d440:	2301      	movs	r3, #1
 800d442:	617b      	str	r3, [r7, #20]
 800d444:	e004      	b.n	800d450 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d446:	4b11      	ldr	r3, [pc, #68]	; (800d48c <xTaskIncrementTick+0x16c>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	3301      	adds	r3, #1
 800d44c:	4a0f      	ldr	r2, [pc, #60]	; (800d48c <xTaskIncrementTick+0x16c>)
 800d44e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d450:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <xTaskIncrementTick+0x170>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d458:	2301      	movs	r3, #1
 800d45a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d45c:	697b      	ldr	r3, [r7, #20]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	200004e4 	.word	0x200004e4
 800d46c:	200004c0 	.word	0x200004c0
 800d470:	20000474 	.word	0x20000474
 800d474:	20000478 	.word	0x20000478
 800d478:	200004d4 	.word	0x200004d4
 800d47c:	200004dc 	.word	0x200004dc
 800d480:	200004c4 	.word	0x200004c4
 800d484:	200003c0 	.word	0x200003c0
 800d488:	200003bc 	.word	0x200003bc
 800d48c:	200004cc 	.word	0x200004cc
 800d490:	200004d0 	.word	0x200004d0

0800d494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d49a:	4b3a      	ldr	r3, [pc, #232]	; (800d584 <vTaskSwitchContext+0xf0>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d4a2:	4b39      	ldr	r3, [pc, #228]	; (800d588 <vTaskSwitchContext+0xf4>)
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4a8:	e067      	b.n	800d57a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d4aa:	4b37      	ldr	r3, [pc, #220]	; (800d588 <vTaskSwitchContext+0xf4>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d4b0:	4b36      	ldr	r3, [pc, #216]	; (800d58c <vTaskSwitchContext+0xf8>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b6:	61fb      	str	r3, [r7, #28]
 800d4b8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d4bc:	61bb      	str	r3, [r7, #24]
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69ba      	ldr	r2, [r7, #24]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d111      	bne.n	800d4ec <vTaskSwitchContext+0x58>
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	3304      	adds	r3, #4
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	69ba      	ldr	r2, [r7, #24]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d10b      	bne.n	800d4ec <vTaskSwitchContext+0x58>
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	3308      	adds	r3, #8
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	69ba      	ldr	r2, [r7, #24]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d105      	bne.n	800d4ec <vTaskSwitchContext+0x58>
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	330c      	adds	r3, #12
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	69ba      	ldr	r2, [r7, #24]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d008      	beq.n	800d4fe <vTaskSwitchContext+0x6a>
 800d4ec:	4b27      	ldr	r3, [pc, #156]	; (800d58c <vTaskSwitchContext+0xf8>)
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	4b26      	ldr	r3, [pc, #152]	; (800d58c <vTaskSwitchContext+0xf8>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3334      	adds	r3, #52	; 0x34
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	f7f3 f860 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4fe:	4b24      	ldr	r3, [pc, #144]	; (800d590 <vTaskSwitchContext+0xfc>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	fab3 f383 	clz	r3, r3
 800d50a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d50c:	7afb      	ldrb	r3, [r7, #11]
 800d50e:	f1c3 031f 	rsb	r3, r3, #31
 800d512:	617b      	str	r3, [r7, #20]
 800d514:	491f      	ldr	r1, [pc, #124]	; (800d594 <vTaskSwitchContext+0x100>)
 800d516:	697a      	ldr	r2, [r7, #20]
 800d518:	4613      	mov	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	440b      	add	r3, r1
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10b      	bne.n	800d540 <vTaskSwitchContext+0xac>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	b672      	cpsid	i
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	b662      	cpsie	i
 800d53c:	607b      	str	r3, [r7, #4]
 800d53e:	e7fe      	b.n	800d53e <vTaskSwitchContext+0xaa>
 800d540:	697a      	ldr	r2, [r7, #20]
 800d542:	4613      	mov	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4413      	add	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4a12      	ldr	r2, [pc, #72]	; (800d594 <vTaskSwitchContext+0x100>)
 800d54c:	4413      	add	r3, r2
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	605a      	str	r2, [r3, #4]
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	3308      	adds	r3, #8
 800d562:	429a      	cmp	r2, r3
 800d564:	d104      	bne.n	800d570 <vTaskSwitchContext+0xdc>
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	605a      	str	r2, [r3, #4]
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	4a05      	ldr	r2, [pc, #20]	; (800d58c <vTaskSwitchContext+0xf8>)
 800d578:	6013      	str	r3, [r2, #0]
}
 800d57a:	bf00      	nop
 800d57c:	3720      	adds	r7, #32
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200004e4 	.word	0x200004e4
 800d588:	200004d0 	.word	0x200004d0
 800d58c:	200003bc 	.word	0x200003bc
 800d590:	200004c4 	.word	0x200004c4
 800d594:	200003c0 	.word	0x200003c0

0800d598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10b      	bne.n	800d5c0 <vTaskPlaceOnEventList+0x28>
 800d5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ac:	b672      	cpsid	i
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	b662      	cpsie	i
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	e7fe      	b.n	800d5be <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5c0:	4b07      	ldr	r3, [pc, #28]	; (800d5e0 <vTaskPlaceOnEventList+0x48>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3318      	adds	r3, #24
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7fe fc28 	bl	800be1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	6838      	ldr	r0, [r7, #0]
 800d5d2:	f000 fb9d 	bl	800dd10 <prvAddCurrentTaskToDelayedList>
}
 800d5d6:	bf00      	nop
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	200003bc 	.word	0x200003bc

0800d5e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10b      	bne.n	800d612 <xTaskRemoveFromEventList+0x2e>
 800d5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fe:	b672      	cpsid	i
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	b662      	cpsie	i
 800d60e:	60fb      	str	r3, [r7, #12]
 800d610:	e7fe      	b.n	800d610 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	3318      	adds	r3, #24
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fc3a 	bl	800be90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d61c:	4b1d      	ldr	r3, [pc, #116]	; (800d694 <xTaskRemoveFromEventList+0xb0>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d11c      	bne.n	800d65e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	3304      	adds	r3, #4
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fc31 	bl	800be90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	2201      	movs	r2, #1
 800d634:	409a      	lsls	r2, r3
 800d636:	4b18      	ldr	r3, [pc, #96]	; (800d698 <xTaskRemoveFromEventList+0xb4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	4a16      	ldr	r2, [pc, #88]	; (800d698 <xTaskRemoveFromEventList+0xb4>)
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	4613      	mov	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4a13      	ldr	r2, [pc, #76]	; (800d69c <xTaskRemoveFromEventList+0xb8>)
 800d64e:	441a      	add	r2, r3
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	3304      	adds	r3, #4
 800d654:	4619      	mov	r1, r3
 800d656:	4610      	mov	r0, r2
 800d658:	f7fe fbbd 	bl	800bdd6 <vListInsertEnd>
 800d65c:	e005      	b.n	800d66a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	3318      	adds	r3, #24
 800d662:	4619      	mov	r1, r3
 800d664:	480e      	ldr	r0, [pc, #56]	; (800d6a0 <xTaskRemoveFromEventList+0xbc>)
 800d666:	f7fe fbb6 	bl	800bdd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66e:	4b0d      	ldr	r3, [pc, #52]	; (800d6a4 <xTaskRemoveFromEventList+0xc0>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d674:	429a      	cmp	r2, r3
 800d676:	d905      	bls.n	800d684 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d678:	2301      	movs	r3, #1
 800d67a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <xTaskRemoveFromEventList+0xc4>)
 800d67e:	2201      	movs	r2, #1
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	e001      	b.n	800d688 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d684:	2300      	movs	r3, #0
 800d686:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d688:	697b      	ldr	r3, [r7, #20]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	200004e4 	.word	0x200004e4
 800d698:	200004c4 	.word	0x200004c4
 800d69c:	200003c0 	.word	0x200003c0
 800d6a0:	2000047c 	.word	0x2000047c
 800d6a4:	200003bc 	.word	0x200003bc
 800d6a8:	200004d0 	.word	0x200004d0

0800d6ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6b4:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <vTaskInternalSetTimeOutState+0x24>)
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6bc:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <vTaskInternalSetTimeOutState+0x28>)
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	605a      	str	r2, [r3, #4]
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	200004d4 	.word	0x200004d4
 800d6d4:	200004c0 	.word	0x200004c0

0800d6d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10b      	bne.n	800d700 <xTaskCheckForTimeOut+0x28>
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	b672      	cpsid	i
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	b662      	cpsie	i
 800d6fc:	613b      	str	r3, [r7, #16]
 800d6fe:	e7fe      	b.n	800d6fe <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10b      	bne.n	800d71e <xTaskCheckForTimeOut+0x46>
 800d706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70a:	b672      	cpsid	i
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	b662      	cpsie	i
 800d71a:	60fb      	str	r3, [r7, #12]
 800d71c:	e7fe      	b.n	800d71c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800d71e:	f000 fc63 	bl	800dfe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d722:	4b1d      	ldr	r3, [pc, #116]	; (800d798 <xTaskCheckForTimeOut+0xc0>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	69ba      	ldr	r2, [r7, #24]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73a:	d102      	bne.n	800d742 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d73c:	2300      	movs	r3, #0
 800d73e:	61fb      	str	r3, [r7, #28]
 800d740:	e023      	b.n	800d78a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	4b15      	ldr	r3, [pc, #84]	; (800d79c <xTaskCheckForTimeOut+0xc4>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d007      	beq.n	800d75e <xTaskCheckForTimeOut+0x86>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	69ba      	ldr	r2, [r7, #24]
 800d754:	429a      	cmp	r2, r3
 800d756:	d302      	bcc.n	800d75e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	61fb      	str	r3, [r7, #28]
 800d75c:	e015      	b.n	800d78a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	429a      	cmp	r2, r3
 800d766:	d20b      	bcs.n	800d780 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	1ad2      	subs	r2, r2, r3
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7ff ff99 	bl	800d6ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d77a:	2300      	movs	r3, #0
 800d77c:	61fb      	str	r3, [r7, #28]
 800d77e:	e004      	b.n	800d78a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d786:	2301      	movs	r3, #1
 800d788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d78a:	f000 fc5f 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800d78e:	69fb      	ldr	r3, [r7, #28]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3720      	adds	r7, #32
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	200004c0 	.word	0x200004c0
 800d79c:	200004d4 	.word	0x200004d4

0800d7a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7a4:	4b03      	ldr	r3, [pc, #12]	; (800d7b4 <vTaskMissedYield+0x14>)
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	601a      	str	r2, [r3, #0]
}
 800d7aa:	bf00      	nop
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	200004d0 	.word	0x200004d0

0800d7b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7c0:	f000 f854 	bl	800d86c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7c4:	4b07      	ldr	r3, [pc, #28]	; (800d7e4 <prvIdleTask+0x2c>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d907      	bls.n	800d7dc <prvIdleTask+0x24>
			{
				taskYIELD();
 800d7cc:	4b06      	ldr	r3, [pc, #24]	; (800d7e8 <prvIdleTask+0x30>)
 800d7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d7dc:	f7f2 fee8 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d7e0:	e7ee      	b.n	800d7c0 <prvIdleTask+0x8>
 800d7e2:	bf00      	nop
 800d7e4:	200003c0 	.word	0x200003c0
 800d7e8:	e000ed04 	.word	0xe000ed04

0800d7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	607b      	str	r3, [r7, #4]
 800d7f6:	e00c      	b.n	800d812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4a12      	ldr	r2, [pc, #72]	; (800d84c <prvInitialiseTaskLists+0x60>)
 800d804:	4413      	add	r3, r2
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe fab8 	bl	800bd7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3301      	adds	r3, #1
 800d810:	607b      	str	r3, [r7, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b06      	cmp	r3, #6
 800d816:	d9ef      	bls.n	800d7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d818:	480d      	ldr	r0, [pc, #52]	; (800d850 <prvInitialiseTaskLists+0x64>)
 800d81a:	f7fe faaf 	bl	800bd7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d81e:	480d      	ldr	r0, [pc, #52]	; (800d854 <prvInitialiseTaskLists+0x68>)
 800d820:	f7fe faac 	bl	800bd7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d824:	480c      	ldr	r0, [pc, #48]	; (800d858 <prvInitialiseTaskLists+0x6c>)
 800d826:	f7fe faa9 	bl	800bd7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d82a:	480c      	ldr	r0, [pc, #48]	; (800d85c <prvInitialiseTaskLists+0x70>)
 800d82c:	f7fe faa6 	bl	800bd7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d830:	480b      	ldr	r0, [pc, #44]	; (800d860 <prvInitialiseTaskLists+0x74>)
 800d832:	f7fe faa3 	bl	800bd7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d836:	4b0b      	ldr	r3, [pc, #44]	; (800d864 <prvInitialiseTaskLists+0x78>)
 800d838:	4a05      	ldr	r2, [pc, #20]	; (800d850 <prvInitialiseTaskLists+0x64>)
 800d83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d83c:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <prvInitialiseTaskLists+0x7c>)
 800d83e:	4a05      	ldr	r2, [pc, #20]	; (800d854 <prvInitialiseTaskLists+0x68>)
 800d840:	601a      	str	r2, [r3, #0]
}
 800d842:	bf00      	nop
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	200003c0 	.word	0x200003c0
 800d850:	2000044c 	.word	0x2000044c
 800d854:	20000460 	.word	0x20000460
 800d858:	2000047c 	.word	0x2000047c
 800d85c:	20000490 	.word	0x20000490
 800d860:	200004a8 	.word	0x200004a8
 800d864:	20000474 	.word	0x20000474
 800d868:	20000478 	.word	0x20000478

0800d86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d872:	e019      	b.n	800d8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d874:	f000 fbb8 	bl	800dfe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d878:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <prvCheckTasksWaitingTermination+0x4c>)
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3304      	adds	r3, #4
 800d884:	4618      	mov	r0, r3
 800d886:	f7fe fb03 	bl	800be90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d88a:	4b0c      	ldr	r3, [pc, #48]	; (800d8bc <prvCheckTasksWaitingTermination+0x50>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3b01      	subs	r3, #1
 800d890:	4a0a      	ldr	r2, [pc, #40]	; (800d8bc <prvCheckTasksWaitingTermination+0x50>)
 800d892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d894:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <prvCheckTasksWaitingTermination+0x54>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3b01      	subs	r3, #1
 800d89a:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <prvCheckTasksWaitingTermination+0x54>)
 800d89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d89e:	f000 fbd5 	bl	800e04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 f80e 	bl	800d8c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8a8:	4b05      	ldr	r3, [pc, #20]	; (800d8c0 <prvCheckTasksWaitingTermination+0x54>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e1      	bne.n	800d874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	20000490 	.word	0x20000490
 800d8bc:	200004bc 	.word	0x200004bc
 800d8c0:	200004a4 	.word	0x200004a4

0800d8c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d108      	bne.n	800d8e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 fd72 	bl	800e3c4 <vPortFree>
				vPortFree( pxTCB );
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fd6f 	bl	800e3c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d8e6:	e019      	b.n	800d91c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d103      	bne.n	800d8fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fd66 	bl	800e3c4 <vPortFree>
	}
 800d8f8:	e010      	b.n	800d91c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d900:	2b02      	cmp	r3, #2
 800d902:	d00b      	beq.n	800d91c <prvDeleteTCB+0x58>
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	b672      	cpsid	i
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	b662      	cpsie	i
 800d918:	60fb      	str	r3, [r7, #12]
 800d91a:	e7fe      	b.n	800d91a <prvDeleteTCB+0x56>
	}
 800d91c:	bf00      	nop
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d92a:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <prvResetNextTaskUnblockTime+0x38>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d104      	bne.n	800d93e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d934:	4b0a      	ldr	r3, [pc, #40]	; (800d960 <prvResetNextTaskUnblockTime+0x3c>)
 800d936:	f04f 32ff 	mov.w	r2, #4294967295
 800d93a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d93c:	e008      	b.n	800d950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d93e:	4b07      	ldr	r3, [pc, #28]	; (800d95c <prvResetNextTaskUnblockTime+0x38>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	4a04      	ldr	r2, [pc, #16]	; (800d960 <prvResetNextTaskUnblockTime+0x3c>)
 800d94e:	6013      	str	r3, [r2, #0]
}
 800d950:	bf00      	nop
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	20000474 	.word	0x20000474
 800d960:	200004dc 	.word	0x200004dc

0800d964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d96a:	4b0b      	ldr	r3, [pc, #44]	; (800d998 <xTaskGetSchedulerState+0x34>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d102      	bne.n	800d978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d972:	2301      	movs	r3, #1
 800d974:	607b      	str	r3, [r7, #4]
 800d976:	e008      	b.n	800d98a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d978:	4b08      	ldr	r3, [pc, #32]	; (800d99c <xTaskGetSchedulerState+0x38>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d980:	2302      	movs	r3, #2
 800d982:	607b      	str	r3, [r7, #4]
 800d984:	e001      	b.n	800d98a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d986:	2300      	movs	r3, #0
 800d988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d98a:	687b      	ldr	r3, [r7, #4]
	}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	200004c8 	.word	0x200004c8
 800d99c:	200004e4 	.word	0x200004e4

0800d9a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d069      	beq.n	800da8a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ba:	4b36      	ldr	r3, [pc, #216]	; (800da94 <xTaskPriorityInherit+0xf4>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d259      	bcs.n	800da78 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	db06      	blt.n	800d9da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9cc:	4b31      	ldr	r3, [pc, #196]	; (800da94 <xTaskPriorityInherit+0xf4>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d2:	f1c3 0207 	rsb	r2, r3, #7
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	6959      	ldr	r1, [r3, #20]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	4a2b      	ldr	r2, [pc, #172]	; (800da98 <xTaskPriorityInherit+0xf8>)
 800d9ec:	4413      	add	r3, r2
 800d9ee:	4299      	cmp	r1, r3
 800d9f0:	d13a      	bne.n	800da68 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fe fa4a 	bl	800be90 <uxListRemove>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d115      	bne.n	800da2e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da06:	4924      	ldr	r1, [pc, #144]	; (800da98 <xTaskPriorityInherit+0xf8>)
 800da08:	4613      	mov	r3, r2
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	4413      	add	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	440b      	add	r3, r1
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10a      	bne.n	800da2e <xTaskPriorityInherit+0x8e>
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1c:	2201      	movs	r2, #1
 800da1e:	fa02 f303 	lsl.w	r3, r2, r3
 800da22:	43da      	mvns	r2, r3
 800da24:	4b1d      	ldr	r3, [pc, #116]	; (800da9c <xTaskPriorityInherit+0xfc>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4013      	ands	r3, r2
 800da2a:	4a1c      	ldr	r2, [pc, #112]	; (800da9c <xTaskPriorityInherit+0xfc>)
 800da2c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da2e:	4b19      	ldr	r3, [pc, #100]	; (800da94 <xTaskPriorityInherit+0xf4>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3c:	2201      	movs	r2, #1
 800da3e:	409a      	lsls	r2, r3
 800da40:	4b16      	ldr	r3, [pc, #88]	; (800da9c <xTaskPriorityInherit+0xfc>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4313      	orrs	r3, r2
 800da46:	4a15      	ldr	r2, [pc, #84]	; (800da9c <xTaskPriorityInherit+0xfc>)
 800da48:	6013      	str	r3, [r2, #0]
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4e:	4613      	mov	r3, r2
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4413      	add	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4a10      	ldr	r2, [pc, #64]	; (800da98 <xTaskPriorityInherit+0xf8>)
 800da58:	441a      	add	r2, r3
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	3304      	adds	r3, #4
 800da5e:	4619      	mov	r1, r3
 800da60:	4610      	mov	r0, r2
 800da62:	f7fe f9b8 	bl	800bdd6 <vListInsertEnd>
 800da66:	e004      	b.n	800da72 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da68:	4b0a      	ldr	r3, [pc, #40]	; (800da94 <xTaskPriorityInherit+0xf4>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800da72:	2301      	movs	r3, #1
 800da74:	60fb      	str	r3, [r7, #12]
 800da76:	e008      	b.n	800da8a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da7c:	4b05      	ldr	r3, [pc, #20]	; (800da94 <xTaskPriorityInherit+0xf4>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da82:	429a      	cmp	r2, r3
 800da84:	d201      	bcs.n	800da8a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800da86:	2301      	movs	r3, #1
 800da88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da8a:	68fb      	ldr	r3, [r7, #12]
	}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	200003bc 	.word	0x200003bc
 800da98:	200003c0 	.word	0x200003c0
 800da9c:	200004c4 	.word	0x200004c4

0800daa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b086      	sub	sp, #24
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800daac:	2300      	movs	r3, #0
 800daae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d070      	beq.n	800db98 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dab6:	4b3b      	ldr	r3, [pc, #236]	; (800dba4 <xTaskPriorityDisinherit+0x104>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	693a      	ldr	r2, [r7, #16]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d00b      	beq.n	800dad8 <xTaskPriorityDisinherit+0x38>
 800dac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac4:	b672      	cpsid	i
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	b662      	cpsie	i
 800dad4:	60fb      	str	r3, [r7, #12]
 800dad6:	e7fe      	b.n	800dad6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10b      	bne.n	800daf8 <xTaskPriorityDisinherit+0x58>
 800dae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae4:	b672      	cpsid	i
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	b662      	cpsie	i
 800daf4:	60bb      	str	r3, [r7, #8]
 800daf6:	e7fe      	b.n	800daf6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dafc:	1e5a      	subs	r2, r3, #1
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d044      	beq.n	800db98 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db12:	2b00      	cmp	r3, #0
 800db14:	d140      	bne.n	800db98 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	3304      	adds	r3, #4
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fe f9b8 	bl	800be90 <uxListRemove>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d115      	bne.n	800db52 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2a:	491f      	ldr	r1, [pc, #124]	; (800dba8 <xTaskPriorityDisinherit+0x108>)
 800db2c:	4613      	mov	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	440b      	add	r3, r1
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10a      	bne.n	800db52 <xTaskPriorityDisinherit+0xb2>
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db40:	2201      	movs	r2, #1
 800db42:	fa02 f303 	lsl.w	r3, r2, r3
 800db46:	43da      	mvns	r2, r3
 800db48:	4b18      	ldr	r3, [pc, #96]	; (800dbac <xTaskPriorityDisinherit+0x10c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4013      	ands	r3, r2
 800db4e:	4a17      	ldr	r2, [pc, #92]	; (800dbac <xTaskPriorityDisinherit+0x10c>)
 800db50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5e:	f1c3 0207 	rsb	r2, r3, #7
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6a:	2201      	movs	r2, #1
 800db6c:	409a      	lsls	r2, r3
 800db6e:	4b0f      	ldr	r3, [pc, #60]	; (800dbac <xTaskPriorityDisinherit+0x10c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4313      	orrs	r3, r2
 800db74:	4a0d      	ldr	r2, [pc, #52]	; (800dbac <xTaskPriorityDisinherit+0x10c>)
 800db76:	6013      	str	r3, [r2, #0]
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7c:	4613      	mov	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	4a08      	ldr	r2, [pc, #32]	; (800dba8 <xTaskPriorityDisinherit+0x108>)
 800db86:	441a      	add	r2, r3
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	3304      	adds	r3, #4
 800db8c:	4619      	mov	r1, r3
 800db8e:	4610      	mov	r0, r2
 800db90:	f7fe f921 	bl	800bdd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db98:	697b      	ldr	r3, [r7, #20]
	}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3718      	adds	r7, #24
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	200003bc 	.word	0x200003bc
 800dba8:	200003c0 	.word	0x200003c0
 800dbac:	200004c4 	.word	0x200004c4

0800dbb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b088      	sub	sp, #32
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f000 8085 	beq.w	800dcd4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10b      	bne.n	800dbea <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	b672      	cpsid	i
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	b662      	cpsie	i
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	e7fe      	b.n	800dbe8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d902      	bls.n	800dbfa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	61fb      	str	r3, [r7, #28]
 800dbf8:	e002      	b.n	800dc00 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbfe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc04:	69fa      	ldr	r2, [r7, #28]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d064      	beq.n	800dcd4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d15f      	bne.n	800dcd4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dc14:	4b31      	ldr	r3, [pc, #196]	; (800dcdc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d10b      	bne.n	800dc36 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc22:	b672      	cpsid	i
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	b662      	cpsie	i
 800dc32:	60bb      	str	r3, [r7, #8]
 800dc34:	e7fe      	b.n	800dc34 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	69fa      	ldr	r2, [r7, #28]
 800dc40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	db04      	blt.n	800dc54 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	f1c3 0207 	rsb	r2, r3, #7
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	6959      	ldr	r1, [r3, #20]
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4a1f      	ldr	r2, [pc, #124]	; (800dce0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dc64:	4413      	add	r3, r2
 800dc66:	4299      	cmp	r1, r3
 800dc68:	d134      	bne.n	800dcd4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fe f90e 	bl	800be90 <uxListRemove>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d115      	bne.n	800dca6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7e:	4918      	ldr	r1, [pc, #96]	; (800dce0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dc80:	4613      	mov	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	440b      	add	r3, r1
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10a      	bne.n	800dca6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc94:	2201      	movs	r2, #1
 800dc96:	fa02 f303 	lsl.w	r3, r2, r3
 800dc9a:	43da      	mvns	r2, r3
 800dc9c:	4b11      	ldr	r3, [pc, #68]	; (800dce4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4013      	ands	r3, r2
 800dca2:	4a10      	ldr	r2, [pc, #64]	; (800dce4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dca4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcaa:	2201      	movs	r2, #1
 800dcac:	409a      	lsls	r2, r3
 800dcae:	4b0d      	ldr	r3, [pc, #52]	; (800dce4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	4a0b      	ldr	r2, [pc, #44]	; (800dce4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4413      	add	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4a06      	ldr	r2, [pc, #24]	; (800dce0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dcc6:	441a      	add	r2, r3
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	3304      	adds	r3, #4
 800dccc:	4619      	mov	r1, r3
 800dcce:	4610      	mov	r0, r2
 800dcd0:	f7fe f881 	bl	800bdd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcd4:	bf00      	nop
 800dcd6:	3720      	adds	r7, #32
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	200003bc 	.word	0x200003bc
 800dce0:	200003c0 	.word	0x200003c0
 800dce4:	200004c4 	.word	0x200004c4

0800dce8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dcec:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d004      	beq.n	800dcfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dcf4:	4b05      	ldr	r3, [pc, #20]	; (800dd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcfa:	3201      	adds	r2, #1
 800dcfc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800dcfe:	4b03      	ldr	r3, [pc, #12]	; (800dd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800dd00:	681b      	ldr	r3, [r3, #0]
	}
 800dd02:	4618      	mov	r0, r3
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	200003bc 	.word	0x200003bc

0800dd10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd1a:	4b29      	ldr	r3, [pc, #164]	; (800ddc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd20:	4b28      	ldr	r3, [pc, #160]	; (800ddc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3304      	adds	r3, #4
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fe f8b2 	bl	800be90 <uxListRemove>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10b      	bne.n	800dd4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dd32:	4b24      	ldr	r3, [pc, #144]	; (800ddc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd38:	2201      	movs	r2, #1
 800dd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd3e:	43da      	mvns	r2, r3
 800dd40:	4b21      	ldr	r3, [pc, #132]	; (800ddc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4013      	ands	r3, r2
 800dd46:	4a20      	ldr	r2, [pc, #128]	; (800ddc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd50:	d10a      	bne.n	800dd68 <prvAddCurrentTaskToDelayedList+0x58>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d007      	beq.n	800dd68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd58:	4b1a      	ldr	r3, [pc, #104]	; (800ddc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4619      	mov	r1, r3
 800dd60:	481a      	ldr	r0, [pc, #104]	; (800ddcc <prvAddCurrentTaskToDelayedList+0xbc>)
 800dd62:	f7fe f838 	bl	800bdd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd66:	e026      	b.n	800ddb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd70:	4b14      	ldr	r3, [pc, #80]	; (800ddc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d209      	bcs.n	800dd94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd80:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	3304      	adds	r3, #4
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	f7fe f846 	bl	800be1e <vListInsert>
}
 800dd92:	e010      	b.n	800ddb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd94:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	4b0a      	ldr	r3, [pc, #40]	; (800ddc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f7fe f83c 	bl	800be1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dda6:	4b0c      	ldr	r3, [pc, #48]	; (800ddd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d202      	bcs.n	800ddb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ddb0:	4a09      	ldr	r2, [pc, #36]	; (800ddd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	6013      	str	r3, [r2, #0]
}
 800ddb6:	bf00      	nop
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	200004c0 	.word	0x200004c0
 800ddc4:	200003bc 	.word	0x200003bc
 800ddc8:	200004c4 	.word	0x200004c4
 800ddcc:	200004a8 	.word	0x200004a8
 800ddd0:	20000478 	.word	0x20000478
 800ddd4:	20000474 	.word	0x20000474
 800ddd8:	200004dc 	.word	0x200004dc

0800dddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	3b04      	subs	r3, #4
 800ddec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ddf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	3b04      	subs	r3, #4
 800ddfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f023 0201 	bic.w	r2, r3, #1
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3b04      	subs	r3, #4
 800de0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de0c:	4a0c      	ldr	r2, [pc, #48]	; (800de40 <pxPortInitialiseStack+0x64>)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3b14      	subs	r3, #20
 800de16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3b04      	subs	r3, #4
 800de22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f06f 0202 	mvn.w	r2, #2
 800de2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	3b20      	subs	r3, #32
 800de30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de32:	68fb      	ldr	r3, [r7, #12]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	0800de45 	.word	0x0800de45

0800de44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800de4a:	2300      	movs	r3, #0
 800de4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de4e:	4b13      	ldr	r3, [pc, #76]	; (800de9c <prvTaskExitError+0x58>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de56:	d00b      	beq.n	800de70 <prvTaskExitError+0x2c>
 800de58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5c:	b672      	cpsid	i
 800de5e:	f383 8811 	msr	BASEPRI, r3
 800de62:	f3bf 8f6f 	isb	sy
 800de66:	f3bf 8f4f 	dsb	sy
 800de6a:	b662      	cpsie	i
 800de6c:	60fb      	str	r3, [r7, #12]
 800de6e:	e7fe      	b.n	800de6e <prvTaskExitError+0x2a>
 800de70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de74:	b672      	cpsid	i
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	f3bf 8f6f 	isb	sy
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	b662      	cpsie	i
 800de84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de86:	bf00      	nop
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d0fc      	beq.n	800de88 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de8e:	bf00      	nop
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	20000024 	.word	0x20000024

0800dea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dea0:	4b07      	ldr	r3, [pc, #28]	; (800dec0 <pxCurrentTCBConst2>)
 800dea2:	6819      	ldr	r1, [r3, #0]
 800dea4:	6808      	ldr	r0, [r1, #0]
 800dea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deaa:	f380 8809 	msr	PSP, r0
 800deae:	f3bf 8f6f 	isb	sy
 800deb2:	f04f 0000 	mov.w	r0, #0
 800deb6:	f380 8811 	msr	BASEPRI, r0
 800deba:	4770      	bx	lr
 800debc:	f3af 8000 	nop.w

0800dec0 <pxCurrentTCBConst2>:
 800dec0:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dec4:	bf00      	nop
 800dec6:	bf00      	nop

0800dec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dec8:	4808      	ldr	r0, [pc, #32]	; (800deec <prvPortStartFirstTask+0x24>)
 800deca:	6800      	ldr	r0, [r0, #0]
 800decc:	6800      	ldr	r0, [r0, #0]
 800dece:	f380 8808 	msr	MSP, r0
 800ded2:	f04f 0000 	mov.w	r0, #0
 800ded6:	f380 8814 	msr	CONTROL, r0
 800deda:	b662      	cpsie	i
 800dedc:	b661      	cpsie	f
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	df00      	svc	0
 800dee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800deea:	bf00      	nop
 800deec:	e000ed08 	.word	0xe000ed08

0800def0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800def6:	4b36      	ldr	r3, [pc, #216]	; (800dfd0 <xPortStartScheduler+0xe0>)
 800def8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	b2db      	uxtb	r3, r3
 800df00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	22ff      	movs	r2, #255	; 0xff
 800df06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df10:	78fb      	ldrb	r3, [r7, #3]
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	4b2e      	ldr	r3, [pc, #184]	; (800dfd4 <xPortStartScheduler+0xe4>)
 800df1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df1e:	4b2e      	ldr	r3, [pc, #184]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df20:	2207      	movs	r2, #7
 800df22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df24:	e009      	b.n	800df3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800df26:	4b2c      	ldr	r3, [pc, #176]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	4a2a      	ldr	r2, [pc, #168]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df30:	78fb      	ldrb	r3, [r7, #3]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	b2db      	uxtb	r3, r3
 800df38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df3a:	78fb      	ldrb	r3, [r7, #3]
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df42:	2b80      	cmp	r3, #128	; 0x80
 800df44:	d0ef      	beq.n	800df26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df46:	4b24      	ldr	r3, [pc, #144]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f1c3 0307 	rsb	r3, r3, #7
 800df4e:	2b04      	cmp	r3, #4
 800df50:	d00b      	beq.n	800df6a <xPortStartScheduler+0x7a>
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	b672      	cpsid	i
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	b662      	cpsie	i
 800df66:	60bb      	str	r3, [r7, #8]
 800df68:	e7fe      	b.n	800df68 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df6a:	4b1b      	ldr	r3, [pc, #108]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	021b      	lsls	r3, r3, #8
 800df70:	4a19      	ldr	r2, [pc, #100]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df74:	4b18      	ldr	r3, [pc, #96]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df7c:	4a16      	ldr	r2, [pc, #88]	; (800dfd8 <xPortStartScheduler+0xe8>)
 800df7e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	b2da      	uxtb	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df88:	4b14      	ldr	r3, [pc, #80]	; (800dfdc <xPortStartScheduler+0xec>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a13      	ldr	r2, [pc, #76]	; (800dfdc <xPortStartScheduler+0xec>)
 800df8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df94:	4b11      	ldr	r3, [pc, #68]	; (800dfdc <xPortStartScheduler+0xec>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a10      	ldr	r2, [pc, #64]	; (800dfdc <xPortStartScheduler+0xec>)
 800df9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800df9e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dfa0:	f000 f8d4 	bl	800e14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dfa4:	4b0e      	ldr	r3, [pc, #56]	; (800dfe0 <xPortStartScheduler+0xf0>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dfaa:	f000 f8f3 	bl	800e194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfae:	4b0d      	ldr	r3, [pc, #52]	; (800dfe4 <xPortStartScheduler+0xf4>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4a0c      	ldr	r2, [pc, #48]	; (800dfe4 <xPortStartScheduler+0xf4>)
 800dfb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dfb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfba:	f7ff ff85 	bl	800dec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfbe:	f7ff fa69 	bl	800d494 <vTaskSwitchContext>
	prvTaskExitError();
 800dfc2:	f7ff ff3f 	bl	800de44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	e000e400 	.word	0xe000e400
 800dfd4:	200004e8 	.word	0x200004e8
 800dfd8:	200004ec 	.word	0x200004ec
 800dfdc:	e000ed20 	.word	0xe000ed20
 800dfe0:	20000024 	.word	0x20000024
 800dfe4:	e000ef34 	.word	0xe000ef34

0800dfe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	b672      	cpsid	i
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	b662      	cpsie	i
 800e002:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e004:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <vPortEnterCritical+0x5c>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3301      	adds	r3, #1
 800e00a:	4a0e      	ldr	r2, [pc, #56]	; (800e044 <vPortEnterCritical+0x5c>)
 800e00c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e00e:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <vPortEnterCritical+0x5c>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d110      	bne.n	800e038 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e016:	4b0c      	ldr	r3, [pc, #48]	; (800e048 <vPortEnterCritical+0x60>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00b      	beq.n	800e038 <vPortEnterCritical+0x50>
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	b672      	cpsid	i
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	b662      	cpsie	i
 800e034:	603b      	str	r3, [r7, #0]
 800e036:	e7fe      	b.n	800e036 <vPortEnterCritical+0x4e>
	}
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	20000024 	.word	0x20000024
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e052:	4b12      	ldr	r3, [pc, #72]	; (800e09c <vPortExitCritical+0x50>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10b      	bne.n	800e072 <vPortExitCritical+0x26>
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	b672      	cpsid	i
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	b662      	cpsie	i
 800e06e:	607b      	str	r3, [r7, #4]
 800e070:	e7fe      	b.n	800e070 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e072:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <vPortExitCritical+0x50>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3b01      	subs	r3, #1
 800e078:	4a08      	ldr	r2, [pc, #32]	; (800e09c <vPortExitCritical+0x50>)
 800e07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e07c:	4b07      	ldr	r3, [pc, #28]	; (800e09c <vPortExitCritical+0x50>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d104      	bne.n	800e08e <vPortExitCritical+0x42>
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e08e:	bf00      	nop
 800e090:	370c      	adds	r7, #12
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	20000024 	.word	0x20000024

0800e0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0a0:	f3ef 8009 	mrs	r0, PSP
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	4b15      	ldr	r3, [pc, #84]	; (800e100 <pxCurrentTCBConst>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	f01e 0f10 	tst.w	lr, #16
 800e0b0:	bf08      	it	eq
 800e0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ba:	6010      	str	r0, [r2, #0]
 800e0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e0c4:	b672      	cpsid	i
 800e0c6:	f380 8811 	msr	BASEPRI, r0
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	b662      	cpsie	i
 800e0d4:	f7ff f9de 	bl	800d494 <vTaskSwitchContext>
 800e0d8:	f04f 0000 	mov.w	r0, #0
 800e0dc:	f380 8811 	msr	BASEPRI, r0
 800e0e0:	bc09      	pop	{r0, r3}
 800e0e2:	6819      	ldr	r1, [r3, #0]
 800e0e4:	6808      	ldr	r0, [r1, #0]
 800e0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ea:	f01e 0f10 	tst.w	lr, #16
 800e0ee:	bf08      	it	eq
 800e0f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e0f4:	f380 8809 	msr	PSP, r0
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop

0800e100 <pxCurrentTCBConst>:
 800e100:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop

0800e108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	b672      	cpsid	i
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	b662      	cpsie	i
 800e122:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e124:	f7ff f8fc 	bl	800d320 <xTaskIncrementTick>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d003      	beq.n	800e136 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e12e:	4b06      	ldr	r3, [pc, #24]	; (800e148 <SysTick_Handler+0x40>)
 800e130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	2300      	movs	r3, #0
 800e138:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e140:	bf00      	nop
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	e000ed04 	.word	0xe000ed04

0800e14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e156:	4b0b      	ldr	r3, [pc, #44]	; (800e184 <vPortSetupTimerInterrupt+0x38>)
 800e158:	2200      	movs	r2, #0
 800e15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e15c:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <vPortSetupTimerInterrupt+0x3c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a0a      	ldr	r2, [pc, #40]	; (800e18c <vPortSetupTimerInterrupt+0x40>)
 800e162:	fba2 2303 	umull	r2, r3, r2, r3
 800e166:	099b      	lsrs	r3, r3, #6
 800e168:	4a09      	ldr	r2, [pc, #36]	; (800e190 <vPortSetupTimerInterrupt+0x44>)
 800e16a:	3b01      	subs	r3, #1
 800e16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e16e:	4b04      	ldr	r3, [pc, #16]	; (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e170:	2207      	movs	r2, #7
 800e172:	601a      	str	r2, [r3, #0]
}
 800e174:	bf00      	nop
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	e000e010 	.word	0xe000e010
 800e184:	e000e018 	.word	0xe000e018
 800e188:	20000018 	.word	0x20000018
 800e18c:	10624dd3 	.word	0x10624dd3
 800e190:	e000e014 	.word	0xe000e014

0800e194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e1a4 <vPortEnableVFP+0x10>
 800e198:	6801      	ldr	r1, [r0, #0]
 800e19a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e19e:	6001      	str	r1, [r0, #0]
 800e1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1a2:	bf00      	nop
 800e1a4:	e000ed88 	.word	0xe000ed88

0800e1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1ae:	f3ef 8305 	mrs	r3, IPSR
 800e1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b0f      	cmp	r3, #15
 800e1b8:	d915      	bls.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1ba:	4a18      	ldr	r2, [pc, #96]	; (800e21c <vPortValidateInterruptPriority+0x74>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1c4:	4b16      	ldr	r3, [pc, #88]	; (800e220 <vPortValidateInterruptPriority+0x78>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	7afa      	ldrb	r2, [r7, #11]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d20b      	bcs.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	b672      	cpsid	i
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	b662      	cpsie	i
 800e1e2:	607b      	str	r3, [r7, #4]
 800e1e4:	e7fe      	b.n	800e1e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	; (800e224 <vPortValidateInterruptPriority+0x7c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	; (800e228 <vPortValidateInterruptPriority+0x80>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d90b      	bls.n	800e20e <vPortValidateInterruptPriority+0x66>
 800e1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fa:	b672      	cpsid	i
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	b662      	cpsie	i
 800e20a:	603b      	str	r3, [r7, #0]
 800e20c:	e7fe      	b.n	800e20c <vPortValidateInterruptPriority+0x64>
	}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	e000e3f0 	.word	0xe000e3f0
 800e220:	200004e8 	.word	0x200004e8
 800e224:	e000ed0c 	.word	0xe000ed0c
 800e228:	200004ec 	.word	0x200004ec

0800e22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e238:	f7fe ffa4 	bl	800d184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e23c:	4b5c      	ldr	r3, [pc, #368]	; (800e3b0 <pvPortMalloc+0x184>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e244:	f000 f91a 	bl	800e47c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e248:	4b5a      	ldr	r3, [pc, #360]	; (800e3b4 <pvPortMalloc+0x188>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4013      	ands	r3, r2
 800e250:	2b00      	cmp	r3, #0
 800e252:	f040 8090 	bne.w	800e376 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d01e      	beq.n	800e29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e25c:	2208      	movs	r2, #8
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4413      	add	r3, r2
 800e262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d015      	beq.n	800e29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f023 0307 	bic.w	r3, r3, #7
 800e274:	3308      	adds	r3, #8
 800e276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <pvPortMalloc+0x6e>
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	b672      	cpsid	i
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	b662      	cpsie	i
 800e296:	617b      	str	r3, [r7, #20]
 800e298:	e7fe      	b.n	800e298 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d06a      	beq.n	800e376 <pvPortMalloc+0x14a>
 800e2a0:	4b45      	ldr	r3, [pc, #276]	; (800e3b8 <pvPortMalloc+0x18c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d865      	bhi.n	800e376 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2aa:	4b44      	ldr	r3, [pc, #272]	; (800e3bc <pvPortMalloc+0x190>)
 800e2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2ae:	4b43      	ldr	r3, [pc, #268]	; (800e3bc <pvPortMalloc+0x190>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2b4:	e004      	b.n	800e2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d903      	bls.n	800e2d2 <pvPortMalloc+0xa6>
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1f1      	bne.n	800e2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2d2:	4b37      	ldr	r3, [pc, #220]	; (800e3b0 <pvPortMalloc+0x184>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d04c      	beq.n	800e376 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2208      	movs	r2, #8
 800e2e2:	4413      	add	r3, r2
 800e2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	1ad2      	subs	r2, r2, r3
 800e2f6:	2308      	movs	r3, #8
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d920      	bls.n	800e340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4413      	add	r3, r2
 800e304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	f003 0307 	and.w	r3, r3, #7
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00b      	beq.n	800e328 <pvPortMalloc+0xfc>
 800e310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e314:	b672      	cpsid	i
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	b662      	cpsie	i
 800e324:	613b      	str	r3, [r7, #16]
 800e326:	e7fe      	b.n	800e326 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	1ad2      	subs	r2, r2, r3
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e33a:	69b8      	ldr	r0, [r7, #24]
 800e33c:	f000 f900 	bl	800e540 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e340:	4b1d      	ldr	r3, [pc, #116]	; (800e3b8 <pvPortMalloc+0x18c>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	4a1b      	ldr	r2, [pc, #108]	; (800e3b8 <pvPortMalloc+0x18c>)
 800e34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e34e:	4b1a      	ldr	r3, [pc, #104]	; (800e3b8 <pvPortMalloc+0x18c>)
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	4b1b      	ldr	r3, [pc, #108]	; (800e3c0 <pvPortMalloc+0x194>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d203      	bcs.n	800e362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e35a:	4b17      	ldr	r3, [pc, #92]	; (800e3b8 <pvPortMalloc+0x18c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a18      	ldr	r2, [pc, #96]	; (800e3c0 <pvPortMalloc+0x194>)
 800e360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <pvPortMalloc+0x188>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	431a      	orrs	r2, r3
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e376:	f7fe ff13 	bl	800d1a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e380:	f7f2 f928 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <pvPortMalloc+0x17a>
 800e38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e392:	b672      	cpsid	i
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	b662      	cpsie	i
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	e7fe      	b.n	800e3a4 <pvPortMalloc+0x178>
	return pvReturn;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3728      	adds	r7, #40	; 0x28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	200084f8 	.word	0x200084f8
 800e3b4:	20008504 	.word	0x20008504
 800e3b8:	200084fc 	.word	0x200084fc
 800e3bc:	200084f0 	.word	0x200084f0
 800e3c0:	20008500 	.word	0x20008500

0800e3c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d04a      	beq.n	800e46c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3d6:	2308      	movs	r3, #8
 800e3d8:	425b      	negs	r3, r3
 800e3da:	697a      	ldr	r2, [r7, #20]
 800e3dc:	4413      	add	r3, r2
 800e3de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	685a      	ldr	r2, [r3, #4]
 800e3e8:	4b22      	ldr	r3, [pc, #136]	; (800e474 <vPortFree+0xb0>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10b      	bne.n	800e40a <vPortFree+0x46>
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	b672      	cpsid	i
 800e3f8:	f383 8811 	msr	BASEPRI, r3
 800e3fc:	f3bf 8f6f 	isb	sy
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	b662      	cpsie	i
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	e7fe      	b.n	800e408 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00b      	beq.n	800e42a <vPortFree+0x66>
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	b672      	cpsid	i
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	b662      	cpsie	i
 800e426:	60bb      	str	r3, [r7, #8]
 800e428:	e7fe      	b.n	800e428 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	4b11      	ldr	r3, [pc, #68]	; (800e474 <vPortFree+0xb0>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4013      	ands	r3, r2
 800e434:	2b00      	cmp	r3, #0
 800e436:	d019      	beq.n	800e46c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d115      	bne.n	800e46c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	685a      	ldr	r2, [r3, #4]
 800e444:	4b0b      	ldr	r3, [pc, #44]	; (800e474 <vPortFree+0xb0>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	43db      	mvns	r3, r3
 800e44a:	401a      	ands	r2, r3
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e450:	f7fe fe98 	bl	800d184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	685a      	ldr	r2, [r3, #4]
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <vPortFree+0xb4>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4413      	add	r3, r2
 800e45e:	4a06      	ldr	r2, [pc, #24]	; (800e478 <vPortFree+0xb4>)
 800e460:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e462:	6938      	ldr	r0, [r7, #16]
 800e464:	f000 f86c 	bl	800e540 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e468:	f7fe fe9a 	bl	800d1a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e46c:	bf00      	nop
 800e46e:	3718      	adds	r7, #24
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	20008504 	.word	0x20008504
 800e478:	200084fc 	.word	0x200084fc

0800e47c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e486:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e488:	4b27      	ldr	r3, [pc, #156]	; (800e528 <prvHeapInit+0xac>)
 800e48a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f003 0307 	and.w	r3, r3, #7
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00c      	beq.n	800e4b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	3307      	adds	r3, #7
 800e49a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f023 0307 	bic.w	r3, r3, #7
 800e4a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4a4:	68ba      	ldr	r2, [r7, #8]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	4a1f      	ldr	r2, [pc, #124]	; (800e528 <prvHeapInit+0xac>)
 800e4ac:	4413      	add	r3, r2
 800e4ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4b4:	4a1d      	ldr	r2, [pc, #116]	; (800e52c <prvHeapInit+0xb0>)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4ba:	4b1c      	ldr	r3, [pc, #112]	; (800e52c <prvHeapInit+0xb0>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4c8:	2208      	movs	r2, #8
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	1a9b      	subs	r3, r3, r2
 800e4ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f023 0307 	bic.w	r3, r3, #7
 800e4d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	4a15      	ldr	r2, [pc, #84]	; (800e530 <prvHeapInit+0xb4>)
 800e4dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4de:	4b14      	ldr	r3, [pc, #80]	; (800e530 <prvHeapInit+0xb4>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4e6:	4b12      	ldr	r3, [pc, #72]	; (800e530 <prvHeapInit+0xb4>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	1ad2      	subs	r2, r2, r3
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4fc:	4b0c      	ldr	r3, [pc, #48]	; (800e530 <prvHeapInit+0xb4>)
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	4a0a      	ldr	r2, [pc, #40]	; (800e534 <prvHeapInit+0xb8>)
 800e50a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	4a09      	ldr	r2, [pc, #36]	; (800e538 <prvHeapInit+0xbc>)
 800e512:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e514:	4b09      	ldr	r3, [pc, #36]	; (800e53c <prvHeapInit+0xc0>)
 800e516:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e51a:	601a      	str	r2, [r3, #0]
}
 800e51c:	bf00      	nop
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	200004f0 	.word	0x200004f0
 800e52c:	200084f0 	.word	0x200084f0
 800e530:	200084f8 	.word	0x200084f8
 800e534:	20008500 	.word	0x20008500
 800e538:	200084fc 	.word	0x200084fc
 800e53c:	20008504 	.word	0x20008504

0800e540 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e548:	4b28      	ldr	r3, [pc, #160]	; (800e5ec <prvInsertBlockIntoFreeList+0xac>)
 800e54a:	60fb      	str	r3, [r7, #12]
 800e54c:	e002      	b.n	800e554 <prvInsertBlockIntoFreeList+0x14>
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d8f7      	bhi.n	800e54e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	68ba      	ldr	r2, [r7, #8]
 800e568:	4413      	add	r3, r2
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d108      	bne.n	800e582 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	441a      	add	r2, r3
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	441a      	add	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	429a      	cmp	r2, r3
 800e594:	d118      	bne.n	800e5c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	4b15      	ldr	r3, [pc, #84]	; (800e5f0 <prvInsertBlockIntoFreeList+0xb0>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d00d      	beq.n	800e5be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685a      	ldr	r2, [r3, #4]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	441a      	add	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	601a      	str	r2, [r3, #0]
 800e5bc:	e008      	b.n	800e5d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5be:	4b0c      	ldr	r3, [pc, #48]	; (800e5f0 <prvInsertBlockIntoFreeList+0xb0>)
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	601a      	str	r2, [r3, #0]
 800e5c6:	e003      	b.n	800e5d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d002      	beq.n	800e5de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5de:	bf00      	nop
 800e5e0:	3714      	adds	r7, #20
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	200084f0 	.word	0x200084f0
 800e5f0:	200084f8 	.word	0x200084f8

0800e5f4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800e5f8:	f005 fbd4 	bl	8013da4 <touchgfx_init>
}
 800e5fc:	bf00      	nop
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800e604:	f005 fbf8 	bl	8013df8 <touchgfx_taskEntry>
}
 800e608:	bf00      	nop
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
    {
 800e614:	4a04      	ldr	r2, [pc, #16]	; (800e628 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	601a      	str	r2, [r3, #0]
    }
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4618      	mov	r0, r3
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	08025a24 	.word	0x08025a24

0800e62c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
    }
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f7ff ffe9 	bl	800e60c <_ZN8touchgfx12FontProviderD1Ev>
 800e63a:	2104      	movs	r1, #4
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f015 fdd8 	bl	80241f2 <_ZdlPvj>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4618      	mov	r0, r3
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800e658:	887b      	ldrh	r3, [r7, #2]
 800e65a:	2b07      	cmp	r3, #7
 800e65c:	d83a      	bhi.n	800e6d4 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800e65e:	a201      	add	r2, pc, #4	; (adr r2, 800e664 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800e660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e664:	0800e685 	.word	0x0800e685
 800e668:	0800e68f 	.word	0x0800e68f
 800e66c:	0800e699 	.word	0x0800e699
 800e670:	0800e6a3 	.word	0x0800e6a3
 800e674:	0800e6ad 	.word	0x0800e6ad
 800e678:	0800e6b7 	.word	0x0800e6b7
 800e67c:	0800e6c1 	.word	0x0800e6c1
 800e680:	0800e6cb 	.word	0x0800e6cb
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800e684:	f003 fc22 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e688:	4603      	mov	r3, r0
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	e023      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e68e:	f003 fc1d 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e692:	4603      	mov	r3, r0
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	e01e      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e698:	f003 fc18 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e69c:	4603      	mov	r3, r0
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	e019      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e6a2:	f003 fc13 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	e014      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800e6ac:	f003 fc0e 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	e00f      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800e6b6:	f003 fc09 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	e00a      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800e6c0:	f003 fc04 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	695b      	ldr	r3, [r3, #20]
 800e6c8:	e005      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800e6ca:	f003 fbff 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	e000      	b.n	800e6d6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800e6d4:	2300      	movs	r3, #0
    }
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop

0800e6e0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	4a05      	ldr	r2, [pc, #20]	; (800e700 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	601a      	str	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7ff ff8b 	bl	800e60c <_ZN8touchgfx12FontProviderD1Ev>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	08025a10 	.word	0x08025a10

0800e704 <_ZN23ApplicationFontProviderD0Ev>:
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7ff ffe7 	bl	800e6e0 <_ZN23ApplicationFontProviderD1Ev>
 800e712:	2104      	movs	r1, #4
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f015 fd6c 	bl	80241f2 <_ZdlPvj>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	4a04      	ldr	r2, [pc, #16]	; (800e740 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	601a      	str	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	08027cc4 	.word	0x08027cc4

0800e744 <_ZN8touchgfx4FontD0Ev>:
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff ffe9 	bl	800e724 <_ZN8touchgfx4FontD1Ev>
 800e752:	2110      	movs	r1, #16
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f015 fd4c 	bl	80241f2 <_ZdlPvj>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e764:	b590      	push	{r4, r7, lr}
 800e766:	b087      	sub	sp, #28
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3308      	adds	r3, #8
 800e77e:	681c      	ldr	r4, [r3, #0]
 800e780:	f107 030f 	add.w	r3, r7, #15
 800e784:	f107 0210 	add.w	r2, r7, #16
 800e788:	8879      	ldrh	r1, [r7, #2]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	47a0      	blx	r4
 800e78e:	6178      	str	r0, [r7, #20]
        return glyph;
 800e790:	697b      	ldr	r3, [r7, #20]
    }
 800e792:	4618      	mov	r0, r3
 800e794:	371c      	adds	r7, #28
 800e796:	46bd      	mov	sp, r7
 800e798:	bd90      	pop	{r4, r7, pc}

0800e79a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e79a:	b480      	push	{r7}
 800e79c:	b083      	sub	sp, #12
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	895b      	ldrh	r3, [r3, #10]
    }
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e7b2:	b480      	push	{r7}
 800e7b4:	b083      	sub	sp, #12
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	899b      	ldrh	r3, [r3, #12]
    }
 800e7be:	4618      	mov	r0, r3
 800e7c0:	370c      	adds	r7, #12
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	889b      	ldrh	r3, [r3, #4]
    }
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	889a      	ldrh	r2, [r3, #4]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	799b      	ldrb	r3, [r3, #6]
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	4413      	add	r3, r2
 800e7f6:	b29b      	uxth	r3, r3
    }
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	79db      	ldrb	r3, [r3, #7]
 800e810:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e814:	b2db      	uxtb	r3, r3
    }
 800e816:	4618      	mov	r0, r3
 800e818:	370c      	adds	r7, #12
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800e822:	b480      	push	{r7}
 800e824:	b083      	sub	sp, #12
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	79db      	ldrb	r3, [r3, #7]
 800e82e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e832:	b2db      	uxtb	r3, r3
    }
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	4a05      	ldr	r2, [pc, #20]	; (800e860 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4618      	mov	r0, r3
 800e852:	f7ff ff67 	bl	800e724 <_ZN8touchgfx4FontD1Ev>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4618      	mov	r0, r3
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	08027d7c 	.word	0x08027d7c

0800e864 <_ZN8touchgfx9ConstFontD0Ev>:
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7ff ffe7 	bl	800e840 <_ZN8touchgfx9ConstFontD1Ev>
 800e872:	2118      	movs	r1, #24
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f015 fcbc 	bl	80241f2 <_ZdlPvj>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4618      	mov	r0, r3
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	4a05      	ldr	r2, [pc, #20]	; (800e8a4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff ffd3 	bl	800e840 <_ZN8touchgfx9ConstFontD1Ev>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4618      	mov	r0, r3
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	08025a68 	.word	0x08025a68

0800e8a8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7ff ffe7 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e8b6:	2124      	movs	r1, #36	; 0x24
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f015 fc9a 	bl	80241f2 <_ZdlPvj>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 f82d 	bl	800e930 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e8d6:	4b08      	ldr	r3, [pc, #32]	; (800e8f8 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	4b08      	ldr	r3, [pc, #32]	; (800e8fc <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800e8dc:	6819      	ldr	r1, [r3, #0]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	440b      	add	r3, r1
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	681b      	ldr	r3, [r3, #0]
    }
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	2000bd10 	.word	0x2000bd10
 800e8fc:	2000bd08 	.word	0x2000bd08

0800e900 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 f811 	bl	800e930 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800e90e:	4b07      	ldr	r3, [pc, #28]	; (800e92c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	4413      	add	r3, r2
 800e91a:	785b      	ldrb	r3, [r3, #1]
 800e91c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e920:	b2db      	uxtb	r3, r3
    }
 800e922:	4618      	mov	r0, r3
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	2000bd08 	.word	0x2000bd08

0800e930 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e938:	4b0c      	ldr	r3, [pc, #48]	; (800e96c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d105      	bne.n	800e94c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800e940:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800e942:	4a0c      	ldr	r2, [pc, #48]	; (800e974 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e944:	21de      	movs	r1, #222	; 0xde
 800e946:	480c      	ldr	r0, [pc, #48]	; (800e978 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e948:	f015 fc7e 	bl	8024248 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	881a      	ldrh	r2, [r3, #0]
 800e950:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800e952:	881b      	ldrh	r3, [r3, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d305      	bcc.n	800e964 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800e958:	4b09      	ldr	r3, [pc, #36]	; (800e980 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800e95a:	4a06      	ldr	r2, [pc, #24]	; (800e974 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e95c:	21df      	movs	r1, #223	; 0xdf
 800e95e:	4806      	ldr	r0, [pc, #24]	; (800e978 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e960:	f015 fc72 	bl	8024248 <__assert_func>
    }
 800e964:	bf00      	nop
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	2000bd08 	.word	0x2000bd08
 800e970:	080252f8 	.word	0x080252f8
 800e974:	08025a30 	.word	0x08025a30
 800e978:	0802533c 	.word	0x0802533c
 800e97c:	2000bd0c 	.word	0x2000bd0c
 800e980:	08025380 	.word	0x08025380

0800e984 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	7b5b      	ldrb	r3, [r3, #13]
 800e990:	021b      	lsls	r3, r3, #8
 800e992:	b21b      	sxth	r3, r3
 800e994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e998:	b21a      	sxth	r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7adb      	ldrb	r3, [r3, #11]
 800e99e:	b21b      	sxth	r3, r3
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	b21b      	sxth	r3, r3
 800e9a4:	b29b      	uxth	r3, r3
    }
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e9b2:	b480      	push	{r7}
 800e9b4:	b083      	sub	sp, #12
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
    }
 800e9be:	4618      	mov	r0, r3
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
	...

0800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08c      	sub	sp, #48	; 0x30
 800e9d0:	af08      	add	r7, sp, #32
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	461a      	mov	r2, r3
 800e9da:	460b      	mov	r3, r1
 800e9dc:	80fb      	strh	r3, [r7, #6]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	88b9      	ldrh	r1, [r7, #4]
 800e9e6:	88fa      	ldrh	r2, [r7, #6]
 800e9e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e9ea:	9306      	str	r3, [sp, #24]
 800e9ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e9ee:	9305      	str	r3, [sp, #20]
 800e9f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9f4:	9304      	str	r3, [sp, #16]
 800e9f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e9fa:	9303      	str	r3, [sp, #12]
 800e9fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea00:	9302      	str	r3, [sp, #8]
 800ea02:	7f3b      	ldrb	r3, [r7, #28]
 800ea04:	9301      	str	r3, [sp, #4]
 800ea06:	7e3b      	ldrb	r3, [r7, #24]
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	68b9      	ldr	r1, [r7, #8]
 800ea0e:	f00a f90f 	bl	8018c30 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800ea12:	4a08      	ldr	r2, [pc, #32]	; (800ea34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea1c:	619a      	str	r2, [r3, #24]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea22:	61da      	str	r2, [r3, #28]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea28:	621a      	str	r2, [r3, #32]
{
}
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	08025a68 	.word	0x08025a68

0800ea38 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	889b      	ldrh	r3, [r3, #4]
 800ea4c:	0adb      	lsrs	r3, r3, #11
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	4413      	add	r3, r2
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4413      	add	r3, r2
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3714      	adds	r7, #20
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b086      	sub	sp, #24
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	460b      	mov	r3, r1
 800ea74:	607a      	str	r2, [r7, #4]
 800ea76:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7b1b      	ldrb	r3, [r3, #12]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	e023      	b.n	800ead2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7ff ff7a 	bl	800e984 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800ea90:	4603      	mov	r3, r0
 800ea92:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800ea94:	8abb      	ldrh	r3, [r7, #20]
 800ea96:	82fb      	strh	r3, [r7, #22]
 800ea98:	8afa      	ldrh	r2, [r7, #22]
 800ea9a:	8abb      	ldrh	r3, [r7, #20]
 800ea9c:	6879      	ldr	r1, [r7, #4]
 800ea9e:	7b09      	ldrb	r1, [r1, #12]
 800eaa0:	440b      	add	r3, r1
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	da14      	bge.n	800ead0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	69da      	ldr	r2, [r3, #28]
 800eaaa:	8afb      	ldrh	r3, [r7, #22]
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4413      	add	r3, r2
 800eab0:	881b      	ldrh	r3, [r3, #0]
 800eab2:	897a      	ldrh	r2, [r7, #10]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d107      	bne.n	800eac8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	69da      	ldr	r2, [r3, #28]
 800eabc:	8afb      	ldrh	r3, [r7, #22]
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	4413      	add	r3, r2
 800eac2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800eac6:	e004      	b.n	800ead2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800eac8:	8afb      	ldrh	r3, [r7, #22]
 800eaca:	3301      	adds	r3, #1
 800eacc:	82fb      	strh	r3, [r7, #22]
 800eace:	e7e3      	b.n	800ea98 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3718      	adds	r7, #24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
	...

0800eadc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800eadc:	b580      	push	{r7, lr}
 800eade:	af00      	add	r7, sp, #0
 800eae0:	4801      	ldr	r0, [pc, #4]	; (800eae8 <__tcf_0+0xc>)
 800eae2:	f7ff fecf 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	20008508 	.word	0x20008508

0800eaec <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b08a      	sub	sp, #40	; 0x28
 800eaf0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800eaf2:	4b15      	ldr	r3, [pc, #84]	; (800eb48 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 0301 	and.w	r3, r3, #1
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d11f      	bne.n	800eb3e <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800eafe:	2300      	movs	r3, #0
 800eb00:	9309      	str	r3, [sp, #36]	; 0x24
 800eb02:	2300      	movs	r3, #0
 800eb04:	9308      	str	r3, [sp, #32]
 800eb06:	233f      	movs	r3, #63	; 0x3f
 800eb08:	9307      	str	r3, [sp, #28]
 800eb0a:	4b10      	ldr	r3, [pc, #64]	; (800eb4c <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800eb0c:	9306      	str	r3, [sp, #24]
 800eb0e:	4b10      	ldr	r3, [pc, #64]	; (800eb50 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800eb10:	9305      	str	r3, [sp, #20]
 800eb12:	2301      	movs	r3, #1
 800eb14:	9304      	str	r3, [sp, #16]
 800eb16:	2300      	movs	r3, #0
 800eb18:	9303      	str	r3, [sp, #12]
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	9302      	str	r3, [sp, #8]
 800eb1e:	2304      	movs	r3, #4
 800eb20:	9301      	str	r3, [sp, #4]
 800eb22:	2300      	movs	r3, #0
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	230a      	movs	r3, #10
 800eb28:	2204      	movs	r2, #4
 800eb2a:	490a      	ldr	r1, [pc, #40]	; (800eb54 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800eb2c:	480a      	ldr	r0, [pc, #40]	; (800eb58 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800eb2e:	f7ff ff4d 	bl	800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800eb32:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800eb34:	2201      	movs	r2, #1
 800eb36:	601a      	str	r2, [r3, #0]
 800eb38:	4808      	ldr	r0, [pc, #32]	; (800eb5c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800eb3a:	f015 fba3 	bl	8024284 <atexit>
    return Asap_Bold_10_4bpp;
 800eb3e:	4b06      	ldr	r3, [pc, #24]	; (800eb58 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	2000852c 	.word	0x2000852c
 800eb4c:	0802cd28 	.word	0x0802cd28
 800eb50:	08025ab4 	.word	0x08025ab4
 800eb54:	0802cd44 	.word	0x0802cd44
 800eb58:	20008508 	.word	0x20008508
 800eb5c:	0800eadd 	.word	0x0800eadd

0800eb60 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 26, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	4801      	ldr	r0, [pc, #4]	; (800eb6c <__tcf_0+0xc>)
 800eb66:	f7ff fe8d 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	20008530 	.word	0x20008530

0800eb70 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b08a      	sub	sp, #40	; 0x28
 800eb74:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 26, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800eb76:	4b15      	ldr	r3, [pc, #84]	; (800ebcc <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d11f      	bne.n	800ebc2 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800eb82:	2300      	movs	r3, #0
 800eb84:	9309      	str	r3, [sp, #36]	; 0x24
 800eb86:	2300      	movs	r3, #0
 800eb88:	9308      	str	r3, [sp, #32]
 800eb8a:	233f      	movs	r3, #63	; 0x3f
 800eb8c:	9307      	str	r3, [sp, #28]
 800eb8e:	4b10      	ldr	r3, [pc, #64]	; (800ebd0 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800eb90:	9306      	str	r3, [sp, #24]
 800eb92:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800eb94:	9305      	str	r3, [sp, #20]
 800eb96:	2301      	movs	r3, #1
 800eb98:	9304      	str	r3, [sp, #16]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	9303      	str	r3, [sp, #12]
 800eb9e:	2301      	movs	r3, #1
 800eba0:	9302      	str	r3, [sp, #8]
 800eba2:	2304      	movs	r3, #4
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	2300      	movs	r3, #0
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	230c      	movs	r3, #12
 800ebac:	221a      	movs	r2, #26
 800ebae:	490a      	ldr	r1, [pc, #40]	; (800ebd8 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800ebb0:	480a      	ldr	r0, [pc, #40]	; (800ebdc <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800ebb2:	f7ff ff0b 	bl	800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ebb6:	4b05      	ldr	r3, [pc, #20]	; (800ebcc <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800ebb8:	2201      	movs	r2, #1
 800ebba:	601a      	str	r2, [r3, #0]
 800ebbc:	4808      	ldr	r0, [pc, #32]	; (800ebe0 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800ebbe:	f015 fb61 	bl	8024284 <atexit>
    return Asap_Bold_12_4bpp;
 800ebc2:	4b06      	ldr	r3, [pc, #24]	; (800ebdc <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	20008554 	.word	0x20008554
 800ebd0:	0802cd2c 	.word	0x0802cd2c
 800ebd4:	08025ab8 	.word	0x08025ab8
 800ebd8:	0802cd7c 	.word	0x0802cd7c
 800ebdc:	20008530 	.word	0x20008530
 800ebe0:	0800eb61 	.word	0x0800eb61

0800ebe4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	4801      	ldr	r0, [pc, #4]	; (800ebf0 <__tcf_0+0xc>)
 800ebea:	f7ff fe4b 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	20008558 	.word	0x20008558

0800ebf4 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08a      	sub	sp, #40	; 0x28
 800ebf8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800ebfa:	4b15      	ldr	r3, [pc, #84]	; (800ec50 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d11f      	bne.n	800ec46 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800ec06:	2300      	movs	r3, #0
 800ec08:	9309      	str	r3, [sp, #36]	; 0x24
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	9308      	str	r3, [sp, #32]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	9307      	str	r3, [sp, #28]
 800ec12:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800ec14:	9306      	str	r3, [sp, #24]
 800ec16:	4b10      	ldr	r3, [pc, #64]	; (800ec58 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800ec18:	9305      	str	r3, [sp, #20]
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	9304      	str	r3, [sp, #16]
 800ec1e:	2300      	movs	r3, #0
 800ec20:	9303      	str	r3, [sp, #12]
 800ec22:	2301      	movs	r3, #1
 800ec24:	9302      	str	r3, [sp, #8]
 800ec26:	2304      	movs	r3, #4
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	2312      	movs	r3, #18
 800ec30:	220d      	movs	r2, #13
 800ec32:	490a      	ldr	r1, [pc, #40]	; (800ec5c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800ec34:	480a      	ldr	r0, [pc, #40]	; (800ec60 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800ec36:	f7ff fec9 	bl	800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ec3a:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	4808      	ldr	r0, [pc, #32]	; (800ec64 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800ec42:	f015 fb1f 	bl	8024284 <atexit>
    return Asap_Bold_18_4bpp;
 800ec46:	4b06      	ldr	r3, [pc, #24]	; (800ec60 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	2000857c 	.word	0x2000857c
 800ec54:	0802cd30 	.word	0x0802cd30
 800ec58:	08025abc 	.word	0x08025abc
 800ec5c:	0802cee8 	.word	0x0802cee8
 800ec60:	20008558 	.word	0x20008558
 800ec64:	0800ebe5 	.word	0x0800ebe5

0800ec68 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	4801      	ldr	r0, [pc, #4]	; (800ec74 <__tcf_0+0xc>)
 800ec6e:	f7ff fe09 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	20008580 	.word	0x20008580

0800ec78 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08a      	sub	sp, #40	; 0x28
 800ec7c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800ec7e:	4b15      	ldr	r3, [pc, #84]	; (800ecd4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f003 0301 	and.w	r3, r3, #1
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d11f      	bne.n	800ecca <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec8e:	2300      	movs	r3, #0
 800ec90:	9308      	str	r3, [sp, #32]
 800ec92:	233f      	movs	r3, #63	; 0x3f
 800ec94:	9307      	str	r3, [sp, #28]
 800ec96:	4b10      	ldr	r3, [pc, #64]	; (800ecd8 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800ec98:	9306      	str	r3, [sp, #24]
 800ec9a:	4b10      	ldr	r3, [pc, #64]	; (800ecdc <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800ec9c:	9305      	str	r3, [sp, #20]
 800ec9e:	2301      	movs	r3, #1
 800eca0:	9304      	str	r3, [sp, #16]
 800eca2:	2300      	movs	r3, #0
 800eca4:	9303      	str	r3, [sp, #12]
 800eca6:	2301      	movs	r3, #1
 800eca8:	9302      	str	r3, [sp, #8]
 800ecaa:	2304      	movs	r3, #4
 800ecac:	9301      	str	r3, [sp, #4]
 800ecae:	2300      	movs	r3, #0
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	2315      	movs	r3, #21
 800ecb4:	220d      	movs	r2, #13
 800ecb6:	490a      	ldr	r1, [pc, #40]	; (800ece0 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800ecb8:	480a      	ldr	r0, [pc, #40]	; (800ece4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800ecba:	f7ff fe87 	bl	800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ecbe:	4b05      	ldr	r3, [pc, #20]	; (800ecd4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	4808      	ldr	r0, [pc, #32]	; (800ece8 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800ecc6:	f015 fadd 	bl	8024284 <atexit>
    return Asap_Bold_21_4bpp;
 800ecca:	4b06      	ldr	r3, [pc, #24]	; (800ece4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	200085a4 	.word	0x200085a4
 800ecd8:	0802cd34 	.word	0x0802cd34
 800ecdc:	08025ac0 	.word	0x08025ac0
 800ece0:	0802cfa0 	.word	0x0802cfa0
 800ece4:	20008580 	.word	0x20008580
 800ece8:	0800ec69 	.word	0x0800ec69

0800ecec <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800ecec:	b580      	push	{r7, lr}
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	4801      	ldr	r0, [pc, #4]	; (800ecf8 <__tcf_0+0xc>)
 800ecf2:	f7ff fdc7 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	200085a8 	.word	0x200085a8

0800ecfc <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08a      	sub	sp, #40	; 0x28
 800ed00:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800ed02:	4b15      	ldr	r3, [pc, #84]	; (800ed58 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f003 0301 	and.w	r3, r3, #1
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d11f      	bne.n	800ed4e <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	9309      	str	r3, [sp, #36]	; 0x24
 800ed12:	2300      	movs	r3, #0
 800ed14:	9308      	str	r3, [sp, #32]
 800ed16:	233f      	movs	r3, #63	; 0x3f
 800ed18:	9307      	str	r3, [sp, #28]
 800ed1a:	4b10      	ldr	r3, [pc, #64]	; (800ed5c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800ed1c:	9306      	str	r3, [sp, #24]
 800ed1e:	4b10      	ldr	r3, [pc, #64]	; (800ed60 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800ed20:	9305      	str	r3, [sp, #20]
 800ed22:	2301      	movs	r3, #1
 800ed24:	9304      	str	r3, [sp, #16]
 800ed26:	2300      	movs	r3, #0
 800ed28:	9303      	str	r3, [sp, #12]
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	9302      	str	r3, [sp, #8]
 800ed2e:	2304      	movs	r3, #4
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	2300      	movs	r3, #0
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	231e      	movs	r3, #30
 800ed38:	220d      	movs	r2, #13
 800ed3a:	490a      	ldr	r1, [pc, #40]	; (800ed64 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800ed3c:	480a      	ldr	r0, [pc, #40]	; (800ed68 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800ed3e:	f7ff fe45 	bl	800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800ed44:	2201      	movs	r2, #1
 800ed46:	601a      	str	r2, [r3, #0]
 800ed48:	4808      	ldr	r0, [pc, #32]	; (800ed6c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800ed4a:	f015 fa9b 	bl	8024284 <atexit>
    return Asap_Bold_30_4bpp;
 800ed4e:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	200085cc 	.word	0x200085cc
 800ed5c:	0802cd38 	.word	0x0802cd38
 800ed60:	08025ac4 	.word	0x08025ac4
 800ed64:	0802d058 	.word	0x0802d058
 800ed68:	200085a8 	.word	0x200085a8
 800ed6c:	0800eced 	.word	0x0800eced

0800ed70 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800ed70:	b580      	push	{r7, lr}
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	4801      	ldr	r0, [pc, #4]	; (800ed7c <__tcf_0+0xc>)
 800ed76:	f7ff fd85 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	200085d0 	.word	0x200085d0

0800ed80 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08a      	sub	sp, #40	; 0x28
 800ed84:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800ed86:	4b15      	ldr	r3, [pc, #84]	; (800eddc <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f003 0301 	and.w	r3, r3, #1
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d11f      	bne.n	800edd2 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800ed92:	2300      	movs	r3, #0
 800ed94:	9309      	str	r3, [sp, #36]	; 0x24
 800ed96:	2300      	movs	r3, #0
 800ed98:	9308      	str	r3, [sp, #32]
 800ed9a:	233f      	movs	r3, #63	; 0x3f
 800ed9c:	9307      	str	r3, [sp, #28]
 800ed9e:	4b10      	ldr	r3, [pc, #64]	; (800ede0 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800eda0:	9306      	str	r3, [sp, #24]
 800eda2:	4b10      	ldr	r3, [pc, #64]	; (800ede4 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800eda4:	9305      	str	r3, [sp, #20]
 800eda6:	2301      	movs	r3, #1
 800eda8:	9304      	str	r3, [sp, #16]
 800edaa:	2300      	movs	r3, #0
 800edac:	9303      	str	r3, [sp, #12]
 800edae:	2301      	movs	r3, #1
 800edb0:	9302      	str	r3, [sp, #8]
 800edb2:	2304      	movs	r3, #4
 800edb4:	9301      	str	r3, [sp, #4]
 800edb6:	2300      	movs	r3, #0
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	2328      	movs	r3, #40	; 0x28
 800edbc:	220c      	movs	r2, #12
 800edbe:	490a      	ldr	r1, [pc, #40]	; (800ede8 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800edc0:	480a      	ldr	r0, [pc, #40]	; (800edec <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800edc2:	f7ff fe03 	bl	800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800edc6:	4b05      	ldr	r3, [pc, #20]	; (800eddc <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800edc8:	2201      	movs	r2, #1
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	4808      	ldr	r0, [pc, #32]	; (800edf0 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800edce:	f015 fa59 	bl	8024284 <atexit>
    return Asap_Bold_40_4bpp;
 800edd2:	4b06      	ldr	r3, [pc, #24]	; (800edec <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	200085f4 	.word	0x200085f4
 800ede0:	0802cd3c 	.word	0x0802cd3c
 800ede4:	08025ac8 	.word	0x08025ac8
 800ede8:	0802d110 	.word	0x0802d110
 800edec:	200085d0 	.word	0x200085d0
 800edf0:	0800ed71 	.word	0x0800ed71

0800edf4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800edf4:	b580      	push	{r7, lr}
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	4801      	ldr	r0, [pc, #4]	; (800ee00 <__tcf_0+0xc>)
 800edfa:	f7ff fd43 	bl	800e884 <_ZN8touchgfx13GeneratedFontD1Ev>
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	200085f8 	.word	0x200085f8

0800ee04 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b08a      	sub	sp, #40	; 0x28
 800ee08:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800ee0a:	4b15      	ldr	r3, [pc, #84]	; (800ee60 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d11f      	bne.n	800ee56 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800ee16:	2300      	movs	r3, #0
 800ee18:	9309      	str	r3, [sp, #36]	; 0x24
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	9308      	str	r3, [sp, #32]
 800ee1e:	233f      	movs	r3, #63	; 0x3f
 800ee20:	9307      	str	r3, [sp, #28]
 800ee22:	4b10      	ldr	r3, [pc, #64]	; (800ee64 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800ee24:	9306      	str	r3, [sp, #24]
 800ee26:	4b10      	ldr	r3, [pc, #64]	; (800ee68 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800ee28:	9305      	str	r3, [sp, #20]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	9304      	str	r3, [sp, #16]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	9303      	str	r3, [sp, #12]
 800ee32:	2301      	movs	r3, #1
 800ee34:	9302      	str	r3, [sp, #8]
 800ee36:	2304      	movs	r3, #4
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	233c      	movs	r3, #60	; 0x3c
 800ee40:	220c      	movs	r2, #12
 800ee42:	490a      	ldr	r1, [pc, #40]	; (800ee6c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800ee44:	480a      	ldr	r0, [pc, #40]	; (800ee70 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800ee46:	f7ff fdc1 	bl	800e9cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ee4a:	4b05      	ldr	r3, [pc, #20]	; (800ee60 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	4808      	ldr	r0, [pc, #32]	; (800ee74 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800ee52:	f015 fa17 	bl	8024284 <atexit>
    return Asap_Bold_60_4bpp;
 800ee56:	4b06      	ldr	r3, [pc, #24]	; (800ee70 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	2000861c 	.word	0x2000861c
 800ee64:	0802cd40 	.word	0x0802cd40
 800ee68:	08025acc 	.word	0x08025acc
 800ee6c:	0802d1b8 	.word	0x0802d1b8
 800ee70:	200085f8 	.word	0x200085f8
 800ee74:	0800edf5 	.word	0x0800edf5

0800ee78 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	4618      	mov	r0, r3
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
    {
    }
 800ee9a:	bf00      	nop
 800ee9c:	370c      	adds	r7, #12
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr

0800eea6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800eea6:	b480      	push	{r7}
 800eea8:	b083      	sub	sp, #12
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
 800eeae:	6039      	str	r1, [r7, #0]
    {
    }
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
    {
    }
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	460b      	mov	r3, r1
 800eedc:	70fb      	strb	r3, [r7, #3]
    {
    }
 800eede:	bf00      	nop
 800eee0:	370c      	adds	r7, #12
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800eeea:	b480      	push	{r7}
 800eeec:	b083      	sub	sp, #12
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
    {
    }
 800eef2:	bf00      	nop
 800eef4:	370c      	adds	r7, #12
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800eefe:	b480      	push	{r7}
 800ef00:	b083      	sub	sp, #12
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
    {
    }
 800ef06:	bf00      	nop
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
	...

0800ef14 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    {
 800ef1c:	4a04      	ldr	r2, [pc, #16]	; (800ef30 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	601a      	str	r2, [r3, #0]
    }
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4618      	mov	r0, r3
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	08025bc0 	.word	0x08025bc0

0800ef34 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
    }
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff ffe9 	bl	800ef14 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ef42:	2104      	movs	r1, #4
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f015 f954 	bl	80241f2 <_ZdlPvj>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800ef5c:	4a07      	ldr	r2, [pc, #28]	; (800ef7c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	601a      	str	r2, [r3, #0]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	605a      	str	r2, [r3, #4]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	721a      	strb	r2, [r3, #8]
    {
    }
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4618      	mov	r0, r3
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr
 800ef7c:	08025ba0 	.word	0x08025ba0

0800ef80 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
    {
 800ef88:	4a04      	ldr	r2, [pc, #16]	; (800ef9c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	601a      	str	r2, [r3, #0]
    }
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4618      	mov	r0, r3
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr
 800ef9c:	08025ba0 	.word	0x08025ba0

0800efa0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
    }
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7ff ffe9 	bl	800ef80 <_ZN8touchgfx10TransitionD1Ev>
 800efae:	210c      	movs	r1, #12
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f015 f91e 	bl	80241f2 <_ZdlPvj>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	bf00      	nop
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	bf00      	nop
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	bf00      	nop
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	605a      	str	r2, [r3, #4]
    }
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	460b      	mov	r3, r1
 800f022:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f024:	bf00      	nop
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
    {
 800f038:	4a04      	ldr	r2, [pc, #16]	; (800f04c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	601a      	str	r2, [r3, #0]
    }
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4618      	mov	r0, r3
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	08025b88 	.word	0x08025b88

0800f050 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
    }
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7ff ffe9 	bl	800f030 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f05e:	2104      	movs	r1, #4
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f015 f8c6 	bl	80241f2 <_ZdlPvj>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f070:	b480      	push	{r7}
 800f072:	af00      	add	r7, sp, #0
    {
        return instance;
 800f074:	4b03      	ldr	r3, [pc, #12]	; (800f084 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f076:	681b      	ldr	r3, [r3, #0]
    }
 800f078:	4618      	mov	r0, r3
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	2000bc78 	.word	0x2000bc78

0800f088 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f088:	b480      	push	{r7}
 800f08a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f08c:	4b0b      	ldr	r3, [pc, #44]	; (800f0bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f094:	2b00      	cmp	r3, #0
 800f096:	d008      	beq.n	800f0aa <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f098:	4b08      	ldr	r3, [pc, #32]	; (800f0bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d003      	beq.n	800f0aa <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f0a2:	4b06      	ldr	r3, [pc, #24]	; (800f0bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0a8:	e002      	b.n	800f0b0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f0aa:	4b04      	ldr	r3, [pc, #16]	; (800f0bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	2000bc78 	.word	0x2000bc78

0800f0c0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	4a05      	ldr	r2, [pc, #20]	; (800f0e0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff ff1f 	bl	800ef14 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	08027bdc 	.word	0x08027bdc

0800f0e4 <_ZN8touchgfx11ApplicationD0Ev>:
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ffe7 	bl	800f0c0 <_ZN8touchgfx11ApplicationD1Ev>
 800f0f2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f015 f87b 	bl	80241f2 <_ZdlPvj>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
	...

0800f108 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4618      	mov	r0, r3
 800f114:	f009 f8c6 	bl	80182a4 <_ZN8touchgfx11ApplicationC1Ev>
 800f118:	4a09      	ldr	r2, [pc, #36]	; (800f140 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	601a      	str	r2, [r3, #0]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4a04      	ldr	r2, [pc, #16]	; (800f144 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f132:	6013      	str	r3, [r2, #0]
    }
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	08025b4c 	.word	0x08025b4c
 800f144:	2000bd04 	.word	0x2000bd04

0800f148 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	4a05      	ldr	r2, [pc, #20]	; (800f168 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff ffb1 	bl	800f0c0 <_ZN8touchgfx11ApplicationD1Ev>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4618      	mov	r0, r3
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	08025b4c 	.word	0x08025b4c

0800f16c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7ff ffe7 	bl	800f148 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f17a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f015 f837 	bl	80241f2 <_ZdlPvj>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4618      	mov	r0, r3
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f18e:	b580      	push	{r7, lr}
 800f190:	b082      	sub	sp, #8
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f804 	bl	800f1a4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f19c:	bf00      	nop
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00f      	beq.n	800f1d6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	330c      	adds	r3, #12
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	4798      	blx	r3
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e000      	b.n	800f1d8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00e      	beq.n	800f1fa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4610      	mov	r0, r2
 800f1f0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800f1fa:	bf00      	nop
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b084      	sub	sp, #16
 800f206:	af00      	add	r7, sp, #0
 800f208:	60f8      	str	r0, [r7, #12]
 800f20a:	60b9      	str	r1, [r7, #8]
 800f20c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800f20e:	f009 f827 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 800f212:	4603      	mov	r3, r0
 800f214:	4618      	mov	r0, r3
 800f216:	f009 f829 	bl	801826c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d008      	beq.n	800f234 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	330c      	adds	r3, #12
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4610      	mov	r0, r2
 800f232:	4798      	blx	r3
    }
    if (*currentTrans)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d007      	beq.n	800f24c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4610      	mov	r0, r2
 800f24a:	4798      	blx	r3
    }
    if (*currentScreen)
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d008      	beq.n	800f266 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3314      	adds	r3, #20
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4610      	mov	r0, r2
 800f264:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d008      	beq.n	800f280 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	3304      	adds	r3, #4
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4610      	mov	r0, r2
 800f27e:	4798      	blx	r3
    }
    if (*currentScreen)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d007      	beq.n	800f298 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4610      	mov	r0, r2
 800f296:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d008      	beq.n	800f2b2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	3308      	adds	r3, #8
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	4798      	blx	r3
    }
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b084      	sub	sp, #16
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	60f8      	str	r0, [r7, #12]
 800f2c2:	60b9      	str	r1, [r7, #8]
 800f2c4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	330c      	adds	r3, #12
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	4798      	blx	r3
    newPresenter->activate();
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68b8      	ldr	r0, [r7, #8]
 800f2da:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f2dc:	6879      	ldr	r1, [r7, #4]
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f00a f8ce 	bl	8019480 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	3310      	adds	r3, #16
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	4798      	blx	r3

    Application::getInstance()->draw();
 800f2f0:	f008 ffb6 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	6813      	ldr	r3, [r2, #0]
 800f2f8:	3328      	adds	r3, #40	; 0x28
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	4798      	blx	r3
}
 800f300:	bf00      	nop
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	683a      	ldr	r2, [r7, #0]
 800f316:	601a      	str	r2, [r3, #0]
    }
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	4a08      	ldr	r2, [pc, #32]	; (800f350 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	601a      	str	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f338:	4618      	mov	r0, r3
 800f33a:	f000 fa5f 	bl	800f7fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4618      	mov	r0, r3
 800f342:	f7ff ff01 	bl	800f148 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	08025af8 	.word	0x08025af8

0800f354 <_ZN23FrontendApplicationBaseD0Ev>:
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7ff ffe1 	bl	800f324 <_ZN23FrontendApplicationBaseD1Ev>
 800f362:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f014 ff43 	bl	80241f2 <_ZdlPvj>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4618      	mov	r0, r3
 800f384:	f7ff fde6 	bl	800ef54 <_ZN8touchgfx10TransitionC1Ev>
 800f388:	4a03      	ldr	r2, [pc, #12]	; (800f398 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	601a      	str	r2, [r3, #0]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4618      	mov	r0, r3
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	08025ad8 	.word	0x08025ad8

0800f39c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	4a05      	ldr	r2, [pc, #20]	; (800f3bc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	601a      	str	r2, [r3, #0]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7ff fde7 	bl	800ef80 <_ZN8touchgfx10TransitionD1Ev>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	08025ad8 	.word	0x08025ad8

0800f3c0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7ff ffe7 	bl	800f39c <_ZN8touchgfx12NoTransitionD1Ev>
 800f3ce:	210c      	movs	r1, #12
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f014 ff0e 	bl	80241f2 <_ZdlPvj>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	721a      	strb	r2, [r3, #8]
    }
 800f3ee:	bf00      	nop
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	683a      	ldr	r2, [r7, #0]
 800f408:	605a      	str	r2, [r3, #4]
    }
 800f40a:	bf00      	nop
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
	...

0800f418 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff fe6e 	bl	800f108 <_ZN8touchgfx14MVPApplicationC1Ev>
 800f42c:	4a13      	ldr	r2, [pc, #76]	; (800f47c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f438:	4618      	mov	r0, r3
 800f43a:	f000 f89f 	bl	800f57c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800f44e:	f7ff fe0f 	bl	800f070 <_ZN8touchgfx3HAL11getInstanceEv>
 800f452:	4602      	mov	r2, r0
 800f454:	6813      	ldr	r3, [r2, #0]
 800f456:	3308      	adds	r3, #8
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2100      	movs	r1, #0
 800f45c:	4610      	mov	r0, r2
 800f45e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800f460:	2000      	movs	r0, #0
 800f462:	f002 fcbb 	bl	8011ddc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800f466:	f7ff fe0f 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 800f46a:	4603      	mov	r3, r0
 800f46c:	4618      	mov	r0, r3
 800f46e:	f00e fbce 	bl	801dc0e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	08025af8 	.word	0x08025af8

0800f480 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4618      	mov	r0, r3
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	683a      	ldr	r2, [r7, #0]
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7ff ffe9 	bl	800f480 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	685a      	ldr	r2, [r3, #4]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	605a      	str	r2, [r3, #4]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	683a      	ldr	r2, [r7, #0]
 800f4ba:	3308      	adds	r3, #8
 800f4bc:	3208      	adds	r2, #8
 800f4be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4c2:	e883 0003 	stmia.w	r3, {r0, r1}
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800f4d0:	b590      	push	{r4, r7, lr}
 800f4d2:	b089      	sub	sp, #36	; 0x24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800f4de:	4b10      	ldr	r3, [pc, #64]	; (800f520 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800f4e0:	61bb      	str	r3, [r7, #24]
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	61fb      	str	r3, [r7, #28]
 800f4e6:	f107 0008 	add.w	r0, r7, #8
 800f4ea:	f107 0318 	add.w	r3, r7, #24
 800f4ee:	cb0c      	ldmia	r3, {r2, r3}
 800f4f0:	6879      	ldr	r1, [r7, #4]
 800f4f2:	f000 f85f 	bl	800f5b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f4f6:	f107 0308 	add.w	r3, r7, #8
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f7ff ffcb 	bl	800f498 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f502:	f107 0308 	add.w	r3, r7, #8
 800f506:	4618      	mov	r0, r3
 800f508:	f000 f978 	bl	800f7fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800f518:	bf00      	nop
 800f51a:	3724      	adds	r7, #36	; 0x24
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd90      	pop	{r4, r7, pc}
 800f520:	0800f525 	.word	0x0800f525

0800f524 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af02      	add	r7, sp, #8
 800f52a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f538:	461a      	mov	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	4b04      	ldr	r3, [pc, #16]	; (800f554 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800f544:	4804      	ldr	r0, [pc, #16]	; (800f558 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800f546:	f000 f855 	bl	800f5f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f54a:	bf00      	nop
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	2000bcf8 	.word	0x2000bcf8
 800f558:	2000bcf4 	.word	0x2000bcf4

0800f55c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	4a04      	ldr	r2, [pc, #16]	; (800f578 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	601a      	str	r2, [r3, #0]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4618      	mov	r0, r3
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr
 800f578:	08025b88 	.word	0x08025b88

0800f57c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff ffe8 	bl	800f55c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f58c:	4a08      	ldr	r2, [pc, #32]	; (800f5b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	605a      	str	r2, [r3, #4]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	609a      	str	r2, [r3, #8]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	60da      	str	r2, [r3, #12]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	08025b34 	.word	0x08025b34

0800f5b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	4639      	mov	r1, r7
 800f5c0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7ff ffc8 	bl	800f55c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f5cc:	4a08      	ldr	r2, [pc, #32]	; (800f5f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3308      	adds	r3, #8
 800f5dc:	463a      	mov	r2, r7
 800f5de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3710      	adds	r7, #16
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	08025b34 	.word	0x08025b34

0800f5f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f5f4:	b590      	push	{r4, r7, lr}
 800f5f6:	b089      	sub	sp, #36	; 0x24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	607a      	str	r2, [r7, #4]
 800f600:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	689a      	ldr	r2, [r3, #8]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3320      	adds	r3, #32
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4610      	mov	r0, r2
 800f612:	4798      	blx	r3
 800f614:	4602      	mov	r2, r0
 800f616:	f242 7303 	movw	r3, #9987	; 0x2703
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d805      	bhi.n	800f62a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f61e:	4b4e      	ldr	r3, [pc, #312]	; (800f758 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800f620:	4a4e      	ldr	r2, [pc, #312]	; (800f75c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f622:	21c2      	movs	r1, #194	; 0xc2
 800f624:	484e      	ldr	r0, [pc, #312]	; (800f760 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f626:	f014 fe0f 	bl	8024248 <__assert_func>
 800f62a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	685a      	ldr	r2, [r3, #4]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	3320      	adds	r3, #32
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4610      	mov	r0, r2
 800f63c:	4798      	blx	r3
 800f63e:	4603      	mov	r3, r0
 800f640:	2b0f      	cmp	r3, #15
 800f642:	d805      	bhi.n	800f650 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f644:	4b47      	ldr	r3, [pc, #284]	; (800f764 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800f646:	4a45      	ldr	r2, [pc, #276]	; (800f75c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f648:	21c3      	movs	r1, #195	; 0xc3
 800f64a:	4845      	ldr	r0, [pc, #276]	; (800f760 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f64c:	f014 fdfc 	bl	8024248 <__assert_func>
 800f650:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68da      	ldr	r2, [r3, #12]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	3320      	adds	r3, #32
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4610      	mov	r0, r2
 800f662:	4798      	blx	r3
 800f664:	4603      	mov	r3, r0
 800f666:	2b0b      	cmp	r3, #11
 800f668:	d805      	bhi.n	800f676 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f66a:	4b3f      	ldr	r3, [pc, #252]	; (800f768 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800f66c:	4a3b      	ldr	r2, [pc, #236]	; (800f75c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f66e:	21c4      	movs	r1, #196	; 0xc4
 800f670:	483b      	ldr	r0, [pc, #236]	; (800f760 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f672:	f014 fde9 	bl	8024248 <__assert_func>
 800f676:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800f678:	683a      	ldr	r2, [r7, #0]
 800f67a:	68b9      	ldr	r1, [r7, #8]
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f7ff fdc0 	bl	800f202 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	2100      	movs	r1, #0
 800f688:	4618      	mov	r0, r3
 800f68a:	f000 f86f 	bl	800f76c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f68e:	4603      	mov	r3, r0
 800f690:	4619      	mov	r1, r3
 800f692:	200c      	movs	r0, #12
 800f694:	f7ff fbf0 	bl	800ee78 <_ZnwjPv>
 800f698:	4604      	mov	r4, r0
 800f69a:	2c00      	cmp	r4, #0
 800f69c:	d004      	beq.n	800f6a8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f7ff fe6a 	bl	800f378 <_ZN8touchgfx12NoTransitionC1Ev>
 800f6a4:	4623      	mov	r3, r4
 800f6a6:	e000      	b.n	800f6aa <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800f6a8:	4623      	mov	r3, r4
 800f6aa:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f000 f86d 	bl	800f792 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	f242 7004 	movw	r0, #9988	; 0x2704
 800f6c0:	f7ff fbda 	bl	800ee78 <_ZnwjPv>
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	2c00      	cmp	r4, #0
 800f6c8:	d004      	beq.n	800f6d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f002 fe0e 	bl	80122ec <_ZN8MainViewC1Ev>
 800f6d0:	4623      	mov	r3, r4
 800f6d2:	e000      	b.n	800f6d6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800f6d4:	4623      	mov	r3, r4
 800f6d6:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	2100      	movs	r1, #0
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f000 f86a 	bl	800f7b8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	2010      	movs	r0, #16
 800f6ea:	f7ff fbc5 	bl	800ee78 <_ZnwjPv>
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	2c00      	cmp	r4, #0
 800f6f2:	d005      	beq.n	800f700 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800f6f4:	69b9      	ldr	r1, [r7, #24]
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f002 fd3e 	bl	8012178 <_ZN13MainPresenterC1ER8MainView>
 800f6fc:	4623      	mov	r3, r4
 800f6fe:	e000      	b.n	800f702 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800f700:	4623      	mov	r3, r4
 800f702:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	69fa      	ldr	r2, [r7, #28]
 800f708:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	69ba      	ldr	r2, [r7, #24]
 800f714:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d002      	beq.n	800f722 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	3304      	adds	r3, #4
 800f720:	e000      	b.n	800f724 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800f722:	2300      	movs	r3, #0
 800f724:	4619      	mov	r1, r3
 800f726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f728:	f7ff fdee 	bl	800f308 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	3304      	adds	r3, #4
 800f730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f732:	4618      	mov	r0, r3
 800f734:	f7ff fe61 	bl	800f3fa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	6979      	ldr	r1, [r7, #20]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f000 f84e 	bl	800f7de <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800f742:	69fa      	ldr	r2, [r7, #28]
 800f744:	6979      	ldr	r1, [r7, #20]
 800f746:	69b8      	ldr	r0, [r7, #24]
 800f748:	f7ff fdb7 	bl	800f2ba <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800f74c:	697b      	ldr	r3, [r7, #20]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3724      	adds	r7, #36	; 0x24
 800f752:	46bd      	mov	sp, r7
 800f754:	bd90      	pop	{r4, r7, pc}
 800f756:	bf00      	nop
 800f758:	080253d4 	.word	0x080253d4
 800f75c:	08025be0 	.word	0x08025be0
 800f760:	08025464 	.word	0x08025464
 800f764:	080254a8 	.word	0x080254a8
 800f768:	0802554c 	.word	0x0802554c

0800f76c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	460b      	mov	r3, r1
 800f776:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	3324      	adds	r3, #36	; 0x24
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	887a      	ldrh	r2, [r7, #2]
 800f782:	4611      	mov	r1, r2
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	4798      	blx	r3
 800f788:	4603      	mov	r3, r0
    }
 800f78a:	4618      	mov	r0, r3
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800f792:	b580      	push	{r7, lr}
 800f794:	b082      	sub	sp, #8
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
 800f79a:	460b      	mov	r3, r1
 800f79c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3324      	adds	r3, #36	; 0x24
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	887a      	ldrh	r2, [r7, #2]
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	4798      	blx	r3
 800f7ae:	4603      	mov	r3, r0
    }
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3324      	adds	r3, #36	; 0x24
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	887a      	ldrh	r2, [r7, #2]
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	4798      	blx	r3
 800f7d4:	4603      	mov	r3, r0
    }
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f7de:	b480      	push	{r7}
 800f7e0:	b083      	sub	sp, #12
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	683a      	ldr	r2, [r7, #0]
 800f7ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f7ee:	bf00      	nop
 800f7f0:	370c      	adds	r7, #12
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
	...

0800f7fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	4a05      	ldr	r2, [pc, #20]	; (800f81c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7ff fc0f 	bl	800f030 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4618      	mov	r0, r3
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	08025b34 	.word	0x08025b34

0800f820 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f7ff ffe7 	bl	800f7fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f82e:	2110      	movs	r1, #16
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f014 fcde 	bl	80241f2 <_ZdlPvj>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	68d2      	ldr	r2, [r2, #12]
 800f850:	1052      	asrs	r2, r2, #1
 800f852:	1899      	adds	r1, r3, r2
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	f003 0301 	and.w	r3, r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d102      	bne.n	800f866 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	e00a      	b.n	800f87c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	68d2      	ldr	r2, [r2, #12]
 800f86e:	1052      	asrs	r2, r2, #1
 800f870:	4413      	add	r3, r2
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	6892      	ldr	r2, [r2, #8]
 800f878:	4413      	add	r3, r2
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4608      	mov	r0, r1
 800f87e:	4798      	blx	r3
    }
 800f880:	bf00      	nop
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d010      	beq.n	800f8ba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d107      	bne.n	800f8b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	f003 0301 	and.w	r3, r3, #1
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d101      	bne.n	800f8b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e000      	b.n	800f8b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d001      	beq.n	800f8ba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e000      	b.n	800f8bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f8ba:	2300      	movs	r3, #0
    }
 800f8bc:	4618      	mov	r0, r3
 800f8be:	370c      	adds	r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	683a      	ldr	r2, [r7, #0]
 800f8d6:	601a      	str	r2, [r3, #0]
    }
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	370c      	adds	r7, #12
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr

0800f8e6 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800f8e6:	b480      	push	{r7}
 800f8e8:	b083      	sub	sp, #12
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	80da      	strh	r2, [r3, #6]
    }
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4618      	mov	r0, r3
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr

0800f914 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	4608      	mov	r0, r1
 800f91e:	4611      	mov	r1, r2
 800f920:	461a      	mov	r2, r3
 800f922:	4603      	mov	r3, r0
 800f924:	817b      	strh	r3, [r7, #10]
 800f926:	460b      	mov	r3, r1
 800f928:	813b      	strh	r3, [r7, #8]
 800f92a:	4613      	mov	r3, r2
 800f92c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	897a      	ldrh	r2, [r7, #10]
 800f932:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	893a      	ldrh	r2, [r7, #8]
 800f938:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	88fa      	ldrh	r2, [r7, #6]
 800f93e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	8b3a      	ldrh	r2, [r7, #24]
 800f944:	80da      	strh	r2, [r3, #6]
    }
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4618      	mov	r0, r3
 800f94a:	3714      	adds	r7, #20
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	460b      	mov	r3, r1
 800f95e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	887a      	ldrh	r2, [r7, #2]
 800f964:	801a      	strh	r2, [r3, #0]
    {
    }
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4618      	mov	r0, r3
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af02      	add	r7, sp, #8
 800f97a:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800f97c:	4a13      	ldr	r2, [pc, #76]	; (800f9cc <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	601a      	str	r2, [r3, #0]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	1d18      	adds	r0, r3, #4
 800f986:	2300      	movs	r3, #0
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	2300      	movs	r3, #0
 800f98c:	2200      	movs	r2, #0
 800f98e:	2100      	movs	r1, #0
 800f990:	f7ff ffc0 	bl	800f914 <_ZN8touchgfx4RectC1Essss>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	330c      	adds	r3, #12
 800f998:	4618      	mov	r0, r3
 800f99a:	f7ff ffa4 	bl	800f8e6 <_ZN8touchgfx4RectC1Ev>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	615a      	str	r2, [r3, #20]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	619a      	str	r2, [r3, #24]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	61da      	str	r2, [r3, #28]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	08027d14 	.word	0x08027d14

0800f9d0 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	08027d14 	.word	0x08027d14

0800f9f0 <_ZN8touchgfx8DrawableD0Ev>:
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff ffe9 	bl	800f9d0 <_ZN8touchgfx8DrawableD1Ev>
 800f9fe:	2128      	movs	r1, #40	; 0x28
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f014 fbf6 	bl	80241f2 <_ZdlPvj>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	4608      	mov	r0, r1
 800fa1a:	4611      	mov	r1, r2
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	4603      	mov	r3, r0
 800fa20:	817b      	strh	r3, [r7, #10]
 800fa22:	460b      	mov	r3, r1
 800fa24:	813b      	strh	r3, [r7, #8]
 800fa26:	4613      	mov	r3, r2
 800fa28:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	3334      	adds	r3, #52	; 0x34
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800fa36:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	4798      	blx	r3
        setWidth(width);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3338      	adds	r3, #56	; 0x38
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	4798      	blx	r3
        setHeight(height);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	333c      	adds	r3, #60	; 0x3c
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	4798      	blx	r3
    }
 800fa62:	bf00      	nop
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800fa6a:	b480      	push	{r7}
 800fa6c:	b083      	sub	sp, #12
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	460b      	mov	r3, r1
 800fa74:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	887a      	ldrh	r2, [r7, #2]
 800fa7a:	809a      	strh	r2, [r3, #4]
    }
 800fa7c:	bf00      	nop
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	460b      	mov	r3, r1
 800fa92:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	887a      	ldrh	r2, [r7, #2]
 800fa98:	80da      	strh	r2, [r3, #6]
    }
 800fa9a:	bf00      	nop
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b082      	sub	sp, #8
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	460b      	mov	r3, r1
 800fab0:	807b      	strh	r3, [r7, #2]
 800fab2:	4613      	mov	r3, r2
 800fab4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	332c      	adds	r3, #44	; 0x2c
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fac2:	4611      	mov	r1, r2
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	4798      	blx	r3
        setY(y);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3330      	adds	r3, #48	; 0x30
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fad4:	4611      	mov	r1, r2
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	4798      	blx	r3
    }
 800fada:	bf00      	nop
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800fae2:	b480      	push	{r7}
 800fae4:	b083      	sub	sp, #12
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	460b      	mov	r3, r1
 800faec:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	887a      	ldrh	r2, [r7, #2]
 800faf2:	811a      	strh	r2, [r3, #8]
    }
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	887a      	ldrh	r2, [r7, #2]
 800fb10:	815a      	strh	r2, [r3, #10]
    }
 800fb12:	bf00      	nop
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr

0800fb1e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800fb1e:	b480      	push	{r7}
 800fb20:	b083      	sub	sp, #12
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
 800fb26:	bf00      	nop
 800fb28:	370c      	adds	r7, #12
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800fb32:	b480      	push	{r7}
 800fb34:	b083      	sub	sp, #12
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	6039      	str	r1, [r7, #0]
 800fb3c:	bf00      	nop
 800fb3e:	370c      	adds	r7, #12
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
 800fb52:	bf00      	nop
 800fb54:	370c      	adds	r7, #12
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr

0800fb5e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800fb5e:	b480      	push	{r7}
 800fb60:	b083      	sub	sp, #12
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
 800fb66:	6039      	str	r1, [r7, #0]
 800fb68:	bf00      	nop
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	460b      	mov	r3, r1
 800fb92:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	78fa      	ldrb	r2, [r7, #3]
 800fb98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800fb9c:	bf00      	nop
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800fbc2:	b480      	push	{r7}
 800fbc4:	b083      	sub	sp, #12
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	807b      	strh	r3, [r7, #2]
 800fbe8:	4613      	mov	r3, r2
 800fbea:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	3354      	adds	r3, #84	; 0x54
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	8879      	ldrh	r1, [r7, #2]
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fbfc:	b292      	uxth	r2, r2
 800fbfe:	1a8a      	subs	r2, r1, r2
 800fc00:	b292      	uxth	r2, r2
 800fc02:	b210      	sxth	r0, r2
 800fc04:	8839      	ldrh	r1, [r7, #0]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fc0c:	b292      	uxth	r2, r2
 800fc0e:	1a8a      	subs	r2, r1, r2
 800fc10:	b292      	uxth	r2, r2
 800fc12:	b212      	sxth	r2, r2
 800fc14:	4601      	mov	r1, r0
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	4798      	blx	r3
    }
 800fc1a:	bf00      	nop
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800fc22:	b480      	push	{r7}
 800fc24:	b083      	sub	sp, #12
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc30:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc38:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc40:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800fc42:	bf00      	nop
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr

0800fc4e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b084      	sub	sp, #16
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	60f8      	str	r0, [r7, #12]
 800fc56:	60b9      	str	r1, [r7, #8]
 800fc58:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f7ff ffe1 	bl	800fc22 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	601a      	str	r2, [r3, #0]
    }
 800fc6e:	bf00      	nop
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
	...

0800fc78 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fea1 	bl	800f9d0 <_ZN8touchgfx8DrawableD1Ev>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	08026ae0 	.word	0x08026ae0

0800fc9c <_ZN8touchgfx9ContainerD0Ev>:
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff ffe7 	bl	800fc78 <_ZN8touchgfx9ContainerD1Ev>
 800fcaa:	212c      	movs	r1, #44	; 0x2c
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f014 faa0 	bl	80241f2 <_ZdlPvj>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	4a06      	ldr	r2, [pc, #24]	; (800fce0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	3304      	adds	r3, #4
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff ffd2 	bl	800fc78 <_ZN8touchgfx9ContainerD1Ev>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3708      	adds	r7, #8
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
 800fcde:	bf00      	nop
 800fce0:	08027e0c 	.word	0x08027e0c

0800fce4 <_ZN8touchgfx6ScreenD0Ev>:
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7ff ffe5 	bl	800fcbc <_ZN8touchgfx6ScreenD1Ev>
 800fcf2:	213c      	movs	r1, #60	; 0x3c
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f014 fa7c 	bl	80241f2 <_ZdlPvj>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	bf00      	nop
 800fd36:	370c      	adds	r7, #12
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    {
    }
 800fd48:	bf00      	nop
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr

0800fd54 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	3304      	adds	r3, #4
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f005 f8d3 	bl	8014f28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800fd82:	bf00      	nop
 800fd84:	3708      	adds	r7, #8
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
	...

0800fd8c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff fdec 	bl	800f974 <_ZN8touchgfx8DrawableC1Ev>
 800fd9c:	4a03      	ldr	r2, [pc, #12]	; (800fdac <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	601a      	str	r2, [r3, #0]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4618      	mov	r0, r3
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	08025dcc 	.word	0x08025dcc

0800fdb0 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	4a05      	ldr	r2, [pc, #20]	; (800fdd0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	601a      	str	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7ff fe05 	bl	800f9d0 <_ZN8touchgfx8DrawableD1Ev>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	08025dcc 	.word	0x08025dcc

0800fdd4 <_ZN8touchgfx6WidgetD0Ev>:
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7ff ffe7 	bl	800fdb0 <_ZN8touchgfx6WidgetD1Ev>
 800fde2:	2128      	movs	r1, #40	; 0x28
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f014 fa04 	bl	80241f2 <_ZdlPvj>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	607b      	str	r3, [r7, #4]
 800fdfe:	460b      	mov	r3, r1
 800fe00:	817b      	strh	r3, [r7, #10]
 800fe02:	4613      	mov	r3, r2
 800fe04:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7ff fecd 	bl	800fba8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d008      	beq.n	800fe26 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7ff fed3 	bl	800fbc2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d001      	beq.n	800fe26 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fe22:	2301      	movs	r3, #1
 800fe24:	e000      	b.n	800fe28 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800fe26:	2300      	movs	r3, #0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d002      	beq.n	800fe32 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	601a      	str	r2, [r3, #0]
        }
    }
 800fe32:	bf00      	nop
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
	...

0800fe3c <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7ff ffa0 	bl	800fd8c <_ZN8touchgfx6WidgetC1Ev>
 800fe4c:	4a0a      	ldr	r2, [pc, #40]	; (800fe78 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	22ff      	movs	r2, #255	; 0xff
 800fe56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	3328      	adds	r3, #40	; 0x28
 800fe5e:	2100      	movs	r1, #0
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7ff fd31 	bl	800f8c8 <_ZN8touchgfx9colortypeC1Em>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4618      	mov	r0, r3
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	08027818 	.word	0x08027818

0800fe7c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	4a05      	ldr	r2, [pc, #20]	; (800fe9c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff ff8f 	bl	800fdb0 <_ZN8touchgfx6WidgetD1Ev>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	08027818 	.word	0x08027818

0800fea0 <_ZN8touchgfx3BoxD0Ev>:
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff ffe7 	bl	800fe7c <_ZN8touchgfx3BoxD1Ev>
 800feae:	2130      	movs	r1, #48	; 0x30
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f014 f99e 	bl	80241f2 <_ZdlPvj>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	683a      	ldr	r2, [r7, #0]
 800fece:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	460b      	mov	r3, r1
 800fee6:	807b      	strh	r3, [r7, #2]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	887a      	ldrh	r2, [r7, #2]
 800feec:	801a      	strh	r2, [r3, #0]
    }
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
        assertValid();
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7fe fd13 	bl	800e930 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800ff0a:	4b06      	ldr	r3, [pc, #24]	; (800ff24 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	881b      	ldrh	r3, [r3, #0]
 800ff12:	4619      	mov	r1, r3
 800ff14:	4610      	mov	r0, r2
 800ff16:	f001 ffb7 	bl	8011e88 <_ZNK8touchgfx5Texts7getTextEt>
 800ff1a:	4603      	mov	r3, r0
    }
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	2000bd14 	.word	0x2000bd14

0800ff28 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7ff ff2a 	bl	800fd8c <_ZN8touchgfx6WidgetC1Ev>
 800ff38:	4a13      	ldr	r2, [pc, #76]	; (800ff88 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	601a      	str	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3326      	adds	r3, #38	; 0x26
 800ff42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7ff ffc8 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	3328      	adds	r3, #40	; 0x28
 800ff50:	2100      	movs	r1, #0
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7ff fcb8 	bl	800f8c8 <_ZN8touchgfx9colortypeC1Em>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	22ff      	movs	r2, #255	; 0xff
 800ff62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	4618      	mov	r0, r3
 800ff82:	3708      	adds	r7, #8
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	0802779c 	.word	0x0802779c

0800ff8c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af02      	add	r7, sp, #8
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800ff96:	2300      	movs	r3, #0
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7ff fcb7 	bl	800f914 <_ZN8touchgfx4RectC1Essss>
    }
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	3708      	adds	r7, #8
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800ffae:	b480      	push	{r7}
 800ffb0:	b083      	sub	sp, #12
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
 800ffb6:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ffbe:	bf00      	nop
 800ffc0:	370c      	adds	r7, #12
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr

0800ffca <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800ffca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffcc:	b085      	sub	sp, #20
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800ffd6:	687e      	ldr	r6, [r7, #4]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	3330      	adds	r3, #48	; 0x30
 800ffde:	681c      	ldr	r4, [r3, #0]
 800ffe0:	887d      	ldrh	r5, [r7, #2]
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 f845 	bl	8010072 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	81bb      	strh	r3, [r7, #12]
 800ffec:	f107 030c 	add.w	r3, r7, #12
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7fe fc69 	bl	800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>
 800fff6:	4602      	mov	r2, r0
 800fff8:	6813      	ldr	r3, [r2, #0]
 800fffa:	332c      	adds	r3, #44	; 0x2c
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4610      	mov	r0, r2
 8010000:	4798      	blx	r3
 8010002:	4603      	mov	r3, r0
 8010004:	1aeb      	subs	r3, r5, r3
 8010006:	b29b      	uxth	r3, r3
 8010008:	b21b      	sxth	r3, r3
 801000a:	4619      	mov	r1, r3
 801000c:	4630      	mov	r0, r6
 801000e:	47a0      	blx	r4
    }
 8010010:	bf00      	nop
 8010012:	3714      	adds	r7, #20
 8010014:	46bd      	mov	sp, r7
 8010016:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010018 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	460b      	mov	r3, r1
 8010022:	807b      	strh	r3, [r7, #2]
 8010024:	4613      	mov	r3, r2
 8010026:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	332c      	adds	r3, #44	; 0x2c
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010036:	4610      	mov	r0, r2
 8010038:	4798      	blx	r3
        setBaselineY(baselineY);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	3360      	adds	r3, #96	; 0x60
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010046:	4611      	mov	r1, r2
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	4798      	blx	r3
    }
 801004c:	bf00      	nop
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	460b      	mov	r3, r1
 801005e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	887a      	ldrh	r2, [r7, #2]
 8010064:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010066:	bf00      	nop
 8010068:	370c      	adds	r7, #12
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr

08010072 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010072:	b480      	push	{r7}
 8010074:	b083      	sub	sp, #12
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 801007e:	4618      	mov	r0, r3
 8010080:	370c      	adds	r7, #12
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
	...

0801008c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	4a05      	ldr	r2, [pc, #20]	; (80100ac <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	601a      	str	r2, [r3, #0]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4618      	mov	r0, r3
 801009e:	f7ff fe87 	bl	800fdb0 <_ZN8touchgfx6WidgetD1Ev>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4618      	mov	r0, r3
 80100a6:	3708      	adds	r7, #8
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	0802779c 	.word	0x0802779c

080100b0 <_ZN8touchgfx8TextAreaD0Ev>:
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f7ff ffe7 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80100be:	2134      	movs	r1, #52	; 0x34
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f014 f896 	bl	80241f2 <_ZdlPvj>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
        : TextArea()
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff ff24 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80100e0:	4a03      	ldr	r2, [pc, #12]	; (80100f0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	601a      	str	r2, [r3, #0]
    {
    }
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4618      	mov	r0, r3
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	08025d50 	.word	0x08025d50

080100f4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	4a05      	ldr	r2, [pc, #20]	; (8010114 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	601a      	str	r2, [r3, #0]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4618      	mov	r0, r3
 8010106:	f7ff ffc1 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4618      	mov	r0, r3
 801010e:	3708      	adds	r7, #8
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	08025d50 	.word	0x08025d50

08010118 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f7ff ffe7 	bl	80100f4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010126:	2134      	movs	r1, #52	; 0x34
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f014 f862 	bl	80241f2 <_ZdlPvj>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4618      	mov	r0, r3
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff ffc4 	bl	80100d0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010148:	4a05      	ldr	r2, [pc, #20]	; (8010160 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2200      	movs	r2, #0
 8010152:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4618      	mov	r0, r3
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	08027904 	.word	0x08027904

08010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	683a      	ldr	r2, [r7, #0]
 8010172:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010174:	bf00      	nop
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff fdfd 	bl	800fd8c <_ZN8touchgfx6WidgetC1Ev>
 8010192:	4a0b      	ldr	r2, [pc, #44]	; (80101c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	601a      	str	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3326      	adds	r3, #38	; 0x26
 801019c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff fbd7 	bl	800f954 <_ZN8touchgfx6BitmapC1Et>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	22ff      	movs	r2, #255	; 0xff
 80101aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80101ae:	6839      	ldr	r1, [r7, #0]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f006 ffa7 	bl	8017104 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	08027980 	.word	0x08027980

080101c4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	601a      	str	r2, [r3, #0]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4618      	mov	r0, r3
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
        {
            return v;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
        }
 80101ee:	4618      	mov	r0, r3
 80101f0:	370c      	adds	r7, #12
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr

080101fa <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80101fa:	b590      	push	{r4, r7, lr}
 80101fc:	b083      	sub	sp, #12
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
 8010202:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	3340      	adds	r3, #64	; 0x40
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff ffea 	bl	80101e2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801020e:	4604      	mov	r4, r0
 8010210:	463b      	mov	r3, r7
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff ffe5 	bl	80101e2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010218:	4603      	mov	r3, r0
 801021a:	429c      	cmp	r4, r3
 801021c:	bf0c      	ite	eq
 801021e:	2301      	moveq	r3, #1
 8010220:	2300      	movne	r3, #0
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b00      	cmp	r3, #0
 8010226:	d106      	bne.n	8010236 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	683a      	ldr	r2, [r7, #0]
 801022c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f006 f9e2 	bl	80165f8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010234:	e000      	b.n	8010238 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010236:	bf00      	nop
    }
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	bd90      	pop	{r4, r7, pc}
	...

08010240 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	4a05      	ldr	r2, [pc, #20]	; (8010260 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	601a      	str	r2, [r3, #0]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	4618      	mov	r0, r3
 8010252:	f005 ffe5 	bl	8016220 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	080272f0 	.word	0x080272f0

08010264 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7ff ffe7 	bl	8010240 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010272:	2114      	movs	r1, #20
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f013 ffbc 	bl	80241f2 <_ZdlPvj>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	4a05      	ldr	r2, [pc, #20]	; (80102a4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	601a      	str	r2, [r3, #0]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff fd8b 	bl	800fdb0 <_ZN8touchgfx6WidgetD1Ev>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	4618      	mov	r0, r3
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	08027980 	.word	0x08027980

080102a8 <_ZN8touchgfx5ImageD0Ev>:
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f7ff ffe7 	bl	8010284 <_ZN8touchgfx5ImageD1Ev>
 80102b6:	212c      	movs	r1, #44	; 0x2c
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f013 ff9a 	bl	80241f2 <_ZdlPvj>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4618      	mov	r0, r3
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	4a05      	ldr	r2, [pc, #20]	; (80102e8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff fcef 	bl	800fcbc <_ZN8touchgfx6ScreenD1Ev>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4618      	mov	r0, r3
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	08025d1c 	.word	0x08025d1c

080102ec <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7ff ffe7 	bl	80102c8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80102fa:	2140      	movs	r1, #64	; 0x40
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f013 ff78 	bl	80241f2 <_ZdlPvj>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	4a7b      	ldr	r2, [pc, #492]	; (8010504 <_ZN12MainViewBaseD1Ev+0x1f8>)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 8010320:	4618      	mov	r0, r3
 8010322:	f001 fcc7 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 801032c:	4618      	mov	r0, r3
 801032e:	f001 fcc1 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8010338:	4618      	mov	r0, r3
 801033a:	f001 fcbb 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8010344:	4618      	mov	r0, r3
 8010346:	f7ff fea1 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8010350:	4618      	mov	r0, r3
 8010352:	f001 fcaf 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801035c:	4618      	mov	r0, r3
 801035e:	f004 fae7 	bl	8014930 <_ZN8touchgfx13ImageProgressD1Ev>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010368:	4618      	mov	r0, r3
 801036a:	f001 fca3 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010374:	4618      	mov	r0, r3
 8010376:	f001 fce1 	bl	8011d3c <_ZN8touchgfx13PainterRGB888D1Ev>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8010380:	4618      	mov	r0, r3
 8010382:	f001 fcb9 	bl	8011cf8 <_ZN8touchgfx4LineD1Ev>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f203 7374 	addw	r3, r3, #1908	; 0x774
 801038c:	4618      	mov	r0, r3
 801038e:	f001 fcd5 	bl	8011d3c <_ZN8touchgfx13PainterRGB888D1Ev>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8010398:	4618      	mov	r0, r3
 801039a:	f001 fcad 	bl	8011cf8 <_ZN8touchgfx4LineD1Ev>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80103a4:	4618      	mov	r0, r3
 80103a6:	f004 f9c3 	bl	8014730 <_ZN8touchgfx11BoxProgressD1Ev>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7ff fe6b 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80103bc:	4618      	mov	r0, r3
 80103be:	f001 fc79 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80103c8:	4618      	mov	r0, r3
 80103ca:	f001 fc73 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff fe59 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fe53 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80103ec:	4618      	mov	r0, r3
 80103ee:	f001 fc61 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80103f8:	4618      	mov	r0, r3
 80103fa:	f001 fc5b 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fe41 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff fe3b 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f203 4344 	addw	r3, r3, #1092	; 0x444
 801041c:	4618      	mov	r0, r3
 801041e:	f001 fc8d 	bl	8011d3c <_ZN8touchgfx13PainterRGB888D1Ev>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010428:	4618      	mov	r0, r3
 801042a:	f001 fc65 	bl	8011cf8 <_ZN8touchgfx4LineD1Ev>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8010434:	4618      	mov	r0, r3
 8010436:	f001 fc3d 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010440:	4618      	mov	r0, r3
 8010442:	f001 fc37 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f503 734a 	add.w	r3, r3, #808	; 0x328
 801044c:	4618      	mov	r0, r3
 801044e:	f001 fc31 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8010458:	4618      	mov	r0, r3
 801045a:	f001 fc2b 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010464:	4618      	mov	r0, r3
 8010466:	f001 fc25 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010470:	4618      	mov	r0, r3
 8010472:	f001 fc1f 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801047c:	4618      	mov	r0, r3
 801047e:	f001 fc19 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010488:	4618      	mov	r0, r3
 801048a:	f001 fc13 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fef5 	bl	8010284 <_ZN8touchgfx5ImageD1Ev>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80104a0:	4618      	mov	r0, r3
 80104a2:	f001 fc07 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80104ac:	4618      	mov	r0, r3
 80104ae:	f001 fc01 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7ff fde7 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff fde1 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	33d8      	adds	r3, #216	; 0xd8
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7ff fddc 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	33a4      	adds	r3, #164	; 0xa4
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff fdd7 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	3370      	adds	r3, #112	; 0x70
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff fdd2 	bl	801008c <_ZN8touchgfx8TextAreaD1Ev>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	3340      	adds	r3, #64	; 0x40
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7ff fcc5 	bl	800fe7c <_ZN8touchgfx3BoxD1Ev>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff fee7 	bl	80102c8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4618      	mov	r0, r3
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	08025ce8 	.word	0x08025ce8

08010508 <_ZN12MainViewBaseD0Ev>:
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff fefb 	bl	801030c <_ZN12MainViewBaseD1Ev>
 8010516:	f242 7104 	movw	r1, #9988	; 0x2704
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f013 fe69 	bl	80241f2 <_ZdlPvj>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4618      	mov	r0, r3
 8010524:	3708      	adds	r7, #8
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
	...

0801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 801052c:	b590      	push	{r4, r7, lr}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	4603      	mov	r3, r0
 8010534:	71fb      	strb	r3, [r7, #7]
 8010536:	460b      	mov	r3, r1
 8010538:	71bb      	strb	r3, [r7, #6]
 801053a:	4613      	mov	r3, r2
 801053c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801053e:	f7fe fd97 	bl	800f070 <_ZN8touchgfx3HAL11getInstanceEv>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d105      	bne.n	8010554 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010548:	4b0a      	ldr	r3, [pc, #40]	; (8010574 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801054a:	4a0b      	ldr	r2, [pc, #44]	; (8010578 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 801054c:	2138      	movs	r1, #56	; 0x38
 801054e:	480b      	ldr	r0, [pc, #44]	; (801057c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010550:	f013 fe7a 	bl	8024248 <__assert_func>
 8010554:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010556:	f7fe fd97 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 801055a:	6803      	ldr	r3, [r0, #0]
 801055c:	332c      	adds	r3, #44	; 0x2c
 801055e:	681c      	ldr	r4, [r3, #0]
 8010560:	797b      	ldrb	r3, [r7, #5]
 8010562:	79ba      	ldrb	r2, [r7, #6]
 8010564:	79f9      	ldrb	r1, [r7, #7]
 8010566:	47a0      	blx	r4
 8010568:	4603      	mov	r3, r0
    }
 801056a:	4618      	mov	r0, r3
 801056c:	370c      	adds	r7, #12
 801056e:	46bd      	mov	sp, r7
 8010570:	bd90      	pop	{r4, r7, pc}
 8010572:	bf00      	nop
 8010574:	080256cc 	.word	0x080256cc
 8010578:	08025e2c 	.word	0x08025e2c
 801057c:	08025710 	.word	0x08025710

08010580 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010580:	b590      	push	{r4, r7, lr}
 8010582:	b0bb      	sub	sp, #236	; 0xec
 8010584:	af02      	add	r7, sp, #8
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4618      	mov	r0, r3
 801058c:	f001 fb18 	bl	8011bc0 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010590:	4adc      	ldr	r2, [pc, #880]	; (8010904 <_ZN12MainViewBaseC1Ev+0x384>)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	601a      	str	r2, [r3, #0]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	3340      	adds	r3, #64	; 0x40
 801059a:	4618      	mov	r0, r3
 801059c:	f7ff fc4e 	bl	800fe3c <_ZN8touchgfx3BoxC1Ev>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	3370      	adds	r3, #112	; 0x70
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff fcbf 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	33a4      	adds	r3, #164	; 0xa4
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7ff fcba 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	33d8      	adds	r3, #216	; 0xd8
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7ff fcb5 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7ff fcaf 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7ff fca9 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff fdab 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7ff fda5 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80105f4:	f107 0308 	add.w	r3, r7, #8
 80105f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff f9a9 	bl	800f954 <_ZN8touchgfx6BitmapC1Et>
 8010602:	f107 0308 	add.w	r3, r7, #8
 8010606:	4619      	mov	r1, r3
 8010608:	4620      	mov	r0, r4
 801060a:	f7ff fdb9 	bl	8010180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010614:	4618      	mov	r0, r3
 8010616:	f7ff fd8f 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff fd89 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801062c:	4618      	mov	r0, r3
 801062e:	f7ff fd83 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010638:	4618      	mov	r0, r3
 801063a:	f7ff fd7d 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8010644:	4618      	mov	r0, r3
 8010646:	f7ff fd77 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff fd71 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff fd6b 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fd65 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010674:	4618      	mov	r0, r3
 8010676:	f005 ff9f 	bl	80165b8 <_ZN8touchgfx4LineC1Ev>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8010680:	f107 030c 	add.w	r3, r7, #12
 8010684:	2100      	movs	r1, #0
 8010686:	4618      	mov	r0, r3
 8010688:	f7ff f91e 	bl	800f8c8 <_ZN8touchgfx9colortypeC1Em>
 801068c:	22ff      	movs	r2, #255	; 0xff
 801068e:	68f9      	ldr	r1, [r7, #12]
 8010690:	4620      	mov	r0, r4
 8010692:	f005 fd83 	bl	801619c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801069c:	4618      	mov	r0, r3
 801069e:	f7ff fc43 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff fc3d 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7ff fd3f 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7ff fd39 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7ff fc2b 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff fc25 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff fd27 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff fd21 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7ff fc13 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8010708:	4618      	mov	r0, r3
 801070a:	f004 f825 	bl	8014758 <_ZN8touchgfx11BoxProgressC1Ev>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8010714:	4618      	mov	r0, r3
 8010716:	f005 ff4f 	bl	80165b8 <_ZN8touchgfx4LineC1Ev>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f203 7474 	addw	r4, r3, #1908	; 0x774
 8010720:	f107 0310 	add.w	r3, r7, #16
 8010724:	2100      	movs	r1, #0
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff f8ce 	bl	800f8c8 <_ZN8touchgfx9colortypeC1Em>
 801072c:	22ff      	movs	r2, #255	; 0xff
 801072e:	6939      	ldr	r1, [r7, #16]
 8010730:	4620      	mov	r0, r4
 8010732:	f005 fd33 	bl	801619c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 801073c:	4618      	mov	r0, r3
 801073e:	f005 ff3b 	bl	80165b8 <_ZN8touchgfx4LineC1Ev>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f503 6400 	add.w	r4, r3, #2048	; 0x800
 8010748:	f107 0314 	add.w	r3, r7, #20
 801074c:	2100      	movs	r1, #0
 801074e:	4618      	mov	r0, r3
 8010750:	f7ff f8ba 	bl	800f8c8 <_ZN8touchgfx9colortypeC1Em>
 8010754:	22ff      	movs	r2, #255	; 0xff
 8010756:	6979      	ldr	r1, [r7, #20]
 8010758:	4620      	mov	r0, r4
 801075a:	f005 fd1f 	bl	801619c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010764:	4618      	mov	r0, r3
 8010766:	f7ff fce7 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8010770:	4618      	mov	r0, r3
 8010772:	f004 f907 	bl	8014984 <_ZN8touchgfx13ImageProgressC1Ev>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 801077c:	4618      	mov	r0, r3
 801077e:	f7ff fcdb 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff fbcd 	bl	800ff28 <_ZN8touchgfx8TextAreaC1Ev>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8010794:	4618      	mov	r0, r3
 8010796:	f7ff fccf 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff fcc9 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7ff fcc3 	bl	8010138 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f603 23e2 	addw	r3, r3, #2786	; 0xae2
 80107b8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80107bc:	4618      	mov	r0, r3
 80107be:	f006 fd0f 	bl	80171e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80107c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80107d2:	2200      	movs	r2, #0
 80107d4:	2100      	movs	r1, #0
 80107d6:	f7ff f91b 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80107e0:	2200      	movs	r2, #0
 80107e2:	2100      	movs	r1, #0
 80107e4:	2000      	movs	r0, #0
 80107e6:	f7ff fea1 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80107ea:	4603      	mov	r3, r0
 80107ec:	4619      	mov	r1, r3
 80107ee:	4620      	mov	r0, r4
 80107f0:	f7ff fb66 	bl	800fec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    RpmDescriptor.setXY(228, 138);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	3370      	adds	r3, #112	; 0x70
 80107f8:	228a      	movs	r2, #138	; 0x8a
 80107fa:	21e4      	movs	r1, #228	; 0xe4
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff f952 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010808:	22ed      	movs	r2, #237	; 0xed
 801080a:	2100      	movs	r1, #0
 801080c:	20ff      	movs	r0, #255	; 0xff
 801080e:	f7ff fe8d 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010812:	4603      	mov	r3, r0
 8010814:	4619      	mov	r1, r3
 8010816:	4620      	mov	r0, r4
 8010818:	f7ff fbc9 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	3370      	adds	r3, #112	; 0x70
 8010820:	2100      	movs	r1, #0
 8010822:	4618      	mov	r0, r3
 8010824:	f7ff fc16 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801082e:	f107 0318 	add.w	r3, r7, #24
 8010832:	210c      	movs	r1, #12
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fb51 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801083a:	8b39      	ldrh	r1, [r7, #24]
 801083c:	4620      	mov	r0, r4
 801083e:	f006 f9c1 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(428, 126);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	33a4      	adds	r3, #164	; 0xa4
 8010846:	227e      	movs	r2, #126	; 0x7e
 8010848:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff f92a 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010858:	22ed      	movs	r2, #237	; 0xed
 801085a:	2100      	movs	r1, #0
 801085c:	20ff      	movs	r0, #255	; 0xff
 801085e:	f7ff fe65 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010862:	4603      	mov	r3, r0
 8010864:	4619      	mov	r1, r3
 8010866:	4620      	mov	r0, r4
 8010868:	f7ff fba1 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	33a4      	adds	r3, #164	; 0xa4
 8010870:	2100      	movs	r1, #0
 8010872:	4618      	mov	r0, r3
 8010874:	f7ff fbee 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801087e:	f107 031c 	add.w	r3, r7, #28
 8010882:	211b      	movs	r1, #27
 8010884:	4618      	mov	r0, r3
 8010886:	f7ff fb29 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801088a:	8bb9      	ldrh	r1, [r7, #28]
 801088c:	4620      	mov	r0, r4
 801088e:	f006 f999 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 126);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	33d8      	adds	r3, #216	; 0xd8
 8010896:	227e      	movs	r2, #126	; 0x7e
 8010898:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff f902 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80108a8:	22ed      	movs	r2, #237	; 0xed
 80108aa:	2100      	movs	r1, #0
 80108ac:	20ff      	movs	r0, #255	; 0xff
 80108ae:	f7ff fe3d 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108b2:	4603      	mov	r3, r0
 80108b4:	4619      	mov	r1, r3
 80108b6:	4620      	mov	r0, r4
 80108b8:	f7ff fb79 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	33d8      	adds	r3, #216	; 0xd8
 80108c0:	2100      	movs	r1, #0
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ff fbc6 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80108ce:	f107 0320 	add.w	r3, r7, #32
 80108d2:	211a      	movs	r1, #26
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7ff fb01 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80108da:	8c39      	ldrh	r1, [r7, #32]
 80108dc:	4620      	mov	r0, r4
 80108de:	f006 f971 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(38, 126);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80108e8:	227e      	movs	r2, #126	; 0x7e
 80108ea:	2126      	movs	r1, #38	; 0x26
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ff f8da 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80108f8:	22ed      	movs	r2, #237	; 0xed
 80108fa:	2100      	movs	r1, #0
 80108fc:	20ff      	movs	r0, #255	; 0xff
 80108fe:	f7ff fe15 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010902:	e001      	b.n	8010908 <_ZN12MainViewBaseC1Ev+0x388>
 8010904:	08025ce8 	.word	0x08025ce8
 8010908:	4603      	mov	r3, r0
 801090a:	4619      	mov	r1, r3
 801090c:	4620      	mov	r0, r4
 801090e:	f7ff fb4e 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010918:	2100      	movs	r1, #0
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff fb9a 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8010926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801092a:	2114      	movs	r1, #20
 801092c:	4618      	mov	r0, r3
 801092e:	f7ff fad5 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010932:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8010934:	4620      	mov	r0, r4
 8010936:	f006 f945 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 126);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010940:	227e      	movs	r2, #126	; 0x7e
 8010942:	2177      	movs	r1, #119	; 0x77
 8010944:	4618      	mov	r0, r3
 8010946:	f7ff f8ae 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010950:	22ed      	movs	r2, #237	; 0xed
 8010952:	2100      	movs	r1, #0
 8010954:	20ff      	movs	r0, #255	; 0xff
 8010956:	f7ff fde9 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801095a:	4603      	mov	r3, r0
 801095c:	4619      	mov	r1, r3
 801095e:	4620      	mov	r0, r4
 8010960:	f7ff fb25 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801096a:	2100      	movs	r1, #0
 801096c:	4618      	mov	r0, r3
 801096e:	f7ff fb71 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801097c:	2113      	movs	r1, #19
 801097e:	4618      	mov	r0, r3
 8010980:	f7ff faac 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010984:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8010986:	4620      	mov	r0, r4
 8010988:	f006 f91c 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(24, 91, 60, 35);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 8010992:	2323      	movs	r3, #35	; 0x23
 8010994:	9300      	str	r3, [sp, #0]
 8010996:	233c      	movs	r3, #60	; 0x3c
 8010998:	225b      	movs	r2, #91	; 0x5b
 801099a:	2118      	movs	r1, #24
 801099c:	f7ff f838 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80109a6:	22ff      	movs	r2, #255	; 0xff
 80109a8:	21ff      	movs	r1, #255	; 0xff
 80109aa:	20ff      	movs	r0, #255	; 0xff
 80109ac:	f7ff fdbe 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109b0:	4603      	mov	r3, r0
 80109b2:	4619      	mov	r1, r3
 80109b4:	4620      	mov	r0, r4
 80109b6:	f7ff fafa 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80109c0:	2100      	movs	r1, #0
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7ff fb46 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 80109ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80109d2:	2103      	movs	r1, #3
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7ff fa81 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80109da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80109de:	4618      	mov	r0, r3
 80109e0:	f7ff fa8c 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 80109e4:	4603      	mov	r3, r0
 80109e6:	4ae1      	ldr	r2, [pc, #900]	; (8010d6c <_ZN12MainViewBaseC1Ev+0x7ec>)
 80109e8:	2105      	movs	r1, #5
 80109ea:	4620      	mov	r0, r4
 80109ec:	f009 fc94 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80109fc:	4619      	mov	r1, r3
 80109fe:	4610      	mov	r0, r2
 8010a00:	f7ff fbb0 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8010a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a0e:	2102      	movs	r1, #2
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7ff fa63 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010a16:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f006 f8d3 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(104, 91, 60, 35);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 8010a24:	2323      	movs	r3, #35	; 0x23
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	233c      	movs	r3, #60	; 0x3c
 8010a2a:	225b      	movs	r2, #91	; 0x5b
 8010a2c:	2168      	movs	r1, #104	; 0x68
 8010a2e:	f7fe ffef 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8010a38:	22ff      	movs	r2, #255	; 0xff
 8010a3a:	21ff      	movs	r1, #255	; 0xff
 8010a3c:	20ff      	movs	r0, #255	; 0xff
 8010a3e:	f7ff fd75 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a42:	4603      	mov	r3, r0
 8010a44:	4619      	mov	r1, r3
 8010a46:	4620      	mov	r0, r4
 8010a48:	f7ff fab1 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010a52:	2100      	movs	r1, #0
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff fafd 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f603 245e 	addw	r4, r3, #2654	; 0xa5e
 8010a60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a64:	2101      	movs	r1, #1
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7ff fa38 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010a6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7ff fa43 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010a76:	4603      	mov	r3, r0
 8010a78:	4abc      	ldr	r2, [pc, #752]	; (8010d6c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8010a7a:	2105      	movs	r1, #5
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f009 fc4b 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f603 235e 	addw	r3, r3, #2654	; 0xa5e
 8010a8e:	4619      	mov	r1, r3
 8010a90:	4610      	mov	r0, r2
 8010a92:	f7ff fb67 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8010a9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7ff fa1a 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010aa8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f006 f88a 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010ab6:	223f      	movs	r2, #63	; 0x3f
 8010ab8:	21b3      	movs	r1, #179	; 0xb3
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fe fff3 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7ff f85d 	bl	800fb88 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8010ad4:	230e      	movs	r3, #14
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	2312      	movs	r3, #18
 8010ada:	223f      	movs	r2, #63	; 0x3f
 8010adc:	2136      	movs	r1, #54	; 0x36
 8010ade:	f7fe ff97 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8010ae8:	22ff      	movs	r2, #255	; 0xff
 8010aea:	21ff      	movs	r1, #255	; 0xff
 8010aec:	20ff      	movs	r0, #255	; 0xff
 8010aee:	f7ff fd1d 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010af2:	4603      	mov	r3, r0
 8010af4:	4619      	mov	r1, r3
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7ff fa59 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010b02:	2100      	movs	r1, #0
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff faa5 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f603 2468 	addw	r4, r3, #2664	; 0xa68
 8010b10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010b14:	2129      	movs	r1, #41	; 0x29
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7ff f9e0 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010b1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff f9eb 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010b26:	4603      	mov	r3, r0
 8010b28:	4a90      	ldr	r2, [pc, #576]	; (8010d6c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8010b2a:	2102      	movs	r1, #2
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f009 fbf3 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8010b3e:	4619      	mov	r1, r3
 8010b40:	4610      	mov	r0, r2
 8010b42:	f7ff fb0f 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8010b4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010b50:	2104      	movs	r1, #4
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff f9c2 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010b58:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	f006 f831 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f503 7012 	add.w	r0, r3, #584	; 0x248
 8010b68:	230e      	movs	r3, #14
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	2312      	movs	r3, #18
 8010b6e:	223f      	movs	r2, #63	; 0x3f
 8010b70:	2173      	movs	r1, #115	; 0x73
 8010b72:	f7fe ff4d 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 7412 	add.w	r4, r3, #584	; 0x248
 8010b7c:	22ff      	movs	r2, #255	; 0xff
 8010b7e:	21ff      	movs	r1, #255	; 0xff
 8010b80:	20ff      	movs	r0, #255	; 0xff
 8010b82:	f7ff fcd3 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b86:	4603      	mov	r3, r0
 8010b88:	4619      	mov	r1, r3
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f7ff fa0f 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010b96:	2100      	movs	r1, #0
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff fa5b 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f603 246c 	addw	r4, r3, #2668	; 0xa6c
 8010ba4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010ba8:	212a      	movs	r1, #42	; 0x2a
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7ff f996 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010bb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7ff f9a1 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	4a6b      	ldr	r2, [pc, #428]	; (8010d6c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8010bbe:	2102      	movs	r1, #2
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f009 fba9 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f503 7212 	add.w	r2, r3, #584	; 0x248
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	4610      	mov	r0, r2
 8010bd6:	f7ff fac5 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f503 7412 	add.w	r4, r3, #584	; 0x248
 8010be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010be4:	2105      	movs	r1, #5
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7ff f978 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010bec:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	f005 ffe7 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8010bfc:	230e      	movs	r3, #14
 8010bfe:	9300      	str	r3, [sp, #0]
 8010c00:	2312      	movs	r3, #18
 8010c02:	223e      	movs	r2, #62	; 0x3e
 8010c04:	21ad      	movs	r1, #173	; 0xad
 8010c06:	f7fe ff03 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f503 7420 	add.w	r4, r3, #640	; 0x280
 8010c10:	22ff      	movs	r2, #255	; 0xff
 8010c12:	21ff      	movs	r1, #255	; 0xff
 8010c14:	20ff      	movs	r0, #255	; 0xff
 8010c16:	f7ff fc89 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f7ff f9c5 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010c2a:	2100      	movs	r1, #0
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7ff fa11 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f503 6427 	add.w	r4, r3, #2672	; 0xa70
 8010c38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010c3c:	212b      	movs	r1, #43	; 0x2b
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff f94c 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010c44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7ff f957 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	4a46      	ldr	r2, [pc, #280]	; (8010d6c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8010c52:	2102      	movs	r1, #2
 8010c54:	4620      	mov	r0, r4
 8010c56:	f009 fb5f 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f503 7220 	add.w	r2, r3, #640	; 0x280
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 8010c66:	4619      	mov	r1, r3
 8010c68:	4610      	mov	r0, r2
 8010c6a:	f7ff fa7b 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f503 7420 	add.w	r4, r3, #640	; 0x280
 8010c74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c78:	2106      	movs	r1, #6
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7ff f92e 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010c80:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8010c84:	4620      	mov	r0, r4
 8010c86:	f005 ff9d 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8010c90:	230e      	movs	r3, #14
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	2312      	movs	r3, #18
 8010c96:	223e      	movs	r2, #62	; 0x3e
 8010c98:	21e7      	movs	r1, #231	; 0xe7
 8010c9a:	f7fe feb9 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8010ca4:	22ff      	movs	r2, #255	; 0xff
 8010ca6:	21ff      	movs	r1, #255	; 0xff
 8010ca8:	20ff      	movs	r0, #255	; 0xff
 8010caa:	f7ff fc3f 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f7ff f97b 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ff f9c7 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f603 2474 	addw	r4, r3, #2676	; 0xa74
 8010ccc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010cd0:	212c      	movs	r1, #44	; 0x2c
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7ff f902 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff f90d 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	4a21      	ldr	r2, [pc, #132]	; (8010d6c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8010ce6:	2102      	movs	r1, #2
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f009 fb15 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f503 722e 	add.w	r2, r3, #696	; 0x2b8
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f603 2374 	addw	r3, r3, #2676	; 0xa74
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	4610      	mov	r0, r2
 8010cfe:	f7ff fa31 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8010d08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010d0c:	2107      	movs	r1, #7
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7ff f8e4 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010d14:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f005 ff53 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8010d24:	230e      	movs	r3, #14
 8010d26:	9300      	str	r3, [sp, #0]
 8010d28:	2312      	movs	r3, #18
 8010d2a:	223f      	movs	r2, #63	; 0x3f
 8010d2c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8010d30:	f7fe fe6e 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 8010d3a:	22ff      	movs	r2, #255	; 0xff
 8010d3c:	21ff      	movs	r1, #255	; 0xff
 8010d3e:	20ff      	movs	r0, #255	; 0xff
 8010d40:	f7ff fbf4 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d44:	4603      	mov	r3, r0
 8010d46:	4619      	mov	r1, r3
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f7ff f930 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8010d54:	2100      	movs	r1, #0
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7ff f97c 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f603 2478 	addw	r4, r3, #2680	; 0xa78
 8010d62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010d66:	212d      	movs	r1, #45	; 0x2d
 8010d68:	4618      	mov	r0, r3
 8010d6a:	e001      	b.n	8010d70 <_ZN12MainViewBaseC1Ev+0x7f0>
 8010d6c:	08025750 	.word	0x08025750
 8010d70:	f7ff f8b4 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010d74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7ff f8bf 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	4ae2      	ldr	r2, [pc, #904]	; (801110c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8010d82:	2102      	movs	r1, #2
 8010d84:	4620      	mov	r0, r4
 8010d86:	f009 fac7 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f503 723c 	add.w	r2, r3, #752	; 0x2f0
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8010d96:	4619      	mov	r1, r3
 8010d98:	4610      	mov	r0, r2
 8010d9a:	f7ff f9e3 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 8010da4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010da8:	2108      	movs	r1, #8
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff f896 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010db0:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010db4:	4620      	mov	r0, r4
 8010db6:	f005 ff05 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8010dc0:	230e      	movs	r3, #14
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	2312      	movs	r3, #18
 8010dc6:	223f      	movs	r2, #63	; 0x3f
 8010dc8:	f240 115d 	movw	r1, #349	; 0x15d
 8010dcc:	f7fe fe20 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f503 744a 	add.w	r4, r3, #808	; 0x328
 8010dd6:	22ff      	movs	r2, #255	; 0xff
 8010dd8:	21ff      	movs	r1, #255	; 0xff
 8010dda:	20ff      	movs	r0, #255	; 0xff
 8010ddc:	f7ff fba6 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010de0:	4603      	mov	r3, r0
 8010de2:	4619      	mov	r1, r3
 8010de4:	4620      	mov	r0, r4
 8010de6:	f7ff f8e2 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010df0:	2100      	movs	r1, #0
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff f92e 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f603 247c 	addw	r4, r3, #2684	; 0xa7c
 8010dfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010e02:	212e      	movs	r1, #46	; 0x2e
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff f869 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010e0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7ff f874 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010e14:	4603      	mov	r3, r0
 8010e16:	4abd      	ldr	r2, [pc, #756]	; (801110c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8010e18:	2102      	movs	r1, #2
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f009 fa7c 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f503 724a 	add.w	r2, r3, #808	; 0x328
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f603 237c 	addw	r3, r3, #2684	; 0xa7c
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4610      	mov	r0, r2
 8010e30:	f7ff f998 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f503 744a 	add.w	r4, r3, #808	; 0x328
 8010e3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e3e:	2109      	movs	r1, #9
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7ff f84b 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010e46:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f005 feba 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8010e56:	230f      	movs	r3, #15
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	2312      	movs	r3, #18
 8010e5c:	223e      	movs	r2, #62	; 0x3e
 8010e5e:	f240 119b 	movw	r1, #411	; 0x19b
 8010e62:	f7fe fdd5 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f503 7458 	add.w	r4, r3, #864	; 0x360
 8010e6c:	22ff      	movs	r2, #255	; 0xff
 8010e6e:	21ff      	movs	r1, #255	; 0xff
 8010e70:	20ff      	movs	r0, #255	; 0xff
 8010e72:	f7ff fb5b 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e76:	4603      	mov	r3, r0
 8010e78:	4619      	mov	r1, r3
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f7ff f897 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010e86:	2100      	movs	r1, #0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff f8e3 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f503 6428 	add.w	r4, r3, #2688	; 0xa80
 8010e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e98:	212f      	movs	r1, #47	; 0x2f
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff f81e 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010ea0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ff f829 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	4a97      	ldr	r2, [pc, #604]	; (801110c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8010eae:	2102      	movs	r1, #2
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f009 fa31 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f503 7258 	add.w	r2, r3, #864	; 0x360
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	f7ff f94d 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f503 7458 	add.w	r4, r3, #864	; 0x360
 8010ed0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010ed4:	210a      	movs	r1, #10
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff f800 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010edc:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f005 fe6f 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f503 7066 	add.w	r0, r3, #920	; 0x398
 8010eec:	230e      	movs	r3, #14
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	2312      	movs	r3, #18
 8010ef2:	223e      	movs	r2, #62	; 0x3e
 8010ef4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8010ef8:	f7fe fd8a 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8010f02:	22ff      	movs	r2, #255	; 0xff
 8010f04:	21ff      	movs	r1, #255	; 0xff
 8010f06:	20ff      	movs	r0, #255	; 0xff
 8010f08:	f7ff fb10 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	4619      	mov	r1, r3
 8010f10:	4620      	mov	r0, r4
 8010f12:	f7ff f84c 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff f898 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f603 2484 	addw	r4, r3, #2692	; 0xa84
 8010f2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010f2e:	2130      	movs	r1, #48	; 0x30
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fe ffd3 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010f36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fe ffde 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8010f40:	4603      	mov	r3, r0
 8010f42:	4a72      	ldr	r2, [pc, #456]	; (801110c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8010f44:	2102      	movs	r1, #2
 8010f46:	4620      	mov	r0, r4
 8010f48:	f009 f9e6 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f503 7266 	add.w	r2, r3, #920	; 0x398
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8010f58:	4619      	mov	r1, r3
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	f7ff f902 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8010f66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010f6a:	210b      	movs	r1, #11
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fe ffb5 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8010f72:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8010f76:	4620      	mov	r0, r4
 8010f78:	f005 fe24 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f503 7074 	add.w	r0, r3, #976	; 0x3d0
 8010f82:	2305      	movs	r3, #5
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8010f8a:	223a      	movs	r2, #58	; 0x3a
 8010f8c:	f06f 0101 	mvn.w	r1, #1
 8010f90:	f7fe fd3e 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8010f9a:	22ff      	movs	r2, #255	; 0xff
 8010f9c:	21ff      	movs	r1, #255	; 0xff
 8010f9e:	20ff      	movs	r0, #255	; 0xff
 8010fa0:	f7ff fac4 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	22ff      	movs	r2, #255	; 0xff
 8010fa8:	4619      	mov	r1, r3
 8010faa:	4620      	mov	r0, r4
 8010fac:	f005 f8db 	bl	8016166 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	4610      	mov	r0, r2
 8010fc0:	f005 f93a 	bl	8016238 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010fca:	2203      	movs	r2, #3
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f000 fe0c 	bl	8011bec <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010fda:	2203      	movs	r2, #3
 8010fdc:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f000 fe29 	bl	8011c38 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010fec:	2102      	movs	r1, #2
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f000 fe48 	bl	8011c84 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010ffa:	2101      	movs	r1, #1
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f005 fc35 	bl	801686c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(46, 188);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8011008:	22bc      	movs	r2, #188	; 0xbc
 801100a:	212e      	movs	r1, #46	; 0x2e
 801100c:	4618      	mov	r0, r3
 801100e:	f7fe fd4a 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011018:	22ed      	movs	r2, #237	; 0xed
 801101a:	2100      	movs	r1, #0
 801101c:	20ff      	movs	r0, #255	; 0xff
 801101e:	f7ff fa85 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011022:	4603      	mov	r3, r0
 8011024:	4619      	mov	r1, r3
 8011026:	4620      	mov	r0, r4
 8011028:	f7fe ffc1 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8011032:	2100      	movs	r1, #0
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff f80d 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011040:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011044:	2111      	movs	r1, #17
 8011046:	4618      	mov	r0, r3
 8011048:	f7fe ff48 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801104c:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8011050:	4620      	mov	r0, r4
 8011052:	f005 fdb7 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor.setXY(124, 188);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801105c:	22bc      	movs	r2, #188	; 0xbc
 801105e:	217c      	movs	r1, #124	; 0x7c
 8011060:	4618      	mov	r0, r3
 8011062:	f7fe fd20 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 801106c:	22ed      	movs	r2, #237	; 0xed
 801106e:	2100      	movs	r1, #0
 8011070:	20ff      	movs	r0, #255	; 0xff
 8011072:	f7ff fa5b 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011076:	4603      	mov	r3, r0
 8011078:	4619      	mov	r1, r3
 801107a:	4620      	mov	r0, r4
 801107c:	f7fe ff97 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor.setLinespacing(0);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8011086:	2100      	movs	r1, #0
 8011088:	4618      	mov	r0, r3
 801108a:	f7fe ffe3 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8011094:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011098:	2112      	movs	r1, #18
 801109a:	4618      	mov	r0, r3
 801109c:	f7fe ff1e 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80110a0:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 80110a4:	4620      	mov	r0, r4
 80110a6:	f005 fd8d 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(26, 153, 60, 35);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f203 40c4 	addw	r0, r3, #1220	; 0x4c4
 80110b0:	2323      	movs	r3, #35	; 0x23
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	233c      	movs	r3, #60	; 0x3c
 80110b6:	2299      	movs	r2, #153	; 0x99
 80110b8:	211a      	movs	r1, #26
 80110ba:	f7fe fca9 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f203 44c4 	addw	r4, r3, #1220	; 0x4c4
 80110c4:	22ff      	movs	r2, #255	; 0xff
 80110c6:	21ff      	movs	r1, #255	; 0xff
 80110c8:	20ff      	movs	r0, #255	; 0xff
 80110ca:	f7ff fa2f 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110ce:	4603      	mov	r3, r0
 80110d0:	4619      	mov	r1, r3
 80110d2:	4620      	mov	r0, r4
 80110d4:	f7fe ff6b 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80110de:	2100      	movs	r1, #0
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fe ffb7 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 80110ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80110f0:	210e      	movs	r1, #14
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fe fef2 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80110f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fe fefd 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8011102:	4603      	mov	r3, r0
 8011104:	4a01      	ldr	r2, [pc, #4]	; (801110c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8011106:	2105      	movs	r1, #5
 8011108:	4620      	mov	r0, r4
 801110a:	e001      	b.n	8011110 <_ZN12MainViewBaseC1Ev+0xb90>
 801110c:	08025750 	.word	0x08025750
 8011110:	f009 f902 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f203 42c4 	addw	r2, r3, #1220	; 0x4c4
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8011120:	4619      	mov	r1, r3
 8011122:	4610      	mov	r0, r2
 8011124:	f7ff f81e 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f203 44c4 	addw	r4, r3, #1220	; 0x4c4
 801112e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011132:	210d      	movs	r1, #13
 8011134:	4618      	mov	r0, r3
 8011136:	f7fe fed1 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801113a:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 801113e:	4620      	mov	r0, r4
 8011140:	f005 fd40 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(104, 153, 60, 35);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f203 40fc 	addw	r0, r3, #1276	; 0x4fc
 801114a:	2323      	movs	r3, #35	; 0x23
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	233c      	movs	r3, #60	; 0x3c
 8011150:	2299      	movs	r2, #153	; 0x99
 8011152:	2168      	movs	r1, #104	; 0x68
 8011154:	f7fe fc5c 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 801115e:	22ff      	movs	r2, #255	; 0xff
 8011160:	21ff      	movs	r1, #255	; 0xff
 8011162:	20ff      	movs	r0, #255	; 0xff
 8011164:	f7ff f9e2 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011168:	4603      	mov	r3, r0
 801116a:	4619      	mov	r1, r3
 801116c:	4620      	mov	r0, r4
 801116e:	f7fe ff1e 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011178:	2100      	movs	r1, #0
 801117a:	4618      	mov	r0, r3
 801117c:	f7fe ff6a 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f603 2492 	addw	r4, r3, #2706	; 0xa92
 8011186:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801118a:	2110      	movs	r1, #16
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe fea5 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8011192:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011196:	4618      	mov	r0, r3
 8011198:	f7fe feb0 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 801119c:	4603      	mov	r3, r0
 801119e:	4ae3      	ldr	r2, [pc, #908]	; (801152c <_ZN12MainViewBaseC1Ev+0xfac>)
 80111a0:	2105      	movs	r1, #5
 80111a2:	4620      	mov	r0, r4
 80111a4:	f009 f8b8 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f603 2392 	addw	r3, r3, #2706	; 0xa92
 80111b4:	4619      	mov	r1, r3
 80111b6:	4610      	mov	r0, r2
 80111b8:	f7fe ffd4 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 80111c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80111c6:	210f      	movs	r1, #15
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fe fe87 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80111ce:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 80111d2:	4620      	mov	r0, r4
 80111d4:	f005 fcf6 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 188);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80111de:	22bc      	movs	r2, #188	; 0xbc
 80111e0:	f240 1157 	movw	r1, #343	; 0x157
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7fe fc5e 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f203 5434 	addw	r4, r3, #1332	; 0x534
 80111f0:	22ed      	movs	r2, #237	; 0xed
 80111f2:	2100      	movs	r1, #0
 80111f4:	20ff      	movs	r0, #255	; 0xff
 80111f6:	f7ff f999 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111fa:	4603      	mov	r3, r0
 80111fc:	4619      	mov	r1, r3
 80111fe:	4620      	mov	r0, r4
 8011200:	f7fe fed5 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801120a:	2100      	movs	r1, #0
 801120c:	4618      	mov	r0, r3
 801120e:	f7fe ff21 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011218:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801121c:	2115      	movs	r1, #21
 801121e:	4618      	mov	r0, r3
 8011220:	f7fe fe5c 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8011224:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8011228:	4620      	mov	r0, r4
 801122a:	f005 fccb 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 188);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011234:	22bc      	movs	r2, #188	; 0xbc
 8011236:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801123a:	4618      	mov	r0, r3
 801123c:	f7fe fc33 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8011246:	22ed      	movs	r2, #237	; 0xed
 8011248:	2100      	movs	r1, #0
 801124a:	20ff      	movs	r0, #255	; 0xff
 801124c:	f7ff f96e 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011250:	4603      	mov	r3, r0
 8011252:	4619      	mov	r1, r3
 8011254:	4620      	mov	r0, r4
 8011256:	f7fe feaa 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011260:	2100      	movs	r1, #0
 8011262:	4618      	mov	r0, r3
 8011264:	f7fe fef6 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 801126e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011272:	2116      	movs	r1, #22
 8011274:	4618      	mov	r0, r3
 8011276:	f7fe fe31 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801127a:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 801127e:	4620      	mov	r0, r4
 8011280:	f005 fca0 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(328, 153, 60, 35);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f203 509c 	addw	r0, r3, #1436	; 0x59c
 801128a:	2323      	movs	r3, #35	; 0x23
 801128c:	9300      	str	r3, [sp, #0]
 801128e:	233c      	movs	r3, #60	; 0x3c
 8011290:	2299      	movs	r2, #153	; 0x99
 8011292:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011296:	f7fe fbbb 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f203 549c 	addw	r4, r3, #1436	; 0x59c
 80112a0:	22ff      	movs	r2, #255	; 0xff
 80112a2:	21ff      	movs	r1, #255	; 0xff
 80112a4:	20ff      	movs	r0, #255	; 0xff
 80112a6:	f7ff f941 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112aa:	4603      	mov	r3, r0
 80112ac:	4619      	mov	r1, r3
 80112ae:	4620      	mov	r0, r4
 80112b0:	f7fe fe7d 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80112ba:	2100      	movs	r1, #0
 80112bc:	4618      	mov	r0, r3
 80112be:	f7fe fec9 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f603 249c 	addw	r4, r3, #2716	; 0xa9c
 80112c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80112cc:	2118      	movs	r1, #24
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fe fe04 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80112d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fe fe0f 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 80112de:	4603      	mov	r3, r0
 80112e0:	4a92      	ldr	r2, [pc, #584]	; (801152c <_ZN12MainViewBaseC1Ev+0xfac>)
 80112e2:	2105      	movs	r1, #5
 80112e4:	4620      	mov	r0, r4
 80112e6:	f009 f817 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f203 529c 	addw	r2, r3, #1436	; 0x59c
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80112f6:	4619      	mov	r1, r3
 80112f8:	4610      	mov	r0, r2
 80112fa:	f7fe ff33 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f203 549c 	addw	r4, r3, #1436	; 0x59c
 8011304:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011308:	2117      	movs	r1, #23
 801130a:	4618      	mov	r0, r3
 801130c:	f7fe fde6 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8011310:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8011314:	4620      	mov	r0, r4
 8011316:	f005 fc55 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(411, 153, 60, 35);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f203 50d4 	addw	r0, r3, #1492	; 0x5d4
 8011320:	2323      	movs	r3, #35	; 0x23
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	233c      	movs	r3, #60	; 0x3c
 8011326:	2299      	movs	r2, #153	; 0x99
 8011328:	f240 119b 	movw	r1, #411	; 0x19b
 801132c:	f7fe fb70 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f203 54d4 	addw	r4, r3, #1492	; 0x5d4
 8011336:	22ff      	movs	r2, #255	; 0xff
 8011338:	21ff      	movs	r1, #255	; 0xff
 801133a:	20ff      	movs	r0, #255	; 0xff
 801133c:	f7ff f8f6 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011340:	4603      	mov	r3, r0
 8011342:	4619      	mov	r1, r3
 8011344:	4620      	mov	r0, r4
 8011346:	f7fe fe32 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8011350:	2100      	movs	r1, #0
 8011352:	4618      	mov	r0, r3
 8011354:	f7fe fe7e 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f603 24a6 	addw	r4, r3, #2726	; 0xaa6
 801135e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011362:	2126      	movs	r1, #38	; 0x26
 8011364:	4618      	mov	r0, r3
 8011366:	f7fe fdb9 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801136a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801136e:	4618      	mov	r0, r3
 8011370:	f7fe fdc4 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8011374:	4603      	mov	r3, r0
 8011376:	4a6d      	ldr	r2, [pc, #436]	; (801152c <_ZN12MainViewBaseC1Ev+0xfac>)
 8011378:	2105      	movs	r1, #5
 801137a:	4620      	mov	r0, r4
 801137c:	f008 ffcc 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f203 52d4 	addw	r2, r3, #1492	; 0x5d4
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f603 23a6 	addw	r3, r3, #2726	; 0xaa6
 801138c:	4619      	mov	r1, r3
 801138e:	4610      	mov	r0, r2
 8011390:	f7fe fee8 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f203 54d4 	addw	r4, r3, #1492	; 0x5d4
 801139a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801139e:	2119      	movs	r1, #25
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fe fd9b 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80113a6:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 80113aa:	4620      	mov	r0, r4
 80113ac:	f005 fc0a 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80113b6:	22f0      	movs	r2, #240	; 0xf0
 80113b8:	f240 1197 	movw	r1, #407	; 0x197
 80113bc:	4618      	mov	r0, r3
 80113be:	f7fe fb72 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 80113c8:	22ed      	movs	r2, #237	; 0xed
 80113ca:	2100      	movs	r1, #0
 80113cc:	20ff      	movs	r0, #255	; 0xff
 80113ce:	f7ff f8ad 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113d2:	4603      	mov	r3, r0
 80113d4:	4619      	mov	r1, r3
 80113d6:	4620      	mov	r0, r4
 80113d8:	f7fe fde9 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80113e2:	2100      	movs	r1, #0
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fe fe35 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 80113f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80113f4:	211c      	movs	r1, #28
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fe fd70 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80113fc:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011400:	4620      	mov	r0, r4
 8011402:	f005 fbdf 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801140c:	22e2      	movs	r2, #226	; 0xe2
 801140e:	f240 116d 	movw	r1, #365	; 0x16d
 8011412:	4618      	mov	r0, r3
 8011414:	f7fe fb47 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f503 60c8 	add.w	r0, r3, #1600	; 0x640
 801141e:	230a      	movs	r3, #10
 8011420:	9300      	str	r3, [sp, #0]
 8011422:	2364      	movs	r3, #100	; 0x64
 8011424:	2202      	movs	r2, #2
 8011426:	2102      	movs	r1, #2
 8011428:	f003 f9cc 	bl	80147c4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f503 60c8 	add.w	r0, r3, #1600	; 0x640
 8011432:	2300      	movs	r3, #0
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	2300      	movs	r3, #0
 8011438:	2264      	movs	r2, #100	; 0x64
 801143a:	2100      	movs	r1, #0
 801143c:	f003 fc40 	bl	8014cc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8011446:	2100      	movs	r1, #0
 8011448:	4618      	mov	r0, r3
 801144a:	f003 fa1b 	bl	8014884 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f503 64c8 	add.w	r4, r3, #1600	; 0x640
 8011454:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011458:	2100      	movs	r1, #0
 801145a:	4618      	mov	r0, r3
 801145c:	f7fe fa7a 	bl	800f954 <_ZN8touchgfx6BitmapC1Et>
 8011460:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011464:	4619      	mov	r1, r3
 8011466:	4620      	mov	r0, r4
 8011468:	f003 fc1f 	bl	8014caa <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 237));
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f503 64c8 	add.w	r4, r3, #1600	; 0x640
 8011472:	22ed      	movs	r2, #237	; 0xed
 8011474:	2100      	movs	r1, #0
 8011476:	20ff      	movs	r0, #255	; 0xff
 8011478:	f7ff f858 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801147c:	4603      	mov	r3, r0
 801147e:	4619      	mov	r1, r3
 8011480:	4620      	mov	r0, r4
 8011482:	f003 f949 	bl	8014718 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801148c:	213c      	movs	r1, #60	; 0x3c
 801148e:	4618      	mov	r0, r3
 8011490:	f003 f9b0 	bl	80147f4 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f503 60e0 	add.w	r0, r3, #1792	; 0x700
 801149a:	230a      	movs	r3, #10
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	23b4      	movs	r3, #180	; 0xb4
 80114a0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80114a4:	210e      	movs	r1, #14
 80114a6:	f7fe fab3 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f203 7474 	addw	r4, r3, #1908	; 0x774
 80114b0:	22ff      	movs	r2, #255	; 0xff
 80114b2:	21ff      	movs	r1, #255	; 0xff
 80114b4:	20ff      	movs	r0, #255	; 0xff
 80114b6:	f7ff f839 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114ba:	4603      	mov	r3, r0
 80114bc:	22ff      	movs	r2, #255	; 0xff
 80114be:	4619      	mov	r1, r3
 80114c0:	4620      	mov	r0, r4
 80114c2:	f004 fe50 	bl	8016166 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f503 62e0 	add.w	r2, r3, #1792	; 0x700
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80114d2:	4619      	mov	r1, r3
 80114d4:	4610      	mov	r0, r2
 80114d6:	f004 feaf 	bl	8016238 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80114e0:	2205      	movs	r2, #5
 80114e2:	2100      	movs	r1, #0
 80114e4:	4618      	mov	r0, r3
 80114e6:	f000 fb81 	bl	8011bec <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80114f0:	2205      	movs	r2, #5
 80114f2:	21b4      	movs	r1, #180	; 0xb4
 80114f4:	4618      	mov	r0, r3
 80114f6:	f000 fb9f 	bl	8011c38 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8011500:	2102      	movs	r1, #2
 8011502:	4618      	mov	r0, r3
 8011504:	f000 fbbe 	bl	8011c84 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 801150e:	2100      	movs	r1, #0
 8011510:	4618      	mov	r0, r3
 8011512:	f005 f9ab 	bl	801686c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f203 708c 	addw	r0, r3, #1932	; 0x78c
 801151c:	230a      	movs	r3, #10
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	23b4      	movs	r3, #180	; 0xb4
 8011522:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011526:	f240 111f 	movw	r1, #287	; 0x11f
 801152a:	e001      	b.n	8011530 <_ZN12MainViewBaseC1Ev+0xfb0>
 801152c:	08025750 	.word	0x08025750
 8011530:	f7fe fa6e 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f503 6400 	add.w	r4, r3, #2048	; 0x800
 801153a:	22ff      	movs	r2, #255	; 0xff
 801153c:	21ff      	movs	r1, #255	; 0xff
 801153e:	20ff      	movs	r0, #255	; 0xff
 8011540:	f7fe fff4 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011544:	4603      	mov	r3, r0
 8011546:	22ff      	movs	r2, #255	; 0xff
 8011548:	4619      	mov	r1, r3
 801154a:	4620      	mov	r0, r4
 801154c:	f004 fe0b 	bl	8016166 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f203 728c 	addw	r2, r3, #1932	; 0x78c
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801155c:	4619      	mov	r1, r3
 801155e:	4610      	mov	r0, r2
 8011560:	f004 fe6a 	bl	8016238 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 801156a:	2205      	movs	r2, #5
 801156c:	2100      	movs	r1, #0
 801156e:	4618      	mov	r0, r3
 8011570:	f000 fb3c 	bl	8011bec <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 801157a:	2205      	movs	r2, #5
 801157c:	21b4      	movs	r1, #180	; 0xb4
 801157e:	4618      	mov	r0, r3
 8011580:	f000 fb5a 	bl	8011c38 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 801158a:	2102      	movs	r1, #2
 801158c:	4618      	mov	r0, r3
 801158e:	f000 fb79 	bl	8011c84 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8011598:	2100      	movs	r1, #0
 801159a:	4618      	mov	r0, r3
 801159c:	f005 f966 	bl	801686c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f603 0018 	addw	r0, r3, #2072	; 0x818
 80115a6:	2315      	movs	r3, #21
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	233c      	movs	r3, #60	; 0x3c
 80115ac:	22f7      	movs	r2, #247	; 0xf7
 80115ae:	21d2      	movs	r1, #210	; 0xd2
 80115b0:	f7fe fa2e 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f603 0418 	addw	r4, r3, #2072	; 0x818
 80115ba:	22ff      	movs	r2, #255	; 0xff
 80115bc:	21ff      	movs	r1, #255	; 0xff
 80115be:	20ff      	movs	r0, #255	; 0xff
 80115c0:	f7fe ffb4 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115c4:	4603      	mov	r3, r0
 80115c6:	4619      	mov	r1, r3
 80115c8:	4620      	mov	r0, r4
 80115ca:	f7fe fcf0 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80115d4:	2100      	movs	r1, #0
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fe fd3c 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f503 642b 	add.w	r4, r3, #2736	; 0xab0
 80115e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80115e6:	211e      	movs	r1, #30
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fe fc77 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80115ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fe fc82 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 80115f8:	4603      	mov	r3, r0
 80115fa:	4ae1      	ldr	r2, [pc, #900]	; (8011980 <_ZN12MainViewBaseC1Ev+0x1400>)
 80115fc:	2105      	movs	r1, #5
 80115fe:	4620      	mov	r0, r4
 8011600:	f008 fe8a 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f603 0218 	addw	r2, r3, #2072	; 0x818
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8011610:	4619      	mov	r1, r3
 8011612:	4610      	mov	r0, r2
 8011614:	f7fe fda6 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f603 0418 	addw	r4, r3, #2072	; 0x818
 801161e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011622:	211d      	movs	r1, #29
 8011624:	4618      	mov	r0, r3
 8011626:	f7fe fc59 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801162a:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 801162e:	4620      	mov	r0, r4
 8011630:	f005 fac8 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801163a:	2201      	movs	r2, #1
 801163c:	2101      	movs	r1, #1
 801163e:	4618      	mov	r0, r3
 8011640:	f7fe fa31 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 801164a:	2337      	movs	r3, #55	; 0x37
 801164c:	9300      	str	r3, [sp, #0]
 801164e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011652:	2202      	movs	r2, #2
 8011654:	2102      	movs	r1, #2
 8011656:	f003 fa05 	bl	8014a64 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 8011660:	2300      	movs	r3, #0
 8011662:	9300      	str	r3, [sp, #0]
 8011664:	2300      	movs	r3, #0
 8011666:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801166a:	2100      	movs	r1, #0
 801166c:	f003 fb28 	bl	8014cc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8011676:	2100      	movs	r1, #0
 8011678:	4618      	mov	r0, r3
 801167a:	f003 f903 	bl	8014884 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_GREEN_PINK_FADEPINKPURPLE_SMALL_TRANSPARENT_ID);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8011684:	2101      	movs	r1, #1
 8011686:	4618      	mov	r0, r3
 8011688:	f003 f947 	bl	801491a <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8011692:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011696:	4618      	mov	r0, r3
 8011698:	f003 f9fc 	bl	8014a94 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80116a2:	2101      	movs	r1, #1
 80116a4:	4618      	mov	r0, r3
 80116a6:	f003 f921 	bl	80148ec <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f503 6014 	add.w	r0, r3, #2368	; 0x940
 80116b0:	2316      	movs	r3, #22
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	2337      	movs	r3, #55	; 0x37
 80116b6:	2204      	movs	r2, #4
 80116b8:	2119      	movs	r1, #25
 80116ba:	f7fe f9a9 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f503 6414 	add.w	r4, r3, #2368	; 0x940
 80116c4:	22ff      	movs	r2, #255	; 0xff
 80116c6:	21ff      	movs	r1, #255	; 0xff
 80116c8:	20ff      	movs	r0, #255	; 0xff
 80116ca:	f7fe ff2f 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116ce:	4603      	mov	r3, r0
 80116d0:	4619      	mov	r1, r3
 80116d2:	4620      	mov	r0, r4
 80116d4:	f7fe fc6b 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80116de:	2100      	movs	r1, #0
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fe fcb7 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f603 24ba 	addw	r4, r3, #2746	; 0xaba
 80116ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80116f0:	2120      	movs	r1, #32
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fe fbf2 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80116f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fe fbfd 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8011702:	4603      	mov	r3, r0
 8011704:	4a9e      	ldr	r2, [pc, #632]	; (8011980 <_ZN12MainViewBaseC1Ev+0x1400>)
 8011706:	2105      	movs	r1, #5
 8011708:	4620      	mov	r0, r4
 801170a:	f008 fe05 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f503 6214 	add.w	r2, r3, #2368	; 0x940
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f603 23ba 	addw	r3, r3, #2746	; 0xaba
 801171a:	4619      	mov	r1, r3
 801171c:	4610      	mov	r0, r2
 801171e:	f7fe fd21 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f503 6414 	add.w	r4, r3, #2368	; 0x940
 8011728:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801172c:	211f      	movs	r1, #31
 801172e:	4618      	mov	r0, r3
 8011730:	f7fe fbd4 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8011734:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8011738:	4620      	mov	r0, r4
 801173a:	f005 fa43 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8011744:	220f      	movs	r2, #15
 8011746:	2152      	movs	r1, #82	; 0x52
 8011748:	4618      	mov	r0, r3
 801174a:	f7fe f9ac 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8011754:	22ff      	movs	r2, #255	; 0xff
 8011756:	21ff      	movs	r1, #255	; 0xff
 8011758:	20ff      	movs	r0, #255	; 0xff
 801175a:	f7fe fee7 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801175e:	4603      	mov	r3, r0
 8011760:	4619      	mov	r1, r3
 8011762:	4620      	mov	r0, r4
 8011764:	f7fe fc23 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801176e:	2100      	movs	r1, #0
 8011770:	4618      	mov	r0, r3
 8011772:	f7fe fc6f 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f603 1478 	addw	r4, r3, #2424	; 0x978
 801177c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011780:	2121      	movs	r1, #33	; 0x21
 8011782:	4618      	mov	r0, r3
 8011784:	f7fe fbaa 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8011788:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 801178c:	4620      	mov	r0, r4
 801178e:	f005 fa19 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(328, 91, 60, 35);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f603 10ac 	addw	r0, r3, #2476	; 0x9ac
 8011798:	2323      	movs	r3, #35	; 0x23
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	233c      	movs	r3, #60	; 0x3c
 801179e:	225b      	movs	r2, #91	; 0x5b
 80117a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80117a4:	f7fe f934 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 80117ae:	22ff      	movs	r2, #255	; 0xff
 80117b0:	21ff      	movs	r1, #255	; 0xff
 80117b2:	20ff      	movs	r0, #255	; 0xff
 80117b4:	f7fe feba 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117b8:	4603      	mov	r3, r0
 80117ba:	4619      	mov	r1, r3
 80117bc:	4620      	mov	r0, r4
 80117be:	f7fe fbf6 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 80117c8:	2100      	movs	r1, #0
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7fe fc42 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 80117d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80117da:	2123      	movs	r1, #35	; 0x23
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fe fb7d 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80117e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe fb88 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 80117ec:	4603      	mov	r3, r0
 80117ee:	4a64      	ldr	r2, [pc, #400]	; (8011980 <_ZN12MainViewBaseC1Ev+0x1400>)
 80117f0:	2105      	movs	r1, #5
 80117f2:	4620      	mov	r0, r4
 80117f4:	f008 fd90 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f603 12ac 	addw	r2, r3, #2476	; 0x9ac
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8011804:	4619      	mov	r1, r3
 8011806:	4610      	mov	r0, r2
 8011808:	f7fe fcac 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 8011812:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011816:	2122      	movs	r1, #34	; 0x22
 8011818:	4618      	mov	r0, r3
 801181a:	f7fe fb5f 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801181e:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8011822:	4620      	mov	r0, r4
 8011824:	f005 f9ce 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(409, 91, 60, 35);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f603 10e4 	addw	r0, r3, #2532	; 0x9e4
 801182e:	2323      	movs	r3, #35	; 0x23
 8011830:	9300      	str	r3, [sp, #0]
 8011832:	233c      	movs	r3, #60	; 0x3c
 8011834:	225b      	movs	r2, #91	; 0x5b
 8011836:	f240 1199 	movw	r1, #409	; 0x199
 801183a:	f7fe f8e9 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f603 14e4 	addw	r4, r3, #2532	; 0x9e4
 8011844:	22ff      	movs	r2, #255	; 0xff
 8011846:	21ff      	movs	r1, #255	; 0xff
 8011848:	20ff      	movs	r0, #255	; 0xff
 801184a:	f7fe fe6f 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801184e:	4603      	mov	r3, r0
 8011850:	4619      	mov	r1, r3
 8011852:	4620      	mov	r0, r4
 8011854:	f7fe fbab 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 801185e:	2100      	movs	r1, #0
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe fbf7 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f603 24ce 	addw	r4, r3, #2766	; 0xace
 801186c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011870:	2125      	movs	r1, #37	; 0x25
 8011872:	4618      	mov	r0, r3
 8011874:	f7fe fb32 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8011878:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801187c:	4618      	mov	r0, r3
 801187e:	f7fe fb3d 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8011882:	4603      	mov	r3, r0
 8011884:	4a3e      	ldr	r2, [pc, #248]	; (8011980 <_ZN12MainViewBaseC1Ev+0x1400>)
 8011886:	2105      	movs	r1, #5
 8011888:	4620      	mov	r0, r4
 801188a:	f008 fd45 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f603 12e4 	addw	r2, r3, #2532	; 0x9e4
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f603 23ce 	addw	r3, r3, #2766	; 0xace
 801189a:	4619      	mov	r1, r3
 801189c:	4610      	mov	r0, r2
 801189e:	f7fe fc61 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f603 14e4 	addw	r4, r3, #2532	; 0x9e4
 80118a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80118ac:	2124      	movs	r1, #36	; 0x24
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7fe fb14 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 80118b4:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 80118b8:	4620      	mov	r0, r4
 80118ba:	f005 f983 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KMHValue.setPosition(185, 76, 110, 69);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f603 201c 	addw	r0, r3, #2588	; 0xa1c
 80118c4:	2345      	movs	r3, #69	; 0x45
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	236e      	movs	r3, #110	; 0x6e
 80118ca:	224c      	movs	r2, #76	; 0x4c
 80118cc:	21b9      	movs	r1, #185	; 0xb9
 80118ce:	f7fe f89f 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
    KMHValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f603 241c 	addw	r4, r3, #2588	; 0xa1c
 80118d8:	22ff      	movs	r2, #255	; 0xff
 80118da:	21ff      	movs	r1, #255	; 0xff
 80118dc:	20ff      	movs	r0, #255	; 0xff
 80118de:	f7fe fe25 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80118e2:	4603      	mov	r3, r0
 80118e4:	4619      	mov	r1, r3
 80118e6:	4620      	mov	r0, r4
 80118e8:	f7fe fb61 	bl	800ffae <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KMHValue.setLinespacing(0);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 80118f2:	2100      	movs	r1, #0
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fe fbad 	bl	8010054 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID59).getText());
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f603 24d8 	addw	r4, r3, #2776	; 0xad8
 8011900:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011904:	2128      	movs	r1, #40	; 0x28
 8011906:	4618      	mov	r0, r3
 8011908:	f7fe fae8 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 801190c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011910:	4618      	mov	r0, r3
 8011912:	f7fe faf3 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8011916:	4603      	mov	r3, r0
 8011918:	4a19      	ldr	r2, [pc, #100]	; (8011980 <_ZN12MainViewBaseC1Ev+0x1400>)
 801191a:	2105      	movs	r1, #5
 801191c:	4620      	mov	r0, r4
 801191e:	f008 fcfb 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KMHValue.setWildcard(KMHValueBuffer);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f603 221c 	addw	r2, r3, #2588	; 0xa1c
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 801192e:	4619      	mov	r1, r3
 8011930:	4610      	mov	r0, r2
 8011932:	f7fe fc17 	bl	8010164 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KMHValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID58));
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f603 241c 	addw	r4, r3, #2588	; 0xa1c
 801193c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011940:	2127      	movs	r1, #39	; 0x27
 8011942:	4618      	mov	r0, r3
 8011944:	f7fe faca 	bl	800fedc <_ZN8touchgfx9TypedTextC1Et>
 8011948:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 801194c:	4620      	mov	r0, r4
 801194e:	f005 f939 	bl	8016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3340      	adds	r3, #64	; 0x40
 8011958:	4619      	mov	r1, r3
 801195a:	4610      	mov	r0, r2
 801195c:	f7fe fa06 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	3370      	adds	r3, #112	; 0x70
 8011966:	4619      	mov	r1, r3
 8011968:	4610      	mov	r0, r2
 801196a:	f7fe f9ff 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	33a4      	adds	r3, #164	; 0xa4
 8011974:	4619      	mov	r1, r3
 8011976:	4610      	mov	r0, r2
 8011978:	f7fe f9f8 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
 801197c:	e002      	b.n	8011984 <_ZN12MainViewBaseC1Ev+0x1404>
 801197e:	bf00      	nop
 8011980:	08025750 	.word	0x08025750
    add(CltDecsriptor);
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	33d8      	adds	r3, #216	; 0xd8
 801198a:	4619      	mov	r1, r3
 801198c:	4610      	mov	r0, r2
 801198e:	f7fe f9ed 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801199a:	4619      	mov	r1, r3
 801199c:	4610      	mov	r0, r2
 801199e:	f7fe f9e5 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80119aa:	4619      	mov	r1, r3
 80119ac:	4610      	mov	r0, r2
 80119ae:	f7fe f9dd 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80119ba:	4619      	mov	r1, r3
 80119bc:	4610      	mov	r0, r2
 80119be:	f7fe f9d5 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80119ca:	4619      	mov	r1, r3
 80119cc:	4610      	mov	r0, r2
 80119ce:	f7fe f9cd 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80119da:	4619      	mov	r1, r3
 80119dc:	4610      	mov	r0, r2
 80119de:	f7fe f9c5 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80119ea:	4619      	mov	r1, r3
 80119ec:	4610      	mov	r0, r2
 80119ee:	f7fe f9bd 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80119fa:	4619      	mov	r1, r3
 80119fc:	4610      	mov	r0, r2
 80119fe:	f7fe f9b5 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	4610      	mov	r0, r2
 8011a0e:	f7fe f9ad 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	4610      	mov	r0, r2
 8011a1e:	f7fe f9a5 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8011a22:	687a      	ldr	r2, [r7, #4]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4610      	mov	r0, r2
 8011a2e:	f7fe f99d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	f7fe f995 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	f7fe f98d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	f7fe f985 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	4610      	mov	r0, r2
 8011a6e:	f7fe f97d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	f7fe f975 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor);
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	4610      	mov	r0, r2
 8011a8e:	f7fe f96d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	4610      	mov	r0, r2
 8011a9e:	f7fe f965 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011aaa:	4619      	mov	r1, r3
 8011aac:	4610      	mov	r0, r2
 8011aae:	f7fe f95d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011aba:	4619      	mov	r1, r3
 8011abc:	4610      	mov	r0, r2
 8011abe:	f7fe f955 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011aca:	4619      	mov	r1, r3
 8011acc:	4610      	mov	r0, r2
 8011ace:	f7fe f94d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8011ada:	4619      	mov	r1, r3
 8011adc:	4610      	mov	r0, r2
 8011ade:	f7fe f945 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8011aea:	4619      	mov	r1, r3
 8011aec:	4610      	mov	r0, r2
 8011aee:	f7fe f93d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011afa:	4619      	mov	r1, r3
 8011afc:	4610      	mov	r0, r2
 8011afe:	f7fe f935 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	4610      	mov	r0, r2
 8011b0e:	f7fe f92d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	f7fe f925 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	4610      	mov	r0, r2
 8011b2e:	f7fe f91d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	f7fe f915 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	4610      	mov	r0, r2
 8011b4e:	f7fe f90d 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	4610      	mov	r0, r2
 8011b5e:	f7fe f905 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	f7fe f8fd 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	4610      	mov	r0, r2
 8011b7e:	f7fe f8f5 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	f7fe f8ed 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KMHValue);
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	4610      	mov	r0, r2
 8011b9e:	f7fe f8e5 	bl	800fd6c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	37e4      	adds	r7, #228	; 0xe4
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd90      	pop	{r4, r7, pc}

08011bac <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]

}
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f007 fade 	bl	801918c <_ZN8touchgfx6ScreenC1Ev>
 8011bd0:	4a05      	ldr	r2, [pc, #20]	; (8011be8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	601a      	str	r2, [r3, #0]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	4618      	mov	r0, r3
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	08025d1c 	.word	0x08025d1c

08011bec <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8011bec:	b590      	push	{r4, r7, lr}
 8011bee:	b089      	sub	sp, #36	; 0x24
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	015a      	lsls	r2, r3, #5
 8011c00:	f107 0314 	add.w	r3, r7, #20
 8011c04:	4611      	mov	r1, r2
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fe fadc 	bl	80101c4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	461c      	mov	r4, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	61fb      	str	r3, [r7, #28]
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	015a      	lsls	r2, r3, #5
 8011c18:	f107 0310 	add.w	r3, r7, #16
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fe fad0 	bl	80101c4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c24:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8011c26:	461a      	mov	r2, r3
 8011c28:	4621      	mov	r1, r4
 8011c2a:	68f8      	ldr	r0, [r7, #12]
 8011c2c:	f004 fe08 	bl	8016840 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8011c30:	bf00      	nop
 8011c32:	3724      	adds	r7, #36	; 0x24
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd90      	pop	{r4, r7, pc}

08011c38 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8011c38:	b590      	push	{r4, r7, lr}
 8011c3a:	b089      	sub	sp, #36	; 0x24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	61bb      	str	r3, [r7, #24]
 8011c48:	69bb      	ldr	r3, [r7, #24]
 8011c4a:	015a      	lsls	r2, r3, #5
 8011c4c:	f107 0314 	add.w	r3, r7, #20
 8011c50:	4611      	mov	r1, r2
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fe fab6 	bl	80101c4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	461c      	mov	r4, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	61fb      	str	r3, [r7, #28]
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	015a      	lsls	r2, r3, #5
 8011c64:	f107 0310 	add.w	r3, r7, #16
 8011c68:	4611      	mov	r1, r2
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fe faaa 	bl	80101c4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c70:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8011c72:	461a      	mov	r2, r3
 8011c74:	4621      	mov	r1, r4
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f004 fded 	bl	8016856 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8011c7c:	bf00      	nop
 8011c7e:	3724      	adds	r7, #36	; 0x24
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd90      	pop	{r4, r7, pc}

08011c84 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6039      	str	r1, [r7, #0]
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	60fb      	str	r3, [r7, #12]
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	015a      	lsls	r2, r3, #5
 8011c96:	f107 0308 	add.w	r3, r7, #8
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7fe fa91 	bl	80101c4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011ca2:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f7fe faa7 	bl	80101fa <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8011cac:	bf00      	nop
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	4a05      	ldr	r2, [pc, #20]	; (8011cd4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fe fa15 	bl	80100f4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	08027904 	.word	0x08027904

08011cd8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7ff ffe7 	bl	8011cb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011ce6:	2138      	movs	r1, #56	; 0x38
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f012 fa82 	bl	80241f2 <_ZdlPvj>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	4a05      	ldr	r2, [pc, #20]	; (8011d18 <_ZN8touchgfx4LineD1Ev+0x20>)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f004 fb73 	bl	80163f4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	080276b0 	.word	0x080276b0

08011d1c <_ZN8touchgfx4LineD0Ev>:
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff ffe7 	bl	8011cf8 <_ZN8touchgfx4LineD1Ev>
 8011d2a:	2174      	movs	r1, #116	; 0x74
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f012 fa60 	bl	80241f2 <_ZdlPvj>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	4618      	mov	r0, r3
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	4a05      	ldr	r2, [pc, #20]	; (8011d5c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	601a      	str	r2, [r3, #0]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fe fa77 	bl	8010240 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	4618      	mov	r0, r3
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	080273b4 	.word	0x080273b4

08011d60 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7ff ffe7 	bl	8011d3c <_ZN8touchgfx13PainterRGB888D1Ev>
 8011d6e:	2118      	movs	r1, #24
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f012 fa3e 	bl	80241f2 <_ZdlPvj>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011d80:	b480      	push	{r7}
 8011d82:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011d84:	4b02      	ldr	r3, [pc, #8]	; (8011d90 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr
 8011d90:	08025e88 	.word	0x08025e88

08011d94 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011d94:	b480      	push	{r7}
 8011d96:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011d98:	2304      	movs	r3, #4
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011da4:	b480      	push	{r7}
 8011da6:	b085      	sub	sp, #20
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	60b9      	str	r1, [r7, #8]
 8011dae:	4613      	mov	r3, r2
 8011db0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8011db2:	4a07      	ldr	r2, [pc, #28]	; (8011dd0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011db8:	4a06      	ldr	r2, [pc, #24]	; (8011dd4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011dbe:	4a06      	ldr	r2, [pc, #24]	; (8011dd8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011dc0:	88fb      	ldrh	r3, [r7, #6]
 8011dc2:	8013      	strh	r3, [r2, #0]
    }
 8011dc4:	bf00      	nop
 8011dc6:	3714      	adds	r7, #20
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr
 8011dd0:	2000bd08 	.word	0x2000bd08
 8011dd4:	2000bd10 	.word	0x2000bd10
 8011dd8:	2000bd0c 	.word	0x2000bd0c

08011ddc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011ddc:	b590      	push	{r4, r7, lr}
 8011dde:	b085      	sub	sp, #20
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	4603      	mov	r3, r0
 8011de4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011de6:	2300      	movs	r3, #0
 8011de8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011dea:	88fb      	ldrh	r3, [r7, #6]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d127      	bne.n	8011e40 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011df0:	88fb      	ldrh	r3, [r7, #6]
 8011df2:	4a1e      	ldr	r2, [pc, #120]	; (8011e6c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d016      	beq.n	8011e2a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011dfc:	88fb      	ldrh	r3, [r7, #6]
 8011dfe:	4a1b      	ldr	r2, [pc, #108]	; (8011e6c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e04:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	68ba      	ldr	r2, [r7, #8]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	4a18      	ldr	r2, [pc, #96]	; (8011e70 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011e10:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	68ba      	ldr	r2, [r7, #8]
 8011e18:	4413      	add	r3, r2
 8011e1a:	4a16      	ldr	r2, [pc, #88]	; (8011e74 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011e1c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	68ba      	ldr	r2, [r7, #8]
 8011e24:	4413      	add	r3, r2
 8011e26:	60fb      	str	r3, [r7, #12]
 8011e28:	e00a      	b.n	8011e40 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011e2a:	4b11      	ldr	r3, [pc, #68]	; (8011e70 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011e2c:	4a12      	ldr	r2, [pc, #72]	; (8011e78 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011e2e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011e30:	4a12      	ldr	r2, [pc, #72]	; (8011e7c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011e32:	4b10      	ldr	r3, [pc, #64]	; (8011e74 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011e34:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011e36:	88fb      	ldrh	r3, [r7, #6]
 8011e38:	4a11      	ldr	r2, [pc, #68]	; (8011e80 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e3e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00d      	beq.n	8011e62 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011e46:	4a0f      	ldr	r2, [pc, #60]	; (8011e84 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011e48:	88fb      	ldrh	r3, [r7, #6]
 8011e4a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011e4c:	f000 f83e 	bl	8011ecc <_ZN17TypedTextDatabase8getFontsEv>
 8011e50:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011e52:	f000 f833 	bl	8011ebc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011e56:	4603      	mov	r3, r0
 8011e58:	461a      	mov	r2, r3
 8011e5a:	4621      	mov	r1, r4
 8011e5c:	68f8      	ldr	r0, [r7, #12]
 8011e5e:	f7ff ffa1 	bl	8011da4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011e62:	bf00      	nop
 8011e64:	3714      	adds	r7, #20
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd90      	pop	{r4, r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	20008630 	.word	0x20008630
 8011e70:	20008638 	.word	0x20008638
 8011e74:	2000863c 	.word	0x2000863c
 8011e78:	0807d37c 	.word	0x0807d37c
 8011e7c:	0807d2b8 	.word	0x0807d2b8
 8011e80:	0807d4d4 	.word	0x0807d4d4
 8011e84:	20008634 	.word	0x20008634

08011e88 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	460b      	mov	r3, r1
 8011e92:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011e94:	4b07      	ldr	r3, [pc, #28]	; (8011eb4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	4b07      	ldr	r3, [pc, #28]	; (8011eb8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011e9a:	6819      	ldr	r1, [r3, #0]
 8011e9c:	887b      	ldrh	r3, [r7, #2]
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	440b      	add	r3, r1
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	005b      	lsls	r3, r3, #1
 8011ea6:	4413      	add	r3, r2
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	20008638 	.word	0x20008638
 8011eb8:	2000863c 	.word	0x2000863c

08011ebc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011ec0:	2331      	movs	r3, #49	; 0x31
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011ecc:	b480      	push	{r7}
 8011ece:	af00      	add	r7, sp, #0
    return _fonts;
 8011ed0:	4b02      	ldr	r3, [pc, #8]	; (8011edc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr
 8011edc:	20008640 	.word	0x20008640

08011ee0 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d127      	bne.n	8011f40 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	d122      	bne.n	8011f40 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8011efa:	f7fc fe7b 	bl	800ebf4 <_Z25getFont_Asap_Bold_18_4bppv>
 8011efe:	4602      	mov	r2, r0
};
 8011f00:	4b11      	ldr	r3, [pc, #68]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011f02:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8011f04:	f7fc ff3c 	bl	800ed80 <_Z25getFont_Asap_Bold_40_4bppv>
 8011f08:	4602      	mov	r2, r0
};
 8011f0a:	4b0f      	ldr	r3, [pc, #60]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011f0c:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8011f0e:	f7fc fef5 	bl	800ecfc <_Z25getFont_Asap_Bold_30_4bppv>
 8011f12:	4602      	mov	r2, r0
};
 8011f14:	4b0c      	ldr	r3, [pc, #48]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011f16:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8011f18:	f7fc fe2a 	bl	800eb70 <_Z25getFont_Asap_Bold_12_4bppv>
 8011f1c:	4602      	mov	r2, r0
};
 8011f1e:	4b0a      	ldr	r3, [pc, #40]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011f20:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8011f22:	f7fc ff6f 	bl	800ee04 <_Z25getFont_Asap_Bold_60_4bppv>
 8011f26:	4602      	mov	r2, r0
};
 8011f28:	4b07      	ldr	r3, [pc, #28]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011f2a:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8011f2c:	f7fc fea4 	bl	800ec78 <_Z25getFont_Asap_Bold_21_4bppv>
 8011f30:	4602      	mov	r2, r0
};
 8011f32:	4b05      	ldr	r3, [pc, #20]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011f34:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8011f36:	f7fc fdd9 	bl	800eaec <_Z25getFont_Asap_Bold_10_4bppv>
 8011f3a:	4602      	mov	r2, r0
};
 8011f3c:	4b02      	ldr	r3, [pc, #8]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011f3e:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8011f40:	bf00      	nop
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	20008640 	.word	0x20008640

08011f4c <_GLOBAL__sub_I__fonts>:
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f54:	2001      	movs	r0, #1
 8011f56:	f7ff ffc3 	bl	8011ee0 <_Z41__static_initialization_and_destruction_0ii>
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	4a05      	ldr	r2, [pc, #20]	; (8011f7c <_ZN19FrontendApplicationD1Ev+0x20>)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7fd f9d9 	bl	800f324 <_ZN23FrontendApplicationBaseD1Ev>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4618      	mov	r0, r3
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	08025ee0 	.word	0x08025ee0

08011f80 <_ZN19FrontendApplicationD0Ev>:
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7ff ffe7 	bl	8011f5c <_ZN19FrontendApplicationD1Ev>
 8011f8e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f012 f92d 	bl	80241f2 <_ZdlPvj>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b082      	sub	sp, #8
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f000 fc53 	bl	801285c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f006 f86b 	bl	8018094 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011fbe:	bf00      	nop
 8011fc0:	3708      	adds	r7, #8
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
	...

08011fc8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b084      	sub	sp, #16
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	68b9      	ldr	r1, [r7, #8]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7fd fa1c 	bl	800f418 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011fe0:	4a03      	ldr	r2, [pc, #12]	; (8011ff0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	601a      	str	r2, [r3, #0]
{
}
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	08025ee0 	.word	0x08025ee0

08011ff4 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
    {
    }
 8011ffc:	bf00      	nop
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
    {
    }
 8012010:	bf00      	nop
 8012012:	370c      	adds	r7, #12
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
    {
 8012024:	4a04      	ldr	r2, [pc, #16]	; (8012038 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	601a      	str	r2, [r3, #0]
    }
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	4618      	mov	r0, r3
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	08025f6c 	.word	0x08025f6c

0801203c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
    }
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff ffe9 	bl	801201c <_ZN8touchgfx9PresenterD1Ev>
 801204a:	2104      	movs	r1, #4
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f012 f8d0 	bl	80241f2 <_ZdlPvj>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	4618      	mov	r0, r3
 8012056:	3708      	adds	r7, #8
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
    {
 8012064:	4a04      	ldr	r2, [pc, #16]	; (8012078 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	601a      	str	r2, [r3, #0]
    }
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	4618      	mov	r0, r3
 801206e:	370c      	adds	r7, #12
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr
 8012078:	08025f6c 	.word	0x08025f6c

0801207c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	4a06      	ldr	r2, [pc, #24]	; (80120a0 <_ZN13ModelListenerC1Ev+0x24>)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	601a      	str	r2, [r3, #0]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2200      	movs	r2, #0
 801208e:	605a      	str	r2, [r3, #4]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	4618      	mov	r0, r3
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	08025f54 	.word	0x08025f54

080120a4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	4a04      	ldr	r2, [pc, #16]	; (80120c0 <_ZN13ModelListenerD1Ev+0x1c>)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	601a      	str	r2, [r3, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	4618      	mov	r0, r3
 80120b6:	370c      	adds	r7, #12
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	08025f54 	.word	0x08025f54

080120c4 <_ZN13ModelListenerD0Ev>:
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7ff ffe9 	bl	80120a4 <_ZN13ModelListenerD1Ev>
 80120d2:	2108      	movs	r1, #8
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f012 f88c 	bl	80241f2 <_ZdlPvj>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	4618      	mov	r0, r3
 80120de:	3708      	adds	r7, #8
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
 80120ee:	bf00      	nop
 80120f0:	370c      	adds	r7, #12
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr

080120fa <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 80120fa:	b480      	push	{r7}
 80120fc:	b083      	sub	sp, #12
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
 8012102:	6039      	str	r1, [r7, #0]
 8012104:	bf00      	nop
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	4a09      	ldr	r2, [pc, #36]	; (8012140 <_ZN13MainPresenterD1Ev+0x30>)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	601a      	str	r2, [r3, #0]
 801211e:	4a09      	ldr	r2, [pc, #36]	; (8012144 <_ZN13MainPresenterD1Ev+0x34>)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	605a      	str	r2, [r3, #4]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	3304      	adds	r3, #4
 8012128:	4618      	mov	r0, r3
 801212a:	f7ff ffbb 	bl	80120a4 <_ZN13ModelListenerD1Ev>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	f7ff ff73 	bl	801201c <_ZN8touchgfx9PresenterD1Ev>
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4618      	mov	r0, r3
 801213a:	3708      	adds	r7, #8
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	08025f1c 	.word	0x08025f1c
 8012144:	08025f3c 	.word	0x08025f3c

08012148 <_ZThn4_N13MainPresenterD1Ev>:
 8012148:	f1a0 0004 	sub.w	r0, r0, #4
 801214c:	e7e0      	b.n	8012110 <_ZN13MainPresenterD1Ev>
 801214e:	bf00      	nop

08012150 <_ZN13MainPresenterD0Ev>:
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff ffd9 	bl	8012110 <_ZN13MainPresenterD1Ev>
 801215e:	2110      	movs	r1, #16
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f012 f846 	bl	80241f2 <_ZdlPvj>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZThn4_N13MainPresenterD0Ev>:
 8012170:	f1a0 0004 	sub.w	r0, r0, #4
 8012174:	e7ec      	b.n	8012150 <_ZN13MainPresenterD0Ev>
	...

08012178 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]
    : view(v)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	4618      	mov	r0, r3
 8012186:	f7ff ff69 	bl	801205c <_ZN8touchgfx9PresenterC1Ev>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	3304      	adds	r3, #4
 801218e:	4618      	mov	r0, r3
 8012190:	f7ff ff74 	bl	801207c <_ZN13ModelListenerC1Ev>
 8012194:	4a06      	ldr	r2, [pc, #24]	; (80121b0 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	601a      	str	r2, [r3, #0]
 801219a:	4a06      	ldr	r2, [pc, #24]	; (80121b4 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	605a      	str	r2, [r3, #4]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	683a      	ldr	r2, [r7, #0]
 80121a4:	60da      	str	r2, [r3, #12]
{
}
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4618      	mov	r0, r3
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	08025f1c 	.word	0x08025f1c
 80121b4:	08025f3c 	.word	0x08025f3c

080121b8 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80121b8:	b480      	push	{r7}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
}
 80121c0:	bf00      	nop
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
}
 80121d4:	bf00      	nop
 80121d6:	370c      	adds	r7, #12
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	6839      	ldr	r1, [r7, #0]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 f9f7 	bl	80125e4 <_ZN8MainView9updateValEPh>
}
 80121f6:	bf00      	nop
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 80121fe:	f1a0 0004 	sub.w	r0, r0, #4
 8012202:	f7ff bfed 	b.w	80121e0 <_ZN13MainPresenter11setNewValueEPh>

08012206 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8012206:	b580      	push	{r7, lr}
 8012208:	b082      	sub	sp, #8
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
 801220e:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	4618      	mov	r0, r3
 8012218:	f000 f908 	bl	801242c <_ZN8MainView14updateSettingsEPh>
}
 801221c:	bf00      	nop
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012224:	f1a0 0004 	sub.w	r0, r0, #4
 8012228:	f7ff bfed 	b.w	8012206 <_ZN13MainPresenter21updateDisplaySettingsEPh>

0801222c <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2200      	movs	r2, #0
 8012238:	601a      	str	r2, [r3, #0]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	4618      	mov	r0, r3
 801223e:	370c      	adds	r7, #12
 8012240:	46bd      	mov	sp, r7
 8012242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012246:	4770      	bx	lr

08012248 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	460b      	mov	r3, r1
 8012252:	607a      	str	r2, [r7, #4]
 8012254:	ed87 0a00 	vstr	s0, [r7]
 8012258:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 801225a:	463b      	mov	r3, r7
 801225c:	8979      	ldrh	r1, [r7, #10]
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f008 f9b3 	bl	801a5cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012266:	4603      	mov	r3, r0
    }
 8012268:	4618      	mov	r0, r3
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801227e:	4618      	mov	r0, r3
 8012280:	370c      	adds	r7, #12
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr

0801228a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801228a:	b480      	push	{r7}
 801228c:	b083      	sub	sp, #12
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
        return rect.height;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012298:	4618      	mov	r0, r3
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	4a05      	ldr	r2, [pc, #20]	; (80122c4 <_ZN8MainViewD1Ev+0x20>)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	601a      	str	r2, [r3, #0]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fe f829 	bl	801030c <_ZN12MainViewBaseD1Ev>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	08025f84 	.word	0x08025f84

080122c8 <_ZN8MainViewD0Ev>:
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ff ffe7 	bl	80122a4 <_ZN8MainViewD1Ev>
 80122d6:	f242 7104 	movw	r1, #9988	; 0x2704
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f011 ff89 	bl	80241f2 <_ZdlPvj>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4618      	mov	r0, r3
 80122e4:	3708      	adds	r7, #8
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
	...

080122ec <_ZN8MainViewC1Ev>:
#include <touchgfx/Color.hpp>

static int color_index = 0;
static int rev_limit = 9000;

MainView::MainView()
 80122ec:	b590      	push	{r4, r7, lr}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fe f942 	bl	8010580 <_ZN12MainViewBaseC1Ev>
 80122fc:	4a15      	ldr	r2, [pc, #84]	; (8012354 <_ZN8MainViewC1Ev+0x68>)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012302:	4b15      	ldr	r3, [pc, #84]	; (8012358 <_ZN8MainViewC1Ev+0x6c>)
 8012304:	881b      	ldrh	r3, [r3, #0]
 8012306:	461c      	mov	r4, r3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801230e:	4618      	mov	r0, r3
 8012310:	f7ff ffae 	bl	8012270 <_ZNK8touchgfx8Drawable8getWidthEv>
 8012314:	4603      	mov	r3, r0
 8012316:	429c      	cmp	r4, r3
 8012318:	dc0b      	bgt.n	8012332 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 801231a:	4b10      	ldr	r3, [pc, #64]	; (801235c <_ZN8MainViewC1Ev+0x70>)
 801231c:	881b      	ldrh	r3, [r3, #0]
 801231e:	461c      	mov	r4, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012326:	4618      	mov	r0, r3
 8012328:	f7ff ffaf 	bl	801228a <_ZNK8touchgfx8Drawable9getHeightEv>
 801232c:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 801232e:	429c      	cmp	r4, r3
 8012330:	dd01      	ble.n	8012336 <_ZN8MainViewC1Ev+0x4a>
 8012332:	2301      	movs	r3, #1
 8012334:	e000      	b.n	8012338 <_ZN8MainViewC1Ev+0x4c>
 8012336:	2300      	movs	r3, #0
 8012338:	2b00      	cmp	r3, #0
 801233a:	d005      	beq.n	8012348 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	3340      	adds	r3, #64	; 0x40
 8012340:	2101      	movs	r1, #1
 8012342:	4618      	mov	r0, r3
 8012344:	f7fd fc20 	bl	800fb88 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	370c      	adds	r7, #12
 801234e:	46bd      	mov	sp, r7
 8012350:	bd90      	pop	{r4, r7, pc}
 8012352:	bf00      	nop
 8012354:	08025f84 	.word	0x08025f84
 8012358:	2000bc6c 	.word	0x2000bc6c
 801235c:	2000bc6e 	.word	0x2000bc6e

08012360 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
}
 8012368:	bf00      	nop
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012374:	b480      	push	{r7}
 8012376:	b083      	sub	sp, #12
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
}
 801237c:	bf00      	nop
 801237e:	370c      	adds	r7, #12
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr

08012388 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 801238e:	2200      	movs	r2, #0
 8012390:	2100      	movs	r1, #0
 8012392:	2000      	movs	r0, #0
 8012394:	f7fe f8ca 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012398:	4603      	mov	r3, r0
 801239a:	607b      	str	r3, [r7, #4]
}
 801239c:	bf00      	nop
 801239e:	4618      	mov	r0, r3
 80123a0:	3708      	adds	r7, #8
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
	...

080123a8 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0

	color_index ++;
 80123ae:	4b1e      	ldr	r3, [pc, #120]	; (8012428 <_ZL20getColorFromRevLimitv+0x80>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	3301      	adds	r3, #1
 80123b4:	4a1c      	ldr	r2, [pc, #112]	; (8012428 <_ZL20getColorFromRevLimitv+0x80>)
 80123b6:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 80123b8:	4b1b      	ldr	r3, [pc, #108]	; (8012428 <_ZL20getColorFromRevLimitv+0x80>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b02      	cmp	r3, #2
 80123be:	dd02      	ble.n	80123c6 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 80123c0:	4b19      	ldr	r3, [pc, #100]	; (8012428 <_ZL20getColorFromRevLimitv+0x80>)
 80123c2:	2200      	movs	r2, #0
 80123c4:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 80123c6:	2200      	movs	r2, #0
 80123c8:	2100      	movs	r1, #0
 80123ca:	20ff      	movs	r0, #255	; 0xff
 80123cc:	f7fe f8ae 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80123d0:	4603      	mov	r3, r0
 80123d2:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 80123d4:	2200      	movs	r2, #0
 80123d6:	2100      	movs	r1, #0
 80123d8:	2000      	movs	r0, #0
 80123da:	f7fe f8a7 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80123de:	4603      	mov	r3, r0
 80123e0:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 80123e2:	22ff      	movs	r2, #255	; 0xff
 80123e4:	21ff      	movs	r1, #255	; 0xff
 80123e6:	20ff      	movs	r0, #255	; 0xff
 80123e8:	f7fe f8a0 	bl	801052c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80123ec:	4603      	mov	r3, r0
 80123ee:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 80123f0:	463b      	mov	r3, r7
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7ff ff1a 	bl	801222c <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 80123f8:	4b0b      	ldr	r3, [pc, #44]	; (8012428 <_ZL20getColorFromRevLimitv+0x80>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d101      	bne.n	8012404 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8012404:	4b08      	ldr	r3, [pc, #32]	; (8012428 <_ZL20getColorFromRevLimitv+0x80>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	2b01      	cmp	r3, #1
 801240a:	d101      	bne.n	8012410 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8012410:	4b05      	ldr	r3, [pc, #20]	; (8012428 <_ZL20getColorFromRevLimitv+0x80>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	2b02      	cmp	r3, #2
 8012416:	d101      	bne.n	801241c <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 801241c:	683b      	ldr	r3, [r7, #0]
}
 801241e:	4618      	mov	r0, r3
 8012420:	3710      	adds	r7, #16
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	2000865c 	.word	0x2000865c

0801242c <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b086      	sub	sp, #24
 8012430:	af02      	add	r7, sp, #8
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4a66      	ldr	r2, [pc, #408]	; (80125d8 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8012440:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6a1b      	ldr	r3, [r3, #32]
 801244c:	ee07 3a90 	vmov	s15, r3
 8012450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012454:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80125dc <_ZN8MainView14updateSettingsEPh+0x1b0>
 8012458:	ee67 7a87 	vmul.f32	s15, s15, s14
 801245c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012460:	ee17 3a90 	vmov	r3, s15
 8012464:	b21a      	sxth	r2, r3
 8012466:	2300      	movs	r3, #0
 8012468:	9300      	str	r3, [sp, #0]
 801246a:	2300      	movs	r3, #0
 801246c:	2100      	movs	r1, #0
 801246e:	f002 fc27 	bl	8014cc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012478:	4618      	mov	r0, r3
 801247a:	f006 fb1f 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f603 2068 	addw	r0, r3, #2664	; 0xa68
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	4a55      	ldr	r2, [pc, #340]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801248a:	2102      	movs	r1, #2
 801248c:	f007 ff44 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012496:	4618      	mov	r0, r3
 8012498:	f004 fb6a 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80124a2:	4618      	mov	r0, r3
 80124a4:	f006 fb0a 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f603 206c 	addw	r0, r3, #2668	; 0xa6c
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	689b      	ldr	r3, [r3, #8]
 80124b2:	4a4b      	ldr	r2, [pc, #300]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80124b4:	2102      	movs	r1, #2
 80124b6:	f007 ff2f 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80124c0:	4618      	mov	r0, r3
 80124c2:	f004 fb55 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80124cc:	4618      	mov	r0, r3
 80124ce:	f006 faf5 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f503 6027 	add.w	r0, r3, #2672	; 0xa70
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	4a40      	ldr	r2, [pc, #256]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80124de:	2102      	movs	r1, #2
 80124e0:	f007 ff1a 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80124ea:	4618      	mov	r0, r3
 80124ec:	f004 fb40 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80124f6:	4618      	mov	r0, r3
 80124f8:	f006 fae0 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f603 2074 	addw	r0, r3, #2676	; 0xa74
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	691b      	ldr	r3, [r3, #16]
 8012506:	4a36      	ldr	r2, [pc, #216]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012508:	2102      	movs	r1, #2
 801250a:	f007 ff05 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012514:	4618      	mov	r0, r3
 8012516:	f004 fb2b 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012520:	4618      	mov	r0, r3
 8012522:	f006 facb 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f603 2078 	addw	r0, r3, #2680	; 0xa78
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	695b      	ldr	r3, [r3, #20]
 8012530:	4a2b      	ldr	r2, [pc, #172]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012532:	2102      	movs	r1, #2
 8012534:	f007 fef0 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801253e:	4618      	mov	r0, r3
 8012540:	f004 fb16 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801254a:	4618      	mov	r0, r3
 801254c:	f006 fab6 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f603 207c 	addw	r0, r3, #2684	; 0xa7c
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	699b      	ldr	r3, [r3, #24]
 801255a:	4a21      	ldr	r2, [pc, #132]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801255c:	2102      	movs	r1, #2
 801255e:	f007 fedb 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8012568:	4618      	mov	r0, r3
 801256a:	f004 fb01 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8012574:	4618      	mov	r0, r3
 8012576:	f006 faa1 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f503 6028 	add.w	r0, r3, #2688	; 0xa80
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	69db      	ldr	r3, [r3, #28]
 8012584:	4a16      	ldr	r2, [pc, #88]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012586:	2102      	movs	r1, #2
 8012588:	f007 fec6 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012592:	4618      	mov	r0, r3
 8012594:	f004 faec 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801259e:	4618      	mov	r0, r3
 80125a0:	f006 fa8c 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f603 2084 	addw	r0, r3, #2692	; 0xa84
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6a1b      	ldr	r3, [r3, #32]
 80125ae:	4a0c      	ldr	r2, [pc, #48]	; (80125e0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80125b0:	2102      	movs	r1, #2
 80125b2:	f007 feb1 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80125bc:	4618      	mov	r0, r3
 80125be:	f004 fad7 	bl	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80125c8:	4618      	mov	r0, r3
 80125ca:	f006 fa77 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80125ce:	bf00      	nop
 80125d0:	3710      	adds	r7, #16
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	20000038 	.word	0x20000038
 80125dc:	447a0000 	.word	0x447a0000
 80125e0:	080258b4 	.word	0x080258b4

080125e4 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 80125e4:	b590      	push	{r4, r7, lr}
 80125e6:	b085      	sub	sp, #20
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	4b84      	ldr	r3, [pc, #528]	; (8012808 <_ZN8MainView9updateValEPh+0x224>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	bfac      	ite	ge
 80125fe:	2301      	movge	r3, #1
 8012600:	2300      	movlt	r3, #0
 8012602:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8012604:	7afb      	ldrb	r3, [r7, #11]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d012      	beq.n	8012630 <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 801260a:	4b80      	ldr	r3, [pc, #512]	; (801280c <_ZN8MainView9updateValEPh+0x228>)
 801260c:	2200      	movs	r2, #0
 801260e:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012616:	f7ff fec7 	bl	80123a8 <_ZL20getColorFromRevLimitv>
 801261a:	4603      	mov	r3, r0
 801261c:	4619      	mov	r1, r3
 801261e:	4620      	mov	r0, r4
 8012620:	f7fd fc4e 	bl	800fec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	3340      	adds	r3, #64	; 0x40
 8012628:	4618      	mov	r0, r3
 801262a:	f006 fa47 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
 801262e:	e018      	b.n	8012662 <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 8012630:	4b76      	ldr	r3, [pc, #472]	; (801280c <_ZN8MainView9updateValEPh+0x228>)
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	f083 0301 	eor.w	r3, r3, #1
 8012638:	b2db      	uxtb	r3, r3
 801263a:	2b00      	cmp	r3, #0
 801263c:	d011      	beq.n	8012662 <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012644:	f7ff fea0 	bl	8012388 <_ZL13getBlackColorv>
 8012648:	4603      	mov	r3, r0
 801264a:	4619      	mov	r1, r3
 801264c:	4620      	mov	r0, r4
 801264e:	f7fd fc37 	bl	800fec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	3340      	adds	r3, #64	; 0x40
 8012656:	4618      	mov	r0, r3
 8012658:	f006 fa30 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 801265c:	4b6b      	ldr	r3, [pc, #428]	; (801280c <_ZN8MainView9updateValEPh+0x228>)
 801265e:	2201      	movs	r2, #1
 8012660:	701a      	strb	r2, [r3, #0]
	}

	RPMProgressBar.setValue(values->rpm);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	4619      	mov	r1, r3
 801266e:	4610      	mov	r0, r2
 8012670:	f002 fa10 	bl	8014a94 <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801267a:	4618      	mov	r0, r3
 801267c:	f006 fa1e 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f603 20ba 	addw	r0, r3, #2746	; 0xaba
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4a61      	ldr	r2, [pc, #388]	; (8012810 <_ZN8MainView9updateValEPh+0x22c>)
 801268c:	2105      	movs	r1, #5
 801268e:	f007 fe43 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.invalidate();
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8012698:	4618      	mov	r0, r3
 801269a:	f006 fa0f 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f603 20ce 	addw	r0, r3, #2766	; 0xace
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	4a59      	ldr	r2, [pc, #356]	; (8012810 <_ZN8MainView9updateValEPh+0x22c>)
 80126aa:	2105      	movs	r1, #5
 80126ac:	f007 fe34 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.invalidate();
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 80126b6:	4618      	mov	r0, r3
 80126b8:	f006 fa00 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	4a52      	ldr	r2, [pc, #328]	; (8012810 <_ZN8MainView9updateValEPh+0x22c>)
 80126c8:	2105      	movs	r1, #5
 80126ca:	f007 fe25 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.invalidate();
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 80126d4:	4618      	mov	r0, r3
 80126d6:	f006 f9f1 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80126e6:	eeb0 0a67 	vmov.f32	s0, s15
 80126ea:	4a4a      	ldr	r2, [pc, #296]	; (8012814 <_ZN8MainView9updateValEPh+0x230>)
 80126ec:	2105      	movs	r1, #5
 80126ee:	f7ff fdab 	bl	8012248 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.invalidate();
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80126f8:	4618      	mov	r0, r3
 80126fa:	f006 f9df 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f603 205e 	addw	r0, r3, #2654	; 0xa5e
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	edd3 7a04 	vldr	s15, [r3, #16]
 801270a:	eeb0 0a67 	vmov.f32	s0, s15
 801270e:	4a41      	ldr	r2, [pc, #260]	; (8012814 <_ZN8MainView9updateValEPh+0x230>)
 8012710:	2105      	movs	r1, #5
 8012712:	f7ff fd99 	bl	8012248 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.invalidate();
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801271c:	4618      	mov	r0, r3
 801271e:	f006 f9cd 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%d",values->vehicle_spd);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f603 20d8 	addw	r0, r3, #2776	; 0xad8
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	695b      	ldr	r3, [r3, #20]
 801272c:	4a38      	ldr	r2, [pc, #224]	; (8012810 <_ZN8MainView9updateValEPh+0x22c>)
 801272e:	2105      	movs	r1, #5
 8012730:	f007 fdf2 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KMHValue.invalidate();
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 801273a:	4618      	mov	r0, r3
 801273c:	f006 f9be 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f603 20a6 	addw	r0, r3, #2726	; 0xaa6
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	edd3 7a07 	vldr	s15, [r3, #28]
 801274c:	eeb0 0a67 	vmov.f32	s0, s15
 8012750:	4a31      	ldr	r2, [pc, #196]	; (8012818 <_ZN8MainView9updateValEPh+0x234>)
 8012752:	2105      	movs	r1, #5
 8012754:	f7ff fd78 	bl	8012248 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	OILPressureValue.invalidate();
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 801275e:	4618      	mov	r0, r3
 8012760:	f006 f9ac 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f603 209c 	addw	r0, r3, #2716	; 0xa9c
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	699b      	ldr	r3, [r3, #24]
 801276e:	4a28      	ldr	r2, [pc, #160]	; (8012810 <_ZN8MainView9updateValEPh+0x22c>)
 8012770:	2105      	movs	r1, #5
 8012772:	f007 fdd1 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILTempValue.invalidate();
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 801277c:	4618      	mov	r0, r3
 801277e:	f006 f99d 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	6a1b      	ldr	r3, [r3, #32]
 801278c:	4a20      	ldr	r2, [pc, #128]	; (8012810 <_ZN8MainView9updateValEPh+0x22c>)
 801278e:	2105      	movs	r1, #5
 8012790:	f007 fdc2 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.invalidate();
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801279a:	4618      	mov	r0, r3
 801279c:	f006 f98e 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f603 2092 	addw	r0, r3, #2706	; 0xa92
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127aa:	4a19      	ldr	r2, [pc, #100]	; (8012810 <_ZN8MainView9updateValEPh+0x22c>)
 80127ac:	2105      	movs	r1, #5
 80127ae:	f007 fdb3 	bl	801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EGTValue.invalidate();
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80127b8:	4618      	mov	r0, r3
 80127ba:	f006 f97f 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f503 62c8 	add.w	r2, r3, #1600	; 0x640
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c8:	4619      	mov	r1, r3
 80127ca:	4610      	mov	r0, r2
 80127cc:	f002 f812 	bl	80147f4 <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80127d6:	4618      	mov	r0, r3
 80127d8:	f006 f970 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f503 602b 	add.w	r0, r3, #2736	; 0xab0
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80127e8:	eeb0 0a67 	vmov.f32	s0, s15
 80127ec:	4a09      	ldr	r2, [pc, #36]	; (8012814 <_ZN8MainView9updateValEPh+0x230>)
 80127ee:	2105      	movs	r1, #5
 80127f0:	f7ff fd2a 	bl	8012248 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.invalidate();
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80127fa:	4618      	mov	r0, r3
 80127fc:	f006 f95e 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012800:	bf00      	nop
 8012802:	3714      	adds	r7, #20
 8012804:	46bd      	mov	sp, r7
 8012806:	bd90      	pop	{r4, r7, pc}
 8012808:	20000038 	.word	0x20000038
 801280c:	20008660 	.word	0x20008660
 8012810:	080258b4 	.word	0x080258b4
 8012814:	080258b8 	.word	0x080258b8
 8012818:	080258c0 	.word	0x080258c0

0801281c <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2200      	movs	r2, #0
 8012828:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 801282a:	2200      	movs	r2, #0
 801282c:	2130      	movs	r1, #48	; 0x30
 801282e:	2001      	movs	r0, #1
 8012830:	f7f9 fc3f 	bl	800c0b2 <xQueueGenericCreate>
 8012834:	4602      	mov	r2, r0
 8012836:	4b07      	ldr	r3, [pc, #28]	; (8012854 <_ZN5ModelC1Ev+0x38>)
 8012838:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 801283a:	2200      	movs	r2, #0
 801283c:	2128      	movs	r1, #40	; 0x28
 801283e:	2001      	movs	r0, #1
 8012840:	f7f9 fc37 	bl	800c0b2 <xQueueGenericCreate>
 8012844:	4602      	mov	r2, r0
 8012846:	4b04      	ldr	r3, [pc, #16]	; (8012858 <_ZN5ModelC1Ev+0x3c>)
 8012848:	601a      	str	r2, [r3, #0]
}
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	200086bc 	.word	0x200086bc
 8012858:	200086c0 	.word	0x200086c0

0801285c <_ZN5Model4tickEv>:

void Model::tick()
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8012864:	4b1a      	ldr	r3, [pc, #104]	; (80128d0 <_ZN5Model4tickEv+0x74>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	2200      	movs	r2, #0
 801286a:	491a      	ldr	r1, [pc, #104]	; (80128d4 <_ZN5Model4tickEv+0x78>)
 801286c:	4618      	mov	r0, r3
 801286e:	f7f9 feb1 	bl	800c5d4 <xQueueReceive>
 8012872:	4603      	mov	r3, r0
 8012874:	2b01      	cmp	r3, #1
 8012876:	bf0c      	ite	eq
 8012878:	2301      	moveq	r3, #1
 801287a:	2300      	movne	r3, #0
 801287c:	b2db      	uxtb	r3, r3
 801287e:	2b00      	cmp	r3, #0
 8012880:	d009      	beq.n	8012896 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	3308      	adds	r3, #8
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4910      	ldr	r1, [pc, #64]	; (80128d4 <_ZN5Model4tickEv+0x78>)
 8012892:	4610      	mov	r0, r2
 8012894:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8012896:	4b10      	ldr	r3, [pc, #64]	; (80128d8 <_ZN5Model4tickEv+0x7c>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2200      	movs	r2, #0
 801289c:	490f      	ldr	r1, [pc, #60]	; (80128dc <_ZN5Model4tickEv+0x80>)
 801289e:	4618      	mov	r0, r3
 80128a0:	f7f9 fe98 	bl	800c5d4 <xQueueReceive>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	bf0c      	ite	eq
 80128aa:	2301      	moveq	r3, #1
 80128ac:	2300      	movne	r3, #0
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d009      	beq.n	80128c8 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	330c      	adds	r3, #12
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4906      	ldr	r1, [pc, #24]	; (80128dc <_ZN5Model4tickEv+0x80>)
 80128c4:	4610      	mov	r0, r2
 80128c6:	4798      	blx	r3
	}
}
 80128c8:	bf00      	nop
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	200086bc 	.word	0x200086bc
 80128d4:	20008664 	.word	0x20008664
 80128d8:	200086c0 	.word	0x200086c0
 80128dc:	20008694 	.word	0x20008694

080128e0 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
    {
 80128e8:	4a04      	ldr	r2, [pc, #16]	; (80128fc <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	601a      	str	r2, [r3, #0]
    }
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4618      	mov	r0, r3
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	08025fd0 	.word	0x08025fd0

08012900 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
    }
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f7ff ffe9 	bl	80128e0 <_ZN8touchgfx15TouchControllerD1Ev>
 801290e:	2104      	movs	r1, #4
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f011 fc6e 	bl	80241f2 <_ZdlPvj>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	4618      	mov	r0, r3
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012920:	b480      	push	{r7}
 8012922:	b083      	sub	sp, #12
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012928:	bf00      	nop
 801292a:	370c      	adds	r7, #12
 801292c:	46bd      	mov	sp, r7
 801292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012932:	4770      	bx	lr

08012934 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012934:	b480      	push	{r7}
 8012936:	b085      	sub	sp, #20
 8012938:	af00      	add	r7, sp, #0
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8012940:	2300      	movs	r3, #0
}
 8012942:	4618      	mov	r0, r3
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
	...

08012950 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	4a05      	ldr	r2, [pc, #20]	; (8012970 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	601a      	str	r2, [r3, #0]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	f7ff ffbd 	bl	80128e0 <_ZN8touchgfx15TouchControllerD1Ev>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	08025fb8 	.word	0x08025fb8

08012974 <_ZN20STM32TouchControllerD0Ev>:
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff ffe7 	bl	8012950 <_ZN20STM32TouchControllerD1Ev>
 8012982:	2104      	movs	r1, #4
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f011 fc34 	bl	80241f2 <_ZdlPvj>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	4618      	mov	r0, r3
 801298e:	3708      	adds	r7, #8
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
 801299a:	4603      	mov	r3, r0
 801299c:	71fb      	strb	r3, [r7, #7]

}
 801299e:	bf00      	nop
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr

080129aa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80129aa:	b480      	push	{r7}
 80129ac:	b083      	sub	sp, #12
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	4603      	mov	r3, r0
 80129b2:	71fb      	strb	r3, [r7, #7]

}
 80129b4:	bf00      	nop
 80129b6:	370c      	adds	r7, #12
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr

080129c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	4603      	mov	r3, r0
 80129c8:	71fb      	strb	r3, [r7, #7]

}
 80129ca:	bf00      	nop
 80129cc:	370c      	adds	r7, #12
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr
	...

080129d8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80129d8:	b480      	push	{r7}
 80129da:	b083      	sub	sp, #12
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
    {
 80129e0:	4a04      	ldr	r2, [pc, #16]	; (80129f4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	601a      	str	r2, [r3, #0]
    }
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	4618      	mov	r0, r3
 80129ea:	370c      	adds	r7, #12
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr
 80129f4:	08026d88 	.word	0x08026d88

080129f8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
    }
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f7ff ffe9 	bl	80129d8 <_ZN8touchgfx3HALD1Ev>
 8012a06:	2178      	movs	r1, #120	; 0x78
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f011 fbf2 	bl	80241f2 <_ZdlPvj>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012a18:	b480      	push	{r7}
 8012a1a:	b083      	sub	sp, #12
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	460b      	mov	r3, r1
 8012a22:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	78fa      	ldrb	r2, [r7, #3]
 8012a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012a34:	bf00      	nop
 8012a36:	370c      	adds	r7, #12
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	685a      	ldr	r2, [r3, #4]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	4610      	mov	r0, r2
 8012a56:	4798      	blx	r3
 8012a58:	4603      	mov	r3, r0
    }
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3708      	adds	r7, #8
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}

08012a62 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8012a62:	b580      	push	{r7, lr}
 8012a64:	b082      	sub	sp, #8
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f003 f91c 	bl	8015ca8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	3390      	adds	r3, #144	; 0x90
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	4798      	blx	r3
    }
 8012a7c:	bf00      	nop
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	6039      	str	r1, [r7, #0]
    {
        return false;
 8012a8e:	2300      	movs	r3, #0
    }
 8012a90:	4618      	mov	r0, r3
 8012a92:	370c      	adds	r7, #12
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr

08012a9c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8012a9c:	b590      	push	{r4, r7, lr}
 8012a9e:	b08b      	sub	sp, #44	; 0x2c
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	4611      	mov	r1, r2
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	460b      	mov	r3, r1
 8012aac:	80fb      	strh	r3, [r7, #6]
 8012aae:	4613      	mov	r3, r2
 8012ab0:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8012ab2:	f7fc fae9 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	6813      	ldr	r3, [r2, #0]
 8012aba:	3328      	adds	r3, #40	; 0x28
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4610      	mov	r0, r2
 8012ac0:	4798      	blx	r3
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8012ac6:	8b7b      	ldrh	r3, [r7, #26]
 8012ac8:	4a3d      	ldr	r2, [pc, #244]	; (8012bc0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8012aca:	8812      	ldrh	r2, [r2, #0]
 8012acc:	fb02 f303 	mul.w	r3, r2, r3
 8012ad0:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8012ada:	2300      	movs	r3, #0
 8012adc:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8012ade:	797b      	ldrb	r3, [r7, #5]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d005      	beq.n	8012af0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8012ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	4413      	add	r3, r2
 8012aea:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8012aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aee:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8012af0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d005      	beq.n	8012b04 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8012af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	4413      	add	r3, r2
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8012b04:	88fb      	ldrh	r3, [r7, #6]
 8012b06:	3b01      	subs	r3, #1
 8012b08:	2b1f      	cmp	r3, #31
 8012b0a:	d84d      	bhi.n	8012ba8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8012b0c:	a201      	add	r2, pc, #4	; (adr r2, 8012b14 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8012b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b12:	bf00      	nop
 8012b14:	08012b95 	.word	0x08012b95
 8012b18:	08012b95 	.word	0x08012b95
 8012b1c:	08012ba9 	.word	0x08012ba9
 8012b20:	08012b95 	.word	0x08012b95
 8012b24:	08012ba9 	.word	0x08012ba9
 8012b28:	08012ba9 	.word	0x08012ba9
 8012b2c:	08012ba9 	.word	0x08012ba9
 8012b30:	08012b95 	.word	0x08012b95
 8012b34:	08012ba9 	.word	0x08012ba9
 8012b38:	08012ba9 	.word	0x08012ba9
 8012b3c:	08012ba9 	.word	0x08012ba9
 8012b40:	08012ba9 	.word	0x08012ba9
 8012b44:	08012ba9 	.word	0x08012ba9
 8012b48:	08012ba9 	.word	0x08012ba9
 8012b4c:	08012ba9 	.word	0x08012ba9
 8012b50:	08012b95 	.word	0x08012b95
 8012b54:	08012ba9 	.word	0x08012ba9
 8012b58:	08012ba9 	.word	0x08012ba9
 8012b5c:	08012ba9 	.word	0x08012ba9
 8012b60:	08012ba9 	.word	0x08012ba9
 8012b64:	08012ba9 	.word	0x08012ba9
 8012b68:	08012ba9 	.word	0x08012ba9
 8012b6c:	08012ba9 	.word	0x08012ba9
 8012b70:	08012b95 	.word	0x08012b95
 8012b74:	08012ba9 	.word	0x08012ba9
 8012b78:	08012ba9 	.word	0x08012ba9
 8012b7c:	08012ba9 	.word	0x08012ba9
 8012b80:	08012ba9 	.word	0x08012ba9
 8012b84:	08012ba9 	.word	0x08012ba9
 8012b88:	08012ba9 	.word	0x08012ba9
 8012b8c:	08012ba9 	.word	0x08012ba9
 8012b90:	08012b95 	.word	0x08012b95
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3374      	adds	r3, #116	; 0x74
 8012b9a:	681c      	ldr	r4, [r3, #0]
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	6a3a      	ldr	r2, [r7, #32]
 8012ba0:	68b9      	ldr	r1, [r7, #8]
 8012ba2:	68f8      	ldr	r0, [r7, #12]
 8012ba4:	47a0      	blx	r4
            break;
 8012ba6:	e006      	b.n	8012bb6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8012ba8:	4b06      	ldr	r3, [pc, #24]	; (8012bc4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8012baa:	4a07      	ldr	r2, [pc, #28]	; (8012bc8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8012bac:	f240 3125 	movw	r1, #805	; 0x325
 8012bb0:	4806      	ldr	r0, [pc, #24]	; (8012bcc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8012bb2:	f011 fb49 	bl	8024248 <__assert_func>
            break;
        }
    }
 8012bb6:	bf00      	nop
 8012bb8:	372c      	adds	r7, #44	; 0x2c
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd90      	pop	{r4, r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	2000bc74 	.word	0x2000bc74
 8012bc4:	080258c8 	.word	0x080258c8
 8012bc8:	080260e4 	.word	0x080260e4
 8012bcc:	080258e8 	.word	0x080258e8

08012bd0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b084      	sub	sp, #16
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
 8012bdc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d106      	bne.n	8012bf2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012be4:	4b11      	ldr	r3, [pc, #68]	; (8012c2c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8012be6:	4a12      	ldr	r2, [pc, #72]	; (8012c30 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012be8:	f240 3137 	movw	r1, #823	; 0x337
 8012bec:	4811      	ldr	r0, [pc, #68]	; (8012c34 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8012bee:	f011 fb2b 	bl	8024248 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	68ba      	ldr	r2, [r7, #8]
 8012bf6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	683a      	ldr	r2, [r7, #0]
 8012c02:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	bf14      	ite	ne
 8012c0a:	2301      	movne	r3, #1
 8012c0c:	2300      	moveq	r3, #0
 8012c0e:	b2da      	uxtb	r2, r3
 8012c10:	4b09      	ldr	r3, [pc, #36]	; (8012c38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8012c12:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	bf14      	ite	ne
 8012c1a:	2301      	movne	r3, #1
 8012c1c:	2300      	moveq	r3, #0
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	4b06      	ldr	r3, [pc, #24]	; (8012c3c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8012c22:	701a      	strb	r2, [r3, #0]
    }
 8012c24:	bf00      	nop
 8012c26:	3710      	adds	r7, #16
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	0802592c 	.word	0x0802592c
 8012c30:	08026094 	.word	0x08026094
 8012c34:	080258e8 	.word	0x080258e8
 8012c38:	2000bc76 	.word	0x2000bc76
 8012c3c:	2000bc77 	.word	0x2000bc77

08012c40 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d004      	beq.n	8012c5e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c58:	887a      	ldrh	r2, [r7, #2]
 8012c5a:	4610      	mov	r0, r2
 8012c5c:	4798      	blx	r3
        }
    }
 8012c5e:	bf00      	nop
 8012c60:	3708      	adds	r7, #8
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}

08012c66 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b082      	sub	sp, #8
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	685a      	ldr	r2, [r3, #4]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	3318      	adds	r3, #24
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	4610      	mov	r0, r2
 8012c7e:	4798      	blx	r3
 8012c80:	4603      	mov	r3, r0
    }
 8012c82:	4618      	mov	r0, r3
 8012c84:	3708      	adds	r7, #8
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
	...

08012c8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d017      	beq.n	8012cd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012ca4:	4b1a      	ldr	r3, [pc, #104]	; (8012d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d12a      	bne.n	8012d02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8012cac:	4b19      	ldr	r3, [pc, #100]	; (8012d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012cae:	881a      	ldrh	r2, [r3, #0]
 8012cb0:	4b19      	ldr	r3, [pc, #100]	; (8012d18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012cb2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8012cb4:	4b19      	ldr	r3, [pc, #100]	; (8012d1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012cb6:	881a      	ldrh	r2, [r3, #0]
 8012cb8:	4b19      	ldr	r3, [pc, #100]	; (8012d20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012cba:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8012cbc:	4b16      	ldr	r3, [pc, #88]	; (8012d18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012cbe:	881a      	ldrh	r2, [r3, #0]
 8012cc0:	4b16      	ldr	r3, [pc, #88]	; (8012d1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012cc2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8012cc4:	4b16      	ldr	r3, [pc, #88]	; (8012d20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012cc6:	881a      	ldrh	r2, [r3, #0]
 8012cc8:	4b12      	ldr	r3, [pc, #72]	; (8012d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012cca:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8012ccc:	4b10      	ldr	r3, [pc, #64]	; (8012d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012cce:	2201      	movs	r2, #1
 8012cd0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8012cd2:	e016      	b.n	8012d02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8012cd4:	4b0e      	ldr	r3, [pc, #56]	; (8012d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d012      	beq.n	8012d02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8012cdc:	4b0f      	ldr	r3, [pc, #60]	; (8012d1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012cde:	881a      	ldrh	r2, [r3, #0]
 8012ce0:	4b0d      	ldr	r3, [pc, #52]	; (8012d18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012ce2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8012ce4:	4b0b      	ldr	r3, [pc, #44]	; (8012d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012ce6:	881a      	ldrh	r2, [r3, #0]
 8012ce8:	4b0d      	ldr	r3, [pc, #52]	; (8012d20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012cea:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8012cec:	4b0c      	ldr	r3, [pc, #48]	; (8012d20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012cee:	881a      	ldrh	r2, [r3, #0]
 8012cf0:	4b0a      	ldr	r3, [pc, #40]	; (8012d1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012cf2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8012cf4:	4b08      	ldr	r3, [pc, #32]	; (8012d18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012cf6:	881a      	ldrh	r2, [r3, #0]
 8012cf8:	4b06      	ldr	r3, [pc, #24]	; (8012d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012cfa:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8012cfc:	4b04      	ldr	r3, [pc, #16]	; (8012d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012cfe:	2200      	movs	r2, #0
 8012d00:	701a      	strb	r2, [r3, #0]
    }
 8012d02:	bf00      	nop
 8012d04:	370c      	adds	r7, #12
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop
 8012d10:	2000bc70 	.word	0x2000bc70
 8012d14:	2000bc6c 	.word	0x2000bc6c
 8012d18:	2000bc72 	.word	0x2000bc72
 8012d1c:	2000bc6e 	.word	0x2000bc6e
 8012d20:	2000bc74 	.word	0x2000bc74

08012d24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f002 fa3c 	bl	80151ac <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012d34:	bf00      	nop
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	4a05      	ldr	r2, [pc, #20]	; (8012d5c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	601a      	str	r2, [r3, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7ff fe43 	bl	80129d8 <_ZN8touchgfx3HALD1Ev>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	4618      	mov	r0, r3
 8012d56:	3708      	adds	r7, #8
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	080262bc 	.word	0x080262bc

08012d60 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff ffe7 	bl	8012d3c <_ZN20TouchGFXGeneratedHALD1Ev>
 8012d6e:	2178      	movs	r1, #120	; 0x78
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f011 fa3e 	bl	80241f2 <_ZdlPvj>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f7ff ffca 	bl	8012d24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012d90:	bf00      	nop
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f001 fb0a 	bl	80143bc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8012da8:	bf00      	nop
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f001 fb8a 	bl	80144d4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012dc0:	4603      	mov	r3, r0
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3708      	adds	r7, #8
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}

08012dca <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b082      	sub	sp, #8
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	6078      	str	r0, [r7, #4]
 8012dd2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6839      	ldr	r1, [r7, #0]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f001 fb89 	bl	80144f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012dde:	bf00      	nop
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}

08012de6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012de6:	b580      	push	{r7, lr}
 8012de8:	b082      	sub	sp, #8
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]
 8012dee:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6839      	ldr	r1, [r7, #0]
 8012df4:	4618      	mov	r0, r3
 8012df6:	f001 fb91 	bl	801451c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b082      	sub	sp, #8
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f001 fb07 	bl	8014420 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012e12:	bf00      	nop
 8012e14:	3708      	adds	r7, #8
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}

08012e1a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012e1a:	b580      	push	{r7, lr}
 8012e1c:	b082      	sub	sp, #8
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f001 fb0b 	bl	8014440 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8012e2a:	bf00      	nop
 8012e2c:	3708      	adds	r7, #8
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b082      	sub	sp, #8
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f001 fb0d 	bl	801445c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012e42:	bf00      	nop
 8012e44:	3708      	adds	r7, #8
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}

08012e4a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8012e4a:	b580      	push	{r7, lr}
 8012e4c:	b082      	sub	sp, #8
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f001 fb0f 	bl	8014478 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8012e5a:	bf00      	nop
 8012e5c:	3708      	adds	r7, #8
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
	...

08012e64 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	4a05      	ldr	r2, [pc, #20]	; (8012e84 <_ZN11TouchGFXHALD1Ev+0x20>)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	601a      	str	r2, [r3, #0]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7ff ff61 	bl	8012d3c <_ZN20TouchGFXGeneratedHALD1Ev>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	08025fe8 	.word	0x08025fe8

08012e88 <_ZN11TouchGFXHALD0Ev>:
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7ff ffe7 	bl	8012e64 <_ZN11TouchGFXHALD1Ev>
 8012e96:	2178      	movs	r1, #120	; 0x78
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f011 f9aa 	bl	80241f2 <_ZdlPvj>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8012eac:	2203      	movs	r2, #3
 8012eae:	2100      	movs	r1, #0
 8012eb0:	2001      	movs	r0, #1
 8012eb2:	f7f9 f8fe 	bl	800c0b2 <xQueueGenericCreate>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	4b0b      	ldr	r3, [pc, #44]	; (8012ee8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012eba:	601a      	str	r2, [r3, #0]
 8012ebc:	4b0a      	ldr	r3, [pc, #40]	; (8012ee8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d006      	beq.n	8012ed2 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8012ec4:	4b08      	ldr	r3, [pc, #32]	; (8012ee8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012ec6:	6818      	ldr	r0, [r3, #0]
 8012ec8:	2300      	movs	r3, #0
 8012eca:	2200      	movs	r2, #0
 8012ecc:	2100      	movs	r1, #0
 8012ece:	f7f9 f951 	bl	800c174 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	2101      	movs	r1, #1
 8012ed6:	2001      	movs	r0, #1
 8012ed8:	f7f9 f8eb 	bl	800c0b2 <xQueueGenericCreate>
 8012edc:	4602      	mov	r2, r0
 8012ede:	4b03      	ldr	r3, [pc, #12]	; (8012eec <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8012ee0:	601a      	str	r2, [r3, #0]
}
 8012ee2:	bf00      	nop
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	200086c4 	.word	0x200086c4
 8012eec:	200086c8 	.word	0x200086c8

08012ef0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8012ef4:	4b04      	ldr	r3, [pc, #16]	; (8012f08 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7f9 fc4b 	bl	800c798 <xQueueSemaphoreTake>
}
 8012f02:	bf00      	nop
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	200086c4 	.word	0x200086c4

08012f0c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8012f10:	4b04      	ldr	r3, [pc, #16]	; (8012f24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8012f12:	6818      	ldr	r0, [r3, #0]
 8012f14:	2300      	movs	r3, #0
 8012f16:	2200      	movs	r2, #0
 8012f18:	2100      	movs	r1, #0
 8012f1a:	f7f9 f92b 	bl	800c174 <xQueueGenericSend>
}
 8012f1e:	bf00      	nop
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	200086c4 	.word	0x200086c4

08012f28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8012f2c:	4b03      	ldr	r3, [pc, #12]	; (8012f3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2100      	movs	r1, #0
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7f9 fc30 	bl	800c798 <xQueueSemaphoreTake>
}
 8012f38:	bf00      	nop
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	200086c4 	.word	0x200086c4

08012f40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8012f46:	2300      	movs	r3, #0
 8012f48:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8012f4a:	4b0b      	ldr	r3, [pc, #44]	; (8012f78 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	1d3a      	adds	r2, r7, #4
 8012f50:	4611      	mov	r1, r2
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7f9 faac 	bl	800c4b0 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d007      	beq.n	8012f6e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8012f5e:	4b07      	ldr	r3, [pc, #28]	; (8012f7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8012f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f64:	601a      	str	r2, [r3, #0]
 8012f66:	f3bf 8f4f 	dsb	sy
 8012f6a:	f3bf 8f6f 	isb	sy
}
 8012f6e:	bf00      	nop
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	200086c4 	.word	0x200086c4
 8012f7c:	e000ed04 	.word	0xe000ed04

08012f80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
    if (vsync_q)
 8012f86:	4b0e      	ldr	r3, [pc, #56]	; (8012fc0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d013      	beq.n	8012fb6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8012f92:	4b0b      	ldr	r3, [pc, #44]	; (8012fc0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8012f94:	6818      	ldr	r0, [r3, #0]
 8012f96:	1d3a      	adds	r2, r7, #4
 8012f98:	2300      	movs	r3, #0
 8012f9a:	490a      	ldr	r1, [pc, #40]	; (8012fc4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8012f9c:	f7f9 f9ec 	bl	800c378 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d007      	beq.n	8012fb6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8012fa6:	4b08      	ldr	r3, [pc, #32]	; (8012fc8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8012fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	f3bf 8f6f 	isb	sy
    }
}
 8012fb6:	bf00      	nop
 8012fb8:	3708      	adds	r7, #8
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	200086c8 	.word	0x200086c8
 8012fc4:	2000003c 	.word	0x2000003c
 8012fc8:	e000ed04 	.word	0xe000ed04

08012fcc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8012fd0:	4b08      	ldr	r3, [pc, #32]	; (8012ff4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	4908      	ldr	r1, [pc, #32]	; (8012ff8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7f9 fafb 	bl	800c5d4 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8012fde:	4b05      	ldr	r3, [pc, #20]	; (8012ff4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fe6:	4904      	ldr	r1, [pc, #16]	; (8012ff8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7f9 faf3 	bl	800c5d4 <xQueueReceive>
}
 8012fee:	bf00      	nop
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	200086c8 	.word	0x200086c8
 8012ff8:	2000003c 	.word	0x2000003c

08012ffc <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	4603      	mov	r3, r0
 8013004:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8013006:	88fb      	ldrh	r3, [r7, #6]
 8013008:	4618      	mov	r0, r3
 801300a:	f7fa f823 	bl	800d054 <vTaskDelay>
}
 801300e:	bf00      	nop
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
	...

08013018 <__NVIC_EnableIRQ>:
{
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	4603      	mov	r3, r0
 8013020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013026:	2b00      	cmp	r3, #0
 8013028:	db0d      	blt.n	8013046 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801302e:	b2db      	uxtb	r3, r3
 8013030:	f003 021f 	and.w	r2, r3, #31
 8013034:	4907      	ldr	r1, [pc, #28]	; (8013054 <__NVIC_EnableIRQ+0x3c>)
 8013036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801303a:	095b      	lsrs	r3, r3, #5
 801303c:	2001      	movs	r0, #1
 801303e:	fa00 f202 	lsl.w	r2, r0, r2
 8013042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013046:	bf00      	nop
 8013048:	370c      	adds	r7, #12
 801304a:	46bd      	mov	sp, r7
 801304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	e000e100 	.word	0xe000e100

08013058 <__NVIC_DisableIRQ>:
{
 8013058:	b480      	push	{r7}
 801305a:	b083      	sub	sp, #12
 801305c:	af00      	add	r7, sp, #0
 801305e:	4603      	mov	r3, r0
 8013060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013066:	2b00      	cmp	r3, #0
 8013068:	db12      	blt.n	8013090 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801306e:	b2db      	uxtb	r3, r3
 8013070:	f003 021f 	and.w	r2, r3, #31
 8013074:	4909      	ldr	r1, [pc, #36]	; (801309c <__NVIC_DisableIRQ+0x44>)
 8013076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801307a:	095b      	lsrs	r3, r3, #5
 801307c:	2001      	movs	r0, #1
 801307e:	fa00 f202 	lsl.w	r2, r0, r2
 8013082:	3320      	adds	r3, #32
 8013084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801308c:	f3bf 8f6f 	isb	sy
}
 8013090:	bf00      	nop
 8013092:	370c      	adds	r7, #12
 8013094:	46bd      	mov	sp, r7
 8013096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309a:	4770      	bx	lr
 801309c:	e000e100 	.word	0xe000e100

080130a0 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 80130a0:	b480      	push	{r7}
 80130a2:	b083      	sub	sp, #12
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
        return color;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
    }
 80130ac:	4618      	mov	r0, r3
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 80130b8:	b480      	push	{r7}
 80130ba:	b083      	sub	sp, #12
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	b29b      	uxth	r3, r3
    }
 80130c6:	4618      	mov	r0, r3
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr
	...

080130d4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80130d4:	b480      	push	{r7}
 80130d6:	b083      	sub	sp, #12
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
    {
 80130dc:	4a04      	ldr	r2, [pc, #16]	; (80130f0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	601a      	str	r2, [r3, #0]
    }
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	4618      	mov	r0, r3
 80130e6:	370c      	adds	r7, #12
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr
 80130f0:	08026190 	.word	0x08026190

080130f4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
    }
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7ff ffe9 	bl	80130d4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013102:	2104      	movs	r1, #4
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f011 f874 	bl	80241f2 <_ZdlPvj>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	4618      	mov	r0, r3
 801310e:	3708      	adds	r7, #8
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	3344      	adds	r3, #68	; 0x44
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	4798      	blx	r3
    }
 8013128:	bf00      	nop
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8013130:	b480      	push	{r7}
 8013132:	b083      	sub	sp, #12
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8013138:	2300      	movs	r3, #0
    }
 801313a:	4618      	mov	r0, r3
 801313c:	370c      	adds	r7, #12
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr
	...

08013148 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013148:	b480      	push	{r7}
 801314a:	b083      	sub	sp, #12
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
    {
 8013150:	4a04      	ldr	r2, [pc, #16]	; (8013164 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	601a      	str	r2, [r3, #0]
    }
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	4618      	mov	r0, r3
 801315a:	370c      	adds	r7, #12
 801315c:	46bd      	mov	sp, r7
 801315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013162:	4770      	bx	lr
 8013164:	080271cc 	.word	0x080271cc

08013168 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
    }
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7ff ffe9 	bl	8013148 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013176:	210c      	movs	r1, #12
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f011 f83a 	bl	80241f2 <_ZdlPvj>
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	4618      	mov	r0, r3
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013192:	4a09      	ldr	r2, [pc, #36]	; (80131b8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	601a      	str	r2, [r3, #0]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	683a      	ldr	r2, [r7, #0]
 801319c:	605a      	str	r2, [r3, #4]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2200      	movs	r2, #0
 80131a2:	721a      	strb	r2, [r3, #8]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	725a      	strb	r2, [r3, #9]
    {
    }
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4618      	mov	r0, r3
 80131ae:	370c      	adds	r7, #12
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr
 80131b8:	080271cc 	.word	0x080271cc

080131bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	685a      	ldr	r2, [r3, #4]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	3314      	adds	r3, #20
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4610      	mov	r0, r2
 80131d4:	4798      	blx	r3
    }
 80131d6:	bf00      	nop
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}

080131de <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80131de:	b580      	push	{r7, lr}
 80131e0:	b082      	sub	sp, #8
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	3328      	adds	r3, #40	; 0x28
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4610      	mov	r0, r2
 80131f2:	4798      	blx	r3
    }
 80131f4:	bf00      	nop
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b085      	sub	sp, #20
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
 8013208:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8013214:	68ba      	ldr	r2, [r7, #8]
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	430a      	orrs	r2, r1
 801321c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013224:	f023 0107 	bic.w	r1, r3, #7
 8013228:	687a      	ldr	r2, [r7, #4]
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	430a      	orrs	r2, r1
 8013230:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013238:	4b06      	ldr	r3, [pc, #24]	; (8013254 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801323a:	4013      	ands	r3, r2
 801323c:	6839      	ldr	r1, [r7, #0]
 801323e:	68fa      	ldr	r2, [r7, #12]
 8013240:	6812      	ldr	r2, [r2, #0]
 8013242:	430b      	orrs	r3, r1
 8013244:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8013246:	2300      	movs	r3, #0
}
 8013248:	4618      	mov	r0, r3
 801324a:	3714      	adds	r7, #20
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr
 8013254:	ffffc000 	.word	0xffffc000

08013258 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013260:	f7fb ff06 	bl	800f070 <_ZN8touchgfx3HAL11getInstanceEv>
 8013264:	4603      	mov	r3, r0
 8013266:	4618      	mov	r0, r3
 8013268:	f7ff ffa8 	bl	80131bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 801326c:	bf00      	nop
 801326e:	3708      	adds	r7, #8
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
    assert(0);
 801327c:	4b02      	ldr	r3, [pc, #8]	; (8013288 <DMA2D_XferErrorCallback+0x14>)
 801327e:	4a03      	ldr	r2, [pc, #12]	; (801328c <DMA2D_XferErrorCallback+0x18>)
 8013280:	213e      	movs	r1, #62	; 0x3e
 8013282:	4803      	ldr	r0, [pc, #12]	; (8013290 <DMA2D_XferErrorCallback+0x1c>)
 8013284:	f010 ffe0 	bl	8024248 <__assert_func>
 8013288:	08025964 	.word	0x08025964
 801328c:	080261ac 	.word	0x080261ac
 8013290:	08025968 	.word	0x08025968

08013294 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	3318      	adds	r3, #24
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fe ffc3 	bl	801222c <_ZN8touchgfx9colortypeC1Ev>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	4618      	mov	r0, r3
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80132b0:	b5b0      	push	{r4, r5, r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80132b8:	687a      	ldr	r2, [r7, #4]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	330c      	adds	r3, #12
 80132be:	4619      	mov	r1, r3
 80132c0:	4610      	mov	r0, r2
 80132c2:	f7ff ff61 	bl	8013188 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80132c6:	4a0e      	ldr	r2, [pc, #56]	; (8013300 <_ZN10STM32F7DMAC1Ev+0x50>)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	601a      	str	r2, [r3, #0]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f103 000c 	add.w	r0, r3, #12
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	3320      	adds	r3, #32
 80132d6:	2260      	movs	r2, #96	; 0x60
 80132d8:	4619      	mov	r1, r3
 80132da:	f002 fe0b 	bl	8015ef4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	3320      	adds	r3, #32
 80132e2:	245f      	movs	r4, #95	; 0x5f
 80132e4:	461d      	mov	r5, r3
 80132e6:	2c00      	cmp	r4, #0
 80132e8:	db05      	blt.n	80132f6 <_ZN10STM32F7DMAC1Ev+0x46>
 80132ea:	4628      	mov	r0, r5
 80132ec:	f7ff ffd2 	bl	8013294 <_ZN8touchgfx6BlitOpC1Ev>
 80132f0:	3520      	adds	r5, #32
 80132f2:	3c01      	subs	r4, #1
 80132f4:	e7f7      	b.n	80132e6 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4618      	mov	r0, r3
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bdb0      	pop	{r4, r5, r7, pc}
 8013300:	08026140 	.word	0x08026140

08013304 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	4a0b      	ldr	r2, [pc, #44]	; (801333c <_ZN10STM32F7DMAD1Ev+0x38>)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8013312:	480b      	ldr	r0, [pc, #44]	; (8013340 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8013314:	f7f1 fa8e 	bl	8004834 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013318:	205a      	movs	r0, #90	; 0x5a
 801331a:	f7ff fe9d 	bl	8013058 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	330c      	adds	r3, #12
 8013322:	4618      	mov	r0, r3
 8013324:	f000 faa0 	bl	8013868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff ff0c 	bl	8013148 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	4618      	mov	r0, r3
 8013334:	3708      	adds	r7, #8
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	08026140 	.word	0x08026140
 8013340:	2000c4fc 	.word	0x2000c4fc

08013344 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
}
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7ff ffd9 	bl	8013304 <_ZN10STM32F7DMAD1Ev>
 8013352:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f010 ff4b 	bl	80241f2 <_ZdlPvj>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4618      	mov	r0, r3
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
	...

08013368 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013370:	4b09      	ldr	r3, [pc, #36]	; (8013398 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013372:	4a0a      	ldr	r2, [pc, #40]	; (801339c <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013374:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8013376:	4808      	ldr	r0, [pc, #32]	; (8013398 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013378:	f7f1 fa12 	bl	80047a0 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801337c:	4b06      	ldr	r3, [pc, #24]	; (8013398 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801337e:	4a08      	ldr	r2, [pc, #32]	; (80133a0 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013380:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013382:	4b05      	ldr	r3, [pc, #20]	; (8013398 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013384:	4a07      	ldr	r2, [pc, #28]	; (80133a4 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8013386:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013388:	205a      	movs	r0, #90	; 0x5a
 801338a:	f7ff fe45 	bl	8013018 <__NVIC_EnableIRQ>
}
 801338e:	bf00      	nop
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop
 8013398:	2000c4fc 	.word	0x2000c4fc
 801339c:	4002b000 	.word	0x4002b000
 80133a0:	08013259 	.word	0x08013259
 80133a4:	08013275 	.word	0x08013275

080133a8 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80133a8:	b480      	push	{r7}
 80133aa:	b083      	sub	sp, #12
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80133b0:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b08d      	sub	sp, #52	; 0x34
 80133c4:	af02      	add	r7, sp, #8
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80133ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80133ce:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80133d0:	2300      	movs	r3, #0
 80133d2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80133d8:	2b20      	cmp	r3, #32
 80133da:	d007      	beq.n	80133ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2b40      	cmp	r3, #64	; 0x40
 80133e2:	d003      	beq.n	80133ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2b04      	cmp	r3, #4
 80133ea:	d101      	bne.n	80133f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80133ec:	2301      	movs	r3, #1
 80133ee:	e000      	b.n	80133f2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80133f0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80133f2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80133f8:	2b80      	cmp	r3, #128	; 0x80
 80133fa:	d004      	beq.n	8013406 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013404:	d101      	bne.n	801340a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8013406:	2301      	movs	r3, #1
 8013408:	e000      	b.n	801340c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801340a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801340c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801340e:	f7fb fe3b 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8013412:	4602      	mov	r2, r0
 8013414:	6813      	ldr	r3, [r2, #0]
 8013416:	3320      	adds	r3, #32
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	4610      	mov	r0, r2
 801341c:	4798      	blx	r3
 801341e:	4603      	mov	r3, r0
 8013420:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2b40      	cmp	r3, #64	; 0x40
 8013428:	d01d      	beq.n	8013466 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801342a:	2b40      	cmp	r3, #64	; 0x40
 801342c:	d804      	bhi.n	8013438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801342e:	2b04      	cmp	r3, #4
 8013430:	d00e      	beq.n	8013450 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8013432:	2b20      	cmp	r3, #32
 8013434:	d017      	beq.n	8013466 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013436:	e019      	b.n	801346c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8013438:	2b80      	cmp	r3, #128	; 0x80
 801343a:	d003      	beq.n	8013444 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 801343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013440:	d003      	beq.n	801344a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013442:	e013      	b.n	801346c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013444:	230a      	movs	r3, #10
 8013446:	623b      	str	r3, [r7, #32]
        break;
 8013448:	e01a      	b.n	8013480 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801344a:	2309      	movs	r3, #9
 801344c:	623b      	str	r3, [r7, #32]
        break;
 801344e:	e017      	b.n	8013480 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013454:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013456:	7f7b      	ldrb	r3, [r7, #29]
 8013458:	2b10      	cmp	r3, #16
 801345a:	d101      	bne.n	8013460 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801345c:	2302      	movs	r3, #2
 801345e:	e000      	b.n	8013462 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013460:	2301      	movs	r3, #1
 8013462:	623b      	str	r3, [r7, #32]
        break;
 8013464:	e00c      	b.n	8013480 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8013466:	2300      	movs	r3, #0
 8013468:	623b      	str	r3, [r7, #32]
        break;
 801346a:	e009      	b.n	8013480 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801346c:	2300      	movs	r3, #0
 801346e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013470:	7f7b      	ldrb	r3, [r7, #29]
 8013472:	2b10      	cmp	r3, #16
 8013474:	d101      	bne.n	801347a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8013476:	2302      	movs	r3, #2
 8013478:	e000      	b.n	801347c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801347a:	2301      	movs	r3, #1
 801347c:	623b      	str	r3, [r7, #32]
        break;
 801347e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013480:	4a76      	ldr	r2, [pc, #472]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013486:	7f7b      	ldrb	r3, [r7, #29]
 8013488:	2b10      	cmp	r3, #16
 801348a:	d101      	bne.n	8013490 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 801348c:	2302      	movs	r3, #2
 801348e:	e000      	b.n	8013492 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013490:	2301      	movs	r3, #1
 8013492:	4a72      	ldr	r2, [pc, #456]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013494:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	8adb      	ldrh	r3, [r3, #22]
 801349a:	461a      	mov	r2, r3
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	8a1b      	ldrh	r3, [r3, #16]
 80134a0:	1ad3      	subs	r3, r2, r3
 80134a2:	461a      	mov	r2, r3
 80134a4:	4b6d      	ldr	r3, [pc, #436]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80134a6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80134a8:	7f7b      	ldrb	r3, [r7, #29]
 80134aa:	2b10      	cmp	r3, #16
 80134ac:	d101      	bne.n	80134b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80134ae:	2202      	movs	r2, #2
 80134b0:	e000      	b.n	80134b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80134b2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	8adb      	ldrh	r3, [r3, #22]
 80134b8:	4619      	mov	r1, r3
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	8a1b      	ldrh	r3, [r3, #16]
 80134be:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80134c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134c2:	4866      	ldr	r0, [pc, #408]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80134c4:	f7ff fe9a 	bl	80131fc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80134c8:	4a64      	ldr	r2, [pc, #400]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80134ca:	6a3b      	ldr	r3, [r7, #32]
 80134cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	8a9b      	ldrh	r3, [r3, #20]
 80134d2:	461a      	mov	r2, r3
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	8a1b      	ldrh	r3, [r3, #16]
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	461a      	mov	r2, r3
 80134dc:	4b5f      	ldr	r3, [pc, #380]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80134de:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80134e0:	7ffb      	ldrb	r3, [r7, #31]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d103      	bne.n	80134ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80134e6:	7fbb      	ldrb	r3, [r7, #30]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	f000 8082 	beq.w	80135f2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	7f1b      	ldrb	r3, [r3, #28]
 80134f2:	2bff      	cmp	r3, #255	; 0xff
 80134f4:	d008      	beq.n	8013508 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80134f6:	4b59      	ldr	r3, [pc, #356]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80134f8:	2202      	movs	r2, #2
 80134fa:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	7f1b      	ldrb	r3, [r3, #28]
 8013500:	461a      	mov	r2, r3
 8013502:	4b56      	ldr	r3, [pc, #344]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013504:	635a      	str	r2, [r3, #52]	; 0x34
 8013506:	e002      	b.n	801350e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8013508:	4b54      	ldr	r3, [pc, #336]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801350a:	2200      	movs	r2, #0
 801350c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801350e:	7fbb      	ldrb	r3, [r7, #30]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d059      	beq.n	80135c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8013514:	7f7b      	ldrb	r3, [r7, #29]
 8013516:	2b10      	cmp	r3, #16
 8013518:	d14a      	bne.n	80135b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	3318      	adds	r3, #24
 801351e:	4618      	mov	r0, r3
 8013520:	f7ff fdca 	bl	80130b8 <_ZNK8touchgfx9colortypecvtEv>
 8013524:	4603      	mov	r3, r0
 8013526:	12db      	asrs	r3, r3, #11
 8013528:	f003 021f 	and.w	r2, r3, #31
 801352c:	4613      	mov	r3, r2
 801352e:	021b      	lsls	r3, r3, #8
 8013530:	1a9b      	subs	r3, r3, r2
 8013532:	4a4b      	ldr	r2, [pc, #300]	; (8013660 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013534:	fb82 1203 	smull	r1, r2, r2, r3
 8013538:	441a      	add	r2, r3
 801353a:	1112      	asrs	r2, r2, #4
 801353c:	17db      	asrs	r3, r3, #31
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	3318      	adds	r3, #24
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff fdb6 	bl	80130b8 <_ZNK8touchgfx9colortypecvtEv>
 801354c:	4603      	mov	r3, r0
 801354e:	115b      	asrs	r3, r3, #5
 8013550:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013554:	4613      	mov	r3, r2
 8013556:	021b      	lsls	r3, r3, #8
 8013558:	1a9b      	subs	r3, r3, r2
 801355a:	4a42      	ldr	r2, [pc, #264]	; (8013664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801355c:	fb82 1203 	smull	r1, r2, r2, r3
 8013560:	441a      	add	r2, r3
 8013562:	1152      	asrs	r2, r2, #5
 8013564:	17db      	asrs	r3, r3, #31
 8013566:	1ad3      	subs	r3, r2, r3
 8013568:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	3318      	adds	r3, #24
 801356e:	4618      	mov	r0, r3
 8013570:	f7ff fda2 	bl	80130b8 <_ZNK8touchgfx9colortypecvtEv>
 8013574:	4603      	mov	r3, r0
 8013576:	f003 021f 	and.w	r2, r3, #31
 801357a:	4613      	mov	r3, r2
 801357c:	021b      	lsls	r3, r3, #8
 801357e:	1a9b      	subs	r3, r3, r2
 8013580:	4a37      	ldr	r2, [pc, #220]	; (8013660 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013582:	fb82 1203 	smull	r1, r2, r2, r3
 8013586:	441a      	add	r2, r3
 8013588:	1112      	asrs	r2, r2, #4
 801358a:	17db      	asrs	r3, r3, #31
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	7f1b      	ldrb	r3, [r3, #28]
 8013594:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	061a      	lsls	r2, r3, #24
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	041b      	lsls	r3, r3, #16
 801359e:	431a      	orrs	r2, r3
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	021b      	lsls	r3, r3, #8
 80135a4:	431a      	orrs	r2, r3
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	4313      	orrs	r3, r2
 80135aa:	4a2c      	ldr	r2, [pc, #176]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80135ac:	6353      	str	r3, [r2, #52]	; 0x34
 80135ae:	e00b      	b.n	80135c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	3318      	adds	r3, #24
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7ff fd73 	bl	80130a0 <_ZNK8touchgfx9colortype10getColor32Ev>
 80135ba:	4602      	mov	r2, r0
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	7f1b      	ldrb	r3, [r3, #28]
 80135c0:	061b      	lsls	r3, r3, #24
 80135c2:	4313      	orrs	r3, r2
 80135c4:	4a25      	ldr	r2, [pc, #148]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80135c6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	8adb      	ldrh	r3, [r3, #22]
 80135cc:	461a      	mov	r2, r3
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	8a1b      	ldrh	r3, [r3, #16]
 80135d2:	1ad3      	subs	r3, r2, r3
 80135d4:	461a      	mov	r2, r3
 80135d6:	4b21      	ldr	r3, [pc, #132]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80135d8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80135da:	7f7b      	ldrb	r3, [r7, #29]
 80135dc:	2b10      	cmp	r3, #16
 80135de:	d101      	bne.n	80135e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80135e0:	2302      	movs	r3, #2
 80135e2:	e000      	b.n	80135e6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80135e4:	2301      	movs	r3, #1
 80135e6:	4a1d      	ldr	r2, [pc, #116]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80135e8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80135ea:	2100      	movs	r1, #0
 80135ec:	481b      	ldr	r0, [pc, #108]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80135ee:	f7f1 fba1 	bl	8004d34 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80135f2:	2101      	movs	r1, #1
 80135f4:	4819      	ldr	r0, [pc, #100]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80135f6:	f7f1 fb9d 	bl	8004d34 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80135fa:	7ffb      	ldrb	r3, [r7, #31]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d102      	bne.n	8013606 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8013600:	7fbb      	ldrb	r3, [r7, #30]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d015      	beq.n	8013632 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801360a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013610:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013616:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801361c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013622:	9301      	str	r3, [sp, #4]
 8013624:	9200      	str	r2, [sp, #0]
 8013626:	4623      	mov	r3, r4
 8013628:	4602      	mov	r2, r0
 801362a:	480c      	ldr	r0, [pc, #48]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801362c:	f7f1 f9a5 	bl	800497a <HAL_DMA2D_BlendingStart_IT>
 8013630:	e00f      	b.n	8013652 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013636:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801363c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013642:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013648:	9300      	str	r3, [sp, #0]
 801364a:	4603      	mov	r3, r0
 801364c:	4803      	ldr	r0, [pc, #12]	; (801365c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801364e:	f7f1 f961 	bl	8004914 <HAL_DMA2D_Start_IT>
    }
}
 8013652:	bf00      	nop
 8013654:	372c      	adds	r7, #44	; 0x2c
 8013656:	46bd      	mov	sp, r7
 8013658:	bd90      	pop	{r4, r7, pc}
 801365a:	bf00      	nop
 801365c:	2000c4fc 	.word	0x2000c4fc
 8013660:	84210843 	.word	0x84210843
 8013664:	82082083 	.word	0x82082083

08013668 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8013668:	b590      	push	{r4, r7, lr}
 801366a:	b08d      	sub	sp, #52	; 0x34
 801366c:	af02      	add	r7, sp, #8
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013672:	f7fb fd09 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8013676:	4602      	mov	r2, r0
 8013678:	6813      	ldr	r3, [r2, #0]
 801367a:	3320      	adds	r3, #32
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	4610      	mov	r0, r2
 8013680:	4798      	blx	r3
 8013682:	4603      	mov	r3, r0
 8013684:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013686:	7ffb      	ldrb	r3, [r7, #31]
 8013688:	2b10      	cmp	r3, #16
 801368a:	d101      	bne.n	8013690 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 801368c:	2302      	movs	r3, #2
 801368e:	e000      	b.n	8013692 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8013690:	2301      	movs	r3, #1
 8013692:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8013694:	2300      	movs	r3, #0
 8013696:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8013698:	7ffb      	ldrb	r3, [r7, #31]
 801369a:	2b10      	cmp	r3, #16
 801369c:	d149      	bne.n	8013732 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	3318      	adds	r3, #24
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7ff fd08 	bl	80130b8 <_ZNK8touchgfx9colortypecvtEv>
 80136a8:	4603      	mov	r3, r0
 80136aa:	12db      	asrs	r3, r3, #11
 80136ac:	f003 021f 	and.w	r2, r3, #31
 80136b0:	4613      	mov	r3, r2
 80136b2:	021b      	lsls	r3, r3, #8
 80136b4:	1a9b      	subs	r3, r3, r2
 80136b6:	4a69      	ldr	r2, [pc, #420]	; (801385c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80136b8:	fb82 1203 	smull	r1, r2, r2, r3
 80136bc:	441a      	add	r2, r3
 80136be:	1112      	asrs	r2, r2, #4
 80136c0:	17db      	asrs	r3, r3, #31
 80136c2:	1ad3      	subs	r3, r2, r3
 80136c4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	3318      	adds	r3, #24
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ff fcf4 	bl	80130b8 <_ZNK8touchgfx9colortypecvtEv>
 80136d0:	4603      	mov	r3, r0
 80136d2:	115b      	asrs	r3, r3, #5
 80136d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80136d8:	4613      	mov	r3, r2
 80136da:	021b      	lsls	r3, r3, #8
 80136dc:	1a9b      	subs	r3, r3, r2
 80136de:	4a60      	ldr	r2, [pc, #384]	; (8013860 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80136e0:	fb82 1203 	smull	r1, r2, r2, r3
 80136e4:	441a      	add	r2, r3
 80136e6:	1152      	asrs	r2, r2, #5
 80136e8:	17db      	asrs	r3, r3, #31
 80136ea:	1ad3      	subs	r3, r2, r3
 80136ec:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	3318      	adds	r3, #24
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7ff fce0 	bl	80130b8 <_ZNK8touchgfx9colortypecvtEv>
 80136f8:	4603      	mov	r3, r0
 80136fa:	f003 021f 	and.w	r2, r3, #31
 80136fe:	4613      	mov	r3, r2
 8013700:	021b      	lsls	r3, r3, #8
 8013702:	1a9b      	subs	r3, r3, r2
 8013704:	4a55      	ldr	r2, [pc, #340]	; (801385c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013706:	fb82 1203 	smull	r1, r2, r2, r3
 801370a:	441a      	add	r2, r3
 801370c:	1112      	asrs	r2, r2, #4
 801370e:	17db      	asrs	r3, r3, #31
 8013710:	1ad3      	subs	r3, r2, r3
 8013712:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	7f1b      	ldrb	r3, [r3, #28]
 8013718:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	061a      	lsls	r2, r3, #24
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	041b      	lsls	r3, r3, #16
 8013722:	431a      	orrs	r2, r3
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	021b      	lsls	r3, r3, #8
 8013728:	4313      	orrs	r3, r2
 801372a:	68fa      	ldr	r2, [r7, #12]
 801372c:	4313      	orrs	r3, r2
 801372e:	623b      	str	r3, [r7, #32]
 8013730:	e00b      	b.n	801374a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	7f1b      	ldrb	r3, [r3, #28]
 8013736:	061b      	lsls	r3, r3, #24
 8013738:	461c      	mov	r4, r3
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	3318      	adds	r3, #24
 801373e:	4618      	mov	r0, r3
 8013740:	f7ff fcae 	bl	80130a0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013744:	4603      	mov	r3, r0
 8013746:	4323      	orrs	r3, r4
 8013748:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	2b08      	cmp	r3, #8
 8013750:	d103      	bne.n	801375a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013758:	e003      	b.n	8013762 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801375a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801375e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013760:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013762:	4a40      	ldr	r2, [pc, #256]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013768:	7ffb      	ldrb	r3, [r7, #31]
 801376a:	2b10      	cmp	r3, #16
 801376c:	d101      	bne.n	8013772 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801376e:	2302      	movs	r3, #2
 8013770:	e000      	b.n	8013774 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8013772:	2301      	movs	r3, #1
 8013774:	4a3b      	ldr	r2, [pc, #236]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013776:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	8adb      	ldrh	r3, [r3, #22]
 801377c:	461a      	mov	r2, r3
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	8a1b      	ldrh	r3, [r3, #16]
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	461a      	mov	r2, r3
 8013786:	4b37      	ldr	r3, [pc, #220]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013788:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801378a:	7ffb      	ldrb	r3, [r7, #31]
 801378c:	2b10      	cmp	r3, #16
 801378e:	d101      	bne.n	8013794 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8013790:	2202      	movs	r2, #2
 8013792:	e000      	b.n	8013796 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8013794:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	8adb      	ldrh	r3, [r3, #22]
 801379a:	4619      	mov	r1, r3
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	8a1b      	ldrh	r3, [r3, #16]
 80137a0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80137a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137a4:	482f      	ldr	r0, [pc, #188]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137a6:	f7ff fd29 	bl	80131fc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80137aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80137b0:	d11e      	bne.n	80137f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80137b2:	4b2c      	ldr	r3, [pc, #176]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137b4:	2201      	movs	r2, #1
 80137b6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80137b8:	4a2a      	ldr	r2, [pc, #168]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137ba:	6a3b      	ldr	r3, [r7, #32]
 80137bc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80137be:	4b29      	ldr	r3, [pc, #164]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137c0:	2209      	movs	r2, #9
 80137c2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	8adb      	ldrh	r3, [r3, #22]
 80137c8:	461a      	mov	r2, r3
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	8a1b      	ldrh	r3, [r3, #16]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	461a      	mov	r2, r3
 80137d2:	4b24      	ldr	r3, [pc, #144]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137d4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80137d6:	7ffb      	ldrb	r3, [r7, #31]
 80137d8:	2b10      	cmp	r3, #16
 80137da:	d101      	bne.n	80137e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80137dc:	2302      	movs	r3, #2
 80137de:	e000      	b.n	80137e2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 80137e0:	2301      	movs	r3, #1
 80137e2:	4a20      	ldr	r2, [pc, #128]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137e4:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80137e6:	2100      	movs	r1, #0
 80137e8:	481e      	ldr	r0, [pc, #120]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137ea:	f7f1 faa3 	bl	8004d34 <HAL_DMA2D_ConfigLayer>
 80137ee:	e005      	b.n	80137fc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80137f0:	4a1c      	ldr	r2, [pc, #112]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80137f6:	4b1b      	ldr	r3, [pc, #108]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80137f8:	2200      	movs	r2, #0
 80137fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80137fc:	2101      	movs	r1, #1
 80137fe:	4819      	ldr	r0, [pc, #100]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013800:	f7f1 fa98 	bl	8004d34 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801380a:	d115      	bne.n	8013838 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013810:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013816:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801381c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013822:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013828:	9301      	str	r3, [sp, #4]
 801382a:	9200      	str	r2, [sp, #0]
 801382c:	4623      	mov	r3, r4
 801382e:	4602      	mov	r2, r0
 8013830:	480c      	ldr	r0, [pc, #48]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013832:	f7f1 f8a2 	bl	800497a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013836:	e00d      	b.n	8013854 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013842:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013848:	9300      	str	r3, [sp, #0]
 801384a:	460b      	mov	r3, r1
 801384c:	6a39      	ldr	r1, [r7, #32]
 801384e:	4805      	ldr	r0, [pc, #20]	; (8013864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013850:	f7f1 f860 	bl	8004914 <HAL_DMA2D_Start_IT>
}
 8013854:	bf00      	nop
 8013856:	372c      	adds	r7, #44	; 0x2c
 8013858:	46bd      	mov	sp, r7
 801385a:	bd90      	pop	{r4, r7, pc}
 801385c:	84210843 	.word	0x84210843
 8013860:	82082083 	.word	0x82082083
 8013864:	2000c4fc 	.word	0x2000c4fc

08013868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	4a05      	ldr	r2, [pc, #20]	; (8013888 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	601a      	str	r2, [r3, #0]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4618      	mov	r0, r3
 801387a:	f7ff fc2b 	bl	80130d4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	0802721c 	.word	0x0802721c

0801388c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff ffe7 	bl	8013868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801389a:	2114      	movs	r1, #20
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f010 fca8 	bl	80241f2 <_ZdlPvj>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	4618      	mov	r0, r3
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80138ac:	b480      	push	{r7}
 80138ae:	b083      	sub	sp, #12
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
        texts = t;
 80138b4:	4a04      	ldr	r2, [pc, #16]	; (80138c8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6013      	str	r3, [r2, #0]
    }
 80138ba:	bf00      	nop
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	2000bd14 	.word	0x2000bd14

080138cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80138cc:	b480      	push	{r7}
 80138ce:	b085      	sub	sp, #20
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
 80138d8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80138da:	4a0b      	ldr	r2, [pc, #44]	; (8013908 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	601a      	str	r2, [r3, #0]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	68ba      	ldr	r2, [r7, #8]
 80138e4:	605a      	str	r2, [r3, #4]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	609a      	str	r2, [r3, #8]
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	683a      	ldr	r2, [r7, #0]
 80138f0:	60da      	str	r2, [r3, #12]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	69ba      	ldr	r2, [r7, #24]
 80138f6:	611a      	str	r2, [r3, #16]
    {
    }
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	4618      	mov	r0, r3
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	080262ac 	.word	0x080262ac

0801390c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
    {
 8013914:	4a04      	ldr	r2, [pc, #16]	; (8013928 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	601a      	str	r2, [r3, #0]
    }
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	4618      	mov	r0, r3
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr
 8013928:	080262ac 	.word	0x080262ac

0801392c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
    }
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f7ff ffe9 	bl	801390c <_ZN8touchgfx7MVPHeapD1Ev>
 801393a:	2114      	movs	r1, #20
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f010 fc58 	bl	80241f2 <_ZdlPvj>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4618      	mov	r0, r3
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 801394c:	b480      	push	{r7}
 801394e:	b083      	sub	sp, #12
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
    {
 8013954:	4a04      	ldr	r2, [pc, #16]	; (8013968 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	601a      	str	r2, [r3, #0]
    }
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4618      	mov	r0, r3
 801395e:	370c      	adds	r7, #12
 8013960:	46bd      	mov	sp, r7
 8013962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013966:	4770      	bx	lr
 8013968:	08027b00 	.word	0x08027b00

0801396c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
    }
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7ff ffe9 	bl	801394c <_ZN8touchgfx3LCDD1Ev>
 801397a:	2108      	movs	r1, #8
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f010 fc38 	bl	80241f2 <_ZdlPvj>
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	4618      	mov	r0, r3
 8013986:	3708      	adds	r7, #8
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 801398c:	b480      	push	{r7}
 801398e:	b083      	sub	sp, #12
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2200      	movs	r2, #0
 8013998:	801a      	strh	r2, [r3, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	2200      	movs	r2, #0
 801399e:	805a      	strh	r2, [r3, #2]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	809a      	strh	r2, [r3, #4]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2200      	movs	r2, #0
 80139aa:	80da      	strh	r2, [r3, #6]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	811a      	strh	r2, [r3, #8]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	815a      	strh	r2, [r3, #10]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2200      	movs	r2, #0
 80139bc:	819a      	strh	r2, [r3, #12]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2200      	movs	r2, #0
 80139c2:	739a      	strb	r2, [r3, #14]
        {
        }
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	4618      	mov	r0, r3
 80139c8:	370c      	adds	r7, #12
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr

080139d2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b082      	sub	sp, #8
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7ff ffd5 	bl	801398c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2200      	movs	r2, #0
 80139e6:	611a      	str	r2, [r3, #16]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	829a      	strh	r2, [r3, #20]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	4618      	mov	r0, r3
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
 8013a04:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013a06:	4a44      	ldr	r2, [pc, #272]	; (8013b18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	68ba      	ldr	r2, [r7, #8]
 8013a10:	605a      	str	r2, [r3, #4]
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	609a      	str	r2, [r3, #8]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	60da      	str	r2, [r3, #12]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	2200      	movs	r2, #0
 8013a22:	611a      	str	r2, [r3, #16]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2200      	movs	r2, #0
 8013a28:	615a      	str	r2, [r3, #20]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	619a      	str	r2, [r3, #24]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	331c      	adds	r3, #28
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ff ffcc 	bl	80139d2 <_ZN8touchgfx8GesturesC1Ev>
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2200      	movs	r2, #0
 8013a44:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	645a      	str	r2, [r3, #68]	; 0x44
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2200      	movs	r2, #0
 8013a56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	2201      	movs	r2, #1
 8013a66:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	3350      	adds	r3, #80	; 0x50
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fb ff36 	bl	800f8e6 <_ZN8touchgfx4RectC1Ev>
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2200      	movs	r2, #0
 8013a86:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2201      	movs	r2, #1
 8013a96:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2200      	movs	r2, #0
 8013aae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2200      	movs	r2, #0
 8013abe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	671a      	str	r2, [r3, #112]	; 0x70
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2200      	movs	r2, #0
 8013acc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8013ad0:	4a12      	ldr	r2, [pc, #72]	; (8013b1c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013ad6:	4a12      	ldr	r2, [pc, #72]	; (8013b20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013ad8:	8b3b      	ldrh	r3, [r7, #24]
 8013ada:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013adc:	4a11      	ldr	r2, [pc, #68]	; (8013b24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013ade:	8bbb      	ldrh	r3, [r7, #28]
 8013ae0:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013ae2:	4b11      	ldr	r3, [pc, #68]	; (8013b28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013ae8:	4b0d      	ldr	r3, [pc, #52]	; (8013b20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013aea:	881a      	ldrh	r2, [r3, #0]
 8013aec:	4b0f      	ldr	r3, [pc, #60]	; (8013b2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8013aee:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013af0:	4b0c      	ldr	r3, [pc, #48]	; (8013b24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013af2:	881a      	ldrh	r2, [r3, #0]
 8013af4:	4b0e      	ldr	r3, [pc, #56]	; (8013b30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013af6:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013af8:	8b3a      	ldrh	r2, [r7, #24]
 8013afa:	8bbb      	ldrh	r3, [r7, #28]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d301      	bcc.n	8013b04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8013b00:	2200      	movs	r2, #0
 8013b02:	e000      	b.n	8013b06 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8013b04:	2201      	movs	r2, #1
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3710      	adds	r7, #16
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	08026d88 	.word	0x08026d88
 8013b1c:	2000bc78 	.word	0x2000bc78
 8013b20:	2000bc6c 	.word	0x2000bc6c
 8013b24:	2000bc6e 	.word	0x2000bc6e
 8013b28:	2000bc70 	.word	0x2000bc70
 8013b2c:	2000bc72 	.word	0x2000bc72
 8013b30:	2000bc74 	.word	0x2000bc74

08013b34 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7fb fcc5 	bl	800f4d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8013b46:	bf00      	nop
 8013b48:	3708      	adds	r7, #8
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
	...

08013b50 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af02      	add	r7, sp, #8
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
 8013b5c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013b5e:	68f8      	ldr	r0, [r7, #12]
 8013b60:	69bb      	ldr	r3, [r7, #24]
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	68b9      	ldr	r1, [r7, #8]
 8013b6a:	f7ff feaf 	bl	80138cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013b6e:	4a04      	ldr	r2, [pc, #16]	; (8013b80 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	601a      	str	r2, [r3, #0]
    {

    }
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	4618      	mov	r0, r3
 8013b78:	3710      	adds	r7, #16
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	08026298 	.word	0x08026298

08013b84 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013b84:	b580      	push	{r7, lr}
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	4801      	ldr	r0, [pc, #4]	; (8013b90 <__tcf_0+0xc>)
 8013b8a:	f000 f9dd 	bl	8013f48 <_ZN12FrontendHeapD1Ev>
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	200086cc 	.word	0x200086cc

08013b94 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013b94:	b580      	push	{r7, lr}
 8013b96:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013b98:	4b08      	ldr	r3, [pc, #32]	; (8013bbc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f003 0301 	and.w	r3, r3, #1
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d108      	bne.n	8013bb6 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8013ba4:	4806      	ldr	r0, [pc, #24]	; (8013bc0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8013ba6:	f000 f831 	bl	8013c0c <_ZN12FrontendHeapC1Ev>
 8013baa:	4b04      	ldr	r3, [pc, #16]	; (8013bbc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013bac:	2201      	movs	r2, #1
 8013bae:	601a      	str	r2, [r3, #0]
 8013bb0:	4804      	ldr	r0, [pc, #16]	; (8013bc4 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8013bb2:	f010 fb67 	bl	8024284 <atexit>
        return instance;
 8013bb6:	4b02      	ldr	r3, [pc, #8]	; (8013bc0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8013bb8:	4618      	mov	r0, r3
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	2000af6c 	.word	0x2000af6c
 8013bc0:	200086cc 	.word	0x200086cc
 8013bc4:	08013b85 	.word	0x08013b85

08013bc8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	4a05      	ldr	r2, [pc, #20]	; (8013be8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	601a      	str	r2, [r3, #0]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7ff fe97 	bl	801390c <_ZN8touchgfx7MVPHeapD1Ev>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4618      	mov	r0, r3
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	08026298 	.word	0x08026298

08013bec <_ZN16FrontendHeapBaseD0Ev>:
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b082      	sub	sp, #8
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7ff ffe7 	bl	8013bc8 <_ZN16FrontendHeapBaseD1Ev>
 8013bfa:	2114      	movs	r1, #20
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f010 faf8 	bl	80241f2 <_ZdlPvj>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4618      	mov	r0, r3
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013c0c:	b5b0      	push	{r4, r5, r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af02      	add	r7, sp, #8
 8013c12:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f103 0414 	add.w	r4, r3, #20
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f242 7238 	movw	r2, #10040	; 0x2738
 8013c28:	441a      	add	r2, r3
 8013c2a:	6879      	ldr	r1, [r7, #4]
 8013c2c:	f242 734c 	movw	r3, #10060	; 0x274c
 8013c30:	440b      	add	r3, r1
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	4613      	mov	r3, r2
 8013c36:	462a      	mov	r2, r5
 8013c38:	4621      	mov	r1, r4
 8013c3a:	f7ff ff89 	bl	8013b50 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013c3e:	4a1a      	ldr	r2, [pc, #104]	; (8013ca8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	3314      	adds	r3, #20
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 f8df 	bl	8013e0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	332c      	adds	r3, #44	; 0x2c
 8013c52:	4618      	mov	r0, r3
 8013c54:	f000 f90e 	bl	8013e74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	f242 7338 	movw	r3, #10040	; 0x2738
 8013c5e:	4413      	add	r3, r2
 8013c60:	4618      	mov	r0, r3
 8013c62:	f000 f93d 	bl	8013ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	f242 734c 	movw	r3, #10060	; 0x274c
 8013c6c:	4413      	add	r3, r2
 8013c6e:	687a      	ldr	r2, [r7, #4]
 8013c70:	f642 019c 	movw	r1, #10396	; 0x289c
 8013c74:	4411      	add	r1, r2
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fe f9a5 	bl	8011fc8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	f642 039c 	movw	r3, #10396	; 0x289c
 8013c84:	4413      	add	r3, r2
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fe fdc8 	bl	801281c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	f242 734c 	movw	r3, #10060	; 0x274c
 8013c94:	4413      	add	r3, r2
 8013c96:	4619      	mov	r1, r3
 8013c98:	f7ff ff4c 	bl	8013b34 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3708      	adds	r7, #8
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	080261e8 	.word	0x080261e8

08013cac <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
    {
 8013cb4:	4a05      	ldr	r2, [pc, #20]	; (8013ccc <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	601a      	str	r2, [r3, #0]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7ff fe45 	bl	801394c <_ZN8touchgfx3LCDD1Ev>
    }
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3708      	adds	r7, #8
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	08028edc 	.word	0x08028edc

08013cd0 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
    }
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7ff ffe7 	bl	8013cac <_ZN8touchgfx8LCD24bppD1Ev>
 8013cde:	2158      	movs	r1, #88	; 0x58
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f010 fa86 	bl	80241f2 <_ZdlPvj>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af02      	add	r7, sp, #8
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	607a      	str	r2, [r7, #4]
 8013cfc:	603b      	str	r3, [r7, #0]
 8013cfe:	68f8      	ldr	r0, [r7, #12]
 8013d00:	8bbb      	ldrh	r3, [r7, #28]
 8013d02:	9301      	str	r3, [sp, #4]
 8013d04:	8b3b      	ldrh	r3, [r7, #24]
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	68b9      	ldr	r1, [r7, #8]
 8013d0e:	f7ff fe73 	bl	80139f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8013d12:	4a04      	ldr	r2, [pc, #16]	; (8013d24 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	601a      	str	r2, [r3, #0]
    }
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3710      	adds	r7, #16
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
 8013d22:	bf00      	nop
 8013d24:	080262bc 	.word	0x080262bc

08013d28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b086      	sub	sp, #24
 8013d2c:	af02      	add	r7, sp, #8
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	607a      	str	r2, [r7, #4]
 8013d34:	603b      	str	r3, [r7, #0]
 8013d36:	68f8      	ldr	r0, [r7, #12]
 8013d38:	8bbb      	ldrh	r3, [r7, #28]
 8013d3a:	9301      	str	r3, [sp, #4]
 8013d3c:	8b3b      	ldrh	r3, [r7, #24]
 8013d3e:	9300      	str	r3, [sp, #0]
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	68b9      	ldr	r1, [r7, #8]
 8013d46:	f7ff ffd3 	bl	8013cf0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013d4a:	4a04      	ldr	r2, [pc, #16]	; (8013d5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	601a      	str	r2, [r3, #0]
    }
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	4618      	mov	r0, r3
 8013d54:	3710      	adds	r7, #16
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	08025fe8 	.word	0x08025fe8

08013d60 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	4a04      	ldr	r2, [pc, #16]	; (8013d7c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	601a      	str	r2, [r3, #0]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	4618      	mov	r0, r3
 8013d72:	370c      	adds	r7, #12
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr
 8013d7c:	08025fd0 	.word	0x08025fd0

08013d80 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7ff ffe8 	bl	8013d60 <_ZN8touchgfx15TouchControllerC1Ev>
 8013d90:	4a03      	ldr	r2, [pc, #12]	; (8013da0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	601a      	str	r2, [r3, #0]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3708      	adds	r7, #8
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	08025fb8 	.word	0x08025fb8

08013da4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8013da4:	b590      	push	{r4, r7, lr}
 8013da6:	b085      	sub	sp, #20
 8013da8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013daa:	f7fd ffe9 	bl	8011d80 <_ZN14BitmapDatabase11getInstanceEv>
 8013dae:	4604      	mov	r4, r0
 8013db0:	f7fd fff0 	bl	8011d94 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013db4:	4603      	mov	r3, r0
 8013db6:	4619      	mov	r1, r3
 8013db8:	2300      	movs	r3, #0
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f006 fcdb 	bl	801a77c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8013dc6:	4809      	ldr	r0, [pc, #36]	; (8013dec <touchgfx_init+0x48>)
 8013dc8:	f7ff fd70 	bl	80138ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8013dcc:	2000      	movs	r0, #0
 8013dce:	f7fe f805 	bl	8011ddc <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8013dd2:	4807      	ldr	r0, [pc, #28]	; (8013df0 <touchgfx_init+0x4c>)
 8013dd4:	f006 fc20 	bl	801a618 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8013dd8:	f7ff fedc 	bl	8013b94 <_ZN12FrontendHeap11getInstanceEv>
 8013ddc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8013dde:	4805      	ldr	r0, [pc, #20]	; (8013df4 <touchgfx_init+0x50>)
 8013de0:	f7fe ffda 	bl	8012d98 <_ZN11TouchGFXHAL10initializeEv>
}
 8013de4:	bf00      	nop
 8013de6:	370c      	adds	r7, #12
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd90      	pop	{r4, r7, pc}
 8013dec:	2000bbec 	.word	0x2000bbec
 8013df0:	20000040 	.word	0x20000040
 8013df4:	2000bbf0 	.word	0x2000bbf0

08013df8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8013dfc:	4802      	ldr	r0, [pc, #8]	; (8013e08 <touchgfx_taskEntry+0x10>)
 8013dfe:	f001 fa06 	bl	801520e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8013e02:	bf00      	nop
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	2000bbf0 	.word	0x2000bbf0

08013e0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f000 fc76 	bl	8014708 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013e1c:	4a03      	ldr	r2, [pc, #12]	; (8013e2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	601a      	str	r2, [r3, #0]
    {
    }
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	08026264 	.word	0x08026264

08013e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
    {
    }
 8013e38:	4a05      	ldr	r2, [pc, #20]	; (8013e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	601a      	str	r2, [r3, #0]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 fc5f 	bl	8014704 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3708      	adds	r7, #8
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	08026264 	.word	0x08026264

08013e54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
    }
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7ff ffe7 	bl	8013e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013e62:	2118      	movs	r1, #24
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f010 f9c4 	bl	80241f2 <_ZdlPvj>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f000 fc42 	bl	8014708 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013e84:	4a03      	ldr	r2, [pc, #12]	; (8013e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	601a      	str	r2, [r3, #0]
    }
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	08026230 	.word	0x08026230

08013e98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
    }
 8013ea0:	4a05      	ldr	r2, [pc, #20]	; (8013eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	601a      	str	r2, [r3, #0]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f000 fc2b 	bl	8014704 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	08026230 	.word	0x08026230

08013ebc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
    }
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f7ff ffe7 	bl	8013e98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013eca:	f242 710c 	movw	r1, #9996	; 0x270c
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f010 f98f 	bl	80241f2 <_ZdlPvj>
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
	...

08013ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 fc0c 	bl	8014708 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013ef0:	4a03      	ldr	r2, [pc, #12]	; (8013f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	601a      	str	r2, [r3, #0]
    }
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3708      	adds	r7, #8
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	080261fc 	.word	0x080261fc

08013f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
    }
 8013f0c:	4a05      	ldr	r2, [pc, #20]	; (8013f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	601a      	str	r2, [r3, #0]
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	4618      	mov	r0, r3
 8013f16:	f000 fbf5 	bl	8014704 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	080261fc 	.word	0x080261fc

08013f28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
    }
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f7ff ffe7 	bl	8013f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013f36:	2114      	movs	r1, #20
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f010 f95a 	bl	80241f2 <_ZdlPvj>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	4618      	mov	r0, r3
 8013f42:	3708      	adds	r7, #8
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	4a11      	ldr	r2, [pc, #68]	; (8013f98 <_ZN12FrontendHeapD1Ev+0x50>)
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	601a      	str	r2, [r3, #0]
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	f242 734c 	movw	r3, #10060	; 0x274c
 8013f5c:	4413      	add	r3, r2
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7fd fffc 	bl	8011f5c <_ZN19FrontendApplicationD1Ev>
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	f242 7338 	movw	r3, #10040	; 0x2738
 8013f6a:	4413      	add	r3, r2
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7ff ffc9 	bl	8013f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	332c      	adds	r3, #44	; 0x2c
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7ff ff8e 	bl	8013e98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3314      	adds	r3, #20
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7ff ff55 	bl	8013e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7ff fe1d 	bl	8013bc8 <_ZN16FrontendHeapBaseD1Ev>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	4618      	mov	r0, r3
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	080261e8 	.word	0x080261e8

08013f9c <_ZN12FrontendHeapD0Ev>:
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7ff ffcf 	bl	8013f48 <_ZN12FrontendHeapD1Ev>
 8013faa:	f642 01a0 	movw	r1, #10400	; 0x28a0
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f010 f91f 	bl	80241f2 <_ZdlPvj>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
	...

08013fc0 <_Z41__static_initialization_and_destruction_0ii>:
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af02      	add	r7, sp, #8
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	6039      	str	r1, [r7, #0]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2b01      	cmp	r3, #1
 8013fce:	d119      	bne.n	8014004 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d114      	bne.n	8014004 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013fda:	4818      	ldr	r0, [pc, #96]	; (801403c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013fdc:	f7ff fed0 	bl	8013d80 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8013fe0:	4817      	ldr	r0, [pc, #92]	; (8014040 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013fe2:	f7ff f965 	bl	80132b0 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8013fe6:	4817      	ldr	r0, [pc, #92]	; (8014044 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013fe8:	f008 fdee 	bl	801cbc8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8013fec:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013ff0:	9301      	str	r3, [sp, #4]
 8013ff2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	4b10      	ldr	r3, [pc, #64]	; (801403c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013ffa:	4a12      	ldr	r2, [pc, #72]	; (8014044 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013ffc:	4910      	ldr	r1, [pc, #64]	; (8014040 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013ffe:	4812      	ldr	r0, [pc, #72]	; (8014048 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014000:	f7ff fe92 	bl	8013d28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d113      	bne.n	8014032 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014010:	4293      	cmp	r3, r2
 8014012:	d10e      	bne.n	8014032 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014014:	480c      	ldr	r0, [pc, #48]	; (8014048 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014016:	f7fe ff25 	bl	8012e64 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801401a:	480c      	ldr	r0, [pc, #48]	; (801404c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801401c:	f7fa fb60 	bl	800e6e0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014020:	4808      	ldr	r0, [pc, #32]	; (8014044 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014022:	f7ff fe43 	bl	8013cac <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8014026:	4806      	ldr	r0, [pc, #24]	; (8014040 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014028:	f7ff f96c 	bl	8013304 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801402c:	4803      	ldr	r0, [pc, #12]	; (801403c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801402e:	f7fe fc8f 	bl	8012950 <_ZN20STM32TouchControllerD1Ev>
}
 8014032:	bf00      	nop
 8014034:	3708      	adds	r7, #8
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}
 801403a:	bf00      	nop
 801403c:	2000af70 	.word	0x2000af70
 8014040:	2000af74 	.word	0x2000af74
 8014044:	2000bb94 	.word	0x2000bb94
 8014048:	2000bbf0 	.word	0x2000bbf0
 801404c:	20000040 	.word	0x20000040

08014050 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014058:	2301      	movs	r3, #1
    }
 801405a:	4618      	mov	r0, r3
 801405c:	370c      	adds	r7, #12
 801405e:	46bd      	mov	sp, r7
 8014060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014064:	4770      	bx	lr

08014066 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8014066:	b480      	push	{r7}
 8014068:	b083      	sub	sp, #12
 801406a:	af00      	add	r7, sp, #0
 801406c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801406e:	230c      	movs	r3, #12
    }
 8014070:	4618      	mov	r0, r3
 8014072:	370c      	adds	r7, #12
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr

0801407c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801407c:	b480      	push	{r7}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	460b      	mov	r3, r1
 8014086:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014088:	887a      	ldrh	r2, [r7, #2]
 801408a:	4613      	mov	r3, r2
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	4413      	add	r3, r2
 8014090:	009b      	lsls	r3, r3, #2
 8014092:	3308      	adds	r3, #8
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	4413      	add	r3, r2
    }
 8014098:	4618      	mov	r0, r3
 801409a:	370c      	adds	r7, #12
 801409c:	46bd      	mov	sp, r7
 801409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a2:	4770      	bx	lr

080140a4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	460b      	mov	r3, r1
 80140ae:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80140b0:	887a      	ldrh	r2, [r7, #2]
 80140b2:	4613      	mov	r3, r2
 80140b4:	005b      	lsls	r3, r3, #1
 80140b6:	4413      	add	r3, r2
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	3308      	adds	r3, #8
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	4413      	add	r3, r2
    }
 80140c0:	4618      	mov	r0, r3
 80140c2:	370c      	adds	r7, #12
 80140c4:	46bd      	mov	sp, r7
 80140c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ca:	4770      	bx	lr

080140cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80140cc:	b480      	push	{r7}
 80140ce:	b083      	sub	sp, #12
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80140d4:	2301      	movs	r3, #1
    }
 80140d6:	4618      	mov	r0, r3
 80140d8:	370c      	adds	r7, #12
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr

080140e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80140e2:	b480      	push	{r7}
 80140e4:	b083      	sub	sp, #12
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80140ea:	f242 7304 	movw	r3, #9988	; 0x2704
    }
 80140ee:	4618      	mov	r0, r3
 80140f0:	370c      	adds	r7, #12
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr

080140fa <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80140fa:	b480      	push	{r7}
 80140fc:	b083      	sub	sp, #12
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
 8014102:	460b      	mov	r3, r1
 8014104:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014106:	887b      	ldrh	r3, [r7, #2]
 8014108:	f242 7204 	movw	r2, #9988	; 0x2704
 801410c:	fb02 f303 	mul.w	r3, r2, r3
 8014110:	3308      	adds	r3, #8
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	4413      	add	r3, r2
    }
 8014116:	4618      	mov	r0, r3
 8014118:	370c      	adds	r7, #12
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr

08014122 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014122:	b480      	push	{r7}
 8014124:	b083      	sub	sp, #12
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
 801412a:	460b      	mov	r3, r1
 801412c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801412e:	887b      	ldrh	r3, [r7, #2]
 8014130:	f242 7204 	movw	r2, #9988	; 0x2704
 8014134:	fb02 f303 	mul.w	r3, r2, r3
 8014138:	3308      	adds	r3, #8
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	4413      	add	r3, r2
    }
 801413e:	4618      	mov	r0, r3
 8014140:	370c      	adds	r7, #12
 8014142:	46bd      	mov	sp, r7
 8014144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014148:	4770      	bx	lr

0801414a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801414a:	b480      	push	{r7}
 801414c:	b083      	sub	sp, #12
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014152:	2301      	movs	r3, #1
    }
 8014154:	4618      	mov	r0, r3
 8014156:	370c      	adds	r7, #12
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014160:	b480      	push	{r7}
 8014162:	b083      	sub	sp, #12
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014168:	2310      	movs	r3, #16
    }
 801416a:	4618      	mov	r0, r3
 801416c:	370c      	adds	r7, #12
 801416e:	46bd      	mov	sp, r7
 8014170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014174:	4770      	bx	lr

08014176 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014176:	b480      	push	{r7}
 8014178:	b083      	sub	sp, #12
 801417a:	af00      	add	r7, sp, #0
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	460b      	mov	r3, r1
 8014180:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014182:	887b      	ldrh	r3, [r7, #2]
 8014184:	011b      	lsls	r3, r3, #4
 8014186:	3308      	adds	r3, #8
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	4413      	add	r3, r2
    }
 801418c:	4618      	mov	r0, r3
 801418e:	370c      	adds	r7, #12
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr

08014198 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014198:	b480      	push	{r7}
 801419a:	b083      	sub	sp, #12
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	460b      	mov	r3, r1
 80141a2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80141a4:	887b      	ldrh	r3, [r7, #2]
 80141a6:	011b      	lsls	r3, r3, #4
 80141a8:	3308      	adds	r3, #8
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	4413      	add	r3, r2
    }
 80141ae:	4618      	mov	r0, r3
 80141b0:	370c      	adds	r7, #12
 80141b2:	46bd      	mov	sp, r7
 80141b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b8:	4770      	bx	lr

080141ba <_GLOBAL__sub_I_touchgfx_init>:
 80141ba:	b580      	push	{r7, lr}
 80141bc:	af00      	add	r7, sp, #0
 80141be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80141c2:	2001      	movs	r0, #1
 80141c4:	f7ff fefc 	bl	8013fc0 <_Z41__static_initialization_and_destruction_0ii>
 80141c8:	bd80      	pop	{r7, pc}

080141ca <_GLOBAL__sub_D_touchgfx_init>:
 80141ca:	b580      	push	{r7, lr}
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80141d2:	2000      	movs	r0, #0
 80141d4:	f7ff fef4 	bl	8013fc0 <_Z41__static_initialization_and_destruction_0ii>
 80141d8:	bd80      	pop	{r7, pc}

080141da <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80141da:	b580      	push	{r7, lr}
 80141dc:	b082      	sub	sp, #8
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	3318      	adds	r3, #24
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	4798      	blx	r3
    }
 80141ee:	bf00      	nop
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80141f6:	b480      	push	{r7}
 80141f8:	b083      	sub	sp, #12
 80141fa:	af00      	add	r7, sp, #0
 80141fc:	6078      	str	r0, [r7, #4]
 80141fe:	460b      	mov	r3, r1
 8014200:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	78fa      	ldrb	r2, [r7, #3]
 8014206:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801420a:	bf00      	nop
 801420c:	370c      	adds	r7, #12
 801420e:	46bd      	mov	sp, r7
 8014210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014214:	4770      	bx	lr

08014216 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014216:	b480      	push	{r7}
 8014218:	b083      	sub	sp, #12
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014224:	3301      	adds	r3, #1
 8014226:	b2da      	uxtb	r2, r3
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801422e:	bf00      	nop
 8014230:	370c      	adds	r7, #12
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr
	...

0801423c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	460b      	mov	r3, r1
 8014246:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014248:	78fb      	ldrb	r3, [r7, #3]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d002      	beq.n	8014254 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801424e:	78fb      	ldrb	r3, [r7, #3]
 8014250:	2b02      	cmp	r3, #2
 8014252:	d105      	bne.n	8014260 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	78fa      	ldrb	r2, [r7, #3]
 8014258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801425c:	2301      	movs	r3, #1
 801425e:	e027      	b.n	80142b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014260:	78fb      	ldrb	r3, [r7, #3]
 8014262:	2b01      	cmp	r3, #1
 8014264:	d123      	bne.n	80142ae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801426a:	2b00      	cmp	r3, #0
 801426c:	d014      	beq.n	8014298 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	3380      	adds	r3, #128	; 0x80
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	4798      	blx	r3
 801427a:	4603      	mov	r3, r0
 801427c:	461a      	mov	r2, r3
 801427e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014282:	429a      	cmp	r2, r3
 8014284:	d008      	beq.n	8014298 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014286:	4b0c      	ldr	r3, [pc, #48]	; (80142b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	f083 0301 	eor.w	r3, r3, #1
 801428e:	b2db      	uxtb	r3, r3
 8014290:	2b00      	cmp	r3, #0
 8014292:	d001      	beq.n	8014298 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014294:	2301      	movs	r3, #1
 8014296:	e000      	b.n	801429a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014298:	2300      	movs	r3, #0
 801429a:	2b00      	cmp	r3, #0
 801429c:	d005      	beq.n	80142aa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	78fa      	ldrb	r2, [r7, #3]
 80142a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80142a6:	2301      	movs	r3, #1
 80142a8:	e002      	b.n	80142b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80142aa:	2300      	movs	r3, #0
 80142ac:	e000      	b.n	80142b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80142ae:	2300      	movs	r3, #0
    }
 80142b0:	4618      	mov	r0, r3
 80142b2:	3708      	adds	r7, #8
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	2000bc76 	.word	0x2000bc76

080142bc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 80142bc:	b480      	push	{r7}
 80142be:	b083      	sub	sp, #12
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	683a      	ldr	r2, [r7, #0]
 80142ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80142cc:	bf00      	nop
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <__NVIC_EnableIRQ>:
{
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	4603      	mov	r3, r0
 80142e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80142e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	db0d      	blt.n	8014306 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80142ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	f003 021f 	and.w	r2, r3, #31
 80142f4:	4907      	ldr	r1, [pc, #28]	; (8014314 <__NVIC_EnableIRQ+0x3c>)
 80142f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142fa:	095b      	lsrs	r3, r3, #5
 80142fc:	2001      	movs	r0, #1
 80142fe:	fa00 f202 	lsl.w	r2, r0, r2
 8014302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014306:	bf00      	nop
 8014308:	370c      	adds	r7, #12
 801430a:	46bd      	mov	sp, r7
 801430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop
 8014314:	e000e100 	.word	0xe000e100

08014318 <__NVIC_DisableIRQ>:
{
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	4603      	mov	r3, r0
 8014320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014326:	2b00      	cmp	r3, #0
 8014328:	db12      	blt.n	8014350 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801432e:	b2db      	uxtb	r3, r3
 8014330:	f003 021f 	and.w	r2, r3, #31
 8014334:	4909      	ldr	r1, [pc, #36]	; (801435c <__NVIC_DisableIRQ+0x44>)
 8014336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801433a:	095b      	lsrs	r3, r3, #5
 801433c:	2001      	movs	r0, #1
 801433e:	fa00 f202 	lsl.w	r2, r0, r2
 8014342:	3320      	adds	r3, #32
 8014344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801434c:	f3bf 8f6f 	isb	sy
}
 8014350:	bf00      	nop
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr
 801435c:	e000e100 	.word	0xe000e100

08014360 <__NVIC_SetPriority>:
{
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	4603      	mov	r3, r0
 8014368:	6039      	str	r1, [r7, #0]
 801436a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014370:	2b00      	cmp	r3, #0
 8014372:	db0c      	blt.n	801438e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	b2db      	uxtb	r3, r3
 8014378:	4a0e      	ldr	r2, [pc, #56]	; (80143b4 <__NVIC_SetPriority+0x54>)
 801437a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801437e:	4608      	mov	r0, r1
 8014380:	011b      	lsls	r3, r3, #4
 8014382:	b2d9      	uxtb	r1, r3
 8014384:	1813      	adds	r3, r2, r0
 8014386:	460a      	mov	r2, r1
 8014388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801438c:	e00c      	b.n	80143a8 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	b2da      	uxtb	r2, r3
 8014392:	4909      	ldr	r1, [pc, #36]	; (80143b8 <__NVIC_SetPriority+0x58>)
 8014394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014398:	b2db      	uxtb	r3, r3
 801439a:	f003 030f 	and.w	r3, r3, #15
 801439e:	3b04      	subs	r3, #4
 80143a0:	0112      	lsls	r2, r2, #4
 80143a2:	b2d2      	uxtb	r2, r2
 80143a4:	440b      	add	r3, r1
 80143a6:	761a      	strb	r2, [r3, #24]
}
 80143a8:	bf00      	nop
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr
 80143b4:	e000e100 	.word	0xe000e100
 80143b8:	e000ed00 	.word	0xe000ed00

080143bc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80143bc:	b5b0      	push	{r4, r5, r7, lr}
 80143be:	b082      	sub	sp, #8
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	4618      	mov	r0, r3
 80143c8:	f001 f9e6 	bl	8015798 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 80143cc:	687d      	ldr	r5, [r7, #4]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	334c      	adds	r3, #76	; 0x4c
 80143d4:	681c      	ldr	r4, [r3, #0]
 80143d6:	f003 ff43 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 80143da:	4603      	mov	r3, r0
 80143dc:	4619      	mov	r1, r3
 80143de:	4628      	mov	r0, r5
 80143e0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	490d      	ldr	r1, [pc, #52]	; (801441c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7ff ff68 	bl	80142bc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2101      	movs	r1, #1
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7ff ff23 	bl	801423c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	3374      	adds	r3, #116	; 0x74
 80143fe:	681c      	ldr	r4, [r3, #0]
 8014400:	2300      	movs	r3, #0
 8014402:	2200      	movs	r2, #0
 8014404:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014408:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2101      	movs	r1, #1
 801440e:	4618      	mov	r0, r3
 8014410:	f7ff fef1 	bl	80141f6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014414:	bf00      	nop
 8014416:	3708      	adds	r7, #8
 8014418:	46bd      	mov	sp, r7
 801441a:	bdb0      	pop	{r4, r5, r7, pc}
 801441c:	08012ffd 	.word	0x08012ffd

08014420 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014428:	2109      	movs	r1, #9
 801442a:	205a      	movs	r0, #90	; 0x5a
 801442c:	f7ff ff98 	bl	8014360 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014430:	2109      	movs	r1, #9
 8014432:	2058      	movs	r0, #88	; 0x58
 8014434:	f7ff ff94 	bl	8014360 <__NVIC_SetPriority>
}
 8014438:	bf00      	nop
 801443a:	3708      	adds	r7, #8
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014448:	205a      	movs	r0, #90	; 0x5a
 801444a:	f7ff ff45 	bl	80142d8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801444e:	2058      	movs	r0, #88	; 0x58
 8014450:	f7ff ff42 	bl	80142d8 <__NVIC_EnableIRQ>
}
 8014454:	bf00      	nop
 8014456:	3708      	adds	r7, #8
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014464:	205a      	movs	r0, #90	; 0x5a
 8014466:	f7ff ff57 	bl	8014318 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801446a:	2058      	movs	r0, #88	; 0x58
 801446c:	f7ff ff54 	bl	8014318 <__NVIC_DisableIRQ>
}
 8014470:	bf00      	nop
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014480:	4b11      	ldr	r3, [pc, #68]	; (80144c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	b29b      	uxth	r3, r3
 8014486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801448a:	b29b      	uxth	r3, r3
 801448c:	3b01      	subs	r3, #1
 801448e:	b29a      	uxth	r2, r3
 8014490:	4b0e      	ldr	r3, [pc, #56]	; (80144cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014492:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014494:	4b0c      	ldr	r3, [pc, #48]	; (80144c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014496:	691b      	ldr	r3, [r3, #16]
 8014498:	b29b      	uxth	r3, r3
 801449a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801449e:	b29b      	uxth	r3, r3
 80144a0:	3b01      	subs	r3, #1
 80144a2:	b29a      	uxth	r2, r3
 80144a4:	4b0a      	ldr	r3, [pc, #40]	; (80144d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80144a6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80144a8:	4b08      	ldr	r3, [pc, #32]	; (80144cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80144aa:	881a      	ldrh	r2, [r3, #0]
 80144ac:	4b06      	ldr	r3, [pc, #24]	; (80144c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80144ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80144b0:	4b05      	ldr	r3, [pc, #20]	; (80144c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80144b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144b4:	4a04      	ldr	r2, [pc, #16]	; (80144c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80144b6:	f043 0301 	orr.w	r3, r3, #1
 80144ba:	6353      	str	r3, [r2, #52]	; 0x34
}
 80144bc:	bf00      	nop
 80144be:	370c      	adds	r7, #12
 80144c0:	46bd      	mov	sp, r7
 80144c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c6:	4770      	bx	lr
 80144c8:	40016800 	.word	0x40016800
 80144cc:	2000bc68 	.word	0x2000bc68
 80144d0:	2000bc6a 	.word	0x2000bc6a

080144d4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80144d4:	b480      	push	{r7}
 80144d6:	b083      	sub	sp, #12
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80144dc:	4b03      	ldr	r3, [pc, #12]	; (80144ec <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80144de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	370c      	adds	r7, #12
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr
 80144ec:	40016884 	.word	0x40016884

080144f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80144f0:	b480      	push	{r7}
 80144f2:	b083      	sub	sp, #12
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80144fa:	4a06      	ldr	r2, [pc, #24]	; (8014514 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014500:	4b05      	ldr	r3, [pc, #20]	; (8014518 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014502:	2201      	movs	r2, #1
 8014504:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014506:	bf00      	nop
 8014508:	370c      	adds	r7, #12
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop
 8014514:	40016884 	.word	0x40016884
 8014518:	40016800 	.word	0x40016800

0801451c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6839      	ldr	r1, [r7, #0]
 801452a:	4618      	mov	r0, r3
 801452c:	f000 fe44 	bl	80151b8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8014530:	bf00      	nop
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014538:	b480      	push	{r7}
 801453a:	b085      	sub	sp, #20
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014540:	4b0d      	ldr	r3, [pc, #52]	; (8014578 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014544:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014546:	4b0c      	ldr	r3, [pc, #48]	; (8014578 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	b29b      	uxth	r3, r3
 801454c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014550:	b29b      	uxth	r3, r3
 8014552:	3301      	adds	r3, #1
 8014554:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8014556:	89fa      	ldrh	r2, [r7, #14]
 8014558:	89bb      	ldrh	r3, [r7, #12]
 801455a:	429a      	cmp	r2, r3
 801455c:	d201      	bcs.n	8014562 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801455e:	2300      	movs	r3, #0
 8014560:	e003      	b.n	801456a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8014562:	89fa      	ldrh	r2, [r7, #14]
 8014564:	89bb      	ldrh	r3, [r7, #12]
 8014566:	1ad3      	subs	r3, r2, r3
 8014568:	b29b      	uxth	r3, r3
    }
}
 801456a:	4618      	mov	r0, r3
 801456c:	3714      	adds	r7, #20
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr
 8014576:	bf00      	nop
 8014578:	40016800 	.word	0x40016800

0801457c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8014584:	4b1a      	ldr	r3, [pc, #104]	; (80145f0 <HAL_LTDC_LineEventCallback+0x74>)
 8014586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014588:	4a1a      	ldr	r2, [pc, #104]	; (80145f4 <HAL_LTDC_LineEventCallback+0x78>)
 801458a:	8812      	ldrh	r2, [r2, #0]
 801458c:	4293      	cmp	r3, r2
 801458e:	bf0c      	ite	eq
 8014590:	2301      	moveq	r3, #1
 8014592:	2300      	movne	r3, #0
 8014594:	b2db      	uxtb	r3, r3
 8014596:	2b00      	cmp	r3, #0
 8014598:	d017      	beq.n	80145ca <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801459a:	4b17      	ldr	r3, [pc, #92]	; (80145f8 <HAL_LTDC_LineEventCallback+0x7c>)
 801459c:	881b      	ldrh	r3, [r3, #0]
 801459e:	4619      	mov	r1, r3
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f7f1 f897 	bl	80056d4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80145a6:	f7fa fd63 	bl	800f070 <_ZN8touchgfx3HAL11getInstanceEv>
 80145aa:	4603      	mov	r3, r0
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7ff fe32 	bl	8014216 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80145b2:	f7fe fce5 	bl	8012f80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80145b6:	f7fa fd5b 	bl	800f070 <_ZN8touchgfx3HAL11getInstanceEv>
 80145ba:	4603      	mov	r3, r0
 80145bc:	4618      	mov	r0, r3
 80145be:	f001 fb73 	bl	8015ca8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80145c2:	2000      	movs	r0, #0
 80145c4:	f7fe f9e6 	bl	8012994 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80145c8:	e00e      	b.n	80145e8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80145ca:	4b0a      	ldr	r3, [pc, #40]	; (80145f4 <HAL_LTDC_LineEventCallback+0x78>)
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	4619      	mov	r1, r3
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f7f1 f87f 	bl	80056d4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80145d6:	2000      	movs	r0, #0
 80145d8:	f7fe f9e7 	bl	80129aa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80145dc:	f7fa fd48 	bl	800f070 <_ZN8touchgfx3HAL11getInstanceEv>
 80145e0:	4603      	mov	r3, r0
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7ff fdf9 	bl	80141da <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80145e8:	bf00      	nop
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	40016800 	.word	0x40016800
 80145f4:	2000bc68 	.word	0x2000bc68
 80145f8:	2000bc6a 	.word	0x2000bc6a

080145fc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80145fc:	8880      	ldrh	r0, [r0, #4]
 80145fe:	4770      	bx	lr

08014600 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014600:	2300      	movs	r3, #0
 8014602:	8083      	strh	r3, [r0, #4]
 8014604:	4770      	bx	lr
	...

08014608 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801460a:	6803      	ldr	r3, [r0, #0]
 801460c:	460e      	mov	r6, r1
 801460e:	2100      	movs	r1, #0
 8014610:	4605      	mov	r5, r0
 8014612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014614:	4798      	blx	r3
 8014616:	4604      	mov	r4, r0
 8014618:	682b      	ldr	r3, [r5, #0]
 801461a:	4628      	mov	r0, r5
 801461c:	1b34      	subs	r4, r6, r4
 801461e:	6a1b      	ldr	r3, [r3, #32]
 8014620:	b2a4      	uxth	r4, r4
 8014622:	4798      	blx	r3
 8014624:	88ab      	ldrh	r3, [r5, #4]
 8014626:	fbb4 f4f0 	udiv	r4, r4, r0
 801462a:	42a3      	cmp	r3, r4
 801462c:	d805      	bhi.n	801463a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801462e:	4b0e      	ldr	r3, [pc, #56]	; (8014668 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014630:	211e      	movs	r1, #30
 8014632:	4a0e      	ldr	r2, [pc, #56]	; (801466c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014634:	480e      	ldr	r0, [pc, #56]	; (8014670 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014636:	f00f fe07 	bl	8024248 <__assert_func>
 801463a:	682b      	ldr	r3, [r5, #0]
 801463c:	2100      	movs	r1, #0
 801463e:	4628      	mov	r0, r5
 8014640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014642:	4798      	blx	r3
 8014644:	682b      	ldr	r3, [r5, #0]
 8014646:	4607      	mov	r7, r0
 8014648:	4628      	mov	r0, r5
 801464a:	6a1b      	ldr	r3, [r3, #32]
 801464c:	4798      	blx	r3
 801464e:	1bf3      	subs	r3, r6, r7
 8014650:	b29b      	uxth	r3, r3
 8014652:	fbb3 f2f0 	udiv	r2, r3, r0
 8014656:	fb02 3010 	mls	r0, r2, r0, r3
 801465a:	b118      	cbz	r0, 8014664 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801465c:	4b05      	ldr	r3, [pc, #20]	; (8014674 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801465e:	211f      	movs	r1, #31
 8014660:	4a02      	ldr	r2, [pc, #8]	; (801466c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014662:	e7e7      	b.n	8014634 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014664:	4620      	mov	r0, r4
 8014666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014668:	08026368 	.word	0x08026368
 801466c:	080264d6 	.word	0x080264d6
 8014670:	0802637d 	.word	0x0802637d
 8014674:	080263ab 	.word	0x080263ab

08014678 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014678:	b538      	push	{r3, r4, r5, lr}
 801467a:	6803      	ldr	r3, [r0, #0]
 801467c:	460d      	mov	r5, r1
 801467e:	4604      	mov	r4, r0
 8014680:	6a1b      	ldr	r3, [r3, #32]
 8014682:	4798      	blx	r3
 8014684:	4285      	cmp	r5, r0
 8014686:	d905      	bls.n	8014694 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014688:	4b0c      	ldr	r3, [pc, #48]	; (80146bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801468a:	212f      	movs	r1, #47	; 0x2f
 801468c:	4a0c      	ldr	r2, [pc, #48]	; (80146c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801468e:	480d      	ldr	r0, [pc, #52]	; (80146c4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014690:	f00f fdda 	bl	8024248 <__assert_func>
 8014694:	6823      	ldr	r3, [r4, #0]
 8014696:	4620      	mov	r0, r4
 8014698:	88a5      	ldrh	r5, [r4, #4]
 801469a:	69db      	ldr	r3, [r3, #28]
 801469c:	4798      	blx	r3
 801469e:	4285      	cmp	r5, r0
 80146a0:	d303      	bcc.n	80146aa <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80146a2:	4b09      	ldr	r3, [pc, #36]	; (80146c8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80146a4:	2130      	movs	r1, #48	; 0x30
 80146a6:	4a06      	ldr	r2, [pc, #24]	; (80146c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80146a8:	e7f1      	b.n	801468e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80146aa:	6823      	ldr	r3, [r4, #0]
 80146ac:	4620      	mov	r0, r4
 80146ae:	88a1      	ldrh	r1, [r4, #4]
 80146b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b2:	4798      	blx	r3
 80146b4:	88a3      	ldrh	r3, [r4, #4]
 80146b6:	3301      	adds	r3, #1
 80146b8:	80a3      	strh	r3, [r4, #4]
 80146ba:	bd38      	pop	{r3, r4, r5, pc}
 80146bc:	08026425 	.word	0x08026425
 80146c0:	08026519 	.word	0x08026519
 80146c4:	0802637d 	.word	0x0802637d
 80146c8:	0802643c 	.word	0x0802643c

080146cc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80146cc:	b570      	push	{r4, r5, r6, lr}
 80146ce:	6803      	ldr	r3, [r0, #0]
 80146d0:	4616      	mov	r6, r2
 80146d2:	4604      	mov	r4, r0
 80146d4:	460d      	mov	r5, r1
 80146d6:	6a1b      	ldr	r3, [r3, #32]
 80146d8:	4798      	blx	r3
 80146da:	4286      	cmp	r6, r0
 80146dc:	d905      	bls.n	80146ea <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80146de:	4b06      	ldr	r3, [pc, #24]	; (80146f8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80146e0:	2139      	movs	r1, #57	; 0x39
 80146e2:	4a06      	ldr	r2, [pc, #24]	; (80146fc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80146e4:	4806      	ldr	r0, [pc, #24]	; (8014700 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80146e6:	f00f fdaf 	bl	8024248 <__assert_func>
 80146ea:	6823      	ldr	r3, [r4, #0]
 80146ec:	4629      	mov	r1, r5
 80146ee:	4620      	mov	r0, r4
 80146f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146f6:	4718      	bx	r3
 80146f8:	08026425 	.word	0x08026425
 80146fc:	0802648c 	.word	0x0802648c
 8014700:	0802637d 	.word	0x0802637d

08014704 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014704:	4770      	bx	lr
	...

08014708 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014708:	4a02      	ldr	r2, [pc, #8]	; (8014714 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801470a:	6002      	str	r2, [r0, #0]
 801470c:	2200      	movs	r2, #0
 801470e:	8082      	strh	r2, [r0, #4]
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop
 8014714:	08026460 	.word	0x08026460

08014718 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014718:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 801471c:	4770      	bx	lr

0801471e <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801471e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014722:	4770      	bx	lr

08014724 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014724:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8014728:	4770      	bx	lr

0801472a <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801472a:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801472e:	4770      	bx	lr

08014730 <_ZN8touchgfx11BoxProgressD1Ev>:
 8014730:	4b03      	ldr	r3, [pc, #12]	; (8014740 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8014732:	b510      	push	{r4, lr}
 8014734:	4604      	mov	r4, r0
 8014736:	6003      	str	r3, [r0, #0]
 8014738:	f000 f8b6 	bl	80148a8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801473c:	4620      	mov	r0, r4
 801473e:	bd10      	pop	{r4, pc}
 8014740:	08026560 	.word	0x08026560

08014744 <_ZN8touchgfx11BoxProgressD0Ev>:
 8014744:	b510      	push	{r4, lr}
 8014746:	4604      	mov	r4, r0
 8014748:	f7ff fff2 	bl	8014730 <_ZN8touchgfx11BoxProgressD1Ev>
 801474c:	21c0      	movs	r1, #192	; 0xc0
 801474e:	4620      	mov	r0, r4
 8014750:	f00f fd4f 	bl	80241f2 <_ZdlPvj>
 8014754:	4620      	mov	r0, r4
 8014756:	bd10      	pop	{r4, pc}

08014758 <_ZN8touchgfx11BoxProgressC1Ev>:
 8014758:	b510      	push	{r4, lr}
 801475a:	4604      	mov	r4, r0
 801475c:	f000 f8b8 	bl	80148d0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014760:	2201      	movs	r2, #1
 8014762:	4b16      	ldr	r3, [pc, #88]	; (80147bc <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8014764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014768:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801476c:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8014770:	4a13      	ldr	r2, [pc, #76]	; (80147c0 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014772:	6023      	str	r3, [r4, #0]
 8014774:	2300      	movs	r3, #0
 8014776:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801477a:	22ff      	movs	r2, #255	; 0xff
 801477c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8014780:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8014784:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8014788:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 801478c:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8014790:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8014794:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8014798:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801479c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80147a0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80147a4:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 80147a8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80147ac:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80147b0:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80147b4:	f000 fbb8 	bl	8014f28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80147b8:	4620      	mov	r0, r4
 80147ba:	bd10      	pop	{r4, pc}
 80147bc:	08026560 	.word	0x08026560
 80147c0:	08027818 	.word	0x08027818

080147c4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80147c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80147c8:	4617      	mov	r7, r2
 80147ca:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80147ce:	2200      	movs	r2, #0
 80147d0:	4604      	mov	r4, r0
 80147d2:	460e      	mov	r6, r1
 80147d4:	4698      	mov	r8, r3
 80147d6:	4611      	mov	r1, r2
 80147d8:	9500      	str	r5, [sp, #0]
 80147da:	3090      	adds	r0, #144	; 0x90
 80147dc:	f7fb f918 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 80147e0:	4643      	mov	r3, r8
 80147e2:	463a      	mov	r2, r7
 80147e4:	4631      	mov	r1, r6
 80147e6:	4620      	mov	r0, r4
 80147e8:	9508      	str	r5, [sp, #32]
 80147ea:	b002      	add	sp, #8
 80147ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147f0:	f000 b9fa 	b.w	8014be8 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080147f4 <_ZN8touchgfx11BoxProgress8setValueEi>:
 80147f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147f6:	4604      	mov	r4, r0
 80147f8:	f000 fa40 	bl	8014c7c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80147fc:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8014800:	4628      	mov	r0, r5
 8014802:	f004 f95b 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
 8014806:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801480a:	2b03      	cmp	r3, #3
 801480c:	d814      	bhi.n	8014838 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801480e:	e8df f003 	tbb	[pc, r3]
 8014812:	0202      	.short	0x0202
 8014814:	1010      	.short	0x1010
 8014816:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801481a:	4620      	mov	r0, r4
 801481c:	f000 fa88 	bl	8014d30 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014820:	b200      	sxth	r0, r0
 8014822:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014826:	2b03      	cmp	r3, #3
 8014828:	d81a      	bhi.n	8014860 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801482a:	e8df f003 	tbb	[pc, r3]
 801482e:	0e07      	.short	0x0e07
 8014830:	231f      	.short	0x231f
 8014832:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8014836:	e7f0      	b.n	801481a <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014838:	2000      	movs	r0, #0
 801483a:	e7f2      	b.n	8014822 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 801483c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014840:	9300      	str	r3, [sp, #0]
 8014842:	4603      	mov	r3, r0
 8014844:	2200      	movs	r2, #0
 8014846:	2100      	movs	r1, #0
 8014848:	e007      	b.n	801485a <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 801484a:	8921      	ldrh	r1, [r4, #8]
 801484c:	2200      	movs	r2, #0
 801484e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014852:	1a09      	subs	r1, r1, r0
 8014854:	9300      	str	r3, [sp, #0]
 8014856:	4603      	mov	r3, r0
 8014858:	b209      	sxth	r1, r1
 801485a:	4628      	mov	r0, r5
 801485c:	f7fb f8d8 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014860:	4628      	mov	r0, r5
 8014862:	b003      	add	sp, #12
 8014864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014868:	f004 b928 	b.w	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
 801486c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014870:	9000      	str	r0, [sp, #0]
 8014872:	e7e7      	b.n	8014844 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8014874:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014878:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801487c:	1a12      	subs	r2, r2, r0
 801487e:	9000      	str	r0, [sp, #0]
 8014880:	b212      	sxth	r2, r2
 8014882:	e7e0      	b.n	8014846 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08014884 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8014884:	b570      	push	{r4, r5, r6, lr}
 8014886:	6803      	ldr	r3, [r0, #0]
 8014888:	4604      	mov	r4, r0
 801488a:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801488e:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014892:	4798      	blx	r3
 8014894:	4601      	mov	r1, r0
 8014896:	462b      	mov	r3, r5
 8014898:	4620      	mov	r0, r4
 801489a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801489e:	4718      	bx	r3

080148a0 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80148a0:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 80148a4:	4770      	bx	lr
	...

080148a8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 80148a8:	4b03      	ldr	r3, [pc, #12]	; (80148b8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 80148aa:	b510      	push	{r4, lr}
 80148ac:	4604      	mov	r4, r0
 80148ae:	6003      	str	r3, [r0, #0]
 80148b0:	f000 f999 	bl	8014be6 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80148b4:	4620      	mov	r0, r4
 80148b6:	bd10      	pop	{r4, pc}
 80148b8:	08026638 	.word	0x08026638

080148bc <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80148bc:	b510      	push	{r4, lr}
 80148be:	4604      	mov	r4, r0
 80148c0:	f7ff fff2 	bl	80148a8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80148c4:	2190      	movs	r1, #144	; 0x90
 80148c6:	4620      	mov	r0, r4
 80148c8:	f00f fc93 	bl	80241f2 <_ZdlPvj>
 80148cc:	4620      	mov	r0, r4
 80148ce:	bd10      	pop	{r4, pc}

080148d0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80148d0:	b510      	push	{r4, lr}
 80148d2:	4604      	mov	r4, r0
 80148d4:	f000 fa4c 	bl	8014d70 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80148d8:	4b03      	ldr	r3, [pc, #12]	; (80148e8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80148da:	2100      	movs	r1, #0
 80148dc:	4620      	mov	r0, r4
 80148de:	6023      	str	r3, [r4, #0]
 80148e0:	f7ff ffd0 	bl	8014884 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80148e4:	4620      	mov	r0, r4
 80148e6:	bd10      	pop	{r4, pc}
 80148e8:	08026638 	.word	0x08026638

080148ec <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 80148ec:	b570      	push	{r4, r5, r6, lr}
 80148ee:	6803      	ldr	r3, [r0, #0]
 80148f0:	4604      	mov	r4, r0
 80148f2:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 80148f6:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80148fa:	4798      	blx	r3
 80148fc:	4601      	mov	r1, r0
 80148fe:	462b      	mov	r3, r5
 8014900:	4620      	mov	r0, r4
 8014902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014906:	4718      	bx	r3

08014908 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8014908:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 801490c:	4770      	bx	lr

0801490e <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801490e:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8014912:	4770      	bx	lr

08014914 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8014914:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8014918:	4770      	bx	lr

0801491a <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 801491a:	b507      	push	{r0, r1, r2, lr}
 801491c:	ab02      	add	r3, sp, #8
 801491e:	30bc      	adds	r0, #188	; 0xbc
 8014920:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8014924:	4619      	mov	r1, r3
 8014926:	f002 f9a9 	bl	8016c7c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801492a:	b003      	add	sp, #12
 801492c:	f85d fb04 	ldr.w	pc, [sp], #4

08014930 <_ZN8touchgfx13ImageProgressD1Ev>:
 8014930:	4b03      	ldr	r3, [pc, #12]	; (8014940 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8014932:	b510      	push	{r4, lr}
 8014934:	4604      	mov	r4, r0
 8014936:	6003      	str	r3, [r0, #0]
 8014938:	f7ff ffb6 	bl	80148a8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801493c:	4620      	mov	r0, r4
 801493e:	bd10      	pop	{r4, pc}
 8014940:	08026764 	.word	0x08026764

08014944 <_ZN8touchgfx13ImageProgressD0Ev>:
 8014944:	b510      	push	{r4, lr}
 8014946:	4604      	mov	r4, r0
 8014948:	f7ff fff2 	bl	8014930 <_ZN8touchgfx13ImageProgressD1Ev>
 801494c:	21f0      	movs	r1, #240	; 0xf0
 801494e:	4620      	mov	r0, r4
 8014950:	f00f fc4f 	bl	80241f2 <_ZdlPvj>
 8014954:	4620      	mov	r0, r4
 8014956:	bd10      	pop	{r4, pc}

08014958 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8014958:	b508      	push	{r3, lr}
 801495a:	4b06      	ldr	r3, [pc, #24]	; (8014974 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	b92b      	cbnz	r3, 801496c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8014960:	4b05      	ldr	r3, [pc, #20]	; (8014978 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8014962:	21b8      	movs	r1, #184	; 0xb8
 8014964:	4a05      	ldr	r2, [pc, #20]	; (801497c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8014966:	4806      	ldr	r0, [pc, #24]	; (8014980 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8014968:	f00f fc6e 	bl	8024248 <__assert_func>
 801496c:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8014970:	bd08      	pop	{r3, pc}
 8014972:	bf00      	nop
 8014974:	2000bd40 	.word	0x2000bd40
 8014978:	080266f8 	.word	0x080266f8
 801497c:	0802683c 	.word	0x0802683c
 8014980:	08026734 	.word	0x08026734

08014984 <_ZN8touchgfx13ImageProgressC1Ev>:
 8014984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014988:	4604      	mov	r4, r0
 801498a:	f7ff ffa1 	bl	80148d0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801498e:	4b31      	ldr	r3, [pc, #196]	; (8014a54 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8014990:	a902      	add	r1, sp, #8
 8014992:	4626      	mov	r6, r4
 8014994:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8014998:	2500      	movs	r5, #0
 801499a:	4a2f      	ldr	r2, [pc, #188]	; (8014a58 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 801499c:	f846 3b90 	str.w	r3, [r6], #144
 80149a0:	2701      	movs	r7, #1
 80149a2:	4b2e      	ldr	r3, [pc, #184]	; (8014a5c <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 80149a4:	4640      	mov	r0, r8
 80149a6:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 80149aa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80149ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149b2:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 80149b6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80149ba:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 80149be:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 80149c2:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80149c6:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80149ca:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 80149ce:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 80149d2:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80149d6:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80149da:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80149de:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 80149e2:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 80149e6:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 80149ea:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 80149ee:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 80149f2:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 80149f6:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 80149fa:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 80149fe:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8014a02:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8014a06:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8014a0a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8014a0e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8014a12:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8014a16:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8014a1a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8014a1e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8014a22:	f002 fb6f 	bl	8017104 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014a26:	4b0e      	ldr	r3, [pc, #56]	; (8014a60 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8014a28:	4641      	mov	r1, r8
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8014a30:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8014a34:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8014a38:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8014a3c:	f000 fa74 	bl	8014f28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014a40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a44:	4631      	mov	r1, r6
 8014a46:	f000 fa6f 	bl	8014f28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	b002      	add	sp, #8
 8014a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a52:	bf00      	nop
 8014a54:	08026764 	.word	0x08026764
 8014a58:	08027980 	.word	0x08027980
 8014a5c:	08026ae0 	.word	0x08026ae0
 8014a60:	08027880 	.word	0x08027880

08014a64 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8014a64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014a68:	4617      	mov	r7, r2
 8014a6a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	4604      	mov	r4, r0
 8014a72:	460e      	mov	r6, r1
 8014a74:	4698      	mov	r8, r3
 8014a76:	4611      	mov	r1, r2
 8014a78:	9500      	str	r5, [sp, #0]
 8014a7a:	3090      	adds	r0, #144	; 0x90
 8014a7c:	f7fa ffc8 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a80:	4643      	mov	r3, r8
 8014a82:	463a      	mov	r2, r7
 8014a84:	4631      	mov	r1, r6
 8014a86:	4620      	mov	r0, r4
 8014a88:	9508      	str	r5, [sp, #32]
 8014a8a:	b002      	add	sp, #8
 8014a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a90:	f000 b8aa 	b.w	8014be8 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014a94 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8014a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a96:	4604      	mov	r4, r0
 8014a98:	f000 f8f0 	bl	8014c7c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014a9c:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8014aa0:	4638      	mov	r0, r7
 8014aa2:	f004 f80b 	bl	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
 8014aa6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014aaa:	4620      	mov	r0, r4
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	bf94      	ite	ls
 8014ab0:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8014ab4:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8014ab8:	f000 f93a 	bl	8014d30 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014abc:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8014ac0:	4606      	mov	r6, r0
 8014ac2:	b205      	sxth	r5, r0
 8014ac4:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014ac8:	2a00      	cmp	r2, #0
 8014aca:	d056      	beq.n	8014b7a <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8014acc:	2b03      	cmp	r3, #3
 8014ace:	d82c      	bhi.n	8014b2a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8014ad0:	e8df f003 	tbb	[pc, r3]
 8014ad4:	3d311202 	.word	0x3d311202
 8014ad8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014adc:	2200      	movs	r2, #0
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	462b      	mov	r3, r5
 8014ae4:	4638      	mov	r0, r7
 8014ae6:	f7fa ff93 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014aea:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	462b      	mov	r3, r5
 8014af2:	2200      	movs	r2, #0
 8014af4:	4611      	mov	r1, r2
 8014af6:	e014      	b.n	8014b22 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014af8:	8921      	ldrh	r1, [r4, #8]
 8014afa:	2200      	movs	r2, #0
 8014afc:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014b00:	1a09      	subs	r1, r1, r0
 8014b02:	4638      	mov	r0, r7
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	462b      	mov	r3, r5
 8014b08:	b209      	sxth	r1, r1
 8014b0a:	f7fa ff81 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b0e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8014b12:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014b16:	4249      	negs	r1, r1
 8014b18:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8014b1c:	9200      	str	r2, [sp, #0]
 8014b1e:	b209      	sxth	r1, r1
 8014b20:	2200      	movs	r2, #0
 8014b22:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8014b26:	f7fa ff73 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b2a:	4638      	mov	r0, r7
 8014b2c:	b003      	add	sp, #12
 8014b2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b32:	f003 bfc3 	b.w	8018abc <_ZNK8touchgfx8Drawable10invalidateEv>
 8014b36:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	9500      	str	r5, [sp, #0]
 8014b3e:	2100      	movs	r1, #0
 8014b40:	4638      	mov	r0, r7
 8014b42:	f7fa ff65 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b46:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014b4a:	9500      	str	r5, [sp, #0]
 8014b4c:	e7d1      	b.n	8014af2 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8014b4e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014b52:	2100      	movs	r1, #0
 8014b54:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014b58:	1a12      	subs	r2, r2, r0
 8014b5a:	9500      	str	r5, [sp, #0]
 8014b5c:	4638      	mov	r0, r7
 8014b5e:	b212      	sxth	r2, r2
 8014b60:	f7fa ff56 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b64:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8014b68:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8014b6c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014b70:	4252      	negs	r2, r2
 8014b72:	9100      	str	r1, [sp, #0]
 8014b74:	b212      	sxth	r2, r2
 8014b76:	2100      	movs	r1, #0
 8014b78:	e7d3      	b.n	8014b22 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014b7a:	2b03      	cmp	r3, #3
 8014b7c:	d8d5      	bhi.n	8014b2a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8014b7e:	e8df f003 	tbb	[pc, r3]
 8014b82:	1102      	.short	0x1102
 8014b84:	2a1b      	.short	0x2a1b
 8014b86:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	4638      	mov	r0, r7
 8014b8e:	4611      	mov	r1, r2
 8014b90:	9300      	str	r3, [sp, #0]
 8014b92:	462b      	mov	r3, r5
 8014b94:	f7fa ff3c 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b98:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014b9c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014ba0:	1af1      	subs	r1, r6, r3
 8014ba2:	e7bb      	b.n	8014b1c <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8014ba4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014ba8:	2200      	movs	r2, #0
 8014baa:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014bae:	1a09      	subs	r1, r1, r0
 8014bb0:	9300      	str	r3, [sp, #0]
 8014bb2:	462b      	mov	r3, r5
 8014bb4:	b209      	sxth	r1, r1
 8014bb6:	e795      	b.n	8014ae4 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014bbe:	4638      	mov	r0, r7
 8014bc0:	9500      	str	r5, [sp, #0]
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	f7fa ff24 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014bc8:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8014bcc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014bd0:	1a32      	subs	r2, r6, r0
 8014bd2:	9000      	str	r0, [sp, #0]
 8014bd4:	e7ce      	b.n	8014b74 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8014bd6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014bda:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014bde:	1a12      	subs	r2, r2, r0
 8014be0:	9500      	str	r5, [sp, #0]
 8014be2:	b212      	sxth	r2, r2
 8014be4:	e7ab      	b.n	8014b3e <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08014be6 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8014be6:	4770      	bx	lr

08014be8 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8014be8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014bec:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	460e      	mov	r6, r1
 8014bf4:	4698      	mov	r8, r3
 8014bf6:	9700      	str	r7, [sp, #0]
 8014bf8:	3058      	adds	r0, #88	; 0x58
 8014bfa:	4615      	mov	r5, r2
 8014bfc:	f7fa ff08 	bl	800fa10 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014c00:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014c04:	eb06 0308 	add.w	r3, r6, r8
 8014c08:	429a      	cmp	r2, r3
 8014c0a:	eb05 0207 	add.w	r2, r5, r7
 8014c0e:	bfb8      	it	lt
 8014c10:	8123      	strhlt	r3, [r4, #8]
 8014c12:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014c16:	4293      	cmp	r3, r2
 8014c18:	bfb8      	it	lt
 8014c1a:	8162      	strhlt	r2, [r4, #10]
 8014c1c:	b002      	add	sp, #8
 8014c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c22 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8014c22:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8014c26:	4770      	bx	lr

08014c28 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8014c28:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8014c2c:	4770      	bx	lr

08014c2e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8014c2e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8014c32:	4770      	bx	lr

08014c34 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8014c34:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8014c38:	4770      	bx	lr

08014c3a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8014c3a:	b510      	push	{r4, lr}
 8014c3c:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8014c40:	800c      	strh	r4, [r1, #0]
 8014c42:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8014c46:	8011      	strh	r1, [r2, #0]
 8014c48:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8014c4c:	801a      	strh	r2, [r3, #0]
 8014c4e:	9b02      	ldr	r3, [sp, #8]
 8014c50:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8014c54:	801a      	strh	r2, [r3, #0]
 8014c56:	bd10      	pop	{r4, pc}

08014c58 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8014c58:	b510      	push	{r4, lr}
 8014c5a:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8014c5e:	800c      	strh	r4, [r1, #0]
 8014c60:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8014c64:	8011      	strh	r1, [r2, #0]
 8014c66:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8014c6a:	801a      	strh	r2, [r3, #0]
 8014c6c:	bd10      	pop	{r4, pc}

08014c6e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8014c6e:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8014c72:	800b      	strh	r3, [r1, #0]
 8014c74:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8014c78:	8013      	strh	r3, [r2, #0]
 8014c7a:	4770      	bx	lr

08014c7c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8014c7c:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8014c80:	4299      	cmp	r1, r3
 8014c82:	bfb8      	it	lt
 8014c84:	4619      	movlt	r1, r3
 8014c86:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8014c8a:	4299      	cmp	r1, r3
 8014c8c:	bfa8      	it	ge
 8014c8e:	4619      	movge	r1, r3
 8014c90:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8014c94:	4770      	bx	lr

08014c96 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8014c96:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8014c9a:	4770      	bx	lr

08014c9c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8014c9c:	b510      	push	{r4, lr}
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	2190      	movs	r1, #144	; 0x90
 8014ca2:	f00f faa6 	bl	80241f2 <_ZdlPvj>
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	bd10      	pop	{r4, pc}

08014caa <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8014caa:	b510      	push	{r4, lr}
 8014cac:	4604      	mov	r4, r0
 8014cae:	302c      	adds	r0, #44	; 0x2c
 8014cb0:	f002 fa28 	bl	8017104 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014cb4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014cb6:	8123      	strh	r3, [r4, #8]
 8014cb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014cba:	8163      	strh	r3, [r4, #10]
 8014cbc:	bd10      	pop	{r4, pc}
	...

08014cc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8014cc0:	4291      	cmp	r1, r2
 8014cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	460e      	mov	r6, r1
 8014cca:	4615      	mov	r5, r2
 8014ccc:	4698      	mov	r8, r3
 8014cce:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8014cd2:	db05      	blt.n	8014ce0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8014cd4:	4b12      	ldr	r3, [pc, #72]	; (8014d20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8014cd6:	214d      	movs	r1, #77	; 0x4d
 8014cd8:	4a12      	ldr	r2, [pc, #72]	; (8014d24 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8014cda:	4813      	ldr	r0, [pc, #76]	; (8014d28 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8014cdc:	f00f fab4 	bl	8024248 <__assert_func>
 8014ce0:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8014ce4:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8014ce8:	6803      	ldr	r3, [r0, #0]
 8014cea:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8014cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014cf2:	4798      	blx	r3
 8014cf4:	f1b8 0f00 	cmp.w	r8, #0
 8014cf8:	d10c      	bne.n	8014d14 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8014cfa:	1bad      	subs	r5, r5, r6
 8014cfc:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8014d00:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8014d04:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8014d08:	42bb      	cmp	r3, r7
 8014d0a:	d806      	bhi.n	8014d1a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8014d0c:	4b07      	ldr	r3, [pc, #28]	; (8014d2c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8014d0e:	215a      	movs	r1, #90	; 0x5a
 8014d10:	4a04      	ldr	r2, [pc, #16]	; (8014d24 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8014d12:	e7e2      	b.n	8014cda <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8014d14:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8014d18:	e7f2      	b.n	8014d00 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8014d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d1e:	bf00      	nop
 8014d20:	0802686f 	.word	0x0802686f
 8014d24:	080269ac 	.word	0x080269ac
 8014d28:	08026879 	.word	0x08026879
 8014d2c:	080268d0 	.word	0x080268d0

08014d30 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8014d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d32:	4604      	mov	r4, r0
 8014d34:	460d      	mov	r5, r1
 8014d36:	b1b9      	cbz	r1, 8014d68 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8014d38:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8014d3c:	ab01      	add	r3, sp, #4
 8014d3e:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8014d42:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8014d46:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8014d4a:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8014d4e:	1a12      	subs	r2, r2, r0
 8014d50:	1b89      	subs	r1, r1, r6
 8014d52:	1a38      	subs	r0, r7, r0
 8014d54:	f003 fff3 	bl	8018d3e <_ZN8touchgfx6muldivElllRl>
 8014d58:	4629      	mov	r1, r5
 8014d5a:	ab01      	add	r3, sp, #4
 8014d5c:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8014d60:	4430      	add	r0, r6
 8014d62:	f003 ffec 	bl	8018d3e <_ZN8touchgfx6muldivElllRl>
 8014d66:	b285      	uxth	r5, r0
 8014d68:	4628      	mov	r0, r5
 8014d6a:	b003      	add	sp, #12
 8014d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014d70 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8014d70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014d74:	4604      	mov	r4, r0
 8014d76:	2600      	movs	r6, #0
 8014d78:	f7fa fdfc 	bl	800f974 <_ZN8touchgfx8DrawableC1Ev>
 8014d7c:	4b1b      	ldr	r3, [pc, #108]	; (8014dec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8014d7e:	4625      	mov	r5, r4
 8014d80:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8014d84:	af02      	add	r7, sp, #8
 8014d86:	62a6      	str	r6, [r4, #40]	; 0x28
 8014d88:	f845 3b2c 	str.w	r3, [r5], #44
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8014d92:	f7fa fdef 	bl	800f974 <_ZN8touchgfx8DrawableC1Ev>
 8014d96:	4b16      	ldr	r3, [pc, #88]	; (8014df0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8014d98:	4639      	mov	r1, r7
 8014d9a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8014d9e:	4628      	mov	r0, r5
 8014da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014da2:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8014da6:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8014daa:	f002 f9ab 	bl	8017104 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014dae:	4638      	mov	r0, r7
 8014db0:	f7fa fde0 	bl	800f974 <_ZN8touchgfx8DrawableC1Ev>
 8014db4:	4b0f      	ldr	r3, [pc, #60]	; (8014df4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8014db6:	4632      	mov	r2, r6
 8014db8:	4631      	mov	r1, r6
 8014dba:	65a3      	str	r3, [r4, #88]	; 0x58
 8014dbc:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8014dc6:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8014dca:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8014dce:	f7fa fe6a 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
 8014dd2:	4629      	mov	r1, r5
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	f000 f8a7 	bl	8014f28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014dda:	4620      	mov	r0, r4
 8014ddc:	4639      	mov	r1, r7
 8014dde:	f000 f8a3 	bl	8014f28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014de2:	4620      	mov	r0, r4
 8014de4:	b002      	add	sp, #8
 8014de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dea:	bf00      	nop
 8014dec:	080268f4 	.word	0x080268f4
 8014df0:	08027980 	.word	0x08027980
 8014df4:	08026ae0 	.word	0x08026ae0

08014df8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014df8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	b12b      	cbz	r3, 8014e0a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014dfe:	b920      	cbnz	r0, 8014e0a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014e00:	1a5a      	subs	r2, r3, r1
 8014e02:	699b      	ldr	r3, [r3, #24]
 8014e04:	4250      	negs	r0, r2
 8014e06:	4150      	adcs	r0, r2
 8014e08:	e7f8      	b.n	8014dfc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014e0a:	4770      	bx	lr

08014e0c <_ZN8touchgfx9Container9removeAllEv>:
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014e10:	b123      	cbz	r3, 8014e1c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014e12:	6999      	ldr	r1, [r3, #24]
 8014e14:	6281      	str	r1, [r0, #40]	; 0x28
 8014e16:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014e1a:	e7f8      	b.n	8014e0e <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014e1c:	4770      	bx	lr

08014e1e <_ZN8touchgfx9Container6unlinkEv>:
 8014e1e:	2300      	movs	r3, #0
 8014e20:	6283      	str	r3, [r0, #40]	; 0x28
 8014e22:	4770      	bx	lr

08014e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e28:	461f      	mov	r7, r3
 8014e2a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014e2e:	460d      	mov	r5, r1
 8014e30:	4616      	mov	r6, r2
 8014e32:	b103      	cbz	r3, 8014e36 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014e34:	6038      	str	r0, [r7, #0]
 8014e36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e38:	b314      	cbz	r4, 8014e80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014e3a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014e3e:	b1eb      	cbz	r3, 8014e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014e44:	428d      	cmp	r5, r1
 8014e46:	db19      	blt.n	8014e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e48:	b289      	uxth	r1, r1
 8014e4a:	8923      	ldrh	r3, [r4, #8]
 8014e4c:	440b      	add	r3, r1
 8014e4e:	b21b      	sxth	r3, r3
 8014e50:	429d      	cmp	r5, r3
 8014e52:	da13      	bge.n	8014e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e54:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014e58:	4296      	cmp	r6, r2
 8014e5a:	db0f      	blt.n	8014e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e5c:	b292      	uxth	r2, r2
 8014e5e:	8963      	ldrh	r3, [r4, #10]
 8014e60:	4413      	add	r3, r2
 8014e62:	b21b      	sxth	r3, r3
 8014e64:	429e      	cmp	r6, r3
 8014e66:	da09      	bge.n	8014e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e68:	6823      	ldr	r3, [r4, #0]
 8014e6a:	1ab2      	subs	r2, r6, r2
 8014e6c:	1a69      	subs	r1, r5, r1
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8014e74:	b212      	sxth	r2, r2
 8014e76:	463b      	mov	r3, r7
 8014e78:	b209      	sxth	r1, r1
 8014e7a:	47c0      	blx	r8
 8014e7c:	69a4      	ldr	r4, [r4, #24]
 8014e7e:	e7db      	b.n	8014e38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e84 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014e84:	2200      	movs	r2, #0
 8014e86:	8002      	strh	r2, [r0, #0]
 8014e88:	8042      	strh	r2, [r0, #2]
 8014e8a:	8082      	strh	r2, [r0, #4]
 8014e8c:	80c2      	strh	r2, [r0, #6]
 8014e8e:	4770      	bx	lr

08014e90 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014e90:	b570      	push	{r4, r5, r6, lr}
 8014e92:	460d      	mov	r5, r1
 8014e94:	4616      	mov	r6, r2
 8014e96:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e98:	b13c      	cbz	r4, 8014eaa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014e9a:	6823      	ldr	r3, [r4, #0]
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	4632      	mov	r2, r6
 8014ea0:	4629      	mov	r1, r5
 8014ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ea4:	4798      	blx	r3
 8014ea6:	69a4      	ldr	r4, [r4, #24]
 8014ea8:	e7f6      	b.n	8014e98 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014eaa:	bd70      	pop	{r4, r5, r6, pc}

08014eac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014eac:	b538      	push	{r3, r4, r5, lr}
 8014eae:	460d      	mov	r5, r1
 8014eb0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014eb2:	b134      	cbz	r4, 8014ec2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014eb4:	682b      	ldr	r3, [r5, #0]
 8014eb6:	4621      	mov	r1, r4
 8014eb8:	4628      	mov	r0, r5
 8014eba:	689b      	ldr	r3, [r3, #8]
 8014ebc:	4798      	blx	r3
 8014ebe:	69a4      	ldr	r4, [r4, #24]
 8014ec0:	e7f7      	b.n	8014eb2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014ec2:	bd38      	pop	{r3, r4, r5, pc}

08014ec4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014ec4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014ec6:	b19b      	cbz	r3, 8014ef0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014ec8:	428b      	cmp	r3, r1
 8014eca:	d109      	bne.n	8014ee0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014ecc:	699a      	ldr	r2, [r3, #24]
 8014ece:	2100      	movs	r1, #0
 8014ed0:	6159      	str	r1, [r3, #20]
 8014ed2:	6282      	str	r2, [r0, #40]	; 0x28
 8014ed4:	b902      	cbnz	r2, 8014ed8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014ed6:	4770      	bx	lr
 8014ed8:	6199      	str	r1, [r3, #24]
 8014eda:	4770      	bx	lr
 8014edc:	4613      	mov	r3, r2
 8014ede:	b13a      	cbz	r2, 8014ef0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014ee0:	699a      	ldr	r2, [r3, #24]
 8014ee2:	428a      	cmp	r2, r1
 8014ee4:	d1fa      	bne.n	8014edc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014ee6:	698a      	ldr	r2, [r1, #24]
 8014ee8:	619a      	str	r2, [r3, #24]
 8014eea:	2300      	movs	r3, #0
 8014eec:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014ef0:	4770      	bx	lr

08014ef2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014ef2:	b410      	push	{r4}
 8014ef4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014ef6:	4604      	mov	r4, r0
 8014ef8:	b92b      	cbnz	r3, 8014f06 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014efa:	6803      	ldr	r3, [r0, #0]
 8014efc:	4611      	mov	r1, r2
 8014efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014f04:	4718      	bx	r3
 8014f06:	b941      	cbnz	r1, 8014f1a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014f08:	6193      	str	r3, [r2, #24]
 8014f0a:	6282      	str	r2, [r0, #40]	; 0x28
 8014f0c:	6154      	str	r4, [r2, #20]
 8014f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f12:	4770      	bx	lr
 8014f14:	4603      	mov	r3, r0
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d0f9      	beq.n	8014f0e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014f1a:	4299      	cmp	r1, r3
 8014f1c:	6998      	ldr	r0, [r3, #24]
 8014f1e:	d1f9      	bne.n	8014f14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014f20:	6190      	str	r0, [r2, #24]
 8014f22:	618a      	str	r2, [r1, #24]
 8014f24:	e7f2      	b.n	8014f0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08014f28 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014f28:	4288      	cmp	r0, r1
 8014f2a:	b508      	push	{r3, lr}
 8014f2c:	d105      	bne.n	8014f3a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014f2e:	4b11      	ldr	r3, [pc, #68]	; (8014f74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014f30:	2123      	movs	r1, #35	; 0x23
 8014f32:	4a11      	ldr	r2, [pc, #68]	; (8014f78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014f34:	4811      	ldr	r0, [pc, #68]	; (8014f7c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8014f36:	f00f f987 	bl	8024248 <__assert_func>
 8014f3a:	694b      	ldr	r3, [r1, #20]
 8014f3c:	b11b      	cbz	r3, 8014f46 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014f3e:	4b10      	ldr	r3, [pc, #64]	; (8014f80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014f40:	2124      	movs	r1, #36	; 0x24
 8014f42:	4a0d      	ldr	r2, [pc, #52]	; (8014f78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014f44:	e7f6      	b.n	8014f34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014f46:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8014f4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014f4c:	b913      	cbnz	r3, 8014f54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014f4e:	6281      	str	r1, [r0, #40]	; 0x28
 8014f50:	bd08      	pop	{r3, pc}
 8014f52:	4613      	mov	r3, r2
 8014f54:	699a      	ldr	r2, [r3, #24]
 8014f56:	b12a      	cbz	r2, 8014f64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8014f58:	428b      	cmp	r3, r1
 8014f5a:	d1fa      	bne.n	8014f52 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014f5c:	4b09      	ldr	r3, [pc, #36]	; (8014f84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014f5e:	2135      	movs	r1, #53	; 0x35
 8014f60:	4a05      	ldr	r2, [pc, #20]	; (8014f78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014f62:	e7e7      	b.n	8014f34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014f64:	428b      	cmp	r3, r1
 8014f66:	d103      	bne.n	8014f70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014f68:	4b06      	ldr	r3, [pc, #24]	; (8014f84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014f6a:	2138      	movs	r1, #56	; 0x38
 8014f6c:	4a02      	ldr	r2, [pc, #8]	; (8014f78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014f6e:	e7e1      	b.n	8014f34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014f70:	6199      	str	r1, [r3, #24]
 8014f72:	e7ed      	b.n	8014f50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014f74:	08026a0d 	.word	0x08026a0d
 8014f78:	08026b64 	.word	0x08026b64
 8014f7c:	08026a39 	.word	0x08026a39
 8014f80:	08026a6c 	.word	0x08026a6c
 8014f84:	08026aa2 	.word	0x08026aa2

08014f88 <_ZN8touchgfx4RectaNERKS0_>:
 8014f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f8c:	888b      	ldrh	r3, [r1, #4]
 8014f8e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014f92:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014f96:	444b      	add	r3, r9
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	fa0f f883 	sxth.w	r8, r3
 8014f9e:	45c2      	cmp	sl, r8
 8014fa0:	da30      	bge.n	8015004 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014fa2:	8882      	ldrh	r2, [r0, #4]
 8014fa4:	4452      	add	r2, sl
 8014fa6:	b292      	uxth	r2, r2
 8014fa8:	fa0f fe82 	sxth.w	lr, r2
 8014fac:	45f1      	cmp	r9, lr
 8014fae:	da29      	bge.n	8015004 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014fb0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014fb4:	88cc      	ldrh	r4, [r1, #6]
 8014fb6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014fba:	442c      	add	r4, r5
 8014fbc:	b224      	sxth	r4, r4
 8014fbe:	42a6      	cmp	r6, r4
 8014fc0:	da20      	bge.n	8015004 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014fc2:	88c7      	ldrh	r7, [r0, #6]
 8014fc4:	4437      	add	r7, r6
 8014fc6:	b2bf      	uxth	r7, r7
 8014fc8:	fa0f fc87 	sxth.w	ip, r7
 8014fcc:	4565      	cmp	r5, ip
 8014fce:	da19      	bge.n	8015004 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014fd0:	45ca      	cmp	sl, r9
 8014fd2:	4654      	mov	r4, sl
 8014fd4:	bfb8      	it	lt
 8014fd6:	464c      	movlt	r4, r9
 8014fd8:	42b5      	cmp	r5, r6
 8014fda:	bfb8      	it	lt
 8014fdc:	4635      	movlt	r5, r6
 8014fde:	45f0      	cmp	r8, lr
 8014fe0:	bfc8      	it	gt
 8014fe2:	4613      	movgt	r3, r2
 8014fe4:	1b1b      	subs	r3, r3, r4
 8014fe6:	8083      	strh	r3, [r0, #4]
 8014fe8:	88ca      	ldrh	r2, [r1, #6]
 8014fea:	884b      	ldrh	r3, [r1, #2]
 8014fec:	8004      	strh	r4, [r0, #0]
 8014fee:	4413      	add	r3, r2
 8014ff0:	8045      	strh	r5, [r0, #2]
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	b21a      	sxth	r2, r3
 8014ff6:	4594      	cmp	ip, r2
 8014ff8:	bfb8      	it	lt
 8014ffa:	463b      	movlt	r3, r7
 8014ffc:	1b5b      	subs	r3, r3, r5
 8014ffe:	80c3      	strh	r3, [r0, #6]
 8015000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015004:	2300      	movs	r3, #0
 8015006:	8003      	strh	r3, [r0, #0]
 8015008:	8043      	strh	r3, [r0, #2]
 801500a:	8083      	strh	r3, [r0, #4]
 801500c:	80c3      	strh	r3, [r0, #6]
 801500e:	e7f7      	b.n	8015000 <_ZN8touchgfx4RectaNERKS0_+0x78>

08015010 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015010:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015014:	b12b      	cbz	r3, 8015022 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8015016:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801501a:	fab0 f080 	clz	r0, r0
 801501e:	0940      	lsrs	r0, r0, #5
 8015020:	4770      	bx	lr
 8015022:	2001      	movs	r0, #1
 8015024:	4770      	bx	lr

08015026 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801502a:	2300      	movs	r3, #0
 801502c:	4604      	mov	r4, r0
 801502e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015030:	8003      	strh	r3, [r0, #0]
 8015032:	8043      	strh	r3, [r0, #2]
 8015034:	8083      	strh	r3, [r0, #4]
 8015036:	80c3      	strh	r3, [r0, #6]
 8015038:	2d00      	cmp	r5, #0
 801503a:	d040      	beq.n	80150be <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801503c:	1d28      	adds	r0, r5, #4
 801503e:	f7ff ffe7 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015042:	b988      	cbnz	r0, 8015068 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015044:	4620      	mov	r0, r4
 8015046:	f7ff ffe3 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 801504a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801504e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015052:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015056:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801505a:	b138      	cbz	r0, 801506c <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801505c:	8022      	strh	r2, [r4, #0]
 801505e:	8063      	strh	r3, [r4, #2]
 8015060:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015064:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015068:	69ad      	ldr	r5, [r5, #24]
 801506a:	e7e5      	b.n	8015038 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801506c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015070:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015074:	4290      	cmp	r0, r2
 8015076:	4607      	mov	r7, r0
 8015078:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801507c:	460e      	mov	r6, r1
 801507e:	bfa8      	it	ge
 8015080:	4617      	movge	r7, r2
 8015082:	4299      	cmp	r1, r3
 8015084:	4472      	add	r2, lr
 8015086:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801508a:	bfa8      	it	ge
 801508c:	461e      	movge	r6, r3
 801508e:	4440      	add	r0, r8
 8015090:	4471      	add	r1, lr
 8015092:	4463      	add	r3, ip
 8015094:	b200      	sxth	r0, r0
 8015096:	8027      	strh	r7, [r4, #0]
 8015098:	b212      	sxth	r2, r2
 801509a:	8066      	strh	r6, [r4, #2]
 801509c:	b209      	sxth	r1, r1
 801509e:	b21b      	sxth	r3, r3
 80150a0:	4290      	cmp	r0, r2
 80150a2:	bfac      	ite	ge
 80150a4:	ebc7 0200 	rsbge	r2, r7, r0
 80150a8:	ebc7 0202 	rsblt	r2, r7, r2
 80150ac:	4299      	cmp	r1, r3
 80150ae:	bfac      	ite	ge
 80150b0:	ebc6 0301 	rsbge	r3, r6, r1
 80150b4:	ebc6 0303 	rsblt	r3, r6, r3
 80150b8:	80a2      	strh	r2, [r4, #4]
 80150ba:	80e3      	strh	r3, [r4, #6]
 80150bc:	e7d4      	b.n	8015068 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80150be:	4620      	mov	r0, r4
 80150c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080150c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80150c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80150c8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80150cc:	b383      	cbz	r3, 8015130 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80150ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80150d0:	b374      	cbz	r4, 8015130 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80150d2:	f9b1 5000 	ldrsh.w	r5, [r1]
 80150d6:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80150da:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80150de:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80150e2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80150e6:	b303      	cbz	r3, 801512a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80150e8:	4668      	mov	r0, sp
 80150ea:	1d21      	adds	r1, r4, #4
 80150ec:	f8ad 5000 	strh.w	r5, [sp]
 80150f0:	f8ad 6002 	strh.w	r6, [sp, #2]
 80150f4:	f8ad 7004 	strh.w	r7, [sp, #4]
 80150f8:	f8ad 8006 	strh.w	r8, [sp, #6]
 80150fc:	f7ff ff44 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 8015100:	4668      	mov	r0, sp
 8015102:	f7ff ff85 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015106:	b980      	cbnz	r0, 801512a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015108:	f8bd 3000 	ldrh.w	r3, [sp]
 801510c:	4669      	mov	r1, sp
 801510e:	88a2      	ldrh	r2, [r4, #4]
 8015110:	4620      	mov	r0, r4
 8015112:	1a9b      	subs	r3, r3, r2
 8015114:	88e2      	ldrh	r2, [r4, #6]
 8015116:	f8ad 3000 	strh.w	r3, [sp]
 801511a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801511e:	1a9b      	subs	r3, r3, r2
 8015120:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015124:	6823      	ldr	r3, [r4, #0]
 8015126:	689b      	ldr	r3, [r3, #8]
 8015128:	4798      	blx	r3
 801512a:	69a4      	ldr	r4, [r4, #24]
 801512c:	2c00      	cmp	r4, #0
 801512e:	d1d8      	bne.n	80150e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015130:	b002      	add	sp, #8
 8015132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015136 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015138:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801513c:	460d      	mov	r5, r1
 801513e:	4616      	mov	r6, r2
 8015140:	b323      	cbz	r3, 801518c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015142:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015144:	b314      	cbz	r4, 801518c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015146:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801514a:	b1eb      	cbz	r3, 8015188 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801514c:	6828      	ldr	r0, [r5, #0]
 801514e:	466b      	mov	r3, sp
 8015150:	6869      	ldr	r1, [r5, #4]
 8015152:	c303      	stmia	r3!, {r0, r1}
 8015154:	4668      	mov	r0, sp
 8015156:	1d21      	adds	r1, r4, #4
 8015158:	f7ff ff16 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 801515c:	4668      	mov	r0, sp
 801515e:	f7ff ff57 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015162:	b988      	cbnz	r0, 8015188 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015164:	f8bd 3000 	ldrh.w	r3, [sp]
 8015168:	4669      	mov	r1, sp
 801516a:	88a2      	ldrh	r2, [r4, #4]
 801516c:	4620      	mov	r0, r4
 801516e:	1a9b      	subs	r3, r3, r2
 8015170:	88e2      	ldrh	r2, [r4, #6]
 8015172:	f8ad 3000 	strh.w	r3, [sp]
 8015176:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801517a:	1a9b      	subs	r3, r3, r2
 801517c:	4632      	mov	r2, r6
 801517e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015182:	6823      	ldr	r3, [r4, #0]
 8015184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015186:	4798      	blx	r3
 8015188:	69a4      	ldr	r4, [r4, #24]
 801518a:	e7db      	b.n	8015144 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801518c:	b002      	add	sp, #8
 801518e:	bd70      	pop	{r4, r5, r6, pc}

08015190 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015190:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015194:	4770      	bx	lr

08015196 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015196:	6803      	ldr	r3, [r0, #0]
 8015198:	b513      	push	{r0, r1, r4, lr}
 801519a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801519e:	2300      	movs	r3, #0
 80151a0:	e9cd 3300 	strd	r3, r3, [sp]
 80151a4:	466b      	mov	r3, sp
 80151a6:	47a0      	blx	r4
 80151a8:	b002      	add	sp, #8
 80151aa:	bd10      	pop	{r4, pc}

080151ac <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80151ac:	2301      	movs	r3, #1
 80151ae:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80151b2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80151b6:	4770      	bx	lr

080151b8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80151b8:	2301      	movs	r3, #1
 80151ba:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80151be:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80151c2:	4770      	bx	lr

080151c4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80151c4:	6843      	ldr	r3, [r0, #4]
 80151c6:	2201      	movs	r2, #1
 80151c8:	725a      	strb	r2, [r3, #9]
 80151ca:	6840      	ldr	r0, [r0, #4]
 80151cc:	6803      	ldr	r3, [r0, #0]
 80151ce:	691b      	ldr	r3, [r3, #16]
 80151d0:	4718      	bx	r3

080151d2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80151d2:	6840      	ldr	r0, [r0, #4]
 80151d4:	6803      	ldr	r3, [r0, #0]
 80151d6:	689b      	ldr	r3, [r3, #8]
 80151d8:	4718      	bx	r3
	...

080151dc <_ZN8touchgfx3HAL10beginFrameEv>:
 80151dc:	4b04      	ldr	r3, [pc, #16]	; (80151f0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	b123      	cbz	r3, 80151ec <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80151e2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80151e6:	f080 0001 	eor.w	r0, r0, #1
 80151ea:	4770      	bx	lr
 80151ec:	2001      	movs	r0, #1
 80151ee:	4770      	bx	lr
 80151f0:	2000bc76 	.word	0x2000bc76

080151f4 <_ZN8touchgfx3HAL8endFrameEv>:
 80151f4:	b510      	push	{r4, lr}
 80151f6:	4604      	mov	r4, r0
 80151f8:	6840      	ldr	r0, [r0, #4]
 80151fa:	6803      	ldr	r3, [r0, #0]
 80151fc:	689b      	ldr	r3, [r3, #8]
 80151fe:	4798      	blx	r3
 8015200:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015204:	b113      	cbz	r3, 801520c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015206:	2301      	movs	r3, #1
 8015208:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801520c:	bd10      	pop	{r4, pc}

0801520e <_ZN8touchgfx3HAL9taskEntryEv>:
 801520e:	b508      	push	{r3, lr}
 8015210:	6803      	ldr	r3, [r0, #0]
 8015212:	4604      	mov	r4, r0
 8015214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015216:	4798      	blx	r3
 8015218:	6823      	ldr	r3, [r4, #0]
 801521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801521c:	4620      	mov	r0, r4
 801521e:	4798      	blx	r3
 8015220:	f7fd fed4 	bl	8012fcc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015224:	6823      	ldr	r3, [r4, #0]
 8015226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015228:	e7f8      	b.n	801521c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801522c <_ZN8touchgfx3HAL4tickEv>:
 801522c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801522e:	6803      	ldr	r3, [r0, #0]
 8015230:	4604      	mov	r4, r0
 8015232:	4d5c      	ldr	r5, [pc, #368]	; (80153a4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015238:	4798      	blx	r3
 801523a:	2800      	cmp	r0, #0
 801523c:	f000 8097 	beq.w	801536e <_ZN8touchgfx3HAL4tickEv+0x142>
 8015240:	2001      	movs	r0, #1
 8015242:	2600      	movs	r6, #0
 8015244:	f7fd fba6 	bl	8012994 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015248:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801524c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015250:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015254:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015258:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801525c:	b133      	cbz	r3, 801526c <_ZN8touchgfx3HAL4tickEv+0x40>
 801525e:	6823      	ldr	r3, [r4, #0]
 8015260:	4620      	mov	r0, r4
 8015262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015266:	4798      	blx	r3
 8015268:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801526c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015270:	2601      	movs	r6, #1
 8015272:	6862      	ldr	r2, [r4, #4]
 8015274:	f083 0301 	eor.w	r3, r3, #1
 8015278:	702e      	strb	r6, [r5, #0]
 801527a:	7253      	strb	r3, [r2, #9]
 801527c:	f002 fff0 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 8015280:	6803      	ldr	r3, [r0, #0]
 8015282:	4631      	mov	r1, r6
 8015284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015286:	4798      	blx	r3
 8015288:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801528c:	b90b      	cbnz	r3, 8015292 <_ZN8touchgfx3HAL4tickEv+0x66>
 801528e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015292:	f002 ffe5 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 8015296:	6803      	ldr	r3, [r0, #0]
 8015298:	695b      	ldr	r3, [r3, #20]
 801529a:	4798      	blx	r3
 801529c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801529e:	6803      	ldr	r3, [r0, #0]
 80152a0:	691b      	ldr	r3, [r3, #16]
 80152a2:	4798      	blx	r3
 80152a4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80152a8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80152ac:	3b01      	subs	r3, #1
 80152ae:	b2db      	uxtb	r3, r3
 80152b0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80152b4:	b10a      	cbz	r2, 80152ba <_ZN8touchgfx3HAL4tickEv+0x8e>
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d1eb      	bne.n	8015292 <_ZN8touchgfx3HAL4tickEv+0x66>
 80152ba:	4a3b      	ldr	r2, [pc, #236]	; (80153a8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80152bc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80152c0:	7813      	ldrb	r3, [r2, #0]
 80152c2:	3301      	adds	r3, #1
 80152c4:	b25b      	sxtb	r3, r3
 80152c6:	4299      	cmp	r1, r3
 80152c8:	7013      	strb	r3, [r2, #0]
 80152ca:	dc10      	bgt.n	80152ee <_ZN8touchgfx3HAL4tickEv+0xc2>
 80152cc:	2300      	movs	r3, #0
 80152ce:	68e0      	ldr	r0, [r4, #12]
 80152d0:	a902      	add	r1, sp, #8
 80152d2:	7013      	strb	r3, [r2, #0]
 80152d4:	aa03      	add	r2, sp, #12
 80152d6:	6803      	ldr	r3, [r0, #0]
 80152d8:	68db      	ldr	r3, [r3, #12]
 80152da:	4798      	blx	r3
 80152dc:	6823      	ldr	r3, [r4, #0]
 80152de:	2800      	cmp	r0, #0
 80152e0:	d051      	beq.n	8015386 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80152e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80152e6:	4620      	mov	r0, r4
 80152e8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80152ec:	4798      	blx	r3
 80152ee:	2300      	movs	r3, #0
 80152f0:	6960      	ldr	r0, [r4, #20]
 80152f2:	f88d 3007 	strb.w	r3, [sp, #7]
 80152f6:	b158      	cbz	r0, 8015310 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80152f8:	6803      	ldr	r3, [r0, #0]
 80152fa:	f10d 0107 	add.w	r1, sp, #7
 80152fe:	68db      	ldr	r3, [r3, #12]
 8015300:	4798      	blx	r3
 8015302:	b128      	cbz	r0, 8015310 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015306:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801530a:	6803      	ldr	r3, [r0, #0]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	4798      	blx	r3
 8015310:	f104 001c 	add.w	r0, r4, #28
 8015314:	f00d facc 	bl	80228b0 <_ZN8touchgfx8Gestures4tickEv>
 8015318:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801531c:	b30b      	cbz	r3, 8015362 <_ZN8touchgfx3HAL4tickEv+0x136>
 801531e:	6920      	ldr	r0, [r4, #16]
 8015320:	6803      	ldr	r3, [r0, #0]
 8015322:	691b      	ldr	r3, [r3, #16]
 8015324:	4798      	blx	r3
 8015326:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015328:	4606      	mov	r6, r0
 801532a:	b903      	cbnz	r3, 801532e <_ZN8touchgfx3HAL4tickEv+0x102>
 801532c:	6720      	str	r0, [r4, #112]	; 0x70
 801532e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015330:	4a1e      	ldr	r2, [pc, #120]	; (80153ac <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015332:	1af3      	subs	r3, r6, r3
 8015334:	4293      	cmp	r3, r2
 8015336:	d914      	bls.n	8015362 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015338:	6920      	ldr	r0, [r4, #16]
 801533a:	6803      	ldr	r3, [r0, #0]
 801533c:	699b      	ldr	r3, [r3, #24]
 801533e:	4798      	blx	r3
 8015340:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015342:	2264      	movs	r2, #100	; 0x64
 8015344:	1af3      	subs	r3, r6, r3
 8015346:	fbb3 f3f2 	udiv	r3, r3, r2
 801534a:	fbb0 f0f3 	udiv	r0, r0, r3
 801534e:	2800      	cmp	r0, #0
 8015350:	dc1e      	bgt.n	8015390 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015352:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015356:	6920      	ldr	r0, [r4, #16]
 8015358:	2100      	movs	r1, #0
 801535a:	6803      	ldr	r3, [r0, #0]
 801535c:	69db      	ldr	r3, [r3, #28]
 801535e:	4798      	blx	r3
 8015360:	6726      	str	r6, [r4, #112]	; 0x70
 8015362:	f002 ff7d 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 8015366:	6803      	ldr	r3, [r0, #0]
 8015368:	2100      	movs	r1, #0
 801536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801536c:	4798      	blx	r3
 801536e:	6823      	ldr	r3, [r4, #0]
 8015370:	4620      	mov	r0, r4
 8015372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015376:	4798      	blx	r3
 8015378:	2001      	movs	r0, #1
 801537a:	f7fd fb16 	bl	80129aa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801537e:	2300      	movs	r3, #0
 8015380:	702b      	strb	r3, [r5, #0]
 8015382:	b004      	add	sp, #16
 8015384:	bd70      	pop	{r4, r5, r6, pc}
 8015386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801538a:	4620      	mov	r0, r4
 801538c:	4798      	blx	r3
 801538e:	e7ae      	b.n	80152ee <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015390:	2863      	cmp	r0, #99	; 0x63
 8015392:	bfcb      	itete	gt
 8015394:	2300      	movgt	r3, #0
 8015396:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801539a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801539e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80153a2:	e7d8      	b.n	8015356 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80153a4:	2000bc7c 	.word	0x2000bc7c
 80153a8:	2000bc7d 	.word	0x2000bc7d
 80153ac:	05f5e100 	.word	0x05f5e100

080153b0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80153b0:	f7fd bdac 	b.w	8012f0c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080153b4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80153b4:	6581      	str	r1, [r0, #88]	; 0x58
 80153b6:	301c      	adds	r0, #28
 80153b8:	f00d ba78 	b.w	80228ac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080153bc <_ZN8touchgfx3HAL5touchEll>:
 80153bc:	b530      	push	{r4, r5, lr}
 80153be:	b087      	sub	sp, #28
 80153c0:	4604      	mov	r4, r0
 80153c2:	a804      	add	r0, sp, #16
 80153c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80153c8:	f002 fd4e 	bl	8017e68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80153cc:	9b04      	ldr	r3, [sp, #16]
 80153ce:	a906      	add	r1, sp, #24
 80153d0:	a803      	add	r0, sp, #12
 80153d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80153d6:	9b05      	ldr	r3, [sp, #20]
 80153d8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80153dc:	f002 fd92 	bl	8017f04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80153e0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80153e4:	f104 001c 	add.w	r0, r4, #28
 80153e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80153ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80153f0:	b189      	cbz	r1, 8015416 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80153f2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80153f6:	9300      	str	r3, [sp, #0]
 80153f8:	4613      	mov	r3, r2
 80153fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80153fe:	462a      	mov	r2, r5
 8015400:	f00d fa64 	bl	80228cc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015404:	b128      	cbz	r0, 8015412 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015406:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801540a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801540c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015410:	6623      	str	r3, [r4, #96]	; 0x60
 8015412:	b007      	add	sp, #28
 8015414:	bd30      	pop	{r4, r5, pc}
 8015416:	f00d fa9d 	bl	8022954 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801541a:	2301      	movs	r3, #1
 801541c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015420:	e7f1      	b.n	8015406 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015422 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015422:	b570      	push	{r4, r5, r6, lr}
 8015424:	2b00      	cmp	r3, #0
 8015426:	d050      	beq.n	80154ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015428:	ea81 0002 	eor.w	r0, r1, r2
 801542c:	07c6      	lsls	r6, r0, #31
 801542e:	d508      	bpl.n	8015442 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015430:	3a01      	subs	r2, #1
 8015432:	18cc      	adds	r4, r1, r3
 8015434:	42a1      	cmp	r1, r4
 8015436:	d048      	beq.n	80154ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015438:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801543c:	f801 0b01 	strb.w	r0, [r1], #1
 8015440:	e7f8      	b.n	8015434 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015442:	07d5      	lsls	r5, r2, #31
 8015444:	bf42      	ittt	mi
 8015446:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801544a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801544e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015452:	2b01      	cmp	r3, #1
 8015454:	d915      	bls.n	8015482 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015456:	ea82 0001 	eor.w	r0, r2, r1
 801545a:	0784      	lsls	r4, r0, #30
 801545c:	d02d      	beq.n	80154ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801545e:	1e94      	subs	r4, r2, #2
 8015460:	4608      	mov	r0, r1
 8015462:	18ce      	adds	r6, r1, r3
 8015464:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015468:	f820 5b02 	strh.w	r5, [r0], #2
 801546c:	1a35      	subs	r5, r6, r0
 801546e:	2d01      	cmp	r5, #1
 8015470:	d8f8      	bhi.n	8015464 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015472:	1e98      	subs	r0, r3, #2
 8015474:	f003 0301 	and.w	r3, r3, #1
 8015478:	f020 0001 	bic.w	r0, r0, #1
 801547c:	3002      	adds	r0, #2
 801547e:	4401      	add	r1, r0
 8015480:	4402      	add	r2, r0
 8015482:	1f14      	subs	r4, r2, #4
 8015484:	4608      	mov	r0, r1
 8015486:	18ce      	adds	r6, r1, r3
 8015488:	1a35      	subs	r5, r6, r0
 801548a:	2d03      	cmp	r5, #3
 801548c:	d810      	bhi.n	80154b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801548e:	089c      	lsrs	r4, r3, #2
 8015490:	00a0      	lsls	r0, r4, #2
 8015492:	4401      	add	r1, r0
 8015494:	3801      	subs	r0, #1
 8015496:	4402      	add	r2, r0
 8015498:	f06f 0003 	mvn.w	r0, #3
 801549c:	fb00 3404 	mla	r4, r0, r4, r3
 80154a0:	440c      	add	r4, r1
 80154a2:	42a1      	cmp	r1, r4
 80154a4:	d011      	beq.n	80154ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80154a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80154aa:	f801 3b01 	strb.w	r3, [r1], #1
 80154ae:	e7f8      	b.n	80154a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80154b0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80154b4:	f840 5b04 	str.w	r5, [r0], #4
 80154b8:	e7e6      	b.n	8015488 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80154ba:	0790      	lsls	r0, r2, #30
 80154bc:	d0e1      	beq.n	8015482 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80154be:	f832 0b02 	ldrh.w	r0, [r2], #2
 80154c2:	3b02      	subs	r3, #2
 80154c4:	f821 0b02 	strh.w	r0, [r1], #2
 80154c8:	e7db      	b.n	8015482 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80154ca:	2001      	movs	r0, #1
 80154cc:	bd70      	pop	{r4, r5, r6, pc}

080154ce <_ZN8touchgfx3HAL7noTouchEv>:
 80154ce:	b510      	push	{r4, lr}
 80154d0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80154d4:	4604      	mov	r4, r0
 80154d6:	b153      	cbz	r3, 80154ee <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80154d8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80154dc:	2101      	movs	r1, #1
 80154de:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80154e2:	301c      	adds	r0, #28
 80154e4:	f00d fa36 	bl	8022954 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80154e8:	2300      	movs	r3, #0
 80154ea:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80154ee:	bd10      	pop	{r4, pc}

080154f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80154f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154f4:	4605      	mov	r5, r0
 80154f6:	6980      	ldr	r0, [r0, #24]
 80154f8:	b085      	sub	sp, #20
 80154fa:	460f      	mov	r7, r1
 80154fc:	4690      	mov	r8, r2
 80154fe:	4699      	mov	r9, r3
 8015500:	b930      	cbnz	r0, 8015510 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015502:	4b1f      	ldr	r3, [pc, #124]	; (8015580 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015504:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015508:	4a1e      	ldr	r2, [pc, #120]	; (8015584 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801550a:	481f      	ldr	r0, [pc, #124]	; (8015588 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801550c:	f00e fe9c 	bl	8024248 <__assert_func>
 8015510:	ac04      	add	r4, sp, #16
 8015512:	2600      	movs	r6, #0
 8015514:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015518:	6806      	ldr	r6, [r0, #0]
 801551a:	9401      	str	r4, [sp, #4]
 801551c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015520:	9400      	str	r4, [sp, #0]
 8015522:	6834      	ldr	r4, [r6, #0]
 8015524:	47a0      	blx	r4
 8015526:	4c19      	ldr	r4, [pc, #100]	; (801558c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015528:	4606      	mov	r6, r0
 801552a:	f8a4 9000 	strh.w	r9, [r4]
 801552e:	f7f9 fdab 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8015532:	6803      	ldr	r3, [r0, #0]
 8015534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015536:	4798      	blx	r3
 8015538:	280c      	cmp	r0, #12
 801553a:	d80f      	bhi.n	801555c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801553c:	e8df f000 	tbb	[pc, r0]
 8015540:	1b1b1207 	.word	0x1b1b1207
 8015544:	1b1b1b1b 	.word	0x1b1b1b1b
 8015548:	1b1b1b1b 	.word	0x1b1b1b1b
 801554c:	1b          	.byte	0x1b
 801554d:	00          	.byte	0x00
 801554e:	8823      	ldrh	r3, [r4, #0]
 8015550:	fb08 7203 	mla	r2, r8, r3, r7
 8015554:	9b03      	ldr	r3, [sp, #12]
 8015556:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801555a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801555c:	4630      	mov	r0, r6
 801555e:	b005      	add	sp, #20
 8015560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015564:	8822      	ldrh	r2, [r4, #0]
 8015566:	9b03      	ldr	r3, [sp, #12]
 8015568:	fb08 7202 	mla	r2, r8, r2, r7
 801556c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015570:	1a9a      	subs	r2, r3, r2
 8015572:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015574:	e7f2      	b.n	801555c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015576:	4b06      	ldr	r3, [pc, #24]	; (8015590 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015578:	f240 114d 	movw	r1, #333	; 0x14d
 801557c:	4a01      	ldr	r2, [pc, #4]	; (8015584 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801557e:	e7c4      	b.n	801550a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015580:	08026c0d 	.word	0x08026c0d
 8015584:	08026f1e 	.word	0x08026f1e
 8015588:	08026c52 	.word	0x08026c52
 801558c:	2000bc72 	.word	0x2000bc72
 8015590:	08026c78 	.word	0x08026c78

08015594 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015598:	4698      	mov	r8, r3
 801559a:	6803      	ldr	r3, [r0, #0]
 801559c:	b087      	sub	sp, #28
 801559e:	460e      	mov	r6, r1
 80155a0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80155a2:	4617      	mov	r7, r2
 80155a4:	4b0d      	ldr	r3, [pc, #52]	; (80155dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80155a6:	4604      	mov	r4, r0
 80155a8:	f8b3 9000 	ldrh.w	r9, [r3]
 80155ac:	f7f9 fd6c 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 80155b0:	6803      	ldr	r3, [r0, #0]
 80155b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b4:	4798      	blx	r3
 80155b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80155ba:	463a      	mov	r2, r7
 80155bc:	4631      	mov	r1, r6
 80155be:	9302      	str	r3, [sp, #8]
 80155c0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80155c4:	9301      	str	r3, [sp, #4]
 80155c6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80155ca:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80155ce:	9300      	str	r3, [sp, #0]
 80155d0:	4620      	mov	r0, r4
 80155d2:	4643      	mov	r3, r8
 80155d4:	47a8      	blx	r5
 80155d6:	b007      	add	sp, #28
 80155d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155dc:	2000bc72 	.word	0x2000bc72

080155e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80155e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155e4:	4606      	mov	r6, r0
 80155e6:	b089      	sub	sp, #36	; 0x24
 80155e8:	4610      	mov	r0, r2
 80155ea:	460c      	mov	r4, r1
 80155ec:	4691      	mov	r9, r2
 80155ee:	4698      	mov	r8, r3
 80155f0:	f005 f818 	bl	801a624 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	f000 8092 	beq.w	801571e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80155fa:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015738 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80155fe:	ad08      	add	r5, sp, #32
 8015600:	f8df b138 	ldr.w	fp, [pc, #312]	; 801573c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015604:	f8da 0000 	ldr.w	r0, [sl]
 8015608:	4f4a      	ldr	r7, [pc, #296]	; (8015734 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801560a:	6802      	ldr	r2, [r0, #0]
 801560c:	6a12      	ldr	r2, [r2, #32]
 801560e:	4790      	blx	r2
 8015610:	f8da 0000 	ldr.w	r0, [sl]
 8015614:	6802      	ldr	r2, [r0, #0]
 8015616:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015618:	4790      	blx	r2
 801561a:	f8bb 3000 	ldrh.w	r3, [fp]
 801561e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8015622:	4628      	mov	r0, r5
 8015624:	9300      	str	r3, [sp, #0]
 8015626:	883b      	ldrh	r3, [r7, #0]
 8015628:	9301      	str	r3, [sp, #4]
 801562a:	f005 f8bb 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801562e:	f8ab 0000 	strh.w	r0, [fp]
 8015632:	4628      	mov	r0, r5
 8015634:	f005 f8f0 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015638:	f8da b000 	ldr.w	fp, [sl]
 801563c:	8038      	strh	r0, [r7, #0]
 801563e:	4648      	mov	r0, r9
 8015640:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8015644:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8015648:	9302      	str	r3, [sp, #8]
 801564a:	f004 ffeb 	bl	801a624 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801564e:	f8da 2000 	ldr.w	r2, [sl]
 8015652:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8015656:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015658:	4620      	mov	r0, r4
 801565a:	6822      	ldr	r2, [r4, #0]
 801565c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015660:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015662:	2200      	movs	r2, #0
 8015664:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015668:	4611      	mov	r1, r2
 801566a:	4798      	blx	r3
 801566c:	2201      	movs	r2, #1
 801566e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015672:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015676:	1d22      	adds	r2, r4, #4
 8015678:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801567c:	2900      	cmp	r1, #0
 801567e:	d051      	beq.n	8015724 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015680:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015684:	2900      	cmp	r1, #0
 8015686:	d04d      	beq.n	8015724 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015688:	6810      	ldr	r0, [r2, #0]
 801568a:	f10d 0c18 	add.w	ip, sp, #24
 801568e:	6851      	ldr	r1, [r2, #4]
 8015690:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015694:	4641      	mov	r1, r8
 8015696:	a806      	add	r0, sp, #24
 8015698:	f7ff fc76 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 801569c:	4628      	mov	r0, r5
 801569e:	f005 fa0d 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80156a2:	4680      	mov	r8, r0
 80156a4:	f7f9 fcf0 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 80156a8:	6802      	ldr	r2, [r0, #0]
 80156aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80156ac:	4790      	blx	r2
 80156ae:	4580      	cmp	r8, r0
 80156b0:	d03d      	beq.n	801572e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 80156b2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80156b4:	b150      	cbz	r0, 80156cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80156b6:	4628      	mov	r0, r5
 80156b8:	f005 fa00 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80156bc:	4605      	mov	r5, r0
 80156be:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80156c0:	6803      	ldr	r3, [r0, #0]
 80156c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c4:	4798      	blx	r3
 80156c6:	1a2b      	subs	r3, r5, r0
 80156c8:	4258      	negs	r0, r3
 80156ca:	4158      	adcs	r0, r3
 80156cc:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80156d0:	2500      	movs	r5, #0
 80156d2:	6963      	ldr	r3, [r4, #20]
 80156d4:	4620      	mov	r0, r4
 80156d6:	6822      	ldr	r2, [r4, #0]
 80156d8:	a906      	add	r1, sp, #24
 80156da:	6165      	str	r5, [r4, #20]
 80156dc:	9303      	str	r3, [sp, #12]
 80156de:	6892      	ldr	r2, [r2, #8]
 80156e0:	4790      	blx	r2
 80156e2:	9b03      	ldr	r3, [sp, #12]
 80156e4:	4620      	mov	r0, r4
 80156e6:	4652      	mov	r2, sl
 80156e8:	6163      	str	r3, [r4, #20]
 80156ea:	4649      	mov	r1, r9
 80156ec:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80156f0:	6823      	ldr	r3, [r4, #0]
 80156f2:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80156f6:	4c10      	ldr	r4, [pc, #64]	; (8015738 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80156f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80156fa:	4798      	blx	r3
 80156fc:	6820      	ldr	r0, [r4, #0]
 80156fe:	9b02      	ldr	r3, [sp, #8]
 8015700:	9a00      	ldr	r2, [sp, #0]
 8015702:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015706:	4b0d      	ldr	r3, [pc, #52]	; (801573c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015708:	801a      	strh	r2, [r3, #0]
 801570a:	4b0a      	ldr	r3, [pc, #40]	; (8015734 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801570c:	9a01      	ldr	r2, [sp, #4]
 801570e:	801a      	strh	r2, [r3, #0]
 8015710:	6803      	ldr	r3, [r0, #0]
 8015712:	6a1b      	ldr	r3, [r3, #32]
 8015714:	4798      	blx	r3
 8015716:	6820      	ldr	r0, [r4, #0]
 8015718:	6803      	ldr	r3, [r0, #0]
 801571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801571c:	4798      	blx	r3
 801571e:	b009      	add	sp, #36	; 0x24
 8015720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015724:	ab06      	add	r3, sp, #24
 8015726:	6810      	ldr	r0, [r2, #0]
 8015728:	6851      	ldr	r1, [r2, #4]
 801572a:	c303      	stmia	r3!, {r0, r1}
 801572c:	e7b6      	b.n	801569c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801572e:	2000      	movs	r0, #0
 8015730:	e7cc      	b.n	80156cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015732:	bf00      	nop
 8015734:	2000bc74 	.word	0x2000bc74
 8015738:	2000bc78 	.word	0x2000bc78
 801573c:	2000bc72 	.word	0x2000bc72

08015740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015740:	4b07      	ldr	r3, [pc, #28]	; (8015760 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015742:	b510      	push	{r4, lr}
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	4604      	mov	r4, r0
 8015748:	b13b      	cbz	r3, 801575a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801574a:	6803      	ldr	r3, [r0, #0]
 801574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801574e:	4798      	blx	r3
 8015750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015752:	4283      	cmp	r3, r0
 8015754:	d101      	bne.n	801575a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015756:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015758:	bd10      	pop	{r4, pc}
 801575a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801575c:	e7fc      	b.n	8015758 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801575e:	bf00      	nop
 8015760:	2000bc76 	.word	0x2000bc76

08015764 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015764:	4b0b      	ldr	r3, [pc, #44]	; (8015794 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015766:	b510      	push	{r4, lr}
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	4604      	mov	r4, r0
 801576c:	b95b      	cbnz	r3, 8015786 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801576e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015772:	2b02      	cmp	r3, #2
 8015774:	d007      	beq.n	8015786 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015776:	6840      	ldr	r0, [r0, #4]
 8015778:	f000 fbc8 	bl	8015f0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801577c:	b118      	cbz	r0, 8015786 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801577e:	6862      	ldr	r2, [r4, #4]
 8015780:	7a53      	ldrb	r3, [r2, #9]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d0fc      	beq.n	8015780 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015786:	f7fd fbb3 	bl	8012ef0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801578a:	4620      	mov	r0, r4
 801578c:	f7ff ffd8 	bl	8015740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015790:	bd10      	pop	{r4, pc}
 8015792:	bf00      	nop
 8015794:	2000bc76 	.word	0x2000bc76

08015798 <_ZN8touchgfx3HAL10initializeEv>:
 8015798:	b510      	push	{r4, lr}
 801579a:	4604      	mov	r4, r0
 801579c:	f7fd fb84 	bl	8012ea8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80157a0:	6860      	ldr	r0, [r4, #4]
 80157a2:	6803      	ldr	r3, [r0, #0]
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	4798      	blx	r3
 80157a8:	68e0      	ldr	r0, [r4, #12]
 80157aa:	6803      	ldr	r3, [r0, #0]
 80157ac:	689b      	ldr	r3, [r3, #8]
 80157ae:	4798      	blx	r3
 80157b0:	6823      	ldr	r3, [r4, #0]
 80157b2:	4620      	mov	r0, r4
 80157b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157ba:	4718      	bx	r3

080157bc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80157bc:	b508      	push	{r3, lr}
 80157be:	290c      	cmp	r1, #12
 80157c0:	d817      	bhi.n	80157f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80157c2:	e8df f001 	tbb	[pc, r1]
 80157c6:	090b      	.short	0x090b
 80157c8:	0d0d0d07 	.word	0x0d0d0d07
 80157cc:	1414140d 	.word	0x1414140d
 80157d0:	1414      	.short	0x1414
 80157d2:	0d          	.byte	0x0d
 80157d3:	00          	.byte	0x00
 80157d4:	2020      	movs	r0, #32
 80157d6:	bd08      	pop	{r3, pc}
 80157d8:	2018      	movs	r0, #24
 80157da:	e7fc      	b.n	80157d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80157dc:	2010      	movs	r0, #16
 80157de:	e7fa      	b.n	80157d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80157e0:	4b05      	ldr	r3, [pc, #20]	; (80157f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80157e2:	f44f 710c 	mov.w	r1, #560	; 0x230
 80157e6:	4a05      	ldr	r2, [pc, #20]	; (80157fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80157e8:	4805      	ldr	r0, [pc, #20]	; (8015800 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80157ea:	f00e fd2d 	bl	8024248 <__assert_func>
 80157ee:	2008      	movs	r0, #8
 80157f0:	e7f1      	b.n	80157d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80157f2:	2000      	movs	r0, #0
 80157f4:	e7ef      	b.n	80157d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80157f6:	bf00      	nop
 80157f8:	08026d4b 	.word	0x08026d4b
 80157fc:	080270e0 	.word	0x080270e0
 8015800:	08026c52 	.word	0x08026c52

08015804 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015804:	b570      	push	{r4, r5, r6, lr}
 8015806:	460d      	mov	r5, r1
 8015808:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801580c:	4616      	mov	r6, r2
 801580e:	461c      	mov	r4, r3
 8015810:	f7ff ffd4 	bl	80157bc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015814:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015818:	10c0      	asrs	r0, r0, #3
 801581a:	fb06 5101 	mla	r1, r6, r1, r5
 801581e:	fb00 4001 	mla	r0, r0, r1, r4
 8015822:	bd70      	pop	{r4, r5, r6, pc}

08015824 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015828:	b08a      	sub	sp, #40	; 0x28
 801582a:	f04f 0c00 	mov.w	ip, #0
 801582e:	4604      	mov	r4, r0
 8015830:	469a      	mov	sl, r3
 8015832:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015836:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801583a:	f1b8 0f02 	cmp.w	r8, #2
 801583e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015842:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015846:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801584a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801584e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015852:	f8cd c020 	str.w	ip, [sp, #32]
 8015856:	d030      	beq.n	80158ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015858:	2bff      	cmp	r3, #255	; 0xff
 801585a:	d12c      	bne.n	80158b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801585c:	4560      	cmp	r0, ip
 801585e:	bf14      	ite	ne
 8015860:	2004      	movne	r0, #4
 8015862:	2001      	moveq	r0, #1
 8015864:	9204      	str	r2, [sp, #16]
 8015866:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801586a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801586e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015872:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015876:	f8ad 501a 	strh.w	r5, [sp, #26]
 801587a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801587e:	4620      	mov	r0, r4
 8015880:	f7ff ff5e 	bl	8015740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015884:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015888:	4603      	mov	r3, r0
 801588a:	4651      	mov	r1, sl
 801588c:	4620      	mov	r0, r4
 801588e:	e9cd 9700 	strd	r9, r7, [sp]
 8015892:	f7ff ffb7 	bl	8015804 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015896:	f8ad 901e 	strh.w	r9, [sp, #30]
 801589a:	9005      	str	r0, [sp, #20]
 801589c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80158a0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80158a4:	b106      	cbz	r6, 80158a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80158a6:	b98d      	cbnz	r5, 80158cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80158a8:	4b12      	ldr	r3, [pc, #72]	; (80158f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80158aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80158ae:	4a12      	ldr	r2, [pc, #72]	; (80158f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80158b0:	4812      	ldr	r0, [pc, #72]	; (80158fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80158b2:	f00e fcc9 	bl	8024248 <__assert_func>
 80158b6:	2004      	movs	r0, #4
 80158b8:	e7d4      	b.n	8015864 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80158ba:	2bff      	cmp	r3, #255	; 0xff
 80158bc:	d104      	bne.n	80158c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80158be:	2800      	cmp	r0, #0
 80158c0:	bf14      	ite	ne
 80158c2:	2040      	movne	r0, #64	; 0x40
 80158c4:	2020      	moveq	r0, #32
 80158c6:	e7cd      	b.n	8015864 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80158c8:	2040      	movs	r0, #64	; 0x40
 80158ca:	e7cb      	b.n	8015864 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80158cc:	6823      	ldr	r3, [r4, #0]
 80158ce:	4620      	mov	r0, r4
 80158d0:	9d02      	ldr	r5, [sp, #8]
 80158d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158d4:	4798      	blx	r3
 80158d6:	4228      	tst	r0, r5
 80158d8:	d104      	bne.n	80158e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80158da:	4b09      	ldr	r3, [pc, #36]	; (8015900 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80158dc:	f240 11b1 	movw	r1, #433	; 0x1b1
 80158e0:	4a05      	ldr	r2, [pc, #20]	; (80158f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80158e2:	e7e5      	b.n	80158b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80158e4:	6860      	ldr	r0, [r4, #4]
 80158e6:	a902      	add	r1, sp, #8
 80158e8:	6803      	ldr	r3, [r0, #0]
 80158ea:	685b      	ldr	r3, [r3, #4]
 80158ec:	4798      	blx	r3
 80158ee:	b00a      	add	sp, #40	; 0x28
 80158f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f4:	08026cce 	.word	0x08026cce
 80158f8:	08026f82 	.word	0x08026f82
 80158fc:	08026c52 	.word	0x08026c52
 8015900:	08026d06 	.word	0x08026d06

08015904 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015904:	b510      	push	{r4, lr}
 8015906:	b08a      	sub	sp, #40	; 0x28
 8015908:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801590c:	9408      	str	r4, [sp, #32]
 801590e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015912:	9407      	str	r4, [sp, #28]
 8015914:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8015918:	9406      	str	r4, [sp, #24]
 801591a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801591e:	9405      	str	r4, [sp, #20]
 8015920:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8015924:	9404      	str	r4, [sp, #16]
 8015926:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801592a:	9403      	str	r4, [sp, #12]
 801592c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8015930:	9402      	str	r4, [sp, #8]
 8015932:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015936:	e9cd 3400 	strd	r3, r4, [sp]
 801593a:	4613      	mov	r3, r2
 801593c:	2200      	movs	r2, #0
 801593e:	f7ff ff71 	bl	8015824 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015942:	b00a      	add	sp, #40	; 0x28
 8015944:	bd10      	pop	{r4, pc}
	...

08015948 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801594a:	b08b      	sub	sp, #44	; 0x2c
 801594c:	4616      	mov	r6, r2
 801594e:	460d      	mov	r5, r1
 8015950:	461f      	mov	r7, r3
 8015952:	4604      	mov	r4, r0
 8015954:	f7f9 fb98 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8015958:	6803      	ldr	r3, [r0, #0]
 801595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801595c:	4798      	blx	r3
 801595e:	4b0e      	ldr	r3, [pc, #56]	; (8015998 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015960:	2200      	movs	r2, #0
 8015962:	4629      	mov	r1, r5
 8015964:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015968:	881b      	ldrh	r3, [r3, #0]
 801596a:	4620      	mov	r0, r4
 801596c:	9306      	str	r3, [sp, #24]
 801596e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015972:	9305      	str	r3, [sp, #20]
 8015974:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015978:	9304      	str	r3, [sp, #16]
 801597a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801597e:	9303      	str	r3, [sp, #12]
 8015980:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015984:	9302      	str	r3, [sp, #8]
 8015986:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801598a:	e9cd 7300 	strd	r7, r3, [sp]
 801598e:	4633      	mov	r3, r6
 8015990:	f7ff ff48 	bl	8015824 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015994:	b00b      	add	sp, #44	; 0x2c
 8015996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015998:	2000bc72 	.word	0x2000bc72

0801599c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801599c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a0:	461f      	mov	r7, r3
 80159a2:	4b14      	ldr	r3, [pc, #80]	; (80159f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80159a4:	b08a      	sub	sp, #40	; 0x28
 80159a6:	4616      	mov	r6, r2
 80159a8:	f8b3 8000 	ldrh.w	r8, [r3]
 80159ac:	460d      	mov	r5, r1
 80159ae:	4604      	mov	r4, r0
 80159b0:	f7f9 fb6a 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 80159b4:	6803      	ldr	r3, [r0, #0]
 80159b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b8:	4798      	blx	r3
 80159ba:	2302      	movs	r3, #2
 80159bc:	9008      	str	r0, [sp, #32]
 80159be:	2200      	movs	r2, #0
 80159c0:	4629      	mov	r1, r5
 80159c2:	4620      	mov	r0, r4
 80159c4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80159c8:	2301      	movs	r3, #1
 80159ca:	9305      	str	r3, [sp, #20]
 80159cc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80159d0:	9304      	str	r3, [sp, #16]
 80159d2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80159d6:	9303      	str	r3, [sp, #12]
 80159d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80159dc:	9302      	str	r3, [sp, #8]
 80159de:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80159e2:	e9cd 7300 	strd	r7, r3, [sp]
 80159e6:	4633      	mov	r3, r6
 80159e8:	f7ff ff1c 	bl	8015824 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80159ec:	b00a      	add	sp, #40	; 0x28
 80159ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159f2:	bf00      	nop
 80159f4:	2000bc72 	.word	0x2000bc72

080159f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80159f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159fc:	b08b      	sub	sp, #44	; 0x2c
 80159fe:	469b      	mov	fp, r3
 8015a00:	4604      	mov	r4, r0
 8015a02:	4692      	mov	sl, r2
 8015a04:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015a08:	2600      	movs	r6, #0
 8015a0a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015a0e:	4689      	mov	r9, r1
 8015a10:	2fff      	cmp	r7, #255	; 0xff
 8015a12:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015a16:	9608      	str	r6, [sp, #32]
 8015a18:	bf14      	ite	ne
 8015a1a:	2308      	movne	r3, #8
 8015a1c:	2302      	moveq	r3, #2
 8015a1e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015a22:	f7ff fe8d 	bl	8015740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a26:	465a      	mov	r2, fp
 8015a28:	4603      	mov	r3, r0
 8015a2a:	4651      	mov	r1, sl
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	e9cd 8500 	strd	r8, r5, [sp]
 8015a32:	f7ff fee7 	bl	8015804 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015a36:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015a3a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015a3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015a42:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015a46:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015a4a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015a4e:	6823      	ldr	r3, [r4, #0]
 8015a50:	9d02      	ldr	r5, [sp, #8]
 8015a52:	9005      	str	r0, [sp, #20]
 8015a54:	4620      	mov	r0, r4
 8015a56:	f8ad 601c 	strh.w	r6, [sp, #28]
 8015a5a:	f8ad 801e 	strh.w	r8, [sp, #30]
 8015a5e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015a62:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a68:	4798      	blx	r3
 8015a6a:	4228      	tst	r0, r5
 8015a6c:	d106      	bne.n	8015a7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015a6e:	4b07      	ldr	r3, [pc, #28]	; (8015a8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015a70:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8015a74:	4a06      	ldr	r2, [pc, #24]	; (8015a90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015a76:	4807      	ldr	r0, [pc, #28]	; (8015a94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015a78:	f00e fbe6 	bl	8024248 <__assert_func>
 8015a7c:	6860      	ldr	r0, [r4, #4]
 8015a7e:	a902      	add	r1, sp, #8
 8015a80:	6803      	ldr	r3, [r0, #0]
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	4798      	blx	r3
 8015a86:	b00b      	add	sp, #44	; 0x2c
 8015a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a8c:	08026d06 	.word	0x08026d06
 8015a90:	0802704b 	.word	0x0802704b
 8015a94:	08026c52 	.word	0x08026c52

08015a98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015a9c:	461f      	mov	r7, r3
 8015a9e:	4b0b      	ldr	r3, [pc, #44]	; (8015acc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015aa0:	460d      	mov	r5, r1
 8015aa2:	4616      	mov	r6, r2
 8015aa4:	f8b3 8000 	ldrh.w	r8, [r3]
 8015aa8:	4604      	mov	r4, r0
 8015aaa:	f7f9 faed 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8015aae:	6803      	ldr	r3, [r0, #0]
 8015ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ab2:	4798      	blx	r3
 8015ab4:	463b      	mov	r3, r7
 8015ab6:	4632      	mov	r2, r6
 8015ab8:	4629      	mov	r1, r5
 8015aba:	e9cd 8000 	strd	r8, r0, [sp]
 8015abe:	4620      	mov	r0, r4
 8015ac0:	f7ff fea0 	bl	8015804 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015ac4:	b002      	add	sp, #8
 8015ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aca:	bf00      	nop
 8015acc:	2000bc72 	.word	0x2000bc72

08015ad0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad4:	4698      	mov	r8, r3
 8015ad6:	b088      	sub	sp, #32
 8015ad8:	2300      	movs	r3, #0
 8015ada:	4617      	mov	r7, r2
 8015adc:	4604      	mov	r4, r0
 8015ade:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015ae2:	9306      	str	r3, [sp, #24]
 8015ae4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015ae8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015aec:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015af0:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015af4:	e9cd 3100 	strd	r3, r1, [sp]
 8015af8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015b00:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015b04:	f88d 301c 	strb.w	r3, [sp, #28]
 8015b08:	f7ff fe1a 	bl	8015740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b0c:	4642      	mov	r2, r8
 8015b0e:	4603      	mov	r3, r0
 8015b10:	4639      	mov	r1, r7
 8015b12:	4620      	mov	r0, r4
 8015b14:	f7ff ffc0 	bl	8015a98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015b18:	4b16      	ldr	r3, [pc, #88]	; (8015b74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015b1a:	9003      	str	r0, [sp, #12]
 8015b1c:	881b      	ldrh	r3, [r3, #0]
 8015b1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015b22:	f7f9 fab1 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8015b26:	6803      	ldr	r3, [r0, #0]
 8015b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2a:	4798      	blx	r3
 8015b2c:	f88d 001e 	strb.w	r0, [sp, #30]
 8015b30:	f88d 001d 	strb.w	r0, [sp, #29]
 8015b34:	b106      	cbz	r6, 8015b38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015b36:	b935      	cbnz	r5, 8015b46 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015b38:	4b0f      	ldr	r3, [pc, #60]	; (8015b78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015b3a:	f240 11cd 	movw	r1, #461	; 0x1cd
 8015b3e:	4a0f      	ldr	r2, [pc, #60]	; (8015b7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015b40:	480f      	ldr	r0, [pc, #60]	; (8015b80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015b42:	f00e fb81 	bl	8024248 <__assert_func>
 8015b46:	6823      	ldr	r3, [r4, #0]
 8015b48:	4620      	mov	r0, r4
 8015b4a:	9d00      	ldr	r5, [sp, #0]
 8015b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b4e:	4798      	blx	r3
 8015b50:	4228      	tst	r0, r5
 8015b52:	d104      	bne.n	8015b5e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015b54:	4b0b      	ldr	r3, [pc, #44]	; (8015b84 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015b56:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8015b5a:	4a08      	ldr	r2, [pc, #32]	; (8015b7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015b5c:	e7f0      	b.n	8015b40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8015b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b60:	4669      	mov	r1, sp
 8015b62:	6860      	ldr	r0, [r4, #4]
 8015b64:	9306      	str	r3, [sp, #24]
 8015b66:	6803      	ldr	r3, [r0, #0]
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	4798      	blx	r3
 8015b6c:	b008      	add	sp, #32
 8015b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b72:	bf00      	nop
 8015b74:	2000bc72 	.word	0x2000bc72
 8015b78:	08026cce 	.word	0x08026cce
 8015b7c:	08026e34 	.word	0x08026e34
 8015b80:	08026c52 	.word	0x08026c52
 8015b84:	08026d06 	.word	0x08026d06

08015b88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015b88:	b570      	push	{r4, r5, r6, lr}
 8015b8a:	b08a      	sub	sp, #40	; 0x28
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	466b      	mov	r3, sp
 8015b90:	e883 0006 	stmia.w	r3, {r1, r2}
 8015b94:	4b1f      	ldr	r3, [pc, #124]	; (8015c14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	b933      	cbnz	r3, 8015ba8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015b9a:	4b1f      	ldr	r3, [pc, #124]	; (8015c18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015b9c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8015ba0:	4a1e      	ldr	r2, [pc, #120]	; (8015c1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015ba2:	481f      	ldr	r0, [pc, #124]	; (8015c20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015ba4:	f00e fb50 	bl	8024248 <__assert_func>
 8015ba8:	2300      	movs	r3, #0
 8015baa:	f8bd 5000 	ldrh.w	r5, [sp]
 8015bae:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015bb2:	9308      	str	r3, [sp, #32]
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	9302      	str	r3, [sp, #8]
 8015bb8:	6803      	ldr	r3, [r0, #0]
 8015bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bbc:	4798      	blx	r3
 8015bbe:	4632      	mov	r2, r6
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	f7ff ff67 	bl	8015a98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015bcc:	9003      	str	r0, [sp, #12]
 8015bce:	9305      	str	r3, [sp, #20]
 8015bd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015bd4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015bdc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015be0:	4b10      	ldr	r3, [pc, #64]	; (8015c24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015be2:	881b      	ldrh	r3, [r3, #0]
 8015be4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015be8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015bec:	f7f9 fa4c 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8015bf0:	6803      	ldr	r3, [r0, #0]
 8015bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf4:	4798      	blx	r3
 8015bf6:	23ff      	movs	r3, #255	; 0xff
 8015bf8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015bfc:	a902      	add	r1, sp, #8
 8015bfe:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015c02:	6860      	ldr	r0, [r4, #4]
 8015c04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015c08:	6803      	ldr	r3, [r0, #0]
 8015c0a:	685b      	ldr	r3, [r3, #4]
 8015c0c:	4798      	blx	r3
 8015c0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015c10:	b00a      	add	sp, #40	; 0x28
 8015c12:	bd70      	pop	{r4, r5, r6, pc}
 8015c14:	2000bc77 	.word	0x2000bc77
 8015c18:	08026b9f 	.word	0x08026b9f
 8015c1c:	08026ed8 	.word	0x08026ed8
 8015c20:	08026c52 	.word	0x08026c52
 8015c24:	2000bc72 	.word	0x2000bc72

08015c28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c2a:	b08b      	sub	sp, #44	; 0x2c
 8015c2c:	4604      	mov	r4, r0
 8015c2e:	466d      	mov	r5, sp
 8015c30:	e885 0006 	stmia.w	r5, {r1, r2}
 8015c34:	461d      	mov	r5, r3
 8015c36:	2300      	movs	r3, #0
 8015c38:	f8bd 6000 	ldrh.w	r6, [sp]
 8015c3c:	9308      	str	r3, [sp, #32]
 8015c3e:	2301      	movs	r3, #1
 8015c40:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015c44:	9302      	str	r3, [sp, #8]
 8015c46:	6803      	ldr	r3, [r0, #0]
 8015c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c4a:	4798      	blx	r3
 8015c4c:	463a      	mov	r2, r7
 8015c4e:	4631      	mov	r1, r6
 8015c50:	4603      	mov	r3, r0
 8015c52:	4620      	mov	r0, r4
 8015c54:	f7ff ff20 	bl	8015a98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015c58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015c5c:	9003      	str	r0, [sp, #12]
 8015c5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015c62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015c66:	9505      	str	r5, [sp, #20]
 8015c68:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015c6c:	4b0d      	ldr	r3, [pc, #52]	; (8015ca4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8015c6e:	881b      	ldrh	r3, [r3, #0]
 8015c70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c76:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015c7a:	f7f9 fa05 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8015c7e:	6803      	ldr	r3, [r0, #0]
 8015c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c82:	4798      	blx	r3
 8015c84:	23ff      	movs	r3, #255	; 0xff
 8015c86:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015c8a:	a902      	add	r1, sp, #8
 8015c8c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015c90:	6860      	ldr	r0, [r4, #4]
 8015c92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015c96:	6803      	ldr	r3, [r0, #0]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	4798      	blx	r3
 8015c9c:	4628      	mov	r0, r5
 8015c9e:	b00b      	add	sp, #44	; 0x2c
 8015ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	2000bc72 	.word	0x2000bc72

08015ca8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015ca8:	b570      	push	{r4, r5, r6, lr}
 8015caa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015cae:	4604      	mov	r4, r0
 8015cb0:	b19b      	cbz	r3, 8015cda <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015cb2:	2002      	movs	r0, #2
 8015cb4:	f7fc fe84 	bl	80129c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015cb8:	2300      	movs	r3, #0
 8015cba:	4620      	mov	r0, r4
 8015cbc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015cc0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015cc4:	6823      	ldr	r3, [r4, #0]
 8015cc6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8015cca:	f7ff fd39 	bl	8015740 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015cce:	4601      	mov	r1, r0
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	462b      	mov	r3, r5
 8015cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cd8:	4718      	bx	r3
 8015cda:	bd70      	pop	{r4, r5, r6, pc}

08015cdc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015cdc:	4770      	bx	lr

08015cde <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015cde:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015ce2:	1a13      	subs	r3, r2, r0
 8015ce4:	4258      	negs	r0, r3
 8015ce6:	4158      	adcs	r0, r3
 8015ce8:	4770      	bx	lr

08015cea <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015cea:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015cee:	1a9b      	subs	r3, r3, r2
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	bfdc      	itt	le
 8015cf4:	6882      	ldrle	r2, [r0, #8]
 8015cf6:	189b      	addle	r3, r3, r2
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	bfcc      	ite	gt
 8015cfc:	2000      	movgt	r0, #0
 8015cfe:	2001      	movle	r0, #1
 8015d00:	4770      	bx	lr

08015d02 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015d02:	6902      	ldr	r2, [r0, #16]
 8015d04:	6840      	ldr	r0, [r0, #4]
 8015d06:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015d0a:	4770      	bx	lr

08015d0c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015d0c:	6803      	ldr	r3, [r0, #0]
 8015d0e:	691b      	ldr	r3, [r3, #16]
 8015d10:	4718      	bx	r3

08015d12 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015d12:	4770      	bx	lr

08015d14 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015d14:	4770      	bx	lr
	...

08015d18 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015d18:	2301      	movs	r3, #1
 8015d1a:	b570      	push	{r4, r5, r6, lr}
 8015d1c:	7203      	strb	r3, [r0, #8]
 8015d1e:	4604      	mov	r4, r0
 8015d20:	6840      	ldr	r0, [r0, #4]
 8015d22:	6803      	ldr	r3, [r0, #0]
 8015d24:	699b      	ldr	r3, [r3, #24]
 8015d26:	4798      	blx	r3
 8015d28:	6803      	ldr	r3, [r0, #0]
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	2b08      	cmp	r3, #8
 8015d2e:	d01e      	beq.n	8015d6e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8015d30:	d80b      	bhi.n	8015d4a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015d32:	2b02      	cmp	r3, #2
 8015d34:	d027      	beq.n	8015d86 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8015d36:	2b04      	cmp	r3, #4
 8015d38:	d011      	beq.n	8015d5e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015d3a:	2b01      	cmp	r3, #1
 8015d3c:	d028      	beq.n	8015d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015d3e:	4b17      	ldr	r3, [pc, #92]	; (8015d9c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8015d40:	218b      	movs	r1, #139	; 0x8b
 8015d42:	4a17      	ldr	r2, [pc, #92]	; (8015da0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8015d44:	4817      	ldr	r0, [pc, #92]	; (8015da4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8015d46:	f00e fa7f 	bl	8024248 <__assert_func>
 8015d4a:	2b40      	cmp	r3, #64	; 0x40
 8015d4c:	d020      	beq.n	8015d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015d4e:	d801      	bhi.n	8015d54 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015d50:	2b20      	cmp	r3, #32
 8015d52:	e7f3      	b.n	8015d3c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015d54:	2b80      	cmp	r3, #128	; 0x80
 8015d56:	d01b      	beq.n	8015d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d5c:	e7ee      	b.n	8015d3c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015d5e:	6823      	ldr	r3, [r4, #0]
 8015d60:	7f01      	ldrb	r1, [r0, #28]
 8015d62:	4620      	mov	r0, r4
 8015d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d66:	4798      	blx	r3
 8015d68:	6823      	ldr	r3, [r4, #0]
 8015d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d6c:	e006      	b.n	8015d7c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015d6e:	6823      	ldr	r3, [r4, #0]
 8015d70:	7f01      	ldrb	r1, [r0, #28]
 8015d72:	4620      	mov	r0, r4
 8015d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d76:	4798      	blx	r3
 8015d78:	6823      	ldr	r3, [r4, #0]
 8015d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d7c:	4629      	mov	r1, r5
 8015d7e:	4620      	mov	r0, r4
 8015d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d84:	4718      	bx	r3
 8015d86:	6823      	ldr	r3, [r4, #0]
 8015d88:	4620      	mov	r0, r4
 8015d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d8c:	4798      	blx	r3
 8015d8e:	e7f3      	b.n	8015d78 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8015d90:	6823      	ldr	r3, [r4, #0]
 8015d92:	4620      	mov	r0, r4
 8015d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d96:	4798      	blx	r3
 8015d98:	e7e6      	b.n	8015d68 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8015d9a:	bf00      	nop
 8015d9c:	08027129 	.word	0x08027129
 8015da0:	08027238 	.word	0x08027238
 8015da4:	0802714e 	.word	0x0802714e

08015da8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015da8:	b570      	push	{r4, r5, r6, lr}
 8015daa:	4604      	mov	r4, r0
 8015dac:	460e      	mov	r6, r1
 8015dae:	6860      	ldr	r0, [r4, #4]
 8015db0:	6803      	ldr	r3, [r0, #0]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	4798      	blx	r3
 8015db6:	2800      	cmp	r0, #0
 8015db8:	d1f9      	bne.n	8015dae <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015dba:	4d0b      	ldr	r5, [pc, #44]	; (8015de8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8015dbc:	6828      	ldr	r0, [r5, #0]
 8015dbe:	6803      	ldr	r3, [r0, #0]
 8015dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015dc2:	4798      	blx	r3
 8015dc4:	f7fd f8b0 	bl	8012f28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015dc8:	6860      	ldr	r0, [r4, #4]
 8015dca:	4631      	mov	r1, r6
 8015dcc:	6803      	ldr	r3, [r0, #0]
 8015dce:	689b      	ldr	r3, [r3, #8]
 8015dd0:	4798      	blx	r3
 8015dd2:	6823      	ldr	r3, [r4, #0]
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dd8:	4798      	blx	r3
 8015dda:	6828      	ldr	r0, [r5, #0]
 8015ddc:	6803      	ldr	r3, [r0, #0]
 8015dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015de4:	4718      	bx	r3
 8015de6:	bf00      	nop
 8015de8:	2000bc78 	.word	0x2000bc78

08015dec <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015dec:	b508      	push	{r3, lr}
 8015dee:	f7fd f87f 	bl	8012ef0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015df6:	f7fd b889 	b.w	8012f0c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015dfa <_ZN8touchgfx13DMA_Interface5startEv>:
 8015dfa:	b510      	push	{r4, lr}
 8015dfc:	4604      	mov	r4, r0
 8015dfe:	6840      	ldr	r0, [r0, #4]
 8015e00:	6803      	ldr	r3, [r0, #0]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	4798      	blx	r3
 8015e06:	b948      	cbnz	r0, 8015e1c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015e08:	7a63      	ldrb	r3, [r4, #9]
 8015e0a:	b13b      	cbz	r3, 8015e1c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015e0c:	7a23      	ldrb	r3, [r4, #8]
 8015e0e:	b92b      	cbnz	r3, 8015e1c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015e10:	6823      	ldr	r3, [r4, #0]
 8015e12:	4620      	mov	r0, r4
 8015e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e1a:	4718      	bx	r3
 8015e1c:	bd10      	pop	{r4, pc}
	...

08015e20 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015e20:	b510      	push	{r4, lr}
 8015e22:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8015e26:	1b12      	subs	r2, r2, r4
 8015e28:	2a00      	cmp	r2, #0
 8015e2a:	bfdc      	itt	le
 8015e2c:	6883      	ldrle	r3, [r0, #8]
 8015e2e:	18d2      	addle	r2, r2, r3
 8015e30:	2a01      	cmp	r2, #1
 8015e32:	dd18      	ble.n	8015e66 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015e34:	6843      	ldr	r3, [r0, #4]
 8015e36:	f101 021c 	add.w	r2, r1, #28
 8015e3a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8015e3e:	f851 4b04 	ldr.w	r4, [r1], #4
 8015e42:	4291      	cmp	r1, r2
 8015e44:	f843 4b04 	str.w	r4, [r3], #4
 8015e48:	d1f9      	bne.n	8015e3e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8015e4a:	880a      	ldrh	r2, [r1, #0]
 8015e4c:	801a      	strh	r2, [r3, #0]
 8015e4e:	788a      	ldrb	r2, [r1, #2]
 8015e50:	709a      	strb	r2, [r3, #2]
 8015e52:	68c3      	ldr	r3, [r0, #12]
 8015e54:	6882      	ldr	r2, [r0, #8]
 8015e56:	f3bf 8f5b 	dmb	ish
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	bfd8      	it	le
 8015e60:	1a9b      	suble	r3, r3, r2
 8015e62:	60c3      	str	r3, [r0, #12]
 8015e64:	bd10      	pop	{r4, pc}
 8015e66:	4b03      	ldr	r3, [pc, #12]	; (8015e74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8015e68:	2139      	movs	r1, #57	; 0x39
 8015e6a:	4a03      	ldr	r2, [pc, #12]	; (8015e78 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015e6c:	4803      	ldr	r0, [pc, #12]	; (8015e7c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015e6e:	f00e f9eb 	bl	8024248 <__assert_func>
 8015e72:	bf00      	nop
 8015e74:	08027174 	.word	0x08027174
 8015e78:	08027268 	.word	0x08027268
 8015e7c:	0802714e 	.word	0x0802714e

08015e80 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015e80:	b510      	push	{r4, lr}
 8015e82:	6803      	ldr	r3, [r0, #0]
 8015e84:	4604      	mov	r4, r0
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	4798      	blx	r3
 8015e8a:	b128      	cbz	r0, 8015e98 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8015e8c:	4b07      	ldr	r3, [pc, #28]	; (8015eac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8015e8e:	213f      	movs	r1, #63	; 0x3f
 8015e90:	4a07      	ldr	r2, [pc, #28]	; (8015eb0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8015e92:	4808      	ldr	r0, [pc, #32]	; (8015eb4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8015e94:	f00e f9d8 	bl	8024248 <__assert_func>
 8015e98:	6923      	ldr	r3, [r4, #16]
 8015e9a:	68a2      	ldr	r2, [r4, #8]
 8015e9c:	f3bf 8f5b 	dmb	ish
 8015ea0:	3301      	adds	r3, #1
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	bfd8      	it	le
 8015ea6:	1a9b      	suble	r3, r3, r2
 8015ea8:	6123      	str	r3, [r4, #16]
 8015eaa:	bd10      	pop	{r4, pc}
 8015eac:	08027197 	.word	0x08027197
 8015eb0:	080272b6 	.word	0x080272b6
 8015eb4:	0802714e 	.word	0x0802714e

08015eb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015eb8:	b570      	push	{r4, r5, r6, lr}
 8015eba:	4604      	mov	r4, r0
 8015ebc:	6840      	ldr	r0, [r0, #4]
 8015ebe:	6803      	ldr	r3, [r0, #0]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	4798      	blx	r3
 8015ec4:	4605      	mov	r5, r0
 8015ec6:	b930      	cbnz	r0, 8015ed6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015ec8:	7a23      	ldrb	r3, [r4, #8]
 8015eca:	b123      	cbz	r3, 8015ed6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015ecc:	6860      	ldr	r0, [r4, #4]
 8015ece:	6803      	ldr	r3, [r0, #0]
 8015ed0:	695b      	ldr	r3, [r3, #20]
 8015ed2:	4798      	blx	r3
 8015ed4:	7225      	strb	r5, [r4, #8]
 8015ed6:	6860      	ldr	r0, [r4, #4]
 8015ed8:	6803      	ldr	r3, [r0, #0]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	4798      	blx	r3
 8015ede:	b928      	cbnz	r0, 8015eec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015ee0:	6823      	ldr	r3, [r4, #0]
 8015ee2:	4620      	mov	r0, r4
 8015ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015eea:	4718      	bx	r3
 8015eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ef0:	f7fd b826 	b.w	8012f40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015ef4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015ef4:	b510      	push	{r4, lr}
 8015ef6:	6082      	str	r2, [r0, #8]
 8015ef8:	2200      	movs	r2, #0
 8015efa:	4c03      	ldr	r4, [pc, #12]	; (8015f08 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015efc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015f00:	e9c0 4100 	strd	r4, r1, [r0]
 8015f04:	bd10      	pop	{r4, pc}
 8015f06:	bf00      	nop
 8015f08:	0802721c 	.word	0x0802721c

08015f0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015f0c:	6840      	ldr	r0, [r0, #4]
 8015f0e:	6803      	ldr	r3, [r0, #0]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	4718      	bx	r3

08015f14 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8015f14:	2001      	movs	r0, #1
 8015f16:	4770      	bx	lr

08015f18 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8015f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f1c:	460d      	mov	r5, r1
 8015f1e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015f22:	b085      	sub	sp, #20
 8015f24:	4690      	mov	r8, r2
 8015f26:	4411      	add	r1, r2
 8015f28:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015f2c:	4699      	mov	r9, r3
 8015f2e:	6803      	ldr	r3, [r0, #0]
 8015f30:	60c1      	str	r1, [r0, #12]
 8015f32:	4604      	mov	r4, r0
 8015f34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015f36:	440a      	add	r2, r1
 8015f38:	6102      	str	r2, [r0, #16]
 8015f3a:	68db      	ldr	r3, [r3, #12]
 8015f3c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8015f40:	4798      	blx	r3
 8015f42:	2800      	cmp	r0, #0
 8015f44:	d039      	beq.n	8015fba <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8015f46:	44c8      	add	r8, r9
 8015f48:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015f4c:	4445      	add	r5, r8
 8015f4e:	6823      	ldr	r3, [r4, #0]
 8015f50:	f10d 020f 	add.w	r2, sp, #15
 8015f54:	a903      	add	r1, sp, #12
 8015f56:	4620      	mov	r0, r4
 8015f58:	9200      	str	r2, [sp, #0]
 8015f5a:	f10d 020d 	add.w	r2, sp, #13
 8015f5e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8015f62:	f10d 030e 	add.w	r3, sp, #14
 8015f66:	47c0      	blx	r8
 8015f68:	b1f8      	cbz	r0, 8015faa <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8015f6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015f6e:	7a20      	ldrb	r0, [r4, #8]
 8015f70:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8015f74:	4358      	muls	r0, r3
 8015f76:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8015f7a:	1c43      	adds	r3, r0, #1
 8015f7c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8015f80:	f817 0b01 	ldrb.w	r0, [r7], #1
 8015f84:	121b      	asrs	r3, r3, #8
 8015f86:	fb10 f003 	smulbb	r0, r0, r3
 8015f8a:	b283      	uxth	r3, r0
 8015f8c:	1c58      	adds	r0, r3, #1
 8015f8e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015f92:	6823      	ldr	r3, [r4, #0]
 8015f94:	1200      	asrs	r0, r0, #8
 8015f96:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8015f9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015f9e:	28ff      	cmp	r0, #255	; 0xff
 8015fa0:	d10e      	bne.n	8015fc0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8015fa2:	9100      	str	r1, [sp, #0]
 8015fa4:	4629      	mov	r1, r5
 8015fa6:	4620      	mov	r0, r4
 8015fa8:	47c0      	blx	r8
 8015faa:	68e3      	ldr	r3, [r4, #12]
 8015fac:	3e01      	subs	r6, #1
 8015fae:	f105 0503 	add.w	r5, r5, #3
 8015fb2:	f103 0301 	add.w	r3, r3, #1
 8015fb6:	60e3      	str	r3, [r4, #12]
 8015fb8:	d1c9      	bne.n	8015f4e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8015fba:	b005      	add	sp, #20
 8015fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fc0:	fa1f fc80 	uxth.w	ip, r0
 8015fc4:	43c0      	mvns	r0, r0
 8015fc6:	f895 e002 	ldrb.w	lr, [r5, #2]
 8015fca:	fb12 f20c 	smulbb	r2, r2, ip
 8015fce:	b2c0      	uxtb	r0, r0
 8015fd0:	fb13 f30c 	smulbb	r3, r3, ip
 8015fd4:	fb0e 2200 	mla	r2, lr, r0, r2
 8015fd8:	f895 e001 	ldrb.w	lr, [r5, #1]
 8015fdc:	fb11 f10c 	smulbb	r1, r1, ip
 8015fe0:	fb0e 3300 	mla	r3, lr, r0, r3
 8015fe4:	f895 e000 	ldrb.w	lr, [r5]
 8015fe8:	b292      	uxth	r2, r2
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	fb0e 1000 	mla	r0, lr, r0, r1
 8015ff0:	1c59      	adds	r1, r3, #1
 8015ff2:	b280      	uxth	r0, r0
 8015ff4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015ff8:	1c51      	adds	r1, r2, #1
 8015ffa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015ffe:	1c41      	adds	r1, r0, #1
 8016000:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016004:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016008:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801600c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016010:	9000      	str	r0, [sp, #0]
 8016012:	e7c7      	b.n	8015fa4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016014 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016014:	f89d 0000 	ldrb.w	r0, [sp]
 8016018:	704b      	strb	r3, [r1, #1]
 801601a:	7008      	strb	r0, [r1, #0]
 801601c:	708a      	strb	r2, [r1, #2]
 801601e:	4770      	bx	lr

08016020 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016020:	4413      	add	r3, r2
 8016022:	7dc2      	ldrb	r2, [r0, #23]
 8016024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016028:	4419      	add	r1, r3
 801602a:	7a03      	ldrb	r3, [r0, #8]
 801602c:	435a      	muls	r2, r3
 801602e:	1c53      	adds	r3, r2, #1
 8016030:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016034:	121b      	asrs	r3, r3, #8
 8016036:	2bff      	cmp	r3, #255	; 0xff
 8016038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801603a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801603e:	d13e      	bne.n	80160be <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016040:	4427      	add	r7, r4
 8016042:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016046:	3103      	adds	r1, #3
 8016048:	7d86      	ldrb	r6, [r0, #22]
 801604a:	2bff      	cmp	r3, #255	; 0xff
 801604c:	d10a      	bne.n	8016064 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801604e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016052:	7d43      	ldrb	r3, [r0, #21]
 8016054:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016058:	7d03      	ldrb	r3, [r0, #20]
 801605a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801605e:	42a7      	cmp	r7, r4
 8016060:	d1ef      	bne.n	8016042 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8016062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016064:	b29a      	uxth	r2, r3
 8016066:	43db      	mvns	r3, r3
 8016068:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801606c:	fb16 f602 	smulbb	r6, r6, r2
 8016070:	b2db      	uxtb	r3, r3
 8016072:	fb05 6503 	mla	r5, r5, r3, r6
 8016076:	b2ad      	uxth	r5, r5
 8016078:	1c6e      	adds	r6, r5, #1
 801607a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801607e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8016082:	fb16 f603 	smulbb	r6, r6, r3
 8016086:	122d      	asrs	r5, r5, #8
 8016088:	f801 5c03 	strb.w	r5, [r1, #-3]
 801608c:	7d45      	ldrb	r5, [r0, #21]
 801608e:	fb05 6502 	mla	r5, r5, r2, r6
 8016092:	b2ad      	uxth	r5, r5
 8016094:	1c6e      	adds	r6, r5, #1
 8016096:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801609a:	122d      	asrs	r5, r5, #8
 801609c:	f801 5c02 	strb.w	r5, [r1, #-2]
 80160a0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80160a4:	7d06      	ldrb	r6, [r0, #20]
 80160a6:	fb15 f303 	smulbb	r3, r5, r3
 80160aa:	fb06 3202 	mla	r2, r6, r2, r3
 80160ae:	b292      	uxth	r2, r2
 80160b0:	1c53      	adds	r3, r2, #1
 80160b2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80160b6:	1212      	asrs	r2, r2, #8
 80160b8:	f801 2c01 	strb.w	r2, [r1, #-1]
 80160bc:	e7cf      	b.n	801605e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 80160be:	b2de      	uxtb	r6, r3
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d0ce      	beq.n	8016062 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 80160c4:	3103      	adds	r1, #3
 80160c6:	4427      	add	r7, r4
 80160c8:	f814 2b01 	ldrb.w	r2, [r4], #1
 80160cc:	3103      	adds	r1, #3
 80160ce:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 80160d2:	fb02 f306 	mul.w	r3, r2, r6
 80160d6:	42bc      	cmp	r4, r7
 80160d8:	f103 0201 	add.w	r2, r3, #1
 80160dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80160e0:	ea4f 2222 	mov.w	r2, r2, asr #8
 80160e4:	b295      	uxth	r5, r2
 80160e6:	ea6f 0202 	mvn.w	r2, r2
 80160ea:	b2d3      	uxtb	r3, r2
 80160ec:	7d82      	ldrb	r2, [r0, #22]
 80160ee:	fb1c fc03 	smulbb	ip, ip, r3
 80160f2:	fb02 c205 	mla	r2, r2, r5, ip
 80160f6:	b292      	uxth	r2, r2
 80160f8:	f102 0c01 	add.w	ip, r2, #1
 80160fc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016100:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016104:	fb1c fc03 	smulbb	ip, ip, r3
 8016108:	ea4f 2222 	mov.w	r2, r2, asr #8
 801610c:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016110:	7d42      	ldrb	r2, [r0, #21]
 8016112:	fb02 c205 	mla	r2, r2, r5, ip
 8016116:	b292      	uxth	r2, r2
 8016118:	f102 0c01 	add.w	ip, r2, #1
 801611c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016120:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016124:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016128:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801612c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016130:	fb12 f303 	smulbb	r3, r2, r3
 8016134:	fb0c 3305 	mla	r3, ip, r5, r3
 8016138:	b29b      	uxth	r3, r3
 801613a:	f103 0201 	add.w	r2, r3, #1
 801613e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016142:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016146:	f801 3c04 	strb.w	r3, [r1, #-4]
 801614a:	d1bd      	bne.n	80160c8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801614c:	e789      	b.n	8016062 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801614e <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801614e:	b510      	push	{r4, lr}
 8016150:	7d04      	ldrb	r4, [r0, #20]
 8016152:	700c      	strb	r4, [r1, #0]
 8016154:	7d41      	ldrb	r1, [r0, #21]
 8016156:	7011      	strb	r1, [r2, #0]
 8016158:	7d82      	ldrb	r2, [r0, #22]
 801615a:	701a      	strb	r2, [r3, #0]
 801615c:	9b02      	ldr	r3, [sp, #8]
 801615e:	7dc2      	ldrb	r2, [r0, #23]
 8016160:	2001      	movs	r0, #1
 8016162:	701a      	strb	r2, [r3, #0]
 8016164:	bd10      	pop	{r4, pc}

08016166 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8016166:	b570      	push	{r4, r5, r6, lr}
 8016168:	4616      	mov	r6, r2
 801616a:	4604      	mov	r4, r0
 801616c:	460d      	mov	r5, r1
 801616e:	f7f8 ff8b 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8016172:	6803      	ldr	r3, [r0, #0]
 8016174:	4629      	mov	r1, r5
 8016176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016178:	4798      	blx	r3
 801617a:	7520      	strb	r0, [r4, #20]
 801617c:	f7f8 ff84 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8016180:	6803      	ldr	r3, [r0, #0]
 8016182:	4629      	mov	r1, r5
 8016184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016186:	4798      	blx	r3
 8016188:	7560      	strb	r0, [r4, #21]
 801618a:	f7f8 ff7d 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 801618e:	6803      	ldr	r3, [r0, #0]
 8016190:	4629      	mov	r1, r5
 8016192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016194:	4798      	blx	r3
 8016196:	75e6      	strb	r6, [r4, #23]
 8016198:	75a0      	strb	r0, [r4, #22]
 801619a:	bd70      	pop	{r4, r5, r6, pc}

0801619c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801619e:	460e      	mov	r6, r1
 80161a0:	4617      	mov	r7, r2
 80161a2:	4604      	mov	r4, r0
 80161a4:	f000 f832 	bl	801620c <_ZN8touchgfx15AbstractPainterC1Ev>
 80161a8:	4b12      	ldr	r3, [pc, #72]	; (80161f4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 80161aa:	6023      	str	r3, [r4, #0]
 80161ac:	f7f8 ff6c 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 80161b0:	6803      	ldr	r3, [r0, #0]
 80161b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b4:	4798      	blx	r3
 80161b6:	1e43      	subs	r3, r0, #1
 80161b8:	425d      	negs	r5, r3
 80161ba:	415d      	adcs	r5, r3
 80161bc:	4b0e      	ldr	r3, [pc, #56]	; (80161f8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80161c2:	b130      	cbz	r0, 80161d2 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 80161c4:	6803      	ldr	r3, [r0, #0]
 80161c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c8:	4798      	blx	r3
 80161ca:	2801      	cmp	r0, #1
 80161cc:	bf08      	it	eq
 80161ce:	f045 0501 	orreq.w	r5, r5, #1
 80161d2:	b92d      	cbnz	r5, 80161e0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 80161d4:	4b09      	ldr	r3, [pc, #36]	; (80161fc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 80161d6:	2129      	movs	r1, #41	; 0x29
 80161d8:	4a09      	ldr	r2, [pc, #36]	; (8016200 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 80161da:	480a      	ldr	r0, [pc, #40]	; (8016204 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 80161dc:	f00e f834 	bl	8024248 <__assert_func>
 80161e0:	4b09      	ldr	r3, [pc, #36]	; (8016208 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 80161e2:	4620      	mov	r0, r4
 80161e4:	463a      	mov	r2, r7
 80161e6:	4631      	mov	r1, r6
 80161e8:	6023      	str	r3, [r4, #0]
 80161ea:	f7ff ffbc 	bl	8016166 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80161ee:	4620      	mov	r0, r4
 80161f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161f2:	bf00      	nop
 80161f4:	080272f0 	.word	0x080272f0
 80161f8:	2000bc78 	.word	0x2000bc78
 80161fc:	08027308 	.word	0x08027308
 8016200:	080273cc 	.word	0x080273cc
 8016204:	08027366 	.word	0x08027366
 8016208:	080273b4 	.word	0x080273b4

0801620c <_ZN8touchgfx15AbstractPainterC1Ev>:
 801620c:	4a03      	ldr	r2, [pc, #12]	; (801621c <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801620e:	6002      	str	r2, [r0, #0]
 8016210:	2200      	movs	r2, #0
 8016212:	6042      	str	r2, [r0, #4]
 8016214:	22ff      	movs	r2, #255	; 0xff
 8016216:	7202      	strb	r2, [r0, #8]
 8016218:	4770      	bx	lr
 801621a:	bf00      	nop
 801621c:	08027410 	.word	0x08027410

08016220 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016220:	4770      	bx	lr

08016222 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8016222:	8081      	strh	r1, [r0, #4]
 8016224:	80c2      	strh	r2, [r0, #6]
 8016226:	4770      	bx	lr

08016228 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016228:	7201      	strb	r1, [r0, #8]
 801622a:	4770      	bx	lr

0801622c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801622c:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016230:	4770      	bx	lr

08016232 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016232:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016236:	4770      	bx	lr

08016238 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016238:	6281      	str	r1, [r0, #40]	; 0x28
 801623a:	4770      	bx	lr

0801623c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801623c:	b513      	push	{r0, r1, r4, lr}
 801623e:	6803      	ldr	r3, [r0, #0]
 8016240:	4604      	mov	r4, r0
 8016242:	4601      	mov	r1, r0
 8016244:	4668      	mov	r0, sp
 8016246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016248:	4798      	blx	r3
 801624a:	6823      	ldr	r3, [r4, #0]
 801624c:	4669      	mov	r1, sp
 801624e:	4620      	mov	r0, r4
 8016250:	691b      	ldr	r3, [r3, #16]
 8016252:	4798      	blx	r3
 8016254:	b002      	add	sp, #8
 8016256:	bd10      	pop	{r4, pc}

08016258 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016258:	b510      	push	{r4, lr}
 801625a:	2200      	movs	r2, #0
 801625c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016260:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016264:	8002      	strh	r2, [r0, #0]
 8016266:	8042      	strh	r2, [r0, #2]
 8016268:	8084      	strh	r4, [r0, #4]
 801626a:	80c1      	strh	r1, [r0, #6]
 801626c:	bd10      	pop	{r4, pc}

0801626e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801626e:	2200      	movs	r2, #0
 8016270:	8002      	strh	r2, [r0, #0]
 8016272:	8042      	strh	r2, [r0, #2]
 8016274:	8082      	strh	r2, [r0, #4]
 8016276:	80c2      	strh	r2, [r0, #6]
 8016278:	4770      	bx	lr
	...

0801627c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801627c:	b508      	push	{r3, lr}
 801627e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016280:	b928      	cbnz	r0, 801628e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016282:	4b03      	ldr	r3, [pc, #12]	; (8016290 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016284:	2127      	movs	r1, #39	; 0x27
 8016286:	4a03      	ldr	r2, [pc, #12]	; (8016294 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016288:	4803      	ldr	r0, [pc, #12]	; (8016298 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801628a:	f00d ffdd 	bl	8024248 <__assert_func>
 801628e:	bd08      	pop	{r3, pc}
 8016290:	0802741c 	.word	0x0802741c
 8016294:	08027500 	.word	0x08027500
 8016298:	08027443 	.word	0x08027443

0801629c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a0:	b089      	sub	sp, #36	; 0x24
 80162a2:	4604      	mov	r4, r0
 80162a4:	6808      	ldr	r0, [r1, #0]
 80162a6:	f04f 0a00 	mov.w	sl, #0
 80162aa:	6849      	ldr	r1, [r1, #4]
 80162ac:	ab02      	add	r3, sp, #8
 80162ae:	f04f 0b01 	mov.w	fp, #1
 80162b2:	c303      	stmia	r3!, {r0, r1}
 80162b4:	4b3f      	ldr	r3, [pc, #252]	; (80163b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80162b6:	4621      	mov	r1, r4
 80162b8:	a804      	add	r0, sp, #16
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	2b01      	cmp	r3, #1
 80162be:	6823      	ldr	r3, [r4, #0]
 80162c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162c2:	bf1f      	itttt	ne
 80162c4:	f10d 0906 	addne.w	r9, sp, #6
 80162c8:	ae03      	addne	r6, sp, #12
 80162ca:	f10d 050e 	addne.w	r5, sp, #14
 80162ce:	f10d 080a 	addne.w	r8, sp, #10
 80162d2:	bf01      	itttt	eq
 80162d4:	f10d 090e 	addeq.w	r9, sp, #14
 80162d8:	f10d 0606 	addeq.w	r6, sp, #6
 80162dc:	ad03      	addeq	r5, sp, #12
 80162de:	f10d 0808 	addeq.w	r8, sp, #8
 80162e2:	4798      	blx	r3
 80162e4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80162e8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d056      	beq.n	801639e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80162f0:	4293      	cmp	r3, r2
 80162f2:	bfa8      	it	ge
 80162f4:	4613      	movge	r3, r2
 80162f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80162fa:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80162fe:	2f00      	cmp	r7, #0
 8016300:	dd34      	ble.n	801636c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016302:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016306:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801630a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801630e:	4484      	add	ip, r0
 8016310:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016314:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016318:	fa0f fc8c 	sxth.w	ip, ip
 801631c:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016320:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016324:	4562      	cmp	r2, ip
 8016326:	f8ad 301a 	strh.w	r3, [sp, #26]
 801632a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801632e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016332:	da29      	bge.n	8016388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016334:	4472      	add	r2, lr
 8016336:	b212      	sxth	r2, r2
 8016338:	4290      	cmp	r0, r2
 801633a:	da25      	bge.n	8016388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801633c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016340:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016344:	4402      	add	r2, r0
 8016346:	b212      	sxth	r2, r2
 8016348:	4293      	cmp	r3, r2
 801634a:	da1d      	bge.n	8016388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801634c:	440b      	add	r3, r1
 801634e:	b21b      	sxth	r3, r3
 8016350:	4298      	cmp	r0, r3
 8016352:	da19      	bge.n	8016388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016354:	6823      	ldr	r3, [r4, #0]
 8016356:	a906      	add	r1, sp, #24
 8016358:	4620      	mov	r0, r4
 801635a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801635c:	4798      	blx	r3
 801635e:	b998      	cbnz	r0, 8016388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016360:	107f      	asrs	r7, r7, #1
 8016362:	f04f 0a01 	mov.w	sl, #1
 8016366:	f8ad 7006 	strh.w	r7, [sp, #6]
 801636a:	e7c6      	b.n	80162fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801636c:	d10c      	bne.n	8016388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801636e:	f8ad b006 	strh.w	fp, [sp, #6]
 8016372:	f8b8 2000 	ldrh.w	r2, [r8]
 8016376:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801637a:	440a      	add	r2, r1
 801637c:	f8a8 2000 	strh.w	r2, [r8]
 8016380:	882b      	ldrh	r3, [r5, #0]
 8016382:	1a5b      	subs	r3, r3, r1
 8016384:	802b      	strh	r3, [r5, #0]
 8016386:	e7ad      	b.n	80162e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016388:	f1ba 0f00 	cmp.w	sl, #0
 801638c:	d0f1      	beq.n	8016372 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801638e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016392:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016396:	429a      	cmp	r2, r3
 8016398:	bf08      	it	eq
 801639a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801639c:	e7e9      	b.n	8016372 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801639e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80163a2:	429a      	cmp	r2, r3
 80163a4:	bf04      	itt	eq
 80163a6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80163aa:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80163ac:	b009      	add	sp, #36	; 0x24
 80163ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b2:	bf00      	nop
 80163b4:	2000bc70 	.word	0x2000bc70

080163b8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80163b8:	2200      	movs	r2, #0
 80163ba:	2101      	movs	r1, #1
 80163bc:	8082      	strh	r2, [r0, #4]
 80163be:	80c2      	strh	r2, [r0, #6]
 80163c0:	8102      	strh	r2, [r0, #8]
 80163c2:	8142      	strh	r2, [r0, #10]
 80163c4:	8182      	strh	r2, [r0, #12]
 80163c6:	81c2      	strh	r2, [r0, #14]
 80163c8:	8202      	strh	r2, [r0, #16]
 80163ca:	8242      	strh	r2, [r0, #18]
 80163cc:	61c2      	str	r2, [r0, #28]
 80163ce:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80163d2:	6282      	str	r2, [r0, #40]	; 0x28
 80163d4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80163d8:	4905      	ldr	r1, [pc, #20]	; (80163f0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 80163da:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80163de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80163e2:	6001      	str	r1, [r0, #0]
 80163e4:	8582      	strh	r2, [r0, #44]	; 0x2c
 80163e6:	22ff      	movs	r2, #255	; 0xff
 80163e8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80163ec:	4770      	bx	lr
 80163ee:	bf00      	nop
 80163f0:	08027488 	.word	0x08027488

080163f4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80163f4:	4770      	bx	lr

080163f6 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80163f6:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80163fa:	4602      	mov	r2, r0
 80163fc:	cb03      	ldmia	r3!, {r0, r1}
 80163fe:	6010      	str	r0, [r2, #0]
 8016400:	4610      	mov	r0, r2
 8016402:	6051      	str	r1, [r2, #4]
 8016404:	4770      	bx	lr

08016406 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801640a:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801640e:	b395      	cbz	r5, 8016476 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016410:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016414:	f1bc 0f00 	cmp.w	ip, #0
 8016418:	d02d      	beq.n	8016476 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801641a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801641e:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016422:	b354      	cbz	r4, 801647a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016424:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016428:	b33f      	cbz	r7, 801647a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801642a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801642e:	4475      	add	r5, lr
 8016430:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016434:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016438:	45f0      	cmp	r8, lr
 801643a:	4646      	mov	r6, r8
 801643c:	4444      	add	r4, r8
 801643e:	bfa8      	it	ge
 8016440:	4676      	movge	r6, lr
 8016442:	4293      	cmp	r3, r2
 8016444:	4619      	mov	r1, r3
 8016446:	443b      	add	r3, r7
 8016448:	bfa8      	it	ge
 801644a:	4611      	movge	r1, r2
 801644c:	4462      	add	r2, ip
 801644e:	b22d      	sxth	r5, r5
 8016450:	8006      	strh	r6, [r0, #0]
 8016452:	b224      	sxth	r4, r4
 8016454:	8041      	strh	r1, [r0, #2]
 8016456:	b212      	sxth	r2, r2
 8016458:	b21b      	sxth	r3, r3
 801645a:	42a5      	cmp	r5, r4
 801645c:	bfac      	ite	ge
 801645e:	ebc6 0405 	rsbge	r4, r6, r5
 8016462:	ebc6 0404 	rsblt	r4, r6, r4
 8016466:	429a      	cmp	r2, r3
 8016468:	bfac      	ite	ge
 801646a:	ebc1 0302 	rsbge	r3, r1, r2
 801646e:	ebc1 0303 	rsblt	r3, r1, r3
 8016472:	8084      	strh	r4, [r0, #4]
 8016474:	80c3      	strh	r3, [r0, #6]
 8016476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801647a:	f8a0 e000 	strh.w	lr, [r0]
 801647e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016482:	8043      	strh	r3, [r0, #2]
 8016484:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016488:	8083      	strh	r3, [r0, #4]
 801648a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801648e:	e7f1      	b.n	8016474 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016490 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016490:	b507      	push	{r0, r1, r2, lr}
 8016492:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016496:	ab01      	add	r3, sp, #4
 8016498:	6809      	ldr	r1, [r1, #0]
 801649a:	6800      	ldr	r0, [r0, #0]
 801649c:	f002 fc4f 	bl	8018d3e <_ZN8touchgfx6muldivElllRl>
 80164a0:	b003      	add	sp, #12
 80164a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080164a8 <_ZN8touchgfx7CWRUtil4sineEi>:
 80164a8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80164ac:	fb90 f3f2 	sdiv	r3, r0, r2
 80164b0:	fb03 0312 	mls	r3, r3, r2, r0
 80164b4:	4413      	add	r3, r2
 80164b6:	fb93 f0f2 	sdiv	r0, r3, r2
 80164ba:	fb02 3010 	mls	r0, r2, r0, r3
 80164be:	4b0a      	ldr	r3, [pc, #40]	; (80164e8 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80164c0:	285a      	cmp	r0, #90	; 0x5a
 80164c2:	dc02      	bgt.n	80164ca <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80164c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80164c8:	4770      	bx	lr
 80164ca:	28b4      	cmp	r0, #180	; 0xb4
 80164cc:	dc02      	bgt.n	80164d4 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80164ce:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80164d2:	e7f7      	b.n	80164c4 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80164d4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80164d8:	bfd4      	ite	le
 80164da:	38b4      	suble	r0, #180	; 0xb4
 80164dc:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80164e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80164e4:	4240      	negs	r0, r0
 80164e6:	4770      	bx	lr
 80164e8:	080275aa 	.word	0x080275aa

080164ec <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80164ec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80164f0:	f04f 0300 	mov.w	r3, #0
 80164f4:	bf2c      	ite	cs
 80164f6:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80164fa:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80164fe:	1899      	adds	r1, r3, r2
 8016500:	4288      	cmp	r0, r1
 8016502:	bf24      	itt	cs
 8016504:	1853      	addcs	r3, r2, r1
 8016506:	1a40      	subcs	r0, r0, r1
 8016508:	0892      	lsrs	r2, r2, #2
 801650a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801650e:	d1f6      	bne.n	80164fe <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016510:	4618      	mov	r0, r3
 8016512:	4770      	bx	lr

08016514 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016514:	2800      	cmp	r0, #0
 8016516:	b508      	push	{r3, lr}
 8016518:	da05      	bge.n	8016526 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801651a:	4240      	negs	r0, r0
 801651c:	f7ff fffa 	bl	8016514 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016520:	4240      	negs	r0, r0
 8016522:	b240      	sxtb	r0, r0
 8016524:	bd08      	pop	{r3, pc}
 8016526:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801652a:	dc11      	bgt.n	8016550 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801652c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016530:	dd09      	ble.n	8016546 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016532:	4340      	muls	r0, r0
 8016534:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016538:	f7ff ffd8 	bl	80164ec <_ZN8touchgfx7CWRUtil5isqrtEm>
 801653c:	f7ff ffea 	bl	8016514 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016540:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016544:	e7ed      	b.n	8016522 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016546:	3003      	adds	r0, #3
 8016548:	4b02      	ldr	r3, [pc, #8]	; (8016554 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801654a:	10c0      	asrs	r0, r0, #3
 801654c:	5618      	ldrsb	r0, [r3, r0]
 801654e:	e7e9      	b.n	8016524 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016550:	2000      	movs	r0, #0
 8016552:	e7e7      	b.n	8016524 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016554:	0802754e 	.word	0x0802754e

08016558 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801655a:	460c      	mov	r4, r1
 801655c:	1e01      	subs	r1, r0, #0
 801655e:	4615      	mov	r5, r2
 8016560:	db01      	blt.n	8016566 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016562:	2c00      	cmp	r4, #0
 8016564:	da06      	bge.n	8016574 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016566:	4b11      	ldr	r3, [pc, #68]	; (80165ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016568:	f240 3197 	movw	r1, #919	; 0x397
 801656c:	4a10      	ldr	r2, [pc, #64]	; (80165b0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801656e:	4811      	ldr	r0, [pc, #68]	; (80165b4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016570:	f00d fe6a 	bl	8024248 <__assert_func>
 8016574:	428c      	cmp	r4, r1
 8016576:	dd06      	ble.n	8016586 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8016578:	4620      	mov	r0, r4
 801657a:	f7ff ffed 	bl	8016558 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801657e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016582:	b003      	add	sp, #12
 8016584:	bd30      	pop	{r4, r5, pc}
 8016586:	4349      	muls	r1, r1
 8016588:	fb04 1004 	mla	r0, r4, r4, r1
 801658c:	f7ff ffae 	bl	80164ec <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016590:	6028      	str	r0, [r5, #0]
 8016592:	2800      	cmp	r0, #0
 8016594:	d0f5      	beq.n	8016582 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016596:	4602      	mov	r2, r0
 8016598:	ab01      	add	r3, sp, #4
 801659a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801659e:	4620      	mov	r0, r4
 80165a0:	f002 fbcd 	bl	8018d3e <_ZN8touchgfx6muldivElllRl>
 80165a4:	f7ff ffb6 	bl	8016514 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80165a8:	e7eb      	b.n	8016582 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 80165aa:	bf00      	nop
 80165ac:	08027660 	.word	0x08027660
 80165b0:	08027728 	.word	0x08027728
 80165b4:	08027671 	.word	0x08027671

080165b8 <_ZN8touchgfx4LineC1Ev>:
 80165b8:	b510      	push	{r4, lr}
 80165ba:	4604      	mov	r4, r0
 80165bc:	f7ff fefc 	bl	80163b8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80165c0:	4b0c      	ldr	r3, [pc, #48]	; (80165f4 <_ZN8touchgfx4LineC1Ev+0x3c>)
 80165c2:	2220      	movs	r2, #32
 80165c4:	4620      	mov	r0, r4
 80165c6:	6023      	str	r3, [r4, #0]
 80165c8:	2300      	movs	r3, #0
 80165ca:	6422      	str	r2, [r4, #64]	; 0x40
 80165cc:	2212      	movs	r2, #18
 80165ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80165d2:	6722      	str	r2, [r4, #112]	; 0x70
 80165d4:	60a3      	str	r3, [r4, #8]
 80165d6:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80165da:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80165de:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80165e2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80165e6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80165ea:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80165ee:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80165f2:	bd10      	pop	{r4, pc}
 80165f4:	080276b0 	.word	0x080276b0

080165f8 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80165f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165fc:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80165fe:	b085      	sub	sp, #20
 8016600:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016602:	4604      	mov	r4, r0
 8016604:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016606:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016608:	1af6      	subs	r6, r6, r3
 801660a:	eba5 0502 	sub.w	r5, r5, r2
 801660e:	f040 809b 	bne.w	8016748 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8016612:	b955      	cbnz	r5, 801662a <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8016614:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016618:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801661c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016620:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016624:	b005      	add	sp, #20
 8016626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801662a:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801662e:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8016632:	f04f 0802 	mov.w	r8, #2
 8016636:	463a      	mov	r2, r7
 8016638:	4629      	mov	r1, r5
 801663a:	ab03      	add	r3, sp, #12
 801663c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801663e:	f002 fb7e 	bl	8018d3e <_ZN8touchgfx6muldivElllRl>
 8016642:	ab03      	add	r3, sp, #12
 8016644:	463a      	mov	r2, r7
 8016646:	4631      	mov	r1, r6
 8016648:	fb90 f5f8 	sdiv	r5, r0, r8
 801664c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801664e:	f002 fb76 	bl	8018d3e <_ZN8touchgfx6muldivElllRl>
 8016652:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8016656:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801665a:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801665e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8016660:	fb90 f0f8 	sdiv	r0, r0, r8
 8016664:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016668:	eba8 0305 	sub.w	r3, r8, r5
 801666c:	f1ba 0f00 	cmp.w	sl, #0
 8016670:	f040 80c3 	bne.w	80167fa <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8016674:	64a3      	str	r3, [r4, #72]	; 0x48
 8016676:	19c3      	adds	r3, r0, r7
 8016678:	65a3      	str	r3, [r4, #88]	; 0x58
 801667a:	ebae 0305 	sub.w	r3, lr, r5
 801667e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016680:	eb00 030c 	add.w	r3, r0, ip
 8016684:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016686:	eb05 030e 	add.w	r3, r5, lr
 801668a:	6523      	str	r3, [r4, #80]	; 0x50
 801668c:	ebac 0300 	sub.w	r3, ip, r0
 8016690:	6623      	str	r3, [r4, #96]	; 0x60
 8016692:	eb05 0308 	add.w	r3, r5, r8
 8016696:	6563      	str	r3, [r4, #84]	; 0x54
 8016698:	1a3b      	subs	r3, r7, r0
 801669a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801669c:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 80166a0:	6663      	str	r3, [r4, #100]	; 0x64
 80166a2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80166a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80166a8:	4632      	mov	r2, r6
 80166aa:	9301      	str	r3, [sp, #4]
 80166ac:	9100      	str	r1, [sp, #0]
 80166ae:	f859 bb04 	ldr.w	fp, [r9], #4
 80166b2:	9b00      	ldr	r3, [sp, #0]
 80166b4:	455e      	cmp	r6, fp
 80166b6:	bfa8      	it	ge
 80166b8:	465e      	movge	r6, fp
 80166ba:	455a      	cmp	r2, fp
 80166bc:	bfb8      	it	lt
 80166be:	465a      	movlt	r2, fp
 80166c0:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80166c4:	4559      	cmp	r1, fp
 80166c6:	bfa8      	it	ge
 80166c8:	4659      	movge	r1, fp
 80166ca:	455b      	cmp	r3, fp
 80166cc:	bfb8      	it	lt
 80166ce:	465b      	movlt	r3, fp
 80166d0:	9300      	str	r3, [sp, #0]
 80166d2:	9b01      	ldr	r3, [sp, #4]
 80166d4:	454b      	cmp	r3, r9
 80166d6:	d1ea      	bne.n	80166ae <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 80166d8:	f04f 0b20 	mov.w	fp, #32
 80166dc:	b209      	sxth	r1, r1
 80166de:	b212      	sxth	r2, r2
 80166e0:	f1ba 0f01 	cmp.w	sl, #1
 80166e4:	b236      	sxth	r6, r6
 80166e6:	fb91 f9fb 	sdiv	r9, r1, fp
 80166ea:	f9bd 1000 	ldrsh.w	r1, [sp]
 80166ee:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 80166f2:	fb92 f2fb 	sdiv	r2, r2, fp
 80166f6:	fb91 f1fb 	sdiv	r1, r1, fp
 80166fa:	fb96 f6fb 	sdiv	r6, r6, fp
 80166fe:	f102 0201 	add.w	r2, r2, #1
 8016702:	f101 0101 	add.w	r1, r1, #1
 8016706:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801670a:	eba1 0109 	sub.w	r1, r1, r9
 801670e:	eba2 0606 	sub.w	r6, r2, r6
 8016712:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8016716:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801671a:	d183      	bne.n	8016624 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801671c:	eba8 0305 	sub.w	r3, r8, r5
 8016720:	64a3      	str	r3, [r4, #72]	; 0x48
 8016722:	19c3      	adds	r3, r0, r7
 8016724:	65a3      	str	r3, [r4, #88]	; 0x58
 8016726:	ebae 0305 	sub.w	r3, lr, r5
 801672a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801672c:	eb00 030c 	add.w	r3, r0, ip
 8016730:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016732:	eb05 030e 	add.w	r3, r5, lr
 8016736:	4445      	add	r5, r8
 8016738:	6523      	str	r3, [r4, #80]	; 0x50
 801673a:	ebac 0300 	sub.w	r3, ip, r0
 801673e:	1a38      	subs	r0, r7, r0
 8016740:	6565      	str	r5, [r4, #84]	; 0x54
 8016742:	6623      	str	r3, [r4, #96]	; 0x60
 8016744:	6660      	str	r0, [r4, #100]	; 0x64
 8016746:	e76d      	b.n	8016624 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016748:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801674c:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016750:	2d00      	cmp	r5, #0
 8016752:	f43f af6e 	beq.w	8016632 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016756:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801675a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801675e:	fb93 f2f7 	sdiv	r2, r3, r7
 8016762:	fb07 3312 	mls	r3, r7, r2, r3
 8016766:	b34b      	cbz	r3, 80167bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8016768:	fb97 f2f3 	sdiv	r2, r7, r3
 801676c:	fb03 7712 	mls	r7, r3, r2, r7
 8016770:	2f00      	cmp	r7, #0
 8016772:	d1f4      	bne.n	801675e <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016774:	2b01      	cmp	r3, #1
 8016776:	f24b 5204 	movw	r2, #46340	; 0xb504
 801677a:	bf18      	it	ne
 801677c:	fb96 f6f3 	sdivne	r6, r6, r3
 8016780:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016784:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016788:	bf18      	it	ne
 801678a:	fb95 f5f3 	sdivne	r5, r5, r3
 801678e:	4291      	cmp	r1, r2
 8016790:	dd16      	ble.n	80167c0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016792:	2d00      	cmp	r5, #0
 8016794:	da4d      	bge.n	8016832 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8016796:	4b29      	ldr	r3, [pc, #164]	; (801683c <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8016798:	429d      	cmp	r5, r3
 801679a:	da27      	bge.n	80167ec <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801679c:	426a      	negs	r2, r5
 801679e:	f24b 5304 	movw	r3, #46340	; 0xb504
 80167a2:	fb91 f1f3 	sdiv	r1, r1, r3
 80167a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80167aa:	4299      	cmp	r1, r3
 80167ac:	bfcc      	ite	gt
 80167ae:	1c4b      	addgt	r3, r1, #1
 80167b0:	3301      	addle	r3, #1
 80167b2:	fb96 f6f3 	sdiv	r6, r6, r3
 80167b6:	fb95 f5f3 	sdiv	r5, r5, r3
 80167ba:	e00f      	b.n	80167dc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 80167bc:	463b      	mov	r3, r7
 80167be:	e7d9      	b.n	8016774 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 80167c0:	2d00      	cmp	r5, #0
 80167c2:	fb92 f2f1 	sdiv	r2, r2, r1
 80167c6:	da13      	bge.n	80167f0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 80167c8:	4269      	negs	r1, r5
 80167ca:	f24b 5304 	movw	r3, #46340	; 0xb504
 80167ce:	fb93 f3f1 	sdiv	r3, r3, r1
 80167d2:	429a      	cmp	r2, r3
 80167d4:	bfa8      	it	ge
 80167d6:	461a      	movge	r2, r3
 80167d8:	4356      	muls	r6, r2
 80167da:	4355      	muls	r5, r2
 80167dc:	fb05 f005 	mul.w	r0, r5, r5
 80167e0:	fb06 0006 	mla	r0, r6, r6, r0
 80167e4:	f7ff fe82 	bl	80164ec <_ZN8touchgfx7CWRUtil5isqrtEm>
 80167e8:	4607      	mov	r7, r0
 80167ea:	e722      	b.n	8016632 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80167ec:	2200      	movs	r2, #0
 80167ee:	e7eb      	b.n	80167c8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 80167f0:	4629      	mov	r1, r5
 80167f2:	e7ea      	b.n	80167ca <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80167f4:	4629      	mov	r1, r5
 80167f6:	2200      	movs	r2, #0
 80167f8:	e7e7      	b.n	80167ca <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80167fa:	1a1b      	subs	r3, r3, r0
 80167fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80167fe:	19c3      	adds	r3, r0, r7
 8016800:	1b5b      	subs	r3, r3, r5
 8016802:	65a3      	str	r3, [r4, #88]	; 0x58
 8016804:	ebae 0305 	sub.w	r3, lr, r5
 8016808:	4403      	add	r3, r0
 801680a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801680c:	eb00 030c 	add.w	r3, r0, ip
 8016810:	442b      	add	r3, r5
 8016812:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016814:	eb05 030e 	add.w	r3, r5, lr
 8016818:	4403      	add	r3, r0
 801681a:	6523      	str	r3, [r4, #80]	; 0x50
 801681c:	ebac 0300 	sub.w	r3, ip, r0
 8016820:	442b      	add	r3, r5
 8016822:	6623      	str	r3, [r4, #96]	; 0x60
 8016824:	eb05 0308 	add.w	r3, r5, r8
 8016828:	1a1b      	subs	r3, r3, r0
 801682a:	6563      	str	r3, [r4, #84]	; 0x54
 801682c:	1a3b      	subs	r3, r7, r0
 801682e:	1b5b      	subs	r3, r3, r5
 8016830:	e733      	b.n	801669a <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8016832:	4295      	cmp	r5, r2
 8016834:	ddde      	ble.n	80167f4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8016836:	462a      	mov	r2, r5
 8016838:	e7b1      	b.n	801679e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801683a:	bf00      	nop
 801683c:	ffff4afc 	.word	0xffff4afc

08016840 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016840:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016842:	428b      	cmp	r3, r1
 8016844:	d102      	bne.n	801684c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016846:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016848:	4293      	cmp	r3, r2
 801684a:	d003      	beq.n	8016854 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801684c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016850:	f7ff bed2 	b.w	80165f8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016854:	4770      	bx	lr

08016856 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016856:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016858:	428b      	cmp	r3, r1
 801685a:	d102      	bne.n	8016862 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801685c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801685e:	4293      	cmp	r3, r2
 8016860:	d003      	beq.n	801686a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016862:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016866:	f7ff bec7 	b.w	80165f8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801686a:	4770      	bx	lr

0801686c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801686c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016870:	f7ff bec2 	b.w	80165f8 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016874 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016878:	b0b3      	sub	sp, #204	; 0xcc
 801687a:	4604      	mov	r4, r0
 801687c:	460a      	mov	r2, r1
 801687e:	4601      	mov	r1, r0
 8016880:	a804      	add	r0, sp, #16
 8016882:	ad32      	add	r5, sp, #200	; 0xc8
 8016884:	f00c f914 	bl	8022ab0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016888:	2300      	movs	r3, #0
 801688a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801688c:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8016890:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016892:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016894:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016896:	1ac0      	subs	r0, r0, r3
 8016898:	eba1 0102 	sub.w	r1, r1, r2
 801689c:	d43c      	bmi.n	8016918 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801689e:	2900      	cmp	r1, #0
 80168a0:	462a      	mov	r2, r5
 80168a2:	db33      	blt.n	801690c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 80168a4:	f7ff fe58 	bl	8016558 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80168a8:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 80168ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80168ae:	a804      	add	r0, sp, #16
 80168b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80168b2:	f00c fac6 	bl	8022e42 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80168b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80168b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80168ba:	a804      	add	r0, sp, #16
 80168bc:	f00c fa50 	bl	8022d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80168c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80168c4:	2b01      	cmp	r3, #1
 80168c6:	d137      	bne.n	8016938 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80168c8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80168ca:	2eb3      	cmp	r6, #179	; 0xb3
 80168cc:	dc34      	bgt.n	8016938 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80168ce:	eba7 0906 	sub.w	r9, r7, r6
 80168d2:	4648      	mov	r0, r9
 80168d4:	f7ff fde8 	bl	80164a8 <_ZN8touchgfx7CWRUtil4sineEi>
 80168d8:	a902      	add	r1, sp, #8
 80168da:	9002      	str	r0, [sp, #8]
 80168dc:	4628      	mov	r0, r5
 80168de:	f7ff fdd7 	bl	8016490 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80168e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80168e4:	eb00 0801 	add.w	r8, r0, r1
 80168e8:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80168ec:	f7ff fddc 	bl	80164a8 <_ZN8touchgfx7CWRUtil4sineEi>
 80168f0:	a903      	add	r1, sp, #12
 80168f2:	9003      	str	r0, [sp, #12]
 80168f4:	4628      	mov	r0, r5
 80168f6:	f7ff fdcb 	bl	8016490 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80168fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80168fc:	4641      	mov	r1, r8
 80168fe:	1a12      	subs	r2, r2, r0
 8016900:	a804      	add	r0, sp, #16
 8016902:	f00c fa2d 	bl	8022d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016906:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016908:	441e      	add	r6, r3
 801690a:	e7de      	b.n	80168ca <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801690c:	4249      	negs	r1, r1
 801690e:	f7ff fe23 	bl	8016558 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016912:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8016916:	e7c9      	b.n	80168ac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016918:	2900      	cmp	r1, #0
 801691a:	f1c0 0000 	rsb	r0, r0, #0
 801691e:	462a      	mov	r2, r5
 8016920:	db04      	blt.n	801692c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8016922:	f7ff fe19 	bl	8016558 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016926:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801692a:	e7bf      	b.n	80168ac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801692c:	4249      	negs	r1, r1
 801692e:	f7ff fe13 	bl	8016558 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016932:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8016936:	e7b9      	b.n	80168ac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016938:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801693a:	a804      	add	r0, sp, #16
 801693c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801693e:	f00c fa0f 	bl	8022d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016944:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016946:	a804      	add	r0, sp, #16
 8016948:	f00c fa0a 	bl	8022d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801694c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016950:	2b01      	cmp	r3, #1
 8016952:	d123      	bne.n	801699c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016954:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016956:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801695a:	2e00      	cmp	r6, #0
 801695c:	dd1e      	ble.n	801699c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801695e:	eb06 0907 	add.w	r9, r6, r7
 8016962:	4648      	mov	r0, r9
 8016964:	f7ff fda0 	bl	80164a8 <_ZN8touchgfx7CWRUtil4sineEi>
 8016968:	a902      	add	r1, sp, #8
 801696a:	9002      	str	r0, [sp, #8]
 801696c:	4628      	mov	r0, r5
 801696e:	f7ff fd8f 	bl	8016490 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016972:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016974:	eb00 0801 	add.w	r8, r0, r1
 8016978:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801697c:	f7ff fd94 	bl	80164a8 <_ZN8touchgfx7CWRUtil4sineEi>
 8016980:	a903      	add	r1, sp, #12
 8016982:	9003      	str	r0, [sp, #12]
 8016984:	4628      	mov	r0, r5
 8016986:	f7ff fd83 	bl	8016490 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801698a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801698c:	4641      	mov	r1, r8
 801698e:	1a12      	subs	r2, r2, r0
 8016990:	a804      	add	r0, sp, #16
 8016992:	f00c f9e5 	bl	8022d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016996:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016998:	1af6      	subs	r6, r6, r3
 801699a:	e7de      	b.n	801695a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801699c:	a804      	add	r0, sp, #16
 801699e:	f00c fb54 	bl	802304a <_ZN8touchgfx6Canvas6renderEv>
 80169a2:	4604      	mov	r4, r0
 80169a4:	a804      	add	r0, sp, #16
 80169a6:	f00c fb91 	bl	80230cc <_ZN8touchgfx6CanvasD1Ev>
 80169aa:	4620      	mov	r0, r4
 80169ac:	b033      	add	sp, #204	; 0xcc
 80169ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080169b2 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80169b2:	b570      	push	{r4, r5, r6, lr}
 80169b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80169b8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80169ba:	4604      	mov	r4, r0
 80169bc:	429a      	cmp	r2, r3
 80169be:	d00c      	beq.n	80169da <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80169c0:	f850 3b26 	ldr.w	r3, [r0], #38
 80169c4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80169c6:	f7f9 fa99 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 80169ca:	2300      	movs	r3, #0
 80169cc:	4601      	mov	r1, r0
 80169ce:	46ac      	mov	ip, r5
 80169d0:	4620      	mov	r0, r4
 80169d2:	461a      	mov	r2, r3
 80169d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169d8:	4760      	bx	ip
 80169da:	2000      	movs	r0, #0
 80169dc:	bd70      	pop	{r4, r5, r6, pc}

080169de <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80169de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80169e4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d016      	beq.n	8016a18 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 80169ea:	f100 0426 	add.w	r4, r0, #38	; 0x26
 80169ee:	4620      	mov	r0, r4
 80169f0:	f7f7 ff6a 	bl	800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>
 80169f4:	6803      	ldr	r3, [r0, #0]
 80169f6:	4605      	mov	r5, r0
 80169f8:	4620      	mov	r0, r4
 80169fa:	69de      	ldr	r6, [r3, #28]
 80169fc:	f7f7 ff80 	bl	800e900 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016a00:	4607      	mov	r7, r0
 8016a02:	4620      	mov	r0, r4
 8016a04:	f7f9 fa7a 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8016a08:	2300      	movs	r3, #0
 8016a0a:	4602      	mov	r2, r0
 8016a0c:	4639      	mov	r1, r7
 8016a0e:	9300      	str	r3, [sp, #0]
 8016a10:	4628      	mov	r0, r5
 8016a12:	47b0      	blx	r6
 8016a14:	b003      	add	sp, #12
 8016a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a18:	2000      	movs	r0, #0
 8016a1a:	e7fb      	b.n	8016a14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08016a1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016a1c:	b40e      	push	{r1, r2, r3}
 8016a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a26:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016a28:	b09b      	sub	sp, #108	; 0x6c
 8016a2a:	4604      	mov	r4, r0
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d03f      	beq.n	8016ab0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8016a30:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8016a34:	ab22      	add	r3, sp, #136	; 0x88
 8016a36:	4638      	mov	r0, r7
 8016a38:	9303      	str	r3, [sp, #12]
 8016a3a:	f7f7 ff45 	bl	800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016a3e:	6803      	ldr	r3, [r0, #0]
 8016a40:	4680      	mov	r8, r0
 8016a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a44:	4798      	blx	r3
 8016a46:	4606      	mov	r6, r0
 8016a48:	b205      	sxth	r5, r0
 8016a4a:	a804      	add	r0, sp, #16
 8016a4c:	f002 ff7e 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 8016a50:	f8d8 3000 	ldr.w	r3, [r8]
 8016a54:	4640      	mov	r0, r8
 8016a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a58:	4798      	blx	r3
 8016a5a:	9a03      	ldr	r2, [sp, #12]
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016a60:	a804      	add	r0, sp, #16
 8016a62:	f002 ff90 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016a66:	4638      	mov	r0, r7
 8016a68:	f7f7 ff4a 	bl	800e900 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016a6c:	4680      	mov	r8, r0
 8016a6e:	4638      	mov	r0, r7
 8016a70:	f7f7 ff2a 	bl	800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016a74:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016a78:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8016a7c:	4642      	mov	r2, r8
 8016a7e:	9300      	str	r3, [sp, #0]
 8016a80:	4603      	mov	r3, r0
 8016a82:	a804      	add	r0, sp, #16
 8016a84:	f001 f815 	bl	8017ab2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016a88:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016a8c:	b203      	sxth	r3, r0
 8016a8e:	18a9      	adds	r1, r5, r2
 8016a90:	2900      	cmp	r1, #0
 8016a92:	dd0b      	ble.n	8016aac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8016a94:	3b01      	subs	r3, #1
 8016a96:	fb13 f302 	smulbb	r3, r3, r2
 8016a9a:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016a9e:	b21d      	sxth	r5, r3
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	b01b      	add	sp, #108	; 0x6c
 8016aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa8:	b003      	add	sp, #12
 8016aaa:	4770      	bx	lr
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	dcf7      	bgt.n	8016aa0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8016ab0:	2500      	movs	r5, #0
 8016ab2:	e7f5      	b.n	8016aa0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08016ab4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016abc:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8016abe:	b08d      	sub	sp, #52	; 0x34
 8016ac0:	4604      	mov	r4, r0
 8016ac2:	429e      	cmp	r6, r3
 8016ac4:	4688      	mov	r8, r1
 8016ac6:	d04b      	beq.n	8016b60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016ac8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016acc:	4628      	mov	r0, r5
 8016ace:	f7f7 fefb 	bl	800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016ad2:	4607      	mov	r7, r0
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d043      	beq.n	8016b60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8016ade:	f7f7 ff27 	bl	800e930 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016ae2:	4b21      	ldr	r3, [pc, #132]	; (8016b68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8016ae4:	4628      	mov	r0, r5
 8016ae6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016af0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016af4:	785e      	ldrb	r6, [r3, #1]
 8016af6:	f7f7 ff03 	bl	800e900 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016afc:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016b00:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016b04:	9309      	str	r3, [sp, #36]	; 0x24
 8016b06:	4b19      	ldr	r3, [pc, #100]	; (8016b6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8016b08:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016b12:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016b16:	9707      	str	r7, [sp, #28]
 8016b18:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8016b1c:	f88d 6020 	strb.w	r6, [sp, #32]
 8016b20:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016b24:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8016b28:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8016b2c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016b30:	b10a      	cbz	r2, 8016b36 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8016b32:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8016b34:	b906      	cbnz	r6, 8016b38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8016b36:	689e      	ldr	r6, [r3, #8]
 8016b38:	af05      	add	r7, sp, #20
 8016b3a:	4621      	mov	r1, r4
 8016b3c:	4638      	mov	r0, r7
 8016b3e:	f002 f864 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016b42:	4628      	mov	r0, r5
 8016b44:	f7f9 f9da 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	9001      	str	r0, [sp, #4]
 8016b4c:	4630      	mov	r0, r6
 8016b4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016b52:	ab07      	add	r3, sp, #28
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	4643      	mov	r3, r8
 8016b58:	e897 0006 	ldmia.w	r7, {r1, r2}
 8016b5c:	f000 fd76 	bl	801764c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016b60:	b00d      	add	sp, #52	; 0x34
 8016b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b66:	bf00      	nop
 8016b68:	2000bd08 	.word	0x2000bd08
 8016b6c:	2000bc78 	.word	0x2000bc78

08016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016b70:	b570      	push	{r4, r5, r6, lr}
 8016b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b76:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016b78:	4604      	mov	r4, r0
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d021      	beq.n	8016bc2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8016b7e:	6803      	ldr	r3, [r0, #0]
 8016b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b82:	4798      	blx	r3
 8016b84:	6823      	ldr	r3, [r4, #0]
 8016b86:	4605      	mov	r5, r0
 8016b88:	4620      	mov	r0, r4
 8016b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016b8c:	4798      	blx	r3
 8016b8e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016b92:	4606      	mov	r6, r0
 8016b94:	b22d      	sxth	r5, r5
 8016b96:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016b9a:	6823      	ldr	r3, [r4, #0]
 8016b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b9e:	d109      	bne.n	8016bb4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8016ba0:	4629      	mov	r1, r5
 8016ba2:	4620      	mov	r0, r4
 8016ba4:	4798      	blx	r3
 8016ba6:	6823      	ldr	r3, [r4, #0]
 8016ba8:	4631      	mov	r1, r6
 8016baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bac:	4620      	mov	r0, r4
 8016bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bb2:	4718      	bx	r3
 8016bb4:	4601      	mov	r1, r0
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	4798      	blx	r3
 8016bba:	6823      	ldr	r3, [r4, #0]
 8016bbc:	4629      	mov	r1, r5
 8016bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bc0:	e7f4      	b.n	8016bac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8016bc2:	bd70      	pop	{r4, r5, r6, pc}

08016bc4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8016bc4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016bc8:	84c1      	strh	r1, [r0, #38]	; 0x26
 8016bca:	b922      	cbnz	r2, 8016bd6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8016bcc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016bd0:	b90b      	cbnz	r3, 8016bd6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8016bd2:	f7ff bfcd 	b.w	8016b70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016bd6:	4770      	bx	lr

08016bd8 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016bd8:	2300      	movs	r3, #0
 8016bda:	8003      	strh	r3, [r0, #0]
 8016bdc:	8043      	strh	r3, [r0, #2]
 8016bde:	8083      	strh	r3, [r0, #4]
 8016be0:	80c3      	strh	r3, [r0, #6]
 8016be2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016be6:	b91b      	cbnz	r3, 8016bf0 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8016be8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016bec:	2bff      	cmp	r3, #255	; 0xff
 8016bee:	d103      	bne.n	8016bf8 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8016bf0:	890b      	ldrh	r3, [r1, #8]
 8016bf2:	8083      	strh	r3, [r0, #4]
 8016bf4:	894b      	ldrh	r3, [r1, #10]
 8016bf6:	80c3      	strh	r3, [r0, #6]
 8016bf8:	4770      	bx	lr
	...

08016bfc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bfe:	4604      	mov	r4, r0
 8016c00:	466b      	mov	r3, sp
 8016c02:	6808      	ldr	r0, [r1, #0]
 8016c04:	6849      	ldr	r1, [r1, #4]
 8016c06:	c303      	stmia	r3!, {r0, r1}
 8016c08:	6823      	ldr	r3, [r4, #0]
 8016c0a:	4669      	mov	r1, sp
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c10:	4798      	blx	r3
 8016c12:	4b08      	ldr	r3, [pc, #32]	; (8016c34 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016c1a:	b10a      	cbz	r2, 8016c20 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016c1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016c1e:	b900      	cbnz	r0, 8016c22 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016c20:	6898      	ldr	r0, [r3, #8]
 8016c22:	6803      	ldr	r3, [r0, #0]
 8016c24:	4669      	mov	r1, sp
 8016c26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016c28:	69dd      	ldr	r5, [r3, #28]
 8016c2a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016c2e:	47a8      	blx	r5
 8016c30:	b003      	add	sp, #12
 8016c32:	bd30      	pop	{r4, r5, pc}
 8016c34:	2000bc78 	.word	0x2000bc78

08016c38 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8016c38:	b570      	push	{r4, r5, r6, lr}
 8016c3a:	6803      	ldr	r3, [r0, #0]
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	4615      	mov	r5, r2
 8016c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016c42:	4798      	blx	r3
 8016c44:	6823      	ldr	r3, [r4, #0]
 8016c46:	4629      	mov	r1, r5
 8016c48:	4620      	mov	r0, r4
 8016c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c50:	4718      	bx	r3

08016c52 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8016c52:	b570      	push	{r4, r5, r6, lr}
 8016c54:	6803      	ldr	r3, [r0, #0]
 8016c56:	4604      	mov	r4, r0
 8016c58:	460e      	mov	r6, r1
 8016c5a:	4615      	mov	r5, r2
 8016c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c5e:	4798      	blx	r3
 8016c60:	8030      	strh	r0, [r6, #0]
 8016c62:	6823      	ldr	r3, [r4, #0]
 8016c64:	4620      	mov	r0, r4
 8016c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016c68:	4798      	blx	r3
 8016c6a:	8028      	strh	r0, [r5, #0]
 8016c6c:	bd70      	pop	{r4, r5, r6, pc}

08016c6e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8016c6e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8016c72:	4770      	bx	lr

08016c74 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8016c74:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8016c78:	4770      	bx	lr

08016c7a <_ZN8touchgfx10TiledImageD1Ev>:
 8016c7a:	4770      	bx	lr

08016c7c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8016c7c:	b510      	push	{r4, lr}
 8016c7e:	4604      	mov	r4, r0
 8016c80:	f000 fa40 	bl	8017104 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016c84:	6823      	ldr	r3, [r4, #0]
 8016c86:	4620      	mov	r0, r4
 8016c88:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016c8c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8016c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c96:	4718      	bx	r3

08016c98 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8016c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c9a:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8016c9e:	4605      	mov	r5, r0
 8016ca0:	8541      	strh	r1, [r0, #42]	; 0x2a
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	f003 fd7e 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016ca8:	b1a0      	cbz	r0, 8016cd4 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8016caa:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8016cae:	4630      	mov	r0, r6
 8016cb0:	f003 fd78 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016cb4:	fb97 f4f0 	sdiv	r4, r7, r0
 8016cb8:	fb04 7410 	mls	r4, r4, r0, r7
 8016cbc:	4630      	mov	r0, r6
 8016cbe:	f003 fd71 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016cc2:	4404      	add	r4, r0
 8016cc4:	4630      	mov	r0, r6
 8016cc6:	f003 fd6d 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016cca:	fb94 f3f0 	sdiv	r3, r4, r0
 8016cce:	fb03 4010 	mls	r0, r3, r0, r4
 8016cd2:	8568      	strh	r0, [r5, #42]	; 0x2a
 8016cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016cd6 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8016cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cd8:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8016cdc:	4605      	mov	r5, r0
 8016cde:	8581      	strh	r1, [r0, #44]	; 0x2c
 8016ce0:	4630      	mov	r0, r6
 8016ce2:	f003 fd99 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016ce6:	b1a0      	cbz	r0, 8016d12 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8016ce8:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8016cec:	4630      	mov	r0, r6
 8016cee:	f003 fd93 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016cf2:	fb97 f4f0 	sdiv	r4, r7, r0
 8016cf6:	fb04 7410 	mls	r4, r4, r0, r7
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	f003 fd8c 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016d00:	4404      	add	r4, r0
 8016d02:	4630      	mov	r0, r6
 8016d04:	f003 fd88 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016d08:	fb94 f3f0 	sdiv	r3, r4, r0
 8016d0c:	fb03 4010 	mls	r0, r3, r0, r4
 8016d10:	85a8      	strh	r0, [r5, #44]	; 0x2c
 8016d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d14 <_ZN8touchgfx10TiledImageD0Ev>:
 8016d14:	b510      	push	{r4, lr}
 8016d16:	4604      	mov	r4, r0
 8016d18:	2130      	movs	r1, #48	; 0x30
 8016d1a:	f00d fa6a 	bl	80241f2 <_ZdlPvj>
 8016d1e:	4620      	mov	r0, r4
 8016d20:	bd10      	pop	{r4, pc}
	...

08016d24 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8016d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d28:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 8016d2c:	b093      	sub	sp, #76	; 0x4c
 8016d2e:	4607      	mov	r7, r0
 8016d30:	460e      	mov	r6, r1
 8016d32:	4658      	mov	r0, fp
 8016d34:	f003 fd36 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016d38:	4605      	mov	r5, r0
 8016d3a:	4658      	mov	r0, fp
 8016d3c:	f003 fd6c 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016d40:	4680      	mov	r8, r0
 8016d42:	2d00      	cmp	r5, #0
 8016d44:	f000 80c5 	beq.w	8016ed2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	f000 80c2 	beq.w	8016ed2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	a90e      	add	r1, sp, #56	; 0x38
 8016d52:	4638      	mov	r0, r7
 8016d54:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d5c:	4798      	blx	r3
 8016d5e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8016d62:	f9b6 3000 	ldrsh.w	r3, [r6]
 8016d66:	88b1      	ldrh	r1, [r6, #4]
 8016d68:	189c      	adds	r4, r3, r2
 8016d6a:	440b      	add	r3, r1
 8016d6c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8016d70:	fa02 f383 	sxtah	r3, r2, r3
 8016d74:	3b01      	subs	r3, #1
 8016d76:	fb93 f3f5 	sdiv	r3, r3, r5
 8016d7a:	fb94 f4f5 	sdiv	r4, r4, r5
 8016d7e:	fb13 f305 	smulbb	r3, r3, r5
 8016d82:	fb14 f405 	smulbb	r4, r4, r5
 8016d86:	b21b      	sxth	r3, r3
 8016d88:	1aa4      	subs	r4, r4, r2
 8016d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d8c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016d90:	b2a4      	uxth	r4, r4
 8016d92:	185a      	adds	r2, r3, r1
 8016d94:	fb92 f2f8 	sdiv	r2, r2, r8
 8016d98:	fb12 f208 	smulbb	r2, r2, r8
 8016d9c:	1a52      	subs	r2, r2, r1
 8016d9e:	b212      	sxth	r2, r2
 8016da0:	920c      	str	r2, [sp, #48]	; 0x30
 8016da2:	88f2      	ldrh	r2, [r6, #6]
 8016da4:	4413      	add	r3, r2
 8016da6:	fa01 f383 	sxtah	r3, r1, r3
 8016daa:	3b01      	subs	r3, #1
 8016dac:	fb93 f3f8 	sdiv	r3, r3, r8
 8016db0:	fb13 f308 	smulbb	r3, r3, r8
 8016db4:	b21b      	sxth	r3, r3
 8016db6:	930d      	str	r3, [sp, #52]	; 0x34
 8016db8:	1963      	adds	r3, r4, r5
 8016dba:	fa1f fa83 	uxth.w	sl, r3
 8016dbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dc0:	b223      	sxth	r3, r4
 8016dc2:	4293      	cmp	r3, r2
 8016dc4:	9305      	str	r3, [sp, #20]
 8016dc6:	f300 8084 	bgt.w	8016ed2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8016dca:	fa0f f38a 	sxth.w	r3, sl
 8016dce:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8016dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8016dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dd6:	4599      	cmp	r9, r3
 8016dd8:	dd04      	ble.n	8016de4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8016dda:	442c      	add	r4, r5
 8016ddc:	eb05 030a 	add.w	r3, r5, sl
 8016de0:	b2a4      	uxth	r4, r4
 8016de2:	e7ea      	b.n	8016dba <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8016de4:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016de8:	88b2      	ldrh	r2, [r6, #4]
 8016dea:	4462      	add	r2, ip
 8016dec:	b292      	uxth	r2, r2
 8016dee:	b213      	sxth	r3, r2
 8016df0:	9308      	str	r3, [sp, #32]
 8016df2:	fa1f f389 	uxth.w	r3, r9
 8016df6:	eb08 0103 	add.w	r1, r8, r3
 8016dfa:	9307      	str	r3, [sp, #28]
 8016dfc:	b289      	uxth	r1, r1
 8016dfe:	b208      	sxth	r0, r1
 8016e00:	9006      	str	r0, [sp, #24]
 8016e02:	9805      	ldr	r0, [sp, #20]
 8016e04:	4603      	mov	r3, r0
 8016e06:	9808      	ldr	r0, [sp, #32]
 8016e08:	4283      	cmp	r3, r0
 8016e0a:	da5e      	bge.n	8016eca <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e0e:	4584      	cmp	ip, r0
 8016e10:	da5b      	bge.n	8016eca <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016e12:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8016e16:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8016e1a:	4486      	add	lr, r0
 8016e1c:	fa1f fe8e 	uxth.w	lr, lr
 8016e20:	fa0f f38e 	sxth.w	r3, lr
 8016e24:	4599      	cmp	r9, r3
 8016e26:	930a      	str	r3, [sp, #40]	; 0x28
 8016e28:	da4f      	bge.n	8016eca <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016e2a:	9b06      	ldr	r3, [sp, #24]
 8016e2c:	4298      	cmp	r0, r3
 8016e2e:	da4c      	bge.n	8016eca <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016e30:	9b05      	ldr	r3, [sp, #20]
 8016e32:	459c      	cmp	ip, r3
 8016e34:	bfb8      	it	lt
 8016e36:	469c      	movlt	ip, r3
 8016e38:	4548      	cmp	r0, r9
 8016e3a:	9b08      	ldr	r3, [sp, #32]
 8016e3c:	bfb8      	it	lt
 8016e3e:	4648      	movlt	r0, r9
 8016e40:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8016e44:	4699      	mov	r9, r3
 8016e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e48:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8016e4c:	4599      	cmp	r9, r3
 8016e4e:	bfc8      	it	gt
 8016e50:	4652      	movgt	r2, sl
 8016e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e54:	eba2 020c 	sub.w	r2, r2, ip
 8016e58:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8016e5c:	9a06      	ldr	r2, [sp, #24]
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	bfd8      	it	le
 8016e62:	4671      	movle	r1, lr
 8016e64:	1a09      	subs	r1, r1, r0
 8016e66:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8016e6a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016e6e:	9b07      	ldr	r3, [sp, #28]
 8016e70:	1b12      	subs	r2, r2, r4
 8016e72:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016e76:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8016e7a:	1ad2      	subs	r2, r2, r3
 8016e7c:	4b16      	ldr	r3, [pc, #88]	; (8016ed8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8016e7e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8016e82:	681a      	ldr	r2, [r3, #0]
 8016e84:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8016e88:	b109      	cbz	r1, 8016e8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8016e8a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8016e8c:	b900      	cbnz	r0, 8016e90 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8016e8e:	6890      	ldr	r0, [r2, #8]
 8016e90:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016e94:	f04f 0c01 	mov.w	ip, #1
 8016e98:	9b07      	ldr	r3, [sp, #28]
 8016e9a:	6801      	ldr	r1, [r0, #0]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	f8cd c008 	str.w	ip, [sp, #8]
 8016ea2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016ea6:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8016eaa:	b21b      	sxth	r3, r3
 8016eac:	4422      	add	r2, r4
 8016eae:	f8cd c004 	str.w	ip, [sp, #4]
 8016eb2:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8016eb6:	b212      	sxth	r2, r2
 8016eb8:	f8cd c000 	str.w	ip, [sp]
 8016ebc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8016ec0:	4659      	mov	r1, fp
 8016ec2:	47c8      	blx	r9
 8016ec4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016ec8:	e784      	b.n	8016dd4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8016eca:	2300      	movs	r3, #0
 8016ecc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8016ed0:	e7cb      	b.n	8016e6a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8016ed2:	b013      	add	sp, #76	; 0x4c
 8016ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ed8:	2000bc78 	.word	0x2000bc78

08016edc <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8016edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016ee4:	4606      	mov	r6, r0
 8016ee6:	4689      	mov	r9, r1
 8016ee8:	2bff      	cmp	r3, #255	; 0xff
 8016eea:	d008      	beq.n	8016efe <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8016eec:	2300      	movs	r3, #0
 8016eee:	8003      	strh	r3, [r0, #0]
 8016ef0:	8043      	strh	r3, [r0, #2]
 8016ef2:	8083      	strh	r3, [r0, #4]
 8016ef4:	4630      	mov	r0, r6
 8016ef6:	80f3      	strh	r3, [r6, #6]
 8016ef8:	b003      	add	sp, #12
 8016efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efe:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 8016f02:	4668      	mov	r0, sp
 8016f04:	4659      	mov	r1, fp
 8016f06:	f003 fcc1 	bl	801a88c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016f0a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8016f0e:	4658      	mov	r0, fp
 8016f10:	f9bd 7000 	ldrsh.w	r7, [sp]
 8016f14:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8016f18:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8016f1c:	f003 fc42 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016f20:	4284      	cmp	r4, r0
 8016f22:	d10d      	bne.n	8016f40 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8016f24:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8016f28:	4658      	mov	r0, fp
 8016f2a:	f003 fc75 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016f2e:	4580      	cmp	r8, r0
 8016f30:	d12a      	bne.n	8016f88 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8016f32:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8016f36:	8037      	strh	r7, [r6, #0]
 8016f38:	f8a6 a002 	strh.w	sl, [r6, #2]
 8016f3c:	80b5      	strh	r5, [r6, #4]
 8016f3e:	e7d9      	b.n	8016ef4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8016f40:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8016f44:	4658      	mov	r0, fp
 8016f46:	f003 fc2d 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016f4a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8016f4e:	1b7f      	subs	r7, r7, r5
 8016f50:	b2a3      	uxth	r3, r4
 8016f52:	b2bd      	uxth	r5, r7
 8016f54:	b22f      	sxth	r7, r5
 8016f56:	4428      	add	r0, r5
 8016f58:	2f00      	cmp	r7, #0
 8016f5a:	b280      	uxth	r0, r0
 8016f5c:	bfb8      	it	lt
 8016f5e:	18ed      	addlt	r5, r5, r3
 8016f60:	4403      	add	r3, r0
 8016f62:	bfac      	ite	ge
 8016f64:	4625      	movge	r5, r4
 8016f66:	2700      	movlt	r7, #0
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	bfb8      	it	lt
 8016f6c:	b22d      	sxthlt	r5, r5
 8016f6e:	b219      	sxth	r1, r3
 8016f70:	bfb8      	it	lt
 8016f72:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8016f76:	4291      	cmp	r1, r2
 8016f78:	bfc4      	itt	gt
 8016f7a:	1a9c      	subgt	r4, r3, r2
 8016f7c:	b224      	sxthgt	r4, r4
 8016f7e:	42ac      	cmp	r4, r5
 8016f80:	bfc4      	itt	gt
 8016f82:	b207      	sxthgt	r7, r0
 8016f84:	4625      	movgt	r5, r4
 8016f86:	e7cf      	b.n	8016f28 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8016f88:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8016f8c:	4658      	mov	r0, fp
 8016f8e:	f003 fc43 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016f92:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8016f96:	ebaa 0404 	sub.w	r4, sl, r4
 8016f9a:	fa1f f288 	uxth.w	r2, r8
 8016f9e:	b2a4      	uxth	r4, r4
 8016fa0:	fa0f fa84 	sxth.w	sl, r4
 8016fa4:	4420      	add	r0, r4
 8016fa6:	f1ba 0f00 	cmp.w	sl, #0
 8016faa:	b280      	uxth	r0, r0
 8016fac:	bfb8      	it	lt
 8016fae:	18a3      	addlt	r3, r4, r2
 8016fb0:	4402      	add	r2, r0
 8016fb2:	bfac      	ite	ge
 8016fb4:	4643      	movge	r3, r8
 8016fb6:	f04f 0a00 	movlt.w	sl, #0
 8016fba:	b292      	uxth	r2, r2
 8016fbc:	bfb8      	it	lt
 8016fbe:	b21b      	sxthlt	r3, r3
 8016fc0:	b214      	sxth	r4, r2
 8016fc2:	bfb8      	it	lt
 8016fc4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016fc8:	428c      	cmp	r4, r1
 8016fca:	bfc4      	itt	gt
 8016fcc:	eba2 0801 	subgt.w	r8, r2, r1
 8016fd0:	fa0f f888 	sxthgt.w	r8, r8
 8016fd4:	4543      	cmp	r3, r8
 8016fd6:	bfbc      	itt	lt
 8016fd8:	fa0f fa80 	sxthlt.w	sl, r0
 8016fdc:	4643      	movlt	r3, r8
 8016fde:	e7aa      	b.n	8016f36 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08016fe0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8016fe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016fe8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016fea:	4604      	mov	r4, r0
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d018      	beq.n	8017022 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8016ff0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f7f7 fc67 	bl	800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016ffa:	6803      	ldr	r3, [r0, #0]
 8016ffc:	4606      	mov	r6, r0
 8016ffe:	4628      	mov	r0, r5
 8017000:	69df      	ldr	r7, [r3, #28]
 8017002:	f7f7 fc7d 	bl	800e900 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017006:	4680      	mov	r8, r0
 8017008:	4628      	mov	r0, r5
 801700a:	f7f8 ff77 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 801700e:	2300      	movs	r3, #0
 8017010:	4602      	mov	r2, r0
 8017012:	4641      	mov	r1, r8
 8017014:	9300      	str	r3, [sp, #0]
 8017016:	4630      	mov	r0, r6
 8017018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801701a:	47b8      	blx	r7
 801701c:	b002      	add	sp, #8
 801701e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017022:	2000      	movs	r0, #0
 8017024:	e7fa      	b.n	801701c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08017026 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017026:	b570      	push	{r4, r5, r6, lr}
 8017028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801702c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801702e:	4604      	mov	r4, r0
 8017030:	429a      	cmp	r2, r3
 8017032:	d00c      	beq.n	801704e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8017034:	f850 3b26 	ldr.w	r3, [r0], #38
 8017038:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801703a:	f7f8 ff5f 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 801703e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017040:	4601      	mov	r1, r0
 8017042:	46ac      	mov	ip, r5
 8017044:	4620      	mov	r0, r4
 8017046:	2300      	movs	r3, #0
 8017048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801704c:	4760      	bx	ip
 801704e:	2000      	movs	r0, #0
 8017050:	bd70      	pop	{r4, r5, r6, pc}
	...

08017054 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801705c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801705e:	b08d      	sub	sp, #52	; 0x34
 8017060:	4604      	mov	r4, r0
 8017062:	429e      	cmp	r6, r3
 8017064:	460f      	mov	r7, r1
 8017066:	d048      	beq.n	80170fa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017068:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801706c:	4628      	mov	r0, r5
 801706e:	f7f7 fc2b 	bl	800e8c8 <_ZNK8touchgfx9TypedText7getFontEv>
 8017072:	4680      	mov	r8, r0
 8017074:	2800      	cmp	r0, #0
 8017076:	d040      	beq.n	80170fa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017078:	4628      	mov	r0, r5
 801707a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801707e:	f7f7 fc57 	bl	800e930 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017082:	4b1f      	ldr	r3, [pc, #124]	; (8017100 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8017084:	4628      	mov	r0, r5
 8017086:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017090:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017094:	785e      	ldrb	r6, [r3, #1]
 8017096:	f7f7 fc33 	bl	800e900 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801709a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801709e:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80170a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80170a4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80170a8:	f88d 6020 	strb.w	r6, [sp, #32]
 80170ac:	ae05      	add	r6, sp, #20
 80170ae:	9309      	str	r3, [sp, #36]	; 0x24
 80170b0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80170b4:	f8cd 801c 	str.w	r8, [sp, #28]
 80170b8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80170bc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80170c0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80170c4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80170c8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80170cc:	f7f7 ffdc 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 80170d0:	4621      	mov	r1, r4
 80170d2:	4680      	mov	r8, r0
 80170d4:	4630      	mov	r0, r6
 80170d6:	f001 fd98 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170da:	4628      	mov	r0, r5
 80170dc:	f7f8 ff0e 	bl	800fefc <_ZNK8touchgfx9TypedText7getTextEv>
 80170e0:	2300      	movs	r3, #0
 80170e2:	9303      	str	r3, [sp, #12]
 80170e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170e6:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80170ea:	ab07      	add	r3, sp, #28
 80170ec:	4640      	mov	r0, r8
 80170ee:	9300      	str	r3, [sp, #0]
 80170f0:	463b      	mov	r3, r7
 80170f2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80170f6:	f000 faa9 	bl	801764c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80170fa:	b00d      	add	sp, #52	; 0x34
 80170fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017100:	2000bd08 	.word	0x2000bd08

08017104 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017104:	b570      	push	{r4, r5, r6, lr}
 8017106:	4605      	mov	r5, r0
 8017108:	880b      	ldrh	r3, [r1, #0]
 801710a:	4604      	mov	r4, r0
 801710c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801710e:	f855 3b26 	ldr.w	r3, [r5], #38
 8017112:	4628      	mov	r0, r5
 8017114:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8017116:	f003 fb45 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801711a:	b201      	sxth	r1, r0
 801711c:	4620      	mov	r0, r4
 801711e:	47b0      	blx	r6
 8017120:	6823      	ldr	r3, [r4, #0]
 8017122:	4628      	mov	r0, r5
 8017124:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8017126:	f003 fb77 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801712a:	b201      	sxth	r1, r0
 801712c:	4620      	mov	r0, r4
 801712e:	47b0      	blx	r6
 8017130:	4628      	mov	r0, r5
 8017132:	f003 fc05 	bl	801a940 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017136:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801713a:	bd70      	pop	{r4, r5, r6, pc}

0801713c <_ZNK8touchgfx5Image12getSolidRectEv>:
 801713c:	b510      	push	{r4, lr}
 801713e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017142:	4604      	mov	r4, r0
 8017144:	2bff      	cmp	r3, #255	; 0xff
 8017146:	d006      	beq.n	8017156 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017148:	2300      	movs	r3, #0
 801714a:	8003      	strh	r3, [r0, #0]
 801714c:	8043      	strh	r3, [r0, #2]
 801714e:	8083      	strh	r3, [r0, #4]
 8017150:	80c3      	strh	r3, [r0, #6]
 8017152:	4620      	mov	r0, r4
 8017154:	bd10      	pop	{r4, pc}
 8017156:	3126      	adds	r1, #38	; 0x26
 8017158:	f003 fb98 	bl	801a88c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801715c:	e7f9      	b.n	8017152 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017160 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017164:	4604      	mov	r4, r0
 8017166:	b088      	sub	sp, #32
 8017168:	2500      	movs	r5, #0
 801716a:	460f      	mov	r7, r1
 801716c:	f854 3b26 	ldr.w	r3, [r4], #38
 8017170:	a904      	add	r1, sp, #16
 8017172:	4606      	mov	r6, r0
 8017174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017176:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801717a:	4798      	blx	r3
 801717c:	4620      	mov	r0, r4
 801717e:	f003 fb11 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017182:	4680      	mov	r8, r0
 8017184:	4620      	mov	r0, r4
 8017186:	f003 fb47 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801718a:	9506      	str	r5, [sp, #24]
 801718c:	ad06      	add	r5, sp, #24
 801718e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017192:	4639      	mov	r1, r7
 8017194:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017198:	4628      	mov	r0, r5
 801719a:	f7fd fef5 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 801719e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80171a2:	b1c3      	cbz	r3, 80171d6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80171a4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80171a8:	b1ab      	cbz	r3, 80171d6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80171aa:	4b0c      	ldr	r3, [pc, #48]	; (80171dc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80171b2:	b10a      	cbz	r2, 80171b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80171b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80171b6:	b900      	cbnz	r0, 80171ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80171b8:	6898      	ldr	r0, [r3, #8]
 80171ba:	2701      	movs	r7, #1
 80171bc:	6801      	ldr	r1, [r0, #0]
 80171be:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80171c2:	9702      	str	r7, [sp, #8]
 80171c4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80171c8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80171cc:	e9cd 5600 	strd	r5, r6, [sp]
 80171d0:	68cd      	ldr	r5, [r1, #12]
 80171d2:	4621      	mov	r1, r4
 80171d4:	47a8      	blx	r5
 80171d6:	b008      	add	sp, #32
 80171d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171dc:	2000bc78 	.word	0x2000bc78

080171e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80171e0:	4b02      	ldr	r3, [pc, #8]	; (80171ec <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80171e2:	6018      	str	r0, [r3, #0]
 80171e4:	4b02      	ldr	r3, [pc, #8]	; (80171f0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80171e6:	6019      	str	r1, [r3, #0]
 80171e8:	4770      	bx	lr
 80171ea:	bf00      	nop
 80171ec:	2000bc80 	.word	0x2000bc80
 80171f0:	2000bc94 	.word	0x2000bc94

080171f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80171f4:	b538      	push	{r3, r4, r5, lr}
 80171f6:	4c2b      	ldr	r4, [pc, #172]	; (80172a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80171f8:	4b2b      	ldr	r3, [pc, #172]	; (80172a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80171fa:	6821      	ldr	r1, [r4, #0]
 80171fc:	681a      	ldr	r2, [r3, #0]
 80171fe:	4281      	cmp	r1, r0
 8017200:	4d2a      	ldr	r5, [pc, #168]	; (80172ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017202:	492b      	ldr	r1, [pc, #172]	; (80172b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017204:	d108      	bne.n	8017218 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017206:	682b      	ldr	r3, [r5, #0]
 8017208:	4293      	cmp	r3, r2
 801720a:	d105      	bne.n	8017218 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801720c:	6808      	ldr	r0, [r1, #0]
 801720e:	280f      	cmp	r0, #15
 8017210:	bf94      	ite	ls
 8017212:	2000      	movls	r0, #0
 8017214:	2001      	movhi	r0, #1
 8017216:	bd38      	pop	{r3, r4, r5, pc}
 8017218:	4b26      	ldr	r3, [pc, #152]	; (80172b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801721a:	6020      	str	r0, [r4, #0]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	602a      	str	r2, [r5, #0]
 8017220:	4298      	cmp	r0, r3
 8017222:	d905      	bls.n	8017230 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017224:	4b24      	ldr	r3, [pc, #144]	; (80172b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017226:	2137      	movs	r1, #55	; 0x37
 8017228:	4a24      	ldr	r2, [pc, #144]	; (80172bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801722a:	4825      	ldr	r0, [pc, #148]	; (80172c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801722c:	f00d f80c 	bl	8024248 <__assert_func>
 8017230:	f010 0403 	ands.w	r4, r0, #3
 8017234:	bf1f      	itttt	ne
 8017236:	f1c4 0504 	rsbne	r5, r4, #4
 801723a:	3b04      	subne	r3, #4
 801723c:	1952      	addne	r2, r2, r5
 801723e:	191b      	addne	r3, r3, r4
 8017240:	4d20      	ldr	r5, [pc, #128]	; (80172c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017242:	4402      	add	r2, r0
 8017244:	1a1b      	subs	r3, r3, r0
 8017246:	3001      	adds	r0, #1
 8017248:	602a      	str	r2, [r5, #0]
 801724a:	f020 0401 	bic.w	r4, r0, #1
 801724e:	42a3      	cmp	r3, r4
 8017250:	d203      	bcs.n	801725a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017252:	4b19      	ldr	r3, [pc, #100]	; (80172b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017254:	214a      	movs	r1, #74	; 0x4a
 8017256:	4a19      	ldr	r2, [pc, #100]	; (80172bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017258:	e7e7      	b.n	801722a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801725a:	f010 0002 	ands.w	r0, r0, #2
 801725e:	bf1f      	itttt	ne
 8017260:	f1c0 0504 	rsbne	r5, r0, #4
 8017264:	1952      	addne	r2, r2, r5
 8017266:	1f05      	subne	r5, r0, #4
 8017268:	195b      	addne	r3, r3, r5
 801726a:	4422      	add	r2, r4
 801726c:	4d16      	ldr	r5, [pc, #88]	; (80172c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801726e:	1b1b      	subs	r3, r3, r4
 8017270:	602a      	str	r2, [r5, #0]
 8017272:	429c      	cmp	r4, r3
 8017274:	d903      	bls.n	801727e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017276:	4b10      	ldr	r3, [pc, #64]	; (80172b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017278:	215d      	movs	r1, #93	; 0x5d
 801727a:	4a10      	ldr	r2, [pc, #64]	; (80172bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801727c:	e7d5      	b.n	801722a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801727e:	b120      	cbz	r0, 801728a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017280:	f1c0 0504 	rsb	r5, r0, #4
 8017284:	3804      	subs	r0, #4
 8017286:	442a      	add	r2, r5
 8017288:	4403      	add	r3, r0
 801728a:	1b1b      	subs	r3, r3, r4
 801728c:	4422      	add	r2, r4
 801728e:	480f      	ldr	r0, [pc, #60]	; (80172cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017290:	2b0f      	cmp	r3, #15
 8017292:	600b      	str	r3, [r1, #0]
 8017294:	6002      	str	r2, [r0, #0]
 8017296:	d803      	bhi.n	80172a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017298:	4b0d      	ldr	r3, [pc, #52]	; (80172d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801729a:	2170      	movs	r1, #112	; 0x70
 801729c:	4a07      	ldr	r2, [pc, #28]	; (80172bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801729e:	e7c4      	b.n	801722a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80172a0:	2001      	movs	r0, #1
 80172a2:	e7b8      	b.n	8017216 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80172a4:	2000bc88 	.word	0x2000bc88
 80172a8:	2000bc80 	.word	0x2000bc80
 80172ac:	2000bc90 	.word	0x2000bc90
 80172b0:	2000bc98 	.word	0x2000bc98
 80172b4:	2000bc94 	.word	0x2000bc94
 80172b8:	080279e4 	.word	0x080279e4
 80172bc:	08027aac 	.word	0x08027aac
 80172c0:	08027a1d 	.word	0x08027a1d
 80172c4:	2000bc9c 	.word	0x2000bc9c
 80172c8:	2000bc8c 	.word	0x2000bc8c
 80172cc:	2000bc84 	.word	0x2000bc84
 80172d0:	08027a67 	.word	0x08027a67

080172d4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80172d4:	4b04      	ldr	r3, [pc, #16]	; (80172e8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80172d6:	6818      	ldr	r0, [r3, #0]
 80172d8:	b120      	cbz	r0, 80172e4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80172da:	4b04      	ldr	r3, [pc, #16]	; (80172ec <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80172dc:	6818      	ldr	r0, [r3, #0]
 80172de:	3000      	adds	r0, #0
 80172e0:	bf18      	it	ne
 80172e2:	2001      	movne	r0, #1
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	2000bc80 	.word	0x2000bc80
 80172ec:	2000bc94 	.word	0x2000bc94

080172f0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80172f0:	4b01      	ldr	r3, [pc, #4]	; (80172f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80172f2:	6818      	ldr	r0, [r3, #0]
 80172f4:	4770      	bx	lr
 80172f6:	bf00      	nop
 80172f8:	2000bc88 	.word	0x2000bc88

080172fc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80172fc:	4b01      	ldr	r3, [pc, #4]	; (8017304 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80172fe:	6818      	ldr	r0, [r3, #0]
 8017300:	4770      	bx	lr
 8017302:	bf00      	nop
 8017304:	2000bc90 	.word	0x2000bc90

08017308 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017308:	4b01      	ldr	r3, [pc, #4]	; (8017310 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801730a:	6818      	ldr	r0, [r3, #0]
 801730c:	4770      	bx	lr
 801730e:	bf00      	nop
 8017310:	2000bc9c 	.word	0x2000bc9c

08017314 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017314:	4b01      	ldr	r3, [pc, #4]	; (801731c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017316:	6818      	ldr	r0, [r3, #0]
 8017318:	4770      	bx	lr
 801731a:	bf00      	nop
 801731c:	2000bc8c 	.word	0x2000bc8c

08017320 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017320:	4b01      	ldr	r3, [pc, #4]	; (8017328 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017322:	6818      	ldr	r0, [r3, #0]
 8017324:	4770      	bx	lr
 8017326:	bf00      	nop
 8017328:	2000bc84 	.word	0x2000bc84

0801732c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801732c:	4b01      	ldr	r3, [pc, #4]	; (8017334 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801732e:	6818      	ldr	r0, [r3, #0]
 8017330:	4770      	bx	lr
 8017332:	bf00      	nop
 8017334:	2000bc98 	.word	0x2000bc98

08017338 <_ZN8touchgfx3LCD4initEv>:
 8017338:	4770      	bx	lr

0801733a <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801733a:	2000      	movs	r0, #0
 801733c:	4770      	bx	lr

0801733e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801733e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017342:	b091      	sub	sp, #68	; 0x44
 8017344:	4699      	mov	r9, r3
 8017346:	4617      	mov	r7, r2
 8017348:	2500      	movs	r5, #0
 801734a:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801734e:	4680      	mov	r8, r0
 8017350:	a80e      	add	r0, sp, #56	; 0x38
 8017352:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017354:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017358:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801735c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017360:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017364:	910d      	str	r1, [sp, #52]	; 0x34
 8017366:	950e      	str	r5, [sp, #56]	; 0x38
 8017368:	f000 fe3a 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801736c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801736e:	f8d9 6000 	ldr.w	r6, [r9]
 8017372:	6818      	ldr	r0, [r3, #0]
 8017374:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017376:	f9b4 b000 	ldrsh.w	fp, [r4]
 801737a:	1b80      	subs	r0, r0, r6
 801737c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017380:	eb02 0c06 	add.w	ip, r2, r6
 8017384:	ebab 0e0c 	sub.w	lr, fp, ip
 8017388:	4570      	cmp	r0, lr
 801738a:	f340 80bc 	ble.w	8017506 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801738e:	88a1      	ldrh	r1, [r4, #4]
 8017390:	4459      	add	r1, fp
 8017392:	b209      	sxth	r1, r1
 8017394:	458c      	cmp	ip, r1
 8017396:	f300 80b6 	bgt.w	8017506 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801739a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801739e:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 80173a2:	4283      	cmp	r3, r0
 80173a4:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 80173a8:	edd9 6a07 	vldr	s13, [r9, #28]
 80173ac:	bfa8      	it	ge
 80173ae:	4603      	movge	r3, r0
 80173b0:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 80173b4:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80173b8:	45e3      	cmp	fp, ip
 80173ba:	ee07 3a90 	vmov	s15, r3
 80173be:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80173c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80173c6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80173ca:	ee65 4a24 	vmul.f32	s9, s10, s9
 80173ce:	ee25 5a27 	vmul.f32	s10, s10, s15
 80173d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80173d6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80173da:	ee32 1a05 	vadd.f32	s2, s4, s10
 80173de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173e2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80173e6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80173ea:	ee22 2a07 	vmul.f32	s4, s4, s14
 80173ee:	f340 808d 	ble.w	801750c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80173f2:	fb9e f5f3 	sdiv	r5, lr, r3
 80173f6:	ee07 5a10 	vmov	s14, r5
 80173fa:	2d00      	cmp	r5, #0
 80173fc:	fb03 e415 	mls	r4, r3, r5, lr
 8017400:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017404:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017408:	eee7 0a24 	vfma.f32	s1, s14, s9
 801740c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017410:	dd12      	ble.n	8017438 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017412:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017416:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801741a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801741e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017426:	bf14      	ite	ne
 8017428:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801742c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017430:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017434:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017438:	fb05 f703 	mul.w	r7, r5, r3
 801743c:	1bc0      	subs	r0, r0, r7
 801743e:	443e      	add	r6, r7
 8017440:	1997      	adds	r7, r2, r6
 8017442:	4407      	add	r7, r0
 8017444:	42b9      	cmp	r1, r7
 8017446:	bfbc      	itt	lt
 8017448:	1a88      	sublt	r0, r1, r2
 801744a:	1b80      	sublt	r0, r0, r6
 801744c:	2800      	cmp	r0, #0
 801744e:	dd5a      	ble.n	8017506 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017450:	fb90 f1f3 	sdiv	r1, r0, r3
 8017454:	fb03 0211 	mls	r2, r3, r1, r0
 8017458:	b90a      	cbnz	r2, 801745e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801745a:	3901      	subs	r1, #1
 801745c:	461a      	mov	r2, r3
 801745e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017462:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017466:	44a4      	add	ip, r4
 8017468:	2900      	cmp	r1, #0
 801746a:	bfcc      	ite	gt
 801746c:	469e      	movgt	lr, r3
 801746e:	4696      	movle	lr, r2
 8017470:	fb03 c505 	mla	r5, r3, r5, ip
 8017474:	eef0 6a42 	vmov.f32	s13, s4
 8017478:	eeb0 7a61 	vmov.f32	s14, s3
 801747c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017480:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017484:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017488:	ee21 3a23 	vmul.f32	s6, s2, s7
 801748c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017490:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017494:	ee17 0a90 	vmov	r0, s15
 8017498:	ee73 7a42 	vsub.f32	s15, s6, s4
 801749c:	fb90 f6f3 	sdiv	r6, r0, r3
 80174a0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80174a4:	ee17 0a90 	vmov	r0, s15
 80174a8:	fb90 f7f3 	sdiv	r7, r0, r3
 80174ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80174b0:	f8d0 8000 	ldr.w	r8, [r0]
 80174b4:	900c      	str	r0, [sp, #48]	; 0x30
 80174b6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80174b8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80174bc:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80174c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80174c4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80174c8:	f8cd a020 	str.w	sl, [sp, #32]
 80174cc:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80174d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80174d2:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80174d6:	9603      	str	r6, [sp, #12]
 80174d8:	44ca      	add	sl, r9
 80174da:	9506      	str	r5, [sp, #24]
 80174dc:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80174e0:	ee16 0a90 	vmov	r0, s13
 80174e4:	f8cd a01c 	str.w	sl, [sp, #28]
 80174e8:	fb07 0704 	mla	r7, r7, r4, r0
 80174ec:	ee17 0a10 	vmov	r0, s14
 80174f0:	fb06 0604 	mla	r6, r6, r4, r0
 80174f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80174f6:	9702      	str	r7, [sp, #8]
 80174f8:	e9cd 3600 	strd	r3, r6, [sp]
 80174fc:	ebae 0304 	sub.w	r3, lr, r4
 8017500:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017504:	47a8      	blx	r5
 8017506:	b011      	add	sp, #68	; 0x44
 8017508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801750c:	462c      	mov	r4, r5
 801750e:	e797      	b.n	8017440 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08017510 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017510:	b570      	push	{r4, r5, r6, lr}
 8017512:	4604      	mov	r4, r0
 8017514:	2500      	movs	r5, #0
 8017516:	9804      	ldr	r0, [sp, #16]
 8017518:	7223      	strb	r3, [r4, #8]
 801751a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801751e:	8025      	strh	r5, [r4, #0]
 8017520:	6061      	str	r1, [r4, #4]
 8017522:	7263      	strb	r3, [r4, #9]
 8017524:	60e0      	str	r0, [r4, #12]
 8017526:	8222      	strh	r2, [r4, #16]
 8017528:	8265      	strh	r5, [r4, #18]
 801752a:	82a5      	strh	r5, [r4, #20]
 801752c:	82e5      	strh	r5, [r4, #22]
 801752e:	8325      	strh	r5, [r4, #24]
 8017530:	8365      	strh	r5, [r4, #26]
 8017532:	83a5      	strh	r5, [r4, #28]
 8017534:	77a5      	strb	r5, [r4, #30]
 8017536:	6803      	ldr	r3, [r0, #0]
 8017538:	695b      	ldr	r3, [r3, #20]
 801753a:	4798      	blx	r3
 801753c:	4606      	mov	r6, r0
 801753e:	b1f8      	cbz	r0, 8017580 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017540:	68e0      	ldr	r0, [r4, #12]
 8017542:	4631      	mov	r1, r6
 8017544:	6803      	ldr	r3, [r0, #0]
 8017546:	68db      	ldr	r3, [r3, #12]
 8017548:	4798      	blx	r3
 801754a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801754e:	4605      	mov	r5, r0
 8017550:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017554:	7a83      	ldrb	r3, [r0, #10]
 8017556:	4313      	orrs	r3, r2
 8017558:	83a3      	strh	r3, [r4, #28]
 801755a:	7a63      	ldrb	r3, [r4, #9]
 801755c:	2b04      	cmp	r3, #4
 801755e:	d10f      	bne.n	8017580 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017560:	68e0      	ldr	r0, [r4, #12]
 8017562:	462a      	mov	r2, r5
 8017564:	4631      	mov	r1, r6
 8017566:	6803      	ldr	r3, [r0, #0]
 8017568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801756a:	4798      	blx	r3
 801756c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017570:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017574:	7aab      	ldrb	r3, [r5, #10]
 8017576:	4313      	orrs	r3, r2
 8017578:	4418      	add	r0, r3
 801757a:	8ba3      	ldrh	r3, [r4, #28]
 801757c:	4418      	add	r0, r3
 801757e:	83a0      	strh	r0, [r4, #28]
 8017580:	4620      	mov	r0, r4
 8017582:	bd70      	pop	{r4, r5, r6, pc}

08017584 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017588:	2400      	movs	r4, #0
 801758a:	b085      	sub	sp, #20
 801758c:	4681      	mov	r9, r0
 801758e:	460f      	mov	r7, r1
 8017590:	4692      	mov	sl, r2
 8017592:	469b      	mov	fp, r3
 8017594:	46a0      	mov	r8, r4
 8017596:	4626      	mov	r6, r4
 8017598:	4554      	cmp	r4, sl
 801759a:	da21      	bge.n	80175e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801759c:	2300      	movs	r3, #0
 801759e:	463a      	mov	r2, r7
 80175a0:	4659      	mov	r1, fp
 80175a2:	4648      	mov	r0, r9
 80175a4:	9303      	str	r3, [sp, #12]
 80175a6:	ab03      	add	r3, sp, #12
 80175a8:	f002 fb52 	bl	8019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80175ac:	4605      	mov	r5, r0
 80175ae:	b1b8      	cbz	r0, 80175e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80175b0:	280a      	cmp	r0, #10
 80175b2:	d015      	beq.n	80175e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80175b4:	9a03      	ldr	r2, [sp, #12]
 80175b6:	b182      	cbz	r2, 80175da <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 80175b8:	f992 000d 	ldrsb.w	r0, [r2, #13]
 80175bc:	4641      	mov	r1, r8
 80175be:	7a93      	ldrb	r3, [r2, #10]
 80175c0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80175c4:	8895      	ldrh	r5, [r2, #4]
 80175c6:	4303      	orrs	r3, r0
 80175c8:	4638      	mov	r0, r7
 80175ca:	9301      	str	r3, [sp, #4]
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175d0:	4798      	blx	r3
 80175d2:	9b01      	ldr	r3, [sp, #4]
 80175d4:	4418      	add	r0, r3
 80175d6:	4406      	add	r6, r0
 80175d8:	b2b6      	uxth	r6, r6
 80175da:	3401      	adds	r4, #1
 80175dc:	46a8      	mov	r8, r5
 80175de:	e7db      	b.n	8017598 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80175e0:	4630      	mov	r0, r6
 80175e2:	b005      	add	sp, #20
 80175e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080175e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80175e8:	2a02      	cmp	r2, #2
 80175ea:	b530      	push	{r4, r5, lr}
 80175ec:	d011      	beq.n	8017612 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80175ee:	2a03      	cmp	r2, #3
 80175f0:	d01c      	beq.n	801762c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80175f2:	2a01      	cmp	r2, #1
 80175f4:	d10c      	bne.n	8017610 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80175f6:	888b      	ldrh	r3, [r1, #4]
 80175f8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80175fc:	8801      	ldrh	r1, [r0, #0]
 80175fe:	1a9b      	subs	r3, r3, r2
 8017600:	8844      	ldrh	r4, [r0, #2]
 8017602:	1a5b      	subs	r3, r3, r1
 8017604:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017608:	8004      	strh	r4, [r0, #0]
 801760a:	8043      	strh	r3, [r0, #2]
 801760c:	8081      	strh	r1, [r0, #4]
 801760e:	80c2      	strh	r2, [r0, #6]
 8017610:	bd30      	pop	{r4, r5, pc}
 8017612:	88cb      	ldrh	r3, [r1, #6]
 8017614:	88c2      	ldrh	r2, [r0, #6]
 8017616:	1a9b      	subs	r3, r3, r2
 8017618:	8842      	ldrh	r2, [r0, #2]
 801761a:	1a9b      	subs	r3, r3, r2
 801761c:	888a      	ldrh	r2, [r1, #4]
 801761e:	8881      	ldrh	r1, [r0, #4]
 8017620:	8043      	strh	r3, [r0, #2]
 8017622:	1a52      	subs	r2, r2, r1
 8017624:	8801      	ldrh	r1, [r0, #0]
 8017626:	1a52      	subs	r2, r2, r1
 8017628:	8002      	strh	r2, [r0, #0]
 801762a:	e7f1      	b.n	8017610 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801762c:	88cb      	ldrh	r3, [r1, #6]
 801762e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017632:	8841      	ldrh	r1, [r0, #2]
 8017634:	1a9b      	subs	r3, r3, r2
 8017636:	f9b0 5000 	ldrsh.w	r5, [r0]
 801763a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801763e:	1a5b      	subs	r3, r3, r1
 8017640:	8045      	strh	r5, [r0, #2]
 8017642:	8082      	strh	r2, [r0, #4]
 8017644:	8003      	strh	r3, [r0, #0]
 8017646:	80c4      	strh	r4, [r0, #6]
 8017648:	e7e2      	b.n	8017610 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801764c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801764c:	b570      	push	{r4, r5, r6, lr}
 801764e:	b086      	sub	sp, #24
 8017650:	ac02      	add	r4, sp, #8
 8017652:	e884 0006 	stmia.w	r4, {r1, r2}
 8017656:	461a      	mov	r2, r3
 8017658:	ab0c      	add	r3, sp, #48	; 0x30
 801765a:	9305      	str	r3, [sp, #20]
 801765c:	4b0a      	ldr	r3, [pc, #40]	; (8017688 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801765e:	685d      	ldr	r5, [r3, #4]
 8017660:	1069      	asrs	r1, r5, #1
 8017662:	07ed      	lsls	r5, r5, #31
 8017664:	eb00 0601 	add.w	r6, r0, r1
 8017668:	bf46      	itte	mi
 801766a:	681b      	ldrmi	r3, [r3, #0]
 801766c:	5841      	ldrmi	r1, [r0, r1]
 801766e:	681d      	ldrpl	r5, [r3, #0]
 8017670:	4630      	mov	r0, r6
 8017672:	bf48      	it	mi
 8017674:	58cd      	ldrmi	r5, [r1, r3]
 8017676:	4621      	mov	r1, r4
 8017678:	9b05      	ldr	r3, [sp, #20]
 801767a:	9301      	str	r3, [sp, #4]
 801767c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801767e:	9300      	str	r3, [sp, #0]
 8017680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017682:	47a8      	blx	r5
 8017684:	b006      	add	sp, #24
 8017686:	bd70      	pop	{r4, r5, r6, pc}
 8017688:	20000030 	.word	0x20000030

0801768c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017690:	b09d      	sub	sp, #116	; 0x74
 8017692:	9114      	str	r1, [sp, #80]	; 0x50
 8017694:	9315      	str	r3, [sp, #84]	; 0x54
 8017696:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8017698:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801769a:	8809      	ldrh	r1, [r1, #0]
 801769c:	889b      	ldrh	r3, [r3, #4]
 801769e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80176a0:	440b      	add	r3, r1
 80176a2:	9210      	str	r2, [sp, #64]	; 0x40
 80176a4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80176a8:	b21b      	sxth	r3, r3
 80176aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80176ac:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 80176b0:	930e      	str	r3, [sp, #56]	; 0x38
 80176b2:	6833      	ldr	r3, [r6, #0]
 80176b4:	7a59      	ldrb	r1, [r3, #9]
 80176b6:	7a1b      	ldrb	r3, [r3, #8]
 80176b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80176ba:	9312      	str	r3, [sp, #72]	; 0x48
 80176bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80176be:	f9b3 4000 	ldrsh.w	r4, [r3]
 80176c2:	2a00      	cmp	r2, #0
 80176c4:	d059      	beq.n	801777a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 80176c6:	7c33      	ldrb	r3, [r6, #16]
 80176c8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80176ca:	2b04      	cmp	r3, #4
 80176cc:	bf14      	ite	ne
 80176ce:	2301      	movne	r3, #1
 80176d0:	2302      	moveq	r3, #2
 80176d2:	4413      	add	r3, r2
 80176d4:	f04f 0800 	mov.w	r8, #0
 80176d8:	930d      	str	r3, [sp, #52]	; 0x34
 80176da:	4645      	mov	r5, r8
 80176dc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80176e0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80176e4:	4293      	cmp	r3, r2
 80176e6:	da75      	bge.n	80177d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80176e8:	2300      	movs	r3, #0
 80176ea:	992b      	ldr	r1, [sp, #172]	; 0xac
 80176ec:	6832      	ldr	r2, [r6, #0]
 80176ee:	931a      	str	r3, [sp, #104]	; 0x68
 80176f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176f2:	428b      	cmp	r3, r1
 80176f4:	db43      	blt.n	801777e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80176f6:	6813      	ldr	r3, [r2, #0]
 80176f8:	4610      	mov	r0, r2
 80176fa:	695b      	ldr	r3, [r3, #20]
 80176fc:	4798      	blx	r3
 80176fe:	4681      	mov	r9, r0
 8017700:	6830      	ldr	r0, [r6, #0]
 8017702:	aa1b      	add	r2, sp, #108	; 0x6c
 8017704:	4649      	mov	r1, r9
 8017706:	6803      	ldr	r3, [r0, #0]
 8017708:	689f      	ldr	r7, [r3, #8]
 801770a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801770e:	47b8      	blx	r7
 8017710:	901a      	str	r0, [sp, #104]	; 0x68
 8017712:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8017716:	45d1      	cmp	r9, sl
 8017718:	d045      	beq.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801771a:	f242 070b 	movw	r7, #8203	; 0x200b
 801771e:	45b9      	cmp	r9, r7
 8017720:	d041      	beq.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017722:	f1b9 0f00 	cmp.w	r9, #0
 8017726:	f000 80ee 	beq.w	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801772a:	f1b9 0f0a 	cmp.w	r9, #10
 801772e:	d057      	beq.n	80177e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017730:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017732:	b383      	cbz	r3, 8017796 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8017734:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8017738:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801773a:	2a00      	cmp	r2, #0
 801773c:	f000 80d2 	beq.w	80178e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8017740:	f1bb 0f00 	cmp.w	fp, #0
 8017744:	d100      	bne.n	8017748 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8017746:	4444      	add	r4, r8
 8017748:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801774c:	f1bb 0f01 	cmp.w	fp, #1
 8017750:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8017754:	f892 800a 	ldrb.w	r8, [r2, #10]
 8017758:	ea48 0803 	orr.w	r8, r8, r3
 801775c:	d128      	bne.n	80177b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801775e:	eba4 0408 	sub.w	r4, r4, r8
 8017762:	2d00      	cmp	r5, #0
 8017764:	d143      	bne.n	80177ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8017766:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017768:	eb08 0304 	add.w	r3, r8, r4
 801776c:	4413      	add	r3, r2
 801776e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017770:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017774:	4293      	cmp	r3, r2
 8017776:	da44      	bge.n	8017802 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017778:	e02b      	b.n	80177d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801777a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801777c:	e7aa      	b.n	80176d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801777e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8017782:	4659      	mov	r1, fp
 8017784:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017786:	9301      	str	r3, [sp, #4]
 8017788:	ab1b      	add	r3, sp, #108	; 0x6c
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	ab1a      	add	r3, sp, #104	; 0x68
 801778e:	f002 fa93 	bl	8019cb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017792:	4681      	mov	r9, r0
 8017794:	e7bd      	b.n	8017712 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8017796:	6830      	ldr	r0, [r6, #0]
 8017798:	6803      	ldr	r3, [r0, #0]
 801779a:	691b      	ldr	r3, [r3, #16]
 801779c:	4798      	blx	r3
 801779e:	4550      	cmp	r0, sl
 80177a0:	d001      	beq.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80177a2:	42b8      	cmp	r0, r7
 80177a4:	d1c8      	bne.n	8017738 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 80177a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177a8:	464d      	mov	r5, r9
 80177aa:	3301      	adds	r3, #1
 80177ac:	930c      	str	r3, [sp, #48]	; 0x30
 80177ae:	e797      	b.n	80176e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 80177b0:	2d00      	cmp	r5, #0
 80177b2:	f000 80aa 	beq.w	801790a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 80177b6:	f1bb 0f00 	cmp.w	fp, #0
 80177ba:	d118      	bne.n	80177ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80177bc:	6830      	ldr	r0, [r6, #0]
 80177be:	4629      	mov	r1, r5
 80177c0:	6803      	ldr	r3, [r0, #0]
 80177c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177c4:	4798      	blx	r3
 80177c6:	4404      	add	r4, r0
 80177c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80177ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80177cc:	1ae3      	subs	r3, r4, r3
 80177ce:	4293      	cmp	r3, r2
 80177d0:	dd17      	ble.n	8017802 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80177d2:	464d      	mov	r5, r9
 80177d4:	2d00      	cmp	r5, #0
 80177d6:	f000 8096 	beq.w	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80177da:	2d0a      	cmp	r5, #10
 80177dc:	f040 8084 	bne.w	80178e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 80177e0:	250a      	movs	r5, #10
 80177e2:	fab5 f085 	clz	r0, r5
 80177e6:	0940      	lsrs	r0, r0, #5
 80177e8:	b01d      	add	sp, #116	; 0x74
 80177ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177ee:	6830      	ldr	r0, [r6, #0]
 80177f0:	4629      	mov	r1, r5
 80177f2:	6803      	ldr	r3, [r0, #0]
 80177f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177f6:	4798      	blx	r3
 80177f8:	f1bb 0f01 	cmp.w	fp, #1
 80177fc:	eba4 0400 	sub.w	r4, r4, r0
 8017800:	d0b1      	beq.n	8017766 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017802:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017804:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017806:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801780a:	f9b3 5000 	ldrsh.w	r5, [r3]
 801780e:	7b43      	ldrb	r3, [r0, #13]
 8017810:	4421      	add	r1, r4
 8017812:	015b      	lsls	r3, r3, #5
 8017814:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017818:	7983      	ldrb	r3, [r0, #6]
 801781a:	4313      	orrs	r3, r2
 801781c:	440b      	add	r3, r1
 801781e:	42ab      	cmp	r3, r5
 8017820:	dbc1      	blt.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017824:	4299      	cmp	r1, r3
 8017826:	dabe      	bge.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017828:	6830      	ldr	r0, [r6, #0]
 801782a:	42a5      	cmp	r5, r4
 801782c:	6803      	ldr	r3, [r0, #0]
 801782e:	bfcc      	ite	gt
 8017830:	1b2d      	subgt	r5, r5, r4
 8017832:	2500      	movle	r5, #0
 8017834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017836:	bfc8      	it	gt
 8017838:	b2ad      	uxthgt	r5, r5
 801783a:	4798      	blx	r3
 801783c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801783e:	4935      	ldr	r1, [pc, #212]	; (8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8017840:	7b5a      	ldrb	r2, [r3, #13]
 8017842:	f893 e008 	ldrb.w	lr, [r3, #8]
 8017846:	f012 0f40 	tst.w	r2, #64	; 0x40
 801784a:	bf18      	it	ne
 801784c:	468c      	movne	ip, r1
 801784e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017850:	bf08      	it	eq
 8017852:	f04f 0c00 	moveq.w	ip, #0
 8017856:	4408      	add	r0, r1
 8017858:	00d1      	lsls	r1, r2, #3
 801785a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801785e:	ea41 070e 	orr.w	r7, r1, lr
 8017862:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8017864:	ea4c 0707 	orr.w	r7, ip, r7
 8017868:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801786c:	1bc7      	subs	r7, r0, r7
 801786e:	b2bf      	uxth	r7, r7
 8017870:	fa0f fa87 	sxth.w	sl, r7
 8017874:	4551      	cmp	r1, sl
 8017876:	dd33      	ble.n	80178e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8017878:	0112      	lsls	r2, r2, #4
 801787a:	79d8      	ldrb	r0, [r3, #7]
 801787c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017880:	4302      	orrs	r2, r0
 8017882:	4492      	add	sl, r2
 8017884:	4551      	cmp	r1, sl
 8017886:	dc8e      	bgt.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017888:	1bcf      	subs	r7, r1, r7
 801788a:	468a      	mov	sl, r1
 801788c:	b2bf      	uxth	r7, r7
 801788e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017892:	6830      	ldr	r0, [r6, #0]
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	6801      	ldr	r1, [r0, #0]
 8017898:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801789a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801789c:	9311      	str	r3, [sp, #68]	; 0x44
 801789e:	9216      	str	r2, [sp, #88]	; 0x58
 80178a0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80178a2:	4788      	blx	r1
 80178a4:	79b1      	ldrb	r1, [r6, #6]
 80178a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80178a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80178aa:	7bb1      	ldrb	r1, [r6, #14]
 80178ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80178ae:	910a      	str	r1, [sp, #40]	; 0x28
 80178b0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 80178b4:	9109      	str	r1, [sp, #36]	; 0x24
 80178b6:	68b1      	ldr	r1, [r6, #8]
 80178b8:	9305      	str	r3, [sp, #20]
 80178ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80178bc:	9206      	str	r2, [sp, #24]
 80178be:	e9cd a501 	strd	sl, r5, [sp, #4]
 80178c2:	4425      	add	r5, r4
 80178c4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80178c8:	b22d      	sxth	r5, r5
 80178ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178cc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80178d0:	9500      	str	r5, [sp, #0]
 80178d2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80178d4:	681a      	ldr	r2, [r3, #0]
 80178d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80178d8:	685b      	ldr	r3, [r3, #4]
 80178da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80178dc:	47a8      	blx	r5
 80178de:	e762      	b.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80178e0:	2700      	movs	r7, #0
 80178e2:	e7d4      	b.n	801788e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 80178e4:	4690      	mov	r8, r2
 80178e6:	e75e      	b.n	80177a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80178e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80178ea:	3401      	adds	r4, #1
 80178ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80178ee:	429c      	cmp	r4, r3
 80178f0:	f6bf af77 	bge.w	80177e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80178f4:	4659      	mov	r1, fp
 80178f6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80178f8:	f002 f96a 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80178fc:	4605      	mov	r5, r0
 80178fe:	b110      	cbz	r0, 8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017900:	280a      	cmp	r0, #10
 8017902:	d1f2      	bne.n	80178ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8017904:	e76c      	b.n	80177e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017906:	2500      	movs	r5, #0
 8017908:	e76b      	b.n	80177e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801790a:	f1bb 0f00 	cmp.w	fp, #0
 801790e:	f43f af5b 	beq.w	80177c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8017912:	e776      	b.n	8017802 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017914:	fffffe00 	.word	0xfffffe00

08017918 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017918:	b530      	push	{r4, r5, lr}
 801791a:	8a44      	ldrh	r4, [r0, #18]
 801791c:	8ac5      	ldrh	r5, [r0, #22]
 801791e:	82c3      	strh	r3, [r0, #22]
 8017920:	442c      	add	r4, r5
 8017922:	1ae4      	subs	r4, r4, r3
 8017924:	8b03      	ldrh	r3, [r0, #24]
 8017926:	8244      	strh	r4, [r0, #18]
 8017928:	8a84      	ldrh	r4, [r0, #20]
 801792a:	4422      	add	r2, r4
 801792c:	440c      	add	r4, r1
 801792e:	1a59      	subs	r1, r3, r1
 8017930:	8342      	strh	r2, [r0, #26]
 8017932:	8284      	strh	r4, [r0, #20]
 8017934:	8301      	strh	r1, [r0, #24]
 8017936:	bd30      	pop	{r4, r5, pc}

08017938 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801793c:	7a45      	ldrb	r5, [r0, #9]
 801793e:	b085      	sub	sp, #20
 8017940:	4604      	mov	r4, r0
 8017942:	4689      	mov	r9, r1
 8017944:	1eeb      	subs	r3, r5, #3
 8017946:	b2db      	uxtb	r3, r3
 8017948:	b329      	cbz	r1, 8017996 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801794a:	2b01      	cmp	r3, #1
 801794c:	d921      	bls.n	8017992 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801794e:	1e69      	subs	r1, r5, #1
 8017950:	f1d1 0b00 	rsbs	fp, r1, #0
 8017954:	eb4b 0b01 	adc.w	fp, fp, r1
 8017958:	1eaa      	subs	r2, r5, #2
 801795a:	2500      	movs	r5, #0
 801795c:	4253      	negs	r3, r2
 801795e:	9500      	str	r5, [sp, #0]
 8017960:	4153      	adcs	r3, r2
 8017962:	9301      	str	r3, [sp, #4]
 8017964:	2600      	movs	r6, #0
 8017966:	f242 080b 	movw	r8, #8203	; 0x200b
 801796a:	8266      	strh	r6, [r4, #18]
 801796c:	82a6      	strh	r6, [r4, #20]
 801796e:	2300      	movs	r3, #0
 8017970:	68e2      	ldr	r2, [r4, #12]
 8017972:	7a21      	ldrb	r1, [r4, #8]
 8017974:	9303      	str	r3, [sp, #12]
 8017976:	ab03      	add	r3, sp, #12
 8017978:	6860      	ldr	r0, [r4, #4]
 801797a:	8827      	ldrh	r7, [r4, #0]
 801797c:	f002 f968 	bl	8019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017980:	8020      	strh	r0, [r4, #0]
 8017982:	b9b0      	cbnz	r0, 80179b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8017984:	8b22      	ldrh	r2, [r4, #24]
 8017986:	2300      	movs	r3, #0
 8017988:	4611      	mov	r1, r2
 801798a:	4620      	mov	r0, r4
 801798c:	f7ff ffc4 	bl	8017918 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017990:	e062      	b.n	8017a58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017992:	468b      	mov	fp, r1
 8017994:	e7e0      	b.n	8017958 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8017996:	2b01      	cmp	r3, #1
 8017998:	f105 35ff 	add.w	r5, r5, #4294967295
 801799c:	9101      	str	r1, [sp, #4]
 801799e:	468b      	mov	fp, r1
 80179a0:	bf8c      	ite	hi
 80179a2:	2300      	movhi	r3, #0
 80179a4:	2301      	movls	r3, #1
 80179a6:	2d01      	cmp	r5, #1
 80179a8:	9300      	str	r3, [sp, #0]
 80179aa:	bf8c      	ite	hi
 80179ac:	2500      	movhi	r5, #0
 80179ae:	2501      	movls	r5, #1
 80179b0:	e7d8      	b.n	8017964 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 80179b2:	8ae3      	ldrh	r3, [r4, #22]
 80179b4:	280a      	cmp	r0, #10
 80179b6:	f103 0301 	add.w	r3, r3, #1
 80179ba:	82e3      	strh	r3, [r4, #22]
 80179bc:	d0e2      	beq.n	8017984 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 80179be:	9a03      	ldr	r2, [sp, #12]
 80179c0:	b972      	cbnz	r2, 80179e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80179c2:	4540      	cmp	r0, r8
 80179c4:	d1d3      	bne.n	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80179c6:	8823      	ldrh	r3, [r4, #0]
 80179c8:	8b21      	ldrh	r1, [r4, #24]
 80179ca:	2b20      	cmp	r3, #32
 80179cc:	d001      	beq.n	80179d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80179ce:	4543      	cmp	r3, r8
 80179d0:	d11d      	bne.n	8017a0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80179d2:	2f20      	cmp	r7, #32
 80179d4:	d002      	beq.n	80179dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80179d6:	4547      	cmp	r7, r8
 80179d8:	bf18      	it	ne
 80179da:	460e      	movne	r6, r1
 80179dc:	2001      	movs	r0, #1
 80179de:	e017      	b.n	8017a10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80179e0:	4540      	cmp	r0, r8
 80179e2:	d012      	beq.n	8017a0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80179e4:	8893      	ldrh	r3, [r2, #4]
 80179e6:	4639      	mov	r1, r7
 80179e8:	8023      	strh	r3, [r4, #0]
 80179ea:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80179ee:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 80179f2:	f892 a00a 	ldrb.w	sl, [r2, #10]
 80179f6:	ea4a 0a00 	orr.w	sl, sl, r0
 80179fa:	68e0      	ldr	r0, [r4, #12]
 80179fc:	6803      	ldr	r3, [r0, #0]
 80179fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a00:	4798      	blx	r3
 8017a02:	eb0a 0200 	add.w	r2, sl, r0
 8017a06:	b292      	uxth	r2, r2
 8017a08:	e7dd      	b.n	80179c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	e7db      	b.n	80179c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017a0e:	2000      	movs	r0, #0
 8017a10:	440a      	add	r2, r1
 8017a12:	8aa3      	ldrh	r3, [r4, #20]
 8017a14:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017a18:	b292      	uxth	r2, r2
 8017a1a:	8322      	strh	r2, [r4, #24]
 8017a1c:	4413      	add	r3, r2
 8017a1e:	f1b9 0f00 	cmp.w	r9, #0
 8017a22:	d022      	beq.n	8017a6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8017a24:	f1bb 0f00 	cmp.w	fp, #0
 8017a28:	d102      	bne.n	8017a30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8017a2a:	9901      	ldr	r1, [sp, #4]
 8017a2c:	b149      	cbz	r1, 8017a42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017a2e:	b140      	cbz	r0, 8017a42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017a30:	8ba1      	ldrh	r1, [r4, #28]
 8017a32:	4419      	add	r1, r3
 8017a34:	458c      	cmp	ip, r1
 8017a36:	da12      	bge.n	8017a5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017a38:	8a61      	ldrh	r1, [r4, #18]
 8017a3a:	b181      	cbz	r1, 8017a5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017a3c:	4563      	cmp	r3, ip
 8017a3e:	dd96      	ble.n	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017a40:	e004      	b.n	8017a4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8017a42:	4563      	cmp	r3, ip
 8017a44:	dd93      	ble.n	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017a46:	8a63      	ldrh	r3, [r4, #18]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d090      	beq.n	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	8ba2      	ldrh	r2, [r4, #28]
 8017a50:	77a3      	strb	r3, [r4, #30]
 8017a52:	8b63      	ldrh	r3, [r4, #26]
 8017a54:	4413      	add	r3, r2
 8017a56:	8363      	strh	r3, [r4, #26]
 8017a58:	b005      	add	sp, #20
 8017a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a5e:	2300      	movs	r3, #0
 8017a60:	4611      	mov	r1, r2
 8017a62:	4620      	mov	r0, r4
 8017a64:	f7ff ff58 	bl	8017918 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017a68:	e781      	b.n	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017a6a:	4563      	cmp	r3, ip
 8017a6c:	dd16      	ble.n	8017a9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8017a6e:	9b00      	ldr	r3, [sp, #0]
 8017a70:	b113      	cbz	r3, 8017a78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8017a72:	2301      	movs	r3, #1
 8017a74:	460a      	mov	r2, r1
 8017a76:	e787      	b.n	8017988 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8017a78:	2d00      	cmp	r5, #0
 8017a7a:	f43f af78 	beq.w	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017a7e:	2800      	cmp	r0, #0
 8017a80:	f47f af75 	bne.w	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017a84:	2f20      	cmp	r7, #32
 8017a86:	d001      	beq.n	8017a8c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8017a88:	4547      	cmp	r7, r8
 8017a8a:	d102      	bne.n	8017a92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	4632      	mov	r2, r6
 8017a90:	e77b      	b.n	801798a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8017a92:	8a63      	ldrh	r3, [r4, #18]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	f43f af6a 	beq.w	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017a9a:	e7dd      	b.n	8017a58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017a9c:	2800      	cmp	r0, #0
 8017a9e:	f47f af66 	bne.w	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017aa2:	2f20      	cmp	r7, #32
 8017aa4:	d002      	beq.n	8017aac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8017aa6:	4547      	cmp	r7, r8
 8017aa8:	f47f af61 	bne.w	801796e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017aac:	2301      	movs	r3, #1
 8017aae:	4632      	mov	r2, r6
 8017ab0:	e7d7      	b.n	8017a62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08017ab2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8017ab2:	b570      	push	{r4, r5, r6, lr}
 8017ab4:	4606      	mov	r6, r0
 8017ab6:	b08a      	sub	sp, #40	; 0x28
 8017ab8:	4615      	mov	r5, r2
 8017aba:	b191      	cbz	r1, 8017ae2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8017abc:	2401      	movs	r4, #1
 8017abe:	e9cd 3100 	strd	r3, r1, [sp]
 8017ac2:	4613      	mov	r3, r2
 8017ac4:	4601      	mov	r1, r0
 8017ac6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8017aca:	a802      	add	r0, sp, #8
 8017acc:	f7ff fd20 	bl	8017510 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017ad0:	2100      	movs	r1, #0
 8017ad2:	a802      	add	r0, sp, #8
 8017ad4:	f7ff ff30 	bl	8017938 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017ad8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017adc:	b173      	cbz	r3, 8017afc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017ade:	3401      	adds	r4, #1
 8017ae0:	e7f6      	b.n	8017ad0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8017ae2:	2401      	movs	r4, #1
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	f002 f873 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017aea:	280a      	cmp	r0, #10
 8017aec:	4629      	mov	r1, r5
 8017aee:	4630      	mov	r0, r6
 8017af0:	bf08      	it	eq
 8017af2:	3401      	addeq	r4, #1
 8017af4:	f002 f86c 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017af8:	2800      	cmp	r0, #0
 8017afa:	d1f6      	bne.n	8017aea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8017afc:	b2a0      	uxth	r0, r4
 8017afe:	b00a      	add	sp, #40	; 0x28
 8017b00:	bd70      	pop	{r4, r5, r6, pc}

08017b02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017b02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b06:	b0db      	sub	sp, #364	; 0x16c
 8017b08:	468a      	mov	sl, r1
 8017b0a:	461c      	mov	r4, r3
 8017b0c:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8017b10:	9009      	str	r0, [sp, #36]	; 0x24
 8017b12:	f1bb 0f00 	cmp.w	fp, #0
 8017b16:	f000 80c7 	beq.w	8017ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	f000 80c3 	beq.w	8017ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017b22:	7ba3      	ldrb	r3, [r4, #14]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	f000 80bf 	beq.w	8017ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017b2a:	af0c      	add	r7, sp, #48	; 0x30
 8017b2c:	6810      	ldr	r0, [r2, #0]
 8017b2e:	6851      	ldr	r1, [r2, #4]
 8017b30:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8017b34:	463b      	mov	r3, r7
 8017b36:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8017b3a:	c303      	stmia	r3!, {r0, r1}
 8017b3c:	2100      	movs	r1, #0
 8017b3e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8017b42:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017b46:	4638      	mov	r0, r7
 8017b48:	910e      	str	r1, [sp, #56]	; 0x38
 8017b4a:	a90e      	add	r1, sp, #56	; 0x38
 8017b4c:	79a2      	ldrb	r2, [r4, #6]
 8017b4e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017b52:	f7ff fd49 	bl	80175e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017b56:	a90e      	add	r1, sp, #56	; 0x38
 8017b58:	79a2      	ldrb	r2, [r4, #6]
 8017b5a:	4608      	mov	r0, r1
 8017b5c:	f7ff fd44 	bl	80175e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017b60:	4648      	mov	r0, r9
 8017b62:	f001 fef3 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 8017b66:	6820      	ldr	r0, [r4, #0]
 8017b68:	6803      	ldr	r3, [r0, #0]
 8017b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b6c:	4798      	blx	r3
 8017b6e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017b70:	4603      	mov	r3, r0
 8017b72:	4659      	mov	r1, fp
 8017b74:	4648      	mov	r0, r9
 8017b76:	f001 ff06 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017b7a:	a82e      	add	r0, sp, #184	; 0xb8
 8017b7c:	f001 fee6 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 8017b80:	f894 8004 	ldrb.w	r8, [r4, #4]
 8017b84:	f1b8 0f00 	cmp.w	r8, #0
 8017b88:	d009      	beq.n	8017b9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8017b8a:	6820      	ldr	r0, [r4, #0]
 8017b8c:	6803      	ldr	r3, [r0, #0]
 8017b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b90:	4798      	blx	r3
 8017b92:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017b94:	4603      	mov	r3, r0
 8017b96:	4659      	mov	r1, fp
 8017b98:	a82e      	add	r0, sp, #184	; 0xb8
 8017b9a:	f001 fef4 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017b9e:	6820      	ldr	r0, [r4, #0]
 8017ba0:	6803      	ldr	r3, [r0, #0]
 8017ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ba4:	4798      	blx	r3
 8017ba6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017baa:	182e      	adds	r6, r5, r0
 8017bac:	2e00      	cmp	r6, #0
 8017bae:	dd45      	ble.n	8017c3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8017bb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017bb4:	4283      	cmp	r3, r0
 8017bb6:	db41      	blt.n	8017c3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8017bb8:	441d      	add	r5, r3
 8017bba:	fb95 f5f6 	sdiv	r5, r5, r6
 8017bbe:	a844      	add	r0, sp, #272	; 0x110
 8017bc0:	f001 fec4 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 8017bc4:	7c23      	ldrb	r3, [r4, #16]
 8017bc6:	b14b      	cbz	r3, 8017bdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8017bc8:	6820      	ldr	r0, [r4, #0]
 8017bca:	6803      	ldr	r3, [r0, #0]
 8017bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bce:	4798      	blx	r3
 8017bd0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	4659      	mov	r1, fp
 8017bd6:	a844      	add	r0, sp, #272	; 0x110
 8017bd8:	f001 fed5 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017bdc:	7c21      	ldrb	r1, [r4, #16]
 8017bde:	a810      	add	r0, sp, #64	; 0x40
 8017be0:	7963      	ldrb	r3, [r4, #5]
 8017be2:	9101      	str	r1, [sp, #4]
 8017be4:	6821      	ldr	r1, [r4, #0]
 8017be6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017bea:	9100      	str	r1, [sp, #0]
 8017bec:	a944      	add	r1, sp, #272	; 0x110
 8017bee:	f7ff fc8f 	bl	8017510 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017bf2:	7c23      	ldrb	r3, [r4, #16]
 8017bf4:	bb23      	cbnz	r3, 8017c40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8017bf6:	fa1f fb86 	uxth.w	fp, r6
 8017bfa:	2d00      	cmp	r5, #0
 8017bfc:	dd57      	ble.n	8017cae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8017bfe:	7961      	ldrb	r1, [r4, #5]
 8017c00:	4648      	mov	r0, r9
 8017c02:	f001 ffe5 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017c06:	4603      	mov	r3, r0
 8017c08:	f1b8 0f00 	cmp.w	r8, #0
 8017c0c:	d005      	beq.n	8017c1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8017c0e:	9008      	str	r0, [sp, #32]
 8017c10:	a82e      	add	r0, sp, #184	; 0xb8
 8017c12:	7961      	ldrb	r1, [r4, #5]
 8017c14:	f001 ffdc 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017c18:	9b08      	ldr	r3, [sp, #32]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d044      	beq.n	8017ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017c1e:	2b0a      	cmp	r3, #10
 8017c20:	d1eb      	bne.n	8017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8017c22:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017c26:	3d01      	subs	r5, #1
 8017c28:	445b      	add	r3, fp
 8017c2a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017c2e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017c32:	eba3 030b 	sub.w	r3, r3, fp
 8017c36:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017c3a:	e7de      	b.n	8017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8017c3c:	2500      	movs	r5, #0
 8017c3e:	e7be      	b.n	8017bbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8017c40:	0073      	lsls	r3, r6, #1
 8017c42:	9308      	str	r3, [sp, #32]
 8017c44:	2d00      	cmp	r5, #0
 8017c46:	dd32      	ble.n	8017cae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8017c48:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8017c4c:	a810      	add	r0, sp, #64	; 0x40
 8017c4e:	9b08      	ldr	r3, [sp, #32]
 8017c50:	428b      	cmp	r3, r1
 8017c52:	bfd4      	ite	le
 8017c54:	2100      	movle	r1, #0
 8017c56:	2101      	movgt	r1, #1
 8017c58:	f7ff fe6e 	bl	8017938 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017c5c:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8017c60:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017c64:	fa1f fb83 	uxth.w	fp, r3
 8017c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c6c:	459b      	cmp	fp, r3
 8017c6e:	d00b      	beq.n	8017c88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8017c70:	7961      	ldrb	r1, [r4, #5]
 8017c72:	4648      	mov	r0, r9
 8017c74:	f001 ffac 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017c78:	f1b8 0f00 	cmp.w	r8, #0
 8017c7c:	d0f0      	beq.n	8017c60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8017c7e:	7961      	ldrb	r1, [r4, #5]
 8017c80:	a82e      	add	r0, sp, #184	; 0xb8
 8017c82:	f001 ffa5 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017c86:	e7eb      	b.n	8017c60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8017c88:	b2b3      	uxth	r3, r6
 8017c8a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017c8e:	3d01      	subs	r5, #1
 8017c90:	441a      	add	r2, r3
 8017c92:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8017c96:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8017c9a:	1ad3      	subs	r3, r2, r3
 8017c9c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ca0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d1cd      	bne.n	8017c44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8017ca8:	b05b      	add	sp, #364	; 0x16c
 8017caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cae:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8017cb2:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8017cb6:	7c23      	ldrb	r3, [r4, #16]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d05f      	beq.n	8017d7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8017cbc:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8017cc0:	a810      	add	r0, sp, #64	; 0x40
 8017cc2:	458b      	cmp	fp, r1
 8017cc4:	bfd4      	ite	le
 8017cc6:	2100      	movle	r1, #0
 8017cc8:	2101      	movgt	r1, #1
 8017cca:	f7ff fe35 	bl	8017938 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017cce:	f1b8 0f00 	cmp.w	r8, #0
 8017cd2:	d04c      	beq.n	8017d6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8017cd4:	7c23      	ldrb	r3, [r4, #16]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d053      	beq.n	8017d82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8017cda:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8017cde:	7922      	ldrb	r2, [r4, #4]
 8017ce0:	2a01      	cmp	r2, #1
 8017ce2:	d13c      	bne.n	8017d5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8017ce4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8017ce8:	1ac0      	subs	r0, r0, r3
 8017cea:	2302      	movs	r3, #2
 8017cec:	fb90 f0f3 	sdiv	r0, r0, r3
 8017cf0:	b200      	sxth	r0, r0
 8017cf2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017cf6:	4418      	add	r0, r3
 8017cf8:	7c23      	ldrb	r3, [r4, #16]
 8017cfa:	8028      	strh	r0, [r5, #0]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d03a      	beq.n	8017d76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8017d00:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8017d04:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8017d08:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017d0c:	f8cd 9010 	str.w	r9, [sp, #16]
 8017d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d12:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017d16:	2200      	movs	r2, #0
 8017d18:	2100      	movs	r1, #0
 8017d1a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8017d1e:	e9cd 5700 	strd	r5, r7, [sp]
 8017d22:	4652      	mov	r2, sl
 8017d24:	f7ff fcb2 	bl	801768c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	d1bd      	bne.n	8017ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017d2c:	b2b2      	uxth	r2, r6
 8017d2e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017d32:	4611      	mov	r1, r2
 8017d34:	4413      	add	r3, r2
 8017d36:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8017d3a:	b21b      	sxth	r3, r3
 8017d3c:	1a52      	subs	r2, r2, r1
 8017d3e:	7c21      	ldrb	r1, [r4, #16]
 8017d40:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017d44:	b212      	sxth	r2, r2
 8017d46:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8017d4a:	b109      	cbz	r1, 8017d50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8017d4c:	42b2      	cmp	r2, r6
 8017d4e:	dbab      	blt.n	8017ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017d50:	887a      	ldrh	r2, [r7, #2]
 8017d52:	88f9      	ldrh	r1, [r7, #6]
 8017d54:	440a      	add	r2, r1
 8017d56:	b212      	sxth	r2, r2
 8017d58:	4293      	cmp	r3, r2
 8017d5a:	ddac      	ble.n	8017cb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8017d5c:	e7a4      	b.n	8017ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017d5e:	2a02      	cmp	r2, #2
 8017d60:	d107      	bne.n	8017d72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8017d62:	7be2      	ldrb	r2, [r4, #15]
 8017d64:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8017d68:	1a80      	subs	r0, r0, r2
 8017d6a:	1ac0      	subs	r0, r0, r3
 8017d6c:	e7c0      	b.n	8017cf0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8017d6e:	7be0      	ldrb	r0, [r4, #15]
 8017d70:	e7bf      	b.n	8017cf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017d72:	2000      	movs	r0, #0
 8017d74:	e7bd      	b.n	8017cf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017d76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017d7a:	e7c3      	b.n	8017d04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8017d7c:	f1b8 0f00 	cmp.w	r8, #0
 8017d80:	d0f5      	beq.n	8017d6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8017d82:	2300      	movs	r3, #0
 8017d84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017d88:	6821      	ldr	r1, [r4, #0]
 8017d8a:	a82e      	add	r0, sp, #184	; 0xb8
 8017d8c:	f7ff fbfa 	bl	8017584 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017d90:	b203      	sxth	r3, r0
 8017d92:	e7a4      	b.n	8017cde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08017d94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017d94:	2b02      	cmp	r3, #2
 8017d96:	b510      	push	{r4, lr}
 8017d98:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017d9c:	d00b      	beq.n	8017db6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8017d9e:	2b03      	cmp	r3, #3
 8017da0:	d00e      	beq.n	8017dc0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8017da2:	2b01      	cmp	r3, #1
 8017da4:	d001      	beq.n	8017daa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8017da6:	1860      	adds	r0, r4, r1
 8017da8:	bd10      	pop	{r4, pc}
 8017daa:	8880      	ldrh	r0, [r0, #4]
 8017dac:	4420      	add	r0, r4
 8017dae:	b200      	sxth	r0, r0
 8017db0:	1a80      	subs	r0, r0, r2
 8017db2:	3801      	subs	r0, #1
 8017db4:	e7f8      	b.n	8017da8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8017db6:	8880      	ldrh	r0, [r0, #4]
 8017db8:	4420      	add	r0, r4
 8017dba:	b200      	sxth	r0, r0
 8017dbc:	1a40      	subs	r0, r0, r1
 8017dbe:	e7f8      	b.n	8017db2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017dc0:	18a0      	adds	r0, r4, r2
 8017dc2:	e7f1      	b.n	8017da8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08017dc4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017dc4:	2b02      	cmp	r3, #2
 8017dc6:	b510      	push	{r4, lr}
 8017dc8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8017dcc:	d006      	beq.n	8017ddc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8017dce:	2b03      	cmp	r3, #3
 8017dd0:	d00a      	beq.n	8017de8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017dd2:	2b01      	cmp	r3, #1
 8017dd4:	bf14      	ite	ne
 8017dd6:	18a0      	addne	r0, r4, r2
 8017dd8:	1860      	addeq	r0, r4, r1
 8017dda:	bd10      	pop	{r4, pc}
 8017ddc:	88c0      	ldrh	r0, [r0, #6]
 8017dde:	4420      	add	r0, r4
 8017de0:	b200      	sxth	r0, r0
 8017de2:	1a80      	subs	r0, r0, r2
 8017de4:	3801      	subs	r0, #1
 8017de6:	e7f8      	b.n	8017dda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8017de8:	88c0      	ldrh	r0, [r0, #6]
 8017dea:	4420      	add	r0, r4
 8017dec:	b200      	sxth	r0, r0
 8017dee:	1a40      	subs	r0, r0, r1
 8017df0:	e7f8      	b.n	8017de4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08017df4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017df4:	4b01      	ldr	r3, [pc, #4]	; (8017dfc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017df6:	2200      	movs	r2, #0
 8017df8:	601a      	str	r2, [r3, #0]
 8017dfa:	4770      	bx	lr
 8017dfc:	2000bca0 	.word	0x2000bca0

08017e00 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8017e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e02:	1e05      	subs	r5, r0, #0
 8017e04:	f04f 0601 	mov.w	r6, #1
 8017e08:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8017e0c:	bfba      	itte	lt
 8017e0e:	f04f 37ff 	movlt.w	r7, #4294967295
 8017e12:	426d      	neglt	r5, r5
 8017e14:	2701      	movge	r7, #1
 8017e16:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8017e1a:	f1be 0f00 	cmp.w	lr, #0
 8017e1e:	bfbc      	itt	lt
 8017e20:	f1ce 0e00 	rsblt	lr, lr, #0
 8017e24:	427f      	neglt	r7, r7
 8017e26:	2c00      	cmp	r4, #0
 8017e28:	fa4e f001 	asr.w	r0, lr, r1
 8017e2c:	fa06 f101 	lsl.w	r1, r6, r1
 8017e30:	bfbc      	itt	lt
 8017e32:	4264      	neglt	r4, r4
 8017e34:	427f      	neglt	r7, r7
 8017e36:	3901      	subs	r1, #1
 8017e38:	ea01 010e 	and.w	r1, r1, lr
 8017e3c:	434d      	muls	r5, r1
 8017e3e:	f8dc 1000 	ldr.w	r1, [ip]
 8017e42:	fb03 1300 	mla	r3, r3, r0, r1
 8017e46:	fb95 f1f4 	sdiv	r1, r5, r4
 8017e4a:	fb04 5511 	mls	r5, r4, r1, r5
 8017e4e:	441d      	add	r5, r3
 8017e50:	fb95 f3f4 	sdiv	r3, r5, r4
 8017e54:	4419      	add	r1, r3
 8017e56:	fb04 5413 	mls	r4, r4, r3, r5
 8017e5a:	fb02 1000 	mla	r0, r2, r0, r1
 8017e5e:	f8cc 4000 	str.w	r4, [ip]
 8017e62:	4378      	muls	r0, r7
 8017e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017e68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e6c:	4c24      	ldr	r4, [pc, #144]	; (8017f00 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8017e6e:	b086      	sub	sp, #24
 8017e70:	4605      	mov	r5, r0
 8017e72:	6807      	ldr	r7, [r0, #0]
 8017e74:	69a3      	ldr	r3, [r4, #24]
 8017e76:	b92b      	cbnz	r3, 8017e84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8017e78:	6840      	ldr	r0, [r0, #4]
 8017e7a:	e9c5 7000 	strd	r7, r0, [r5]
 8017e7e:	b006      	add	sp, #24
 8017e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e84:	f04f 0802 	mov.w	r8, #2
 8017e88:	68a2      	ldr	r2, [r4, #8]
 8017e8a:	ae06      	add	r6, sp, #24
 8017e8c:	6820      	ldr	r0, [r4, #0]
 8017e8e:	fb93 f1f8 	sdiv	r1, r3, r8
 8017e92:	440a      	add	r2, r1
 8017e94:	69e1      	ldr	r1, [r4, #28]
 8017e96:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017e9a:	9700      	str	r7, [sp, #0]
 8017e9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017e9e:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8017ea2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017ea4:	f7ff ffac 	bl	8017e00 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017ea8:	69a3      	ldr	r3, [r4, #24]
 8017eaa:	4607      	mov	r7, r0
 8017eac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017eae:	9301      	str	r3, [sp, #4]
 8017eb0:	686b      	ldr	r3, [r5, #4]
 8017eb2:	6a21      	ldr	r1, [r4, #32]
 8017eb4:	9300      	str	r3, [sp, #0]
 8017eb6:	9602      	str	r6, [sp, #8]
 8017eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017eba:	6860      	ldr	r0, [r4, #4]
 8017ebc:	f7ff ffa0 	bl	8017e00 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017ec0:	69a2      	ldr	r2, [r4, #24]
 8017ec2:	6963      	ldr	r3, [r4, #20]
 8017ec4:	4407      	add	r7, r0
 8017ec6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017ec8:	68e0      	ldr	r0, [r4, #12]
 8017eca:	fb92 f8f8 	sdiv	r8, r2, r8
 8017ece:	4443      	add	r3, r8
 8017ed0:	9305      	str	r3, [sp, #20]
 8017ed2:	682b      	ldr	r3, [r5, #0]
 8017ed4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8017ed8:	9300      	str	r3, [sp, #0]
 8017eda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017edc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017ede:	f7ff ff8f 	bl	8017e00 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017ee2:	69a3      	ldr	r3, [r4, #24]
 8017ee4:	4680      	mov	r8, r0
 8017ee6:	9602      	str	r6, [sp, #8]
 8017ee8:	9301      	str	r3, [sp, #4]
 8017eea:	686b      	ldr	r3, [r5, #4]
 8017eec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017eee:	9300      	str	r3, [sp, #0]
 8017ef0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017ef2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8017ef4:	6920      	ldr	r0, [r4, #16]
 8017ef6:	f7ff ff83 	bl	8017e00 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017efa:	4440      	add	r0, r8
 8017efc:	e7bd      	b.n	8017e7a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8017efe:	bf00      	nop
 8017f00:	2000bca4 	.word	0x2000bca4

08017f04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017f04:	4b07      	ldr	r3, [pc, #28]	; (8017f24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017f06:	b510      	push	{r4, lr}
 8017f08:	781b      	ldrb	r3, [r3, #0]
 8017f0a:	2b01      	cmp	r3, #1
 8017f0c:	d108      	bne.n	8017f20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017f0e:	4b06      	ldr	r3, [pc, #24]	; (8017f28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017f10:	880c      	ldrh	r4, [r1, #0]
 8017f12:	881b      	ldrh	r3, [r3, #0]
 8017f14:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017f18:	3b01      	subs	r3, #1
 8017f1a:	1b1b      	subs	r3, r3, r4
 8017f1c:	8003      	strh	r3, [r0, #0]
 8017f1e:	800a      	strh	r2, [r1, #0]
 8017f20:	bd10      	pop	{r4, pc}
 8017f22:	bf00      	nop
 8017f24:	2000bc70 	.word	0x2000bc70
 8017f28:	2000bc74 	.word	0x2000bc74

08017f2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017f2c:	4b0a      	ldr	r3, [pc, #40]	; (8017f58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017f2e:	b510      	push	{r4, lr}
 8017f30:	781b      	ldrb	r3, [r3, #0]
 8017f32:	2b01      	cmp	r3, #1
 8017f34:	d10e      	bne.n	8017f54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017f36:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017f3a:	8843      	ldrh	r3, [r0, #2]
 8017f3c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017f40:	18ca      	adds	r2, r1, r3
 8017f42:	4b06      	ldr	r3, [pc, #24]	; (8017f5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017f44:	8044      	strh	r4, [r0, #2]
 8017f46:	881b      	ldrh	r3, [r3, #0]
 8017f48:	1a9b      	subs	r3, r3, r2
 8017f4a:	8003      	strh	r3, [r0, #0]
 8017f4c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f50:	8081      	strh	r1, [r0, #4]
 8017f52:	80c3      	strh	r3, [r0, #6]
 8017f54:	bd10      	pop	{r4, pc}
 8017f56:	bf00      	nop
 8017f58:	2000bc70 	.word	0x2000bc70
 8017f5c:	2000bc6c 	.word	0x2000bc6c

08017f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017f60:	4b07      	ldr	r3, [pc, #28]	; (8017f80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017f62:	b510      	push	{r4, lr}
 8017f64:	781b      	ldrb	r3, [r3, #0]
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d108      	bne.n	8017f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017f6a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017f6e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017f72:	8003      	strh	r3, [r0, #0]
 8017f74:	8893      	ldrh	r3, [r2, #4]
 8017f76:	3b01      	subs	r3, #1
 8017f78:	1b1b      	subs	r3, r3, r4
 8017f7a:	800b      	strh	r3, [r1, #0]
 8017f7c:	bd10      	pop	{r4, pc}
 8017f7e:	bf00      	nop
 8017f80:	2000bc70 	.word	0x2000bc70

08017f84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017f84:	4b08      	ldr	r3, [pc, #32]	; (8017fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017f86:	b513      	push	{r0, r1, r4, lr}
 8017f88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f8c:	2400      	movs	r4, #0
 8017f8e:	4b07      	ldr	r3, [pc, #28]	; (8017fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8017f90:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017f94:	466a      	mov	r2, sp
 8017f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f9a:	9400      	str	r4, [sp, #0]
 8017f9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017fa0:	f7ff ffde 	bl	8017f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017fa4:	b002      	add	sp, #8
 8017fa6:	bd10      	pop	{r4, pc}
 8017fa8:	2000bc6c 	.word	0x2000bc6c
 8017fac:	2000bc6e 	.word	0x2000bc6e

08017fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017fb0:	4b0a      	ldr	r3, [pc, #40]	; (8017fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017fb2:	460a      	mov	r2, r1
 8017fb4:	b510      	push	{r4, lr}
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d10d      	bne.n	8017fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017fbc:	8881      	ldrh	r1, [r0, #4]
 8017fbe:	8803      	ldrh	r3, [r0, #0]
 8017fc0:	440b      	add	r3, r1
 8017fc2:	4601      	mov	r1, r0
 8017fc4:	3b01      	subs	r3, #1
 8017fc6:	f821 3b02 	strh.w	r3, [r1], #2
 8017fca:	f7ff ffc9 	bl	8017f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017fce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017fd2:	88c2      	ldrh	r2, [r0, #6]
 8017fd4:	80c3      	strh	r3, [r0, #6]
 8017fd6:	8082      	strh	r2, [r0, #4]
 8017fd8:	bd10      	pop	{r4, pc}
 8017fda:	bf00      	nop
 8017fdc:	2000bc70 	.word	0x2000bc70

08017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017fe0:	4b09      	ldr	r3, [pc, #36]	; (8018008 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017fe2:	b507      	push	{r0, r1, r2, lr}
 8017fe4:	2100      	movs	r1, #0
 8017fe6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017fea:	4b08      	ldr	r3, [pc, #32]	; (801800c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8017fec:	9100      	str	r1, [sp, #0]
 8017fee:	4669      	mov	r1, sp
 8017ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ff4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ff8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ffc:	f7ff ffd8 	bl	8017fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018000:	b003      	add	sp, #12
 8018002:	f85d fb04 	ldr.w	pc, [sp], #4
 8018006:	bf00      	nop
 8018008:	2000bc6c 	.word	0x2000bc6c
 801800c:	2000bc6e 	.word	0x2000bc6e

08018010 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018010:	4b03      	ldr	r3, [pc, #12]	; (8018020 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018012:	6818      	ldr	r0, [r3, #0]
 8018014:	b110      	cbz	r0, 801801c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018016:	6803      	ldr	r3, [r0, #0]
 8018018:	699b      	ldr	r3, [r3, #24]
 801801a:	4718      	bx	r3
 801801c:	4770      	bx	lr
 801801e:	bf00      	nop
 8018020:	2000bcf4 	.word	0x2000bcf4

08018024 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018024:	4770      	bx	lr
	...

08018028 <_ZN8touchgfx11Application4drawEv>:
 8018028:	4b09      	ldr	r3, [pc, #36]	; (8018050 <_ZN8touchgfx11Application4drawEv+0x28>)
 801802a:	b507      	push	{r0, r1, r2, lr}
 801802c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018030:	2100      	movs	r1, #0
 8018032:	4b08      	ldr	r3, [pc, #32]	; (8018054 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018034:	9100      	str	r1, [sp, #0]
 8018036:	4669      	mov	r1, sp
 8018038:	f9b3 3000 	ldrsh.w	r3, [r3]
 801803c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018040:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018044:	6803      	ldr	r3, [r0, #0]
 8018046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018048:	4798      	blx	r3
 801804a:	b003      	add	sp, #12
 801804c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018050:	2000bc6c 	.word	0x2000bc6c
 8018054:	2000bc6e 	.word	0x2000bc6e

08018058 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018058:	4b03      	ldr	r3, [pc, #12]	; (8018068 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801805a:	6818      	ldr	r0, [r3, #0]
 801805c:	b110      	cbz	r0, 8018064 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801805e:	6803      	ldr	r3, [r0, #0]
 8018060:	69db      	ldr	r3, [r3, #28]
 8018062:	4718      	bx	r3
 8018064:	4770      	bx	lr
 8018066:	bf00      	nop
 8018068:	2000bcf4 	.word	0x2000bcf4

0801806c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801806c:	4b03      	ldr	r3, [pc, #12]	; (801807c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801806e:	6818      	ldr	r0, [r3, #0]
 8018070:	b110      	cbz	r0, 8018078 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018072:	6803      	ldr	r3, [r0, #0]
 8018074:	6a1b      	ldr	r3, [r3, #32]
 8018076:	4718      	bx	r3
 8018078:	4770      	bx	lr
 801807a:	bf00      	nop
 801807c:	2000bcf4 	.word	0x2000bcf4

08018080 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018080:	4b03      	ldr	r3, [pc, #12]	; (8018090 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018082:	6818      	ldr	r0, [r3, #0]
 8018084:	b110      	cbz	r0, 801808c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018086:	6803      	ldr	r3, [r0, #0]
 8018088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801808a:	4718      	bx	r3
 801808c:	4770      	bx	lr
 801808e:	bf00      	nop
 8018090:	2000bcf4 	.word	0x2000bcf4

08018094 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018098:	4d3a      	ldr	r5, [pc, #232]	; (8018184 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801809a:	4604      	mov	r4, r0
 801809c:	6828      	ldr	r0, [r5, #0]
 801809e:	b140      	cbz	r0, 80180b2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80180a0:	7a03      	ldrb	r3, [r0, #8]
 80180a2:	b933      	cbnz	r3, 80180b2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80180a4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80180a8:	6803      	ldr	r3, [r0, #0]
 80180aa:	689b      	ldr	r3, [r3, #8]
 80180ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180b0:	4718      	bx	r3
 80180b2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80180b6:	b97b      	cbnz	r3, 80180d8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80180b8:	b170      	cbz	r0, 80180d8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80180ba:	7a03      	ldrb	r3, [r0, #8]
 80180bc:	b163      	cbz	r3, 80180d8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80180be:	4b32      	ldr	r3, [pc, #200]	; (8018188 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 80180c0:	6818      	ldr	r0, [r3, #0]
 80180c2:	b110      	cbz	r0, 80180ca <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 80180c4:	6803      	ldr	r3, [r0, #0]
 80180c6:	691b      	ldr	r3, [r3, #16]
 80180c8:	4798      	blx	r3
 80180ca:	6828      	ldr	r0, [r5, #0]
 80180cc:	6803      	ldr	r3, [r0, #0]
 80180ce:	68db      	ldr	r3, [r3, #12]
 80180d0:	4798      	blx	r3
 80180d2:	2301      	movs	r3, #1
 80180d4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80180d8:	2500      	movs	r5, #0
 80180da:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80180de:	42a8      	cmp	r0, r5
 80180e0:	dd0c      	ble.n	80180fc <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80180e2:	1963      	adds	r3, r4, r5
 80180e4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80180e8:	b132      	cbz	r2, 80180f8 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80180ea:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80180ee:	4413      	add	r3, r2
 80180f0:	6858      	ldr	r0, [r3, #4]
 80180f2:	6803      	ldr	r3, [r0, #0]
 80180f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180f6:	4798      	blx	r3
 80180f8:	3501      	adds	r5, #1
 80180fa:	e7ee      	b.n	80180da <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80180fc:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8018100:	3801      	subs	r0, #1
 8018102:	f04f 0c00 	mov.w	ip, #0
 8018106:	3678      	adds	r6, #120	; 0x78
 8018108:	1c43      	adds	r3, r0, #1
 801810a:	d033      	beq.n	8018174 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801810c:	1823      	adds	r3, r4, r0
 801810e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018112:	bb6a      	cbnz	r2, 8018170 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8018114:	b281      	uxth	r1, r0
 8018116:	1d25      	adds	r5, r4, #4
 8018118:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801811c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8018120:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018124:	4293      	cmp	r3, r2
 8018126:	dc0a      	bgt.n	801813e <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8018128:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801812c:	4422      	add	r2, r4
 801812e:	18b1      	adds	r1, r6, r2
 8018130:	b289      	uxth	r1, r1
 8018132:	428b      	cmp	r3, r1
 8018134:	d919      	bls.n	801816a <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8018136:	7851      	ldrb	r1, [r2, #1]
 8018138:	f802 1b01 	strb.w	r1, [r2], #1
 801813c:	e7f7      	b.n	801812e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801813e:	682f      	ldr	r7, [r5, #0]
 8018140:	f105 0804 	add.w	r8, r5, #4
 8018144:	45b9      	cmp	r9, r7
 8018146:	d10d      	bne.n	8018164 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8018148:	4696      	mov	lr, r2
 801814a:	f1be 0f1e 	cmp.w	lr, #30
 801814e:	dc06      	bgt.n	801815e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018150:	f10e 0e01 	add.w	lr, lr, #1
 8018154:	686f      	ldr	r7, [r5, #4]
 8018156:	4573      	cmp	r3, lr
 8018158:	f845 7b04 	str.w	r7, [r5], #4
 801815c:	dcf5      	bgt.n	801814a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801815e:	3b01      	subs	r3, #1
 8018160:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018164:	3201      	adds	r2, #1
 8018166:	4645      	mov	r5, r8
 8018168:	e7da      	b.n	8018120 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801816a:	4423      	add	r3, r4
 801816c:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018170:	3801      	subs	r0, #1
 8018172:	e7c9      	b.n	8018108 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018174:	4b04      	ldr	r3, [pc, #16]	; (8018188 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018176:	6818      	ldr	r0, [r3, #0]
 8018178:	b110      	cbz	r0, 8018180 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801817a:	6803      	ldr	r3, [r0, #0]
 801817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801817e:	e795      	b.n	80180ac <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018184:	2000bcf8 	.word	0x2000bcf8
 8018188:	2000bcf4 	.word	0x2000bcf4

0801818c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801818c:	b570      	push	{r4, r5, r6, lr}
 801818e:	4606      	mov	r6, r0
 8018190:	460c      	mov	r4, r1
 8018192:	b929      	cbnz	r1, 80181a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018194:	4b0c      	ldr	r3, [pc, #48]	; (80181c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018196:	2164      	movs	r1, #100	; 0x64
 8018198:	4a0c      	ldr	r2, [pc, #48]	; (80181cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801819a:	480d      	ldr	r0, [pc, #52]	; (80181d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801819c:	f00c f854 	bl	8024248 <__assert_func>
 80181a0:	2300      	movs	r3, #0
 80181a2:	4d0c      	ldr	r5, [pc, #48]	; (80181d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80181a4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80181a8:	6828      	ldr	r0, [r5, #0]
 80181aa:	b110      	cbz	r0, 80181b2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80181ac:	6803      	ldr	r3, [r0, #0]
 80181ae:	695b      	ldr	r3, [r3, #20]
 80181b0:	4798      	blx	r3
 80181b2:	602c      	str	r4, [r5, #0]
 80181b4:	4620      	mov	r0, r4
 80181b6:	6823      	ldr	r3, [r4, #0]
 80181b8:	68db      	ldr	r3, [r3, #12]
 80181ba:	4798      	blx	r3
 80181bc:	6833      	ldr	r3, [r6, #0]
 80181be:	4630      	mov	r0, r6
 80181c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181c6:	4718      	bx	r3
 80181c8:	08027b48 	.word	0x08027b48
 80181cc:	08027c10 	.word	0x08027c10
 80181d0:	08027b52 	.word	0x08027b52
 80181d4:	2000bcf4 	.word	0x2000bcf4

080181d8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80181d8:	b510      	push	{r4, lr}
 80181da:	f9b1 4000 	ldrsh.w	r4, [r1]
 80181de:	888a      	ldrh	r2, [r1, #4]
 80181e0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80181e4:	4422      	add	r2, r4
 80181e6:	b212      	sxth	r2, r2
 80181e8:	4293      	cmp	r3, r2
 80181ea:	da15      	bge.n	8018218 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80181ec:	8882      	ldrh	r2, [r0, #4]
 80181ee:	4413      	add	r3, r2
 80181f0:	b21b      	sxth	r3, r3
 80181f2:	429c      	cmp	r4, r3
 80181f4:	da10      	bge.n	8018218 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80181f6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80181fa:	88c9      	ldrh	r1, [r1, #6]
 80181fc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018200:	4419      	add	r1, r3
 8018202:	b209      	sxth	r1, r1
 8018204:	428a      	cmp	r2, r1
 8018206:	da07      	bge.n	8018218 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018208:	88c0      	ldrh	r0, [r0, #6]
 801820a:	4410      	add	r0, r2
 801820c:	b200      	sxth	r0, r0
 801820e:	4283      	cmp	r3, r0
 8018210:	bfac      	ite	ge
 8018212:	2000      	movge	r0, #0
 8018214:	2001      	movlt	r0, #1
 8018216:	bd10      	pop	{r4, pc}
 8018218:	2000      	movs	r0, #0
 801821a:	e7fc      	b.n	8018216 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801821c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801821c:	b570      	push	{r4, r5, r6, lr}
 801821e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018222:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018226:	42ac      	cmp	r4, r5
 8018228:	db18      	blt.n	801825c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801822a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801822e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018232:	429a      	cmp	r2, r3
 8018234:	db12      	blt.n	801825c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018236:	8886      	ldrh	r6, [r0, #4]
 8018238:	4435      	add	r5, r6
 801823a:	888e      	ldrh	r6, [r1, #4]
 801823c:	4434      	add	r4, r6
 801823e:	b22d      	sxth	r5, r5
 8018240:	b224      	sxth	r4, r4
 8018242:	42a5      	cmp	r5, r4
 8018244:	db0a      	blt.n	801825c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018246:	88c0      	ldrh	r0, [r0, #6]
 8018248:	4418      	add	r0, r3
 801824a:	88cb      	ldrh	r3, [r1, #6]
 801824c:	441a      	add	r2, r3
 801824e:	b200      	sxth	r0, r0
 8018250:	b212      	sxth	r2, r2
 8018252:	4290      	cmp	r0, r2
 8018254:	bfb4      	ite	lt
 8018256:	2000      	movlt	r0, #0
 8018258:	2001      	movge	r0, #1
 801825a:	bd70      	pop	{r4, r5, r6, pc}
 801825c:	2000      	movs	r0, #0
 801825e:	e7fc      	b.n	801825a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018260 <_ZN8touchgfx11Application11getInstanceEv>:
 8018260:	4b01      	ldr	r3, [pc, #4]	; (8018268 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018262:	6818      	ldr	r0, [r3, #0]
 8018264:	4770      	bx	lr
 8018266:	bf00      	nop
 8018268:	2000bd04 	.word	0x2000bd04

0801826c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801826c:	2300      	movs	r3, #0
 801826e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018272:	30a8      	adds	r0, #168	; 0xa8
 8018274:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018278:	f802 3b01 	strb.w	r3, [r2], #1
 801827c:	4282      	cmp	r2, r0
 801827e:	d1fb      	bne.n	8018278 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018280:	4770      	bx	lr

08018282 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018282:	4603      	mov	r3, r0
 8018284:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018288:	2200      	movs	r2, #0
 801828a:	801a      	strh	r2, [r3, #0]
 801828c:	3308      	adds	r3, #8
 801828e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018292:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018296:	f823 2c02 	strh.w	r2, [r3, #-2]
 801829a:	428b      	cmp	r3, r1
 801829c:	d1f5      	bne.n	801828a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801829e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80182a2:	4770      	bx	lr

080182a4 <_ZN8touchgfx11ApplicationC1Ev>:
 80182a4:	b570      	push	{r4, r5, r6, lr}
 80182a6:	4b16      	ldr	r3, [pc, #88]	; (8018300 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 80182a8:	2500      	movs	r5, #0
 80182aa:	4604      	mov	r4, r0
 80182ac:	30a8      	adds	r0, #168	; 0xa8
 80182ae:	f840 3ca8 	str.w	r3, [r0, #-168]
 80182b2:	f820 5c24 	strh.w	r5, [r0, #-36]
 80182b6:	f7ff ffe4 	bl	8018282 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80182ba:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80182be:	f7ff ffe0 	bl	8018282 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80182c2:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 80182c6:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 80182ca:	490e      	ldr	r1, [pc, #56]	; (8018304 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 80182cc:	480e      	ldr	r0, [pc, #56]	; (8018308 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 80182ce:	f00a faa1 	bl	8022814 <CRC_Lock>
 80182d2:	4e0e      	ldr	r6, [pc, #56]	; (801830c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80182d4:	4b0e      	ldr	r3, [pc, #56]	; (8018310 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80182d6:	b158      	cbz	r0, 80182f0 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 80182d8:	801d      	strh	r5, [r3, #0]
 80182da:	2300      	movs	r3, #0
 80182dc:	4a0d      	ldr	r2, [pc, #52]	; (8018314 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80182de:	4620      	mov	r0, r4
 80182e0:	6013      	str	r3, [r2, #0]
 80182e2:	4a0d      	ldr	r2, [pc, #52]	; (8018318 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80182e4:	6033      	str	r3, [r6, #0]
 80182e6:	6013      	str	r3, [r2, #0]
 80182e8:	f7ff ffc0 	bl	801826c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80182ec:	4620      	mov	r0, r4
 80182ee:	bd70      	pop	{r4, r5, r6, pc}
 80182f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80182f4:	2002      	movs	r0, #2
 80182f6:	801a      	strh	r2, [r3, #0]
 80182f8:	6030      	str	r0, [r6, #0]
 80182fa:	f000 ff81 	bl	8019200 <_ZN8touchgfx6Screen4drawEv>
 80182fe:	e7ec      	b.n	80182da <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8018300:	08027bdc 	.word	0x08027bdc
 8018304:	b5e8b5cd 	.word	0xb5e8b5cd
 8018308:	f407a5c2 	.word	0xf407a5c2
 801830c:	2000bcf4 	.word	0x2000bcf4
 8018310:	20000044 	.word	0x20000044
 8018314:	2000bd04 	.word	0x2000bd04
 8018318:	2000bcf8 	.word	0x2000bcf8

0801831c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801831c:	2300      	movs	r3, #0
 801831e:	8003      	strh	r3, [r0, #0]
 8018320:	8043      	strh	r3, [r0, #2]
 8018322:	8083      	strh	r3, [r0, #4]
 8018324:	80c3      	strh	r3, [r0, #6]
 8018326:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801832a:	4293      	cmp	r3, r2
 801832c:	b530      	push	{r4, r5, lr}
 801832e:	d912      	bls.n	8018356 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018330:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8018334:	3b01      	subs	r3, #1
 8018336:	6825      	ldr	r5, [r4, #0]
 8018338:	b29b      	uxth	r3, r3
 801833a:	6005      	str	r5, [r0, #0]
 801833c:	4293      	cmp	r3, r2
 801833e:	6865      	ldr	r5, [r4, #4]
 8018340:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8018344:	6045      	str	r5, [r0, #4]
 8018346:	d906      	bls.n	8018356 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018348:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801834c:	681d      	ldr	r5, [r3, #0]
 801834e:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8018352:	685d      	ldr	r5, [r3, #4]
 8018354:	6065      	str	r5, [r4, #4]
 8018356:	bd30      	pop	{r4, r5, pc}

08018358 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801835a:	466b      	mov	r3, sp
 801835c:	4604      	mov	r4, r0
 801835e:	e883 0006 	stmia.w	r3, {r1, r2}
 8018362:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018366:	2a07      	cmp	r2, #7
 8018368:	d906      	bls.n	8018378 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801836a:	4b09      	ldr	r3, [pc, #36]	; (8018390 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801836c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018370:	4a08      	ldr	r2, [pc, #32]	; (8018394 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018372:	4809      	ldr	r0, [pc, #36]	; (8018398 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018374:	f00b ff68 	bl	8024248 <__assert_func>
 8018378:	1c51      	adds	r1, r2, #1
 801837a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801837e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018382:	cb03      	ldmia	r3!, {r0, r1}
 8018384:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018388:	6069      	str	r1, [r5, #4]
 801838a:	b003      	add	sp, #12
 801838c:	bd30      	pop	{r4, r5, pc}
 801838e:	bf00      	nop
 8018390:	08027b7c 	.word	0x08027b7c
 8018394:	08027c54 	.word	0x08027c54
 8018398:	08027bab 	.word	0x08027bab

0801839c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801839c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183a0:	b089      	sub	sp, #36	; 0x24
 80183a2:	4606      	mov	r6, r0
 80183a4:	466c      	mov	r4, sp
 80183a6:	4620      	mov	r0, r4
 80183a8:	e884 0006 	stmia.w	r4, {r1, r2}
 80183ac:	f7fc fe30 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 80183b0:	bbb0      	cbnz	r0, 8018420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80183b2:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80183b6:	b1fd      	cbz	r5, 80183f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80183b8:	3d01      	subs	r5, #1
 80183ba:	af04      	add	r7, sp, #16
 80183bc:	f04f 090a 	mov.w	r9, #10
 80183c0:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80183c4:	ab02      	add	r3, sp, #8
 80183c6:	fa1f f885 	uxth.w	r8, r5
 80183ca:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80183ce:	6851      	ldr	r1, [r2, #4]
 80183d0:	c303      	stmia	r3!, {r0, r1}
 80183d2:	4621      	mov	r1, r4
 80183d4:	a802      	add	r0, sp, #8
 80183d6:	f7ff ff21 	bl	801821c <_ZNK8touchgfx4Rect8includesERKS0_>
 80183da:	bb08      	cbnz	r0, 8018420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80183dc:	a902      	add	r1, sp, #8
 80183de:	4620      	mov	r0, r4
 80183e0:	f7ff ff1c 	bl	801821c <_ZNK8touchgfx4Rect8includesERKS0_>
 80183e4:	b1f8      	cbz	r0, 8018426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80183e6:	4642      	mov	r2, r8
 80183e8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80183ec:	a806      	add	r0, sp, #24
 80183ee:	f7ff ff95 	bl	801831c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80183f2:	f115 35ff 	adds.w	r5, r5, #4294967295
 80183f6:	d2e3      	bcs.n	80183c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80183f8:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80183fc:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8018400:	2b08      	cmp	r3, #8
 8018402:	d108      	bne.n	8018416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018404:	4629      	mov	r1, r5
 8018406:	a806      	add	r0, sp, #24
 8018408:	2207      	movs	r2, #7
 801840a:	f7ff ff87 	bl	801831c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801840e:	a906      	add	r1, sp, #24
 8018410:	4620      	mov	r0, r4
 8018412:	f7fd fff8 	bl	8016406 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018416:	4628      	mov	r0, r5
 8018418:	e894 0006 	ldmia.w	r4, {r1, r2}
 801841c:	f7ff ff9c 	bl	8018358 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018420:	b009      	add	sp, #36	; 0x24
 8018422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018426:	4621      	mov	r1, r4
 8018428:	a802      	add	r0, sp, #8
 801842a:	f7ff fed5 	bl	80181d8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801842e:	b150      	cbz	r0, 8018446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8018430:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018434:	a806      	add	r0, sp, #24
 8018436:	4642      	mov	r2, r8
 8018438:	f7ff ff70 	bl	801831c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801843c:	a902      	add	r1, sp, #8
 801843e:	4620      	mov	r0, r4
 8018440:	f7fd ffe1 	bl	8016406 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018444:	e7d5      	b.n	80183f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018446:	e894 0003 	ldmia.w	r4, {r0, r1}
 801844a:	e887 0003 	stmia.w	r7, {r0, r1}
 801844e:	a902      	add	r1, sp, #8
 8018450:	4638      	mov	r0, r7
 8018452:	f7fd ffd8 	bl	8016406 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018456:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801845a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801845e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018462:	fb13 f302 	smulbb	r3, r3, r2
 8018466:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801846a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801846e:	fb11 f102 	smulbb	r1, r1, r2
 8018472:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018476:	fb09 f303 	mul.w	r3, r9, r3
 801847a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801847e:	220b      	movs	r2, #11
 8018480:	434a      	muls	r2, r1
 8018482:	4293      	cmp	r3, r2
 8018484:	dab5      	bge.n	80183f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018486:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801848a:	a806      	add	r0, sp, #24
 801848c:	4642      	mov	r2, r8
 801848e:	f7ff ff45 	bl	801831c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018492:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018496:	e884 0003 	stmia.w	r4, {r0, r1}
 801849a:	e7aa      	b.n	80183f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801849c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801849c:	4b1d      	ldr	r3, [pc, #116]	; (8018514 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801849e:	b530      	push	{r4, r5, lr}
 80184a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80184a4:	b085      	sub	sp, #20
 80184a6:	4b1c      	ldr	r3, [pc, #112]	; (8018518 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80184a8:	460c      	mov	r4, r1
 80184aa:	2100      	movs	r1, #0
 80184ac:	4605      	mov	r5, r0
 80184ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80184b2:	6820      	ldr	r0, [r4, #0]
 80184b4:	9100      	str	r1, [sp, #0]
 80184b6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80184ba:	ab02      	add	r3, sp, #8
 80184bc:	6861      	ldr	r1, [r4, #4]
 80184be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80184c2:	c303      	stmia	r3!, {r0, r1}
 80184c4:	4669      	mov	r1, sp
 80184c6:	a802      	add	r0, sp, #8
 80184c8:	f7fc fd5e 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 80184cc:	ab02      	add	r3, sp, #8
 80184ce:	cb03      	ldmia	r3!, {r0, r1}
 80184d0:	4b12      	ldr	r3, [pc, #72]	; (801851c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80184d2:	6020      	str	r0, [r4, #0]
 80184d4:	6818      	ldr	r0, [r3, #0]
 80184d6:	6061      	str	r1, [r4, #4]
 80184d8:	b138      	cbz	r0, 80184ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80184da:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80184de:	b133      	cbz	r3, 80184ee <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80184e0:	6821      	ldr	r1, [r4, #0]
 80184e2:	4628      	mov	r0, r5
 80184e4:	6862      	ldr	r2, [r4, #4]
 80184e6:	f7ff ff59 	bl	801839c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80184ea:	b005      	add	sp, #20
 80184ec:	bd30      	pop	{r4, r5, pc}
 80184ee:	6803      	ldr	r3, [r0, #0]
 80184f0:	4621      	mov	r1, r4
 80184f2:	689b      	ldr	r3, [r3, #8]
 80184f4:	4798      	blx	r3
 80184f6:	4b0a      	ldr	r3, [pc, #40]	; (8018520 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80184f8:	6818      	ldr	r0, [r3, #0]
 80184fa:	b118      	cbz	r0, 8018504 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80184fc:	6803      	ldr	r3, [r0, #0]
 80184fe:	4621      	mov	r1, r4
 8018500:	689b      	ldr	r3, [r3, #8]
 8018502:	4798      	blx	r3
 8018504:	4b07      	ldr	r3, [pc, #28]	; (8018524 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8018506:	4621      	mov	r1, r4
 8018508:	6818      	ldr	r0, [r3, #0]
 801850a:	6803      	ldr	r3, [r0, #0]
 801850c:	695b      	ldr	r3, [r3, #20]
 801850e:	4798      	blx	r3
 8018510:	e7eb      	b.n	80184ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018512:	bf00      	nop
 8018514:	2000bc6c 	.word	0x2000bc6c
 8018518:	2000bc6e 	.word	0x2000bc6e
 801851c:	2000bcf4 	.word	0x2000bcf4
 8018520:	2000bcf0 	.word	0x2000bcf0
 8018524:	2000bc78 	.word	0x2000bc78

08018528 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8018528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852c:	4604      	mov	r4, r0
 801852e:	b09b      	sub	sp, #108	; 0x6c
 8018530:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8018534:	b129      	cbz	r1, 8018542 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8018536:	2300      	movs	r3, #0
 8018538:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801853c:	b01b      	add	sp, #108	; 0x6c
 801853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018542:	4baf      	ldr	r3, [pc, #700]	; (8018800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	b33b      	cbz	r3, 8018598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018548:	4dae      	ldr	r5, [pc, #696]	; (8018804 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801854a:	4628      	mov	r0, r5
 801854c:	f7fc fd60 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018550:	4606      	mov	r6, r0
 8018552:	bb08      	cbnz	r0, 8018598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018554:	4628      	mov	r0, r5
 8018556:	f7ff fce9 	bl	8017f2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801855a:	6829      	ldr	r1, [r5, #0]
 801855c:	686a      	ldr	r2, [r5, #4]
 801855e:	4620      	mov	r0, r4
 8018560:	f7ff ff1c 	bl	801839c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018564:	802e      	strh	r6, [r5, #0]
 8018566:	806e      	strh	r6, [r5, #2]
 8018568:	80ae      	strh	r6, [r5, #4]
 801856a:	80ee      	strh	r6, [r5, #6]
 801856c:	4fa6      	ldr	r7, [pc, #664]	; (8018808 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801856e:	a809      	add	r0, sp, #36	; 0x24
 8018570:	f7ff fe87 	bl	8018282 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018574:	883d      	ldrh	r5, [r7, #0]
 8018576:	462e      	mov	r6, r5
 8018578:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801857c:	42b3      	cmp	r3, r6
 801857e:	d910      	bls.n	80185a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8018580:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018584:	3601      	adds	r6, #1
 8018586:	a809      	add	r0, sp, #36	; 0x24
 8018588:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801858c:	b2b6      	uxth	r6, r6
 801858e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8018592:	f7ff fee1 	bl	8018358 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018596:	e7ef      	b.n	8018578 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8018598:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801859c:	2b00      	cmp	r3, #0
 801859e:	d1e5      	bne.n	801856c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 80185a0:	e7cc      	b.n	801853c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80185a2:	462e      	mov	r6, r5
 80185a4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80185a8:	42b3      	cmp	r3, r6
 80185aa:	d90b      	bls.n	80185c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80185ac:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80185b0:	3601      	adds	r6, #1
 80185b2:	4620      	mov	r0, r4
 80185b4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80185b8:	b2b6      	uxth	r6, r6
 80185ba:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80185be:	f7ff feed 	bl	801839c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80185c2:	e7ef      	b.n	80185a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 80185c4:	4e91      	ldr	r6, [pc, #580]	; (801880c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80185c6:	6833      	ldr	r3, [r6, #0]
 80185c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80185cc:	2b01      	cmp	r3, #1
 80185ce:	f040 8092 	bne.w	80186f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80185d2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80185d6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80185da:	f04f 0900 	mov.w	r9, #0
 80185de:	33aa      	adds	r3, #170	; 0xaa
 80185e0:	42a8      	cmp	r0, r5
 80185e2:	f103 0308 	add.w	r3, r3, #8
 80185e6:	dd0a      	ble.n	80185fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 80185e8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80185ec:	3501      	adds	r5, #1
 80185ee:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80185f2:	440a      	add	r2, r1
 80185f4:	b212      	sxth	r2, r2
 80185f6:	4591      	cmp	r9, r2
 80185f8:	bfb8      	it	lt
 80185fa:	4691      	movlt	r9, r2
 80185fc:	e7f0      	b.n	80185e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80185fe:	4b84      	ldr	r3, [pc, #528]	; (8018810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8018600:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8018818 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8018604:	881d      	ldrh	r5, [r3, #0]
 8018606:	2300      	movs	r3, #0
 8018608:	2d0f      	cmp	r5, #15
 801860a:	bf8c      	ite	hi
 801860c:	08ed      	lsrhi	r5, r5, #3
 801860e:	2501      	movls	r5, #1
 8018610:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018614:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018618:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801861c:	6830      	ldr	r0, [r6, #0]
 801861e:	440b      	add	r3, r1
 8018620:	6802      	ldr	r2, [r0, #0]
 8018622:	b21b      	sxth	r3, r3
 8018624:	4599      	cmp	r9, r3
 8018626:	dd49      	ble.n	80186bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8018628:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801862c:	4798      	blx	r3
 801862e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018632:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018636:	4413      	add	r3, r2
 8018638:	b21b      	sxth	r3, r3
 801863a:	195a      	adds	r2, r3, r5
 801863c:	4290      	cmp	r0, r2
 801863e:	da07      	bge.n	8018650 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018640:	4581      	cmp	r9, r0
 8018642:	dd05      	ble.n	8018650 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018644:	4298      	cmp	r0, r3
 8018646:	da33      	bge.n	80186b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8018648:	2b00      	cmp	r3, #0
 801864a:	dd31      	ble.n	80186b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801864c:	4648      	mov	r0, r9
 801864e:	e004      	b.n	801865a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8018650:	4298      	cmp	r0, r3
 8018652:	dbfb      	blt.n	801864c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8018654:	4548      	cmp	r0, r9
 8018656:	bfa8      	it	ge
 8018658:	4648      	movge	r0, r9
 801865a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801865e:	2100      	movs	r1, #0
 8018660:	1ac0      	subs	r0, r0, r3
 8018662:	f8b7 a000 	ldrh.w	sl, [r7]
 8018666:	f8ad 1014 	strh.w	r1, [sp, #20]
 801866a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801866e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018672:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018676:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801867a:	4553      	cmp	r3, sl
 801867c:	d9ca      	bls.n	8018614 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801867e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8018682:	ab07      	add	r3, sp, #28
 8018684:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018688:	6851      	ldr	r1, [r2, #4]
 801868a:	c303      	stmia	r3!, {r0, r1}
 801868c:	a807      	add	r0, sp, #28
 801868e:	a905      	add	r1, sp, #20
 8018690:	f7fc fc7a 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 8018694:	a807      	add	r0, sp, #28
 8018696:	f7fc fcbb 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 801869a:	b920      	cbnz	r0, 80186a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801869c:	6823      	ldr	r3, [r4, #0]
 801869e:	a907      	add	r1, sp, #28
 80186a0:	4620      	mov	r0, r4
 80186a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186a4:	4798      	blx	r3
 80186a6:	f10a 0a01 	add.w	sl, sl, #1
 80186aa:	fa1f fa8a 	uxth.w	sl, sl
 80186ae:	e7e2      	b.n	8018676 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 80186b0:	6830      	ldr	r0, [r6, #0]
 80186b2:	2101      	movs	r1, #1
 80186b4:	6803      	ldr	r3, [r0, #0]
 80186b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80186b8:	4798      	blx	r3
 80186ba:	e7ab      	b.n	8018614 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80186bc:	69d3      	ldr	r3, [r2, #28]
 80186be:	4798      	blx	r3
 80186c0:	4b54      	ldr	r3, [pc, #336]	; (8018814 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80186c2:	781b      	ldrb	r3, [r3, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f43f af39 	beq.w	801853c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80186ca:	2300      	movs	r3, #0
 80186cc:	883d      	ldrh	r5, [r7, #0]
 80186ce:	34ea      	adds	r4, #234	; 0xea
 80186d0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80186d4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80186d8:	42ab      	cmp	r3, r5
 80186da:	f67f af2f 	bls.w	801853c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80186de:	ab1a      	add	r3, sp, #104	; 0x68
 80186e0:	4620      	mov	r0, r4
 80186e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80186e6:	3501      	adds	r5, #1
 80186e8:	3b44      	subs	r3, #68	; 0x44
 80186ea:	b2ad      	uxth	r5, r5
 80186ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80186f0:	f7ff fe32 	bl	8018358 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80186f4:	e7ee      	b.n	80186d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 80186f6:	2b02      	cmp	r3, #2
 80186f8:	d16a      	bne.n	80187d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80186fa:	f8df a120 	ldr.w	sl, [pc, #288]	; 801881c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80186fe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018702:	42ab      	cmp	r3, r5
 8018704:	d9dc      	bls.n	80186c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018706:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801870a:	ab03      	add	r3, sp, #12
 801870c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018710:	6851      	ldr	r1, [r2, #4]
 8018712:	c303      	stmia	r3!, {r0, r1}
 8018714:	f89a 3000 	ldrb.w	r3, [sl]
 8018718:	2b01      	cmp	r3, #1
 801871a:	d102      	bne.n	8018722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801871c:	a803      	add	r0, sp, #12
 801871e:	f7ff fc5f 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018722:	a803      	add	r0, sp, #12
 8018724:	f7fc fc74 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018728:	2800      	cmp	r0, #0
 801872a:	d14a      	bne.n	80187c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801872c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018730:	f10d 0914 	add.w	r9, sp, #20
 8018734:	f10d 081c 	add.w	r8, sp, #28
 8018738:	f8ad 001a 	strh.w	r0, [sp, #26]
 801873c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018740:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018744:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018748:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801874c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018750:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8018754:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8018758:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801875c:	44dc      	add	ip, fp
 801875e:	6830      	ldr	r0, [r6, #0]
 8018760:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018764:	ebac 0c02 	sub.w	ip, ip, r2
 8018768:	f8d0 e000 	ldr.w	lr, [r0]
 801876c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018770:	fa1f fc8c 	uxth.w	ip, ip
 8018774:	f8cd c000 	str.w	ip, [sp]
 8018778:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801877c:	47d8      	blx	fp
 801877e:	f89a 3000 	ldrb.w	r3, [sl]
 8018782:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018786:	2b01      	cmp	r3, #1
 8018788:	d11e      	bne.n	80187c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801878a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801878e:	e888 0003 	stmia.w	r8, {r0, r1}
 8018792:	4640      	mov	r0, r8
 8018794:	f7ff fbca 	bl	8017f2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018798:	6823      	ldr	r3, [r4, #0]
 801879a:	4641      	mov	r1, r8
 801879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801879e:	4620      	mov	r0, r4
 80187a0:	4798      	blx	r3
 80187a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80187a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80187aa:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80187ae:	4413      	add	r3, r2
 80187b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80187b4:	440a      	add	r2, r1
 80187b6:	b21b      	sxth	r3, r3
 80187b8:	b212      	sxth	r2, r2
 80187ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80187be:	4293      	cmp	r3, r2
 80187c0:	dbc6      	blt.n	8018750 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80187c2:	3501      	adds	r5, #1
 80187c4:	b2ad      	uxth	r5, r5
 80187c6:	e79a      	b.n	80186fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80187c8:	6823      	ldr	r3, [r4, #0]
 80187ca:	4649      	mov	r1, r9
 80187cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ce:	e7e6      	b.n	801879e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80187d0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80187d4:	42ab      	cmp	r3, r5
 80187d6:	f67f af73 	bls.w	80186c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80187da:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80187de:	ab07      	add	r3, sp, #28
 80187e0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80187e4:	6851      	ldr	r1, [r2, #4]
 80187e6:	c303      	stmia	r3!, {r0, r1}
 80187e8:	a807      	add	r0, sp, #28
 80187ea:	f7fc fc11 	bl	8015010 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187ee:	b920      	cbnz	r0, 80187fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80187f0:	6823      	ldr	r3, [r4, #0]
 80187f2:	a907      	add	r1, sp, #28
 80187f4:	4620      	mov	r0, r4
 80187f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f8:	4798      	blx	r3
 80187fa:	3501      	adds	r5, #1
 80187fc:	b2ad      	uxth	r5, r5
 80187fe:	e7e7      	b.n	80187d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018800:	2000bcf0 	.word	0x2000bcf0
 8018804:	2000bcfc 	.word	0x2000bcfc
 8018808:	20000044 	.word	0x20000044
 801880c:	2000bc78 	.word	0x2000bc78
 8018810:	2000bc6e 	.word	0x2000bc6e
 8018814:	2000bc76 	.word	0x2000bc76
 8018818:	2000bc6c 	.word	0x2000bc6c
 801881c:	2000bc70 	.word	0x2000bc70

08018820 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018820:	4b03      	ldr	r3, [pc, #12]	; (8018830 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018822:	2200      	movs	r2, #0
 8018824:	801a      	strh	r2, [r3, #0]
 8018826:	805a      	strh	r2, [r3, #2]
 8018828:	809a      	strh	r2, [r3, #4]
 801882a:	80da      	strh	r2, [r3, #6]
 801882c:	4770      	bx	lr
 801882e:	bf00      	nop
 8018830:	2000bcfc 	.word	0x2000bcfc

08018834 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8018834:	2000      	movs	r0, #0
 8018836:	4770      	bx	lr

08018838 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8018838:	2000      	movs	r0, #0
 801883a:	4770      	bx	lr

0801883c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801883c:	b508      	push	{r3, lr}
 801883e:	6803      	ldr	r3, [r0, #0]
 8018840:	68db      	ldr	r3, [r3, #12]
 8018842:	4798      	blx	r3
 8018844:	b128      	cbz	r0, 8018852 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018846:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801884a:	7a80      	ldrb	r0, [r0, #10]
 801884c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018850:	4318      	orrs	r0, r3
 8018852:	bd08      	pop	{r3, pc}

08018854 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8018854:	b40e      	push	{r1, r2, r3}
 8018856:	b533      	push	{r0, r1, r4, r5, lr}
 8018858:	ab05      	add	r3, sp, #20
 801885a:	f853 2b04 	ldr.w	r2, [r3], #4
 801885e:	9301      	str	r3, [sp, #4]
 8018860:	4b0a      	ldr	r3, [pc, #40]	; (801888c <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8018862:	685c      	ldr	r4, [r3, #4]
 8018864:	1061      	asrs	r1, r4, #1
 8018866:	07e4      	lsls	r4, r4, #31
 8018868:	eb00 0501 	add.w	r5, r0, r1
 801886c:	bf46      	itte	mi
 801886e:	681b      	ldrmi	r3, [r3, #0]
 8018870:	5841      	ldrmi	r1, [r0, r1]
 8018872:	681c      	ldrpl	r4, [r3, #0]
 8018874:	4628      	mov	r0, r5
 8018876:	bf48      	it	mi
 8018878:	58cc      	ldrmi	r4, [r1, r3]
 801887a:	2100      	movs	r1, #0
 801887c:	9b01      	ldr	r3, [sp, #4]
 801887e:	47a0      	blx	r4
 8018880:	b002      	add	sp, #8
 8018882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018886:	b003      	add	sp, #12
 8018888:	4770      	bx	lr
 801888a:	bf00      	nop
 801888c:	20000028 	.word	0x20000028

08018890 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8018890:	b40c      	push	{r2, r3}
 8018892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018894:	ab06      	add	r3, sp, #24
 8018896:	f853 2b04 	ldr.w	r2, [r3], #4
 801889a:	9301      	str	r3, [sp, #4]
 801889c:	4b09      	ldr	r3, [pc, #36]	; (80188c4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801889e:	685d      	ldr	r5, [r3, #4]
 80188a0:	106c      	asrs	r4, r5, #1
 80188a2:	07ed      	lsls	r5, r5, #31
 80188a4:	eb00 0604 	add.w	r6, r0, r4
 80188a8:	bf45      	ittet	mi
 80188aa:	681b      	ldrmi	r3, [r3, #0]
 80188ac:	5900      	ldrmi	r0, [r0, r4]
 80188ae:	681c      	ldrpl	r4, [r3, #0]
 80188b0:	58c4      	ldrmi	r4, [r0, r3]
 80188b2:	4630      	mov	r0, r6
 80188b4:	9b01      	ldr	r3, [sp, #4]
 80188b6:	47a0      	blx	r4
 80188b8:	b002      	add	sp, #8
 80188ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188be:	b002      	add	sp, #8
 80188c0:	4770      	bx	lr
 80188c2:	bf00      	nop
 80188c4:	20000028 	.word	0x20000028

080188c8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80188c8:	b40e      	push	{r1, r2, r3}
 80188ca:	b530      	push	{r4, r5, lr}
 80188cc:	b098      	sub	sp, #96	; 0x60
 80188ce:	4604      	mov	r4, r0
 80188d0:	ab1b      	add	r3, sp, #108	; 0x6c
 80188d2:	a802      	add	r0, sp, #8
 80188d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80188d8:	9301      	str	r3, [sp, #4]
 80188da:	f001 f837 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 80188de:	6823      	ldr	r3, [r4, #0]
 80188e0:	4620      	mov	r0, r4
 80188e2:	2401      	movs	r4, #1
 80188e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188e6:	4798      	blx	r3
 80188e8:	9a01      	ldr	r2, [sp, #4]
 80188ea:	4603      	mov	r3, r0
 80188ec:	4629      	mov	r1, r5
 80188ee:	a802      	add	r0, sp, #8
 80188f0:	f001 f849 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80188f4:	a802      	add	r0, sp, #8
 80188f6:	f001 f87f 	bl	80199f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80188fa:	b2a3      	uxth	r3, r4
 80188fc:	b138      	cbz	r0, 801890e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 80188fe:	280a      	cmp	r0, #10
 8018900:	a802      	add	r0, sp, #8
 8018902:	bf04      	itt	eq
 8018904:	3301      	addeq	r3, #1
 8018906:	b21c      	sxtheq	r4, r3
 8018908:	f001 f876 	bl	80199f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801890c:	e7f5      	b.n	80188fa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801890e:	4618      	mov	r0, r3
 8018910:	b018      	add	sp, #96	; 0x60
 8018912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018916:	b003      	add	sp, #12
 8018918:	4770      	bx	lr
	...

0801891c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801891c:	b40e      	push	{r1, r2, r3}
 801891e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018920:	b098      	sub	sp, #96	; 0x60
 8018922:	4605      	mov	r5, r0
 8018924:	4f25      	ldr	r7, [pc, #148]	; (80189bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8018926:	ab1d      	add	r3, sp, #116	; 0x74
 8018928:	a802      	add	r0, sp, #8
 801892a:	ae18      	add	r6, sp, #96	; 0x60
 801892c:	f853 4b04 	ldr.w	r4, [r3], #4
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	f001 f80b 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 8018936:	682b      	ldr	r3, [r5, #0]
 8018938:	4628      	mov	r0, r5
 801893a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801893c:	4798      	blx	r3
 801893e:	4621      	mov	r1, r4
 8018940:	2400      	movs	r4, #0
 8018942:	4603      	mov	r3, r0
 8018944:	9a00      	ldr	r2, [sp, #0]
 8018946:	a802      	add	r0, sp, #8
 8018948:	f001 f81d 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801894c:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8018950:	462a      	mov	r2, r5
 8018952:	4633      	mov	r3, r6
 8018954:	4621      	mov	r1, r4
 8018956:	a802      	add	r0, sp, #8
 8018958:	f001 f97a 	bl	8019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801895c:	b340      	cbz	r0, 80189b0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801895e:	280a      	cmp	r0, #10
 8018960:	d01f      	beq.n	80189a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018962:	9901      	ldr	r1, [sp, #4]
 8018964:	b1e9      	cbz	r1, 80189a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018966:	7b4b      	ldrb	r3, [r1, #13]
 8018968:	f891 c008 	ldrb.w	ip, [r1, #8]
 801896c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018970:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8018974:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018978:	79c9      	ldrb	r1, [r1, #7]
 801897a:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801897e:	bf18      	it	ne
 8018980:	4638      	movne	r0, r7
 8018982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018986:	bf08      	it	eq
 8018988:	2000      	moveq	r0, #0
 801898a:	88aa      	ldrh	r2, [r5, #4]
 801898c:	ea41 010e 	orr.w	r1, r1, lr
 8018990:	ea43 030c 	orr.w	r3, r3, ip
 8018994:	440a      	add	r2, r1
 8018996:	4303      	orrs	r3, r0
 8018998:	1ad3      	subs	r3, r2, r3
 801899a:	b29b      	uxth	r3, r3
 801899c:	42a3      	cmp	r3, r4
 801899e:	bfc8      	it	gt
 80189a0:	b21c      	sxthgt	r4, r3
 80189a2:	4633      	mov	r3, r6
 80189a4:	462a      	mov	r2, r5
 80189a6:	2100      	movs	r1, #0
 80189a8:	a802      	add	r0, sp, #8
 80189aa:	f001 f951 	bl	8019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80189ae:	e7d5      	b.n	801895c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 80189b0:	b2a0      	uxth	r0, r4
 80189b2:	b018      	add	sp, #96	; 0x60
 80189b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80189b8:	b003      	add	sp, #12
 80189ba:	4770      	bx	lr
 80189bc:	fffffe00 	.word	0xfffffe00

080189c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80189c0:	b40e      	push	{r1, r2, r3}
 80189c2:	b570      	push	{r4, r5, r6, lr}
 80189c4:	b099      	sub	sp, #100	; 0x64
 80189c6:	4604      	mov	r4, r0
 80189c8:	26ff      	movs	r6, #255	; 0xff
 80189ca:	ab1d      	add	r3, sp, #116	; 0x74
 80189cc:	a802      	add	r0, sp, #8
 80189ce:	f853 5b04 	ldr.w	r5, [r3], #4
 80189d2:	9300      	str	r3, [sp, #0]
 80189d4:	f000 ffba 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 80189d8:	6823      	ldr	r3, [r4, #0]
 80189da:	4620      	mov	r0, r4
 80189dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189de:	4798      	blx	r3
 80189e0:	4629      	mov	r1, r5
 80189e2:	4603      	mov	r3, r0
 80189e4:	9a00      	ldr	r2, [sp, #0]
 80189e6:	a802      	add	r0, sp, #8
 80189e8:	ad18      	add	r5, sp, #96	; 0x60
 80189ea:	f000 ffcc 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80189ee:	2100      	movs	r1, #0
 80189f0:	4622      	mov	r2, r4
 80189f2:	a802      	add	r0, sp, #8
 80189f4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80189f8:	462b      	mov	r3, r5
 80189fa:	f001 f929 	bl	8019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80189fe:	b190      	cbz	r0, 8018a26 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8018a00:	280a      	cmp	r0, #10
 8018a02:	d009      	beq.n	8018a18 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018a04:	9a01      	ldr	r2, [sp, #4]
 8018a06:	b13a      	cbz	r2, 8018a18 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018a08:	7923      	ldrb	r3, [r4, #4]
 8018a0a:	7a12      	ldrb	r2, [r2, #8]
 8018a0c:	1a9b      	subs	r3, r3, r2
 8018a0e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8018a12:	429e      	cmp	r6, r3
 8018a14:	bf28      	it	cs
 8018a16:	461e      	movcs	r6, r3
 8018a18:	462b      	mov	r3, r5
 8018a1a:	4622      	mov	r2, r4
 8018a1c:	2100      	movs	r1, #0
 8018a1e:	a802      	add	r0, sp, #8
 8018a20:	f001 f916 	bl	8019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a24:	e7eb      	b.n	80189fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8018a26:	4630      	mov	r0, r6
 8018a28:	b019      	add	sp, #100	; 0x64
 8018a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a2e:	b003      	add	sp, #12
 8018a30:	4770      	bx	lr

08018a32 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a36:	b099      	sub	sp, #100	; 0x64
 8018a38:	4606      	mov	r6, r0
 8018a3a:	4614      	mov	r4, r2
 8018a3c:	4688      	mov	r8, r1
 8018a3e:	a802      	add	r0, sp, #8
 8018a40:	461d      	mov	r5, r3
 8018a42:	f04f 0b00 	mov.w	fp, #0
 8018a46:	f000 ff81 	bl	801994c <_ZN8touchgfx12TextProviderC1Ev>
 8018a4a:	6833      	ldr	r3, [r6, #0]
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	465f      	mov	r7, fp
 8018a50:	46da      	mov	sl, fp
 8018a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a54:	46d9      	mov	r9, fp
 8018a56:	4798      	blx	r3
 8018a58:	462a      	mov	r2, r5
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	4621      	mov	r1, r4
 8018a5e:	a802      	add	r0, sp, #8
 8018a60:	f000 ff91 	bl	8019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a64:	ab01      	add	r3, sp, #4
 8018a66:	4632      	mov	r2, r6
 8018a68:	4641      	mov	r1, r8
 8018a6a:	a802      	add	r0, sp, #8
 8018a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018a70:	f001 f8ee 	bl	8019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a74:	4605      	mov	r5, r0
 8018a76:	b108      	cbz	r0, 8018a7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8018a78:	280a      	cmp	r0, #10
 8018a7a:	d10b      	bne.n	8018a94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8018a7c:	4557      	cmp	r7, sl
 8018a7e:	bf38      	it	cc
 8018a80:	4657      	movcc	r7, sl
 8018a82:	f04f 0a00 	mov.w	sl, #0
 8018a86:	b91d      	cbnz	r5, 8018a90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8018a88:	4638      	mov	r0, r7
 8018a8a:	b019      	add	sp, #100	; 0x64
 8018a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a90:	46ab      	mov	fp, r5
 8018a92:	e7e7      	b.n	8018a64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8018a94:	9a01      	ldr	r2, [sp, #4]
 8018a96:	2a00      	cmp	r2, #0
 8018a98:	d0fa      	beq.n	8018a90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8018a9a:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8018a9e:	4659      	mov	r1, fp
 8018aa0:	6833      	ldr	r3, [r6, #0]
 8018aa2:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8018aa6:	7a94      	ldrb	r4, [r2, #10]
 8018aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018aaa:	4304      	orrs	r4, r0
 8018aac:	4630      	mov	r0, r6
 8018aae:	8895      	ldrh	r5, [r2, #4]
 8018ab0:	4798      	blx	r3
 8018ab2:	4420      	add	r0, r4
 8018ab4:	4450      	add	r0, sl
 8018ab6:	fa1f fa80 	uxth.w	sl, r0
 8018aba:	e7e4      	b.n	8018a86 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08018abc <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018abc:	b513      	push	{r0, r1, r4, lr}
 8018abe:	1d01      	adds	r1, r0, #4
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	466a      	mov	r2, sp
 8018ac4:	c903      	ldmia	r1, {r0, r1}
 8018ac6:	e882 0003 	stmia.w	r2, {r0, r1}
 8018aca:	2100      	movs	r1, #0
 8018acc:	4618      	mov	r0, r3
 8018ace:	9100      	str	r1, [sp, #0]
 8018ad0:	6819      	ldr	r1, [r3, #0]
 8018ad2:	690c      	ldr	r4, [r1, #16]
 8018ad4:	4611      	mov	r1, r2
 8018ad6:	47a0      	blx	r4
 8018ad8:	b002      	add	sp, #8
 8018ada:	bd10      	pop	{r4, pc}

08018adc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018adc:	b538      	push	{r3, r4, r5, lr}
 8018ade:	680b      	ldr	r3, [r1, #0]
 8018ae0:	460c      	mov	r4, r1
 8018ae2:	4605      	mov	r5, r0
 8018ae4:	68db      	ldr	r3, [r3, #12]
 8018ae6:	4798      	blx	r3
 8018ae8:	6823      	ldr	r3, [r4, #0]
 8018aea:	4620      	mov	r0, r4
 8018aec:	4629      	mov	r1, r5
 8018aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af0:	4798      	blx	r3
 8018af2:	4628      	mov	r0, r5
 8018af4:	bd38      	pop	{r3, r4, r5, pc}

08018af6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018af6:	b410      	push	{r4}
 8018af8:	880a      	ldrh	r2, [r1, #0]
 8018afa:	8884      	ldrh	r4, [r0, #4]
 8018afc:	4422      	add	r2, r4
 8018afe:	800a      	strh	r2, [r1, #0]
 8018b00:	884a      	ldrh	r2, [r1, #2]
 8018b02:	88c4      	ldrh	r4, [r0, #6]
 8018b04:	4422      	add	r2, r4
 8018b06:	804a      	strh	r2, [r1, #2]
 8018b08:	6940      	ldr	r0, [r0, #20]
 8018b0a:	b120      	cbz	r0, 8018b16 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018b0c:	6803      	ldr	r3, [r0, #0]
 8018b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b14:	4718      	bx	r3
 8018b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b1a:	4770      	bx	lr

08018b1c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b1e:	460b      	mov	r3, r1
 8018b20:	b085      	sub	sp, #20
 8018b22:	4604      	mov	r4, r0
 8018b24:	b901      	cbnz	r1, 8018b28 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018b26:	b1fa      	cbz	r2, 8018b68 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8018b28:	1d27      	adds	r7, r4, #4
 8018b2a:	466e      	mov	r6, sp
 8018b2c:	ad02      	add	r5, sp, #8
 8018b2e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018b32:	e886 0003 	stmia.w	r6, {r0, r1}
 8018b36:	88e1      	ldrh	r1, [r4, #6]
 8018b38:	4620      	mov	r0, r4
 8018b3a:	440a      	add	r2, r1
 8018b3c:	88a1      	ldrh	r1, [r4, #4]
 8018b3e:	4419      	add	r1, r3
 8018b40:	6823      	ldr	r3, [r4, #0]
 8018b42:	b212      	sxth	r2, r2
 8018b44:	b209      	sxth	r1, r1
 8018b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b48:	4798      	blx	r3
 8018b4a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018b4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8018b52:	6960      	ldr	r0, [r4, #20]
 8018b54:	b150      	cbz	r0, 8018b6c <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8018b56:	6803      	ldr	r3, [r0, #0]
 8018b58:	4631      	mov	r1, r6
 8018b5a:	691b      	ldr	r3, [r3, #16]
 8018b5c:	4798      	blx	r3
 8018b5e:	6960      	ldr	r0, [r4, #20]
 8018b60:	6803      	ldr	r3, [r0, #0]
 8018b62:	691b      	ldr	r3, [r3, #16]
 8018b64:	4629      	mov	r1, r5
 8018b66:	4798      	blx	r3
 8018b68:	b005      	add	sp, #20
 8018b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b6c:	f7ff fb78 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 8018b70:	6803      	ldr	r3, [r0, #0]
 8018b72:	4631      	mov	r1, r6
 8018b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b76:	4798      	blx	r3
 8018b78:	f7ff fb72 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 8018b7c:	6803      	ldr	r3, [r0, #0]
 8018b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b80:	e7f0      	b.n	8018b64 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08018b82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b84:	8882      	ldrh	r2, [r0, #4]
 8018b86:	4605      	mov	r5, r0
 8018b88:	880b      	ldrh	r3, [r1, #0]
 8018b8a:	460c      	mov	r4, r1
 8018b8c:	4413      	add	r3, r2
 8018b8e:	800b      	strh	r3, [r1, #0]
 8018b90:	884b      	ldrh	r3, [r1, #2]
 8018b92:	88c2      	ldrh	r2, [r0, #6]
 8018b94:	4413      	add	r3, r2
 8018b96:	4602      	mov	r2, r0
 8018b98:	804b      	strh	r3, [r1, #2]
 8018b9a:	466b      	mov	r3, sp
 8018b9c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018ba0:	6851      	ldr	r1, [r2, #4]
 8018ba2:	c303      	stmia	r3!, {r0, r1}
 8018ba4:	4621      	mov	r1, r4
 8018ba6:	4668      	mov	r0, sp
 8018ba8:	f7fc f9ee 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 8018bac:	466b      	mov	r3, sp
 8018bae:	cb03      	ldmia	r3!, {r0, r1}
 8018bb0:	6020      	str	r0, [r4, #0]
 8018bb2:	6061      	str	r1, [r4, #4]
 8018bb4:	6968      	ldr	r0, [r5, #20]
 8018bb6:	b128      	cbz	r0, 8018bc4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8018bb8:	6803      	ldr	r3, [r0, #0]
 8018bba:	691b      	ldr	r3, [r3, #16]
 8018bbc:	4621      	mov	r1, r4
 8018bbe:	4798      	blx	r3
 8018bc0:	b003      	add	sp, #12
 8018bc2:	bd30      	pop	{r4, r5, pc}
 8018bc4:	f7ff fb4c 	bl	8018260 <_ZN8touchgfx11Application11getInstanceEv>
 8018bc8:	6803      	ldr	r3, [r0, #0]
 8018bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bcc:	e7f6      	b.n	8018bbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08018bce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018bce:	b570      	push	{r4, r5, r6, lr}
 8018bd0:	8882      	ldrh	r2, [r0, #4]
 8018bd2:	460c      	mov	r4, r1
 8018bd4:	880b      	ldrh	r3, [r1, #0]
 8018bd6:	4605      	mov	r5, r0
 8018bd8:	4413      	add	r3, r2
 8018bda:	800b      	strh	r3, [r1, #0]
 8018bdc:	884b      	ldrh	r3, [r1, #2]
 8018bde:	88c2      	ldrh	r2, [r0, #6]
 8018be0:	4413      	add	r3, r2
 8018be2:	804b      	strh	r3, [r1, #2]
 8018be4:	1d01      	adds	r1, r0, #4
 8018be6:	4620      	mov	r0, r4
 8018be8:	f7fc f9ce 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 8018bec:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018bf0:	b153      	cbz	r3, 8018c08 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018bf2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018bf6:	b13b      	cbz	r3, 8018c08 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018bf8:	6968      	ldr	r0, [r5, #20]
 8018bfa:	b128      	cbz	r0, 8018c08 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018bfc:	6803      	ldr	r3, [r0, #0]
 8018bfe:	4621      	mov	r1, r4
 8018c00:	6a1b      	ldr	r3, [r3, #32]
 8018c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c06:	4718      	bx	r3
 8018c08:	bd70      	pop	{r4, r5, r6, pc}

08018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018c0a:	b510      	push	{r4, lr}
 8018c0c:	2300      	movs	r3, #0
 8018c0e:	4604      	mov	r4, r0
 8018c10:	4608      	mov	r0, r1
 8018c12:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018c16:	8023      	strh	r3, [r4, #0]
 8018c18:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018c1c:	8063      	strh	r3, [r4, #2]
 8018c1e:	6803      	ldr	r3, [r0, #0]
 8018c20:	80a1      	strh	r1, [r4, #4]
 8018c22:	4621      	mov	r1, r4
 8018c24:	80e2      	strh	r2, [r4, #6]
 8018c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c28:	4798      	blx	r3
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	bd10      	pop	{r4, pc}
	...

08018c30 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018c30:	b530      	push	{r4, r5, lr}
 8018c32:	8083      	strh	r3, [r0, #4]
 8018c34:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018c38:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018c3c:	7183      	strb	r3, [r0, #6]
 8018c3e:	79c3      	ldrb	r3, [r0, #7]
 8018c40:	6101      	str	r1, [r0, #16]
 8018c42:	f365 0306 	bfi	r3, r5, #0, #7
 8018c46:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018c4a:	8282      	strh	r2, [r0, #20]
 8018c4c:	f365 13c7 	bfi	r3, r5, #7, #1
 8018c50:	71c3      	strb	r3, [r0, #7]
 8018c52:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018c56:	7203      	strb	r3, [r0, #8]
 8018c58:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018c5c:	7243      	strb	r3, [r0, #9]
 8018c5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018c62:	8143      	strh	r3, [r0, #10]
 8018c64:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018c68:	8183      	strh	r3, [r0, #12]
 8018c6a:	4b01      	ldr	r3, [pc, #4]	; (8018c70 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018c6c:	6003      	str	r3, [r0, #0]
 8018c6e:	bd30      	pop	{r4, r5, pc}
 8018c70:	08027d7c 	.word	0x08027d7c

08018c74 <_ZNK8touchgfx9ConstFont4findEt>:
 8018c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c76:	8a84      	ldrh	r4, [r0, #20]
 8018c78:	2500      	movs	r5, #0
 8018c7a:	260e      	movs	r6, #14
 8018c7c:	3c01      	subs	r4, #1
 8018c7e:	42a5      	cmp	r5, r4
 8018c80:	dc0c      	bgt.n	8018c9c <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8018c82:	192a      	adds	r2, r5, r4
 8018c84:	6903      	ldr	r3, [r0, #16]
 8018c86:	1052      	asrs	r2, r2, #1
 8018c88:	fb06 3302 	mla	r3, r6, r2, r3
 8018c8c:	889f      	ldrh	r7, [r3, #4]
 8018c8e:	428f      	cmp	r7, r1
 8018c90:	d901      	bls.n	8018c96 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8018c92:	1e54      	subs	r4, r2, #1
 8018c94:	e7f3      	b.n	8018c7e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8018c96:	d202      	bcs.n	8018c9e <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8018c98:	1c55      	adds	r5, r2, #1
 8018c9a:	e7f0      	b.n	8018c7e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ca2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ca4:	4605      	mov	r5, r0
 8018ca6:	4617      	mov	r7, r2
 8018ca8:	461e      	mov	r6, r3
 8018caa:	f7ff ffe3 	bl	8018c74 <_ZNK8touchgfx9ConstFont4findEt>
 8018cae:	b9e0      	cbnz	r0, 8018cea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8018cb0:	b911      	cbnz	r1, 8018cb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8018cb2:	2400      	movs	r4, #0
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cb8:	290a      	cmp	r1, #10
 8018cba:	d0fa      	beq.n	8018cb2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018cbc:	682b      	ldr	r3, [r5, #0]
 8018cbe:	4628      	mov	r0, r5
 8018cc0:	691b      	ldr	r3, [r3, #16]
 8018cc2:	4798      	blx	r3
 8018cc4:	4601      	mov	r1, r0
 8018cc6:	4628      	mov	r0, r5
 8018cc8:	f7ff ffd4 	bl	8018c74 <_ZNK8touchgfx9ConstFont4findEt>
 8018ccc:	4604      	mov	r4, r0
 8018cce:	2800      	cmp	r0, #0
 8018cd0:	d0ef      	beq.n	8018cb2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018cd2:	682b      	ldr	r3, [r5, #0]
 8018cd4:	4621      	mov	r1, r4
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cda:	4798      	blx	r3
 8018cdc:	6038      	str	r0, [r7, #0]
 8018cde:	682b      	ldr	r3, [r5, #0]
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ce4:	4798      	blx	r3
 8018ce6:	7030      	strb	r0, [r6, #0]
 8018ce8:	e7e4      	b.n	8018cb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8018cea:	4604      	mov	r4, r0
 8018cec:	e7f1      	b.n	8018cd2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08018cee <_ZN8touchgfx6memsetEPvhm>:
 8018cee:	4402      	add	r2, r0
 8018cf0:	4290      	cmp	r0, r2
 8018cf2:	d002      	beq.n	8018cfa <_ZN8touchgfx6memsetEPvhm+0xc>
 8018cf4:	f800 1b01 	strb.w	r1, [r0], #1
 8018cf8:	e7fa      	b.n	8018cf0 <_ZN8touchgfx6memsetEPvhm+0x2>
 8018cfa:	4770      	bx	lr

08018cfc <_ZN8touchgfx3clzEl>:
 8018cfc:	b1e8      	cbz	r0, 8018d3a <_ZN8touchgfx3clzEl+0x3e>
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	bfb8      	it	lt
 8018d02:	4240      	neglt	r0, r0
 8018d04:	0c03      	lsrs	r3, r0, #16
 8018d06:	041b      	lsls	r3, r3, #16
 8018d08:	b9ab      	cbnz	r3, 8018d36 <_ZN8touchgfx3clzEl+0x3a>
 8018d0a:	0400      	lsls	r0, r0, #16
 8018d0c:	2310      	movs	r3, #16
 8018d0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018d12:	bf04      	itt	eq
 8018d14:	0200      	lsleq	r0, r0, #8
 8018d16:	3308      	addeq	r3, #8
 8018d18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018d1c:	bf04      	itt	eq
 8018d1e:	0100      	lsleq	r0, r0, #4
 8018d20:	3304      	addeq	r3, #4
 8018d22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018d26:	bf04      	itt	eq
 8018d28:	0080      	lsleq	r0, r0, #2
 8018d2a:	3302      	addeq	r3, #2
 8018d2c:	2800      	cmp	r0, #0
 8018d2e:	bfa8      	it	ge
 8018d30:	3301      	addge	r3, #1
 8018d32:	1e58      	subs	r0, r3, #1
 8018d34:	4770      	bx	lr
 8018d36:	2300      	movs	r3, #0
 8018d38:	e7e9      	b.n	8018d0e <_ZN8touchgfx3clzEl+0x12>
 8018d3a:	201f      	movs	r0, #31
 8018d3c:	4770      	bx	lr

08018d3e <_ZN8touchgfx6muldivElllRl>:
 8018d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d42:	4604      	mov	r4, r0
 8018d44:	4698      	mov	r8, r3
 8018d46:	2601      	movs	r6, #1
 8018d48:	f7ff ffd8 	bl	8018cfc <_ZN8touchgfx3clzEl>
 8018d4c:	2c00      	cmp	r4, #0
 8018d4e:	fa04 f500 	lsl.w	r5, r4, r0
 8018d52:	fa06 f600 	lsl.w	r6, r6, r0
 8018d56:	bfba      	itte	lt
 8018d58:	f04f 37ff 	movlt.w	r7, #4294967295
 8018d5c:	4264      	neglt	r4, r4
 8018d5e:	2701      	movge	r7, #1
 8018d60:	2900      	cmp	r1, #0
 8018d62:	f106 36ff 	add.w	r6, r6, #4294967295
 8018d66:	bfbc      	itt	lt
 8018d68:	4249      	neglt	r1, r1
 8018d6a:	427f      	neglt	r7, r7
 8018d6c:	2a00      	cmp	r2, #0
 8018d6e:	fa41 fc00 	asr.w	ip, r1, r0
 8018d72:	ea01 0106 	and.w	r1, r1, r6
 8018d76:	bfb8      	it	lt
 8018d78:	427f      	neglt	r7, r7
 8018d7a:	fb04 f401 	mul.w	r4, r4, r1
 8018d7e:	fb95 f3f2 	sdiv	r3, r5, r2
 8018d82:	fb02 5513 	mls	r5, r2, r3, r5
 8018d86:	bfb8      	it	lt
 8018d88:	4252      	neglt	r2, r2
 8018d8a:	fb94 f0f2 	sdiv	r0, r4, r2
 8018d8e:	fb02 4410 	mls	r4, r2, r0, r4
 8018d92:	fb0c 4405 	mla	r4, ip, r5, r4
 8018d96:	fb94 f1f2 	sdiv	r1, r4, r2
 8018d9a:	4408      	add	r0, r1
 8018d9c:	fb02 4211 	mls	r2, r2, r1, r4
 8018da0:	fb0c 0003 	mla	r0, ip, r3, r0
 8018da4:	f8c8 2000 	str.w	r2, [r8]
 8018da8:	4378      	muls	r0, r7
 8018daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018dae <_ZN8touchgfx10ClickEventD1Ev>:
 8018dae:	4770      	bx	lr

08018db0 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8018db0:	2000      	movs	r0, #0
 8018db2:	4770      	bx	lr

08018db4 <_ZN8touchgfx9DragEventD1Ev>:
 8018db4:	4770      	bx	lr

08018db6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8018db6:	2001      	movs	r0, #1
 8018db8:	4770      	bx	lr

08018dba <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8018dba:	2002      	movs	r0, #2
 8018dbc:	4770      	bx	lr

08018dbe <_ZN8touchgfx12GestureEventD1Ev>:
 8018dbe:	4770      	bx	lr

08018dc0 <_ZN8touchgfx10ClickEventD0Ev>:
 8018dc0:	b510      	push	{r4, lr}
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	210c      	movs	r1, #12
 8018dc6:	f00b fa14 	bl	80241f2 <_ZdlPvj>
 8018dca:	4620      	mov	r0, r4
 8018dcc:	bd10      	pop	{r4, pc}

08018dce <_ZN8touchgfx9DragEventD0Ev>:
 8018dce:	b510      	push	{r4, lr}
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	2110      	movs	r1, #16
 8018dd4:	f00b fa0d 	bl	80241f2 <_ZdlPvj>
 8018dd8:	4620      	mov	r0, r4
 8018dda:	bd10      	pop	{r4, pc}

08018ddc <_ZN8touchgfx12GestureEventD0Ev>:
 8018ddc:	b510      	push	{r4, lr}
 8018dde:	4604      	mov	r4, r0
 8018de0:	210c      	movs	r1, #12
 8018de2:	f00b fa06 	bl	80241f2 <_ZdlPvj>
 8018de6:	4620      	mov	r0, r4
 8018de8:	bd10      	pop	{r4, pc}
	...

08018dec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018dec:	b530      	push	{r4, r5, lr}
 8018dee:	460d      	mov	r5, r1
 8018df0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018df2:	b087      	sub	sp, #28
 8018df4:	4604      	mov	r4, r0
 8018df6:	b301      	cbz	r1, 8018e3a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018df8:	a801      	add	r0, sp, #4
 8018dfa:	f7ff ff06 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018dfe:	892a      	ldrh	r2, [r5, #8]
 8018e00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018e04:	7928      	ldrb	r0, [r5, #4]
 8018e06:	1ad2      	subs	r2, r2, r3
 8018e08:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018e0a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018e0e:	441a      	add	r2, r3
 8018e10:	896b      	ldrh	r3, [r5, #10]
 8018e12:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018e16:	f88d 0010 	strb.w	r0, [sp, #16]
 8018e1a:	1b5b      	subs	r3, r3, r5
 8018e1c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018e1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018e20:	442b      	add	r3, r5
 8018e22:	4d07      	ldr	r5, [pc, #28]	; (8018e40 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018e24:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018e28:	a903      	add	r1, sp, #12
 8018e2a:	9503      	str	r5, [sp, #12]
 8018e2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018e30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018e34:	6803      	ldr	r3, [r0, #0]
 8018e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e38:	4798      	blx	r3
 8018e3a:	b007      	add	sp, #28
 8018e3c:	bd30      	pop	{r4, r5, pc}
 8018e3e:	bf00      	nop
 8018e40:	08027df8 	.word	0x08027df8

08018e44 <_ZNK8touchgfx4Rect9intersectEss>:
 8018e44:	b510      	push	{r4, lr}
 8018e46:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018e4a:	428b      	cmp	r3, r1
 8018e4c:	dc10      	bgt.n	8018e70 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018e4e:	8884      	ldrh	r4, [r0, #4]
 8018e50:	4423      	add	r3, r4
 8018e52:	b21b      	sxth	r3, r3
 8018e54:	4299      	cmp	r1, r3
 8018e56:	da0b      	bge.n	8018e70 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018e58:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018e5c:	4293      	cmp	r3, r2
 8018e5e:	dc07      	bgt.n	8018e70 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018e60:	88c0      	ldrh	r0, [r0, #6]
 8018e62:	4418      	add	r0, r3
 8018e64:	b200      	sxth	r0, r0
 8018e66:	4282      	cmp	r2, r0
 8018e68:	bfac      	ite	ge
 8018e6a:	2000      	movge	r0, #0
 8018e6c:	2001      	movlt	r0, #1
 8018e6e:	bd10      	pop	{r4, pc}
 8018e70:	2000      	movs	r0, #0
 8018e72:	e7fc      	b.n	8018e6e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08018e74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e76:	460c      	mov	r4, r1
 8018e78:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018e7a:	b089      	sub	sp, #36	; 0x24
 8018e7c:	4605      	mov	r5, r0
 8018e7e:	2900      	cmp	r1, #0
 8018e80:	d054      	beq.n	8018f2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8018e82:	4668      	mov	r0, sp
 8018e84:	f7ff fec1 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e88:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8018e8a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8018e8c:	4668      	mov	r0, sp
 8018e8e:	8922      	ldrh	r2, [r4, #8]
 8018e90:	88e1      	ldrh	r1, [r4, #6]
 8018e92:	443a      	add	r2, r7
 8018e94:	4431      	add	r1, r6
 8018e96:	b212      	sxth	r2, r2
 8018e98:	b209      	sxth	r1, r1
 8018e9a:	f7ff ffd3 	bl	8018e44 <_ZNK8touchgfx4Rect9intersectEss>
 8018e9e:	b1d0      	cbz	r0, 8018ed6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8018ea0:	89a2      	ldrh	r2, [r4, #12]
 8018ea2:	4668      	mov	r0, sp
 8018ea4:	8961      	ldrh	r1, [r4, #10]
 8018ea6:	443a      	add	r2, r7
 8018ea8:	4431      	add	r1, r6
 8018eaa:	b212      	sxth	r2, r2
 8018eac:	b209      	sxth	r1, r1
 8018eae:	f7ff ffc9 	bl	8018e44 <_ZNK8touchgfx4Rect9intersectEss>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	b978      	cbnz	r0, 8018ed6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8018eb6:	4a1e      	ldr	r2, [pc, #120]	; (8018f30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8018eb8:	a904      	add	r1, sp, #16
 8018eba:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018ebc:	9204      	str	r2, [sp, #16]
 8018ebe:	2202      	movs	r2, #2
 8018ec0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ec4:	f88d 2014 	strb.w	r2, [sp, #20]
 8018ec8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ecc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018ed0:	6803      	ldr	r3, [r0, #0]
 8018ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ed4:	4798      	blx	r3
 8018ed6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8018ed8:	a802      	add	r0, sp, #8
 8018eda:	f7ff fe96 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ede:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018ee2:	88e0      	ldrh	r0, [r4, #6]
 8018ee4:	8961      	ldrh	r1, [r4, #10]
 8018ee6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018eea:	1a80      	subs	r0, r0, r2
 8018eec:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8018ef0:	1a89      	subs	r1, r1, r2
 8018ef2:	8923      	ldrh	r3, [r4, #8]
 8018ef4:	4460      	add	r0, ip
 8018ef6:	89a2      	ldrh	r2, [r4, #12]
 8018ef8:	4461      	add	r1, ip
 8018efa:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018efc:	eba3 030e 	sub.w	r3, r3, lr
 8018f00:	eba2 020e 	sub.w	r2, r2, lr
 8018f04:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018f08:	7927      	ldrb	r7, [r4, #4]
 8018f0a:	4433      	add	r3, r6
 8018f0c:	4432      	add	r2, r6
 8018f0e:	4c09      	ldr	r4, [pc, #36]	; (8018f34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8018f10:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018f12:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018f16:	a904      	add	r1, sp, #16
 8018f18:	9404      	str	r4, [sp, #16]
 8018f1a:	f88d 7014 	strb.w	r7, [sp, #20]
 8018f1e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018f22:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018f26:	6803      	ldr	r3, [r0, #0]
 8018f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f2a:	4798      	blx	r3
 8018f2c:	b009      	add	sp, #36	; 0x24
 8018f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f30:	08027dd0 	.word	0x08027dd0
 8018f34:	08027de4 	.word	0x08027de4

08018f38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f3c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8018f40:	b0a1      	sub	sp, #132	; 0x84
 8018f42:	4604      	mov	r4, r0
 8018f44:	460d      	mov	r5, r1
 8018f46:	790b      	ldrb	r3, [r1, #4]
 8018f48:	f1b9 0f00 	cmp.w	r9, #0
 8018f4c:	d00f      	beq.n	8018f6e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	f040 80a2 	bne.w	8019098 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8018f54:	b021      	add	sp, #132	; 0x84
 8018f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f5a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018f5e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8018f62:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018f66:	1d20      	adds	r0, r4, #4
 8018f68:	f7fb ff5c 	bl	8014e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018f6c:	e094      	b.n	8019098 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d1f0      	bne.n	8018f54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018f72:	4b5f      	ldr	r3, [pc, #380]	; (80190f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8018f7a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8018f7e:	f1ba 0f03 	cmp.w	sl, #3
 8018f82:	ddea      	ble.n	8018f5a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8018f84:	f1ba 0f0c 	cmp.w	sl, #12
 8018f88:	f04f 0303 	mov.w	r3, #3
 8018f8c:	f04f 0600 	mov.w	r6, #0
 8018f90:	4958      	ldr	r1, [pc, #352]	; (80190f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8018f92:	bfd8      	it	le
 8018f94:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8018f98:	960a      	str	r6, [sp, #40]	; 0x28
 8018f9a:	bfd8      	it	le
 8018f9c:	fb92 f3f3 	sdivle	r3, r2, r3
 8018fa0:	9301      	str	r3, [sp, #4]
 8018fa2:	4b55      	ldr	r3, [pc, #340]	; (80190f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8018fa4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018fa8:	4b54      	ldr	r3, [pc, #336]	; (80190fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8018faa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018fae:	2248      	movs	r2, #72	; 0x48
 8018fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fb4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018fb8:	ab0e      	add	r3, sp, #56	; 0x38
 8018fba:	4618      	mov	r0, r3
 8018fbc:	f00b f9c2 	bl	8024344 <memcpy>
 8018fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8018fc4:	f8cd a008 	str.w	sl, [sp, #8]
 8018fc8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8018fcc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018fd0:	46b3      	mov	fp, r6
 8018fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8018fd6:	b29b      	uxth	r3, r3
 8018fd8:	9303      	str	r3, [sp, #12]
 8018fda:	2300      	movs	r3, #0
 8018fdc:	9a03      	ldr	r2, [sp, #12]
 8018fde:	88ef      	ldrh	r7, [r5, #6]
 8018fe0:	a80a      	add	r0, sp, #40	; 0x28
 8018fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8018fe4:	9b07      	ldr	r3, [sp, #28]
 8018fe6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8018fea:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8018fee:	fb13 f302 	smulbb	r3, r3, r2
 8018ff2:	b29b      	uxth	r3, r3
 8018ff4:	9304      	str	r3, [sp, #16]
 8018ff6:	9b07      	ldr	r3, [sp, #28]
 8018ff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018ffc:	685b      	ldr	r3, [r3, #4]
 8018ffe:	fb13 f302 	smulbb	r3, r3, r2
 8019002:	b29b      	uxth	r3, r3
 8019004:	9305      	str	r3, [sp, #20]
 8019006:	9b04      	ldr	r3, [sp, #16]
 8019008:	441f      	add	r7, r3
 801900a:	9b05      	ldr	r3, [sp, #20]
 801900c:	4498      	add	r8, r3
 801900e:	b23f      	sxth	r7, r7
 8019010:	fa0f f888 	sxth.w	r8, r8
 8019014:	4639      	mov	r1, r7
 8019016:	4642      	mov	r2, r8
 8019018:	f7ff ff14 	bl	8018e44 <_ZNK8touchgfx4Rect9intersectEss>
 801901c:	b380      	cbz	r0, 8019080 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801901e:	4639      	mov	r1, r7
 8019020:	ab09      	add	r3, sp, #36	; 0x24
 8019022:	4642      	mov	r2, r8
 8019024:	1d20      	adds	r0, r4, #4
 8019026:	f7fb fefd 	bl	8014e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801902a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801902c:	b341      	cbz	r1, 8019080 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801902e:	4549      	cmp	r1, r9
 8019030:	d026      	beq.n	8019080 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019032:	a80c      	add	r0, sp, #48	; 0x30
 8019034:	f7ff fde9 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019038:	2002      	movs	r0, #2
 801903a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801903e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019042:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019046:	fb92 f2f0 	sdiv	r2, r2, r0
 801904a:	440a      	add	r2, r1
 801904c:	1a99      	subs	r1, r3, r2
 801904e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019052:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019056:	fb93 f3f0 	sdiv	r3, r3, r0
 801905a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801905e:	4403      	add	r3, r0
 8019060:	1ad3      	subs	r3, r2, r3
 8019062:	9a06      	ldr	r2, [sp, #24]
 8019064:	435b      	muls	r3, r3
 8019066:	fb01 3301 	mla	r3, r1, r1, r3
 801906a:	4293      	cmp	r3, r2
 801906c:	d208      	bcs.n	8019080 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801906e:	9a04      	ldr	r2, [sp, #16]
 8019070:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019074:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019076:	9a05      	ldr	r2, [sp, #20]
 8019078:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801907c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801907e:	9306      	str	r3, [sp, #24]
 8019080:	f10b 0b02 	add.w	fp, fp, #2
 8019084:	f1bb 0f08 	cmp.w	fp, #8
 8019088:	dda7      	ble.n	8018fda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801908a:	9b02      	ldr	r3, [sp, #8]
 801908c:	3601      	adds	r6, #1
 801908e:	4453      	add	r3, sl
 8019090:	9302      	str	r3, [sp, #8]
 8019092:	9b01      	ldr	r3, [sp, #4]
 8019094:	42b3      	cmp	r3, r6
 8019096:	d199      	bne.n	8018fcc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019098:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801909a:	2900      	cmp	r1, #0
 801909c:	f43f af5a 	beq.w	8018f54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80190a0:	a80c      	add	r0, sp, #48	; 0x30
 80190a2:	2600      	movs	r6, #0
 80190a4:	f7ff fdb1 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80190a8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80190ac:	88ea      	ldrh	r2, [r5, #6]
 80190ae:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80190b2:	1ad2      	subs	r2, r2, r3
 80190b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80190b6:	7929      	ldrb	r1, [r5, #4]
 80190b8:	441a      	add	r2, r3
 80190ba:	892b      	ldrh	r3, [r5, #8]
 80190bc:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80190c0:	a90e      	add	r1, sp, #56	; 0x38
 80190c2:	1a1b      	subs	r3, r3, r0
 80190c4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80190c6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80190ca:	4403      	add	r3, r0
 80190cc:	480c      	ldr	r0, [pc, #48]	; (8019100 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80190ce:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80190d2:	900e      	str	r0, [sp, #56]	; 0x38
 80190d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80190d6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80190da:	6803      	ldr	r3, [r0, #0]
 80190dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190de:	4798      	blx	r3
 80190e0:	792b      	ldrb	r3, [r5, #4]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	f43f af36 	beq.w	8018f54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80190e8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80190ec:	e732      	b.n	8018f54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80190ee:	bf00      	nop
 80190f0:	2000bc78 	.word	0x2000bc78
 80190f4:	08025994 	.word	0x08025994
 80190f8:	2000bc6c 	.word	0x2000bc6c
 80190fc:	2000bc6e 	.word	0x2000bc6e
 8019100:	08027dd0 	.word	0x08027dd0

08019104 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019106:	4604      	mov	r4, r0
 8019108:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801910c:	3201      	adds	r2, #1
 801910e:	d112      	bne.n	8019136 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019110:	2500      	movs	r5, #0
 8019112:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019116:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801911a:	6803      	ldr	r3, [r0, #0]
 801911c:	9500      	str	r5, [sp, #0]
 801911e:	466d      	mov	r5, sp
 8019120:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019124:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019128:	4629      	mov	r1, r5
 801912a:	6a1b      	ldr	r3, [r3, #32]
 801912c:	4798      	blx	r3
 801912e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019132:	e884 0003 	stmia.w	r4, {r0, r1}
 8019136:	4620      	mov	r0, r4
 8019138:	b003      	add	sp, #12
 801913a:	bd30      	pop	{r4, r5, pc}

0801913c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801913c:	b513      	push	{r0, r1, r4, lr}
 801913e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019142:	4604      	mov	r4, r0
 8019144:	3301      	adds	r3, #1
 8019146:	d109      	bne.n	801915c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019148:	4601      	mov	r1, r0
 801914a:	4668      	mov	r0, sp
 801914c:	f7ff fd5d 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019150:	f8bd 3000 	ldrh.w	r3, [sp]
 8019154:	8423      	strh	r3, [r4, #32]
 8019156:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801915a:	8463      	strh	r3, [r4, #34]	; 0x22
 801915c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019160:	b002      	add	sp, #8
 8019162:	bd10      	pop	{r4, pc}

08019164 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019164:	b513      	push	{r0, r1, r4, lr}
 8019166:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801916a:	4604      	mov	r4, r0
 801916c:	3301      	adds	r3, #1
 801916e:	d109      	bne.n	8019184 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019170:	4601      	mov	r1, r0
 8019172:	4668      	mov	r0, sp
 8019174:	f7ff fd49 	bl	8018c0a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019178:	f8bd 3000 	ldrh.w	r3, [sp]
 801917c:	8423      	strh	r3, [r4, #32]
 801917e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019182:	8463      	strh	r3, [r4, #34]	; 0x22
 8019184:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019188:	b002      	add	sp, #8
 801918a:	bd10      	pop	{r4, pc}

0801918c <_ZN8touchgfx6ScreenC1Ev>:
 801918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801918e:	4605      	mov	r5, r0
 8019190:	4b17      	ldr	r3, [pc, #92]	; (80191f0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019192:	2200      	movs	r2, #0
 8019194:	4917      	ldr	r1, [pc, #92]	; (80191f4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019196:	f845 3b04 	str.w	r3, [r5], #4
 801919a:	2301      	movs	r3, #1
 801919c:	8102      	strh	r2, [r0, #8]
 801919e:	4604      	mov	r4, r0
 80191a0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80191a4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80191a8:	4b13      	ldr	r3, [pc, #76]	; (80191f8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80191aa:	8142      	strh	r2, [r0, #10]
 80191ac:	f9b3 7000 	ldrsh.w	r7, [r3]
 80191b0:	4b12      	ldr	r3, [pc, #72]	; (80191fc <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80191b2:	8182      	strh	r2, [r0, #12]
 80191b4:	81c2      	strh	r2, [r0, #14]
 80191b6:	8202      	strh	r2, [r0, #16]
 80191b8:	8242      	strh	r2, [r0, #18]
 80191ba:	8282      	strh	r2, [r0, #20]
 80191bc:	82c2      	strh	r2, [r0, #22]
 80191be:	6202      	str	r2, [r0, #32]
 80191c0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80191c4:	6342      	str	r2, [r0, #52]	; 0x34
 80191c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80191ca:	6041      	str	r1, [r0, #4]
 80191cc:	4611      	mov	r1, r2
 80191ce:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80191d2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80191d6:	4628      	mov	r0, r5
 80191d8:	f7f6 fc65 	bl	800faa6 <_ZN8touchgfx8Drawable5setXYEss>
 80191dc:	4639      	mov	r1, r7
 80191de:	4628      	mov	r0, r5
 80191e0:	f7f6 fc7f 	bl	800fae2 <_ZN8touchgfx8Drawable8setWidthEs>
 80191e4:	4628      	mov	r0, r5
 80191e6:	4631      	mov	r1, r6
 80191e8:	f7f6 fc8a 	bl	800fb00 <_ZN8touchgfx8Drawable9setHeightEs>
 80191ec:	4620      	mov	r0, r4
 80191ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191f0:	08027e0c 	.word	0x08027e0c
 80191f4:	08026ae0 	.word	0x08026ae0
 80191f8:	2000bc6c 	.word	0x2000bc6c
 80191fc:	2000bc6e 	.word	0x2000bc6e

08019200 <_ZN8touchgfx6Screen4drawEv>:
 8019200:	4b09      	ldr	r3, [pc, #36]	; (8019228 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019202:	b507      	push	{r0, r1, r2, lr}
 8019204:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019208:	2100      	movs	r1, #0
 801920a:	4b08      	ldr	r3, [pc, #32]	; (801922c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801920c:	9100      	str	r1, [sp, #0]
 801920e:	4669      	mov	r1, sp
 8019210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019214:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019218:	f8ad 3006 	strh.w	r3, [sp, #6]
 801921c:	6803      	ldr	r3, [r0, #0]
 801921e:	689b      	ldr	r3, [r3, #8]
 8019220:	4798      	blx	r3
 8019222:	b003      	add	sp, #12
 8019224:	f85d fb04 	ldr.w	pc, [sp], #4
 8019228:	2000bc6c 	.word	0x2000bc6c
 801922c:	2000bc6e 	.word	0x2000bc6e

08019230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019234:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019238:	b089      	sub	sp, #36	; 0x24
 801923a:	4680      	mov	r8, r0
 801923c:	460c      	mov	r4, r1
 801923e:	4615      	mov	r5, r2
 8019240:	b16b      	cbz	r3, 801925e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019242:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019246:	b153      	cbz	r3, 801925e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019248:	4628      	mov	r0, r5
 801924a:	f7ff ff5b 	bl	8019104 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801924e:	4621      	mov	r1, r4
 8019250:	f7fe ffc2 	bl	80181d8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019254:	69eb      	ldr	r3, [r5, #28]
 8019256:	b928      	cbnz	r0, 8019264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019258:	461d      	mov	r5, r3
 801925a:	2b00      	cmp	r3, #0
 801925c:	d1f4      	bne.n	8019248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801925e:	b009      	add	sp, #36	; 0x24
 8019260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019264:	ae04      	add	r6, sp, #16
 8019266:	2b00      	cmp	r3, #0
 8019268:	d051      	beq.n	801930e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801926a:	682b      	ldr	r3, [r5, #0]
 801926c:	4629      	mov	r1, r5
 801926e:	a802      	add	r0, sp, #8
 8019270:	68db      	ldr	r3, [r3, #12]
 8019272:	4798      	blx	r3
 8019274:	4628      	mov	r0, r5
 8019276:	f7ff ff61 	bl	801913c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801927a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801927e:	4407      	add	r7, r0
 8019280:	4628      	mov	r0, r5
 8019282:	f7ff ff6f 	bl	8019164 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019286:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801928a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801928e:	b23f      	sxth	r7, r7
 8019290:	4418      	add	r0, r3
 8019292:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019296:	4621      	mov	r1, r4
 8019298:	f8ad 2014 	strh.w	r2, [sp, #20]
 801929c:	f8ad 0012 	strh.w	r0, [sp, #18]
 80192a0:	4630      	mov	r0, r6
 80192a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80192a6:	f8ad 7010 	strh.w	r7, [sp, #16]
 80192aa:	f7fb fe6d 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 80192ae:	4628      	mov	r0, r5
 80192b0:	f7ff ff28 	bl	8019104 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80192b4:	ab06      	add	r3, sp, #24
 80192b6:	4602      	mov	r2, r0
 80192b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80192bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80192c0:	4611      	mov	r1, r2
 80192c2:	4618      	mov	r0, r3
 80192c4:	f7fb fe60 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 80192c8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80192cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80192d0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80192d4:	4299      	cmp	r1, r3
 80192d6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80192da:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80192de:	d10b      	bne.n	80192f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80192e0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80192e4:	4552      	cmp	r2, sl
 80192e6:	d107      	bne.n	80192f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80192e8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80192ec:	455a      	cmp	r2, fp
 80192ee:	d103      	bne.n	80192f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80192f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80192f4:	454a      	cmp	r2, r9
 80192f6:	d00a      	beq.n	801930e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80192f8:	f1bb 0f00 	cmp.w	fp, #0
 80192fc:	d002      	beq.n	8019304 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 80192fe:	f1b9 0f00 	cmp.w	r9, #0
 8019302:	d12e      	bne.n	8019362 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8019304:	69ea      	ldr	r2, [r5, #28]
 8019306:	4621      	mov	r1, r4
 8019308:	4640      	mov	r0, r8
 801930a:	f7ff ff91 	bl	8019230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801930e:	4628      	mov	r0, r5
 8019310:	f7ff fef8 	bl	8019104 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019314:	6861      	ldr	r1, [r4, #4]
 8019316:	4602      	mov	r2, r0
 8019318:	4633      	mov	r3, r6
 801931a:	6820      	ldr	r0, [r4, #0]
 801931c:	c303      	stmia	r3!, {r0, r1}
 801931e:	4611      	mov	r1, r2
 8019320:	4630      	mov	r0, r6
 8019322:	f7fb fe31 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 8019326:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d097      	beq.n	801925e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801932e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d093      	beq.n	801925e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019336:	4628      	mov	r0, r5
 8019338:	f7ff ff00 	bl	801913c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801933c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019340:	1a18      	subs	r0, r3, r0
 8019342:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019346:	4628      	mov	r0, r5
 8019348:	f7ff ff0c 	bl	8019164 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801934c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019350:	4631      	mov	r1, r6
 8019352:	1a18      	subs	r0, r3, r0
 8019354:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019358:	4628      	mov	r0, r5
 801935a:	682b      	ldr	r3, [r5, #0]
 801935c:	689b      	ldr	r3, [r3, #8]
 801935e:	4798      	blx	r3
 8019360:	e77d      	b.n	801925e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019362:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019366:	fa1f f08a 	uxth.w	r0, sl
 801936a:	4552      	cmp	r2, sl
 801936c:	9000      	str	r0, [sp, #0]
 801936e:	da12      	bge.n	8019396 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019370:	9301      	str	r3, [sp, #4]
 8019372:	9b00      	ldr	r3, [sp, #0]
 8019374:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019378:	f8ad 2012 	strh.w	r2, [sp, #18]
 801937c:	1a9a      	subs	r2, r3, r2
 801937e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019382:	4631      	mov	r1, r6
 8019384:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019388:	4640      	mov	r0, r8
 801938a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801938e:	69ea      	ldr	r2, [r5, #28]
 8019390:	f7ff ff4e 	bl	8019230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019394:	9b01      	ldr	r3, [sp, #4]
 8019396:	f9b4 2000 	ldrsh.w	r2, [r4]
 801939a:	b29f      	uxth	r7, r3
 801939c:	429a      	cmp	r2, r3
 801939e:	da0d      	bge.n	80193bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 80193a0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80193a4:	1aba      	subs	r2, r7, r2
 80193a6:	f8ad a012 	strh.w	sl, [sp, #18]
 80193aa:	4631      	mov	r1, r6
 80193ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80193b0:	4640      	mov	r0, r8
 80193b2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80193b6:	69ea      	ldr	r2, [r5, #28]
 80193b8:	f7ff ff3a 	bl	8019230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80193bc:	8822      	ldrh	r2, [r4, #0]
 80193be:	445f      	add	r7, fp
 80193c0:	88a3      	ldrh	r3, [r4, #4]
 80193c2:	b2bf      	uxth	r7, r7
 80193c4:	4413      	add	r3, r2
 80193c6:	b23a      	sxth	r2, r7
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	b219      	sxth	r1, r3
 80193cc:	4291      	cmp	r1, r2
 80193ce:	dd0d      	ble.n	80193ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 80193d0:	1bdb      	subs	r3, r3, r7
 80193d2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80193d6:	f8ad a012 	strh.w	sl, [sp, #18]
 80193da:	4631      	mov	r1, r6
 80193dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80193e0:	4640      	mov	r0, r8
 80193e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80193e6:	69ea      	ldr	r2, [r5, #28]
 80193e8:	f7ff ff22 	bl	8019230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80193ec:	88e2      	ldrh	r2, [r4, #6]
 80193ee:	8863      	ldrh	r3, [r4, #2]
 80193f0:	4413      	add	r3, r2
 80193f2:	9a00      	ldr	r2, [sp, #0]
 80193f4:	444a      	add	r2, r9
 80193f6:	b29b      	uxth	r3, r3
 80193f8:	fa1f f982 	uxth.w	r9, r2
 80193fc:	b219      	sxth	r1, r3
 80193fe:	fa0f f289 	sxth.w	r2, r9
 8019402:	428a      	cmp	r2, r1
 8019404:	da83      	bge.n	801930e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019406:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801940a:	eba3 0309 	sub.w	r3, r3, r9
 801940e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019412:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019416:	4631      	mov	r1, r6
 8019418:	f8ad 0010 	strh.w	r0, [sp, #16]
 801941c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019420:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019424:	69ea      	ldr	r2, [r5, #28]
 8019426:	e76f      	b.n	8019308 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08019428 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801942a:	2300      	movs	r3, #0
 801942c:	aa02      	add	r2, sp, #8
 801942e:	4604      	mov	r4, r0
 8019430:	3004      	adds	r0, #4
 8019432:	f842 3d04 	str.w	r3, [r2, #-4]!
 8019436:	460d      	mov	r5, r1
 8019438:	f7fb fe7d 	bl	8015136 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801943c:	9a01      	ldr	r2, [sp, #4]
 801943e:	b11a      	cbz	r2, 8019448 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019440:	4629      	mov	r1, r5
 8019442:	4620      	mov	r0, r4
 8019444:	f7ff fef4 	bl	8019230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019448:	b003      	add	sp, #12
 801944a:	bd30      	pop	{r4, r5, pc}

0801944c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801944c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801944e:	4602      	mov	r2, r0
 8019450:	4604      	mov	r4, r0
 8019452:	460d      	mov	r5, r1
 8019454:	466b      	mov	r3, sp
 8019456:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801945a:	6851      	ldr	r1, [r2, #4]
 801945c:	c303      	stmia	r3!, {r0, r1}
 801945e:	4629      	mov	r1, r5
 8019460:	4668      	mov	r0, sp
 8019462:	f7fb fd91 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 8019466:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801946a:	4669      	mov	r1, sp
 801946c:	b123      	cbz	r3, 8019478 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801946e:	4620      	mov	r0, r4
 8019470:	f7ff ffda 	bl	8019428 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019474:	b003      	add	sp, #12
 8019476:	bd30      	pop	{r4, r5, pc}
 8019478:	1d20      	adds	r0, r4, #4
 801947a:	f7fb fe23 	bl	80150c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801947e:	e7f9      	b.n	8019474 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019480 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019480:	460b      	mov	r3, r1
 8019482:	680a      	ldr	r2, [r1, #0]
 8019484:	1d01      	adds	r1, r0, #4
 8019486:	6952      	ldr	r2, [r2, #20]
 8019488:	4618      	mov	r0, r3
 801948a:	4710      	bx	r2

0801948c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801948c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8019490:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8019494:	4b03      	ldr	r3, [pc, #12]	; (80194a4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8019496:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801949a:	bf08      	it	eq
 801949c:	2300      	moveq	r3, #0
 801949e:	4308      	orrs	r0, r1
 80194a0:	4318      	orrs	r0, r3
 80194a2:	4770      	bx	lr
 80194a4:	fffffe00 	.word	0xfffffe00

080194a8 <_ZN8touchgfx9GlyphNode6setTopEs>:
 80194a8:	7b43      	ldrb	r3, [r0, #13]
 80194aa:	7201      	strb	r1, [r0, #8]
 80194ac:	b289      	uxth	r1, r1
 80194ae:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80194b2:	05ca      	lsls	r2, r1, #23
 80194b4:	bf48      	it	mi
 80194b6:	f043 0320 	orrmi.w	r3, r3, #32
 80194ba:	7343      	strb	r3, [r0, #13]
 80194bc:	058b      	lsls	r3, r1, #22
 80194be:	bf42      	ittt	mi
 80194c0:	7b43      	ldrbmi	r3, [r0, #13]
 80194c2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80194c6:	7343      	strbmi	r3, [r0, #13]
 80194c8:	4770      	bx	lr

080194ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80194ca:	b530      	push	{r4, r5, lr}
 80194cc:	2500      	movs	r5, #0
 80194ce:	2401      	movs	r4, #1
 80194d0:	6843      	ldr	r3, [r0, #4]
 80194d2:	b913      	cbnz	r3, 80194da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80194d4:	6803      	ldr	r3, [r0, #0]
 80194d6:	b1f3      	cbz	r3, 8019516 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80194d8:	6043      	str	r3, [r0, #4]
 80194da:	7c03      	ldrb	r3, [r0, #16]
 80194dc:	b143      	cbz	r3, 80194f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80194de:	68c3      	ldr	r3, [r0, #12]
 80194e0:	b12b      	cbz	r3, 80194ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80194e2:	881a      	ldrh	r2, [r3, #0]
 80194e4:	b11a      	cbz	r2, 80194ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80194e6:	1c9a      	adds	r2, r3, #2
 80194e8:	60c2      	str	r2, [r0, #12]
 80194ea:	8818      	ldrh	r0, [r3, #0]
 80194ec:	bd30      	pop	{r4, r5, pc}
 80194ee:	7405      	strb	r5, [r0, #16]
 80194f0:	6843      	ldr	r3, [r0, #4]
 80194f2:	8819      	ldrh	r1, [r3, #0]
 80194f4:	b179      	cbz	r1, 8019516 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80194f6:	1c9a      	adds	r2, r3, #2
 80194f8:	2902      	cmp	r1, #2
 80194fa:	6042      	str	r2, [r0, #4]
 80194fc:	d1f5      	bne.n	80194ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80194fe:	6883      	ldr	r3, [r0, #8]
 8019500:	1d1a      	adds	r2, r3, #4
 8019502:	6082      	str	r2, [r0, #8]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	60c3      	str	r3, [r0, #12]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d0e1      	beq.n	80194d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801950c:	881b      	ldrh	r3, [r3, #0]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d0de      	beq.n	80194d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019512:	7404      	strb	r4, [r0, #16]
 8019514:	e7dc      	b.n	80194d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019516:	2000      	movs	r0, #0
 8019518:	e7e8      	b.n	80194ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801951a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801951a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801951c:	4605      	mov	r5, r0
 801951e:	4608      	mov	r0, r1
 8019520:	b1f1      	cbz	r1, 8019560 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019522:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8019526:	460b      	mov	r3, r1
 8019528:	f101 0708 	add.w	r7, r1, #8
 801952c:	4622      	mov	r2, r4
 801952e:	6818      	ldr	r0, [r3, #0]
 8019530:	3308      	adds	r3, #8
 8019532:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019536:	4626      	mov	r6, r4
 8019538:	42bb      	cmp	r3, r7
 801953a:	c603      	stmia	r6!, {r0, r1}
 801953c:	4634      	mov	r4, r6
 801953e:	d1f6      	bne.n	801952e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019540:	6818      	ldr	r0, [r3, #0]
 8019542:	6030      	str	r0, [r6, #0]
 8019544:	4610      	mov	r0, r2
 8019546:	889b      	ldrh	r3, [r3, #4]
 8019548:	80b3      	strh	r3, [r6, #4]
 801954a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801954e:	015b      	lsls	r3, r3, #5
 8019550:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019554:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019558:	430b      	orrs	r3, r1
 801955a:	425b      	negs	r3, r3
 801955c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8019560:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019562 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019562:	b538      	push	{r3, r4, r5, lr}
 8019564:	460c      	mov	r4, r1
 8019566:	6811      	ldr	r1, [r2, #0]
 8019568:	4610      	mov	r0, r2
 801956a:	68cd      	ldr	r5, [r1, #12]
 801956c:	4619      	mov	r1, r3
 801956e:	47a8      	blx	r5
 8019570:	2800      	cmp	r0, #0
 8019572:	bf08      	it	eq
 8019574:	4620      	moveq	r0, r4
 8019576:	bd38      	pop	{r3, r4, r5, pc}

08019578 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019578:	b570      	push	{r4, r5, r6, lr}
 801957a:	8810      	ldrh	r0, [r2, #0]
 801957c:	4298      	cmp	r0, r3
 801957e:	d817      	bhi.n	80195b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019580:	1e48      	subs	r0, r1, #1
 8019582:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019586:	4298      	cmp	r0, r3
 8019588:	d312      	bcc.n	80195b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801958a:	2400      	movs	r4, #0
 801958c:	428c      	cmp	r4, r1
 801958e:	d20f      	bcs.n	80195b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019590:	1860      	adds	r0, r4, r1
 8019592:	1040      	asrs	r0, r0, #1
 8019594:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019598:	0085      	lsls	r5, r0, #2
 801959a:	42b3      	cmp	r3, r6
 801959c:	d902      	bls.n	80195a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801959e:	3001      	adds	r0, #1
 80195a0:	b284      	uxth	r4, r0
 80195a2:	e7f3      	b.n	801958c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80195a4:	d102      	bne.n	80195ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 80195a6:	442a      	add	r2, r5
 80195a8:	8850      	ldrh	r0, [r2, #2]
 80195aa:	bd70      	pop	{r4, r5, r6, pc}
 80195ac:	b281      	uxth	r1, r0
 80195ae:	e7ed      	b.n	801958c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80195b0:	2000      	movs	r0, #0
 80195b2:	e7fa      	b.n	80195aa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

080195b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 80195b4:	b510      	push	{r4, lr}
 80195b6:	8ac3      	ldrh	r3, [r0, #22]
 80195b8:	428b      	cmp	r3, r1
 80195ba:	d805      	bhi.n	80195c8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 80195bc:	4b07      	ldr	r3, [pc, #28]	; (80195dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 80195be:	21fd      	movs	r1, #253	; 0xfd
 80195c0:	4a07      	ldr	r2, [pc, #28]	; (80195e0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 80195c2:	4808      	ldr	r0, [pc, #32]	; (80195e4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 80195c4:	f00a fe40 	bl	8024248 <__assert_func>
 80195c8:	8a83      	ldrh	r3, [r0, #20]
 80195ca:	240a      	movs	r4, #10
 80195cc:	4419      	add	r1, r3
 80195ce:	fbb1 f3f4 	udiv	r3, r1, r4
 80195d2:	fb04 1113 	mls	r1, r4, r3, r1
 80195d6:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 80195da:	bd10      	pop	{r4, pc}
 80195dc:	08027e59 	.word	0x08027e59
 80195e0:	08028288 	.word	0x08028288
 80195e4:	08027e67 	.word	0x08027e67

080195e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 80195e8:	b508      	push	{r3, lr}
 80195ea:	8ac3      	ldrh	r3, [r0, #22]
 80195ec:	428b      	cmp	r3, r1
 80195ee:	d805      	bhi.n	80195fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 80195f0:	4b07      	ldr	r3, [pc, #28]	; (8019610 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 80195f2:	21d3      	movs	r1, #211	; 0xd3
 80195f4:	4a07      	ldr	r2, [pc, #28]	; (8019614 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 80195f6:	4808      	ldr	r0, [pc, #32]	; (8019618 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 80195f8:	f00a fe26 	bl	8024248 <__assert_func>
 80195fc:	8a83      	ldrh	r3, [r0, #20]
 80195fe:	220a      	movs	r2, #10
 8019600:	4419      	add	r1, r3
 8019602:	fbb1 f3f2 	udiv	r3, r1, r2
 8019606:	fb02 1113 	mls	r1, r2, r3, r1
 801960a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801960e:	bd08      	pop	{r3, pc}
 8019610:	08027e59 	.word	0x08027e59
 8019614:	08027fd8 	.word	0x08027fd8
 8019618:	08027e67 	.word	0x08027e67

0801961c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801961c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019620:	4604      	mov	r4, r0
 8019622:	4688      	mov	r8, r1
 8019624:	4615      	mov	r5, r2
 8019626:	b94a      	cbnz	r2, 801963c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8019628:	4691      	mov	r9, r2
 801962a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801962e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8019632:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019636:	4648      	mov	r0, r9
 8019638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801963c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8019640:	8892      	ldrh	r2, [r2, #4]
 8019642:	462b      	mov	r3, r5
 8019644:	f105 0c08 	add.w	ip, r5, #8
 8019648:	46b3      	mov	fp, r6
 801964a:	6818      	ldr	r0, [r3, #0]
 801964c:	3308      	adds	r3, #8
 801964e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019652:	4637      	mov	r7, r6
 8019654:	4563      	cmp	r3, ip
 8019656:	c703      	stmia	r7!, {r0, r1}
 8019658:	463e      	mov	r6, r7
 801965a:	d1f6      	bne.n	801964a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801965c:	6818      	ldr	r0, [r3, #0]
 801965e:	46d9      	mov	r9, fp
 8019660:	6038      	str	r0, [r7, #0]
 8019662:	889b      	ldrh	r3, [r3, #4]
 8019664:	80bb      	strh	r3, [r7, #4]
 8019666:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801966a:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801966e:	18d3      	adds	r3, r2, r3
 8019670:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8019674:	b298      	uxth	r0, r3
 8019676:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801967a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801967e:	281d      	cmp	r0, #29
 8019680:	ea4a 0a01 	orr.w	sl, sl, r1
 8019684:	fa1f f68a 	uxth.w	r6, sl
 8019688:	d842      	bhi.n	8019710 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801968a:	2301      	movs	r3, #1
 801968c:	4950      	ldr	r1, [pc, #320]	; (80197d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801968e:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8019692:	4083      	lsls	r3, r0
 8019694:	420b      	tst	r3, r1
 8019696:	d114      	bne.n	80196c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8019698:	f413 7f60 	tst.w	r3, #896	; 0x380
 801969c:	d03c      	beq.n	8019718 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801969e:	fa1f fa8a 	uxth.w	sl, sl
 80196a2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80196a6:	4658      	mov	r0, fp
 80196a8:	eba1 010a 	sub.w	r1, r1, sl
 80196ac:	b209      	sxth	r1, r1
 80196ae:	f7ff fefb 	bl	80194a8 <_ZN8touchgfx9GlyphNode6setTopEs>
 80196b2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80196b6:	1b86      	subs	r6, r0, r6
 80196b8:	eba6 0a0a 	sub.w	sl, r6, sl
 80196bc:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 80196c0:	e7b9      	b.n	8019636 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80196c2:	2100      	movs	r1, #0
 80196c4:	f104 001a 	add.w	r0, r4, #26
 80196c8:	f7ff ff8e 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80196cc:	f640 6333 	movw	r3, #3635	; 0xe33
 80196d0:	4601      	mov	r1, r0
 80196d2:	4298      	cmp	r0, r3
 80196d4:	d10a      	bne.n	80196ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 80196d6:	f8d8 3000 	ldr.w	r3, [r8]
 80196da:	4640      	mov	r0, r8
 80196dc:	68db      	ldr	r3, [r3, #12]
 80196de:	4798      	blx	r3
 80196e0:	7b41      	ldrb	r1, [r0, #13]
 80196e2:	7a00      	ldrb	r0, [r0, #8]
 80196e4:	f7ff fed2 	bl	801948c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80196e8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80196ec:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80196f0:	4658      	mov	r0, fp
 80196f2:	4431      	add	r1, r6
 80196f4:	4451      	add	r1, sl
 80196f6:	b209      	sxth	r1, r1
 80196f8:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 80196fc:	f7ff fed4 	bl	80194a8 <_ZN8touchgfx9GlyphNode6setTopEs>
 8019700:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019704:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8019708:	1a9b      	subs	r3, r3, r2
 801970a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801970e:	e792      	b.n	8019636 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019710:	f640 631b 	movw	r3, #3611	; 0xe1b
 8019714:	429a      	cmp	r2, r3
 8019716:	d005      	beq.n	8019724 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8019718:	f022 0302 	bic.w	r3, r2, #2
 801971c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8019720:	428b      	cmp	r3, r1
 8019722:	d119      	bne.n	8019758 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8019724:	1e53      	subs	r3, r2, #1
 8019726:	4629      	mov	r1, r5
 8019728:	4642      	mov	r2, r8
 801972a:	4620      	mov	r0, r4
 801972c:	b29b      	uxth	r3, r3
 801972e:	f7ff ff18 	bl	8019562 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019732:	7b41      	ldrb	r1, [r0, #13]
 8019734:	7a00      	ldrb	r0, [r0, #8]
 8019736:	f7ff fea9 	bl	801948c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801973a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801973e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019742:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019746:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801974a:	4313      	orrs	r3, r2
 801974c:	115a      	asrs	r2, r3, #5
 801974e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019752:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019756:	e02e      	b.n	80197b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8019758:	4639      	mov	r1, r7
 801975a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801975e:	f7ff fe95 	bl	801948c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019762:	f640 6109 	movw	r1, #3593	; 0xe09
 8019766:	f022 0310 	bic.w	r3, r2, #16
 801976a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801976e:	428b      	cmp	r3, r1
 8019770:	d003      	beq.n	801977a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8019772:	f640 6313 	movw	r3, #3603	; 0xe13
 8019776:	429a      	cmp	r2, r3
 8019778:	d127      	bne.n	80197ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801977a:	b27f      	sxtb	r7, r7
 801977c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019780:	4629      	mov	r1, r5
 8019782:	4620      	mov	r0, r4
 8019784:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8019788:	431f      	orrs	r7, r3
 801978a:	f640 6313 	movw	r3, #3603	; 0xe13
 801978e:	429a      	cmp	r2, r3
 8019790:	bf14      	ite	ne
 8019792:	f102 33ff 	addne.w	r3, r2, #4294967295
 8019796:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801979a:	4642      	mov	r2, r8
 801979c:	bf18      	it	ne
 801979e:	b29b      	uxthne	r3, r3
 80197a0:	f7ff fedf 	bl	8019562 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80197a4:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80197a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80197ac:	7a83      	ldrb	r3, [r0, #10]
 80197ae:	4313      	orrs	r3, r2
 80197b0:	1aff      	subs	r7, r7, r3
 80197b2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 80197b6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80197ba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80197be:	f7ff fe65 	bl	801948c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80197c2:	1b80      	subs	r0, r0, r6
 80197c4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 80197c8:	e735      	b.n	8019636 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80197ca:	2300      	movs	r3, #0
 80197cc:	e7c1      	b.n	8019752 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 80197ce:	bf00      	nop
 80197d0:	3fc00079 	.word	0x3fc00079

080197d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80197d4:	3a01      	subs	r2, #1
 80197d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197da:	b292      	uxth	r2, r2
 80197dc:	460c      	mov	r4, r1
 80197de:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80197e2:	42b2      	cmp	r2, r6
 80197e4:	d018      	beq.n	8019818 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 80197e6:	8b01      	ldrh	r1, [r0, #24]
 80197e8:	f834 5b02 	ldrh.w	r5, [r4], #2
 80197ec:	4291      	cmp	r1, r2
 80197ee:	d805      	bhi.n	80197fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 80197f0:	4b13      	ldr	r3, [pc, #76]	; (8019840 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 80197f2:	21d3      	movs	r1, #211	; 0xd3
 80197f4:	4a13      	ldr	r2, [pc, #76]	; (8019844 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 80197f6:	4814      	ldr	r0, [pc, #80]	; (8019848 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 80197f8:	f00a fd26 	bl	8024248 <__assert_func>
 80197fc:	8ac1      	ldrh	r1, [r0, #22]
 80197fe:	4411      	add	r1, r2
 8019800:	3a01      	subs	r2, #1
 8019802:	f001 0101 	and.w	r1, r1, #1
 8019806:	b292      	uxth	r2, r2
 8019808:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801980c:	8a49      	ldrh	r1, [r1, #18]
 801980e:	428d      	cmp	r5, r1
 8019810:	d0e7      	beq.n	80197e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8019812:	2000      	movs	r0, #0
 8019814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019818:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801981c:	2600      	movs	r6, #0
 801981e:	f100 051a 	add.w	r5, r0, #26
 8019822:	441f      	add	r7, r3
 8019824:	b2b1      	uxth	r1, r6
 8019826:	42b9      	cmp	r1, r7
 8019828:	da08      	bge.n	801983c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801982a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801982e:	4628      	mov	r0, r5
 8019830:	f7ff feda 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019834:	3601      	adds	r6, #1
 8019836:	4540      	cmp	r0, r8
 8019838:	d0f4      	beq.n	8019824 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801983a:	e7ea      	b.n	8019812 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801983c:	2001      	movs	r0, #1
 801983e:	e7e9      	b.n	8019814 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8019840:	08027e59 	.word	0x08027e59
 8019844:	080283e8 	.word	0x080283e8
 8019848:	08027e67 	.word	0x08027e67

0801984c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801984c:	b538      	push	{r3, r4, r5, lr}
 801984e:	8ac3      	ldrh	r3, [r0, #22]
 8019850:	428b      	cmp	r3, r1
 8019852:	d205      	bcs.n	8019860 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8019854:	4b08      	ldr	r3, [pc, #32]	; (8019878 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8019856:	21d8      	movs	r1, #216	; 0xd8
 8019858:	4a08      	ldr	r2, [pc, #32]	; (801987c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801985a:	4809      	ldr	r0, [pc, #36]	; (8019880 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801985c:	f00a fcf4 	bl	8024248 <__assert_func>
 8019860:	8a82      	ldrh	r2, [r0, #20]
 8019862:	250a      	movs	r5, #10
 8019864:	1a5b      	subs	r3, r3, r1
 8019866:	440a      	add	r2, r1
 8019868:	82c3      	strh	r3, [r0, #22]
 801986a:	fbb2 f4f5 	udiv	r4, r2, r5
 801986e:	fb05 2214 	mls	r2, r5, r4, r2
 8019872:	8282      	strh	r2, [r0, #20]
 8019874:	bd38      	pop	{r3, r4, r5, pc}
 8019876:	bf00      	nop
 8019878:	08027e4d 	.word	0x08027e4d
 801987c:	08028204 	.word	0x08028204
 8019880:	08027e67 	.word	0x08027e67

08019884 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8019884:	b538      	push	{r3, r4, r5, lr}
 8019886:	8ac3      	ldrh	r3, [r0, #22]
 8019888:	2b09      	cmp	r3, #9
 801988a:	d905      	bls.n	8019898 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801988c:	4b08      	ldr	r3, [pc, #32]	; (80198b0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801988e:	21f7      	movs	r1, #247	; 0xf7
 8019890:	4a08      	ldr	r2, [pc, #32]	; (80198b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8019892:	4809      	ldr	r0, [pc, #36]	; (80198b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8019894:	f00a fcd8 	bl	8024248 <__assert_func>
 8019898:	8a82      	ldrh	r2, [r0, #20]
 801989a:	250a      	movs	r5, #10
 801989c:	441a      	add	r2, r3
 801989e:	3301      	adds	r3, #1
 80198a0:	fbb2 f4f5 	udiv	r4, r2, r5
 80198a4:	fb05 2214 	mls	r2, r5, r4, r2
 80198a8:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 80198ac:	82c3      	strh	r3, [r0, #22]
 80198ae:	bd38      	pop	{r3, r4, r5, pc}
 80198b0:	08027e41 	.word	0x08027e41
 80198b4:	08028155 	.word	0x08028155
 80198b8:	08027e67 	.word	0x08027e67

080198bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80198bc:	b538      	push	{r3, r4, r5, lr}
 80198be:	4604      	mov	r4, r0
 80198c0:	f100 051a 	add.w	r5, r0, #26
 80198c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80198c6:	2b0a      	cmp	r3, #10
 80198c8:	d01c      	beq.n	8019904 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 80198ca:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80198cc:	b962      	cbnz	r2, 80198e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80198ce:	f104 051a 	add.w	r5, r4, #26
 80198d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80198d4:	2b0a      	cmp	r3, #10
 80198d6:	d015      	beq.n	8019904 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 80198d8:	4620      	mov	r0, r4
 80198da:	f7ff fdf6 	bl	80194ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80198de:	4601      	mov	r1, r0
 80198e0:	4628      	mov	r0, r5
 80198e2:	f7ff ffcf 	bl	8019884 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 80198e6:	e7f4      	b.n	80198d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 80198e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80198ea:	3a01      	subs	r2, #1
 80198ec:	4628      	mov	r0, r5
 80198ee:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 80198f2:	3301      	adds	r3, #1
 80198f4:	f003 0301 	and.w	r3, r3, #1
 80198f8:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 80198fa:	8722      	strh	r2, [r4, #56]	; 0x38
 80198fc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80198fe:	f7ff ffc1 	bl	8019884 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8019902:	e7df      	b.n	80198c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8019904:	bd38      	pop	{r3, r4, r5, pc}
	...

08019908 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8019908:	2300      	movs	r3, #0
 801990a:	b510      	push	{r4, lr}
 801990c:	6043      	str	r3, [r0, #4]
 801990e:	4604      	mov	r4, r0
 8019910:	60c3      	str	r3, [r0, #12]
 8019912:	7403      	strb	r3, [r0, #16]
 8019914:	8603      	strh	r3, [r0, #48]	; 0x30
 8019916:	8303      	strh	r3, [r0, #24]
 8019918:	8703      	strh	r3, [r0, #56]	; 0x38
 801991a:	f7ff ffcf 	bl	80198bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801991e:	4a0a      	ldr	r2, [pc, #40]	; (8019948 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8019920:	6813      	ldr	r3, [r2, #0]
 8019922:	4611      	mov	r1, r2
 8019924:	b913      	cbnz	r3, 801992c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8019926:	6852      	ldr	r2, [r2, #4]
 8019928:	07d0      	lsls	r0, r2, #31
 801992a:	d50b      	bpl.n	8019944 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801992c:	6849      	ldr	r1, [r1, #4]
 801992e:	104a      	asrs	r2, r1, #1
 8019930:	07c9      	lsls	r1, r1, #31
 8019932:	eb04 0002 	add.w	r0, r4, r2
 8019936:	bf48      	it	mi
 8019938:	58a2      	ldrmi	r2, [r4, r2]
 801993a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801993e:	bf48      	it	mi
 8019940:	58d3      	ldrmi	r3, [r2, r3]
 8019942:	4718      	bx	r3
 8019944:	bd10      	pop	{r4, pc}
 8019946:	bf00      	nop
 8019948:	20008620 	.word	0x20008620

0801994c <_ZN8touchgfx12TextProviderC1Ev>:
 801994c:	2300      	movs	r3, #0
 801994e:	2201      	movs	r2, #1
 8019950:	b510      	push	{r4, lr}
 8019952:	4604      	mov	r4, r0
 8019954:	60c3      	str	r3, [r0, #12]
 8019956:	7403      	strb	r3, [r0, #16]
 8019958:	82c3      	strh	r3, [r0, #22]
 801995a:	8303      	strh	r3, [r0, #24]
 801995c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801995e:	8603      	strh	r3, [r0, #48]	; 0x30
 8019960:	86c3      	strh	r3, [r0, #54]	; 0x36
 8019962:	8703      	strh	r3, [r0, #56]	; 0x38
 8019964:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019966:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801996a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801996e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8019972:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8019976:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801997a:	e9c0 3300 	strd	r3, r3, [r0]
 801997e:	f7ff ffc3 	bl	8019908 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019982:	4620      	mov	r0, r4
 8019984:	bd10      	pop	{r4, pc}

08019986 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8019986:	b410      	push	{r4}
 8019988:	6082      	str	r2, [r0, #8]
 801998a:	6001      	str	r1, [r0, #0]
 801998c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801998e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019992:	f7ff bfb9 	b.w	8019908 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08019998 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8019998:	b508      	push	{r3, lr}
 801999a:	88c2      	ldrh	r2, [r0, #6]
 801999c:	440a      	add	r2, r1
 801999e:	2a02      	cmp	r2, #2
 80199a0:	dd05      	ble.n	80199ae <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 80199a2:	4b06      	ldr	r3, [pc, #24]	; (80199bc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 80199a4:	21ec      	movs	r1, #236	; 0xec
 80199a6:	4a06      	ldr	r2, [pc, #24]	; (80199c0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 80199a8:	4806      	ldr	r0, [pc, #24]	; (80199c4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 80199aa:	f00a fc4d 	bl	8024248 <__assert_func>
 80199ae:	8883      	ldrh	r3, [r0, #4]
 80199b0:	80c2      	strh	r2, [r0, #6]
 80199b2:	1a59      	subs	r1, r3, r1
 80199b4:	f001 0101 	and.w	r1, r1, #1
 80199b8:	8081      	strh	r1, [r0, #4]
 80199ba:	bd08      	pop	{r3, pc}
 80199bc:	08027e93 	.word	0x08027e93
 80199c0:	08028361 	.word	0x08028361
 80199c4:	08027e67 	.word	0x08027e67

080199c8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 80199c8:	b508      	push	{r3, lr}
 80199ca:	88c3      	ldrh	r3, [r0, #6]
 80199cc:	428b      	cmp	r3, r1
 80199ce:	d805      	bhi.n	80199dc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 80199d0:	4b06      	ldr	r3, [pc, #24]	; (80199ec <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 80199d2:	21fd      	movs	r1, #253	; 0xfd
 80199d4:	4a06      	ldr	r2, [pc, #24]	; (80199f0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 80199d6:	4807      	ldr	r0, [pc, #28]	; (80199f4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 80199d8:	f00a fc36 	bl	8024248 <__assert_func>
 80199dc:	8883      	ldrh	r3, [r0, #4]
 80199de:	4419      	add	r1, r3
 80199e0:	f001 0101 	and.w	r1, r1, #1
 80199e4:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 80199e8:	bd08      	pop	{r3, pc}
 80199ea:	bf00      	nop
 80199ec:	08027e59 	.word	0x08027e59
 80199f0:	080284b9 	.word	0x080284b9
 80199f4:	08027e67 	.word	0x08027e67

080199f8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80199f8:	b570      	push	{r4, r5, r6, lr}
 80199fa:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80199fc:	4604      	mov	r4, r0
 80199fe:	b92a      	cbnz	r2, 8019a0c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019a00:	4b12      	ldr	r3, [pc, #72]	; (8019a4c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8019a02:	21de      	movs	r1, #222	; 0xde
 8019a04:	4a12      	ldr	r2, [pc, #72]	; (8019a50 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019a06:	4813      	ldr	r0, [pc, #76]	; (8019a54 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8019a08:	f00a fc1e 	bl	8024248 <__assert_func>
 8019a0c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019a0e:	260a      	movs	r6, #10
 8019a10:	3a01      	subs	r2, #1
 8019a12:	3412      	adds	r4, #18
 8019a14:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019a18:	3301      	adds	r3, #1
 8019a1a:	8b4d      	ldrh	r5, [r1, #26]
 8019a1c:	8602      	strh	r2, [r0, #48]	; 0x30
 8019a1e:	fbb3 f1f6 	udiv	r1, r3, r6
 8019a22:	fb06 3311 	mls	r3, r6, r1, r3
 8019a26:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019a28:	f7ff ff48 	bl	80198bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019a2c:	88e3      	ldrh	r3, [r4, #6]
 8019a2e:	2101      	movs	r1, #1
 8019a30:	2b02      	cmp	r3, #2
 8019a32:	bf04      	itt	eq
 8019a34:	2301      	moveq	r3, #1
 8019a36:	80e3      	strheq	r3, [r4, #6]
 8019a38:	4620      	mov	r0, r4
 8019a3a:	f7ff ffad 	bl	8019998 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8019a3e:	4620      	mov	r0, r4
 8019a40:	462a      	mov	r2, r5
 8019a42:	2100      	movs	r1, #0
 8019a44:	f7ff ffc0 	bl	80199c8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8019a48:	4628      	mov	r0, r5
 8019a4a:	bd70      	pop	{r4, r5, r6, pc}
 8019a4c:	08027e38 	.word	0x08027e38
 8019a50:	080280aa 	.word	0x080280aa
 8019a54:	08027e67 	.word	0x08027e67

08019a58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019a58:	428a      	cmp	r2, r1
 8019a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a5e:	4604      	mov	r4, r0
 8019a60:	460e      	mov	r6, r1
 8019a62:	4615      	mov	r5, r2
 8019a64:	469a      	mov	sl, r3
 8019a66:	d92b      	bls.n	8019ac0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8019a68:	1a57      	subs	r7, r2, r1
 8019a6a:	f04f 0800 	mov.w	r8, #0
 8019a6e:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8019a72:	f04f 0b0a 	mov.w	fp, #10
 8019a76:	b2bf      	uxth	r7, r7
 8019a78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019a7a:	b92b      	cbnz	r3, 8019a88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8019a7c:	4b24      	ldr	r3, [pc, #144]	; (8019b10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8019a7e:	21e6      	movs	r1, #230	; 0xe6
 8019a80:	4a24      	ldr	r2, [pc, #144]	; (8019b14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8019a82:	4825      	ldr	r0, [pc, #148]	; (8019b18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8019a84:	f00a fbe0 	bl	8024248 <__assert_func>
 8019a88:	3b01      	subs	r3, #1
 8019a8a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019a8c:	2101      	movs	r1, #1
 8019a8e:	4648      	mov	r0, r9
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	f108 0801 	add.w	r8, r8, #1
 8019a96:	441a      	add	r2, r3
 8019a98:	8623      	strh	r3, [r4, #48]	; 0x30
 8019a9a:	fbb2 f3fb 	udiv	r3, r2, fp
 8019a9e:	fb0b 2313 	mls	r3, fp, r3, r2
 8019aa2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019aa6:	8b5a      	ldrh	r2, [r3, #26]
 8019aa8:	9201      	str	r2, [sp, #4]
 8019aaa:	f7ff ff75 	bl	8019998 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8019aae:	9a01      	ldr	r2, [sp, #4]
 8019ab0:	2100      	movs	r1, #0
 8019ab2:	4648      	mov	r0, r9
 8019ab4:	f7ff ff88 	bl	80199c8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8019ab8:	fa1f f388 	uxth.w	r3, r8
 8019abc:	429f      	cmp	r7, r3
 8019abe:	d8db      	bhi.n	8019a78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8019ac0:	f104 071a 	add.w	r7, r4, #26
 8019ac4:	4631      	mov	r1, r6
 8019ac6:	260a      	movs	r6, #10
 8019ac8:	4638      	mov	r0, r7
 8019aca:	f7ff febf 	bl	801984c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8019ace:	b1c5      	cbz	r5, 8019b02 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8019ad0:	3d01      	subs	r5, #1
 8019ad2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019ad4:	b2ad      	uxth	r5, r5
 8019ad6:	2b09      	cmp	r3, #9
 8019ad8:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8019adc:	d903      	bls.n	8019ae6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8019ade:	4b0f      	ldr	r3, [pc, #60]	; (8019b1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8019ae0:	21ec      	movs	r1, #236	; 0xec
 8019ae2:	4a0f      	ldr	r2, [pc, #60]	; (8019b20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8019ae4:	e7cd      	b.n	8019a82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8019ae6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8019ae8:	3301      	adds	r3, #1
 8019aea:	3109      	adds	r1, #9
 8019aec:	8623      	strh	r3, [r4, #48]	; 0x30
 8019aee:	fbb1 f0f6 	udiv	r0, r1, r6
 8019af2:	fb06 1110 	mls	r1, r6, r0, r1
 8019af6:	4638      	mov	r0, r7
 8019af8:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8019afa:	2100      	movs	r1, #0
 8019afc:	f7ff fd5a 	bl	80195b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019b00:	e7e5      	b.n	8019ace <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8019b02:	4620      	mov	r0, r4
 8019b04:	b003      	add	sp, #12
 8019b06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b0a:	f7ff bed7 	b.w	80198bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019b0e:	bf00      	nop
 8019b10:	08027e38 	.word	0x08027e38
 8019b14:	08027f2e 	.word	0x08027f2e
 8019b18:	08027e67 	.word	0x08027e67
 8019b1c:	08027e93 	.word	0x08027e93
 8019b20:	08027ea6 	.word	0x08027ea6

08019b24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b28:	4605      	mov	r5, r0
 8019b2a:	4616      	mov	r6, r2
 8019b2c:	1c8c      	adds	r4, r1, #2
 8019b2e:	8809      	ldrh	r1, [r1, #0]
 8019b30:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019b34:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019b38:	42b3      	cmp	r3, r6
 8019b3a:	d124      	bne.n	8019b86 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019b3c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019b40:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019b44:	f001 070f 	and.w	r7, r1, #15
 8019b48:	4652      	mov	r2, sl
 8019b4a:	f8cd 8000 	str.w	r8, [sp]
 8019b4e:	464b      	mov	r3, r9
 8019b50:	4621      	mov	r1, r4
 8019b52:	4628      	mov	r0, r5
 8019b54:	f7ff fe3e 	bl	80197d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019b58:	4683      	mov	fp, r0
 8019b5a:	b168      	cbz	r0, 8019b78 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019b5c:	eb0a 0109 	add.w	r1, sl, r9
 8019b60:	463a      	mov	r2, r7
 8019b62:	4628      	mov	r0, r5
 8019b64:	4441      	add	r1, r8
 8019b66:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019b6a:	4649      	mov	r1, r9
 8019b6c:	f7ff ff74 	bl	8019a58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019b70:	4658      	mov	r0, fp
 8019b72:	b003      	add	sp, #12
 8019b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b78:	eb07 010a 	add.w	r1, r7, sl
 8019b7c:	4449      	add	r1, r9
 8019b7e:	4441      	add	r1, r8
 8019b80:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019b84:	e7d2      	b.n	8019b2c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019b86:	f04f 0b00 	mov.w	fp, #0
 8019b8a:	e7f1      	b.n	8019b70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019b8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b90:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8019b92:	4604      	mov	r4, r0
 8019b94:	260b      	movs	r6, #11
 8019b96:	f100 091a 	add.w	r9, r0, #26
 8019b9a:	886f      	ldrh	r7, [r5, #2]
 8019b9c:	087f      	lsrs	r7, r7, #1
 8019b9e:	3e01      	subs	r6, #1
 8019ba0:	d013      	beq.n	8019bca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8019ba2:	2100      	movs	r1, #0
 8019ba4:	4648      	mov	r0, r9
 8019ba6:	f7ff fd1f 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019baa:	462a      	mov	r2, r5
 8019bac:	4680      	mov	r8, r0
 8019bae:	4603      	mov	r3, r0
 8019bb0:	4639      	mov	r1, r7
 8019bb2:	4620      	mov	r0, r4
 8019bb4:	f7ff fce0 	bl	8019578 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019bb8:	b138      	cbz	r0, 8019bca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8019bba:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019bbe:	4642      	mov	r2, r8
 8019bc0:	4620      	mov	r0, r4
 8019bc2:	f7ff ffaf 	bl	8019b24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019bc6:	2800      	cmp	r0, #0
 8019bc8:	d1e9      	bne.n	8019b9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8019bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8019bd0:	4b1e      	ldr	r3, [pc, #120]	; (8019c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8019bd2:	b570      	push	{r4, r5, r6, lr}
 8019bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bd8:	4604      	mov	r4, r0
 8019bda:	f003 0501 	and.w	r5, r3, #1
 8019bde:	b902      	cbnz	r2, 8019be2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8019be0:	b165      	cbz	r5, 8019bfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8019be2:	105b      	asrs	r3, r3, #1
 8019be4:	f104 061a 	add.w	r6, r4, #26
 8019be8:	18e0      	adds	r0, r4, r3
 8019bea:	b10d      	cbz	r5, 8019bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8019bec:	58e3      	ldr	r3, [r4, r3]
 8019bee:	589a      	ldr	r2, [r3, r2]
 8019bf0:	4790      	blx	r2
 8019bf2:	2100      	movs	r1, #0
 8019bf4:	4602      	mov	r2, r0
 8019bf6:	4630      	mov	r0, r6
 8019bf8:	f7ff fcdc 	bl	80195b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019bfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019bfe:	b303      	cbz	r3, 8019c42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019c00:	f104 051a 	add.w	r5, r4, #26
 8019c04:	2100      	movs	r1, #0
 8019c06:	4628      	mov	r0, r5
 8019c08:	f7ff fcee 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019c0c:	b1c8      	cbz	r0, 8019c42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019c0e:	4620      	mov	r0, r4
 8019c10:	f7ff ffbc 	bl	8019b8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8019c14:	2101      	movs	r1, #1
 8019c16:	4628      	mov	r0, r5
 8019c18:	f7ff fce6 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019c1c:	f640 133f 	movw	r3, #2367	; 0x93f
 8019c20:	4606      	mov	r6, r0
 8019c22:	4298      	cmp	r0, r3
 8019c24:	d10d      	bne.n	8019c42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019c26:	2100      	movs	r1, #0
 8019c28:	4628      	mov	r0, r5
 8019c2a:	f7ff fcdd 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019c2e:	2101      	movs	r1, #1
 8019c30:	4602      	mov	r2, r0
 8019c32:	4628      	mov	r0, r5
 8019c34:	f7ff fcbe 	bl	80195b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019c38:	4632      	mov	r2, r6
 8019c3a:	2100      	movs	r1, #0
 8019c3c:	4628      	mov	r0, r5
 8019c3e:	f7ff fcb9 	bl	80195b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019c42:	4620      	mov	r0, r4
 8019c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c48:	f7ff bed6 	b.w	80199f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019c4c:	20008628 	.word	0x20008628

08019c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c52:	4617      	mov	r7, r2
 8019c54:	461e      	mov	r6, r3
 8019c56:	4605      	mov	r5, r0
 8019c58:	f7ff ffba 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	4604      	mov	r4, r0
 8019c60:	4601      	mov	r1, r0
 8019c62:	4638      	mov	r0, r7
 8019c64:	68db      	ldr	r3, [r3, #12]
 8019c66:	4798      	blx	r3
 8019c68:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8019c6c:	4602      	mov	r2, r0
 8019c6e:	6030      	str	r0, [r6, #0]
 8019c70:	b29b      	uxth	r3, r3
 8019c72:	2b7f      	cmp	r3, #127	; 0x7f
 8019c74:	d813      	bhi.n	8019c9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8019c76:	4639      	mov	r1, r7
 8019c78:	4628      	mov	r0, r5
 8019c7a:	f7ff fccf 	bl	801961c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019c7e:	6030      	str	r0, [r6, #0]
 8019c80:	6833      	ldr	r3, [r6, #0]
 8019c82:	b143      	cbz	r3, 8019c96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019c84:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8019c88:	7a9b      	ldrb	r3, [r3, #10]
 8019c8a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019c8e:	4313      	orrs	r3, r2
 8019c90:	bf0c      	ite	eq
 8019c92:	2301      	moveq	r3, #1
 8019c94:	2300      	movne	r3, #0
 8019c96:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019c9a:	4620      	mov	r0, r4
 8019c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c9e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d0ec      	beq.n	8019c80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8019ca6:	f640 1302 	movw	r3, #2306	; 0x902
 8019caa:	429c      	cmp	r4, r3
 8019cac:	d1e8      	bne.n	8019c80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8019cae:	4601      	mov	r1, r0
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	f7ff fc32 	bl	801951a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019cb6:	e7e2      	b.n	8019c7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08019cb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cbc:	4617      	mov	r7, r2
 8019cbe:	461e      	mov	r6, r3
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	f7ff ff85 	bl	8019bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019cc6:	683b      	ldr	r3, [r7, #0]
 8019cc8:	4604      	mov	r4, r0
 8019cca:	4601      	mov	r1, r0
 8019ccc:	4638      	mov	r0, r7
 8019cce:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8019cd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019cd6:	47c0      	blx	r8
 8019cd8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8019cdc:	4602      	mov	r2, r0
 8019cde:	6030      	str	r0, [r6, #0]
 8019ce0:	b29b      	uxth	r3, r3
 8019ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8019ce4:	d814      	bhi.n	8019d10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8019ce6:	4639      	mov	r1, r7
 8019ce8:	4628      	mov	r0, r5
 8019cea:	f7ff fc97 	bl	801961c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019cee:	6030      	str	r0, [r6, #0]
 8019cf0:	6833      	ldr	r3, [r6, #0]
 8019cf2:	b143      	cbz	r3, 8019d06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019cf4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8019cf8:	7a9b      	ldrb	r3, [r3, #10]
 8019cfa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019cfe:	4313      	orrs	r3, r2
 8019d00:	bf0c      	ite	eq
 8019d02:	2301      	moveq	r3, #1
 8019d04:	2300      	movne	r3, #0
 8019d06:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d10:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d0eb      	beq.n	8019cf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8019d18:	f640 1302 	movw	r3, #2306	; 0x902
 8019d1c:	429c      	cmp	r4, r3
 8019d1e:	d1e7      	bne.n	8019cf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8019d20:	4601      	mov	r1, r0
 8019d22:	4628      	mov	r0, r5
 8019d24:	f7ff fbf9 	bl	801951a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019d28:	e7e1      	b.n	8019cee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08019d2a <_ZN8touchgfx7Unicode6strlenEPKt>:
 8019d2a:	4602      	mov	r2, r0
 8019d2c:	b148      	cbz	r0, 8019d42 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8019d2e:	2300      	movs	r3, #0
 8019d30:	b298      	uxth	r0, r3
 8019d32:	3301      	adds	r3, #1
 8019d34:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019d38:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8019d3c:	2900      	cmp	r1, #0
 8019d3e:	d1f7      	bne.n	8019d30 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8019d40:	4770      	bx	lr
 8019d42:	4770      	bx	lr

08019d44 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8019d44:	b140      	cbz	r0, 8019d58 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8019d46:	4602      	mov	r2, r0
 8019d48:	1a13      	subs	r3, r2, r0
 8019d4a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8019d4e:	b29b      	uxth	r3, r3
 8019d50:	2900      	cmp	r1, #0
 8019d52:	d1f9      	bne.n	8019d48 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8019d54:	4618      	mov	r0, r3
 8019d56:	4770      	bx	lr
 8019d58:	4603      	mov	r3, r0
 8019d5a:	e7fb      	b.n	8019d54 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

08019d5c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8019d5c:	b530      	push	{r4, r5, lr}
 8019d5e:	4604      	mov	r4, r0
 8019d60:	b159      	cbz	r1, 8019d7a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8019d62:	b148      	cbz	r0, 8019d78 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019d64:	2300      	movs	r3, #0
 8019d66:	b298      	uxth	r0, r3
 8019d68:	4282      	cmp	r2, r0
 8019d6a:	d905      	bls.n	8019d78 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019d6c:	5ccd      	ldrb	r5, [r1, r3]
 8019d6e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8019d72:	3301      	adds	r3, #1
 8019d74:	2d00      	cmp	r5, #0
 8019d76:	d1f6      	bne.n	8019d66 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8019d78:	bd30      	pop	{r4, r5, pc}
 8019d7a:	4608      	mov	r0, r1
 8019d7c:	e7fc      	b.n	8019d78 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08019d7e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8019d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d80:	468c      	mov	ip, r1
 8019d82:	b08b      	sub	sp, #44	; 0x2c
 8019d84:	2100      	movs	r1, #0
 8019d86:	ae01      	add	r6, sp, #4
 8019d88:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8019d8c:	211f      	movs	r1, #31
 8019d8e:	fbb0 f7f3 	udiv	r7, r0, r3
 8019d92:	fb03 0517 	mls	r5, r3, r7, r0
 8019d96:	4638      	mov	r0, r7
 8019d98:	b2ec      	uxtb	r4, r5
 8019d9a:	2d09      	cmp	r5, #9
 8019d9c:	bfd4      	ite	le
 8019d9e:	3430      	addle	r4, #48	; 0x30
 8019da0:	3457      	addgt	r4, #87	; 0x57
 8019da2:	b2e4      	uxtb	r4, r4
 8019da4:	558c      	strb	r4, [r1, r6]
 8019da6:	1e4c      	subs	r4, r1, #1
 8019da8:	b92f      	cbnz	r7, 8019db6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8019daa:	4431      	add	r1, r6
 8019dac:	4660      	mov	r0, ip
 8019dae:	f7ff ffd5 	bl	8019d5c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019db2:	b00b      	add	sp, #44	; 0x2c
 8019db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019db6:	4621      	mov	r1, r4
 8019db8:	e7e9      	b.n	8019d8e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08019dba <_ZN8touchgfx7Unicode4itoaElPtti>:
 8019dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dbc:	4607      	mov	r7, r0
 8019dbe:	b08b      	sub	sp, #44	; 0x2c
 8019dc0:	4608      	mov	r0, r1
 8019dc2:	b341      	cbz	r1, 8019e16 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8019dc4:	1e99      	subs	r1, r3, #2
 8019dc6:	290e      	cmp	r1, #14
 8019dc8:	d825      	bhi.n	8019e16 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8019dca:	2100      	movs	r1, #0
 8019dcc:	463c      	mov	r4, r7
 8019dce:	261f      	movs	r6, #31
 8019dd0:	f10d 0c04 	add.w	ip, sp, #4
 8019dd4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8019dd8:	1e71      	subs	r1, r6, #1
 8019dda:	fb94 fef3 	sdiv	lr, r4, r3
 8019dde:	fb03 441e 	mls	r4, r3, lr, r4
 8019de2:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8019de6:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8019dea:	b2ec      	uxtb	r4, r5
 8019dec:	2d09      	cmp	r5, #9
 8019dee:	bfd4      	ite	le
 8019df0:	3430      	addle	r4, #48	; 0x30
 8019df2:	3457      	addgt	r4, #87	; 0x57
 8019df4:	b2e4      	uxtb	r4, r4
 8019df6:	f80c 4006 	strb.w	r4, [ip, r6]
 8019dfa:	4674      	mov	r4, lr
 8019dfc:	b96c      	cbnz	r4, 8019e1a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8019dfe:	2f00      	cmp	r7, #0
 8019e00:	da05      	bge.n	8019e0e <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8019e02:	ab0a      	add	r3, sp, #40	; 0x28
 8019e04:	4419      	add	r1, r3
 8019e06:	232d      	movs	r3, #45	; 0x2d
 8019e08:	f801 3c24 	strb.w	r3, [r1, #-36]
 8019e0c:	1eb1      	subs	r1, r6, #2
 8019e0e:	3101      	adds	r1, #1
 8019e10:	4461      	add	r1, ip
 8019e12:	f7ff ffa3 	bl	8019d5c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019e16:	b00b      	add	sp, #44	; 0x2c
 8019e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e1a:	460e      	mov	r6, r1
 8019e1c:	e7dc      	b.n	8019dd8 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08019e1e <_ZN8touchgfx7Unicode4atoiEPKt>:
 8019e1e:	b510      	push	{r4, lr}
 8019e20:	b158      	cbz	r0, 8019e3a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8019e22:	1e82      	subs	r2, r0, #2
 8019e24:	210a      	movs	r1, #10
 8019e26:	2000      	movs	r0, #0
 8019e28:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019e2c:	3b30      	subs	r3, #48	; 0x30
 8019e2e:	b29c      	uxth	r4, r3
 8019e30:	2c09      	cmp	r4, #9
 8019e32:	d802      	bhi.n	8019e3a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8019e34:	fb01 3000 	mla	r0, r1, r0, r3
 8019e38:	e7f6      	b.n	8019e28 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8019e3a:	bd10      	pop	{r4, pc}

08019e3c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8019e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	b085      	sub	sp, #20
 8019e42:	f8d0 8000 	ldr.w	r8, [r0]
 8019e46:	468a      	mov	sl, r1
 8019e48:	461c      	mov	r4, r3
 8019e4a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8019e4e:	4681      	mov	r9, r0
 8019e50:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019e54:	4640      	mov	r0, r8
 8019e56:	9203      	str	r2, [sp, #12]
 8019e58:	9102      	str	r1, [sp, #8]
 8019e5a:	9301      	str	r3, [sp, #4]
 8019e5c:	f7ff ff65 	bl	8019d2a <_ZN8touchgfx7Unicode6strlenEPKt>
 8019e60:	9a03      	ldr	r2, [sp, #12]
 8019e62:	f1ba 0f00 	cmp.w	sl, #0
 8019e66:	bf0c      	ite	eq
 8019e68:	4684      	moveq	ip, r0
 8019e6a:	f100 0c01 	addne.w	ip, r0, #1
 8019e6e:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8019e72:	8812      	ldrh	r2, [r2, #0]
 8019e74:	fa1f fc8c 	uxth.w	ip, ip
 8019e78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019e7a:	2a69      	cmp	r2, #105	; 0x69
 8019e7c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019e7e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8019e80:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8019e84:	d004      	beq.n	8019e90 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8019e86:	d844      	bhi.n	8019f12 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 8019e88:	2a58      	cmp	r2, #88	; 0x58
 8019e8a:	d001      	beq.n	8019e90 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8019e8c:	2a64      	cmp	r2, #100	; 0x64
 8019e8e:	d14b      	bne.n	8019f28 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8019e90:	b1a4      	cbz	r4, 8019ebc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019e92:	b956      	cbnz	r6, 8019eaa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8019e94:	2801      	cmp	r0, #1
 8019e96:	d108      	bne.n	8019eaa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8019e98:	f8b8 2000 	ldrh.w	r2, [r8]
 8019e9c:	2a30      	cmp	r2, #48	; 0x30
 8019e9e:	bf02      	ittt	eq
 8019ea0:	f108 0202 	addeq.w	r2, r8, #2
 8019ea4:	4630      	moveq	r0, r6
 8019ea6:	f8c9 2000 	streq.w	r2, [r9]
 8019eaa:	45b4      	cmp	ip, r6
 8019eac:	da3e      	bge.n	8019f2c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 8019eae:	b2b6      	uxth	r6, r6
 8019eb0:	eba6 040c 	sub.w	r4, r6, ip
 8019eb4:	46b4      	mov	ip, r6
 8019eb6:	b2a4      	uxth	r4, r4
 8019eb8:	f04f 0b00 	mov.w	fp, #0
 8019ebc:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8019ec0:	3a01      	subs	r2, #1
 8019ec2:	b169      	cbz	r1, 8019ee0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019ec4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019ec6:	458c      	cmp	ip, r1
 8019ec8:	da09      	bge.n	8019ede <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8019eca:	eba1 010c 	sub.w	r1, r1, ip
 8019ece:	b289      	uxth	r1, r1
 8019ed0:	b933      	cbnz	r3, 8019ee0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019ed2:	f1bb 0f00 	cmp.w	fp, #0
 8019ed6:	d02b      	beq.n	8019f30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8019ed8:	b350      	cbz	r0, 8019f30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8019eda:	440c      	add	r4, r1
 8019edc:	b2a4      	uxth	r4, r4
 8019ede:	2100      	movs	r1, #0
 8019ee0:	682b      	ldr	r3, [r5, #0]
 8019ee2:	4293      	cmp	r3, r2
 8019ee4:	da07      	bge.n	8019ef6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8019ee6:	f1ba 0f00 	cmp.w	sl, #0
 8019eea:	d004      	beq.n	8019ef6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8019eec:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8019ef0:	682b      	ldr	r3, [r5, #0]
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	602b      	str	r3, [r5, #0]
 8019ef6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8019efa:	b354      	cbz	r4, 8019f52 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8019efc:	682e      	ldr	r6, [r5, #0]
 8019efe:	3c01      	subs	r4, #1
 8019f00:	42b2      	cmp	r2, r6
 8019f02:	b2a4      	uxth	r4, r4
 8019f04:	dd25      	ble.n	8019f52 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8019f06:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8019f0a:	682b      	ldr	r3, [r5, #0]
 8019f0c:	3301      	adds	r3, #1
 8019f0e:	602b      	str	r3, [r5, #0]
 8019f10:	e7f3      	b.n	8019efa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 8019f12:	2a73      	cmp	r2, #115	; 0x73
 8019f14:	d003      	beq.n	8019f1e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 8019f16:	2a78      	cmp	r2, #120	; 0x78
 8019f18:	d0ba      	beq.n	8019e90 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8019f1a:	2a6f      	cmp	r2, #111	; 0x6f
 8019f1c:	e7b7      	b.n	8019e8e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 8019f1e:	2c00      	cmp	r4, #0
 8019f20:	d0cc      	beq.n	8019ebc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019f22:	42b0      	cmp	r0, r6
 8019f24:	dd00      	ble.n	8019f28 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8019f26:	b2b0      	uxth	r0, r6
 8019f28:	2400      	movs	r4, #0
 8019f2a:	e7c7      	b.n	8019ebc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019f2c:	2400      	movs	r4, #0
 8019f2e:	e7c3      	b.n	8019eb8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8019f30:	2900      	cmp	r1, #0
 8019f32:	d0d5      	beq.n	8019ee0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019f34:	f04f 0c20 	mov.w	ip, #32
 8019f38:	682e      	ldr	r6, [r5, #0]
 8019f3a:	2900      	cmp	r1, #0
 8019f3c:	d0d0      	beq.n	8019ee0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019f3e:	3901      	subs	r1, #1
 8019f40:	4296      	cmp	r6, r2
 8019f42:	b289      	uxth	r1, r1
 8019f44:	dacb      	bge.n	8019ede <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8019f46:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8019f4a:	682b      	ldr	r3, [r5, #0]
 8019f4c:	3301      	adds	r3, #1
 8019f4e:	602b      	str	r3, [r5, #0]
 8019f50:	e7f2      	b.n	8019f38 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 8019f52:	b198      	cbz	r0, 8019f7c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019f54:	f8d9 3000 	ldr.w	r3, [r9]
 8019f58:	881c      	ldrh	r4, [r3, #0]
 8019f5a:	b17c      	cbz	r4, 8019f7c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019f5c:	682c      	ldr	r4, [r5, #0]
 8019f5e:	3801      	subs	r0, #1
 8019f60:	42a2      	cmp	r2, r4
 8019f62:	b280      	uxth	r0, r0
 8019f64:	dd0a      	ble.n	8019f7c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019f66:	1c9c      	adds	r4, r3, #2
 8019f68:	f8c9 4000 	str.w	r4, [r9]
 8019f6c:	881c      	ldrh	r4, [r3, #0]
 8019f6e:	682b      	ldr	r3, [r5, #0]
 8019f70:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8019f74:	682b      	ldr	r3, [r5, #0]
 8019f76:	3301      	adds	r3, #1
 8019f78:	602b      	str	r3, [r5, #0]
 8019f7a:	e7ea      	b.n	8019f52 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8019f7c:	2620      	movs	r6, #32
 8019f7e:	b151      	cbz	r1, 8019f96 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8019f80:	6828      	ldr	r0, [r5, #0]
 8019f82:	3901      	subs	r1, #1
 8019f84:	4282      	cmp	r2, r0
 8019f86:	b289      	uxth	r1, r1
 8019f88:	dd05      	ble.n	8019f96 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8019f8a:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 8019f8e:	682b      	ldr	r3, [r5, #0]
 8019f90:	3301      	adds	r3, #1
 8019f92:	602b      	str	r3, [r5, #0]
 8019f94:	e7f3      	b.n	8019f7e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 8019f96:	b005      	add	sp, #20
 8019f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 8019f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fa0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	f04f 0801 	mov.w	r8, #1
 8019fa8:	2000      	movs	r0, #0
 8019faa:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8019fae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8019fb2:	8008      	strh	r0, [r1, #0]
 8019fb4:	7010      	strb	r0, [r2, #0]
 8019fb6:	7018      	strb	r0, [r3, #0]
 8019fb8:	f88c 0000 	strb.w	r0, [ip]
 8019fbc:	f88e 0000 	strb.w	r0, [lr]
 8019fc0:	7030      	strb	r0, [r6, #0]
 8019fc2:	6820      	ldr	r0, [r4, #0]
 8019fc4:	8800      	ldrh	r0, [r0, #0]
 8019fc6:	b190      	cbz	r0, 8019fee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8019fc8:	282b      	cmp	r0, #43	; 0x2b
 8019fca:	d001      	beq.n	8019fd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8019fcc:	2820      	cmp	r0, #32
 8019fce:	d104      	bne.n	8019fda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 8019fd0:	8008      	strh	r0, [r1, #0]
 8019fd2:	6820      	ldr	r0, [r4, #0]
 8019fd4:	3002      	adds	r0, #2
 8019fd6:	6020      	str	r0, [r4, #0]
 8019fd8:	e7f3      	b.n	8019fc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8019fda:	282d      	cmp	r0, #45	; 0x2d
 8019fdc:	d102      	bne.n	8019fe4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 8019fde:	f882 8000 	strb.w	r8, [r2]
 8019fe2:	e7f6      	b.n	8019fd2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8019fe4:	2823      	cmp	r0, #35	; 0x23
 8019fe6:	d102      	bne.n	8019fee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8019fe8:	f883 8000 	strb.w	r8, [r3]
 8019fec:	e7f1      	b.n	8019fd2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8019fee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019ff2:	2b09      	cmp	r3, #9
 8019ff4:	d901      	bls.n	8019ffa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 8019ff6:	282a      	cmp	r0, #42	; 0x2a
 8019ff8:	d114      	bne.n	801a024 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8019ffa:	2201      	movs	r2, #1
 8019ffc:	f88e 2000 	strb.w	r2, [lr]
 801a000:	6823      	ldr	r3, [r4, #0]
 801a002:	8819      	ldrh	r1, [r3, #0]
 801a004:	2930      	cmp	r1, #48	; 0x30
 801a006:	bf02      	ittt	eq
 801a008:	3302      	addeq	r3, #2
 801a00a:	6023      	streq	r3, [r4, #0]
 801a00c:	f88c 2000 	strbeq.w	r2, [ip]
 801a010:	6820      	ldr	r0, [r4, #0]
 801a012:	8803      	ldrh	r3, [r0, #0]
 801a014:	2b2a      	cmp	r3, #42	; 0x2a
 801a016:	d11e      	bne.n	801a056 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801a018:	f04f 33ff 	mov.w	r3, #4294967295
 801a01c:	603b      	str	r3, [r7, #0]
 801a01e:	6823      	ldr	r3, [r4, #0]
 801a020:	3302      	adds	r3, #2
 801a022:	6023      	str	r3, [r4, #0]
 801a024:	6823      	ldr	r3, [r4, #0]
 801a026:	881b      	ldrh	r3, [r3, #0]
 801a028:	2b2e      	cmp	r3, #46	; 0x2e
 801a02a:	d112      	bne.n	801a052 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801a02c:	2301      	movs	r3, #1
 801a02e:	7033      	strb	r3, [r6, #0]
 801a030:	6823      	ldr	r3, [r4, #0]
 801a032:	1c98      	adds	r0, r3, #2
 801a034:	6020      	str	r0, [r4, #0]
 801a036:	885b      	ldrh	r3, [r3, #2]
 801a038:	2b2a      	cmp	r3, #42	; 0x2a
 801a03a:	d117      	bne.n	801a06c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801a03c:	f04f 33ff 	mov.w	r3, #4294967295
 801a040:	602b      	str	r3, [r5, #0]
 801a042:	6823      	ldr	r3, [r4, #0]
 801a044:	3302      	adds	r3, #2
 801a046:	6023      	str	r3, [r4, #0]
 801a048:	682b      	ldr	r3, [r5, #0]
 801a04a:	2b06      	cmp	r3, #6
 801a04c:	bfa8      	it	ge
 801a04e:	2306      	movge	r3, #6
 801a050:	602b      	str	r3, [r5, #0]
 801a052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a056:	f7ff fee2 	bl	8019e1e <_ZN8touchgfx7Unicode4atoiEPKt>
 801a05a:	6038      	str	r0, [r7, #0]
 801a05c:	6823      	ldr	r3, [r4, #0]
 801a05e:	881a      	ldrh	r2, [r3, #0]
 801a060:	3a30      	subs	r2, #48	; 0x30
 801a062:	2a09      	cmp	r2, #9
 801a064:	d8de      	bhi.n	801a024 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801a066:	3302      	adds	r3, #2
 801a068:	6023      	str	r3, [r4, #0]
 801a06a:	e7f7      	b.n	801a05c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801a06c:	f7ff fed7 	bl	8019e1e <_ZN8touchgfx7Unicode4atoiEPKt>
 801a070:	6028      	str	r0, [r5, #0]
 801a072:	6823      	ldr	r3, [r4, #0]
 801a074:	881a      	ldrh	r2, [r3, #0]
 801a076:	3a30      	subs	r2, #48	; 0x30
 801a078:	2a09      	cmp	r2, #9
 801a07a:	d8e5      	bhi.n	801a048 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801a07c:	3302      	adds	r3, #2
 801a07e:	6023      	str	r3, [r4, #0]
 801a080:	e7f7      	b.n	801a072 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801a082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801a082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a086:	b0a2      	sub	sp, #136	; 0x88
 801a088:	2500      	movs	r5, #0
 801a08a:	4606      	mov	r6, r0
 801a08c:	460f      	mov	r7, r1
 801a08e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801a092:	9209      	str	r2, [sp, #36]	; 0x24
 801a094:	4629      	mov	r1, r5
 801a096:	2242      	movs	r2, #66	; 0x42
 801a098:	4640      	mov	r0, r8
 801a09a:	461c      	mov	r4, r3
 801a09c:	950d      	str	r5, [sp, #52]	; 0x34
 801a09e:	f7fe fe26 	bl	8018cee <_ZN8touchgfx6memsetEPvhm>
 801a0a2:	b30e      	cbz	r6, 801a0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0a6:	b1f3      	cbz	r3, 801a0e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801a0a8:	f107 3aff 	add.w	sl, r7, #4294967295
 801a0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0b0:	8812      	ldrh	r2, [r2, #0]
 801a0b2:	2a00      	cmp	r2, #0
 801a0b4:	f000 80b3 	beq.w	801a21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801a0b8:	459a      	cmp	sl, r3
 801a0ba:	f340 80b0 	ble.w	801a21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801a0be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0c4:	f8b9 2000 	ldrh.w	r2, [r9]
 801a0c8:	2a00      	cmp	r2, #0
 801a0ca:	d0ef      	beq.n	801a0ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a0cc:	2a25      	cmp	r2, #37	; 0x25
 801a0ce:	f000 80aa 	beq.w	801a226 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801a0d2:	459a      	cmp	sl, r3
 801a0d4:	ddea      	ble.n	801a0ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a0d6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a0da:	f109 0202 	add.w	r2, r9, #2
 801a0de:	3301      	adds	r3, #1
 801a0e0:	9209      	str	r2, [sp, #36]	; 0x24
 801a0e2:	930d      	str	r3, [sp, #52]	; 0x34
 801a0e4:	e7eb      	b.n	801a0be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801a0e6:	8033      	strh	r3, [r6, #0]
 801a0e8:	4630      	mov	r0, r6
 801a0ea:	b022      	add	sp, #136	; 0x88
 801a0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0f0:	3b63      	subs	r3, #99	; 0x63
 801a0f2:	2b01      	cmp	r3, #1
 801a0f4:	f200 80df 	bhi.w	801a2b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801a0f8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801a0fc:	8813      	ldrh	r3, [r2, #0]
 801a0fe:	2b69      	cmp	r3, #105	; 0x69
 801a100:	d058      	beq.n	801a1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801a102:	d81b      	bhi.n	801a13c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801a104:	2b63      	cmp	r3, #99	; 0x63
 801a106:	d02e      	beq.n	801a166 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801a108:	2b64      	cmp	r3, #100	; 0x64
 801a10a:	d053      	beq.n	801a1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801a10c:	2b58      	cmp	r3, #88	; 0x58
 801a10e:	d06f      	beq.n	801a1f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801a110:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801a114:	46a1      	mov	r9, r4
 801a116:	e02d      	b.n	801a174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a118:	2b73      	cmp	r3, #115	; 0x73
 801a11a:	d0ed      	beq.n	801a0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a11c:	d803      	bhi.n	801a126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801a11e:	2b6f      	cmp	r3, #111	; 0x6f
 801a120:	f040 80c9 	bne.w	801a2b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801a124:	e7e8      	b.n	801a0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a126:	2b75      	cmp	r3, #117	; 0x75
 801a128:	d0e6      	beq.n	801a0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a12a:	2b78      	cmp	r3, #120	; 0x78
 801a12c:	e7f8      	b.n	801a120 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801a12e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a130:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a136:	3302      	adds	r3, #2
 801a138:	9309      	str	r3, [sp, #36]	; 0x24
 801a13a:	e7b7      	b.n	801a0ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a13c:	2b73      	cmp	r3, #115	; 0x73
 801a13e:	d034      	beq.n	801a1aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801a140:	d807      	bhi.n	801a152 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801a142:	2b6f      	cmp	r3, #111	; 0x6f
 801a144:	d1e4      	bne.n	801a110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801a146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a148:	f104 0904 	add.w	r9, r4, #4
 801a14c:	2308      	movs	r3, #8
 801a14e:	1aba      	subs	r2, r7, r2
 801a150:	e048      	b.n	801a1e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801a152:	2b75      	cmp	r3, #117	; 0x75
 801a154:	d041      	beq.n	801a1da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801a156:	2b78      	cmp	r3, #120	; 0x78
 801a158:	d1da      	bne.n	801a110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801a15a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a15c:	f104 0904 	add.w	r9, r4, #4
 801a160:	2310      	movs	r3, #16
 801a162:	1aba      	subs	r2, r7, r2
 801a164:	e03e      	b.n	801a1e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801a166:	7823      	ldrb	r3, [r4, #0]
 801a168:	f104 0904 	add.w	r9, r4, #4
 801a16c:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801a170:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801a174:	aa0d      	add	r2, sp, #52	; 0x34
 801a176:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801a17a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801a17e:	a810      	add	r0, sp, #64	; 0x40
 801a180:	9205      	str	r2, [sp, #20]
 801a182:	464c      	mov	r4, r9
 801a184:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801a188:	9204      	str	r2, [sp, #16]
 801a18a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a18c:	9203      	str	r2, [sp, #12]
 801a18e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801a192:	9202      	str	r2, [sp, #8]
 801a194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a196:	9201      	str	r2, [sp, #4]
 801a198:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801a19c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801a1a0:	9200      	str	r2, [sp, #0]
 801a1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1a4:	f7ff fe4a 	bl	8019e3c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801a1a8:	e7c4      	b.n	801a134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801a1aa:	f104 0904 	add.w	r9, r4, #4
 801a1ae:	6823      	ldr	r3, [r4, #0]
 801a1b0:	9310      	str	r3, [sp, #64]	; 0x40
 801a1b2:	e7df      	b.n	801a174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a1b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a1b6:	230a      	movs	r3, #10
 801a1b8:	4641      	mov	r1, r8
 801a1ba:	6820      	ldr	r0, [r4, #0]
 801a1bc:	1aba      	subs	r2, r7, r2
 801a1be:	f104 0904 	add.w	r9, r4, #4
 801a1c2:	b292      	uxth	r2, r2
 801a1c4:	f7ff fdf9 	bl	8019dba <_ZN8touchgfx7Unicode4itoaElPtti>
 801a1c8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a1cc:	2b2d      	cmp	r3, #45	; 0x2d
 801a1ce:	d1d1      	bne.n	801a174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a1d0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a1d6:	3302      	adds	r3, #2
 801a1d8:	e7ea      	b.n	801a1b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801a1da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a1dc:	f104 0904 	add.w	r9, r4, #4
 801a1e0:	230a      	movs	r3, #10
 801a1e2:	1aba      	subs	r2, r7, r2
 801a1e4:	b292      	uxth	r2, r2
 801a1e6:	4641      	mov	r1, r8
 801a1e8:	6820      	ldr	r0, [r4, #0]
 801a1ea:	f7ff fdc8 	bl	8019d7e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a1ee:	e7c1      	b.n	801a174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a1f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a1f2:	2310      	movs	r3, #16
 801a1f4:	4641      	mov	r1, r8
 801a1f6:	6820      	ldr	r0, [r4, #0]
 801a1f8:	1aba      	subs	r2, r7, r2
 801a1fa:	f104 0904 	add.w	r9, r4, #4
 801a1fe:	b292      	uxth	r2, r2
 801a200:	f7ff fdbd 	bl	8019d7e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a204:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801a208:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d0b1      	beq.n	801a174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a210:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801a214:	2919      	cmp	r1, #25
 801a216:	d8f7      	bhi.n	801a208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801a218:	3b20      	subs	r3, #32
 801a21a:	8013      	strh	r3, [r2, #0]
 801a21c:	e7f4      	b.n	801a208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801a21e:	2200      	movs	r2, #0
 801a220:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a224:	e760      	b.n	801a0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801a226:	459a      	cmp	sl, r3
 801a228:	f77f af40 	ble.w	801a0ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a22c:	f109 0302 	add.w	r3, r9, #2
 801a230:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801a234:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801a238:	a809      	add	r0, sp, #36	; 0x24
 801a23a:	9309      	str	r3, [sp, #36]	; 0x24
 801a23c:	ab0f      	add	r3, sp, #60	; 0x3c
 801a23e:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801a242:	9304      	str	r3, [sp, #16]
 801a244:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801a248:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801a24c:	9303      	str	r3, [sp, #12]
 801a24e:	ab0e      	add	r3, sp, #56	; 0x38
 801a250:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801a254:	9302      	str	r3, [sp, #8]
 801a256:	ab0c      	add	r3, sp, #48	; 0x30
 801a258:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801a25c:	9301      	str	r3, [sp, #4]
 801a25e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801a262:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801a266:	9300      	str	r3, [sp, #0]
 801a268:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801a26c:	950e      	str	r5, [sp, #56]	; 0x38
 801a26e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801a272:	950f      	str	r5, [sp, #60]	; 0x3c
 801a274:	f7ff fe92 	bl	8019f9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801a278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	bfbf      	itttt	lt
 801a280:	6823      	ldrlt	r3, [r4, #0]
 801a282:	3404      	addlt	r4, #4
 801a284:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a288:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	bfbf      	itttt	lt
 801a290:	6823      	ldrlt	r3, [r4, #0]
 801a292:	3404      	addlt	r4, #4
 801a294:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a298:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801a29a:	8813      	ldrh	r3, [r2, #0]
 801a29c:	2b69      	cmp	r3, #105	; 0x69
 801a29e:	f43f af2b 	beq.w	801a0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a2a2:	f63f af39 	bhi.w	801a118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801a2a6:	2b58      	cmp	r3, #88	; 0x58
 801a2a8:	f43f af26 	beq.w	801a0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a2ac:	f63f af20 	bhi.w	801a0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801a2b0:	2b25      	cmp	r3, #37	; 0x25
 801a2b2:	f43f af3c 	beq.w	801a12e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801a2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a2bc:	f8b9 2000 	ldrh.w	r2, [r9]
 801a2c0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a2c4:	3301      	adds	r3, #1
 801a2c6:	930d      	str	r3, [sp, #52]	; 0x34
 801a2c8:	e734      	b.n	801a134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801a2cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ce:	4605      	mov	r5, r0
 801a2d0:	b0a1      	sub	sp, #132	; 0x84
 801a2d2:	4610      	mov	r0, r2
 801a2d4:	460e      	mov	r6, r1
 801a2d6:	4614      	mov	r4, r2
 801a2d8:	461f      	mov	r7, r3
 801a2da:	f7ff fd33 	bl	8019d44 <_ZN8touchgfx7Unicode6strlenEPKc>
 801a2de:	283f      	cmp	r0, #63	; 0x3f
 801a2e0:	d906      	bls.n	801a2f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801a2e2:	4b0a      	ldr	r3, [pc, #40]	; (801a30c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801a2e4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801a2e8:	4a09      	ldr	r2, [pc, #36]	; (801a310 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801a2ea:	480a      	ldr	r0, [pc, #40]	; (801a314 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801a2ec:	f009 ffac 	bl	8024248 <__assert_func>
 801a2f0:	4621      	mov	r1, r4
 801a2f2:	2240      	movs	r2, #64	; 0x40
 801a2f4:	4668      	mov	r0, sp
 801a2f6:	f7ff fd31 	bl	8019d5c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a2fa:	463b      	mov	r3, r7
 801a2fc:	466a      	mov	r2, sp
 801a2fe:	4631      	mov	r1, r6
 801a300:	4628      	mov	r0, r5
 801a302:	f7ff febe 	bl	801a082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801a306:	b021      	add	sp, #132	; 0x84
 801a308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a30a:	bf00      	nop
 801a30c:	08028591 	.word	0x08028591
 801a310:	08028663 	.word	0x08028663
 801a314:	080285ae 	.word	0x080285ae

0801a318 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a318:	b40c      	push	{r2, r3}
 801a31a:	b507      	push	{r0, r1, r2, lr}
 801a31c:	ab04      	add	r3, sp, #16
 801a31e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a322:	9301      	str	r3, [sp, #4]
 801a324:	f7ff ffd2 	bl	801a2cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a328:	b003      	add	sp, #12
 801a32a:	f85d eb04 	ldr.w	lr, [sp], #4
 801a32e:	b002      	add	sp, #8
 801a330:	4770      	bx	lr
	...

0801a334 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a338:	b0c3      	sub	sp, #268	; 0x10c
 801a33a:	2400      	movs	r4, #0
 801a33c:	4606      	mov	r6, r0
 801a33e:	4689      	mov	r9, r1
 801a340:	af10      	add	r7, sp, #64	; 0x40
 801a342:	9209      	str	r2, [sp, #36]	; 0x24
 801a344:	4621      	mov	r1, r4
 801a346:	22c8      	movs	r2, #200	; 0xc8
 801a348:	4638      	mov	r0, r7
 801a34a:	469a      	mov	sl, r3
 801a34c:	940c      	str	r4, [sp, #48]	; 0x30
 801a34e:	f7fe fcce 	bl	8018cee <_ZN8touchgfx6memsetEPvhm>
 801a352:	b116      	cbz	r6, 801a35a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801a354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a356:	b923      	cbnz	r3, 801a362 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801a358:	8033      	strh	r3, [r6, #0]
 801a35a:	4630      	mov	r0, r6
 801a35c:	b043      	add	sp, #268	; 0x10c
 801a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a362:	f109 3bff 	add.w	fp, r9, #4294967295
 801a366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a36a:	8812      	ldrh	r2, [r2, #0]
 801a36c:	2a00      	cmp	r2, #0
 801a36e:	f000 80d1 	beq.w	801a514 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801a372:	459b      	cmp	fp, r3
 801a374:	f340 80ce 	ble.w	801a514 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801a378:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a37a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a37c:	882a      	ldrh	r2, [r5, #0]
 801a37e:	2a00      	cmp	r2, #0
 801a380:	d0f1      	beq.n	801a366 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a382:	2a25      	cmp	r2, #37	; 0x25
 801a384:	f000 80ca 	beq.w	801a51c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801a388:	459b      	cmp	fp, r3
 801a38a:	ddec      	ble.n	801a366 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a38c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a390:	3502      	adds	r5, #2
 801a392:	3301      	adds	r3, #1
 801a394:	9509      	str	r5, [sp, #36]	; 0x24
 801a396:	930c      	str	r3, [sp, #48]	; 0x30
 801a398:	e7ee      	b.n	801a378 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801a39a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a39e:	3202      	adds	r2, #2
 801a3a0:	920c      	str	r2, [sp, #48]	; 0x30
 801a3a2:	e0ac      	b.n	801a4fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801a3a4:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a3a8:	970f      	str	r7, [sp, #60]	; 0x3c
 801a3aa:	3401      	adds	r4, #1
 801a3ac:	edd3 7a00 	vldr	s15, [r3]
 801a3b0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801a3b4:	b923      	cbnz	r3, 801a3c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801a3b6:	2301      	movs	r3, #1
 801a3b8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801a3bc:	2303      	movs	r3, #3
 801a3be:	930e      	str	r3, [sp, #56]	; 0x38
 801a3c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a3c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a3c6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801a3ca:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801a5c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801a3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3d2:	bf42      	ittt	mi
 801a3d4:	232d      	movmi	r3, #45	; 0x2d
 801a3d6:	eef1 7a67 	vnegmi.f32	s15, s15
 801a3da:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801a3de:	2300      	movs	r3, #0
 801a3e0:	4298      	cmp	r0, r3
 801a3e2:	dd03      	ble.n	801a3ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801a3e4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a3e8:	3301      	adds	r3, #1
 801a3ea:	e7f9      	b.n	801a3e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801a3ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a3f4:	eeb0 7a67 	vmov.f32	s14, s15
 801a3f8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a400:	da26      	bge.n	801a450 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801a402:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a406:	eba9 0202 	sub.w	r2, r9, r2
 801a40a:	2100      	movs	r1, #0
 801a40c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801a410:	b28d      	uxth	r5, r1
 801a412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a416:	db21      	blt.n	801a45c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a418:	1a53      	subs	r3, r2, r1
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	dd1e      	ble.n	801a45c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a41e:	2963      	cmp	r1, #99	; 0x63
 801a420:	d01b      	beq.n	801a45a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801a422:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a426:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a42a:	ee17 3a10 	vmov	r3, s14
 801a42e:	2b09      	cmp	r3, #9
 801a430:	bfa8      	it	ge
 801a432:	2309      	movge	r3, #9
 801a434:	ee07 3a10 	vmov	s14, r3
 801a438:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801a43c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a440:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801a444:	3101      	adds	r1, #1
 801a446:	eee7 7a66 	vfms.f32	s15, s14, s13
 801a44a:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801a44e:	e7dd      	b.n	801a40c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801a450:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a454:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a458:	e7ce      	b.n	801a3f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801a45a:	460d      	mov	r5, r1
 801a45c:	2a63      	cmp	r2, #99	; 0x63
 801a45e:	bfd4      	ite	le
 801a460:	ebc5 0202 	rsble	r2, r5, r2
 801a464:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801a468:	2a00      	cmp	r2, #0
 801a46a:	dd4e      	ble.n	801a50a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801a46c:	4603      	mov	r3, r0
 801a46e:	f04f 0801 	mov.w	r8, #1
 801a472:	2b00      	cmp	r3, #0
 801a474:	dd0e      	ble.n	801a494 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801a476:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a47a:	210a      	movs	r1, #10
 801a47c:	3b01      	subs	r3, #1
 801a47e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a482:	ee17 ca10 	vmov	ip, s14
 801a486:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a48a:	fb01 c808 	mla	r8, r1, r8, ip
 801a48e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a492:	e7ee      	b.n	801a472 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801a494:	2800      	cmp	r0, #0
 801a496:	f100 33ff 	add.w	r3, r0, #4294967295
 801a49a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801a49e:	bfac      	ite	ge
 801a4a0:	1a18      	subge	r0, r3, r0
 801a4a2:	4618      	movlt	r0, r3
 801a4a4:	b292      	uxth	r2, r2
 801a4a6:	230a      	movs	r3, #10
 801a4a8:	900e      	str	r0, [sp, #56]	; 0x38
 801a4aa:	1979      	adds	r1, r7, r5
 801a4ac:	4640      	mov	r0, r8
 801a4ae:	f7ff fc84 	bl	8019dba <_ZN8touchgfx7Unicode4itoaElPtti>
 801a4b2:	f1b8 0f01 	cmp.w	r8, #1
 801a4b6:	dc26      	bgt.n	801a506 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801a4b8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	bf0c      	ite	eq
 801a4c0:	2300      	moveq	r3, #0
 801a4c2:	232e      	movne	r3, #46	; 0x2e
 801a4c4:	aa42      	add	r2, sp, #264	; 0x108
 801a4c6:	4415      	add	r5, r2
 801a4c8:	aa0c      	add	r2, sp, #48	; 0x30
 801a4ca:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801a4ce:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a4d2:	a80f      	add	r0, sp, #60	; 0x3c
 801a4d4:	9205      	str	r2, [sp, #20]
 801a4d6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801a4da:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801a4de:	9204      	str	r2, [sp, #16]
 801a4e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4e2:	9203      	str	r2, [sp, #12]
 801a4e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801a4e8:	9202      	str	r2, [sp, #8]
 801a4ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4ec:	9201      	str	r2, [sp, #4]
 801a4ee:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801a4f2:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801a4f6:	9200      	str	r2, [sp, #0]
 801a4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4fa:	f7ff fc9f 	bl	8019e3c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801a4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a500:	3302      	adds	r3, #2
 801a502:	9309      	str	r3, [sp, #36]	; 0x24
 801a504:	e72f      	b.n	801a366 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a506:	232e      	movs	r3, #46	; 0x2e
 801a508:	e7dc      	b.n	801a4c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801a50a:	ab42      	add	r3, sp, #264	; 0x108
 801a50c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801a510:	2300      	movs	r3, #0
 801a512:	e7d9      	b.n	801a4c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801a514:	2200      	movs	r2, #0
 801a516:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a51a:	e71e      	b.n	801a35a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801a51c:	459b      	cmp	fp, r3
 801a51e:	f77f af22 	ble.w	801a366 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a522:	2300      	movs	r3, #0
 801a524:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801a528:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801a52c:	a809      	add	r0, sp, #36	; 0x24
 801a52e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a53a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a53e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a542:	930d      	str	r3, [sp, #52]	; 0x34
 801a544:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801a548:	930e      	str	r3, [sp, #56]	; 0x38
 801a54a:	1cab      	adds	r3, r5, #2
 801a54c:	9309      	str	r3, [sp, #36]	; 0x24
 801a54e:	ab0e      	add	r3, sp, #56	; 0x38
 801a550:	9304      	str	r3, [sp, #16]
 801a552:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801a556:	9303      	str	r3, [sp, #12]
 801a558:	ab0d      	add	r3, sp, #52	; 0x34
 801a55a:	9302      	str	r3, [sp, #8]
 801a55c:	ab0b      	add	r3, sp, #44	; 0x2c
 801a55e:	9301      	str	r3, [sp, #4]
 801a560:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801a564:	9300      	str	r3, [sp, #0]
 801a566:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801a56a:	f7ff fd17 	bl	8019f9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801a56e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a570:	2b00      	cmp	r3, #0
 801a572:	da0b      	bge.n	801a58c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801a574:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a578:	3401      	adds	r4, #1
 801a57a:	edd3 7a00 	vldr	s15, [r3]
 801a57e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a582:	ee17 3a90 	vmov	r3, s15
 801a586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a58a:	930d      	str	r3, [sp, #52]	; 0x34
 801a58c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a58e:	2b00      	cmp	r3, #0
 801a590:	da0b      	bge.n	801a5aa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801a592:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a596:	3401      	adds	r4, #1
 801a598:	edd3 7a00 	vldr	s15, [r3]
 801a59c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a5a0:	ee17 3a90 	vmov	r3, s15
 801a5a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a5a8:	930e      	str	r3, [sp, #56]	; 0x38
 801a5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5ae:	881b      	ldrh	r3, [r3, #0]
 801a5b0:	2b25      	cmp	r3, #37	; 0x25
 801a5b2:	f43f aef2 	beq.w	801a39a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801a5b6:	2b66      	cmp	r3, #102	; 0x66
 801a5b8:	f43f aef4 	beq.w	801a3a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801a5bc:	9509      	str	r5, [sp, #36]	; 0x24
 801a5be:	882b      	ldrh	r3, [r5, #0]
 801a5c0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a5c4:	3201      	adds	r2, #1
 801a5c6:	e6eb      	b.n	801a3a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801a5c8:	3f000002 	.word	0x3f000002

0801a5cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5ce:	4605      	mov	r5, r0
 801a5d0:	b0a1      	sub	sp, #132	; 0x84
 801a5d2:	4610      	mov	r0, r2
 801a5d4:	460e      	mov	r6, r1
 801a5d6:	4614      	mov	r4, r2
 801a5d8:	461f      	mov	r7, r3
 801a5da:	f7ff fbb3 	bl	8019d44 <_ZN8touchgfx7Unicode6strlenEPKc>
 801a5de:	283f      	cmp	r0, #63	; 0x3f
 801a5e0:	d906      	bls.n	801a5f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801a5e2:	4b0a      	ldr	r3, [pc, #40]	; (801a60c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801a5e4:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801a5e8:	4a09      	ldr	r2, [pc, #36]	; (801a610 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801a5ea:	480a      	ldr	r0, [pc, #40]	; (801a614 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801a5ec:	f009 fe2c 	bl	8024248 <__assert_func>
 801a5f0:	4621      	mov	r1, r4
 801a5f2:	2240      	movs	r2, #64	; 0x40
 801a5f4:	4668      	mov	r0, sp
 801a5f6:	f7ff fbb1 	bl	8019d5c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a5fa:	463b      	mov	r3, r7
 801a5fc:	466a      	mov	r2, sp
 801a5fe:	4631      	mov	r1, r6
 801a600:	4628      	mov	r0, r5
 801a602:	f7ff fe97 	bl	801a334 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801a606:	b021      	add	sp, #132	; 0x84
 801a608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a60a:	bf00      	nop
 801a60c:	08028591 	.word	0x08028591
 801a610:	080285d4 	.word	0x080285d4
 801a614:	080285ae 	.word	0x080285ae

0801a618 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a618:	4b01      	ldr	r3, [pc, #4]	; (801a620 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a61a:	6018      	str	r0, [r3, #0]
 801a61c:	4770      	bx	lr
 801a61e:	bf00      	nop
 801a620:	2000bd18 	.word	0x2000bd18

0801a624 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a624:	4b07      	ldr	r3, [pc, #28]	; (801a644 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801a626:	881a      	ldrh	r2, [r3, #0]
 801a628:	4282      	cmp	r2, r0
 801a62a:	d809      	bhi.n	801a640 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a62c:	4b06      	ldr	r3, [pc, #24]	; (801a648 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801a62e:	881b      	ldrh	r3, [r3, #0]
 801a630:	4413      	add	r3, r2
 801a632:	4298      	cmp	r0, r3
 801a634:	da04      	bge.n	801a640 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a636:	4b05      	ldr	r3, [pc, #20]	; (801a64c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a63e:	4770      	bx	lr
 801a640:	2000      	movs	r0, #0
 801a642:	4770      	bx	lr
 801a644:	2000bd38 	.word	0x2000bd38
 801a648:	2000bd3c 	.word	0x2000bd3c
 801a64c:	2000bd1c 	.word	0x2000bd1c

0801a650 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a654:	4d26      	ldr	r5, [pc, #152]	; (801a6f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a656:	682b      	ldr	r3, [r5, #0]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d046      	beq.n	801a6ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801a65c:	4a25      	ldr	r2, [pc, #148]	; (801a6f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a65e:	4f26      	ldr	r7, [pc, #152]	; (801a6f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a660:	8810      	ldrh	r0, [r2, #0]
 801a662:	883c      	ldrh	r4, [r7, #0]
 801a664:	4e25      	ldr	r6, [pc, #148]	; (801a6fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a666:	4420      	add	r0, r4
 801a668:	1c42      	adds	r2, r0, #1
 801a66a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801a66e:	f022 0201 	bic.w	r2, r2, #1
 801a672:	0412      	lsls	r2, r2, #16
 801a674:	0c12      	lsrs	r2, r2, #16
 801a676:	0051      	lsls	r1, r2, #1
 801a678:	220e      	movs	r2, #14
 801a67a:	eb08 0e01 	add.w	lr, r8, r1
 801a67e:	fb02 fc04 	mul.w	ip, r2, r4
 801a682:	eb03 0208 	add.w	r2, r3, r8
 801a686:	4c1e      	ldr	r4, [pc, #120]	; (801a700 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a688:	6022      	str	r2, [r4, #0]
 801a68a:	eb03 020e 	add.w	r2, r3, lr
 801a68e:	44e6      	add	lr, ip
 801a690:	6032      	str	r2, [r6, #0]
 801a692:	4473      	add	r3, lr
 801a694:	4a1b      	ldr	r2, [pc, #108]	; (801a704 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a696:	6013      	str	r3, [r2, #0]
 801a698:	2300      	movs	r3, #0
 801a69a:	4a1b      	ldr	r2, [pc, #108]	; (801a708 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a69c:	8013      	strh	r3, [r2, #0]
 801a69e:	4a1b      	ldr	r2, [pc, #108]	; (801a70c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801a6a0:	6812      	ldr	r2, [r2, #0]
 801a6a2:	eba2 0208 	sub.w	r2, r2, r8
 801a6a6:	1a52      	subs	r2, r2, r1
 801a6a8:	4919      	ldr	r1, [pc, #100]	; (801a710 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801a6aa:	eba2 020c 	sub.w	r2, r2, ip
 801a6ae:	469c      	mov	ip, r3
 801a6b0:	600a      	str	r2, [r1, #0]
 801a6b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a6b6:	4a17      	ldr	r2, [pc, #92]	; (801a714 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801a6b8:	8013      	strh	r3, [r2, #0]
 801a6ba:	4283      	cmp	r3, r0
 801a6bc:	d10d      	bne.n	801a6da <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801a6be:	883d      	ldrh	r5, [r7, #0]
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	6830      	ldr	r0, [r6, #0]
 801a6c4:	240e      	movs	r4, #14
 801a6c6:	429d      	cmp	r5, r3
 801a6c8:	d90f      	bls.n	801a6ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801a6ca:	fb04 0203 	mla	r2, r4, r3, r0
 801a6ce:	3301      	adds	r3, #1
 801a6d0:	7b11      	ldrb	r1, [r2, #12]
 801a6d2:	f36f 1145 	bfc	r1, #5, #1
 801a6d6:	7311      	strb	r1, [r2, #12]
 801a6d8:	e7f5      	b.n	801a6c6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801a6da:	682a      	ldr	r2, [r5, #0]
 801a6dc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a6e0:	6822      	ldr	r2, [r4, #0]
 801a6e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	e7e7      	b.n	801a6ba <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801a6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6ee:	bf00      	nop
 801a6f0:	2000bd1c 	.word	0x2000bd1c
 801a6f4:	2000bd38 	.word	0x2000bd38
 801a6f8:	2000bd3c 	.word	0x2000bd3c
 801a6fc:	2000bd20 	.word	0x2000bd20
 801a700:	2000bd30 	.word	0x2000bd30
 801a704:	2000bd28 	.word	0x2000bd28
 801a708:	2000bd3a 	.word	0x2000bd3a
 801a70c:	2000bd24 	.word	0x2000bd24
 801a710:	2000bd34 	.word	0x2000bd34
 801a714:	2000bd2c 	.word	0x2000bd2c

0801a718 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a718:	4b10      	ldr	r3, [pc, #64]	; (801a75c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801a71a:	b510      	push	{r4, lr}
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	b9db      	cbnz	r3, 801a758 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801a720:	b1d1      	cbz	r1, 801a758 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801a722:	4b0f      	ldr	r3, [pc, #60]	; (801a760 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801a724:	240e      	movs	r4, #14
 801a726:	801a      	strh	r2, [r3, #0]
 801a728:	b292      	uxth	r2, r2
 801a72a:	4b0e      	ldr	r3, [pc, #56]	; (801a764 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801a72c:	881b      	ldrh	r3, [r3, #0]
 801a72e:	4413      	add	r3, r2
 801a730:	4362      	muls	r2, r4
 801a732:	2406      	movs	r4, #6
 801a734:	fb04 2203 	mla	r2, r4, r3, r2
 801a738:	428a      	cmp	r2, r1
 801a73a:	d305      	bcc.n	801a748 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801a73c:	4b0a      	ldr	r3, [pc, #40]	; (801a768 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801a73e:	2137      	movs	r1, #55	; 0x37
 801a740:	4a0a      	ldr	r2, [pc, #40]	; (801a76c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801a742:	480b      	ldr	r0, [pc, #44]	; (801a770 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801a744:	f009 fd80 	bl	8024248 <__assert_func>
 801a748:	4b0a      	ldr	r3, [pc, #40]	; (801a774 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801a74a:	6019      	str	r1, [r3, #0]
 801a74c:	4b0a      	ldr	r3, [pc, #40]	; (801a778 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801a74e:	6018      	str	r0, [r3, #0]
 801a750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a754:	f7ff bf7c 	b.w	801a650 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a758:	bd10      	pop	{r4, pc}
 801a75a:	bf00      	nop
 801a75c:	2000bd28 	.word	0x2000bd28
 801a760:	2000bd3c 	.word	0x2000bd3c
 801a764:	2000bd38 	.word	0x2000bd38
 801a768:	08028745 	.word	0x08028745
 801a76c:	0802879e 	.word	0x0802879e
 801a770:	08028720 	.word	0x08028720
 801a774:	2000bd24 	.word	0x2000bd24
 801a778:	2000bd1c 	.word	0x2000bd1c

0801a77c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a77c:	b470      	push	{r4, r5, r6}
 801a77e:	4c07      	ldr	r4, [pc, #28]	; (801a79c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a780:	4605      	mov	r5, r0
 801a782:	4610      	mov	r0, r2
 801a784:	9a03      	ldr	r2, [sp, #12]
 801a786:	6826      	ldr	r6, [r4, #0]
 801a788:	b936      	cbnz	r6, 801a798 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a78a:	6025      	str	r5, [r4, #0]
 801a78c:	4c04      	ldr	r4, [pc, #16]	; (801a7a0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a78e:	8021      	strh	r1, [r4, #0]
 801a790:	4619      	mov	r1, r3
 801a792:	bc70      	pop	{r4, r5, r6}
 801a794:	f7ff bfc0 	b.w	801a718 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a798:	bc70      	pop	{r4, r5, r6}
 801a79a:	4770      	bx	lr
 801a79c:	2000bd40 	.word	0x2000bd40
 801a7a0:	2000bd38 	.word	0x2000bd38

0801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a7a4:	b508      	push	{r3, lr}
 801a7a6:	4b14      	ldr	r3, [pc, #80]	; (801a7f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a7a8:	6819      	ldr	r1, [r3, #0]
 801a7aa:	b931      	cbnz	r1, 801a7ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801a7ac:	4b13      	ldr	r3, [pc, #76]	; (801a7fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a7ae:	f240 21e6 	movw	r1, #742	; 0x2e6
 801a7b2:	4a13      	ldr	r2, [pc, #76]	; (801a800 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a7b4:	4813      	ldr	r0, [pc, #76]	; (801a804 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a7b6:	f009 fd47 	bl	8024248 <__assert_func>
 801a7ba:	4a13      	ldr	r2, [pc, #76]	; (801a808 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a7bc:	8803      	ldrh	r3, [r0, #0]
 801a7be:	8812      	ldrh	r2, [r2, #0]
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d204      	bcs.n	801a7ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801a7c4:	2214      	movs	r2, #20
 801a7c6:	fb02 1303 	mla	r3, r2, r3, r1
 801a7ca:	8918      	ldrh	r0, [r3, #8]
 801a7cc:	bd08      	pop	{r3, pc}
 801a7ce:	490f      	ldr	r1, [pc, #60]	; (801a80c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801a7d0:	8809      	ldrh	r1, [r1, #0]
 801a7d2:	4411      	add	r1, r2
 801a7d4:	428b      	cmp	r3, r1
 801a7d6:	da06      	bge.n	801a7e6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801a7d8:	1a9b      	subs	r3, r3, r2
 801a7da:	4a0d      	ldr	r2, [pc, #52]	; (801a810 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801a7dc:	210e      	movs	r1, #14
 801a7de:	6812      	ldr	r2, [r2, #0]
 801a7e0:	fb01 2303 	mla	r3, r1, r3, r2
 801a7e4:	e7f1      	b.n	801a7ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801a7e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a7ea:	4293      	cmp	r3, r2
 801a7ec:	bf0a      	itet	eq
 801a7ee:	4b09      	ldreq	r3, [pc, #36]	; (801a814 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801a7f0:	2000      	movne	r0, #0
 801a7f2:	8818      	ldrheq	r0, [r3, #0]
 801a7f4:	e7ea      	b.n	801a7cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801a7f6:	bf00      	nop
 801a7f8:	2000bd40 	.word	0x2000bd40
 801a7fc:	080266f8 	.word	0x080266f8
 801a800:	0802884b 	.word	0x0802884b
 801a804:	08028720 	.word	0x08028720
 801a808:	2000bd38 	.word	0x2000bd38
 801a80c:	2000bd3c 	.word	0x2000bd3c
 801a810:	2000bd20 	.word	0x2000bd20
 801a814:	2000bc6c 	.word	0x2000bc6c

0801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a818:	b508      	push	{r3, lr}
 801a81a:	4b14      	ldr	r3, [pc, #80]	; (801a86c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a81c:	6819      	ldr	r1, [r3, #0]
 801a81e:	b931      	cbnz	r1, 801a82e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801a820:	4b13      	ldr	r3, [pc, #76]	; (801a870 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a822:	f240 21fa 	movw	r1, #762	; 0x2fa
 801a826:	4a13      	ldr	r2, [pc, #76]	; (801a874 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a828:	4813      	ldr	r0, [pc, #76]	; (801a878 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a82a:	f009 fd0d 	bl	8024248 <__assert_func>
 801a82e:	4a13      	ldr	r2, [pc, #76]	; (801a87c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a830:	8803      	ldrh	r3, [r0, #0]
 801a832:	8812      	ldrh	r2, [r2, #0]
 801a834:	4293      	cmp	r3, r2
 801a836:	d204      	bcs.n	801a842 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801a838:	2214      	movs	r2, #20
 801a83a:	fb02 1303 	mla	r3, r2, r3, r1
 801a83e:	8958      	ldrh	r0, [r3, #10]
 801a840:	bd08      	pop	{r3, pc}
 801a842:	490f      	ldr	r1, [pc, #60]	; (801a880 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801a844:	8809      	ldrh	r1, [r1, #0]
 801a846:	4411      	add	r1, r2
 801a848:	428b      	cmp	r3, r1
 801a84a:	da06      	bge.n	801a85a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801a84c:	1a9b      	subs	r3, r3, r2
 801a84e:	4a0d      	ldr	r2, [pc, #52]	; (801a884 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801a850:	210e      	movs	r1, #14
 801a852:	6812      	ldr	r2, [r2, #0]
 801a854:	fb01 2303 	mla	r3, r1, r3, r2
 801a858:	e7f1      	b.n	801a83e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801a85a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a85e:	4293      	cmp	r3, r2
 801a860:	bf0a      	itet	eq
 801a862:	4b09      	ldreq	r3, [pc, #36]	; (801a888 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801a864:	2000      	movne	r0, #0
 801a866:	8818      	ldrheq	r0, [r3, #0]
 801a868:	e7ea      	b.n	801a840 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801a86a:	bf00      	nop
 801a86c:	2000bd40 	.word	0x2000bd40
 801a870:	080266f8 	.word	0x080266f8
 801a874:	08028877 	.word	0x08028877
 801a878:	08028720 	.word	0x08028720
 801a87c:	2000bd38 	.word	0x2000bd38
 801a880:	2000bd3c 	.word	0x2000bd3c
 801a884:	2000bd20 	.word	0x2000bd20
 801a888:	2000bc6e 	.word	0x2000bc6e

0801a88c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a88c:	4b23      	ldr	r3, [pc, #140]	; (801a91c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a88e:	b510      	push	{r4, lr}
 801a890:	681c      	ldr	r4, [r3, #0]
 801a892:	b934      	cbnz	r4, 801a8a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801a894:	4b22      	ldr	r3, [pc, #136]	; (801a920 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a896:	f240 310e 	movw	r1, #782	; 0x30e
 801a89a:	4a22      	ldr	r2, [pc, #136]	; (801a924 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801a89c:	4822      	ldr	r0, [pc, #136]	; (801a928 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801a89e:	f009 fcd3 	bl	8024248 <__assert_func>
 801a8a2:	4a22      	ldr	r2, [pc, #136]	; (801a92c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801a8a4:	880b      	ldrh	r3, [r1, #0]
 801a8a6:	8812      	ldrh	r2, [r2, #0]
 801a8a8:	4293      	cmp	r3, r2
 801a8aa:	d211      	bcs.n	801a8d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801a8ac:	2214      	movs	r2, #20
 801a8ae:	fb02 4303 	mla	r3, r2, r3, r4
 801a8b2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a8b6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a8ba:	8a1a      	ldrh	r2, [r3, #16]
 801a8bc:	8a5b      	ldrh	r3, [r3, #18]
 801a8be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a8c2:	8004      	strh	r4, [r0, #0]
 801a8c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a8c8:	8041      	strh	r1, [r0, #2]
 801a8ca:	8082      	strh	r2, [r0, #4]
 801a8cc:	80c3      	strh	r3, [r0, #6]
 801a8ce:	e00e      	b.n	801a8ee <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801a8d0:	4917      	ldr	r1, [pc, #92]	; (801a930 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801a8d2:	8809      	ldrh	r1, [r1, #0]
 801a8d4:	4411      	add	r1, r2
 801a8d6:	428b      	cmp	r3, r1
 801a8d8:	da0a      	bge.n	801a8f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801a8da:	1a9b      	subs	r3, r3, r2
 801a8dc:	4a15      	ldr	r2, [pc, #84]	; (801a934 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801a8de:	210e      	movs	r1, #14
 801a8e0:	6812      	ldr	r2, [r2, #0]
 801a8e2:	fb01 2303 	mla	r3, r1, r3, r2
 801a8e6:	681a      	ldr	r2, [r3, #0]
 801a8e8:	6002      	str	r2, [r0, #0]
 801a8ea:	685a      	ldr	r2, [r3, #4]
 801a8ec:	6042      	str	r2, [r0, #4]
 801a8ee:	bd10      	pop	{r4, pc}
 801a8f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	d10b      	bne.n	801a910 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801a8f8:	4b0f      	ldr	r3, [pc, #60]	; (801a938 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801a8fa:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a8fe:	4b0f      	ldr	r3, [pc, #60]	; (801a93c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801a900:	8081      	strh	r1, [r0, #4]
 801a902:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a906:	2300      	movs	r3, #0
 801a908:	80c2      	strh	r2, [r0, #6]
 801a90a:	8003      	strh	r3, [r0, #0]
 801a90c:	8043      	strh	r3, [r0, #2]
 801a90e:	e7ee      	b.n	801a8ee <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801a910:	2300      	movs	r3, #0
 801a912:	8003      	strh	r3, [r0, #0]
 801a914:	8043      	strh	r3, [r0, #2]
 801a916:	8083      	strh	r3, [r0, #4]
 801a918:	e7d8      	b.n	801a8cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801a91a:	bf00      	nop
 801a91c:	2000bd40 	.word	0x2000bd40
 801a920:	080266f8 	.word	0x080266f8
 801a924:	080287e4 	.word	0x080287e4
 801a928:	08028720 	.word	0x08028720
 801a92c:	2000bd38 	.word	0x2000bd38
 801a930:	2000bd3c 	.word	0x2000bd3c
 801a934:	2000bd20 	.word	0x2000bd20
 801a938:	2000bc6c 	.word	0x2000bc6c
 801a93c:	2000bc6e 	.word	0x2000bc6e

0801a940 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801a940:	4b18      	ldr	r3, [pc, #96]	; (801a9a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	b34b      	cbz	r3, 801a99a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801a946:	4a18      	ldr	r2, [pc, #96]	; (801a9a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801a948:	8800      	ldrh	r0, [r0, #0]
 801a94a:	8812      	ldrh	r2, [r2, #0]
 801a94c:	4290      	cmp	r0, r2
 801a94e:	d211      	bcs.n	801a974 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801a950:	2214      	movs	r2, #20
 801a952:	fb02 3300 	mla	r3, r2, r0, r3
 801a956:	8a1a      	ldrh	r2, [r3, #16]
 801a958:	8919      	ldrh	r1, [r3, #8]
 801a95a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a95e:	428a      	cmp	r2, r1
 801a960:	db1d      	blt.n	801a99e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801a962:	8a58      	ldrh	r0, [r3, #18]
 801a964:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a968:	895b      	ldrh	r3, [r3, #10]
 801a96a:	4298      	cmp	r0, r3
 801a96c:	bfac      	ite	ge
 801a96e:	2000      	movge	r0, #0
 801a970:	2001      	movlt	r0, #1
 801a972:	4770      	bx	lr
 801a974:	4b0d      	ldr	r3, [pc, #52]	; (801a9ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801a976:	881b      	ldrh	r3, [r3, #0]
 801a978:	4413      	add	r3, r2
 801a97a:	4298      	cmp	r0, r3
 801a97c:	da0d      	bge.n	801a99a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801a97e:	4b0c      	ldr	r3, [pc, #48]	; (801a9b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801a980:	1a80      	subs	r0, r0, r2
 801a982:	220e      	movs	r2, #14
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	fb02 3300 	mla	r3, r2, r0, r3
 801a98a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801a98e:	891a      	ldrh	r2, [r3, #8]
 801a990:	4291      	cmp	r1, r2
 801a992:	db04      	blt.n	801a99e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801a994:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a998:	e7e6      	b.n	801a968 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801a99a:	2000      	movs	r0, #0
 801a99c:	4770      	bx	lr
 801a99e:	2001      	movs	r0, #1
 801a9a0:	4770      	bx	lr
 801a9a2:	bf00      	nop
 801a9a4:	2000bd40 	.word	0x2000bd40
 801a9a8:	2000bd38 	.word	0x2000bd38
 801a9ac:	2000bd3c 	.word	0x2000bd3c
 801a9b0:	2000bd20 	.word	0x2000bd20

0801a9b4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a9b4:	b508      	push	{r3, lr}
 801a9b6:	4b12      	ldr	r3, [pc, #72]	; (801aa00 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a9b8:	6819      	ldr	r1, [r3, #0]
 801a9ba:	b931      	cbnz	r1, 801a9ca <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a9bc:	4b11      	ldr	r3, [pc, #68]	; (801aa04 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a9be:	f240 3132 	movw	r1, #818	; 0x332
 801a9c2:	4a11      	ldr	r2, [pc, #68]	; (801aa08 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a9c4:	4811      	ldr	r0, [pc, #68]	; (801aa0c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a9c6:	f009 fc3f 	bl	8024248 <__assert_func>
 801a9ca:	8803      	ldrh	r3, [r0, #0]
 801a9cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a9d0:	4293      	cmp	r3, r2
 801a9d2:	d012      	beq.n	801a9fa <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a9d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a9d8:	4293      	cmp	r3, r2
 801a9da:	d103      	bne.n	801a9e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801a9dc:	4b0c      	ldr	r3, [pc, #48]	; (801aa10 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a9e2:	bd08      	pop	{r3, pc}
 801a9e4:	4a0b      	ldr	r2, [pc, #44]	; (801aa14 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801a9e6:	6812      	ldr	r2, [r2, #0]
 801a9e8:	b11a      	cbz	r2, 801a9f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801a9ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a9ee:	2800      	cmp	r0, #0
 801a9f0:	d1f7      	bne.n	801a9e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801a9f2:	2214      	movs	r2, #20
 801a9f4:	4353      	muls	r3, r2
 801a9f6:	58c8      	ldr	r0, [r1, r3]
 801a9f8:	e7f3      	b.n	801a9e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	e7f1      	b.n	801a9e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801a9fe:	bf00      	nop
 801aa00:	2000bd40 	.word	0x2000bd40
 801aa04:	080266f8 	.word	0x080266f8
 801aa08:	0802881a 	.word	0x0802881a
 801aa0c:	08028720 	.word	0x08028720
 801aa10:	2000bc78 	.word	0x2000bc78
 801aa14:	2000bd1c 	.word	0x2000bd1c

0801aa18 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801aa18:	8802      	ldrh	r2, [r0, #0]
 801aa1a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801aa1e:	429a      	cmp	r2, r3
 801aa20:	d840      	bhi.n	801aaa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801aa22:	4b21      	ldr	r3, [pc, #132]	; (801aaa8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801aa24:	881b      	ldrh	r3, [r3, #0]
 801aa26:	429a      	cmp	r2, r3
 801aa28:	d220      	bcs.n	801aa6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801aa2a:	4b20      	ldr	r3, [pc, #128]	; (801aaac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801aa2c:	6819      	ldr	r1, [r3, #0]
 801aa2e:	2314      	movs	r3, #20
 801aa30:	fb03 1302 	mla	r3, r3, r2, r1
 801aa34:	6858      	ldr	r0, [r3, #4]
 801aa36:	2800      	cmp	r0, #0
 801aa38:	d035      	beq.n	801aaa6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801aa3a:	491d      	ldr	r1, [pc, #116]	; (801aab0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801aa3c:	6809      	ldr	r1, [r1, #0]
 801aa3e:	2900      	cmp	r1, #0
 801aa40:	d031      	beq.n	801aaa6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801aa42:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aa46:	b371      	cbz	r1, 801aaa6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801aa48:	895a      	ldrh	r2, [r3, #10]
 801aa4a:	8918      	ldrh	r0, [r3, #8]
 801aa4c:	4350      	muls	r0, r2
 801aa4e:	7c5a      	ldrb	r2, [r3, #17]
 801aa50:	7cdb      	ldrb	r3, [r3, #19]
 801aa52:	0952      	lsrs	r2, r2, #5
 801aa54:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801aa58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801aa5c:	2b0b      	cmp	r3, #11
 801aa5e:	bf18      	it	ne
 801aa60:	0040      	lslne	r0, r0, #1
 801aa62:	3003      	adds	r0, #3
 801aa64:	f020 0003 	bic.w	r0, r0, #3
 801aa68:	4408      	add	r0, r1
 801aa6a:	4770      	bx	lr
 801aa6c:	4911      	ldr	r1, [pc, #68]	; (801aab4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801aa6e:	8809      	ldrh	r1, [r1, #0]
 801aa70:	4419      	add	r1, r3
 801aa72:	428a      	cmp	r2, r1
 801aa74:	da16      	bge.n	801aaa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801aa76:	4910      	ldr	r1, [pc, #64]	; (801aab8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801aa78:	1ad3      	subs	r3, r2, r3
 801aa7a:	200e      	movs	r0, #14
 801aa7c:	6809      	ldr	r1, [r1, #0]
 801aa7e:	fb00 1303 	mla	r3, r0, r3, r1
 801aa82:	7b19      	ldrb	r1, [r3, #12]
 801aa84:	f001 011f 	and.w	r1, r1, #31
 801aa88:	290b      	cmp	r1, #11
 801aa8a:	d10b      	bne.n	801aaa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801aa8c:	8919      	ldrh	r1, [r3, #8]
 801aa8e:	8958      	ldrh	r0, [r3, #10]
 801aa90:	4b07      	ldr	r3, [pc, #28]	; (801aab0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801aa92:	4348      	muls	r0, r1
 801aa94:	6819      	ldr	r1, [r3, #0]
 801aa96:	3003      	adds	r0, #3
 801aa98:	f020 0303 	bic.w	r3, r0, #3
 801aa9c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801aaa0:	4418      	add	r0, r3
 801aaa2:	4770      	bx	lr
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	4770      	bx	lr
 801aaa8:	2000bd38 	.word	0x2000bd38
 801aaac:	2000bd40 	.word	0x2000bd40
 801aab0:	2000bd1c 	.word	0x2000bd1c
 801aab4:	2000bd3c 	.word	0x2000bd3c
 801aab8:	2000bd20 	.word	0x2000bd20

0801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801aabc:	4b19      	ldr	r3, [pc, #100]	; (801ab24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801aabe:	6819      	ldr	r1, [r3, #0]
 801aac0:	8803      	ldrh	r3, [r0, #0]
 801aac2:	b1e9      	cbz	r1, 801ab00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801aac4:	4a18      	ldr	r2, [pc, #96]	; (801ab28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801aac6:	8812      	ldrh	r2, [r2, #0]
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d90a      	bls.n	801aae2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801aacc:	2214      	movs	r2, #20
 801aace:	fb02 1303 	mla	r3, r2, r3, r1
 801aad2:	7c58      	ldrb	r0, [r3, #17]
 801aad4:	0942      	lsrs	r2, r0, #5
 801aad6:	7cd8      	ldrb	r0, [r3, #19]
 801aad8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801aadc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801aae0:	4770      	bx	lr
 801aae2:	4912      	ldr	r1, [pc, #72]	; (801ab2c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801aae4:	8809      	ldrh	r1, [r1, #0]
 801aae6:	4411      	add	r1, r2
 801aae8:	428b      	cmp	r3, r1
 801aaea:	da09      	bge.n	801ab00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801aaec:	1a9b      	subs	r3, r3, r2
 801aaee:	4a10      	ldr	r2, [pc, #64]	; (801ab30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801aaf0:	210e      	movs	r1, #14
 801aaf2:	6812      	ldr	r2, [r2, #0]
 801aaf4:	fb01 2303 	mla	r3, r1, r3, r2
 801aaf8:	7b18      	ldrb	r0, [r3, #12]
 801aafa:	f000 001f 	and.w	r0, r0, #31
 801aafe:	4770      	bx	lr
 801ab00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ab04:	4293      	cmp	r3, r2
 801ab06:	d10a      	bne.n	801ab1e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801ab08:	4b0a      	ldr	r3, [pc, #40]	; (801ab34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ab10:	b10a      	cbz	r2, 801ab16 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801ab12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ab14:	b900      	cbnz	r0, 801ab18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ab16:	6898      	ldr	r0, [r3, #8]
 801ab18:	6803      	ldr	r3, [r0, #0]
 801ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab1c:	4718      	bx	r3
 801ab1e:	2000      	movs	r0, #0
 801ab20:	4770      	bx	lr
 801ab22:	bf00      	nop
 801ab24:	2000bd40 	.word	0x2000bd40
 801ab28:	2000bd38 	.word	0x2000bd38
 801ab2c:	2000bd3c 	.word	0x2000bd3c
 801ab30:	2000bd20 	.word	0x2000bd20
 801ab34:	2000bc78 	.word	0x2000bc78

0801ab38 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801ab38:	2018      	movs	r0, #24
 801ab3a:	4770      	bx	lr

0801ab3c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801ab3c:	2001      	movs	r0, #1
 801ab3e:	4770      	bx	lr

0801ab40 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801ab40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ab44:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801ab48:	4770      	bx	lr

0801ab4a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801ab4a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801ab4e:	4770      	bx	lr

0801ab50 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801ab50:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801ab54:	4770      	bx	lr

0801ab56 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801ab56:	b2c8      	uxtb	r0, r1
 801ab58:	4770      	bx	lr

0801ab5a <_ZN8touchgfx8LCD24bpp4initEv>:
 801ab5a:	4770      	bx	lr

0801ab5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab60:	b085      	sub	sp, #20
 801ab62:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ab64:	9203      	str	r2, [sp, #12]
 801ab66:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ab6a:	6878      	ldr	r0, [r7, #4]
 801ab6c:	9201      	str	r2, [sp, #4]
 801ab6e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801ab70:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801ab74:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801ab78:	fa1f fc84 	uxth.w	ip, r4
 801ab7c:	43e4      	mvns	r4, r4
 801ab7e:	9100      	str	r1, [sp, #0]
 801ab80:	b2e4      	uxtb	r4, r4
 801ab82:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ab86:	fb00 2505 	mla	r5, r0, r5, r2
 801ab8a:	683a      	ldr	r2, [r7, #0]
 801ab8c:	6877      	ldr	r7, [r6, #4]
 801ab8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab92:	3704      	adds	r7, #4
 801ab94:	4415      	add	r5, r2
 801ab96:	6832      	ldr	r2, [r6, #0]
 801ab98:	9202      	str	r2, [sp, #8]
 801ab9a:	9a00      	ldr	r2, [sp, #0]
 801ab9c:	2a00      	cmp	r2, #0
 801ab9e:	dc03      	bgt.n	801aba8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801aba0:	9a03      	ldr	r2, [sp, #12]
 801aba2:	2a00      	cmp	r2, #0
 801aba4:	f340 8116 	ble.w	801add4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801aba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801abaa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801abae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801abb0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	dd0f      	ble.n	801abd8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801abb8:	1406      	asrs	r6, r0, #16
 801abba:	d406      	bmi.n	801abca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801abbc:	4546      	cmp	r6, r8
 801abbe:	da04      	bge.n	801abca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801abc0:	1416      	asrs	r6, r2, #16
 801abc2:	d402      	bmi.n	801abca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801abc4:	9901      	ldr	r1, [sp, #4]
 801abc6:	428e      	cmp	r6, r1
 801abc8:	db07      	blt.n	801abda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801abca:	9911      	ldr	r1, [sp, #68]	; 0x44
 801abcc:	3b01      	subs	r3, #1
 801abce:	3503      	adds	r5, #3
 801abd0:	4408      	add	r0, r1
 801abd2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801abd4:	440a      	add	r2, r1
 801abd6:	e7ed      	b.n	801abb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801abd8:	d011      	beq.n	801abfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801abda:	1e5e      	subs	r6, r3, #1
 801abdc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801abde:	fb01 0e06 	mla	lr, r1, r6, r0
 801abe2:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801abe6:	d548      	bpl.n	801ac7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801abe8:	4699      	mov	r9, r3
 801abea:	462e      	mov	r6, r5
 801abec:	f1b9 0f00 	cmp.w	r9, #0
 801abf0:	f300 809e 	bgt.w	801ad30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801abf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abfc:	441d      	add	r5, r3
 801abfe:	9b00      	ldr	r3, [sp, #0]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	f340 80e7 	ble.w	801add4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ac06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ac0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ac10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ac14:	eef0 6a62 	vmov.f32	s13, s5
 801ac18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ac24:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ac28:	eef0 6a43 	vmov.f32	s13, s6
 801ac2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ac30:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ac34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac38:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac4c:	ee12 2a90 	vmov	r2, s5
 801ac50:	eef0 2a47 	vmov.f32	s5, s14
 801ac54:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac58:	ee13 2a10 	vmov	r2, s6
 801ac5c:	9311      	str	r3, [sp, #68]	; 0x44
 801ac5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac60:	eeb0 3a67 	vmov.f32	s6, s15
 801ac64:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac68:	9312      	str	r3, [sp, #72]	; 0x48
 801ac6a:	9b00      	ldr	r3, [sp, #0]
 801ac6c:	9a03      	ldr	r2, [sp, #12]
 801ac6e:	3b01      	subs	r3, #1
 801ac70:	9300      	str	r3, [sp, #0]
 801ac72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac74:	bf08      	it	eq
 801ac76:	4613      	moveq	r3, r2
 801ac78:	e78f      	b.n	801ab9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801ac7a:	45c6      	cmp	lr, r8
 801ac7c:	dab4      	bge.n	801abe8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801ac7e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ac80:	fb01 2606 	mla	r6, r1, r6, r2
 801ac84:	1436      	asrs	r6, r6, #16
 801ac86:	d4af      	bmi.n	801abe8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801ac88:	9901      	ldr	r1, [sp, #4]
 801ac8a:	428e      	cmp	r6, r1
 801ac8c:	daac      	bge.n	801abe8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801ac8e:	1cee      	adds	r6, r5, #3
 801ac90:	4699      	mov	r9, r3
 801ac92:	f1b9 0f00 	cmp.w	r9, #0
 801ac96:	f106 0603 	add.w	r6, r6, #3
 801ac9a:	ddab      	ble.n	801abf4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801ac9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801aca0:	9902      	ldr	r1, [sp, #8]
 801aca2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801aca6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801acaa:	fb08 1e0e 	mla	lr, r8, lr, r1
 801acae:	9911      	ldr	r1, [sp, #68]	; 0x44
 801acb0:	fb1b fb04 	smulbb	fp, fp, r4
 801acb4:	f109 39ff 	add.w	r9, r9, #4294967295
 801acb8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801acbc:	4408      	add	r0, r1
 801acbe:	9912      	ldr	r1, [sp, #72]	; 0x48
 801acc0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801acc4:	440a      	add	r2, r1
 801acc6:	eb07 0a0e 	add.w	sl, r7, lr
 801acca:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801acce:	fb0e be0c 	mla	lr, lr, ip, fp
 801acd2:	fa1f fe8e 	uxth.w	lr, lr
 801acd6:	f10e 0b01 	add.w	fp, lr, #1
 801acda:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801acde:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ace2:	fb1b fb04 	smulbb	fp, fp, r4
 801ace6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801acea:	f806 ec06 	strb.w	lr, [r6, #-6]
 801acee:	f89a e001 	ldrb.w	lr, [sl, #1]
 801acf2:	fb0e be0c 	mla	lr, lr, ip, fp
 801acf6:	fa1f fe8e 	uxth.w	lr, lr
 801acfa:	f10e 0b01 	add.w	fp, lr, #1
 801acfe:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ad02:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ad06:	f806 ec05 	strb.w	lr, [r6, #-5]
 801ad0a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ad0e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ad12:	fb1a fa04 	smulbb	sl, sl, r4
 801ad16:	fb0e ae0c 	mla	lr, lr, ip, sl
 801ad1a:	fa1f fe8e 	uxth.w	lr, lr
 801ad1e:	f10e 0a01 	add.w	sl, lr, #1
 801ad22:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ad26:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ad2a:	f806 ec04 	strb.w	lr, [r6, #-4]
 801ad2e:	e7b0      	b.n	801ac92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ad30:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ad34:	d446      	bmi.n	801adc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ad36:	45c2      	cmp	sl, r8
 801ad38:	da44      	bge.n	801adc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ad3a:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801ad3e:	d441      	bmi.n	801adc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ad40:	9901      	ldr	r1, [sp, #4]
 801ad42:	458e      	cmp	lr, r1
 801ad44:	da3e      	bge.n	801adc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ad46:	9902      	ldr	r1, [sp, #8]
 801ad48:	f896 b000 	ldrb.w	fp, [r6]
 801ad4c:	fb08 1e0e 	mla	lr, r8, lr, r1
 801ad50:	fb1b fb04 	smulbb	fp, fp, r4
 801ad54:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801ad58:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ad5c:	eb07 0a0e 	add.w	sl, r7, lr
 801ad60:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ad64:	fb0e be0c 	mla	lr, lr, ip, fp
 801ad68:	fa1f fe8e 	uxth.w	lr, lr
 801ad6c:	f10e 0b01 	add.w	fp, lr, #1
 801ad70:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ad74:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ad78:	fb1b fb04 	smulbb	fp, fp, r4
 801ad7c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ad80:	f886 e000 	strb.w	lr, [r6]
 801ad84:	f89a e001 	ldrb.w	lr, [sl, #1]
 801ad88:	fb0e be0c 	mla	lr, lr, ip, fp
 801ad8c:	fa1f fe8e 	uxth.w	lr, lr
 801ad90:	f10e 0b01 	add.w	fp, lr, #1
 801ad94:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ad98:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ad9c:	f886 e001 	strb.w	lr, [r6, #1]
 801ada0:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ada4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ada8:	fb1a fa04 	smulbb	sl, sl, r4
 801adac:	fb0e ae0c 	mla	lr, lr, ip, sl
 801adb0:	fa1f fe8e 	uxth.w	lr, lr
 801adb4:	f10e 0a01 	add.w	sl, lr, #1
 801adb8:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801adbc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801adc0:	f886 e002 	strb.w	lr, [r6, #2]
 801adc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801adc6:	3603      	adds	r6, #3
 801adc8:	f109 39ff 	add.w	r9, r9, #4294967295
 801adcc:	4408      	add	r0, r1
 801adce:	9912      	ldr	r1, [sp, #72]	; 0x48
 801add0:	440a      	add	r2, r1
 801add2:	e70b      	b.n	801abec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801add4:	b005      	add	sp, #20
 801add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801adda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801adda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adde:	b085      	sub	sp, #20
 801ade0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ade4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ade6:	9203      	str	r2, [sp, #12]
 801ade8:	6870      	ldr	r0, [r6, #4]
 801adea:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801adec:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801adf0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801adf4:	9101      	str	r1, [sp, #4]
 801adf6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801adfa:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801adfe:	fb00 2404 	mla	r4, r0, r4, r2
 801ae02:	6832      	ldr	r2, [r6, #0]
 801ae04:	686e      	ldr	r6, [r5, #4]
 801ae06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ae0a:	3604      	adds	r6, #4
 801ae0c:	4414      	add	r4, r2
 801ae0e:	682a      	ldr	r2, [r5, #0]
 801ae10:	9202      	str	r2, [sp, #8]
 801ae12:	9a01      	ldr	r2, [sp, #4]
 801ae14:	2a00      	cmp	r2, #0
 801ae16:	dc03      	bgt.n	801ae20 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801ae18:	9a03      	ldr	r2, [sp, #12]
 801ae1a:	2a00      	cmp	r2, #0
 801ae1c:	f340 80b2 	ble.w	801af84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801ae20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae22:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ae26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	dd0c      	ble.n	801ae4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ae30:	1405      	asrs	r5, r0, #16
 801ae32:	d405      	bmi.n	801ae40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ae34:	4575      	cmp	r5, lr
 801ae36:	da03      	bge.n	801ae40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ae38:	1415      	asrs	r5, r2, #16
 801ae3a:	d401      	bmi.n	801ae40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ae3c:	4545      	cmp	r5, r8
 801ae3e:	db05      	blt.n	801ae4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ae40:	4460      	add	r0, ip
 801ae42:	443a      	add	r2, r7
 801ae44:	3b01      	subs	r3, #1
 801ae46:	3403      	adds	r4, #3
 801ae48:	e7f0      	b.n	801ae2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801ae4a:	d03d      	beq.n	801aec8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801ae4c:	1e5d      	subs	r5, r3, #1
 801ae4e:	fb0c 0905 	mla	r9, ip, r5, r0
 801ae52:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ae56:	d42c      	bmi.n	801aeb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ae58:	45f1      	cmp	r9, lr
 801ae5a:	da2a      	bge.n	801aeb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ae5c:	fb07 2505 	mla	r5, r7, r5, r2
 801ae60:	142d      	asrs	r5, r5, #16
 801ae62:	d426      	bmi.n	801aeb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ae64:	4545      	cmp	r5, r8
 801ae66:	da24      	bge.n	801aeb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ae68:	1ce5      	adds	r5, r4, #3
 801ae6a:	469a      	mov	sl, r3
 801ae6c:	f1ba 0f00 	cmp.w	sl, #0
 801ae70:	f105 0503 	add.w	r5, r5, #3
 801ae74:	dd23      	ble.n	801aebe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ae76:	ea4f 4922 	mov.w	r9, r2, asr #16
 801ae7a:	9902      	ldr	r1, [sp, #8]
 801ae7c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801ae80:	443a      	add	r2, r7
 801ae82:	fb0e 1909 	mla	r9, lr, r9, r1
 801ae86:	4460      	add	r0, ip
 801ae88:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ae8c:	f819 900b 	ldrb.w	r9, [r9, fp]
 801ae90:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ae94:	eb06 0b09 	add.w	fp, r6, r9
 801ae98:	f816 9009 	ldrb.w	r9, [r6, r9]
 801ae9c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801aea0:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801aea4:	f805 9c05 	strb.w	r9, [r5, #-5]
 801aea8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801aeac:	f805 9c04 	strb.w	r9, [r5, #-4]
 801aeb0:	e7dc      	b.n	801ae6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801aeb2:	2500      	movs	r5, #0
 801aeb4:	eba3 0905 	sub.w	r9, r3, r5
 801aeb8:	f1b9 0f00 	cmp.w	r9, #0
 801aebc:	dc3c      	bgt.n	801af38 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801aebe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aec2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aec6:	441c      	add	r4, r3
 801aec8:	9b01      	ldr	r3, [sp, #4]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	dd5a      	ble.n	801af84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801aece:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aed4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aed8:	eeb0 6a62 	vmov.f32	s12, s5
 801aedc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aee0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aee4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aee8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aeec:	eeb0 6a43 	vmov.f32	s12, s6
 801aef0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aef4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801aef8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aefc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af00:	ee77 2a62 	vsub.f32	s5, s14, s5
 801af04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801af08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801af0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801af10:	ee12 2a90 	vmov	r2, s5
 801af14:	eef0 2a47 	vmov.f32	s5, s14
 801af18:	fb92 fcf3 	sdiv	ip, r2, r3
 801af1c:	ee13 2a10 	vmov	r2, s6
 801af20:	eeb0 3a67 	vmov.f32	s6, s15
 801af24:	fb92 f7f3 	sdiv	r7, r2, r3
 801af28:	9b01      	ldr	r3, [sp, #4]
 801af2a:	9a03      	ldr	r2, [sp, #12]
 801af2c:	3b01      	subs	r3, #1
 801af2e:	9301      	str	r3, [sp, #4]
 801af30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af32:	bf08      	it	eq
 801af34:	4613      	moveq	r3, r2
 801af36:	e76c      	b.n	801ae12 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801af38:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801af3c:	d41e      	bmi.n	801af7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801af3e:	45f2      	cmp	sl, lr
 801af40:	da1c      	bge.n	801af7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801af42:	ea5f 4922 	movs.w	r9, r2, asr #16
 801af46:	d419      	bmi.n	801af7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801af48:	45c1      	cmp	r9, r8
 801af4a:	da17      	bge.n	801af7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801af4c:	9902      	ldr	r1, [sp, #8]
 801af4e:	fb0e 1909 	mla	r9, lr, r9, r1
 801af52:	f819 900a 	ldrb.w	r9, [r9, sl]
 801af56:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801af5a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801af5e:	eb06 0a09 	add.w	sl, r6, r9
 801af62:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801af66:	f804 b009 	strb.w	fp, [r4, r9]
 801af6a:	44a1      	add	r9, r4
 801af6c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801af70:	f889 b001 	strb.w	fp, [r9, #1]
 801af74:	f89a a002 	ldrb.w	sl, [sl, #2]
 801af78:	f889 a002 	strb.w	sl, [r9, #2]
 801af7c:	4460      	add	r0, ip
 801af7e:	443a      	add	r2, r7
 801af80:	3501      	adds	r5, #1
 801af82:	e797      	b.n	801aeb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801af84:	b005      	add	sp, #20
 801af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801af8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af8e:	b087      	sub	sp, #28
 801af90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801af94:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801af96:	9204      	str	r2, [sp, #16]
 801af98:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801af9c:	6870      	ldr	r0, [r6, #4]
 801af9e:	9205      	str	r2, [sp, #20]
 801afa0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801afa2:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801afa6:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801afaa:	9101      	str	r1, [sp, #4]
 801afac:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801afb0:	fb00 2505 	mla	r5, r0, r5, r2
 801afb4:	6832      	ldr	r2, [r6, #0]
 801afb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801afba:	4415      	add	r5, r2
 801afbc:	6822      	ldr	r2, [r4, #0]
 801afbe:	9202      	str	r2, [sp, #8]
 801afc0:	6862      	ldr	r2, [r4, #4]
 801afc2:	3204      	adds	r2, #4
 801afc4:	9203      	str	r2, [sp, #12]
 801afc6:	9a01      	ldr	r2, [sp, #4]
 801afc8:	2a00      	cmp	r2, #0
 801afca:	dc03      	bgt.n	801afd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801afcc:	9a04      	ldr	r2, [sp, #16]
 801afce:	2a00      	cmp	r2, #0
 801afd0:	f340 8124 	ble.w	801b21c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801afd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801afd6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801afda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801afdc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	dd0e      	ble.n	801b002 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801afe4:	1422      	asrs	r2, r4, #16
 801afe6:	d405      	bmi.n	801aff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801afe8:	4572      	cmp	r2, lr
 801afea:	da03      	bge.n	801aff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801afec:	1402      	asrs	r2, r0, #16
 801afee:	d401      	bmi.n	801aff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801aff0:	4542      	cmp	r2, r8
 801aff2:	db07      	blt.n	801b004 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801aff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aff6:	3b01      	subs	r3, #1
 801aff8:	3503      	adds	r5, #3
 801affa:	4414      	add	r4, r2
 801affc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801affe:	4410      	add	r0, r2
 801b000:	e7ee      	b.n	801afe0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801b002:	d010      	beq.n	801b026 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b004:	1e5a      	subs	r2, r3, #1
 801b006:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b008:	fb06 4602 	mla	r6, r6, r2, r4
 801b00c:	1436      	asrs	r6, r6, #16
 801b00e:	d546      	bpl.n	801b09e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801b010:	4699      	mov	r9, r3
 801b012:	462f      	mov	r7, r5
 801b014:	f1b9 0f00 	cmp.w	r9, #0
 801b018:	f300 80a5 	bgt.w	801b166 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801b01c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b020:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b024:	441d      	add	r5, r3
 801b026:	9b01      	ldr	r3, [sp, #4]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	f340 80f7 	ble.w	801b21c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b02e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b034:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b038:	eeb0 6a62 	vmov.f32	s12, s5
 801b03c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b040:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b044:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b048:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b04c:	eeb0 6a43 	vmov.f32	s12, s6
 801b050:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b054:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b058:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b05c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b060:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b064:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b068:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b06c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b070:	ee12 2a90 	vmov	r2, s5
 801b074:	eef0 2a47 	vmov.f32	s5, s14
 801b078:	fb92 f3f3 	sdiv	r3, r2, r3
 801b07c:	ee13 2a10 	vmov	r2, s6
 801b080:	9313      	str	r3, [sp, #76]	; 0x4c
 801b082:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b084:	eeb0 3a67 	vmov.f32	s6, s15
 801b088:	fb92 f3f3 	sdiv	r3, r2, r3
 801b08c:	9314      	str	r3, [sp, #80]	; 0x50
 801b08e:	9b01      	ldr	r3, [sp, #4]
 801b090:	9a04      	ldr	r2, [sp, #16]
 801b092:	3b01      	subs	r3, #1
 801b094:	9301      	str	r3, [sp, #4]
 801b096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b098:	bf08      	it	eq
 801b09a:	4613      	moveq	r3, r2
 801b09c:	e793      	b.n	801afc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b09e:	4576      	cmp	r6, lr
 801b0a0:	dab6      	bge.n	801b010 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b0a2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b0a4:	fb06 0202 	mla	r2, r6, r2, r0
 801b0a8:	1412      	asrs	r2, r2, #16
 801b0aa:	d4b1      	bmi.n	801b010 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b0ac:	4542      	cmp	r2, r8
 801b0ae:	daaf      	bge.n	801b010 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b0b0:	1cef      	adds	r7, r5, #3
 801b0b2:	4699      	mov	r9, r3
 801b0b4:	f1b9 0f00 	cmp.w	r9, #0
 801b0b8:	ddb0      	ble.n	801b01c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b0ba:	9902      	ldr	r1, [sp, #8]
 801b0bc:	1402      	asrs	r2, r0, #16
 801b0be:	1426      	asrs	r6, r4, #16
 801b0c0:	fb0e 1202 	mla	r2, lr, r2, r1
 801b0c4:	9903      	ldr	r1, [sp, #12]
 801b0c6:	5d92      	ldrb	r2, [r2, r6]
 801b0c8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b0cc:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b0d0:	d041      	beq.n	801b156 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801b0d2:	9a05      	ldr	r2, [sp, #20]
 801b0d4:	fa5f fb86 	uxtb.w	fp, r6
 801b0d8:	fb02 fc0c 	mul.w	ip, r2, ip
 801b0dc:	f10c 0201 	add.w	r2, ip, #1
 801b0e0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b0e4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801b0e8:	1212      	asrs	r2, r2, #8
 801b0ea:	fa1f fa82 	uxth.w	sl, r2
 801b0ee:	43d2      	mvns	r2, r2
 801b0f0:	fb1b fb0a 	smulbb	fp, fp, sl
 801b0f4:	b2d2      	uxtb	r2, r2
 801b0f6:	fb0c bc02 	mla	ip, ip, r2, fp
 801b0fa:	fa1f fc8c 	uxth.w	ip, ip
 801b0fe:	f10c 0b01 	add.w	fp, ip, #1
 801b102:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b106:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b10a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b10e:	fb1b fb0a 	smulbb	fp, fp, sl
 801b112:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b116:	fb16 fa0a 	smulbb	sl, r6, sl
 801b11a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b11e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801b122:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801b126:	fb06 aa02 	mla	sl, r6, r2, sl
 801b12a:	fb0c bc02 	mla	ip, ip, r2, fp
 801b12e:	fa1f fa8a 	uxth.w	sl, sl
 801b132:	fa1f fc8c 	uxth.w	ip, ip
 801b136:	f10a 0601 	add.w	r6, sl, #1
 801b13a:	f10c 0b01 	add.w	fp, ip, #1
 801b13e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b142:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b146:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b14a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b14e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b152:	f807 cc02 	strb.w	ip, [r7, #-2]
 801b156:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b158:	3703      	adds	r7, #3
 801b15a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b15e:	4414      	add	r4, r2
 801b160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b162:	4410      	add	r0, r2
 801b164:	e7a6      	b.n	801b0b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b166:	1426      	asrs	r6, r4, #16
 801b168:	d450      	bmi.n	801b20c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b16a:	4576      	cmp	r6, lr
 801b16c:	da4e      	bge.n	801b20c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b16e:	1402      	asrs	r2, r0, #16
 801b170:	d44c      	bmi.n	801b20c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b172:	4542      	cmp	r2, r8
 801b174:	da4a      	bge.n	801b20c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b176:	9902      	ldr	r1, [sp, #8]
 801b178:	fb0e 1202 	mla	r2, lr, r2, r1
 801b17c:	9903      	ldr	r1, [sp, #12]
 801b17e:	5d92      	ldrb	r2, [r2, r6]
 801b180:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b184:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b188:	d040      	beq.n	801b20c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b18a:	9a05      	ldr	r2, [sp, #20]
 801b18c:	fa5f fb86 	uxtb.w	fp, r6
 801b190:	fb02 fc0c 	mul.w	ip, r2, ip
 801b194:	f10c 0201 	add.w	r2, ip, #1
 801b198:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b19c:	f897 c000 	ldrb.w	ip, [r7]
 801b1a0:	1212      	asrs	r2, r2, #8
 801b1a2:	fa1f fa82 	uxth.w	sl, r2
 801b1a6:	43d2      	mvns	r2, r2
 801b1a8:	fb1b fb0a 	smulbb	fp, fp, sl
 801b1ac:	b2d2      	uxtb	r2, r2
 801b1ae:	fb0c bc02 	mla	ip, ip, r2, fp
 801b1b2:	fa1f fc8c 	uxth.w	ip, ip
 801b1b6:	f10c 0b01 	add.w	fp, ip, #1
 801b1ba:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b1be:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b1c2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b1c6:	fb1b fb0a 	smulbb	fp, fp, sl
 801b1ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b1ce:	fb16 fa0a 	smulbb	sl, r6, sl
 801b1d2:	78be      	ldrb	r6, [r7, #2]
 801b1d4:	f887 c000 	strb.w	ip, [r7]
 801b1d8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801b1dc:	fb06 aa02 	mla	sl, r6, r2, sl
 801b1e0:	fb0c bc02 	mla	ip, ip, r2, fp
 801b1e4:	fa1f fa8a 	uxth.w	sl, sl
 801b1e8:	fa1f fc8c 	uxth.w	ip, ip
 801b1ec:	f10a 0601 	add.w	r6, sl, #1
 801b1f0:	f10c 0b01 	add.w	fp, ip, #1
 801b1f4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b1f8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b1fc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b200:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b204:	f887 a002 	strb.w	sl, [r7, #2]
 801b208:	f887 c001 	strb.w	ip, [r7, #1]
 801b20c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b20e:	3703      	adds	r7, #3
 801b210:	f109 39ff 	add.w	r9, r9, #4294967295
 801b214:	4414      	add	r4, r2
 801b216:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b218:	4410      	add	r0, r2
 801b21a:	e6fb      	b.n	801b014 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b21c:	b007      	add	sp, #28
 801b21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b222 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b226:	b085      	sub	sp, #20
 801b228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b22c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b22e:	9203      	str	r2, [sp, #12]
 801b230:	6870      	ldr	r0, [r6, #4]
 801b232:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b234:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b238:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b23c:	9100      	str	r1, [sp, #0]
 801b23e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b242:	fb00 2404 	mla	r4, r0, r4, r2
 801b246:	6832      	ldr	r2, [r6, #0]
 801b248:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b24c:	4414      	add	r4, r2
 801b24e:	682a      	ldr	r2, [r5, #0]
 801b250:	9201      	str	r2, [sp, #4]
 801b252:	686a      	ldr	r2, [r5, #4]
 801b254:	3204      	adds	r2, #4
 801b256:	9202      	str	r2, [sp, #8]
 801b258:	9a00      	ldr	r2, [sp, #0]
 801b25a:	2a00      	cmp	r2, #0
 801b25c:	dc03      	bgt.n	801b266 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801b25e:	9a03      	ldr	r2, [sp, #12]
 801b260:	2a00      	cmp	r2, #0
 801b262:	f340 8131 	ble.w	801b4c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801b266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b268:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b26c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b26e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b272:	2b00      	cmp	r3, #0
 801b274:	dd0e      	ble.n	801b294 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b276:	1405      	asrs	r5, r0, #16
 801b278:	d405      	bmi.n	801b286 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b27a:	4575      	cmp	r5, lr
 801b27c:	da03      	bge.n	801b286 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b27e:	1415      	asrs	r5, r2, #16
 801b280:	d401      	bmi.n	801b286 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b282:	4545      	cmp	r5, r8
 801b284:	db07      	blt.n	801b296 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b286:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b288:	3b01      	subs	r3, #1
 801b28a:	3403      	adds	r4, #3
 801b28c:	4428      	add	r0, r5
 801b28e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b290:	442a      	add	r2, r5
 801b292:	e7ee      	b.n	801b272 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801b294:	d06f      	beq.n	801b376 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801b296:	1e5d      	subs	r5, r3, #1
 801b298:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b29a:	fb06 0605 	mla	r6, r6, r5, r0
 801b29e:	1436      	asrs	r6, r6, #16
 801b2a0:	d460      	bmi.n	801b364 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b2a2:	4576      	cmp	r6, lr
 801b2a4:	da5e      	bge.n	801b364 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b2a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b2a8:	fb06 2505 	mla	r5, r6, r5, r2
 801b2ac:	142d      	asrs	r5, r5, #16
 801b2ae:	d459      	bmi.n	801b364 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b2b0:	4545      	cmp	r5, r8
 801b2b2:	da57      	bge.n	801b364 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b2b4:	1ce5      	adds	r5, r4, #3
 801b2b6:	469a      	mov	sl, r3
 801b2b8:	f1ba 0f00 	cmp.w	sl, #0
 801b2bc:	dd56      	ble.n	801b36c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801b2be:	9901      	ldr	r1, [sp, #4]
 801b2c0:	1416      	asrs	r6, r2, #16
 801b2c2:	1407      	asrs	r7, r0, #16
 801b2c4:	fb0e 1606 	mla	r6, lr, r6, r1
 801b2c8:	9902      	ldr	r1, [sp, #8]
 801b2ca:	5df6      	ldrb	r6, [r6, r7]
 801b2cc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801b2d0:	0e37      	lsrs	r7, r6, #24
 801b2d2:	2fff      	cmp	r7, #255	; 0xff
 801b2d4:	f000 80ef 	beq.w	801b4b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801b2d8:	fa5f fc87 	uxtb.w	ip, r7
 801b2dc:	b3d7      	cbz	r7, 801b354 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801b2de:	fa1f f78c 	uxth.w	r7, ip
 801b2e2:	ea6f 0c0c 	mvn.w	ip, ip
 801b2e6:	fa5f fb86 	uxtb.w	fp, r6
 801b2ea:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b2ee:	fa5f fc8c 	uxtb.w	ip, ip
 801b2f2:	fb1b fb07 	smulbb	fp, fp, r7
 801b2f6:	fb09 b90c 	mla	r9, r9, ip, fp
 801b2fa:	fa1f f989 	uxth.w	r9, r9
 801b2fe:	f109 0b01 	add.w	fp, r9, #1
 801b302:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b306:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b30a:	fb1b fb0c 	smulbb	fp, fp, ip
 801b30e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b312:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b316:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b31a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b31e:	fb09 b907 	mla	r9, r9, r7, fp
 801b322:	fa1f f989 	uxth.w	r9, r9
 801b326:	f109 0b01 	add.w	fp, r9, #1
 801b32a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b32e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b332:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b336:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b33a:	fb19 fc0c 	smulbb	ip, r9, ip
 801b33e:	fb06 c607 	mla	r6, r6, r7, ip
 801b342:	b2b6      	uxth	r6, r6
 801b344:	f106 0c01 	add.w	ip, r6, #1
 801b348:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801b34c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b350:	f805 cc01 	strb.w	ip, [r5, #-1]
 801b354:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b356:	3503      	adds	r5, #3
 801b358:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b35c:	4408      	add	r0, r1
 801b35e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b360:	440a      	add	r2, r1
 801b362:	e7a9      	b.n	801b2b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801b364:	2600      	movs	r6, #0
 801b366:	1b9d      	subs	r5, r3, r6
 801b368:	2d00      	cmp	r5, #0
 801b36a:	dc40      	bgt.n	801b3ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801b36c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b370:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b374:	441c      	add	r4, r3
 801b376:	9b00      	ldr	r3, [sp, #0]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	f340 80a5 	ble.w	801b4c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801b37e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b384:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b388:	eeb0 6a62 	vmov.f32	s12, s5
 801b38c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b390:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b394:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b398:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b39c:	eeb0 6a43 	vmov.f32	s12, s6
 801b3a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3a4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b3a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b3b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b3b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b3bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b3c0:	ee12 2a90 	vmov	r2, s5
 801b3c4:	eef0 2a47 	vmov.f32	s5, s14
 801b3c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3cc:	ee13 2a10 	vmov	r2, s6
 801b3d0:	9311      	str	r3, [sp, #68]	; 0x44
 801b3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3d4:	eeb0 3a67 	vmov.f32	s6, s15
 801b3d8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3dc:	9312      	str	r3, [sp, #72]	; 0x48
 801b3de:	9b00      	ldr	r3, [sp, #0]
 801b3e0:	9a03      	ldr	r2, [sp, #12]
 801b3e2:	3b01      	subs	r3, #1
 801b3e4:	9300      	str	r3, [sp, #0]
 801b3e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3e8:	bf08      	it	eq
 801b3ea:	4613      	moveq	r3, r2
 801b3ec:	e734      	b.n	801b258 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b3ee:	1407      	asrs	r7, r0, #16
 801b3f0:	d450      	bmi.n	801b494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b3f2:	4577      	cmp	r7, lr
 801b3f4:	da4e      	bge.n	801b494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b3f6:	1415      	asrs	r5, r2, #16
 801b3f8:	d44c      	bmi.n	801b494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b3fa:	4545      	cmp	r5, r8
 801b3fc:	da4a      	bge.n	801b494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b3fe:	9901      	ldr	r1, [sp, #4]
 801b400:	fb0e 1505 	mla	r5, lr, r5, r1
 801b404:	9902      	ldr	r1, [sp, #8]
 801b406:	5ded      	ldrb	r5, [r5, r7]
 801b408:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801b40c:	0e2f      	lsrs	r7, r5, #24
 801b40e:	2fff      	cmp	r7, #255	; 0xff
 801b410:	d046      	beq.n	801b4a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801b412:	fa5f f987 	uxtb.w	r9, r7
 801b416:	b3ef      	cbz	r7, 801b494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b418:	fa1f fc89 	uxth.w	ip, r9
 801b41c:	ea6f 0909 	mvn.w	r9, r9
 801b420:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b424:	fa5f fb85 	uxtb.w	fp, r5
 801b428:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b42c:	fa5f f989 	uxtb.w	r9, r9
 801b430:	fb1b fb0c 	smulbb	fp, fp, ip
 801b434:	fb0a ba09 	mla	sl, sl, r9, fp
 801b438:	fa1f fa8a 	uxth.w	sl, sl
 801b43c:	f10a 0b01 	add.w	fp, sl, #1
 801b440:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b444:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b448:	f804 a007 	strb.w	sl, [r4, r7]
 801b44c:	4427      	add	r7, r4
 801b44e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b452:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b456:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b45a:	fb1b fb09 	smulbb	fp, fp, r9
 801b45e:	fb0a ba0c 	mla	sl, sl, ip, fp
 801b462:	fa1f fa8a 	uxth.w	sl, sl
 801b466:	f10a 0b01 	add.w	fp, sl, #1
 801b46a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b46e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b472:	f887 a001 	strb.w	sl, [r7, #1]
 801b476:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b47a:	fb1a f909 	smulbb	r9, sl, r9
 801b47e:	fb05 950c 	mla	r5, r5, ip, r9
 801b482:	b2ad      	uxth	r5, r5
 801b484:	f105 0901 	add.w	r9, r5, #1
 801b488:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b48c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b490:	f887 9002 	strb.w	r9, [r7, #2]
 801b494:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b496:	3601      	adds	r6, #1
 801b498:	4408      	add	r0, r1
 801b49a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b49c:	440a      	add	r2, r1
 801b49e:	e762      	b.n	801b366 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801b4a0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b4a4:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801b4a8:	55e5      	strb	r5, [r4, r7]
 801b4aa:	4427      	add	r7, r4
 801b4ac:	0c2d      	lsrs	r5, r5, #16
 801b4ae:	f887 c001 	strb.w	ip, [r7, #1]
 801b4b2:	70bd      	strb	r5, [r7, #2]
 801b4b4:	e7ee      	b.n	801b494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b4b6:	0a37      	lsrs	r7, r6, #8
 801b4b8:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b4bc:	0c36      	lsrs	r6, r6, #16
 801b4be:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b4c2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b4c6:	e745      	b.n	801b354 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801b4c8:	b005      	add	sp, #20
 801b4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b4ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b4d4:	9201      	str	r2, [sp, #4]
 801b4d6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801b4da:	6870      	ldr	r0, [r6, #4]
 801b4dc:	9200      	str	r2, [sp, #0]
 801b4de:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b4e2:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801b4e6:	fa1f fc85 	uxth.w	ip, r5
 801b4ea:	43ed      	mvns	r5, r5
 801b4ec:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b4f0:	b2ed      	uxtb	r5, r5
 801b4f2:	fb00 2404 	mla	r4, r0, r4, r2
 801b4f6:	6832      	ldr	r2, [r6, #0]
 801b4f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b4fc:	4414      	add	r4, r2
 801b4fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b500:	f8d2 8000 	ldr.w	r8, [r2]
 801b504:	2900      	cmp	r1, #0
 801b506:	dc03      	bgt.n	801b510 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801b508:	9a01      	ldr	r2, [sp, #4]
 801b50a:	2a00      	cmp	r2, #0
 801b50c:	f340 8104 	ble.w	801b718 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b512:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b518:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	dd0f      	ble.n	801b540 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b520:	1406      	asrs	r6, r0, #16
 801b522:	d406      	bmi.n	801b532 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b524:	4576      	cmp	r6, lr
 801b526:	da04      	bge.n	801b532 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b528:	1416      	asrs	r6, r2, #16
 801b52a:	d402      	bmi.n	801b532 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b52c:	9f00      	ldr	r7, [sp, #0]
 801b52e:	42be      	cmp	r6, r7
 801b530:	db07      	blt.n	801b542 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b532:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b534:	3b01      	subs	r3, #1
 801b536:	3403      	adds	r4, #3
 801b538:	4430      	add	r0, r6
 801b53a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b53c:	4432      	add	r2, r6
 801b53e:	e7ed      	b.n	801b51c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801b540:	d05f      	beq.n	801b602 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801b542:	1e5e      	subs	r6, r3, #1
 801b544:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b546:	fb07 0706 	mla	r7, r7, r6, r0
 801b54a:	143f      	asrs	r7, r7, #16
 801b54c:	d450      	bmi.n	801b5f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b54e:	4577      	cmp	r7, lr
 801b550:	da4e      	bge.n	801b5f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b552:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b554:	fb07 2606 	mla	r6, r7, r6, r2
 801b558:	1436      	asrs	r6, r6, #16
 801b55a:	d449      	bmi.n	801b5f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b55c:	9f00      	ldr	r7, [sp, #0]
 801b55e:	42be      	cmp	r6, r7
 801b560:	da46      	bge.n	801b5f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b562:	1ce6      	adds	r6, r4, #3
 801b564:	4699      	mov	r9, r3
 801b566:	f1b9 0f00 	cmp.w	r9, #0
 801b56a:	f106 0603 	add.w	r6, r6, #3
 801b56e:	dd43      	ble.n	801b5f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b570:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b574:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b578:	1417      	asrs	r7, r2, #16
 801b57a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b57e:	fb1b fb05 	smulbb	fp, fp, r5
 801b582:	fb0e a707 	mla	r7, lr, r7, sl
 801b586:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b58a:	eb08 0a07 	add.w	sl, r8, r7
 801b58e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801b592:	fb07 b70c 	mla	r7, r7, ip, fp
 801b596:	b2bf      	uxth	r7, r7
 801b598:	f107 0b01 	add.w	fp, r7, #1
 801b59c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b5a0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b5a4:	fb1b fb05 	smulbb	fp, fp, r5
 801b5a8:	123f      	asrs	r7, r7, #8
 801b5aa:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b5ae:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b5b2:	fb07 b70c 	mla	r7, r7, ip, fp
 801b5b6:	b2bf      	uxth	r7, r7
 801b5b8:	f107 0b01 	add.w	fp, r7, #1
 801b5bc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b5c0:	123f      	asrs	r7, r7, #8
 801b5c2:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b5c6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b5ca:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b5ce:	fb1a fa05 	smulbb	sl, sl, r5
 801b5d2:	fb07 a70c 	mla	r7, r7, ip, sl
 801b5d6:	b2bf      	uxth	r7, r7
 801b5d8:	f107 0a01 	add.w	sl, r7, #1
 801b5dc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b5e0:	123f      	asrs	r7, r7, #8
 801b5e2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b5e6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b5e8:	4438      	add	r0, r7
 801b5ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b5ec:	443a      	add	r2, r7
 801b5ee:	e7ba      	b.n	801b566 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b5f0:	2700      	movs	r7, #0
 801b5f2:	1bde      	subs	r6, r3, r7
 801b5f4:	2e00      	cmp	r6, #0
 801b5f6:	dc3f      	bgt.n	801b678 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b5f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b5fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b600:	441c      	add	r4, r3
 801b602:	2900      	cmp	r1, #0
 801b604:	f340 8088 	ble.w	801b718 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b60c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b60e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b612:	3901      	subs	r1, #1
 801b614:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b618:	eef0 6a62 	vmov.f32	s13, s5
 801b61c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b620:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b624:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b628:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801b62c:	eef0 6a43 	vmov.f32	s13, s6
 801b630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b634:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801b638:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b63c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b640:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b644:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b648:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b64c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b650:	ee12 2a90 	vmov	r2, s5
 801b654:	eef0 2a47 	vmov.f32	s5, s14
 801b658:	fb92 f3f3 	sdiv	r3, r2, r3
 801b65c:	ee13 2a10 	vmov	r2, s6
 801b660:	930f      	str	r3, [sp, #60]	; 0x3c
 801b662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b664:	eeb0 3a67 	vmov.f32	s6, s15
 801b668:	fb92 f3f3 	sdiv	r3, r2, r3
 801b66c:	9a01      	ldr	r2, [sp, #4]
 801b66e:	9310      	str	r3, [sp, #64]	; 0x40
 801b670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b672:	bf08      	it	eq
 801b674:	4613      	moveq	r3, r2
 801b676:	e745      	b.n	801b504 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b678:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b67c:	d446      	bmi.n	801b70c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b67e:	45f2      	cmp	sl, lr
 801b680:	da44      	bge.n	801b70c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b682:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b686:	d441      	bmi.n	801b70c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b688:	9e00      	ldr	r6, [sp, #0]
 801b68a:	45b1      	cmp	r9, r6
 801b68c:	da3e      	bge.n	801b70c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b68e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b692:	fb0e a909 	mla	r9, lr, r9, sl
 801b696:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b69a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b69e:	fb1b fb05 	smulbb	fp, fp, r5
 801b6a2:	eb08 0a09 	add.w	sl, r8, r9
 801b6a6:	f818 9009 	ldrb.w	r9, [r8, r9]
 801b6aa:	fb09 b90c 	mla	r9, r9, ip, fp
 801b6ae:	fa1f f989 	uxth.w	r9, r9
 801b6b2:	f109 0b01 	add.w	fp, r9, #1
 801b6b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6be:	f804 9006 	strb.w	r9, [r4, r6]
 801b6c2:	4426      	add	r6, r4
 801b6c4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b6c8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b6cc:	fb1b fb05 	smulbb	fp, fp, r5
 801b6d0:	fb09 b90c 	mla	r9, r9, ip, fp
 801b6d4:	fa1f f989 	uxth.w	r9, r9
 801b6d8:	f109 0b01 	add.w	fp, r9, #1
 801b6dc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6e4:	f886 9001 	strb.w	r9, [r6, #1]
 801b6e8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b6ec:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b6f0:	fb1a fa05 	smulbb	sl, sl, r5
 801b6f4:	fb09 a90c 	mla	r9, r9, ip, sl
 801b6f8:	fa1f f989 	uxth.w	r9, r9
 801b6fc:	f109 0a01 	add.w	sl, r9, #1
 801b700:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b704:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b708:	f886 9002 	strb.w	r9, [r6, #2]
 801b70c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b70e:	3701      	adds	r7, #1
 801b710:	4430      	add	r0, r6
 801b712:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b714:	4432      	add	r2, r6
 801b716:	e76c      	b.n	801b5f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801b718:	b003      	add	sp, #12
 801b71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b71e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b71e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b722:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b728:	9201      	str	r2, [sp, #4]
 801b72a:	6868      	ldr	r0, [r5, #4]
 801b72c:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801b730:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801b734:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b738:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801b73c:	fb00 2404 	mla	r4, r0, r4, r2
 801b740:	682a      	ldr	r2, [r5, #0]
 801b742:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b746:	4414      	add	r4, r2
 801b748:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b74a:	f8d2 9000 	ldr.w	r9, [r2]
 801b74e:	2900      	cmp	r1, #0
 801b750:	dc03      	bgt.n	801b75a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b752:	9a01      	ldr	r2, [sp, #4]
 801b754:	2a00      	cmp	r2, #0
 801b756:	f340 80a8 	ble.w	801b8aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801b75a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b75c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b762:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b766:	2b00      	cmp	r3, #0
 801b768:	dd0c      	ble.n	801b784 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b76a:	1405      	asrs	r5, r0, #16
 801b76c:	d405      	bmi.n	801b77a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801b76e:	4565      	cmp	r5, ip
 801b770:	da03      	bge.n	801b77a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801b772:	1415      	asrs	r5, r2, #16
 801b774:	d401      	bmi.n	801b77a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801b776:	4575      	cmp	r5, lr
 801b778:	db05      	blt.n	801b786 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801b77a:	4438      	add	r0, r7
 801b77c:	4432      	add	r2, r6
 801b77e:	3b01      	subs	r3, #1
 801b780:	3403      	adds	r4, #3
 801b782:	e7f0      	b.n	801b766 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801b784:	d03a      	beq.n	801b7fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b786:	1e5d      	subs	r5, r3, #1
 801b788:	fb07 0805 	mla	r8, r7, r5, r0
 801b78c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801b790:	d429      	bmi.n	801b7e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b792:	45e0      	cmp	r8, ip
 801b794:	da27      	bge.n	801b7e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b796:	fb06 2505 	mla	r5, r6, r5, r2
 801b79a:	142d      	asrs	r5, r5, #16
 801b79c:	d423      	bmi.n	801b7e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b79e:	4575      	cmp	r5, lr
 801b7a0:	da21      	bge.n	801b7e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b7a2:	f104 0803 	add.w	r8, r4, #3
 801b7a6:	469a      	mov	sl, r3
 801b7a8:	f1ba 0f00 	cmp.w	sl, #0
 801b7ac:	f108 0803 	add.w	r8, r8, #3
 801b7b0:	dd1f      	ble.n	801b7f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801b7b2:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b7b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b7ba:	1415      	asrs	r5, r2, #16
 801b7bc:	4438      	add	r0, r7
 801b7be:	4432      	add	r2, r6
 801b7c0:	fb0c b505 	mla	r5, ip, r5, fp
 801b7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b7c8:	eb09 0b05 	add.w	fp, r9, r5
 801b7cc:	f819 5005 	ldrb.w	r5, [r9, r5]
 801b7d0:	f808 5c06 	strb.w	r5, [r8, #-6]
 801b7d4:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801b7d8:	f808 5c05 	strb.w	r5, [r8, #-5]
 801b7dc:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801b7e0:	f808 5c04 	strb.w	r5, [r8, #-4]
 801b7e4:	e7e0      	b.n	801b7a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b7e6:	2500      	movs	r5, #0
 801b7e8:	eba3 0805 	sub.w	r8, r3, r5
 801b7ec:	f1b8 0f00 	cmp.w	r8, #0
 801b7f0:	dc38      	bgt.n	801b864 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801b7f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b7f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7fa:	441c      	add	r4, r3
 801b7fc:	2900      	cmp	r1, #0
 801b7fe:	dd54      	ble.n	801b8aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801b800:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b806:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b80a:	3901      	subs	r1, #1
 801b80c:	eeb0 6a62 	vmov.f32	s12, s5
 801b810:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b814:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b818:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b81c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b820:	eeb0 6a43 	vmov.f32	s12, s6
 801b824:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b828:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b82c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b830:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b834:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b838:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b83c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b840:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b844:	ee12 2a90 	vmov	r2, s5
 801b848:	eef0 2a47 	vmov.f32	s5, s14
 801b84c:	fb92 f7f3 	sdiv	r7, r2, r3
 801b850:	ee13 2a10 	vmov	r2, s6
 801b854:	eeb0 3a67 	vmov.f32	s6, s15
 801b858:	fb92 f6f3 	sdiv	r6, r2, r3
 801b85c:	9a01      	ldr	r2, [sp, #4]
 801b85e:	bf08      	it	eq
 801b860:	4613      	moveq	r3, r2
 801b862:	e774      	b.n	801b74e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801b864:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b868:	d41b      	bmi.n	801b8a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b86a:	45e2      	cmp	sl, ip
 801b86c:	da19      	bge.n	801b8a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b86e:	ea5f 4822 	movs.w	r8, r2, asr #16
 801b872:	d416      	bmi.n	801b8a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b874:	45f0      	cmp	r8, lr
 801b876:	da14      	bge.n	801b8a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b878:	fb0c a808 	mla	r8, ip, r8, sl
 801b87c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b880:	f819 b008 	ldrb.w	fp, [r9, r8]
 801b884:	eb09 0a08 	add.w	sl, r9, r8
 801b888:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801b88c:	f804 b008 	strb.w	fp, [r4, r8]
 801b890:	44a0      	add	r8, r4
 801b892:	f89a b001 	ldrb.w	fp, [sl, #1]
 801b896:	f888 b001 	strb.w	fp, [r8, #1]
 801b89a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801b89e:	f888 a002 	strb.w	sl, [r8, #2]
 801b8a2:	4438      	add	r0, r7
 801b8a4:	4432      	add	r2, r6
 801b8a6:	3501      	adds	r5, #1
 801b8a8:	e79e      	b.n	801b7e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801b8aa:	b003      	add	sp, #12
 801b8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b8b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8b4:	b085      	sub	sp, #20
 801b8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b8bc:	9202      	str	r2, [sp, #8]
 801b8be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b8c2:	6860      	ldr	r0, [r4, #4]
 801b8c4:	9203      	str	r2, [sp, #12]
 801b8c6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b8ca:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b8ce:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b8d2:	fb00 2505 	mla	r5, r0, r5, r2
 801b8d6:	6822      	ldr	r2, [r4, #0]
 801b8d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8dc:	4415      	add	r5, r2
 801b8de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b8e0:	6812      	ldr	r2, [r2, #0]
 801b8e2:	9201      	str	r2, [sp, #4]
 801b8e4:	2900      	cmp	r1, #0
 801b8e6:	dc03      	bgt.n	801b8f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801b8e8:	9a02      	ldr	r2, [sp, #8]
 801b8ea:	2a00      	cmp	r2, #0
 801b8ec:	f340 811c 	ble.w	801bb28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b8f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8f2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b8f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b8f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	dd0e      	ble.n	801b91e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b900:	1422      	asrs	r2, r4, #16
 801b902:	d405      	bmi.n	801b910 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b904:	4572      	cmp	r2, lr
 801b906:	da03      	bge.n	801b910 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b908:	1402      	asrs	r2, r0, #16
 801b90a:	d401      	bmi.n	801b910 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b90c:	4542      	cmp	r2, r8
 801b90e:	db07      	blt.n	801b920 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b910:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b912:	3b01      	subs	r3, #1
 801b914:	3503      	adds	r5, #3
 801b916:	4414      	add	r4, r2
 801b918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b91a:	4410      	add	r0, r2
 801b91c:	e7ee      	b.n	801b8fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b91e:	d072      	beq.n	801ba06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801b920:	1e5a      	subs	r2, r3, #1
 801b922:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b924:	fb06 4602 	mla	r6, r6, r2, r4
 801b928:	1436      	asrs	r6, r6, #16
 801b92a:	d461      	bmi.n	801b9f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b92c:	4576      	cmp	r6, lr
 801b92e:	da5f      	bge.n	801b9f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b930:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b932:	fb06 0202 	mla	r2, r6, r2, r0
 801b936:	1412      	asrs	r2, r2, #16
 801b938:	d45a      	bmi.n	801b9f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b93a:	4542      	cmp	r2, r8
 801b93c:	da58      	bge.n	801b9f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b93e:	1cef      	adds	r7, r5, #3
 801b940:	4699      	mov	r9, r3
 801b942:	f1b9 0f00 	cmp.w	r9, #0
 801b946:	dd59      	ble.n	801b9fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801b948:	1426      	asrs	r6, r4, #16
 801b94a:	1402      	asrs	r2, r0, #16
 801b94c:	fb0e 6202 	mla	r2, lr, r2, r6
 801b950:	9e01      	ldr	r6, [sp, #4]
 801b952:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b956:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b95a:	d041      	beq.n	801b9e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801b95c:	9a03      	ldr	r2, [sp, #12]
 801b95e:	fa5f fb86 	uxtb.w	fp, r6
 801b962:	fb02 fc0c 	mul.w	ip, r2, ip
 801b966:	f10c 0201 	add.w	r2, ip, #1
 801b96a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b96e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801b972:	1212      	asrs	r2, r2, #8
 801b974:	fa1f fa82 	uxth.w	sl, r2
 801b978:	43d2      	mvns	r2, r2
 801b97a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b97e:	b2d2      	uxtb	r2, r2
 801b980:	fb0c bc02 	mla	ip, ip, r2, fp
 801b984:	fa1f fc8c 	uxth.w	ip, ip
 801b988:	f10c 0b01 	add.w	fp, ip, #1
 801b98c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b990:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b994:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b998:	fb1b fb0a 	smulbb	fp, fp, sl
 801b99c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b9a0:	fb16 fa0a 	smulbb	sl, r6, sl
 801b9a4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b9a8:	f807 cc03 	strb.w	ip, [r7, #-3]
 801b9ac:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801b9b0:	fb06 aa02 	mla	sl, r6, r2, sl
 801b9b4:	fb0c bc02 	mla	ip, ip, r2, fp
 801b9b8:	fa1f fa8a 	uxth.w	sl, sl
 801b9bc:	fa1f fc8c 	uxth.w	ip, ip
 801b9c0:	f10a 0601 	add.w	r6, sl, #1
 801b9c4:	f10c 0b01 	add.w	fp, ip, #1
 801b9c8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b9cc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b9d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b9d4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b9d8:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b9dc:	f807 cc02 	strb.w	ip, [r7, #-2]
 801b9e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9e2:	3703      	adds	r7, #3
 801b9e4:	f109 39ff 	add.w	r9, r9, #4294967295
 801b9e8:	4414      	add	r4, r2
 801b9ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9ec:	4410      	add	r0, r2
 801b9ee:	e7a8      	b.n	801b942 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b9f0:	f04f 0c00 	mov.w	ip, #0
 801b9f4:	eba3 020c 	sub.w	r2, r3, ip
 801b9f8:	2a00      	cmp	r2, #0
 801b9fa:	dc3d      	bgt.n	801ba78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801b9fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba04:	441d      	add	r5, r3
 801ba06:	2900      	cmp	r1, #0
 801ba08:	f340 808e 	ble.w	801bb28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ba0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba16:	3901      	subs	r1, #1
 801ba18:	eeb0 6a62 	vmov.f32	s12, s5
 801ba1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba28:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ba2c:	eeb0 6a43 	vmov.f32	s12, s6
 801ba30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba34:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ba38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba50:	ee12 2a90 	vmov	r2, s5
 801ba54:	eef0 2a47 	vmov.f32	s5, s14
 801ba58:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba5c:	ee13 2a10 	vmov	r2, s6
 801ba60:	9311      	str	r3, [sp, #68]	; 0x44
 801ba62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba64:	eeb0 3a67 	vmov.f32	s6, s15
 801ba68:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba6c:	9a02      	ldr	r2, [sp, #8]
 801ba6e:	9312      	str	r3, [sp, #72]	; 0x48
 801ba70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba72:	bf08      	it	eq
 801ba74:	4613      	moveq	r3, r2
 801ba76:	e735      	b.n	801b8e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801ba78:	1426      	asrs	r6, r4, #16
 801ba7a:	d44e      	bmi.n	801bb1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ba7c:	4576      	cmp	r6, lr
 801ba7e:	da4c      	bge.n	801bb1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ba80:	1402      	asrs	r2, r0, #16
 801ba82:	d44a      	bmi.n	801bb1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ba84:	4542      	cmp	r2, r8
 801ba86:	da48      	bge.n	801bb1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ba88:	fb0e 6202 	mla	r2, lr, r2, r6
 801ba8c:	9e01      	ldr	r6, [sp, #4]
 801ba8e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ba92:	0e3a      	lsrs	r2, r7, #24
 801ba94:	d041      	beq.n	801bb1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ba96:	9e03      	ldr	r6, [sp, #12]
 801ba98:	fa5f fb87 	uxtb.w	fp, r7
 801ba9c:	4372      	muls	r2, r6
 801ba9e:	1c56      	adds	r6, r2, #1
 801baa0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801baa4:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801baa8:	1212      	asrs	r2, r2, #8
 801baaa:	f815 9006 	ldrb.w	r9, [r5, r6]
 801baae:	fa1f fa82 	uxth.w	sl, r2
 801bab2:	43d2      	mvns	r2, r2
 801bab4:	fb1b fb0a 	smulbb	fp, fp, sl
 801bab8:	b2d2      	uxtb	r2, r2
 801baba:	fb09 b902 	mla	r9, r9, r2, fp
 801babe:	fa1f f989 	uxth.w	r9, r9
 801bac2:	f109 0b01 	add.w	fp, r9, #1
 801bac6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801baca:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bace:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bad2:	fb1b fb0a 	smulbb	fp, fp, sl
 801bad6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bada:	fb17 fa0a 	smulbb	sl, r7, sl
 801bade:	f805 9006 	strb.w	r9, [r5, r6]
 801bae2:	442e      	add	r6, r5
 801bae4:	78b7      	ldrb	r7, [r6, #2]
 801bae6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801baea:	fb07 aa02 	mla	sl, r7, r2, sl
 801baee:	fb09 b902 	mla	r9, r9, r2, fp
 801baf2:	fa1f fa8a 	uxth.w	sl, sl
 801baf6:	fa1f f989 	uxth.w	r9, r9
 801bafa:	f10a 0701 	add.w	r7, sl, #1
 801bafe:	f109 0b01 	add.w	fp, r9, #1
 801bb02:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bb06:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bb0a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bb0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb12:	f886 a002 	strb.w	sl, [r6, #2]
 801bb16:	f886 9001 	strb.w	r9, [r6, #1]
 801bb1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb1c:	f10c 0c01 	add.w	ip, ip, #1
 801bb20:	4414      	add	r4, r2
 801bb22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb24:	4410      	add	r0, r2
 801bb26:	e765      	b.n	801b9f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801bb28:	b005      	add	sp, #20
 801bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bb2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb32:	b085      	sub	sp, #20
 801bb34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bb3a:	9203      	str	r2, [sp, #12]
 801bb3c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bb40:	6860      	ldr	r0, [r4, #4]
 801bb42:	9201      	str	r2, [sp, #4]
 801bb44:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bb48:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bb4c:	fb00 2505 	mla	r5, r0, r5, r2
 801bb50:	6822      	ldr	r2, [r4, #0]
 801bb52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb56:	4415      	add	r5, r2
 801bb58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bb5a:	6812      	ldr	r2, [r2, #0]
 801bb5c:	9202      	str	r2, [sp, #8]
 801bb5e:	2900      	cmp	r1, #0
 801bb60:	dc03      	bgt.n	801bb6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bb62:	9a03      	ldr	r2, [sp, #12]
 801bb64:	2a00      	cmp	r2, #0
 801bb66:	f340 8122 	ble.w	801bdae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801bb6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb6c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bb70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bb72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	dd0f      	ble.n	801bb9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801bb7a:	1422      	asrs	r2, r4, #16
 801bb7c:	d406      	bmi.n	801bb8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bb7e:	4572      	cmp	r2, lr
 801bb80:	da04      	bge.n	801bb8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bb82:	1402      	asrs	r2, r0, #16
 801bb84:	d402      	bmi.n	801bb8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bb86:	9e01      	ldr	r6, [sp, #4]
 801bb88:	42b2      	cmp	r2, r6
 801bb8a:	db07      	blt.n	801bb9c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bb8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb8e:	3b01      	subs	r3, #1
 801bb90:	3503      	adds	r5, #3
 801bb92:	4414      	add	r4, r2
 801bb94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb96:	4410      	add	r0, r2
 801bb98:	e7ed      	b.n	801bb76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801bb9a:	d06e      	beq.n	801bc7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801bb9c:	1e5a      	subs	r2, r3, #1
 801bb9e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bba0:	fb06 4602 	mla	r6, r6, r2, r4
 801bba4:	1436      	asrs	r6, r6, #16
 801bba6:	d45d      	bmi.n	801bc64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bba8:	4576      	cmp	r6, lr
 801bbaa:	da5b      	bge.n	801bc64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bbac:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bbae:	fb06 0202 	mla	r2, r6, r2, r0
 801bbb2:	1412      	asrs	r2, r2, #16
 801bbb4:	d456      	bmi.n	801bc64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bbb6:	9e01      	ldr	r6, [sp, #4]
 801bbb8:	42b2      	cmp	r2, r6
 801bbba:	da53      	bge.n	801bc64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bbbc:	1cee      	adds	r6, r5, #3
 801bbbe:	469a      	mov	sl, r3
 801bbc0:	f1ba 0f00 	cmp.w	sl, #0
 801bbc4:	dd54      	ble.n	801bc70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bbc6:	1427      	asrs	r7, r4, #16
 801bbc8:	1402      	asrs	r2, r0, #16
 801bbca:	fb0e 7202 	mla	r2, lr, r2, r7
 801bbce:	9f02      	ldr	r7, [sp, #8]
 801bbd0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801bbd4:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801bbd8:	d03c      	beq.n	801bc54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801bbda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bbde:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bbe2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801bbe6:	fa5f f28c 	uxtb.w	r2, ip
 801bbea:	b2ff      	uxtb	r7, r7
 801bbec:	f000 80d8 	beq.w	801bda0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bbf0:	fa1f f882 	uxth.w	r8, r2
 801bbf4:	43d2      	mvns	r2, r2
 801bbf6:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801bbfa:	fb17 f708 	smulbb	r7, r7, r8
 801bbfe:	b2d2      	uxtb	r2, r2
 801bc00:	fb19 f908 	smulbb	r9, r9, r8
 801bc04:	fb0c 7702 	mla	r7, ip, r2, r7
 801bc08:	fb1b f808 	smulbb	r8, fp, r8
 801bc0c:	b2bf      	uxth	r7, r7
 801bc0e:	f107 0c01 	add.w	ip, r7, #1
 801bc12:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801bc16:	123f      	asrs	r7, r7, #8
 801bc18:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bc1c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801bc20:	fb07 9902 	mla	r9, r7, r2, r9
 801bc24:	fa1f f989 	uxth.w	r9, r9
 801bc28:	f109 0701 	add.w	r7, r9, #1
 801bc2c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801bc30:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bc34:	fb07 8802 	mla	r8, r7, r2, r8
 801bc38:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bc3c:	fa1f f888 	uxth.w	r8, r8
 801bc40:	f806 9c02 	strb.w	r9, [r6, #-2]
 801bc44:	f108 0201 	add.w	r2, r8, #1
 801bc48:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bc4c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc50:	f806 8c01 	strb.w	r8, [r6, #-1]
 801bc54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc56:	3603      	adds	r6, #3
 801bc58:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc5c:	4414      	add	r4, r2
 801bc5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc60:	4410      	add	r0, r2
 801bc62:	e7ad      	b.n	801bbc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801bc64:	f04f 0c00 	mov.w	ip, #0
 801bc68:	eba3 020c 	sub.w	r2, r3, ip
 801bc6c:	2a00      	cmp	r2, #0
 801bc6e:	dc3d      	bgt.n	801bcec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801bc70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc78:	441d      	add	r5, r3
 801bc7a:	2900      	cmp	r1, #0
 801bc7c:	f340 8097 	ble.w	801bdae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801bc80:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc8a:	3901      	subs	r1, #1
 801bc8c:	eeb0 6a62 	vmov.f32	s12, s5
 801bc90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bc94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc9c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bca0:	eeb0 6a43 	vmov.f32	s12, s6
 801bca4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bca8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bcac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bcb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bcb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcc4:	ee12 2a90 	vmov	r2, s5
 801bcc8:	eef0 2a47 	vmov.f32	s5, s14
 801bccc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcd0:	ee13 2a10 	vmov	r2, s6
 801bcd4:	9311      	str	r3, [sp, #68]	; 0x44
 801bcd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bcd8:	eeb0 3a67 	vmov.f32	s6, s15
 801bcdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bce0:	9a03      	ldr	r2, [sp, #12]
 801bce2:	9312      	str	r3, [sp, #72]	; 0x48
 801bce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bce6:	bf08      	it	eq
 801bce8:	4613      	moveq	r3, r2
 801bcea:	e738      	b.n	801bb5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801bcec:	1426      	asrs	r6, r4, #16
 801bcee:	d448      	bmi.n	801bd82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801bcf0:	4576      	cmp	r6, lr
 801bcf2:	da46      	bge.n	801bd82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801bcf4:	1402      	asrs	r2, r0, #16
 801bcf6:	d444      	bmi.n	801bd82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801bcf8:	9f01      	ldr	r7, [sp, #4]
 801bcfa:	42ba      	cmp	r2, r7
 801bcfc:	da41      	bge.n	801bd82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801bcfe:	fb0e 6202 	mla	r2, lr, r2, r6
 801bd02:	9e02      	ldr	r6, [sp, #8]
 801bd04:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801bd08:	0e3a      	lsrs	r2, r7, #24
 801bd0a:	d03a      	beq.n	801bd82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801bd0c:	2aff      	cmp	r2, #255	; 0xff
 801bd0e:	b2d6      	uxtb	r6, r2
 801bd10:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bd14:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bd18:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801bd1c:	b2ff      	uxtb	r7, r7
 801bd1e:	d037      	beq.n	801bd90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801bd20:	fa1f f986 	uxth.w	r9, r6
 801bd24:	4462      	add	r2, ip
 801bd26:	43f6      	mvns	r6, r6
 801bd28:	f815 8002 	ldrb.w	r8, [r5, r2]
 801bd2c:	fb17 f709 	smulbb	r7, r7, r9
 801bd30:	fb1a fa09 	smulbb	sl, sl, r9
 801bd34:	b2f6      	uxtb	r6, r6
 801bd36:	fb1b f909 	smulbb	r9, fp, r9
 801bd3a:	fb08 7706 	mla	r7, r8, r6, r7
 801bd3e:	b2bf      	uxth	r7, r7
 801bd40:	f107 0801 	add.w	r8, r7, #1
 801bd44:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801bd48:	123f      	asrs	r7, r7, #8
 801bd4a:	54af      	strb	r7, [r5, r2]
 801bd4c:	442a      	add	r2, r5
 801bd4e:	7857      	ldrb	r7, [r2, #1]
 801bd50:	fb07 aa06 	mla	sl, r7, r6, sl
 801bd54:	fa1f fa8a 	uxth.w	sl, sl
 801bd58:	f10a 0701 	add.w	r7, sl, #1
 801bd5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bd60:	7897      	ldrb	r7, [r2, #2]
 801bd62:	fb07 9906 	mla	r9, r7, r6, r9
 801bd66:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bd6a:	fa1f f989 	uxth.w	r9, r9
 801bd6e:	f882 a001 	strb.w	sl, [r2, #1]
 801bd72:	f109 0601 	add.w	r6, r9, #1
 801bd76:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801bd7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd7e:	f882 9002 	strb.w	r9, [r2, #2]
 801bd82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd84:	f10c 0c01 	add.w	ip, ip, #1
 801bd88:	4414      	add	r4, r2
 801bd8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bd8c:	4410      	add	r0, r2
 801bd8e:	e76b      	b.n	801bc68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801bd90:	4462      	add	r2, ip
 801bd92:	54af      	strb	r7, [r5, r2]
 801bd94:	442a      	add	r2, r5
 801bd96:	f882 a001 	strb.w	sl, [r2, #1]
 801bd9a:	f882 b002 	strb.w	fp, [r2, #2]
 801bd9e:	e7f0      	b.n	801bd82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801bda0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bda4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801bda8:	f806 bc01 	strb.w	fp, [r6, #-1]
 801bdac:	e752      	b.n	801bc54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801bdae:	b005      	add	sp, #20
 801bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bdb4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdb8:	b087      	sub	sp, #28
 801bdba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bdbe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bdc0:	9204      	str	r2, [sp, #16]
 801bdc2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801bdc6:	6860      	ldr	r0, [r4, #4]
 801bdc8:	9205      	str	r2, [sp, #20]
 801bdca:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801bdce:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801bdd2:	9101      	str	r1, [sp, #4]
 801bdd4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801bdd8:	fb00 2505 	mla	r5, r0, r5, r2
 801bddc:	6822      	ldr	r2, [r4, #0]
 801bdde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bde2:	4415      	add	r5, r2
 801bde4:	f10e 0201 	add.w	r2, lr, #1
 801bde8:	f022 0201 	bic.w	r2, r2, #1
 801bdec:	9202      	str	r2, [sp, #8]
 801bdee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801bdf0:	6812      	ldr	r2, [r2, #0]
 801bdf2:	9203      	str	r2, [sp, #12]
 801bdf4:	9a01      	ldr	r2, [sp, #4]
 801bdf6:	2a00      	cmp	r2, #0
 801bdf8:	dc03      	bgt.n	801be02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801bdfa:	9a04      	ldr	r2, [sp, #16]
 801bdfc:	2a00      	cmp	r2, #0
 801bdfe:	f340 8132 	ble.w	801c066 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801be02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be04:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801be08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801be0a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801be0e:	2b00      	cmp	r3, #0
 801be10:	dd0e      	ble.n	801be30 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801be12:	1422      	asrs	r2, r4, #16
 801be14:	d405      	bmi.n	801be22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801be16:	4596      	cmp	lr, r2
 801be18:	dd03      	ble.n	801be22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801be1a:	1402      	asrs	r2, r0, #16
 801be1c:	d401      	bmi.n	801be22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801be1e:	4542      	cmp	r2, r8
 801be20:	db07      	blt.n	801be32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801be22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801be24:	3b01      	subs	r3, #1
 801be26:	3503      	adds	r5, #3
 801be28:	4414      	add	r4, r2
 801be2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801be2c:	4410      	add	r0, r2
 801be2e:	e7ee      	b.n	801be0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801be30:	d010      	beq.n	801be54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801be32:	1e5a      	subs	r2, r3, #1
 801be34:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801be36:	fb06 4602 	mla	r6, r6, r2, r4
 801be3a:	1436      	asrs	r6, r6, #16
 801be3c:	d546      	bpl.n	801becc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801be3e:	4699      	mov	r9, r3
 801be40:	462e      	mov	r6, r5
 801be42:	f1b9 0f00 	cmp.w	r9, #0
 801be46:	f300 80ac 	bgt.w	801bfa2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801be4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be52:	441d      	add	r5, r3
 801be54:	9b01      	ldr	r3, [sp, #4]
 801be56:	2b00      	cmp	r3, #0
 801be58:	f340 8105 	ble.w	801c066 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801be5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be66:	eeb0 6a62 	vmov.f32	s12, s5
 801be6a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be76:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801be7a:	eeb0 6a43 	vmov.f32	s12, s6
 801be7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be82:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801be86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be9e:	ee12 2a90 	vmov	r2, s5
 801bea2:	eef0 2a47 	vmov.f32	s5, s14
 801bea6:	fb92 f3f3 	sdiv	r3, r2, r3
 801beaa:	ee13 2a10 	vmov	r2, s6
 801beae:	9313      	str	r3, [sp, #76]	; 0x4c
 801beb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801beb2:	eeb0 3a67 	vmov.f32	s6, s15
 801beb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801beba:	9314      	str	r3, [sp, #80]	; 0x50
 801bebc:	9b01      	ldr	r3, [sp, #4]
 801bebe:	9a04      	ldr	r2, [sp, #16]
 801bec0:	3b01      	subs	r3, #1
 801bec2:	9301      	str	r3, [sp, #4]
 801bec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bec6:	bf08      	it	eq
 801bec8:	4613      	moveq	r3, r2
 801beca:	e793      	b.n	801bdf4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801becc:	45b6      	cmp	lr, r6
 801bece:	ddb6      	ble.n	801be3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bed0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bed2:	fb06 0202 	mla	r2, r6, r2, r0
 801bed6:	1412      	asrs	r2, r2, #16
 801bed8:	d4b1      	bmi.n	801be3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801beda:	4542      	cmp	r2, r8
 801bedc:	daaf      	bge.n	801be3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bede:	1cee      	adds	r6, r5, #3
 801bee0:	4699      	mov	r9, r3
 801bee2:	f1b9 0f00 	cmp.w	r9, #0
 801bee6:	ddb0      	ble.n	801be4a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801bee8:	1422      	asrs	r2, r4, #16
 801beea:	9902      	ldr	r1, [sp, #8]
 801beec:	1407      	asrs	r7, r0, #16
 801beee:	fb01 2707 	mla	r7, r1, r7, r2
 801bef2:	9903      	ldr	r1, [sp, #12]
 801bef4:	087a      	lsrs	r2, r7, #1
 801bef6:	5c8a      	ldrb	r2, [r1, r2]
 801bef8:	07f9      	lsls	r1, r7, #31
 801befa:	bf54      	ite	pl
 801befc:	f002 020f 	andpl.w	r2, r2, #15
 801bf00:	1112      	asrmi	r2, r2, #4
 801bf02:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bf06:	b2d2      	uxtb	r2, r2
 801bf08:	2a00      	cmp	r2, #0
 801bf0a:	d042      	beq.n	801bf92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801bf0c:	4957      	ldr	r1, [pc, #348]	; (801c06c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801bf0e:	680f      	ldr	r7, [r1, #0]
 801bf10:	9905      	ldr	r1, [sp, #20]
 801bf12:	fa5f fb87 	uxtb.w	fp, r7
 801bf16:	434a      	muls	r2, r1
 801bf18:	f102 0c01 	add.w	ip, r2, #1
 801bf1c:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801bf20:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801bf24:	1212      	asrs	r2, r2, #8
 801bf26:	fa1f fa82 	uxth.w	sl, r2
 801bf2a:	43d2      	mvns	r2, r2
 801bf2c:	fb1b fb0a 	smulbb	fp, fp, sl
 801bf30:	b2d2      	uxtb	r2, r2
 801bf32:	fb0c bc02 	mla	ip, ip, r2, fp
 801bf36:	fa1f fc8c 	uxth.w	ip, ip
 801bf3a:	f10c 0b01 	add.w	fp, ip, #1
 801bf3e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bf42:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bf46:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bf4a:	fb1b fb0a 	smulbb	fp, fp, sl
 801bf4e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bf52:	fb17 fa0a 	smulbb	sl, r7, sl
 801bf56:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bf5a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801bf5e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801bf62:	fb07 aa02 	mla	sl, r7, r2, sl
 801bf66:	fb0c bc02 	mla	ip, ip, r2, fp
 801bf6a:	fa1f fa8a 	uxth.w	sl, sl
 801bf6e:	fa1f fc8c 	uxth.w	ip, ip
 801bf72:	f10a 0701 	add.w	r7, sl, #1
 801bf76:	f10c 0b01 	add.w	fp, ip, #1
 801bf7a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bf7e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bf82:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bf86:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bf8a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801bf8e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801bf92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf94:	3603      	adds	r6, #3
 801bf96:	f109 39ff 	add.w	r9, r9, #4294967295
 801bf9a:	4414      	add	r4, r2
 801bf9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bf9e:	4410      	add	r0, r2
 801bfa0:	e79f      	b.n	801bee2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801bfa2:	1422      	asrs	r2, r4, #16
 801bfa4:	d457      	bmi.n	801c056 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bfa6:	4596      	cmp	lr, r2
 801bfa8:	dd55      	ble.n	801c056 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bfaa:	1407      	asrs	r7, r0, #16
 801bfac:	d453      	bmi.n	801c056 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bfae:	4547      	cmp	r7, r8
 801bfb0:	da51      	bge.n	801c056 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bfb2:	9902      	ldr	r1, [sp, #8]
 801bfb4:	fb07 2701 	mla	r7, r7, r1, r2
 801bfb8:	9903      	ldr	r1, [sp, #12]
 801bfba:	087a      	lsrs	r2, r7, #1
 801bfbc:	07ff      	lsls	r7, r7, #31
 801bfbe:	5c8a      	ldrb	r2, [r1, r2]
 801bfc0:	bf54      	ite	pl
 801bfc2:	f002 020f 	andpl.w	r2, r2, #15
 801bfc6:	1112      	asrmi	r2, r2, #4
 801bfc8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bfcc:	b2d2      	uxtb	r2, r2
 801bfce:	2a00      	cmp	r2, #0
 801bfd0:	d041      	beq.n	801c056 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bfd2:	4926      	ldr	r1, [pc, #152]	; (801c06c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801bfd4:	680f      	ldr	r7, [r1, #0]
 801bfd6:	9905      	ldr	r1, [sp, #20]
 801bfd8:	fa5f fb87 	uxtb.w	fp, r7
 801bfdc:	434a      	muls	r2, r1
 801bfde:	f102 0c01 	add.w	ip, r2, #1
 801bfe2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801bfe6:	f896 c000 	ldrb.w	ip, [r6]
 801bfea:	1212      	asrs	r2, r2, #8
 801bfec:	fa1f fa82 	uxth.w	sl, r2
 801bff0:	43d2      	mvns	r2, r2
 801bff2:	fb1b fb0a 	smulbb	fp, fp, sl
 801bff6:	b2d2      	uxtb	r2, r2
 801bff8:	fb0c bc02 	mla	ip, ip, r2, fp
 801bffc:	fa1f fc8c 	uxth.w	ip, ip
 801c000:	f10c 0b01 	add.w	fp, ip, #1
 801c004:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c008:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c00c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c010:	fb1b fb0a 	smulbb	fp, fp, sl
 801c014:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c018:	fb17 fa0a 	smulbb	sl, r7, sl
 801c01c:	78b7      	ldrb	r7, [r6, #2]
 801c01e:	f886 c000 	strb.w	ip, [r6]
 801c022:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c026:	fb07 aa02 	mla	sl, r7, r2, sl
 801c02a:	fb0c bc02 	mla	ip, ip, r2, fp
 801c02e:	fa1f fa8a 	uxth.w	sl, sl
 801c032:	fa1f fc8c 	uxth.w	ip, ip
 801c036:	f10a 0701 	add.w	r7, sl, #1
 801c03a:	f10c 0b01 	add.w	fp, ip, #1
 801c03e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c042:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c046:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c04a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c04e:	f886 a002 	strb.w	sl, [r6, #2]
 801c052:	f886 c001 	strb.w	ip, [r6, #1]
 801c056:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c058:	3603      	adds	r6, #3
 801c05a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c05e:	4414      	add	r4, r2
 801c060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c062:	4410      	add	r0, r2
 801c064:	e6ed      	b.n	801be42 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801c066:	b007      	add	sp, #28
 801c068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c06c:	2000bca0 	.word	0x2000bca0

0801c070 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c074:	b087      	sub	sp, #28
 801c076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c07a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c07c:	9205      	str	r2, [sp, #20]
 801c07e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801c082:	6860      	ldr	r0, [r4, #4]
 801c084:	9202      	str	r2, [sp, #8]
 801c086:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801c08a:	9101      	str	r1, [sp, #4]
 801c08c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801c090:	fb00 2606 	mla	r6, r0, r6, r2
 801c094:	6822      	ldr	r2, [r4, #0]
 801c096:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c09a:	4416      	add	r6, r2
 801c09c:	f108 0201 	add.w	r2, r8, #1
 801c0a0:	f022 0201 	bic.w	r2, r2, #1
 801c0a4:	9203      	str	r2, [sp, #12]
 801c0a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c0a8:	6812      	ldr	r2, [r2, #0]
 801c0aa:	9204      	str	r2, [sp, #16]
 801c0ac:	9a01      	ldr	r2, [sp, #4]
 801c0ae:	2a00      	cmp	r2, #0
 801c0b0:	dc03      	bgt.n	801c0ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c0b2:	9a05      	ldr	r2, [sp, #20]
 801c0b4:	2a00      	cmp	r2, #0
 801c0b6:	f340 813a 	ble.w	801c32e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801c0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0bc:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801c0c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c0c2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	dd0f      	ble.n	801c0ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c0ca:	142a      	asrs	r2, r5, #16
 801c0cc:	d406      	bmi.n	801c0dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c0ce:	4590      	cmp	r8, r2
 801c0d0:	dd04      	ble.n	801c0dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c0d2:	1422      	asrs	r2, r4, #16
 801c0d4:	d402      	bmi.n	801c0dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c0d6:	9802      	ldr	r0, [sp, #8]
 801c0d8:	4282      	cmp	r2, r0
 801c0da:	db07      	blt.n	801c0ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c0dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0de:	3b01      	subs	r3, #1
 801c0e0:	3603      	adds	r6, #3
 801c0e2:	4415      	add	r5, r2
 801c0e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0e6:	4414      	add	r4, r2
 801c0e8:	e7ed      	b.n	801c0c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c0ea:	d073      	beq.n	801c1d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801c0ec:	1e5a      	subs	r2, r3, #1
 801c0ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c0f0:	fb00 5002 	mla	r0, r0, r2, r5
 801c0f4:	1400      	asrs	r0, r0, #16
 801c0f6:	d464      	bmi.n	801c1c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c0f8:	4580      	cmp	r8, r0
 801c0fa:	dd62      	ble.n	801c1c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c0fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c0fe:	fb00 4202 	mla	r2, r0, r2, r4
 801c102:	1412      	asrs	r2, r2, #16
 801c104:	d45d      	bmi.n	801c1c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c106:	9802      	ldr	r0, [sp, #8]
 801c108:	4282      	cmp	r2, r0
 801c10a:	da5a      	bge.n	801c1c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c10c:	1cf0      	adds	r0, r6, #3
 801c10e:	469a      	mov	sl, r3
 801c110:	f1ba 0f00 	cmp.w	sl, #0
 801c114:	dd59      	ble.n	801c1ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801c116:	142a      	asrs	r2, r5, #16
 801c118:	9903      	ldr	r1, [sp, #12]
 801c11a:	1427      	asrs	r7, r4, #16
 801c11c:	fb01 2707 	mla	r7, r1, r7, r2
 801c120:	9904      	ldr	r1, [sp, #16]
 801c122:	087a      	lsrs	r2, r7, #1
 801c124:	5c8a      	ldrb	r2, [r1, r2]
 801c126:	07f9      	lsls	r1, r7, #31
 801c128:	bf54      	ite	pl
 801c12a:	f002 020f 	andpl.w	r2, r2, #15
 801c12e:	1112      	asrmi	r2, r2, #4
 801c130:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c134:	b2d2      	uxtb	r2, r2
 801c136:	2a00      	cmp	r2, #0
 801c138:	d03b      	beq.n	801c1b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c13a:	497e      	ldr	r1, [pc, #504]	; (801c334 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801c13c:	2aff      	cmp	r2, #255	; 0xff
 801c13e:	680f      	ldr	r7, [r1, #0]
 801c140:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c144:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c148:	b2ff      	uxtb	r7, r7
 801c14a:	f000 80e9 	beq.w	801c320 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c14e:	fa1f fe82 	uxth.w	lr, r2
 801c152:	43d2      	mvns	r2, r2
 801c154:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801c158:	fb17 f70e 	smulbb	r7, r7, lr
 801c15c:	b2d2      	uxtb	r2, r2
 801c15e:	fb19 f90e 	smulbb	r9, r9, lr
 801c162:	fb0c 7702 	mla	r7, ip, r2, r7
 801c166:	fb1b fe0e 	smulbb	lr, fp, lr
 801c16a:	b2bf      	uxth	r7, r7
 801c16c:	f107 0c01 	add.w	ip, r7, #1
 801c170:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c174:	123f      	asrs	r7, r7, #8
 801c176:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c17a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c17e:	fb07 9902 	mla	r9, r7, r2, r9
 801c182:	fa1f f989 	uxth.w	r9, r9
 801c186:	f109 0701 	add.w	r7, r9, #1
 801c18a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c18e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c192:	fb07 ee02 	mla	lr, r7, r2, lr
 801c196:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c19a:	fa1f fe8e 	uxth.w	lr, lr
 801c19e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c1a2:	f10e 0201 	add.w	r2, lr, #1
 801c1a6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c1aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c1ae:	f800 ec01 	strb.w	lr, [r0, #-1]
 801c1b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1b4:	3003      	adds	r0, #3
 801c1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c1ba:	4415      	add	r5, r2
 801c1bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c1be:	4414      	add	r4, r2
 801c1c0:	e7a6      	b.n	801c110 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c1c2:	2700      	movs	r7, #0
 801c1c4:	1bda      	subs	r2, r3, r7
 801c1c6:	2a00      	cmp	r2, #0
 801c1c8:	dc40      	bgt.n	801c24c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c1ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1d2:	441e      	add	r6, r3
 801c1d4:	9b01      	ldr	r3, [sp, #4]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	f340 80a9 	ble.w	801c32e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801c1dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c1e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1e6:	eeb0 6a62 	vmov.f32	s12, s5
 801c1ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c1ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c1f6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c1fa:	eeb0 6a43 	vmov.f32	s12, s6
 801c1fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c202:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c206:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c20a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c20e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c212:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c216:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c21a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c21e:	ee12 2a90 	vmov	r2, s5
 801c222:	eef0 2a47 	vmov.f32	s5, s14
 801c226:	fb92 f3f3 	sdiv	r3, r2, r3
 801c22a:	ee13 2a10 	vmov	r2, s6
 801c22e:	9313      	str	r3, [sp, #76]	; 0x4c
 801c230:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c232:	eeb0 3a67 	vmov.f32	s6, s15
 801c236:	fb92 f3f3 	sdiv	r3, r2, r3
 801c23a:	9314      	str	r3, [sp, #80]	; 0x50
 801c23c:	9b01      	ldr	r3, [sp, #4]
 801c23e:	9a05      	ldr	r2, [sp, #20]
 801c240:	3b01      	subs	r3, #1
 801c242:	9301      	str	r3, [sp, #4]
 801c244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c246:	bf08      	it	eq
 801c248:	4613      	moveq	r3, r2
 801c24a:	e72f      	b.n	801c0ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c24c:	142a      	asrs	r2, r5, #16
 801c24e:	d458      	bmi.n	801c302 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c250:	4590      	cmp	r8, r2
 801c252:	dd56      	ble.n	801c302 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c254:	1420      	asrs	r0, r4, #16
 801c256:	d454      	bmi.n	801c302 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c258:	9902      	ldr	r1, [sp, #8]
 801c25a:	4288      	cmp	r0, r1
 801c25c:	da51      	bge.n	801c302 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c25e:	9903      	ldr	r1, [sp, #12]
 801c260:	fb00 2001 	mla	r0, r0, r1, r2
 801c264:	9904      	ldr	r1, [sp, #16]
 801c266:	0842      	lsrs	r2, r0, #1
 801c268:	07c0      	lsls	r0, r0, #31
 801c26a:	5c8a      	ldrb	r2, [r1, r2]
 801c26c:	bf54      	ite	pl
 801c26e:	f002 020f 	andpl.w	r2, r2, #15
 801c272:	1112      	asrmi	r2, r2, #4
 801c274:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c278:	b2d2      	uxtb	r2, r2
 801c27a:	2a00      	cmp	r2, #0
 801c27c:	d041      	beq.n	801c302 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c27e:	492d      	ldr	r1, [pc, #180]	; (801c334 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801c280:	2aff      	cmp	r2, #255	; 0xff
 801c282:	6808      	ldr	r0, [r1, #0]
 801c284:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c288:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c28c:	fa5f fc80 	uxtb.w	ip, r0
 801c290:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c294:	d03b      	beq.n	801c30e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801c296:	fa1f f982 	uxth.w	r9, r2
 801c29a:	4438      	add	r0, r7
 801c29c:	43d2      	mvns	r2, r2
 801c29e:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c2a2:	fb1c fc09 	smulbb	ip, ip, r9
 801c2a6:	fb1a fa09 	smulbb	sl, sl, r9
 801c2aa:	b2d2      	uxtb	r2, r2
 801c2ac:	fb1b f909 	smulbb	r9, fp, r9
 801c2b0:	fb0e cc02 	mla	ip, lr, r2, ip
 801c2b4:	fa1f fc8c 	uxth.w	ip, ip
 801c2b8:	f10c 0e01 	add.w	lr, ip, #1
 801c2bc:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801c2c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c2c4:	f806 c000 	strb.w	ip, [r6, r0]
 801c2c8:	4430      	add	r0, r6
 801c2ca:	f890 c001 	ldrb.w	ip, [r0, #1]
 801c2ce:	fb0c aa02 	mla	sl, ip, r2, sl
 801c2d2:	fa1f fa8a 	uxth.w	sl, sl
 801c2d6:	f10a 0c01 	add.w	ip, sl, #1
 801c2da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c2de:	f890 c002 	ldrb.w	ip, [r0, #2]
 801c2e2:	fb0c 9902 	mla	r9, ip, r2, r9
 801c2e6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c2ea:	fa1f f989 	uxth.w	r9, r9
 801c2ee:	f880 a001 	strb.w	sl, [r0, #1]
 801c2f2:	f109 0201 	add.w	r2, r9, #1
 801c2f6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c2fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c2fe:	f880 9002 	strb.w	r9, [r0, #2]
 801c302:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c304:	3701      	adds	r7, #1
 801c306:	4415      	add	r5, r2
 801c308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c30a:	4414      	add	r4, r2
 801c30c:	e75a      	b.n	801c1c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c30e:	4438      	add	r0, r7
 801c310:	f806 c000 	strb.w	ip, [r6, r0]
 801c314:	4430      	add	r0, r6
 801c316:	f880 a001 	strb.w	sl, [r0, #1]
 801c31a:	f880 b002 	strb.w	fp, [r0, #2]
 801c31e:	e7f0      	b.n	801c302 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c320:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c324:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c328:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c32c:	e741      	b.n	801c1b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c32e:	b007      	add	sp, #28
 801c330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c334:	2000bca0 	.word	0x2000bca0

0801c338 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c338:	4770      	bx	lr

0801c33a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c33a:	4770      	bx	lr

0801c33c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c33c:	4770      	bx	lr

0801c33e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c33e:	4770      	bx	lr

0801c340 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c340:	4770      	bx	lr

0801c342 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c342:	4770      	bx	lr

0801c344 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c344:	4770      	bx	lr

0801c346 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c346:	4770      	bx	lr

0801c348 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c348:	4770      	bx	lr

0801c34a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c34a:	4770      	bx	lr

0801c34c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c34c:	4770      	bx	lr

0801c34e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c34e:	4770      	bx	lr

0801c350 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c350:	4770      	bx	lr

0801c352 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c352:	4770      	bx	lr

0801c354 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c354:	4770      	bx	lr

0801c356 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c356:	4770      	bx	lr

0801c358 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c358:	4770      	bx	lr

0801c35a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c35a:	4770      	bx	lr

0801c35c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c35c:	4770      	bx	lr

0801c35e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c35e:	4770      	bx	lr

0801c360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c360:	2bff      	cmp	r3, #255	; 0xff
 801c362:	b508      	push	{r3, lr}
 801c364:	d04f      	beq.n	801c406 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801c366:	2a2c      	cmp	r2, #44	; 0x2c
 801c368:	d032      	beq.n	801c3d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801c36a:	d80f      	bhi.n	801c38c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801c36c:	2a08      	cmp	r2, #8
 801c36e:	d046      	beq.n	801c3fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c370:	d805      	bhi.n	801c37e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801c372:	2a04      	cmp	r2, #4
 801c374:	d041      	beq.n	801c3fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c376:	2a05      	cmp	r2, #5
 801c378:	d03d      	beq.n	801c3f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801c37a:	2000      	movs	r0, #0
 801c37c:	e027      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c37e:	2a0a      	cmp	r2, #10
 801c380:	d03d      	beq.n	801c3fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c382:	d301      	bcc.n	801c388 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801c384:	2a0b      	cmp	r2, #11
 801c386:	d1f8      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c388:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801c38a:	e020      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c38c:	2a30      	cmp	r2, #48	; 0x30
 801c38e:	d038      	beq.n	801c402 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c390:	d808      	bhi.n	801c3a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801c392:	2a2e      	cmp	r2, #46	; 0x2e
 801c394:	684b      	ldr	r3, [r1, #4]
 801c396:	d029      	beq.n	801c3ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801c398:	d90b      	bls.n	801c3b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801c39a:	781b      	ldrb	r3, [r3, #0]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d1ec      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c3a0:	6a00      	ldr	r0, [r0, #32]
 801c3a2:	e014      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c3a4:	2a32      	cmp	r2, #50	; 0x32
 801c3a6:	d02c      	beq.n	801c402 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c3a8:	d301      	bcc.n	801c3ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801c3aa:	2a33      	cmp	r2, #51	; 0x33
 801c3ac:	d1e5      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c3ae:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801c3b0:	e00d      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c3b2:	781b      	ldrb	r3, [r3, #0]
 801c3b4:	2b01      	cmp	r3, #1
 801c3b6:	d009      	beq.n	801c3cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801c3b8:	d3f2      	bcc.n	801c3a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801c3ba:	2b02      	cmp	r3, #2
 801c3bc:	d1dd      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c3be:	4b39      	ldr	r3, [pc, #228]	; (801c4a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c3c0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801c3c4:	4a38      	ldr	r2, [pc, #224]	; (801c4a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c3c6:	4839      	ldr	r0, [pc, #228]	; (801c4ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801c3c8:	f007 ff3e 	bl	8024248 <__assert_func>
 801c3cc:	6900      	ldr	r0, [r0, #16]
 801c3ce:	bd08      	pop	{r3, pc}
 801c3d0:	684b      	ldr	r3, [r1, #4]
 801c3d2:	781b      	ldrb	r3, [r3, #0]
 801c3d4:	2b01      	cmp	r3, #1
 801c3d6:	d007      	beq.n	801c3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801c3d8:	d30b      	bcc.n	801c3f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801c3da:	2b02      	cmp	r3, #2
 801c3dc:	d1cd      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c3de:	4b31      	ldr	r3, [pc, #196]	; (801c4a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c3e0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801c3e4:	4a30      	ldr	r2, [pc, #192]	; (801c4a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c3e6:	e7ee      	b.n	801c3c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c3e8:	6880      	ldr	r0, [r0, #8]
 801c3ea:	e7f0      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c3ec:	781b      	ldrb	r3, [r3, #0]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d1c3      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c3f2:	6980      	ldr	r0, [r0, #24]
 801c3f4:	e7eb      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c3f6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c3f8:	e7e9      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c3fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c3fc:	e7e7      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c3fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c400:	e7e5      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c402:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c404:	e7e3      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c406:	2a2c      	cmp	r2, #44	; 0x2c
 801c408:	d030      	beq.n	801c46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801c40a:	d80f      	bhi.n	801c42c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801c40c:	2a08      	cmp	r2, #8
 801c40e:	d044      	beq.n	801c49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c410:	d805      	bhi.n	801c41e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801c412:	2a04      	cmp	r2, #4
 801c414:	d03f      	beq.n	801c496 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801c416:	2a05      	cmp	r2, #5
 801c418:	d1af      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c41a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c41c:	e7d7      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c41e:	2a0a      	cmp	r2, #10
 801c420:	d03b      	beq.n	801c49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c422:	d301      	bcc.n	801c428 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801c424:	2a0b      	cmp	r2, #11
 801c426:	d1a8      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c428:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c42a:	e7d0      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c42c:	2a30      	cmp	r2, #48	; 0x30
 801c42e:	d036      	beq.n	801c49e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c430:	d808      	bhi.n	801c444 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801c432:	2a2e      	cmp	r2, #46	; 0x2e
 801c434:	684b      	ldr	r3, [r1, #4]
 801c436:	d028      	beq.n	801c48a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801c438:	d90b      	bls.n	801c452 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801c43a:	781b      	ldrb	r3, [r3, #0]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d19c      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c440:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c442:	e7c4      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c444:	2a32      	cmp	r2, #50	; 0x32
 801c446:	d02a      	beq.n	801c49e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c448:	d301      	bcc.n	801c44e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801c44a:	2a33      	cmp	r2, #51	; 0x33
 801c44c:	d195      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c44e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c450:	e7bd      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c452:	781b      	ldrb	r3, [r3, #0]
 801c454:	2b01      	cmp	r3, #1
 801c456:	d007      	beq.n	801c468 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801c458:	d3f2      	bcc.n	801c440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801c45a:	2b02      	cmp	r3, #2
 801c45c:	d18d      	bne.n	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c45e:	4b11      	ldr	r3, [pc, #68]	; (801c4a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c460:	f240 31e1 	movw	r1, #993	; 0x3e1
 801c464:	4a10      	ldr	r2, [pc, #64]	; (801c4a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c466:	e7ae      	b.n	801c3c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c468:	6940      	ldr	r0, [r0, #20]
 801c46a:	e7b0      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c46c:	684b      	ldr	r3, [r1, #4]
 801c46e:	781b      	ldrb	r3, [r3, #0]
 801c470:	2b01      	cmp	r3, #1
 801c472:	d008      	beq.n	801c486 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801c474:	d30d      	bcc.n	801c492 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801c476:	2b02      	cmp	r3, #2
 801c478:	f47f af7f 	bne.w	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c47c:	4b09      	ldr	r3, [pc, #36]	; (801c4a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c47e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801c482:	4a09      	ldr	r2, [pc, #36]	; (801c4a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c484:	e79f      	b.n	801c3c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c486:	68c0      	ldr	r0, [r0, #12]
 801c488:	e7a1      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c48a:	781b      	ldrb	r3, [r3, #0]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	f47f af74 	bne.w	801c37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c492:	69c0      	ldr	r0, [r0, #28]
 801c494:	e79b      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c496:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c498:	e799      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c49a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c49c:	e797      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c49e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c4a0:	e795      	b.n	801c3ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c4a2:	bf00      	nop
 801c4a4:	08028a33 	.word	0x08028a33
 801c4a8:	080291e7 	.word	0x080291e7
 801c4ac:	08028a7f 	.word	0x08028a7f

0801c4b0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801c4b0:	b508      	push	{r3, lr}
 801c4b2:	4b06      	ldr	r3, [pc, #24]	; (801c4cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801c4b4:	8818      	ldrh	r0, [r3, #0]
 801c4b6:	b928      	cbnz	r0, 801c4c4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801c4b8:	4b05      	ldr	r3, [pc, #20]	; (801c4d0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801c4ba:	21d7      	movs	r1, #215	; 0xd7
 801c4bc:	4a05      	ldr	r2, [pc, #20]	; (801c4d4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801c4be:	4806      	ldr	r0, [pc, #24]	; (801c4d8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801c4c0:	f007 fec2 	bl	8024248 <__assert_func>
 801c4c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c4c8:	b280      	uxth	r0, r0
 801c4ca:	bd08      	pop	{r3, pc}
 801c4cc:	2000bc72 	.word	0x2000bc72
 801c4d0:	08028cce 	.word	0x08028cce
 801c4d4:	080291ac 	.word	0x080291ac
 801c4d8:	08028d10 	.word	0x08028d10

0801c4dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4e0:	4616      	mov	r6, r2
 801c4e2:	b087      	sub	sp, #28
 801c4e4:	461f      	mov	r7, r3
 801c4e6:	b33b      	cbz	r3, 801c538 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c4e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c4ec:	b323      	cbz	r3, 801c538 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c4ee:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c4f2:	b30b      	cbz	r3, 801c538 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c4f4:	6808      	ldr	r0, [r1, #0]
 801c4f6:	ab04      	add	r3, sp, #16
 801c4f8:	6849      	ldr	r1, [r1, #4]
 801c4fa:	4c5a      	ldr	r4, [pc, #360]	; (801c664 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801c4fc:	c303      	stmia	r3!, {r0, r1}
 801c4fe:	a804      	add	r0, sp, #16
 801c500:	f7fb fd6e 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c504:	6820      	ldr	r0, [r4, #0]
 801c506:	6803      	ldr	r3, [r0, #0]
 801c508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c50a:	4798      	blx	r3
 801c50c:	2fff      	cmp	r7, #255	; 0xff
 801c50e:	4623      	mov	r3, r4
 801c510:	d015      	beq.n	801c53e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c512:	f010 0f08 	tst.w	r0, #8
 801c516:	d015      	beq.n	801c544 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801c518:	6818      	ldr	r0, [r3, #0]
 801c51a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c51e:	6801      	ldr	r1, [r0, #0]
 801c520:	9401      	str	r4, [sp, #4]
 801c522:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c526:	9702      	str	r7, [sp, #8]
 801c528:	9400      	str	r4, [sp, #0]
 801c52a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c52e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801c530:	4631      	mov	r1, r6
 801c532:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c536:	47a0      	blx	r4
 801c538:	b007      	add	sp, #28
 801c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c53e:	f010 0f02 	tst.w	r0, #2
 801c542:	e7e8      	b.n	801c516 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801c544:	6818      	ldr	r0, [r3, #0]
 801c546:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801c54a:	6803      	ldr	r3, [r0, #0]
 801c54c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801c550:	6a1b      	ldr	r3, [r3, #32]
 801c552:	4798      	blx	r3
 801c554:	4944      	ldr	r1, [pc, #272]	; (801c668 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801c556:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c55a:	2fff      	cmp	r7, #255	; 0xff
 801c55c:	f8b1 c000 	ldrh.w	ip, [r1]
 801c560:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801c564:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c568:	4688      	mov	r8, r1
 801c56a:	fb0c 2303 	mla	r3, ip, r3, r2
 801c56e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801c572:	b2f2      	uxtb	r2, r6
 801c574:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801c578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c57c:	4418      	add	r0, r3
 801c57e:	d112      	bne.n	801c5a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801c580:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c584:	2100      	movs	r1, #0
 801c586:	42a9      	cmp	r1, r5
 801c588:	da66      	bge.n	801c658 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c58a:	4603      	mov	r3, r0
 801c58c:	2700      	movs	r7, #0
 801c58e:	42a7      	cmp	r7, r4
 801c590:	f103 0303 	add.w	r3, r3, #3
 801c594:	da57      	bge.n	801c646 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801c596:	f803 2c03 	strb.w	r2, [r3, #-3]
 801c59a:	3701      	adds	r7, #1
 801c59c:	f803 ec02 	strb.w	lr, [r3, #-2]
 801c5a0:	f803 cc01 	strb.w	ip, [r3, #-1]
 801c5a4:	e7f3      	b.n	801c58e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801c5a6:	b2bb      	uxth	r3, r7
 801c5a8:	f04f 0800 	mov.w	r8, #0
 801c5ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c5b0:	fb0c fc03 	mul.w	ip, ip, r3
 801c5b4:	fb0e fe03 	mul.w	lr, lr, r3
 801c5b8:	435a      	muls	r2, r3
 801c5ba:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801c5be:	460f      	mov	r7, r1
 801c5c0:	b29b      	uxth	r3, r3
 801c5c2:	45a8      	cmp	r8, r5
 801c5c4:	da48      	bge.n	801c658 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c5c6:	4601      	mov	r1, r0
 801c5c8:	f04f 0a00 	mov.w	sl, #0
 801c5cc:	45a2      	cmp	sl, r4
 801c5ce:	f101 0103 	add.w	r1, r1, #3
 801c5d2:	da2f      	bge.n	801c634 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801c5d4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801c5d8:	f10a 0a01 	add.w	sl, sl, #1
 801c5dc:	fb19 f903 	smulbb	r9, r9, r3
 801c5e0:	4491      	add	r9, r2
 801c5e2:	fa1f f989 	uxth.w	r9, r9
 801c5e6:	f109 0b01 	add.w	fp, r9, #1
 801c5ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c5ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c5f2:	f801 9c03 	strb.w	r9, [r1, #-3]
 801c5f6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801c5fa:	fb19 f903 	smulbb	r9, r9, r3
 801c5fe:	44f1      	add	r9, lr
 801c600:	fa1f f989 	uxth.w	r9, r9
 801c604:	f109 0b01 	add.w	fp, r9, #1
 801c608:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c60c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c610:	f801 9c02 	strb.w	r9, [r1, #-2]
 801c614:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801c618:	fb19 f903 	smulbb	r9, r9, r3
 801c61c:	44e1      	add	r9, ip
 801c61e:	fa1f f989 	uxth.w	r9, r9
 801c622:	f109 0b01 	add.w	fp, r9, #1
 801c626:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c62a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c62e:	f801 9c01 	strb.w	r9, [r1, #-1]
 801c632:	e7cb      	b.n	801c5cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801c634:	8839      	ldrh	r1, [r7, #0]
 801c636:	f108 0801 	add.w	r8, r8, #1
 801c63a:	1b09      	subs	r1, r1, r4
 801c63c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c640:	4431      	add	r1, r6
 801c642:	4408      	add	r0, r1
 801c644:	e7bd      	b.n	801c5c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801c646:	f8b8 3000 	ldrh.w	r3, [r8]
 801c64a:	3101      	adds	r1, #1
 801c64c:	1b1b      	subs	r3, r3, r4
 801c64e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c652:	4433      	add	r3, r6
 801c654:	4418      	add	r0, r3
 801c656:	e796      	b.n	801c586 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801c658:	4b02      	ldr	r3, [pc, #8]	; (801c664 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801c65a:	6818      	ldr	r0, [r3, #0]
 801c65c:	6803      	ldr	r3, [r0, #0]
 801c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c660:	4798      	blx	r3
 801c662:	e769      	b.n	801c538 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c664:	2000bc78 	.word	0x2000bc78
 801c668:	2000bc72 	.word	0x2000bc72

0801c66c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c670:	b08d      	sub	sp, #52	; 0x34
 801c672:	460c      	mov	r4, r1
 801c674:	4617      	mov	r7, r2
 801c676:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801c67a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801c67e:	2e00      	cmp	r6, #0
 801c680:	d04a      	beq.n	801c718 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c682:	6810      	ldr	r0, [r2, #0]
 801c684:	ad08      	add	r5, sp, #32
 801c686:	6851      	ldr	r1, [r2, #4]
 801c688:	c503      	stmia	r5!, {r0, r1}
 801c68a:	6818      	ldr	r0, [r3, #0]
 801c68c:	ad0a      	add	r5, sp, #40	; 0x28
 801c68e:	6859      	ldr	r1, [r3, #4]
 801c690:	c503      	stmia	r5!, {r0, r1}
 801c692:	a808      	add	r0, sp, #32
 801c694:	f7fb fca4 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c698:	4639      	mov	r1, r7
 801c69a:	a80a      	add	r0, sp, #40	; 0x28
 801c69c:	4f59      	ldr	r7, [pc, #356]	; (801c804 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801c69e:	f7fb fc87 	bl	8017fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c6a2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c6a6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c6aa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c6ae:	6838      	ldr	r0, [r7, #0]
 801c6b0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c6b4:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801c6b8:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801c6bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c6c0:	440c      	add	r4, r1
 801c6c2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c6c6:	440a      	add	r2, r1
 801c6c8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c6cc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c6d0:	4413      	add	r3, r2
 801c6d2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c6d6:	6803      	ldr	r3, [r0, #0]
 801c6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6da:	4798      	blx	r3
 801c6dc:	2eff      	cmp	r6, #255	; 0xff
 801c6de:	f000 8089 	beq.w	801c7f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801c6e2:	0743      	lsls	r3, r0, #29
 801c6e4:	d405      	bmi.n	801c6f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801c6e6:	f1b9 0f00 	cmp.w	r9, #0
 801c6ea:	d018      	beq.n	801c71e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c6ec:	f010 0f10 	tst.w	r0, #16
 801c6f0:	d015      	beq.n	801c71e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c6f2:	6838      	ldr	r0, [r7, #0]
 801c6f4:	b2ad      	uxth	r5, r5
 801c6f6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c6fa:	6801      	ldr	r1, [r0, #0]
 801c6fc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c700:	9500      	str	r5, [sp, #0]
 801c702:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801c706:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801c70a:	9602      	str	r6, [sp, #8]
 801c70c:	fa1f f688 	uxth.w	r6, r8
 801c710:	9601      	str	r6, [sp, #4]
 801c712:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801c714:	4621      	mov	r1, r4
 801c716:	47a8      	blx	r5
 801c718:	b00d      	add	sp, #52	; 0x34
 801c71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c71e:	6838      	ldr	r0, [r7, #0]
 801c720:	6803      	ldr	r3, [r0, #0]
 801c722:	6a1b      	ldr	r3, [r3, #32]
 801c724:	4798      	blx	r3
 801c726:	4a38      	ldr	r2, [pc, #224]	; (801c808 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801c728:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c72c:	2eff      	cmp	r6, #255	; 0xff
 801c72e:	8813      	ldrh	r3, [r2, #0]
 801c730:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801c734:	fb0c 1303 	mla	r3, ip, r3, r1
 801c738:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801c73c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c740:	4418      	add	r0, r3
 801c742:	d032      	beq.n	801c7aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801c744:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801c748:	f04f 0c00 	mov.w	ip, #0
 801c74c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801c750:	9306      	str	r3, [sp, #24]
 801c752:	45c4      	cmp	ip, r8
 801c754:	da49      	bge.n	801c7ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801c756:	4686      	mov	lr, r0
 801c758:	46a1      	mov	r9, r4
 801c75a:	eba9 0304 	sub.w	r3, r9, r4
 801c75e:	428b      	cmp	r3, r1
 801c760:	da13      	bge.n	801c78a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801c762:	f819 3b01 	ldrb.w	r3, [r9], #1
 801c766:	f89e b000 	ldrb.w	fp, [lr]
 801c76a:	9307      	str	r3, [sp, #28]
 801c76c:	9b06      	ldr	r3, [sp, #24]
 801c76e:	fb1b fb03 	smulbb	fp, fp, r3
 801c772:	9b07      	ldr	r3, [sp, #28]
 801c774:	fb03 b306 	mla	r3, r3, r6, fp
 801c778:	b29b      	uxth	r3, r3
 801c77a:	f103 0b01 	add.w	fp, r3, #1
 801c77e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801c782:	121b      	asrs	r3, r3, #8
 801c784:	f80e 3b01 	strb.w	r3, [lr], #1
 801c788:	e7e7      	b.n	801c75a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801c78a:	8813      	ldrh	r3, [r2, #0]
 801c78c:	f10c 0c01 	add.w	ip, ip, #1
 801c790:	1b5b      	subs	r3, r3, r5
 801c792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c796:	4453      	add	r3, sl
 801c798:	4418      	add	r0, r3
 801c79a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c79e:	1b5b      	subs	r3, r3, r5
 801c7a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7a4:	4453      	add	r3, sl
 801c7a6:	441c      	add	r4, r3
 801c7a8:	e7d3      	b.n	801c752 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801c7aa:	2600      	movs	r6, #0
 801c7ac:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801c7b0:	4546      	cmp	r6, r8
 801c7b2:	da1a      	bge.n	801c7ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801c7b4:	f100 3eff 	add.w	lr, r0, #4294967295
 801c7b8:	4623      	mov	r3, r4
 801c7ba:	eba3 0904 	sub.w	r9, r3, r4
 801c7be:	4589      	cmp	r9, r1
 801c7c0:	da04      	bge.n	801c7cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801c7c2:	f813 9b01 	ldrb.w	r9, [r3], #1
 801c7c6:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801c7ca:	e7f6      	b.n	801c7ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801c7cc:	8813      	ldrh	r3, [r2, #0]
 801c7ce:	3601      	adds	r6, #1
 801c7d0:	1b5b      	subs	r3, r3, r5
 801c7d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7d6:	4463      	add	r3, ip
 801c7d8:	4418      	add	r0, r3
 801c7da:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c7de:	1b5b      	subs	r3, r3, r5
 801c7e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7e4:	4463      	add	r3, ip
 801c7e6:	441c      	add	r4, r3
 801c7e8:	e7e2      	b.n	801c7b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801c7ea:	6838      	ldr	r0, [r7, #0]
 801c7ec:	6803      	ldr	r3, [r0, #0]
 801c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7f0:	4798      	blx	r3
 801c7f2:	e791      	b.n	801c718 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c7f4:	f1b9 0f00 	cmp.w	r9, #0
 801c7f8:	f47f af78 	bne.w	801c6ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801c7fc:	f010 0f01 	tst.w	r0, #1
 801c800:	e776      	b.n	801c6f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801c802:	bf00      	nop
 801c804:	2000bc78 	.word	0x2000bc78
 801c808:	2000bc72 	.word	0x2000bc72

0801c80c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c80c:	b510      	push	{r4, lr}
 801c80e:	4604      	mov	r4, r0
 801c810:	2104      	movs	r1, #4
 801c812:	f007 fcee 	bl	80241f2 <_ZdlPvj>
 801c816:	4620      	mov	r0, r4
 801c818:	bd10      	pop	{r4, pc}

0801c81a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c81a:	b510      	push	{r4, lr}
 801c81c:	4604      	mov	r4, r0
 801c81e:	2104      	movs	r1, #4
 801c820:	f007 fce7 	bl	80241f2 <_ZdlPvj>
 801c824:	4620      	mov	r0, r4
 801c826:	bd10      	pop	{r4, pc}

0801c828 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c828:	b510      	push	{r4, lr}
 801c82a:	4604      	mov	r4, r0
 801c82c:	2104      	movs	r1, #4
 801c82e:	f007 fce0 	bl	80241f2 <_ZdlPvj>
 801c832:	4620      	mov	r0, r4
 801c834:	bd10      	pop	{r4, pc}

0801c836 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c836:	b510      	push	{r4, lr}
 801c838:	4604      	mov	r4, r0
 801c83a:	2104      	movs	r1, #4
 801c83c:	f007 fcd9 	bl	80241f2 <_ZdlPvj>
 801c840:	4620      	mov	r0, r4
 801c842:	bd10      	pop	{r4, pc}

0801c844 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c844:	b510      	push	{r4, lr}
 801c846:	4604      	mov	r4, r0
 801c848:	2104      	movs	r1, #4
 801c84a:	f007 fcd2 	bl	80241f2 <_ZdlPvj>
 801c84e:	4620      	mov	r0, r4
 801c850:	bd10      	pop	{r4, pc}

0801c852 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c852:	b510      	push	{r4, lr}
 801c854:	4604      	mov	r4, r0
 801c856:	2104      	movs	r1, #4
 801c858:	f007 fccb 	bl	80241f2 <_ZdlPvj>
 801c85c:	4620      	mov	r0, r4
 801c85e:	bd10      	pop	{r4, pc}

0801c860 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c860:	b510      	push	{r4, lr}
 801c862:	4604      	mov	r4, r0
 801c864:	2104      	movs	r1, #4
 801c866:	f007 fcc4 	bl	80241f2 <_ZdlPvj>
 801c86a:	4620      	mov	r0, r4
 801c86c:	bd10      	pop	{r4, pc}

0801c86e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c86e:	b510      	push	{r4, lr}
 801c870:	4604      	mov	r4, r0
 801c872:	2104      	movs	r1, #4
 801c874:	f007 fcbd 	bl	80241f2 <_ZdlPvj>
 801c878:	4620      	mov	r0, r4
 801c87a:	bd10      	pop	{r4, pc}

0801c87c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c87c:	b510      	push	{r4, lr}
 801c87e:	4604      	mov	r4, r0
 801c880:	2104      	movs	r1, #4
 801c882:	f007 fcb6 	bl	80241f2 <_ZdlPvj>
 801c886:	4620      	mov	r0, r4
 801c888:	bd10      	pop	{r4, pc}

0801c88a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c88a:	b510      	push	{r4, lr}
 801c88c:	4604      	mov	r4, r0
 801c88e:	2104      	movs	r1, #4
 801c890:	f007 fcaf 	bl	80241f2 <_ZdlPvj>
 801c894:	4620      	mov	r0, r4
 801c896:	bd10      	pop	{r4, pc}

0801c898 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c898:	b510      	push	{r4, lr}
 801c89a:	4604      	mov	r4, r0
 801c89c:	2104      	movs	r1, #4
 801c89e:	f007 fca8 	bl	80241f2 <_ZdlPvj>
 801c8a2:	4620      	mov	r0, r4
 801c8a4:	bd10      	pop	{r4, pc}

0801c8a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c8a6:	b510      	push	{r4, lr}
 801c8a8:	4604      	mov	r4, r0
 801c8aa:	2104      	movs	r1, #4
 801c8ac:	f007 fca1 	bl	80241f2 <_ZdlPvj>
 801c8b0:	4620      	mov	r0, r4
 801c8b2:	bd10      	pop	{r4, pc}

0801c8b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c8b4:	b510      	push	{r4, lr}
 801c8b6:	4604      	mov	r4, r0
 801c8b8:	2104      	movs	r1, #4
 801c8ba:	f007 fc9a 	bl	80241f2 <_ZdlPvj>
 801c8be:	4620      	mov	r0, r4
 801c8c0:	bd10      	pop	{r4, pc}

0801c8c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c8c2:	b510      	push	{r4, lr}
 801c8c4:	4604      	mov	r4, r0
 801c8c6:	2104      	movs	r1, #4
 801c8c8:	f007 fc93 	bl	80241f2 <_ZdlPvj>
 801c8cc:	4620      	mov	r0, r4
 801c8ce:	bd10      	pop	{r4, pc}

0801c8d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c8d0:	b510      	push	{r4, lr}
 801c8d2:	4604      	mov	r4, r0
 801c8d4:	2104      	movs	r1, #4
 801c8d6:	f007 fc8c 	bl	80241f2 <_ZdlPvj>
 801c8da:	4620      	mov	r0, r4
 801c8dc:	bd10      	pop	{r4, pc}

0801c8de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c8de:	b510      	push	{r4, lr}
 801c8e0:	4604      	mov	r4, r0
 801c8e2:	2104      	movs	r1, #4
 801c8e4:	f007 fc85 	bl	80241f2 <_ZdlPvj>
 801c8e8:	4620      	mov	r0, r4
 801c8ea:	bd10      	pop	{r4, pc}

0801c8ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c8ec:	b510      	push	{r4, lr}
 801c8ee:	4604      	mov	r4, r0
 801c8f0:	2104      	movs	r1, #4
 801c8f2:	f007 fc7e 	bl	80241f2 <_ZdlPvj>
 801c8f6:	4620      	mov	r0, r4
 801c8f8:	bd10      	pop	{r4, pc}

0801c8fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c8fa:	b510      	push	{r4, lr}
 801c8fc:	4604      	mov	r4, r0
 801c8fe:	2104      	movs	r1, #4
 801c900:	f007 fc77 	bl	80241f2 <_ZdlPvj>
 801c904:	4620      	mov	r0, r4
 801c906:	bd10      	pop	{r4, pc}

0801c908 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c908:	b510      	push	{r4, lr}
 801c90a:	4604      	mov	r4, r0
 801c90c:	2104      	movs	r1, #4
 801c90e:	f007 fc70 	bl	80241f2 <_ZdlPvj>
 801c912:	4620      	mov	r0, r4
 801c914:	bd10      	pop	{r4, pc}

0801c916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c916:	b510      	push	{r4, lr}
 801c918:	4604      	mov	r4, r0
 801c91a:	2104      	movs	r1, #4
 801c91c:	f007 fc69 	bl	80241f2 <_ZdlPvj>
 801c920:	4620      	mov	r0, r4
 801c922:	bd10      	pop	{r4, pc}

0801c924 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c928:	4d9e      	ldr	r5, [pc, #632]	; (801cba4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c92a:	4690      	mov	r8, r2
 801c92c:	b08f      	sub	sp, #60	; 0x3c
 801c92e:	4604      	mov	r4, r0
 801c930:	682a      	ldr	r2, [r5, #0]
 801c932:	4689      	mov	r9, r1
 801c934:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c938:	2a02      	cmp	r2, #2
 801c93a:	d106      	bne.n	801c94a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c93c:	4b9a      	ldr	r3, [pc, #616]	; (801cba8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801c93e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801c942:	4a9a      	ldr	r2, [pc, #616]	; (801cbac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c944:	489a      	ldr	r0, [pc, #616]	; (801cbb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801c946:	f007 fc7f 	bl	8024248 <__assert_func>
 801c94a:	ae0e      	add	r6, sp, #56	; 0x38
 801c94c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801c950:	4630      	mov	r0, r6
 801c952:	f7fe f8b3 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c956:	6823      	ldr	r3, [r4, #0]
 801c958:	4607      	mov	r7, r0
 801c95a:	4620      	mov	r0, r4
 801c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c95e:	4798      	blx	r3
 801c960:	4287      	cmp	r7, r0
 801c962:	d004      	beq.n	801c96e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c964:	4b93      	ldr	r3, [pc, #588]	; (801cbb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801c966:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801c96a:	4a90      	ldr	r2, [pc, #576]	; (801cbac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c96c:	e7ea      	b.n	801c944 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c96e:	4630      	mov	r0, r6
 801c970:	f7fe f820 	bl	801a9b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c974:	4607      	mov	r7, r0
 801c976:	b920      	cbnz	r0, 801c982 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c978:	4b8f      	ldr	r3, [pc, #572]	; (801cbb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801c97a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801c97e:	4a8b      	ldr	r2, [pc, #556]	; (801cbac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c980:	e7e0      	b.n	801c944 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c982:	f8d8 0000 	ldr.w	r0, [r8]
 801c986:	ab06      	add	r3, sp, #24
 801c988:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c98c:	f9b8 a000 	ldrsh.w	sl, [r8]
 801c990:	c303      	stmia	r3!, {r0, r1}
 801c992:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c996:	ab08      	add	r3, sp, #32
 801c998:	f8d9 0000 	ldr.w	r0, [r9]
 801c99c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801c9a0:	c303      	stmia	r3!, {r0, r1}
 801c9a2:	4630      	mov	r0, r6
 801c9a4:	f7fd fefe 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c9a8:	4680      	mov	r8, r0
 801c9aa:	4630      	mov	r0, r6
 801c9ac:	4e83      	ldr	r6, [pc, #524]	; (801cbbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801c9ae:	f7fd ff33 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c9b2:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801c9b6:	f10d 0920 	add.w	r9, sp, #32
 801c9ba:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801c9be:	a806      	add	r0, sp, #24
 801c9c0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c9c4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801c9c8:	f7fb fb0a 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9cc:	4648      	mov	r0, r9
 801c9ce:	f7fb fb07 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9d2:	a80a      	add	r0, sp, #40	; 0x28
 801c9d4:	f7fb fb04 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9d8:	4b79      	ldr	r3, [pc, #484]	; (801cbc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801c9da:	2100      	movs	r1, #0
 801c9dc:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c9e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9e4:	4648      	mov	r0, r9
 801c9e6:	910c      	str	r1, [sp, #48]	; 0x30
 801c9e8:	a90c      	add	r1, sp, #48	; 0x30
 801c9ea:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c9ee:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c9f2:	f7f8 fac9 	bl	8014f88 <_ZN8touchgfx4RectaNERKS0_>
 801c9f6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801c9fa:	9602      	str	r6, [sp, #8]
 801c9fc:	f1bc 0f00 	cmp.w	ip, #0
 801ca00:	f000 80a4 	beq.w	801cb4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ca04:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801ca08:	2e00      	cmp	r6, #0
 801ca0a:	f000 809f 	beq.w	801cb4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ca0e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801ca12:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801ca16:	4288      	cmp	r0, r1
 801ca18:	db36      	blt.n	801ca88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801ca1a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801ca1e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ca22:	429a      	cmp	r2, r3
 801ca24:	db30      	blt.n	801ca88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801ca26:	4460      	add	r0, ip
 801ca28:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801ca2c:	4461      	add	r1, ip
 801ca2e:	b200      	sxth	r0, r0
 801ca30:	b209      	sxth	r1, r1
 801ca32:	4288      	cmp	r0, r1
 801ca34:	dc28      	bgt.n	801ca88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801ca36:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801ca3a:	4432      	add	r2, r6
 801ca3c:	440b      	add	r3, r1
 801ca3e:	b212      	sxth	r2, r2
 801ca40:	b21b      	sxth	r3, r3
 801ca42:	429a      	cmp	r2, r3
 801ca44:	dc20      	bgt.n	801ca88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801ca46:	6823      	ldr	r3, [r4, #0]
 801ca48:	4620      	mov	r0, r4
 801ca4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca4c:	4798      	blx	r3
 801ca4e:	4682      	mov	sl, r0
 801ca50:	6828      	ldr	r0, [r5, #0]
 801ca52:	6803      	ldr	r3, [r0, #0]
 801ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca56:	4798      	blx	r3
 801ca58:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ca5c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ca60:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ca64:	9303      	str	r3, [sp, #12]
 801ca66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ca6a:	1a9b      	subs	r3, r3, r2
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	b21c      	sxth	r4, r3
 801ca70:	2c00      	cmp	r4, #0
 801ca72:	dc0e      	bgt.n	801ca92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801ca74:	b134      	cbz	r4, 801ca84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801ca76:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ca7a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ca7e:	4413      	add	r3, r2
 801ca80:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ca84:	463c      	mov	r4, r7
 801ca86:	e00b      	b.n	801caa0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ca88:	4b4e      	ldr	r3, [pc, #312]	; (801cbc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ca8a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ca8e:	4a47      	ldr	r2, [pc, #284]	; (801cbac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ca90:	e758      	b.n	801c944 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ca92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca96:	ebab 0303 	sub.w	r3, fp, r3
 801ca9a:	443c      	add	r4, r7
 801ca9c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801caa0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801caa4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801caa8:	1a9b      	subs	r3, r3, r2
 801caaa:	b29b      	uxth	r3, r3
 801caac:	b219      	sxth	r1, r3
 801caae:	2900      	cmp	r1, #0
 801cab0:	dd50      	ble.n	801cb54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801cab2:	9a03      	ldr	r2, [sp, #12]
 801cab4:	fb02 4401 	mla	r4, r2, r1, r4
 801cab8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801cabc:	1ad3      	subs	r3, r2, r3
 801cabe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801cac2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cac6:	f1bc 0f00 	cmp.w	ip, #0
 801caca:	dd3f      	ble.n	801cb4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cacc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cad0:	2e00      	cmp	r6, #0
 801cad2:	dd3b      	ble.n	801cb4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cad4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801cad8:	2203      	movs	r2, #3
 801cada:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cade:	fb0a f801 	mul.w	r8, sl, r1
 801cae2:	fb13 8802 	smlabb	r8, r3, r2, r8
 801cae6:	9a02      	ldr	r2, [sp, #8]
 801cae8:	4480      	add	r8, r0
 801caea:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801caee:	8812      	ldrh	r2, [r2, #0]
 801caf0:	4584      	cmp	ip, r0
 801caf2:	eba2 0303 	sub.w	r3, r2, r3
 801caf6:	bfa8      	it	ge
 801caf8:	4684      	movge	ip, r0
 801cafa:	459c      	cmp	ip, r3
 801cafc:	bfa8      	it	ge
 801cafe:	469c      	movge	ip, r3
 801cb00:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801cb04:	429e      	cmp	r6, r3
 801cb06:	bfa8      	it	ge
 801cb08:	461e      	movge	r6, r3
 801cb0a:	4b2d      	ldr	r3, [pc, #180]	; (801cbc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801cb0c:	881b      	ldrh	r3, [r3, #0]
 801cb0e:	1a59      	subs	r1, r3, r1
 801cb10:	4633      	mov	r3, r6
 801cb12:	428e      	cmp	r6, r1
 801cb14:	bfa8      	it	ge
 801cb16:	460b      	movge	r3, r1
 801cb18:	4562      	cmp	r2, ip
 801cb1a:	9302      	str	r3, [sp, #8]
 801cb1c:	d12d      	bne.n	801cb7a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801cb1e:	455a      	cmp	r2, fp
 801cb20:	d12b      	bne.n	801cb7a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801cb22:	6828      	ldr	r0, [r5, #0]
 801cb24:	6803      	ldr	r3, [r0, #0]
 801cb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb28:	4798      	blx	r3
 801cb2a:	07c3      	lsls	r3, r0, #31
 801cb2c:	d51b      	bpl.n	801cb66 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801cb2e:	6828      	ldr	r0, [r5, #0]
 801cb30:	9b02      	ldr	r3, [sp, #8]
 801cb32:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801cb36:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801cb3a:	6803      	ldr	r3, [r0, #0]
 801cb3c:	f8cd b000 	str.w	fp, [sp]
 801cb40:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801cb42:	4623      	mov	r3, r4
 801cb44:	e899 0006 	ldmia.w	r9, {r1, r2}
 801cb48:	47a8      	blx	r5
 801cb4a:	4607      	mov	r7, r0
 801cb4c:	4638      	mov	r0, r7
 801cb4e:	b00f      	add	sp, #60	; 0x3c
 801cb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb54:	bf1f      	itttt	ne
 801cb56:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801cb5a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801cb5e:	189b      	addne	r3, r3, r2
 801cb60:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801cb64:	e7ad      	b.n	801cac2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801cb66:	6828      	ldr	r0, [r5, #0]
 801cb68:	4642      	mov	r2, r8
 801cb6a:	4621      	mov	r1, r4
 801cb6c:	6803      	ldr	r3, [r0, #0]
 801cb6e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801cb70:	9b02      	ldr	r3, [sp, #8]
 801cb72:	fb03 f30a 	mul.w	r3, r3, sl
 801cb76:	47a8      	blx	r5
 801cb78:	e7e8      	b.n	801cb4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cb7a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801cb7e:	f04f 0900 	mov.w	r9, #0
 801cb82:	9b02      	ldr	r3, [sp, #8]
 801cb84:	454b      	cmp	r3, r9
 801cb86:	dde1      	ble.n	801cb4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cb88:	6828      	ldr	r0, [r5, #0]
 801cb8a:	4642      	mov	r2, r8
 801cb8c:	4621      	mov	r1, r4
 801cb8e:	44d0      	add	r8, sl
 801cb90:	6803      	ldr	r3, [r0, #0]
 801cb92:	f109 0901 	add.w	r9, r9, #1
 801cb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb98:	461e      	mov	r6, r3
 801cb9a:	465b      	mov	r3, fp
 801cb9c:	47b0      	blx	r6
 801cb9e:	9b03      	ldr	r3, [sp, #12]
 801cba0:	441c      	add	r4, r3
 801cba2:	e7ee      	b.n	801cb82 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801cba4:	2000bc78 	.word	0x2000bc78
 801cba8:	08028ab1 	.word	0x08028ab1
 801cbac:	08029291 	.word	0x08029291
 801cbb0:	08028a7f 	.word	0x08028a7f
 801cbb4:	08028b65 	.word	0x08028b65
 801cbb8:	08028bba 	.word	0x08028bba
 801cbbc:	2000bc72 	.word	0x2000bc72
 801cbc0:	2000bc74 	.word	0x2000bc74
 801cbc4:	08028bf8 	.word	0x08028bf8

0801cbc8 <_ZN8touchgfx8LCD24bppC1Ev>:
 801cbc8:	4a0b      	ldr	r2, [pc, #44]	; (801cbf8 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801cbca:	6002      	str	r2, [r0, #0]
 801cbcc:	2200      	movs	r2, #0
 801cbce:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801cbd2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801cbd6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801cbda:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801cbde:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801cbe2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801cbe6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801cbea:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801cbee:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801cbf2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801cbf6:	4770      	bx	lr
 801cbf8:	08028edc 	.word	0x08028edc

0801cbfc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801cbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc00:	b093      	sub	sp, #76	; 0x4c
 801cc02:	880c      	ldrh	r4, [r1, #0]
 801cc04:	4605      	mov	r5, r0
 801cc06:	460f      	mov	r7, r1
 801cc08:	4691      	mov	r9, r2
 801cc0a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801cc0e:	b12c      	cbz	r4, 801cc1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801cc10:	4b71      	ldr	r3, [pc, #452]	; (801cdd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801cc12:	2167      	movs	r1, #103	; 0x67
 801cc14:	4a71      	ldr	r2, [pc, #452]	; (801cddc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801cc16:	4872      	ldr	r0, [pc, #456]	; (801cde0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801cc18:	f007 fb16 	bl	8024248 <__assert_func>
 801cc1c:	6810      	ldr	r0, [r2, #0]
 801cc1e:	ae0e      	add	r6, sp, #56	; 0x38
 801cc20:	6851      	ldr	r1, [r2, #4]
 801cc22:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801cde8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801cc26:	c603      	stmia	r6!, {r0, r1}
 801cc28:	6818      	ldr	r0, [r3, #0]
 801cc2a:	ae10      	add	r6, sp, #64	; 0x40
 801cc2c:	6859      	ldr	r1, [r3, #4]
 801cc2e:	c603      	stmia	r6!, {r0, r1}
 801cc30:	a80e      	add	r0, sp, #56	; 0x38
 801cc32:	f7fb f9d5 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc36:	4649      	mov	r1, r9
 801cc38:	a810      	add	r0, sp, #64	; 0x40
 801cc3a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801cde4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801cc3e:	f7fb f9b7 	bl	8017fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc42:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cc46:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cc4a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801cc4e:	f8d9 0000 	ldr.w	r0, [r9]
 801cc52:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cc56:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801cc5a:	440d      	add	r5, r1
 801cc5c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801cc60:	440a      	add	r2, r1
 801cc62:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cc66:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cc6a:	4413      	add	r3, r2
 801cc6c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cc70:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801cc74:	930b      	str	r3, [sp, #44]	; 0x2c
 801cc76:	6803      	ldr	r3, [r0, #0]
 801cc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cc7c:	4798      	blx	r3
 801cc7e:	2801      	cmp	r0, #1
 801cc80:	d11e      	bne.n	801ccc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801cc82:	220b      	movs	r2, #11
 801cc84:	9008      	str	r0, [sp, #32]
 801cc86:	b2b6      	uxth	r6, r6
 801cc88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801cc8c:	9207      	str	r2, [sp, #28]
 801cc8e:	4629      	mov	r1, r5
 801cc90:	f8ba 2000 	ldrh.w	r2, [sl]
 801cc94:	f8cd 8010 	str.w	r8, [sp, #16]
 801cc98:	9601      	str	r6, [sp, #4]
 801cc9a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801cc9e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801cca2:	9203      	str	r2, [sp, #12]
 801cca4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801cca8:	9202      	str	r2, [sp, #8]
 801ccaa:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ccae:	9200      	str	r2, [sp, #0]
 801ccb0:	463a      	mov	r2, r7
 801ccb2:	f8d9 0000 	ldr.w	r0, [r9]
 801ccb6:	f7f8 fdb5 	bl	8015824 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ccba:	b013      	add	sp, #76	; 0x4c
 801ccbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccc0:	f8d9 0000 	ldr.w	r0, [r9]
 801ccc4:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801ccc8:	6803      	ldr	r3, [r0, #0]
 801ccca:	6a1b      	ldr	r3, [r3, #32]
 801cccc:	4798      	blx	r3
 801ccce:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801ccd2:	f8ba 3000 	ldrh.w	r3, [sl]
 801ccd6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ccda:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ccde:	fb01 2303 	mla	r3, r1, r3, r2
 801cce2:	4621      	mov	r1, r4
 801cce4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cce8:	4418      	add	r0, r3
 801ccea:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801ccee:	930c      	str	r3, [sp, #48]	; 0x30
 801ccf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccf2:	4299      	cmp	r1, r3
 801ccf4:	da6a      	bge.n	801cdcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801ccf6:	1cc2      	adds	r2, r0, #3
 801ccf8:	46aa      	mov	sl, r5
 801ccfa:	ebaa 0305 	sub.w	r3, sl, r5
 801ccfe:	429e      	cmp	r6, r3
 801cd00:	dd55      	ble.n	801cdae <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801cd02:	2404      	movs	r4, #4
 801cd04:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801cd08:	fb14 4303 	smlabb	r3, r4, r3, r4
 801cd0c:	eb07 0e03 	add.w	lr, r7, r3
 801cd10:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801cd14:	b184      	cbz	r4, 801cd38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801cd16:	2cff      	cmp	r4, #255	; 0xff
 801cd18:	f817 b003 	ldrb.w	fp, [r7, r3]
 801cd1c:	d10e      	bne.n	801cd3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801cd1e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cd22:	d10b      	bne.n	801cd3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801cd24:	f802 bc03 	strb.w	fp, [r2, #-3]
 801cd28:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801cd2c:	f802 3c02 	strb.w	r3, [r2, #-2]
 801cd30:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801cd34:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cd38:	3203      	adds	r2, #3
 801cd3a:	e7de      	b.n	801ccfa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801cd3c:	fb08 f404 	mul.w	r4, r8, r4
 801cd40:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801cd44:	1c63      	adds	r3, r4, #1
 801cd46:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801cd4a:	121b      	asrs	r3, r3, #8
 801cd4c:	b29c      	uxth	r4, r3
 801cd4e:	43db      	mvns	r3, r3
 801cd50:	fb1b fb04 	smulbb	fp, fp, r4
 801cd54:	b2db      	uxtb	r3, r3
 801cd56:	fb0c bc03 	mla	ip, ip, r3, fp
 801cd5a:	fa1f fc8c 	uxth.w	ip, ip
 801cd5e:	f10c 0b01 	add.w	fp, ip, #1
 801cd62:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cd66:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801cd6a:	fb1b fb03 	smulbb	fp, fp, r3
 801cd6e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cd72:	f802 cc03 	strb.w	ip, [r2, #-3]
 801cd76:	f89e c001 	ldrb.w	ip, [lr, #1]
 801cd7a:	fb0c bc04 	mla	ip, ip, r4, fp
 801cd7e:	fa1f fc8c 	uxth.w	ip, ip
 801cd82:	f10c 0b01 	add.w	fp, ip, #1
 801cd86:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cd8a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cd8e:	f802 cc02 	strb.w	ip, [r2, #-2]
 801cd92:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801cd96:	f89e e002 	ldrb.w	lr, [lr, #2]
 801cd9a:	fb1c f303 	smulbb	r3, ip, r3
 801cd9e:	fb0e 3304 	mla	r3, lr, r4, r3
 801cda2:	b29b      	uxth	r3, r3
 801cda4:	1c5c      	adds	r4, r3, #1
 801cda6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801cdaa:	121b      	asrs	r3, r3, #8
 801cdac:	e7c2      	b.n	801cd34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801cdae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cdb0:	3101      	adds	r1, #1
 801cdb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cdb4:	881b      	ldrh	r3, [r3, #0]
 801cdb6:	1b9b      	subs	r3, r3, r6
 801cdb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cdbc:	4413      	add	r3, r2
 801cdbe:	4418      	add	r0, r3
 801cdc0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801cdc4:	1b9b      	subs	r3, r3, r6
 801cdc6:	444b      	add	r3, r9
 801cdc8:	441d      	add	r5, r3
 801cdca:	e791      	b.n	801ccf0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801cdcc:	4b05      	ldr	r3, [pc, #20]	; (801cde4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801cdce:	6818      	ldr	r0, [r3, #0]
 801cdd0:	6803      	ldr	r3, [r0, #0]
 801cdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdd4:	4798      	blx	r3
 801cdd6:	e770      	b.n	801ccba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801cdd8:	080289e3 	.word	0x080289e3
 801cddc:	080290b3 	.word	0x080290b3
 801cde0:	08028a7f 	.word	0x08028a7f
 801cde4:	2000bc78 	.word	0x2000bc78
 801cde8:	2000bc72 	.word	0x2000bc72

0801cdec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801cdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdf0:	4614      	mov	r4, r2
 801cdf2:	880a      	ldrh	r2, [r1, #0]
 801cdf4:	b091      	sub	sp, #68	; 0x44
 801cdf6:	4680      	mov	r8, r0
 801cdf8:	2a01      	cmp	r2, #1
 801cdfa:	460e      	mov	r6, r1
 801cdfc:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801ce00:	d005      	beq.n	801ce0e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801ce02:	4b6d      	ldr	r3, [pc, #436]	; (801cfb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801ce04:	21b5      	movs	r1, #181	; 0xb5
 801ce06:	4a6d      	ldr	r2, [pc, #436]	; (801cfbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801ce08:	486d      	ldr	r0, [pc, #436]	; (801cfc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801ce0a:	f007 fa1d 	bl	8024248 <__assert_func>
 801ce0e:	6820      	ldr	r0, [r4, #0]
 801ce10:	ad0c      	add	r5, sp, #48	; 0x30
 801ce12:	6861      	ldr	r1, [r4, #4]
 801ce14:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801cfc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801ce18:	c503      	stmia	r5!, {r0, r1}
 801ce1a:	6818      	ldr	r0, [r3, #0]
 801ce1c:	ad0e      	add	r5, sp, #56	; 0x38
 801ce1e:	6859      	ldr	r1, [r3, #4]
 801ce20:	c503      	stmia	r5!, {r0, r1}
 801ce22:	a80c      	add	r0, sp, #48	; 0x30
 801ce24:	f7fb f8dc 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce28:	4621      	mov	r1, r4
 801ce2a:	a80e      	add	r0, sp, #56	; 0x38
 801ce2c:	f7fb f8c0 	bl	8017fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ce30:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ce34:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ce38:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ce3c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801ce40:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ce44:	eb08 0401 	add.w	r4, r8, r1
 801ce48:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ce4c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801cfc8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801ce50:	440a      	add	r2, r1
 801ce52:	f8d8 0000 	ldr.w	r0, [r8]
 801ce56:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ce5a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ce5e:	4413      	add	r3, r2
 801ce60:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ce64:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ce68:	930a      	str	r3, [sp, #40]	; 0x28
 801ce6a:	6803      	ldr	r3, [r0, #0]
 801ce6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ce70:	4798      	blx	r3
 801ce72:	2801      	cmp	r0, #1
 801ce74:	d11e      	bne.n	801ceb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801ce76:	220b      	movs	r2, #11
 801ce78:	9008      	str	r0, [sp, #32]
 801ce7a:	b2ad      	uxth	r5, r5
 801ce7c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ce80:	9207      	str	r2, [sp, #28]
 801ce82:	4621      	mov	r1, r4
 801ce84:	f8b9 2000 	ldrh.w	r2, [r9]
 801ce88:	9501      	str	r5, [sp, #4]
 801ce8a:	9206      	str	r2, [sp, #24]
 801ce8c:	2200      	movs	r2, #0
 801ce8e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801ce92:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ce96:	9203      	str	r2, [sp, #12]
 801ce98:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ce9c:	9202      	str	r2, [sp, #8]
 801ce9e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cea2:	9200      	str	r2, [sp, #0]
 801cea4:	4632      	mov	r2, r6
 801cea6:	f8d8 0000 	ldr.w	r0, [r8]
 801ceaa:	f7f8 fcbb 	bl	8015824 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ceae:	b011      	add	sp, #68	; 0x44
 801ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceb4:	f8d8 0000 	ldr.w	r0, [r8]
 801ceb8:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801cebc:	6803      	ldr	r3, [r0, #0]
 801cebe:	6a1b      	ldr	r3, [r3, #32]
 801cec0:	4798      	blx	r3
 801cec2:	f8b9 3000 	ldrh.w	r3, [r9]
 801cec6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801ceca:	f04f 0e00 	mov.w	lr, #0
 801cece:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ced2:	fa1f f987 	uxth.w	r9, r7
 801ced6:	fb01 2303 	mla	r3, r1, r3, r2
 801ceda:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801cede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cee2:	b289      	uxth	r1, r1
 801cee4:	4418      	add	r0, r3
 801cee6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801ceea:	930b      	str	r3, [sp, #44]	; 0x2c
 801ceec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ceee:	459e      	cmp	lr, r3
 801cef0:	da5c      	bge.n	801cfac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801cef2:	1cc3      	adds	r3, r0, #3
 801cef4:	46a2      	mov	sl, r4
 801cef6:	ebaa 0204 	sub.w	r2, sl, r4
 801cefa:	4295      	cmp	r5, r2
 801cefc:	dd46      	ble.n	801cf8c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801cefe:	f04f 0c03 	mov.w	ip, #3
 801cf02:	f04f 0b04 	mov.w	fp, #4
 801cf06:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801cf0a:	2fff      	cmp	r7, #255	; 0xff
 801cf0c:	fb1c b202 	smlabb	r2, ip, r2, fp
 801cf10:	eb06 0c02 	add.w	ip, r6, r2
 801cf14:	f816 b002 	ldrb.w	fp, [r6, r2]
 801cf18:	d02f      	beq.n	801cf7a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801cf1a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801cf1e:	fb12 f201 	smulbb	r2, r2, r1
 801cf22:	fb0b 2209 	mla	r2, fp, r9, r2
 801cf26:	b292      	uxth	r2, r2
 801cf28:	f102 0b01 	add.w	fp, r2, #1
 801cf2c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801cf30:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801cf34:	fb1b fb01 	smulbb	fp, fp, r1
 801cf38:	1212      	asrs	r2, r2, #8
 801cf3a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801cf3e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cf42:	fb02 b209 	mla	r2, r2, r9, fp
 801cf46:	b292      	uxth	r2, r2
 801cf48:	f102 0b01 	add.w	fp, r2, #1
 801cf4c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801cf50:	1212      	asrs	r2, r2, #8
 801cf52:	f803 2c02 	strb.w	r2, [r3, #-2]
 801cf56:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801cf5a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801cf5e:	fb1c fc01 	smulbb	ip, ip, r1
 801cf62:	fb02 c209 	mla	r2, r2, r9, ip
 801cf66:	b292      	uxth	r2, r2
 801cf68:	f102 0c01 	add.w	ip, r2, #1
 801cf6c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cf70:	1212      	asrs	r2, r2, #8
 801cf72:	f803 2c01 	strb.w	r2, [r3, #-1]
 801cf76:	3303      	adds	r3, #3
 801cf78:	e7bd      	b.n	801cef6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801cf7a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801cf7e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cf82:	f803 2c02 	strb.w	r2, [r3, #-2]
 801cf86:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801cf8a:	e7f2      	b.n	801cf72 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801cf8c:	4b0d      	ldr	r3, [pc, #52]	; (801cfc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801cf8e:	f10e 0e01 	add.w	lr, lr, #1
 801cf92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cf94:	881b      	ldrh	r3, [r3, #0]
 801cf96:	1b5b      	subs	r3, r3, r5
 801cf98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf9c:	4413      	add	r3, r2
 801cf9e:	4418      	add	r0, r3
 801cfa0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cfa4:	1b5b      	subs	r3, r3, r5
 801cfa6:	4443      	add	r3, r8
 801cfa8:	441c      	add	r4, r3
 801cfaa:	e79f      	b.n	801ceec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801cfac:	4b06      	ldr	r3, [pc, #24]	; (801cfc8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801cfae:	6818      	ldr	r0, [r3, #0]
 801cfb0:	6803      	ldr	r3, [r0, #0]
 801cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfb4:	4798      	blx	r3
 801cfb6:	e77a      	b.n	801ceae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801cfb8:	080288ef 	.word	0x080288ef
 801cfbc:	08028fa6 	.word	0x08028fa6
 801cfc0:	08028a7f 	.word	0x08028a7f
 801cfc4:	2000bc72 	.word	0x2000bc72
 801cfc8:	2000bc78 	.word	0x2000bc78

0801cfcc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801cfcc:	b570      	push	{r4, r5, r6, lr}
 801cfce:	780d      	ldrb	r5, [r1, #0]
 801cfd0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801cfd4:	2d01      	cmp	r5, #1
 801cfd6:	d00d      	beq.n	801cff4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801cfd8:	d307      	bcc.n	801cfea <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801cfda:	2d02      	cmp	r5, #2
 801cfdc:	d10f      	bne.n	801cffe <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801cfde:	4b08      	ldr	r3, [pc, #32]	; (801d000 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801cfe0:	215a      	movs	r1, #90	; 0x5a
 801cfe2:	4a08      	ldr	r2, [pc, #32]	; (801d004 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801cfe4:	4808      	ldr	r0, [pc, #32]	; (801d008 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801cfe6:	f007 f92f 	bl	8024248 <__assert_func>
 801cfea:	9404      	str	r4, [sp, #16]
 801cfec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cff0:	f7ff be04 	b.w	801cbfc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801cff4:	9404      	str	r4, [sp, #16]
 801cff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cffa:	f7ff bef7 	b.w	801cdec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801cffe:	bd70      	pop	{r4, r5, r6, pc}
 801d000:	080288a4 	.word	0x080288a4
 801d004:	08028f24 	.word	0x08028f24
 801d008:	08028a7f 	.word	0x08028a7f

0801d00c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d010:	b08b      	sub	sp, #44	; 0x2c
 801d012:	460c      	mov	r4, r1
 801d014:	4680      	mov	r8, r0
 801d016:	469a      	mov	sl, r3
 801d018:	6808      	ldr	r0, [r1, #0]
 801d01a:	ab06      	add	r3, sp, #24
 801d01c:	6849      	ldr	r1, [r1, #4]
 801d01e:	c303      	stmia	r3!, {r0, r1}
 801d020:	6810      	ldr	r0, [r2, #0]
 801d022:	ab08      	add	r3, sp, #32
 801d024:	6851      	ldr	r1, [r2, #4]
 801d026:	c303      	stmia	r3!, {r0, r1}
 801d028:	a806      	add	r0, sp, #24
 801d02a:	f7fa ffd9 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d02e:	4621      	mov	r1, r4
 801d030:	a808      	add	r0, sp, #32
 801d032:	4c61      	ldr	r4, [pc, #388]	; (801d1b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801d034:	f7fa ffbc 	bl	8017fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d038:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d03c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d040:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d044:	6820      	ldr	r0, [r4, #0]
 801d046:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d04a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801d04e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801d052:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801d056:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d05a:	440a      	add	r2, r1
 801d05c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d060:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d064:	4413      	add	r3, r2
 801d066:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d06a:	6803      	ldr	r3, [r0, #0]
 801d06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d06e:	4798      	blx	r3
 801d070:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d074:	d118      	bne.n	801d0a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801d076:	f010 0f20 	tst.w	r0, #32
 801d07a:	6820      	ldr	r0, [r4, #0]
 801d07c:	d017      	beq.n	801d0ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801d07e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d082:	b2bf      	uxth	r7, r7
 801d084:	6801      	ldr	r1, [r0, #0]
 801d086:	9402      	str	r4, [sp, #8]
 801d088:	fa1f f489 	uxth.w	r4, r9
 801d08c:	f8cd a00c 	str.w	sl, [sp, #12]
 801d090:	9401      	str	r4, [sp, #4]
 801d092:	9700      	str	r7, [sp, #0]
 801d094:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d098:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d09a:	4641      	mov	r1, r8
 801d09c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d0a0:	47a0      	blx	r4
 801d0a2:	b00b      	add	sp, #44	; 0x2c
 801d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d0ac:	e7e5      	b.n	801d07a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d0ae:	6803      	ldr	r3, [r0, #0]
 801d0b0:	6a1b      	ldr	r3, [r3, #32]
 801d0b2:	4798      	blx	r3
 801d0b4:	4b41      	ldr	r3, [pc, #260]	; (801d1bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801d0b6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d0ba:	f04f 0c00 	mov.w	ip, #0
 801d0be:	881a      	ldrh	r2, [r3, #0]
 801d0c0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d0c4:	fb04 1202 	mla	r2, r4, r2, r1
 801d0c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d0cc:	4410      	add	r0, r2
 801d0ce:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801d0d2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801d0d6:	0092      	lsls	r2, r2, #2
 801d0d8:	9105      	str	r1, [sp, #20]
 801d0da:	9204      	str	r2, [sp, #16]
 801d0dc:	45cc      	cmp	ip, r9
 801d0de:	da65      	bge.n	801d1ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801d0e0:	1cc4      	adds	r4, r0, #3
 801d0e2:	f108 0504 	add.w	r5, r8, #4
 801d0e6:	f04f 0e00 	mov.w	lr, #0
 801d0ea:	45be      	cmp	lr, r7
 801d0ec:	da4d      	bge.n	801d18a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801d0ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d0f2:	b181      	cbz	r1, 801d116 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801d0f4:	29ff      	cmp	r1, #255	; 0xff
 801d0f6:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801d0fa:	d111      	bne.n	801d120 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d0fc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d100:	d10e      	bne.n	801d120 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d102:	f804 bc03 	strb.w	fp, [r4, #-3]
 801d106:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801d10a:	f804 2c02 	strb.w	r2, [r4, #-2]
 801d10e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801d112:	f804 2c01 	strb.w	r2, [r4, #-1]
 801d116:	f10e 0e01 	add.w	lr, lr, #1
 801d11a:	3403      	adds	r4, #3
 801d11c:	3504      	adds	r5, #4
 801d11e:	e7e4      	b.n	801d0ea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801d120:	fb0a f101 	mul.w	r1, sl, r1
 801d124:	1c4a      	adds	r2, r1, #1
 801d126:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801d12a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d12e:	1212      	asrs	r2, r2, #8
 801d130:	b296      	uxth	r6, r2
 801d132:	43d2      	mvns	r2, r2
 801d134:	fb1b fb06 	smulbb	fp, fp, r6
 801d138:	b2d2      	uxtb	r2, r2
 801d13a:	fb01 b102 	mla	r1, r1, r2, fp
 801d13e:	b289      	uxth	r1, r1
 801d140:	f101 0b01 	add.w	fp, r1, #1
 801d144:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d148:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801d14c:	fb1b fb02 	smulbb	fp, fp, r2
 801d150:	1209      	asrs	r1, r1, #8
 801d152:	f804 1c03 	strb.w	r1, [r4, #-3]
 801d156:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801d15a:	fb01 b106 	mla	r1, r1, r6, fp
 801d15e:	b289      	uxth	r1, r1
 801d160:	f101 0b01 	add.w	fp, r1, #1
 801d164:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d168:	1209      	asrs	r1, r1, #8
 801d16a:	f804 1c02 	strb.w	r1, [r4, #-2]
 801d16e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d172:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d176:	fb11 f202 	smulbb	r2, r1, r2
 801d17a:	fb0b 2206 	mla	r2, fp, r6, r2
 801d17e:	b292      	uxth	r2, r2
 801d180:	1c56      	adds	r6, r2, #1
 801d182:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d186:	1212      	asrs	r2, r2, #8
 801d188:	e7c3      	b.n	801d112 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801d18a:	881a      	ldrh	r2, [r3, #0]
 801d18c:	f10c 0c01 	add.w	ip, ip, #1
 801d190:	9905      	ldr	r1, [sp, #20]
 801d192:	1bd2      	subs	r2, r2, r7
 801d194:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d198:	440a      	add	r2, r1
 801d19a:	9904      	ldr	r1, [sp, #16]
 801d19c:	4410      	add	r0, r2
 801d19e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d1a2:	1bd2      	subs	r2, r2, r7
 801d1a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d1a8:	4490      	add	r8, r2
 801d1aa:	e797      	b.n	801d0dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801d1ac:	4b02      	ldr	r3, [pc, #8]	; (801d1b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801d1ae:	6818      	ldr	r0, [r3, #0]
 801d1b0:	6803      	ldr	r3, [r0, #0]
 801d1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1b4:	4798      	blx	r3
 801d1b6:	e774      	b.n	801d0a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801d1b8:	2000bc78 	.word	0x2000bc78
 801d1bc:	2000bc72 	.word	0x2000bc72

0801d1c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d1c4:	b085      	sub	sp, #20
 801d1c6:	4606      	mov	r6, r0
 801d1c8:	460c      	mov	r4, r1
 801d1ca:	4691      	mov	r9, r2
 801d1cc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801d1d0:	4698      	mov	r8, r3
 801d1d2:	b385      	cbz	r5, 801d236 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d1d4:	4608      	mov	r0, r1
 801d1d6:	f7fd fae5 	bl	801a7a4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d1da:	4607      	mov	r7, r0
 801d1dc:	4620      	mov	r0, r4
 801d1de:	f7fd fb1b 	bl	801a818 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d1e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d1e6:	4620      	mov	r0, r4
 801d1e8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d1ec:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d1f0:	f8ad 700c 	strh.w	r7, [sp, #12]
 801d1f4:	f7fd fc62 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d1f8:	2801      	cmp	r0, #1
 801d1fa:	d00f      	beq.n	801d21c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d1fc:	4620      	mov	r0, r4
 801d1fe:	f7fd fc5d 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d202:	2802      	cmp	r0, #2
 801d204:	d00a      	beq.n	801d21c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d206:	4620      	mov	r0, r4
 801d208:	f7fd fc58 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d20c:	280b      	cmp	r0, #11
 801d20e:	d005      	beq.n	801d21c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d210:	4b1b      	ldr	r3, [pc, #108]	; (801d280 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801d212:	2142      	movs	r1, #66	; 0x42
 801d214:	4a1b      	ldr	r2, [pc, #108]	; (801d284 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801d216:	481c      	ldr	r0, [pc, #112]	; (801d288 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801d218:	f007 f816 	bl	8024248 <__assert_func>
 801d21c:	4620      	mov	r0, r4
 801d21e:	f7fd fc4d 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d222:	2802      	cmp	r0, #2
 801d224:	4620      	mov	r0, r4
 801d226:	d109      	bne.n	801d23c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801d228:	f7fd fbc4 	bl	801a9b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d22c:	462b      	mov	r3, r5
 801d22e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d230:	a902      	add	r1, sp, #8
 801d232:	f7ff feeb 	bl	801d00c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d236:	b005      	add	sp, #20
 801d238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d23c:	f7fd fc3e 	bl	801aabc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d240:	280b      	cmp	r0, #11
 801d242:	d10e      	bne.n	801d262 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801d244:	4620      	mov	r0, r4
 801d246:	f7fd fbb5 	bl	801a9b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d24a:	4606      	mov	r6, r0
 801d24c:	4620      	mov	r0, r4
 801d24e:	f7fd fbe3 	bl	801aa18 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d252:	9500      	str	r5, [sp, #0]
 801d254:	4601      	mov	r1, r0
 801d256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d258:	aa02      	add	r2, sp, #8
 801d25a:	4630      	mov	r0, r6
 801d25c:	f7ff feb6 	bl	801cfcc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d260:	e7e9      	b.n	801d236 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d262:	6833      	ldr	r3, [r6, #0]
 801d264:	4620      	mov	r0, r4
 801d266:	691f      	ldr	r7, [r3, #16]
 801d268:	f7fd fba4 	bl	801a9b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d26c:	2300      	movs	r3, #0
 801d26e:	4601      	mov	r1, r0
 801d270:	aa02      	add	r2, sp, #8
 801d272:	4630      	mov	r0, r6
 801d274:	e9cd 5300 	strd	r5, r3, [sp]
 801d278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d27a:	47b8      	blx	r7
 801d27c:	e7db      	b.n	801d236 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d27e:	bf00      	nop
 801d280:	0802893d 	.word	0x0802893d
 801d284:	0802902f 	.word	0x0802902f
 801d288:	08028a7f 	.word	0x08028a7f

0801d28c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d28c:	b570      	push	{r4, r5, r6, lr}
 801d28e:	9d04      	ldr	r5, [sp, #16]
 801d290:	460c      	mov	r4, r1
 801d292:	4619      	mov	r1, r3
 801d294:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d298:	2a0c      	cmp	r2, #12
 801d29a:	d826      	bhi.n	801d2ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801d29c:	e8df f002 	tbb	[pc, r2]
 801d2a0:	200e1407 	.word	0x200e1407
 801d2a4:	20202020 	.word	0x20202020
 801d2a8:	20202020 	.word	0x20202020
 801d2ac:	20          	.byte	0x20
 801d2ad:	00          	.byte	0x00
 801d2ae:	4b0f      	ldr	r3, [pc, #60]	; (801d2ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801d2b0:	f240 117f 	movw	r1, #383	; 0x17f
 801d2b4:	4a0e      	ldr	r2, [pc, #56]	; (801d2f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d2b6:	480f      	ldr	r0, [pc, #60]	; (801d2f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801d2b8:	f006 ffc6 	bl	8024248 <__assert_func>
 801d2bc:	462a      	mov	r2, r5
 801d2be:	4620      	mov	r0, r4
 801d2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d2c4:	f7ff bea2 	b.w	801d00c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d2c8:	6802      	ldr	r2, [r0, #0]
 801d2ca:	2600      	movs	r6, #0
 801d2cc:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d2d0:	6916      	ldr	r6, [r2, #16]
 801d2d2:	462b      	mov	r3, r5
 801d2d4:	460a      	mov	r2, r1
 801d2d6:	4621      	mov	r1, r4
 801d2d8:	46b4      	mov	ip, r6
 801d2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d2de:	4760      	bx	ip
 801d2e0:	4b05      	ldr	r3, [pc, #20]	; (801d2f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801d2e2:	f240 1191 	movw	r1, #401	; 0x191
 801d2e6:	4a02      	ldr	r2, [pc, #8]	; (801d2f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d2e8:	e7e5      	b.n	801d2b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801d2ea:	bd70      	pop	{r4, r5, r6, pc}
 801d2ec:	08028c58 	.word	0x08028c58
 801d2f0:	08029317 	.word	0x08029317
 801d2f4:	08028a7f 	.word	0x08028a7f
 801d2f8:	08028c99 	.word	0x08028c99

0801d2fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801d2fc:	b158      	cbz	r0, 801d316 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801d2fe:	2902      	cmp	r1, #2
 801d300:	d00f      	beq.n	801d322 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801d302:	2903      	cmp	r1, #3
 801d304:	d010      	beq.n	801d328 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801d306:	2901      	cmp	r1, #1
 801d308:	d101      	bne.n	801d30e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d30a:	2001      	movs	r0, #1
 801d30c:	4770      	bx	lr
 801d30e:	4b08      	ldr	r3, [pc, #32]	; (801d330 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801d310:	8819      	ldrh	r1, [r3, #0]
 801d312:	4248      	negs	r0, r1
 801d314:	4770      	bx	lr
 801d316:	2902      	cmp	r1, #2
 801d318:	d006      	beq.n	801d328 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801d31a:	2903      	cmp	r1, #3
 801d31c:	d0f7      	beq.n	801d30e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d31e:	2901      	cmp	r1, #1
 801d320:	d1f3      	bne.n	801d30a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801d322:	4b03      	ldr	r3, [pc, #12]	; (801d330 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801d324:	8818      	ldrh	r0, [r3, #0]
 801d326:	4770      	bx	lr
 801d328:	f04f 30ff 	mov.w	r0, #4294967295
 801d32c:	4770      	bx	lr
 801d32e:	bf00      	nop
 801d330:	2000bc72 	.word	0x2000bc72

0801d334 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801d334:	b170      	cbz	r0, 801d354 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801d336:	2902      	cmp	r1, #2
 801d338:	d012      	beq.n	801d360 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801d33a:	2903      	cmp	r1, #3
 801d33c:	d006      	beq.n	801d34c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801d33e:	2901      	cmp	r1, #1
 801d340:	d001      	beq.n	801d346 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801d342:	2001      	movs	r0, #1
 801d344:	4770      	bx	lr
 801d346:	4b08      	ldr	r3, [pc, #32]	; (801d368 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801d348:	8818      	ldrh	r0, [r3, #0]
 801d34a:	4770      	bx	lr
 801d34c:	4b06      	ldr	r3, [pc, #24]	; (801d368 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801d34e:	8818      	ldrh	r0, [r3, #0]
 801d350:	4240      	negs	r0, r0
 801d352:	4770      	bx	lr
 801d354:	2902      	cmp	r1, #2
 801d356:	d0f9      	beq.n	801d34c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801d358:	2903      	cmp	r1, #3
 801d35a:	d0f2      	beq.n	801d342 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801d35c:	2901      	cmp	r1, #1
 801d35e:	d1f2      	bne.n	801d346 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801d360:	f04f 30ff 	mov.w	r0, #4294967295
 801d364:	4770      	bx	lr
 801d366:	bf00      	nop
 801d368:	2000bc72 	.word	0x2000bc72

0801d36c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d370:	b095      	sub	sp, #84	; 0x54
 801d372:	9109      	str	r1, [sp, #36]	; 0x24
 801d374:	a910      	add	r1, sp, #64	; 0x40
 801d376:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801d37a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801d37e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801d382:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801d386:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801d38a:	e881 000c 	stmia.w	r1, {r2, r3}
 801d38e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801d392:	9306      	str	r3, [sp, #24]
 801d394:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801d398:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801d39c:	930e      	str	r3, [sp, #56]	; 0x38
 801d39e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801d3a2:	798f      	ldrb	r7, [r1, #6]
 801d3a4:	930a      	str	r3, [sp, #40]	; 0x28
 801d3a6:	7b4b      	ldrb	r3, [r1, #13]
 801d3a8:	0158      	lsls	r0, r3, #5
 801d3aa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d3ae:	4338      	orrs	r0, r7
 801d3b0:	9008      	str	r0, [sp, #32]
 801d3b2:	f000 8174 	beq.w	801d69e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d3b6:	011b      	lsls	r3, r3, #4
 801d3b8:	79c8      	ldrb	r0, [r1, #7]
 801d3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d3be:	4303      	orrs	r3, r0
 801d3c0:	9307      	str	r3, [sp, #28]
 801d3c2:	f000 816c 	beq.w	801d69e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d3c6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d3ca:	b29b      	uxth	r3, r3
 801d3cc:	2e00      	cmp	r6, #0
 801d3ce:	f000 8112 	beq.w	801d5f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801d3d2:	1af6      	subs	r6, r6, r3
 801d3d4:	b2b6      	uxth	r6, r6
 801d3d6:	0433      	lsls	r3, r6, #16
 801d3d8:	d502      	bpl.n	801d3e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d3da:	1bad      	subs	r5, r5, r6
 801d3dc:	2600      	movs	r6, #0
 801d3de:	b22d      	sxth	r5, r5
 801d3e0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d3e4:	a810      	add	r0, sp, #64	; 0x40
 801d3e6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d3ea:	428d      	cmp	r5, r1
 801d3ec:	b28b      	uxth	r3, r1
 801d3ee:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801d3f2:	bfbf      	itttt	lt
 801d3f4:	18f6      	addlt	r6, r6, r3
 801d3f6:	1b75      	sublt	r5, r6, r5
 801d3f8:	b2ae      	uxthlt	r6, r5
 801d3fa:	460d      	movlt	r5, r1
 801d3fc:	8891      	ldrh	r1, [r2, #4]
 801d3fe:	440b      	add	r3, r1
 801d400:	4629      	mov	r1, r5
 801d402:	b21b      	sxth	r3, r3
 801d404:	930d      	str	r3, [sp, #52]	; 0x34
 801d406:	88d3      	ldrh	r3, [r2, #6]
 801d408:	9a06      	ldr	r2, [sp, #24]
 801d40a:	449a      	add	sl, r3
 801d40c:	fa0f f38a 	sxth.w	r3, sl
 801d410:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801d414:	930c      	str	r3, [sp, #48]	; 0x30
 801d416:	4bb8      	ldr	r3, [pc, #736]	; (801d6f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801d418:	f893 b000 	ldrb.w	fp, [r3]
 801d41c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d420:	f1dc 0300 	rsbs	r3, ip, #0
 801d424:	eb43 030c 	adc.w	r3, r3, ip
 801d428:	930b      	str	r3, [sp, #44]	; 0x2c
 801d42a:	464b      	mov	r3, r9
 801d42c:	f7fa fcb2 	bl	8017d94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d430:	4629      	mov	r1, r5
 801d432:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801d436:	464b      	mov	r3, r9
 801d438:	9a06      	ldr	r2, [sp, #24]
 801d43a:	a810      	add	r0, sp, #64	; 0x40
 801d43c:	f7fa fcc2 	bl	8017dc4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d440:	a914      	add	r1, sp, #80	; 0x50
 801d442:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d446:	a813      	add	r0, sp, #76	; 0x4c
 801d448:	f7fa fd9c 	bl	8017f84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d44c:	f1b9 0f00 	cmp.w	r9, #0
 801d450:	f040 80d4 	bne.w	801d5fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801d454:	f1bb 0f01 	cmp.w	fp, #1
 801d458:	f040 80d8 	bne.w	801d60c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801d45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d45e:	2b00      	cmp	r3, #0
 801d460:	f040 8122 	bne.w	801d6a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801d464:	4ba5      	ldr	r3, [pc, #660]	; (801d6fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801d466:	6818      	ldr	r0, [r3, #0]
 801d468:	6803      	ldr	r3, [r0, #0]
 801d46a:	6a1b      	ldr	r3, [r3, #32]
 801d46c:	4798      	blx	r3
 801d46e:	4aa4      	ldr	r2, [pc, #656]	; (801d700 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d470:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801d474:	8811      	ldrh	r1, [r2, #0]
 801d476:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d47a:	fb01 2303 	mla	r3, r1, r3, r2
 801d47e:	2201      	movs	r2, #1
 801d480:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d484:	4590      	cmp	r8, r2
 801d486:	4403      	add	r3, r0
 801d488:	9307      	str	r3, [sp, #28]
 801d48a:	fa02 f308 	lsl.w	r3, r2, r8
 801d48e:	f103 33ff 	add.w	r3, r3, #4294967295
 801d492:	b2db      	uxtb	r3, r3
 801d494:	930f      	str	r3, [sp, #60]	; 0x3c
 801d496:	f000 8109 	beq.w	801d6ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801d49a:	f1b8 0f02 	cmp.w	r8, #2
 801d49e:	f000 813e 	beq.w	801d71e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801d4a2:	f1b8 0f04 	cmp.w	r8, #4
 801d4a6:	f000 8132 	beq.w	801d70e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801d4aa:	b906      	cbnz	r6, 801d4ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801d4ac:	b174      	cbz	r4, 801d4cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801d4ae:	fb17 6304 	smlabb	r3, r7, r4, r6
 801d4b2:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d4b4:	ebaa 0a04 	sub.w	sl, sl, r4
 801d4b8:	fb13 f308 	smulbb	r3, r3, r8
 801d4bc:	fa1f fa8a 	uxth.w	sl, sl
 801d4c0:	b29b      	uxth	r3, r3
 801d4c2:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801d4c6:	f003 0407 	and.w	r4, r3, #7
 801d4ca:	9124      	str	r1, [sp, #144]	; 0x90
 801d4cc:	4649      	mov	r1, r9
 801d4ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d4d0:	f7ff ff14 	bl	801d2fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801d4d4:	4649      	mov	r1, r9
 801d4d6:	4683      	mov	fp, r0
 801d4d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d4da:	f7ff ff2b 	bl	801d334 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801d4de:	9906      	ldr	r1, [sp, #24]
 801d4e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4e2:	1bad      	subs	r5, r5, r6
 801d4e4:	1a5b      	subs	r3, r3, r1
 801d4e6:	459a      	cmp	sl, r3
 801d4e8:	bfa8      	it	ge
 801d4ea:	469a      	movge	sl, r3
 801d4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4ee:	1b5d      	subs	r5, r3, r5
 801d4f0:	9b08      	ldr	r3, [sp, #32]
 801d4f2:	429d      	cmp	r5, r3
 801d4f4:	bfd4      	ite	le
 801d4f6:	ebc6 0605 	rsble	r6, r6, r5
 801d4fa:	ebc6 0603 	rsbgt	r6, r6, r3
 801d4fe:	1bbf      	subs	r7, r7, r6
 801d500:	fb0b 0016 	mls	r0, fp, r6, r0
 801d504:	fb08 f307 	mul.w	r3, r8, r7
 801d508:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d50c:	9308      	str	r3, [sp, #32]
 801d50e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d510:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d514:	930b      	str	r3, [sp, #44]	; 0x2c
 801d516:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d518:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d51c:	930c      	str	r3, [sp, #48]	; 0x30
 801d51e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d520:	b2db      	uxtb	r3, r3
 801d522:	930d      	str	r3, [sp, #52]	; 0x34
 801d524:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d526:	7819      	ldrb	r1, [r3, #0]
 801d528:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d52c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801d530:	4121      	asrs	r1, r4
 801d532:	9306      	str	r3, [sp, #24]
 801d534:	fb03 0b0b 	mla	fp, r3, fp, r0
 801d538:	b2c9      	uxtb	r1, r1
 801d53a:	f1ba 0f00 	cmp.w	sl, #0
 801d53e:	f340 80d1 	ble.w	801d6e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801d542:	46b6      	mov	lr, r6
 801d544:	9807      	ldr	r0, [sp, #28]
 801d546:	f1be 0f00 	cmp.w	lr, #0
 801d54a:	f340 80b8 	ble.w	801d6be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801d54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d550:	400b      	ands	r3, r1
 801d552:	d03e      	beq.n	801d5d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801d554:	fb13 f302 	smulbb	r3, r3, r2
 801d558:	2bfe      	cmp	r3, #254	; 0xfe
 801d55a:	dd03      	ble.n	801d564 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801d55c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d55e:	2dff      	cmp	r5, #255	; 0xff
 801d560:	f000 80a6 	beq.w	801d6b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801d564:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d566:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d568:	fb15 f303 	smulbb	r3, r5, r3
 801d56c:	b29b      	uxth	r3, r3
 801d56e:	1c5d      	adds	r5, r3, #1
 801d570:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d574:	7805      	ldrb	r5, [r0, #0]
 801d576:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d57a:	fa1f fc83 	uxth.w	ip, r3
 801d57e:	43db      	mvns	r3, r3
 801d580:	fb17 f90c 	smulbb	r9, r7, ip
 801d584:	b2db      	uxtb	r3, r3
 801d586:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d588:	fb05 9503 	mla	r5, r5, r3, r9
 801d58c:	b2ad      	uxth	r5, r5
 801d58e:	f105 0901 	add.w	r9, r5, #1
 801d592:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d596:	fb17 f90c 	smulbb	r9, r7, ip
 801d59a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d59c:	122d      	asrs	r5, r5, #8
 801d59e:	fb17 fc0c 	smulbb	ip, r7, ip
 801d5a2:	7005      	strb	r5, [r0, #0]
 801d5a4:	7845      	ldrb	r5, [r0, #1]
 801d5a6:	fb05 9503 	mla	r5, r5, r3, r9
 801d5aa:	b2ad      	uxth	r5, r5
 801d5ac:	f105 0901 	add.w	r9, r5, #1
 801d5b0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d5b4:	122d      	asrs	r5, r5, #8
 801d5b6:	7045      	strb	r5, [r0, #1]
 801d5b8:	7885      	ldrb	r5, [r0, #2]
 801d5ba:	fb05 cc03 	mla	ip, r5, r3, ip
 801d5be:	fa1f fc8c 	uxth.w	ip, ip
 801d5c2:	f10c 0301 	add.w	r3, ip, #1
 801d5c6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d5ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5ce:	f880 c002 	strb.w	ip, [r0, #2]
 801d5d2:	4444      	add	r4, r8
 801d5d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d5d8:	b2a4      	uxth	r4, r4
 801d5da:	2c07      	cmp	r4, #7
 801d5dc:	bf89      	itett	hi
 801d5de:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801d5e0:	fa41 f108 	asrls.w	r1, r1, r8
 801d5e4:	2400      	movhi	r4, #0
 801d5e6:	7859      	ldrbhi	r1, [r3, #1]
 801d5e8:	bf8a      	itet	hi
 801d5ea:	3301      	addhi	r3, #1
 801d5ec:	b2c9      	uxtbls	r1, r1
 801d5ee:	9324      	strhi	r3, [sp, #144]	; 0x90
 801d5f0:	9b06      	ldr	r3, [sp, #24]
 801d5f2:	4418      	add	r0, r3
 801d5f4:	e7a7      	b.n	801d546 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801d5f6:	441d      	add	r5, r3
 801d5f8:	b22d      	sxth	r5, r5
 801d5fa:	e6f1      	b.n	801d3e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d5fc:	f1b9 0f01 	cmp.w	r9, #1
 801d600:	f47f af2c 	bne.w	801d45c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d604:	f1bb 0f01 	cmp.w	fp, #1
 801d608:	f47f af28 	bne.w	801d45c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d60c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801d6fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801d610:	f8db 0000 	ldr.w	r0, [fp]
 801d614:	6803      	ldr	r3, [r0, #0]
 801d616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d618:	4798      	blx	r3
 801d61a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801d61e:	465a      	mov	r2, fp
 801d620:	d006      	beq.n	801d630 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801d622:	f1b8 0f04 	cmp.w	r8, #4
 801d626:	d13d      	bne.n	801d6a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801d628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d62a:	3300      	adds	r3, #0
 801d62c:	bf18      	it	ne
 801d62e:	2301      	movne	r3, #1
 801d630:	05c0      	lsls	r0, r0, #23
 801d632:	d567      	bpl.n	801d704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d634:	f1b8 0f08 	cmp.w	r8, #8
 801d638:	d164      	bne.n	801d704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	bf0c      	ite	eq
 801d63e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801d642:	2180      	movne	r1, #128	; 0x80
 801d644:	2e00      	cmp	r6, #0
 801d646:	f47f af09 	bne.w	801d45c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d64a:	2c00      	cmp	r4, #0
 801d64c:	f47f af06 	bne.w	801d45c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d650:	9b08      	ldr	r3, [sp, #32]
 801d652:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d654:	442b      	add	r3, r5
 801d656:	4283      	cmp	r3, r0
 801d658:	f73f af00 	bgt.w	801d45c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d65c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801d660:	4403      	add	r3, r0
 801d662:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d664:	4283      	cmp	r3, r0
 801d666:	f73f aef9 	bgt.w	801d45c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d66a:	f1b8 0f08 	cmp.w	r8, #8
 801d66e:	6810      	ldr	r0, [r2, #0]
 801d670:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801d674:	bf18      	it	ne
 801d676:	3701      	addne	r7, #1
 801d678:	6804      	ldr	r4, [r0, #0]
 801d67a:	9105      	str	r1, [sp, #20]
 801d67c:	bf18      	it	ne
 801d67e:	f027 0701 	bicne.w	r7, r7, #1
 801d682:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d684:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801d688:	bf18      	it	ne
 801d68a:	b2bf      	uxthne	r7, r7
 801d68c:	9104      	str	r1, [sp, #16]
 801d68e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d690:	e9cd 7a00 	strd	r7, sl, [sp]
 801d694:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801d698:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d69a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801d69c:	47a0      	blx	r4
 801d69e:	b015      	add	sp, #84	; 0x54
 801d6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6a4:	2300      	movs	r3, #0
 801d6a6:	e7c3      	b.n	801d630 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801d6a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d6aa:	e6e0      	b.n	801d46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d6ac:	22ff      	movs	r2, #255	; 0xff
 801d6ae:	e6fc      	b.n	801d4aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d6b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6b2:	7003      	strb	r3, [r0, #0]
 801d6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6b6:	7043      	strb	r3, [r0, #1]
 801d6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6ba:	7083      	strb	r3, [r0, #2]
 801d6bc:	e789      	b.n	801d5d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801d6be:	9b08      	ldr	r3, [sp, #32]
 801d6c0:	b153      	cbz	r3, 801d6d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801d6c2:	441c      	add	r4, r3
 801d6c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d6c6:	b2a4      	uxth	r4, r4
 801d6c8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801d6cc:	f004 0407 	and.w	r4, r4, #7
 801d6d0:	7819      	ldrb	r1, [r3, #0]
 801d6d2:	9324      	str	r3, [sp, #144]	; 0x90
 801d6d4:	4121      	asrs	r1, r4
 801d6d6:	b2c9      	uxtb	r1, r1
 801d6d8:	9b07      	ldr	r3, [sp, #28]
 801d6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d6de:	445b      	add	r3, fp
 801d6e0:	9307      	str	r3, [sp, #28]
 801d6e2:	e72a      	b.n	801d53a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801d6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d1d9      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d6ea:	4b04      	ldr	r3, [pc, #16]	; (801d6fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801d6ec:	6818      	ldr	r0, [r3, #0]
 801d6ee:	6803      	ldr	r3, [r0, #0]
 801d6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6f2:	4798      	blx	r3
 801d6f4:	e7d3      	b.n	801d69e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d6f6:	bf00      	nop
 801d6f8:	2000bc70 	.word	0x2000bc70
 801d6fc:	2000bc78 	.word	0x2000bc78
 801d700:	2000bc72 	.word	0x2000bc72
 801d704:	2b00      	cmp	r3, #0
 801d706:	f43f aea9 	beq.w	801d45c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d70a:	2180      	movs	r1, #128	; 0x80
 801d70c:	e79a      	b.n	801d644 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801d70e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d710:	b11b      	cbz	r3, 801d71a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801d712:	07fb      	lsls	r3, r7, #31
 801d714:	d501      	bpl.n	801d71a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801d716:	3701      	adds	r7, #1
 801d718:	b2bf      	uxth	r7, r7
 801d71a:	2211      	movs	r2, #17
 801d71c:	e6c5      	b.n	801d4aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d71e:	2255      	movs	r2, #85	; 0x55
 801d720:	e6c3      	b.n	801d4aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d722:	bf00      	nop

0801d724 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d724:	b538      	push	{r3, r4, r5, lr}
 801d726:	4c15      	ldr	r4, [pc, #84]	; (801d77c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d728:	4605      	mov	r5, r0
 801d72a:	7823      	ldrb	r3, [r4, #0]
 801d72c:	f3bf 8f5b 	dmb	ish
 801d730:	07da      	lsls	r2, r3, #31
 801d732:	d40b      	bmi.n	801d74c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d734:	4620      	mov	r0, r4
 801d736:	f006 fd5e 	bl	80241f6 <__cxa_guard_acquire>
 801d73a:	b138      	cbz	r0, 801d74c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d73c:	4620      	mov	r0, r4
 801d73e:	f006 fd66 	bl	802420e <__cxa_guard_release>
 801d742:	4a0f      	ldr	r2, [pc, #60]	; (801d780 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d744:	490f      	ldr	r1, [pc, #60]	; (801d784 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d746:	4810      	ldr	r0, [pc, #64]	; (801d788 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d748:	f006 fd4b 	bl	80241e2 <__aeabi_atexit>
 801d74c:	4c0f      	ldr	r4, [pc, #60]	; (801d78c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d74e:	7823      	ldrb	r3, [r4, #0]
 801d750:	f3bf 8f5b 	dmb	ish
 801d754:	07db      	lsls	r3, r3, #31
 801d756:	d40b      	bmi.n	801d770 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d758:	4620      	mov	r0, r4
 801d75a:	f006 fd4c 	bl	80241f6 <__cxa_guard_acquire>
 801d75e:	b138      	cbz	r0, 801d770 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d760:	4620      	mov	r0, r4
 801d762:	f006 fd54 	bl	802420e <__cxa_guard_release>
 801d766:	4a06      	ldr	r2, [pc, #24]	; (801d780 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d768:	4909      	ldr	r1, [pc, #36]	; (801d790 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d76a:	480a      	ldr	r0, [pc, #40]	; (801d794 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d76c:	f006 fd39 	bl	80241e2 <__aeabi_atexit>
 801d770:	4b05      	ldr	r3, [pc, #20]	; (801d788 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d772:	612b      	str	r3, [r5, #16]
 801d774:	4b07      	ldr	r3, [pc, #28]	; (801d794 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d776:	616b      	str	r3, [r5, #20]
 801d778:	bd38      	pop	{r3, r4, r5, pc}
 801d77a:	bf00      	nop
 801d77c:	2000bd84 	.word	0x2000bd84
 801d780:	20000000 	.word	0x20000000
 801d784:	0801c35b 	.word	0x0801c35b
 801d788:	20000088 	.word	0x20000088
 801d78c:	2000bd88 	.word	0x2000bd88
 801d790:	0801c359 	.word	0x0801c359
 801d794:	2000008c 	.word	0x2000008c

0801d798 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d798:	b538      	push	{r3, r4, r5, lr}
 801d79a:	4c15      	ldr	r4, [pc, #84]	; (801d7f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d79c:	4605      	mov	r5, r0
 801d79e:	7823      	ldrb	r3, [r4, #0]
 801d7a0:	f3bf 8f5b 	dmb	ish
 801d7a4:	07da      	lsls	r2, r3, #31
 801d7a6:	d40b      	bmi.n	801d7c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d7a8:	4620      	mov	r0, r4
 801d7aa:	f006 fd24 	bl	80241f6 <__cxa_guard_acquire>
 801d7ae:	b138      	cbz	r0, 801d7c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d7b0:	4620      	mov	r0, r4
 801d7b2:	f006 fd2c 	bl	802420e <__cxa_guard_release>
 801d7b6:	4a0f      	ldr	r2, [pc, #60]	; (801d7f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d7b8:	490f      	ldr	r1, [pc, #60]	; (801d7f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d7ba:	4810      	ldr	r0, [pc, #64]	; (801d7fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d7bc:	f006 fd11 	bl	80241e2 <__aeabi_atexit>
 801d7c0:	4c0f      	ldr	r4, [pc, #60]	; (801d800 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d7c2:	7823      	ldrb	r3, [r4, #0]
 801d7c4:	f3bf 8f5b 	dmb	ish
 801d7c8:	07db      	lsls	r3, r3, #31
 801d7ca:	d40b      	bmi.n	801d7e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f006 fd12 	bl	80241f6 <__cxa_guard_acquire>
 801d7d2:	b138      	cbz	r0, 801d7e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d7d4:	4620      	mov	r0, r4
 801d7d6:	f006 fd1a 	bl	802420e <__cxa_guard_release>
 801d7da:	4a06      	ldr	r2, [pc, #24]	; (801d7f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d7dc:	4909      	ldr	r1, [pc, #36]	; (801d804 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d7de:	480a      	ldr	r0, [pc, #40]	; (801d808 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d7e0:	f006 fcff 	bl	80241e2 <__aeabi_atexit>
 801d7e4:	4b05      	ldr	r3, [pc, #20]	; (801d7fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d7e6:	60ab      	str	r3, [r5, #8]
 801d7e8:	4b07      	ldr	r3, [pc, #28]	; (801d808 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d7ea:	60eb      	str	r3, [r5, #12]
 801d7ec:	bd38      	pop	{r3, r4, r5, pc}
 801d7ee:	bf00      	nop
 801d7f0:	2000bd64 	.word	0x2000bd64
 801d7f4:	20000000 	.word	0x20000000
 801d7f8:	0801c35f 	.word	0x0801c35f
 801d7fc:	20000068 	.word	0x20000068
 801d800:	2000bd68 	.word	0x2000bd68
 801d804:	0801c35d 	.word	0x0801c35d
 801d808:	2000006c 	.word	0x2000006c

0801d80c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801d80c:	b510      	push	{r4, lr}
 801d80e:	4604      	mov	r4, r0
 801d810:	f7ff ff88 	bl	801d724 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d814:	4620      	mov	r0, r4
 801d816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d81a:	f7ff bfbd 	b.w	801d798 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d820 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d820:	b538      	push	{r3, r4, r5, lr}
 801d822:	4c15      	ldr	r4, [pc, #84]	; (801d878 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d824:	4605      	mov	r5, r0
 801d826:	7823      	ldrb	r3, [r4, #0]
 801d828:	f3bf 8f5b 	dmb	ish
 801d82c:	07da      	lsls	r2, r3, #31
 801d82e:	d40b      	bmi.n	801d848 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d830:	4620      	mov	r0, r4
 801d832:	f006 fce0 	bl	80241f6 <__cxa_guard_acquire>
 801d836:	b138      	cbz	r0, 801d848 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d838:	4620      	mov	r0, r4
 801d83a:	f006 fce8 	bl	802420e <__cxa_guard_release>
 801d83e:	4a0f      	ldr	r2, [pc, #60]	; (801d87c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d840:	490f      	ldr	r1, [pc, #60]	; (801d880 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d842:	4810      	ldr	r0, [pc, #64]	; (801d884 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d844:	f006 fccd 	bl	80241e2 <__aeabi_atexit>
 801d848:	4c0f      	ldr	r4, [pc, #60]	; (801d888 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d84a:	7823      	ldrb	r3, [r4, #0]
 801d84c:	f3bf 8f5b 	dmb	ish
 801d850:	07db      	lsls	r3, r3, #31
 801d852:	d40b      	bmi.n	801d86c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d854:	4620      	mov	r0, r4
 801d856:	f006 fcce 	bl	80241f6 <__cxa_guard_acquire>
 801d85a:	b138      	cbz	r0, 801d86c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d85c:	4620      	mov	r0, r4
 801d85e:	f006 fcd6 	bl	802420e <__cxa_guard_release>
 801d862:	4a06      	ldr	r2, [pc, #24]	; (801d87c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d864:	4909      	ldr	r1, [pc, #36]	; (801d88c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d866:	480a      	ldr	r0, [pc, #40]	; (801d890 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d868:	f006 fcbb 	bl	80241e2 <__aeabi_atexit>
 801d86c:	4b05      	ldr	r3, [pc, #20]	; (801d884 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d86e:	622b      	str	r3, [r5, #32]
 801d870:	4b07      	ldr	r3, [pc, #28]	; (801d890 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d872:	626b      	str	r3, [r5, #36]	; 0x24
 801d874:	bd38      	pop	{r3, r4, r5, pc}
 801d876:	bf00      	nop
 801d878:	2000bd8c 	.word	0x2000bd8c
 801d87c:	20000000 	.word	0x20000000
 801d880:	0801c353 	.word	0x0801c353
 801d884:	20000090 	.word	0x20000090
 801d888:	2000bd90 	.word	0x2000bd90
 801d88c:	0801c351 	.word	0x0801c351
 801d890:	20000094 	.word	0x20000094

0801d894 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d894:	b538      	push	{r3, r4, r5, lr}
 801d896:	4c15      	ldr	r4, [pc, #84]	; (801d8ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d898:	4605      	mov	r5, r0
 801d89a:	7823      	ldrb	r3, [r4, #0]
 801d89c:	f3bf 8f5b 	dmb	ish
 801d8a0:	07da      	lsls	r2, r3, #31
 801d8a2:	d40b      	bmi.n	801d8bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d8a4:	4620      	mov	r0, r4
 801d8a6:	f006 fca6 	bl	80241f6 <__cxa_guard_acquire>
 801d8aa:	b138      	cbz	r0, 801d8bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	f006 fcae 	bl	802420e <__cxa_guard_release>
 801d8b2:	4a0f      	ldr	r2, [pc, #60]	; (801d8f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d8b4:	490f      	ldr	r1, [pc, #60]	; (801d8f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d8b6:	4810      	ldr	r0, [pc, #64]	; (801d8f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d8b8:	f006 fc93 	bl	80241e2 <__aeabi_atexit>
 801d8bc:	4c0f      	ldr	r4, [pc, #60]	; (801d8fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d8be:	7823      	ldrb	r3, [r4, #0]
 801d8c0:	f3bf 8f5b 	dmb	ish
 801d8c4:	07db      	lsls	r3, r3, #31
 801d8c6:	d40b      	bmi.n	801d8e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	f006 fc94 	bl	80241f6 <__cxa_guard_acquire>
 801d8ce:	b138      	cbz	r0, 801d8e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d8d0:	4620      	mov	r0, r4
 801d8d2:	f006 fc9c 	bl	802420e <__cxa_guard_release>
 801d8d6:	4a06      	ldr	r2, [pc, #24]	; (801d8f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d8d8:	4909      	ldr	r1, [pc, #36]	; (801d900 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d8da:	480a      	ldr	r0, [pc, #40]	; (801d904 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d8dc:	f006 fc81 	bl	80241e2 <__aeabi_atexit>
 801d8e0:	4b05      	ldr	r3, [pc, #20]	; (801d8f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d8e2:	61ab      	str	r3, [r5, #24]
 801d8e4:	4b07      	ldr	r3, [pc, #28]	; (801d904 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d8e6:	61eb      	str	r3, [r5, #28]
 801d8e8:	bd38      	pop	{r3, r4, r5, pc}
 801d8ea:	bf00      	nop
 801d8ec:	2000bd6c 	.word	0x2000bd6c
 801d8f0:	20000000 	.word	0x20000000
 801d8f4:	0801c357 	.word	0x0801c357
 801d8f8:	20000070 	.word	0x20000070
 801d8fc:	2000bd70 	.word	0x2000bd70
 801d900:	0801c355 	.word	0x0801c355
 801d904:	20000074 	.word	0x20000074

0801d908 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d908:	b510      	push	{r4, lr}
 801d90a:	4604      	mov	r4, r0
 801d90c:	f7ff ff88 	bl	801d820 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d910:	4620      	mov	r0, r4
 801d912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d916:	f7ff bfbd 	b.w	801d894 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d91c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801d91c:	b538      	push	{r3, r4, r5, lr}
 801d91e:	4c15      	ldr	r4, [pc, #84]	; (801d974 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801d920:	4605      	mov	r5, r0
 801d922:	7823      	ldrb	r3, [r4, #0]
 801d924:	f3bf 8f5b 	dmb	ish
 801d928:	07da      	lsls	r2, r3, #31
 801d92a:	d40b      	bmi.n	801d944 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d92c:	4620      	mov	r0, r4
 801d92e:	f006 fc62 	bl	80241f6 <__cxa_guard_acquire>
 801d932:	b138      	cbz	r0, 801d944 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d934:	4620      	mov	r0, r4
 801d936:	f006 fc6a 	bl	802420e <__cxa_guard_release>
 801d93a:	4a0f      	ldr	r2, [pc, #60]	; (801d978 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d93c:	490f      	ldr	r1, [pc, #60]	; (801d97c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801d93e:	4810      	ldr	r0, [pc, #64]	; (801d980 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d940:	f006 fc4f 	bl	80241e2 <__aeabi_atexit>
 801d944:	4c0f      	ldr	r4, [pc, #60]	; (801d984 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801d946:	7823      	ldrb	r3, [r4, #0]
 801d948:	f3bf 8f5b 	dmb	ish
 801d94c:	07db      	lsls	r3, r3, #31
 801d94e:	d40b      	bmi.n	801d968 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d950:	4620      	mov	r0, r4
 801d952:	f006 fc50 	bl	80241f6 <__cxa_guard_acquire>
 801d956:	b138      	cbz	r0, 801d968 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d958:	4620      	mov	r0, r4
 801d95a:	f006 fc58 	bl	802420e <__cxa_guard_release>
 801d95e:	4a06      	ldr	r2, [pc, #24]	; (801d978 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d960:	4909      	ldr	r1, [pc, #36]	; (801d988 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801d962:	480a      	ldr	r0, [pc, #40]	; (801d98c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d964:	f006 fc3d 	bl	80241e2 <__aeabi_atexit>
 801d968:	4b05      	ldr	r3, [pc, #20]	; (801d980 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d96a:	632b      	str	r3, [r5, #48]	; 0x30
 801d96c:	4b07      	ldr	r3, [pc, #28]	; (801d98c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d96e:	636b      	str	r3, [r5, #52]	; 0x34
 801d970:	bd38      	pop	{r3, r4, r5, pc}
 801d972:	bf00      	nop
 801d974:	2000bd74 	.word	0x2000bd74
 801d978:	20000000 	.word	0x20000000
 801d97c:	0801c34b 	.word	0x0801c34b
 801d980:	20000078 	.word	0x20000078
 801d984:	2000bd78 	.word	0x2000bd78
 801d988:	0801c349 	.word	0x0801c349
 801d98c:	2000007c 	.word	0x2000007c

0801d990 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801d990:	b538      	push	{r3, r4, r5, lr}
 801d992:	4c15      	ldr	r4, [pc, #84]	; (801d9e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801d994:	4605      	mov	r5, r0
 801d996:	7823      	ldrb	r3, [r4, #0]
 801d998:	f3bf 8f5b 	dmb	ish
 801d99c:	07da      	lsls	r2, r3, #31
 801d99e:	d40b      	bmi.n	801d9b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	f006 fc28 	bl	80241f6 <__cxa_guard_acquire>
 801d9a6:	b138      	cbz	r0, 801d9b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d9a8:	4620      	mov	r0, r4
 801d9aa:	f006 fc30 	bl	802420e <__cxa_guard_release>
 801d9ae:	4a0f      	ldr	r2, [pc, #60]	; (801d9ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d9b0:	490f      	ldr	r1, [pc, #60]	; (801d9f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801d9b2:	4810      	ldr	r0, [pc, #64]	; (801d9f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d9b4:	f006 fc15 	bl	80241e2 <__aeabi_atexit>
 801d9b8:	4c0f      	ldr	r4, [pc, #60]	; (801d9f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801d9ba:	7823      	ldrb	r3, [r4, #0]
 801d9bc:	f3bf 8f5b 	dmb	ish
 801d9c0:	07db      	lsls	r3, r3, #31
 801d9c2:	d40b      	bmi.n	801d9dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d9c4:	4620      	mov	r0, r4
 801d9c6:	f006 fc16 	bl	80241f6 <__cxa_guard_acquire>
 801d9ca:	b138      	cbz	r0, 801d9dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d9cc:	4620      	mov	r0, r4
 801d9ce:	f006 fc1e 	bl	802420e <__cxa_guard_release>
 801d9d2:	4a06      	ldr	r2, [pc, #24]	; (801d9ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d9d4:	4909      	ldr	r1, [pc, #36]	; (801d9fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801d9d6:	480a      	ldr	r0, [pc, #40]	; (801da00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d9d8:	f006 fc03 	bl	80241e2 <__aeabi_atexit>
 801d9dc:	4b05      	ldr	r3, [pc, #20]	; (801d9f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d9de:	62ab      	str	r3, [r5, #40]	; 0x28
 801d9e0:	4b07      	ldr	r3, [pc, #28]	; (801da00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d9e2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d9e4:	bd38      	pop	{r3, r4, r5, pc}
 801d9e6:	bf00      	nop
 801d9e8:	2000bd4c 	.word	0x2000bd4c
 801d9ec:	20000000 	.word	0x20000000
 801d9f0:	0801c34f 	.word	0x0801c34f
 801d9f4:	20000050 	.word	0x20000050
 801d9f8:	2000bd50 	.word	0x2000bd50
 801d9fc:	0801c34d 	.word	0x0801c34d
 801da00:	20000054 	.word	0x20000054

0801da04 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801da04:	b510      	push	{r4, lr}
 801da06:	4604      	mov	r4, r0
 801da08:	f7ff ff88 	bl	801d91c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801da0c:	4620      	mov	r0, r4
 801da0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da12:	f7ff bfbd 	b.w	801d990 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801da18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801da18:	b538      	push	{r3, r4, r5, lr}
 801da1a:	4c15      	ldr	r4, [pc, #84]	; (801da70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801da1c:	4605      	mov	r5, r0
 801da1e:	7823      	ldrb	r3, [r4, #0]
 801da20:	f3bf 8f5b 	dmb	ish
 801da24:	07da      	lsls	r2, r3, #31
 801da26:	d40b      	bmi.n	801da40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801da28:	4620      	mov	r0, r4
 801da2a:	f006 fbe4 	bl	80241f6 <__cxa_guard_acquire>
 801da2e:	b138      	cbz	r0, 801da40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801da30:	4620      	mov	r0, r4
 801da32:	f006 fbec 	bl	802420e <__cxa_guard_release>
 801da36:	4a0f      	ldr	r2, [pc, #60]	; (801da74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801da38:	490f      	ldr	r1, [pc, #60]	; (801da78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801da3a:	4810      	ldr	r0, [pc, #64]	; (801da7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801da3c:	f006 fbd1 	bl	80241e2 <__aeabi_atexit>
 801da40:	4c0f      	ldr	r4, [pc, #60]	; (801da80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801da42:	7823      	ldrb	r3, [r4, #0]
 801da44:	f3bf 8f5b 	dmb	ish
 801da48:	07db      	lsls	r3, r3, #31
 801da4a:	d40b      	bmi.n	801da64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801da4c:	4620      	mov	r0, r4
 801da4e:	f006 fbd2 	bl	80241f6 <__cxa_guard_acquire>
 801da52:	b138      	cbz	r0, 801da64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801da54:	4620      	mov	r0, r4
 801da56:	f006 fbda 	bl	802420e <__cxa_guard_release>
 801da5a:	4a06      	ldr	r2, [pc, #24]	; (801da74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801da5c:	4909      	ldr	r1, [pc, #36]	; (801da84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801da5e:	480a      	ldr	r0, [pc, #40]	; (801da88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801da60:	f006 fbbf 	bl	80241e2 <__aeabi_atexit>
 801da64:	4b05      	ldr	r3, [pc, #20]	; (801da7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801da66:	642b      	str	r3, [r5, #64]	; 0x40
 801da68:	4b07      	ldr	r3, [pc, #28]	; (801da88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801da6a:	646b      	str	r3, [r5, #68]	; 0x44
 801da6c:	bd38      	pop	{r3, r4, r5, pc}
 801da6e:	bf00      	nop
 801da70:	2000bd7c 	.word	0x2000bd7c
 801da74:	20000000 	.word	0x20000000
 801da78:	0801c343 	.word	0x0801c343
 801da7c:	20000080 	.word	0x20000080
 801da80:	2000bd80 	.word	0x2000bd80
 801da84:	0801c341 	.word	0x0801c341
 801da88:	20000084 	.word	0x20000084

0801da8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801da8c:	b538      	push	{r3, r4, r5, lr}
 801da8e:	4c15      	ldr	r4, [pc, #84]	; (801dae4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801da90:	4605      	mov	r5, r0
 801da92:	7823      	ldrb	r3, [r4, #0]
 801da94:	f3bf 8f5b 	dmb	ish
 801da98:	07da      	lsls	r2, r3, #31
 801da9a:	d40b      	bmi.n	801dab4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801da9c:	4620      	mov	r0, r4
 801da9e:	f006 fbaa 	bl	80241f6 <__cxa_guard_acquire>
 801daa2:	b138      	cbz	r0, 801dab4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801daa4:	4620      	mov	r0, r4
 801daa6:	f006 fbb2 	bl	802420e <__cxa_guard_release>
 801daaa:	4a0f      	ldr	r2, [pc, #60]	; (801dae8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801daac:	490f      	ldr	r1, [pc, #60]	; (801daec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801daae:	4810      	ldr	r0, [pc, #64]	; (801daf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801dab0:	f006 fb97 	bl	80241e2 <__aeabi_atexit>
 801dab4:	4c0f      	ldr	r4, [pc, #60]	; (801daf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801dab6:	7823      	ldrb	r3, [r4, #0]
 801dab8:	f3bf 8f5b 	dmb	ish
 801dabc:	07db      	lsls	r3, r3, #31
 801dabe:	d40b      	bmi.n	801dad8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dac0:	4620      	mov	r0, r4
 801dac2:	f006 fb98 	bl	80241f6 <__cxa_guard_acquire>
 801dac6:	b138      	cbz	r0, 801dad8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dac8:	4620      	mov	r0, r4
 801daca:	f006 fba0 	bl	802420e <__cxa_guard_release>
 801dace:	4a06      	ldr	r2, [pc, #24]	; (801dae8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801dad0:	4909      	ldr	r1, [pc, #36]	; (801daf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801dad2:	480a      	ldr	r0, [pc, #40]	; (801dafc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dad4:	f006 fb85 	bl	80241e2 <__aeabi_atexit>
 801dad8:	4b05      	ldr	r3, [pc, #20]	; (801daf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801dada:	63ab      	str	r3, [r5, #56]	; 0x38
 801dadc:	4b07      	ldr	r3, [pc, #28]	; (801dafc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dade:	63eb      	str	r3, [r5, #60]	; 0x3c
 801dae0:	bd38      	pop	{r3, r4, r5, pc}
 801dae2:	bf00      	nop
 801dae4:	2000bd5c 	.word	0x2000bd5c
 801dae8:	20000000 	.word	0x20000000
 801daec:	0801c347 	.word	0x0801c347
 801daf0:	20000060 	.word	0x20000060
 801daf4:	2000bd60 	.word	0x2000bd60
 801daf8:	0801c345 	.word	0x0801c345
 801dafc:	20000064 	.word	0x20000064

0801db00 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801db00:	b510      	push	{r4, lr}
 801db02:	4604      	mov	r4, r0
 801db04:	f7ff ff88 	bl	801da18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801db08:	4620      	mov	r0, r4
 801db0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db0e:	f7ff bfbd 	b.w	801da8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801db14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801db14:	b538      	push	{r3, r4, r5, lr}
 801db16:	4c15      	ldr	r4, [pc, #84]	; (801db6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801db18:	4605      	mov	r5, r0
 801db1a:	7823      	ldrb	r3, [r4, #0]
 801db1c:	f3bf 8f5b 	dmb	ish
 801db20:	07da      	lsls	r2, r3, #31
 801db22:	d40b      	bmi.n	801db3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801db24:	4620      	mov	r0, r4
 801db26:	f006 fb66 	bl	80241f6 <__cxa_guard_acquire>
 801db2a:	b138      	cbz	r0, 801db3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801db2c:	4620      	mov	r0, r4
 801db2e:	f006 fb6e 	bl	802420e <__cxa_guard_release>
 801db32:	4a0f      	ldr	r2, [pc, #60]	; (801db70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801db34:	490f      	ldr	r1, [pc, #60]	; (801db74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801db36:	4810      	ldr	r0, [pc, #64]	; (801db78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801db38:	f006 fb53 	bl	80241e2 <__aeabi_atexit>
 801db3c:	4c0f      	ldr	r4, [pc, #60]	; (801db7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801db3e:	7823      	ldrb	r3, [r4, #0]
 801db40:	f3bf 8f5b 	dmb	ish
 801db44:	07db      	lsls	r3, r3, #31
 801db46:	d40b      	bmi.n	801db60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801db48:	4620      	mov	r0, r4
 801db4a:	f006 fb54 	bl	80241f6 <__cxa_guard_acquire>
 801db4e:	b138      	cbz	r0, 801db60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801db50:	4620      	mov	r0, r4
 801db52:	f006 fb5c 	bl	802420e <__cxa_guard_release>
 801db56:	4a06      	ldr	r2, [pc, #24]	; (801db70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801db58:	4909      	ldr	r1, [pc, #36]	; (801db80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801db5a:	480a      	ldr	r0, [pc, #40]	; (801db84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801db5c:	f006 fb41 	bl	80241e2 <__aeabi_atexit>
 801db60:	4b05      	ldr	r3, [pc, #20]	; (801db78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801db62:	652b      	str	r3, [r5, #80]	; 0x50
 801db64:	4b07      	ldr	r3, [pc, #28]	; (801db84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801db66:	656b      	str	r3, [r5, #84]	; 0x54
 801db68:	bd38      	pop	{r3, r4, r5, pc}
 801db6a:	bf00      	nop
 801db6c:	2000bd54 	.word	0x2000bd54
 801db70:	20000000 	.word	0x20000000
 801db74:	0801c33b 	.word	0x0801c33b
 801db78:	20000058 	.word	0x20000058
 801db7c:	2000bd58 	.word	0x2000bd58
 801db80:	0801c339 	.word	0x0801c339
 801db84:	2000005c 	.word	0x2000005c

0801db88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801db88:	b538      	push	{r3, r4, r5, lr}
 801db8a:	4c15      	ldr	r4, [pc, #84]	; (801dbe0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801db8c:	4605      	mov	r5, r0
 801db8e:	7823      	ldrb	r3, [r4, #0]
 801db90:	f3bf 8f5b 	dmb	ish
 801db94:	07da      	lsls	r2, r3, #31
 801db96:	d40b      	bmi.n	801dbb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801db98:	4620      	mov	r0, r4
 801db9a:	f006 fb2c 	bl	80241f6 <__cxa_guard_acquire>
 801db9e:	b138      	cbz	r0, 801dbb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801dba0:	4620      	mov	r0, r4
 801dba2:	f006 fb34 	bl	802420e <__cxa_guard_release>
 801dba6:	4a0f      	ldr	r2, [pc, #60]	; (801dbe4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dba8:	490f      	ldr	r1, [pc, #60]	; (801dbe8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801dbaa:	4810      	ldr	r0, [pc, #64]	; (801dbec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dbac:	f006 fb19 	bl	80241e2 <__aeabi_atexit>
 801dbb0:	4c0f      	ldr	r4, [pc, #60]	; (801dbf0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801dbb2:	7823      	ldrb	r3, [r4, #0]
 801dbb4:	f3bf 8f5b 	dmb	ish
 801dbb8:	07db      	lsls	r3, r3, #31
 801dbba:	d40b      	bmi.n	801dbd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	f006 fb1a 	bl	80241f6 <__cxa_guard_acquire>
 801dbc2:	b138      	cbz	r0, 801dbd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	f006 fb22 	bl	802420e <__cxa_guard_release>
 801dbca:	4a06      	ldr	r2, [pc, #24]	; (801dbe4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dbcc:	4909      	ldr	r1, [pc, #36]	; (801dbf4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801dbce:	480a      	ldr	r0, [pc, #40]	; (801dbf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dbd0:	f006 fb07 	bl	80241e2 <__aeabi_atexit>
 801dbd4:	4b05      	ldr	r3, [pc, #20]	; (801dbec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dbd6:	64ab      	str	r3, [r5, #72]	; 0x48
 801dbd8:	4b07      	ldr	r3, [pc, #28]	; (801dbf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dbda:	64eb      	str	r3, [r5, #76]	; 0x4c
 801dbdc:	bd38      	pop	{r3, r4, r5, pc}
 801dbde:	bf00      	nop
 801dbe0:	2000bd44 	.word	0x2000bd44
 801dbe4:	20000000 	.word	0x20000000
 801dbe8:	0801c33f 	.word	0x0801c33f
 801dbec:	20000048 	.word	0x20000048
 801dbf0:	2000bd48 	.word	0x2000bd48
 801dbf4:	0801c33d 	.word	0x0801c33d
 801dbf8:	2000004c 	.word	0x2000004c

0801dbfc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801dbfc:	b510      	push	{r4, lr}
 801dbfe:	4604      	mov	r4, r0
 801dc00:	f7ff ff88 	bl	801db14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801dc04:	4620      	mov	r0, r4
 801dc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc0a:	f7ff bfbd 	b.w	801db88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801dc0e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801dc0e:	b510      	push	{r4, lr}
 801dc10:	4604      	mov	r4, r0
 801dc12:	f7ff fff3 	bl	801dbfc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801dc16:	4620      	mov	r0, r4
 801dc18:	f7ff ff72 	bl	801db00 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801dc1c:	4620      	mov	r0, r4
 801dc1e:	f7ff fe73 	bl	801d908 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801dc22:	4620      	mov	r0, r4
 801dc24:	f7ff fdf2 	bl	801d80c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801dc28:	4620      	mov	r0, r4
 801dc2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc2e:	f7ff bee9 	b.w	801da04 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801dc34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801dc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc38:	b087      	sub	sp, #28
 801dc3a:	7888      	ldrb	r0, [r1, #2]
 801dc3c:	4616      	mov	r6, r2
 801dc3e:	9001      	str	r0, [sp, #4]
 801dc40:	7848      	ldrb	r0, [r1, #1]
 801dc42:	9100      	str	r1, [sp, #0]
 801dc44:	9002      	str	r0, [sp, #8]
 801dc46:	7808      	ldrb	r0, [r1, #0]
 801dc48:	9901      	ldr	r1, [sp, #4]
 801dc4a:	9003      	str	r0, [sp, #12]
 801dc4c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801dc50:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801dc54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801dc58:	9902      	ldr	r1, [sp, #8]
 801dc5a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801dc5e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801dc62:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801dc66:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801dc6a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801dc6e:	9005      	str	r0, [sp, #20]
 801dc70:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801dc74:	fb05 ca0e 	mla	sl, r5, lr, ip
 801dc78:	2d00      	cmp	r5, #0
 801dc7a:	eb06 080a 	add.w	r8, r6, sl
 801dc7e:	db4a      	blt.n	801dd16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801dc80:	45a9      	cmp	r9, r5
 801dc82:	dd48      	ble.n	801dd16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801dc84:	f1bc 0f00 	cmp.w	ip, #0
 801dc88:	db43      	blt.n	801dd12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801dc8a:	45e6      	cmp	lr, ip
 801dc8c:	dd41      	ble.n	801dd12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801dc8e:	f816 600a 	ldrb.w	r6, [r6, sl]
 801dc92:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dc96:	441e      	add	r6, r3
 801dc98:	f11c 0001 	adds.w	r0, ip, #1
 801dc9c:	d43e      	bmi.n	801dd1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801dc9e:	4586      	cmp	lr, r0
 801dca0:	dd3c      	ble.n	801dd1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801dca2:	2a00      	cmp	r2, #0
 801dca4:	d03a      	beq.n	801dd1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801dca6:	f898 0001 	ldrb.w	r0, [r8, #1]
 801dcaa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dcae:	4418      	add	r0, r3
 801dcb0:	3501      	adds	r5, #1
 801dcb2:	d437      	bmi.n	801dd24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801dcb4:	45a9      	cmp	r9, r5
 801dcb6:	dd35      	ble.n	801dd24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801dcb8:	b3a4      	cbz	r4, 801dd24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801dcba:	f1bc 0f00 	cmp.w	ip, #0
 801dcbe:	db2f      	blt.n	801dd20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801dcc0:	45e6      	cmp	lr, ip
 801dcc2:	dd2d      	ble.n	801dd20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801dcc4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801dcc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dccc:	441d      	add	r5, r3
 801dcce:	f11c 0c01 	adds.w	ip, ip, #1
 801dcd2:	d42a      	bmi.n	801dd2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801dcd4:	45e6      	cmp	lr, ip
 801dcd6:	dd28      	ble.n	801dd2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801dcd8:	b33a      	cbz	r2, 801dd2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801dcda:	44c6      	add	lr, r8
 801dcdc:	f89e c001 	ldrb.w	ip, [lr, #1]
 801dce0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dce4:	4463      	add	r3, ip
 801dce6:	ea6f 0c07 	mvn.w	ip, r7
 801dcea:	2a0f      	cmp	r2, #15
 801dcec:	f896 a000 	ldrb.w	sl, [r6]
 801dcf0:	fa5f fc8c 	uxtb.w	ip, ip
 801dcf4:	f890 b000 	ldrb.w	fp, [r0]
 801dcf8:	f895 9000 	ldrb.w	r9, [r5]
 801dcfc:	7819      	ldrb	r1, [r3, #0]
 801dcfe:	d801      	bhi.n	801dd04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801dd00:	2c0f      	cmp	r4, #15
 801dd02:	d914      	bls.n	801dd2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801dd04:	4b40      	ldr	r3, [pc, #256]	; (801de08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801dd06:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801dd0a:	4a40      	ldr	r2, [pc, #256]	; (801de0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801dd0c:	4840      	ldr	r0, [pc, #256]	; (801de10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801dd0e:	f006 fa9b 	bl	8024248 <__assert_func>
 801dd12:	ae05      	add	r6, sp, #20
 801dd14:	e7c0      	b.n	801dc98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801dd16:	a805      	add	r0, sp, #20
 801dd18:	4606      	mov	r6, r0
 801dd1a:	e7c9      	b.n	801dcb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801dd1c:	a805      	add	r0, sp, #20
 801dd1e:	e7c7      	b.n	801dcb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801dd20:	ad05      	add	r5, sp, #20
 801dd22:	e7d4      	b.n	801dcce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801dd24:	ab05      	add	r3, sp, #20
 801dd26:	461d      	mov	r5, r3
 801dd28:	e7dd      	b.n	801dce6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801dd2a:	ab05      	add	r3, sp, #20
 801dd2c:	e7db      	b.n	801dce6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801dd2e:	b292      	uxth	r2, r2
 801dd30:	b2a4      	uxth	r4, r4
 801dd32:	fa1f fc8c 	uxth.w	ip, ip
 801dd36:	fb02 f804 	mul.w	r8, r2, r4
 801dd3a:	0112      	lsls	r2, r2, #4
 801dd3c:	b2bf      	uxth	r7, r7
 801dd3e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801dd42:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801dd46:	eba2 0208 	sub.w	r2, r2, r8
 801dd4a:	b2a4      	uxth	r4, r4
 801dd4c:	b292      	uxth	r2, r2
 801dd4e:	ebae 0e04 	sub.w	lr, lr, r4
 801dd52:	fb02 fb0b 	mul.w	fp, r2, fp
 801dd56:	fa1f fe8e 	uxth.w	lr, lr
 801dd5a:	fb0e ba0a 	mla	sl, lr, sl, fp
 801dd5e:	fb04 aa09 	mla	sl, r4, r9, sl
 801dd62:	fb08 aa01 	mla	sl, r8, r1, sl
 801dd66:	9903      	ldr	r1, [sp, #12]
 801dd68:	fb11 f90c 	smulbb	r9, r1, ip
 801dd6c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801dd70:	9900      	ldr	r1, [sp, #0]
 801dd72:	fb0a 9a07 	mla	sl, sl, r7, r9
 801dd76:	fa1f fa8a 	uxth.w	sl, sl
 801dd7a:	f10a 0901 	add.w	r9, sl, #1
 801dd7e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801dd82:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dd86:	f881 a000 	strb.w	sl, [r1]
 801dd8a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801dd8e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801dd92:	fb02 fa0a 	mul.w	sl, r2, sl
 801dd96:	9902      	ldr	r1, [sp, #8]
 801dd98:	fb0e aa09 	mla	sl, lr, r9, sl
 801dd9c:	f895 9001 	ldrb.w	r9, [r5, #1]
 801dda0:	fb04 aa09 	mla	sl, r4, r9, sl
 801dda4:	f893 9001 	ldrb.w	r9, [r3, #1]
 801dda8:	fb08 a909 	mla	r9, r8, r9, sl
 801ddac:	fb11 fa0c 	smulbb	sl, r1, ip
 801ddb0:	9900      	ldr	r1, [sp, #0]
 801ddb2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ddb6:	fb09 a907 	mla	r9, r9, r7, sl
 801ddba:	fa1f f989 	uxth.w	r9, r9
 801ddbe:	f109 0a01 	add.w	sl, r9, #1
 801ddc2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ddc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ddca:	f881 9001 	strb.w	r9, [r1, #1]
 801ddce:	7880      	ldrb	r0, [r0, #2]
 801ddd0:	78b6      	ldrb	r6, [r6, #2]
 801ddd2:	4342      	muls	r2, r0
 801ddd4:	78a8      	ldrb	r0, [r5, #2]
 801ddd6:	789b      	ldrb	r3, [r3, #2]
 801ddd8:	fb0e 2206 	mla	r2, lr, r6, r2
 801dddc:	fb04 2400 	mla	r4, r4, r0, r2
 801dde0:	fb08 4803 	mla	r8, r8, r3, r4
 801dde4:	9b01      	ldr	r3, [sp, #4]
 801dde6:	fb13 fc0c 	smulbb	ip, r3, ip
 801ddea:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ddee:	fb08 c707 	mla	r7, r8, r7, ip
 801ddf2:	b2bf      	uxth	r7, r7
 801ddf4:	f107 0c01 	add.w	ip, r7, #1
 801ddf8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ddfc:	123f      	asrs	r7, r7, #8
 801ddfe:	708f      	strb	r7, [r1, #2]
 801de00:	b007      	add	sp, #28
 801de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de06:	bf00      	nop
 801de08:	08028c47 	.word	0x08028c47
 801de0c:	0802913e 	.word	0x0802913e
 801de10:	08028d10 	.word	0x08028d10

0801de14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de18:	ed2d 8b08 	vpush	{d8-d11}
 801de1c:	b095      	sub	sp, #84	; 0x54
 801de1e:	eeb0 aa40 	vmov.f32	s20, s0
 801de22:	eef0 9a60 	vmov.f32	s19, s1
 801de26:	930a      	str	r3, [sp, #40]	; 0x28
 801de28:	eeb0 9a41 	vmov.f32	s18, s2
 801de2c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801de30:	eeb0 8a62 	vmov.f32	s16, s5
 801de34:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801de36:	eef0 8a43 	vmov.f32	s17, s6
 801de3a:	930c      	str	r3, [sp, #48]	; 0x30
 801de3c:	eef0 ba44 	vmov.f32	s23, s8
 801de40:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801de44:	eeb0 ba64 	vmov.f32	s22, s9
 801de48:	9013      	str	r0, [sp, #76]	; 0x4c
 801de4a:	eef0 aa45 	vmov.f32	s21, s10
 801de4e:	9310      	str	r3, [sp, #64]	; 0x40
 801de50:	6860      	ldr	r0, [r4, #4]
 801de52:	910f      	str	r1, [sp, #60]	; 0x3c
 801de54:	9212      	str	r2, [sp, #72]	; 0x48
 801de56:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801de58:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801de5c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801de60:	fb00 1303 	mla	r3, r0, r3, r1
 801de64:	6821      	ldr	r1, [r4, #0]
 801de66:	6854      	ldr	r4, [r2, #4]
 801de68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de6c:	18cb      	adds	r3, r1, r3
 801de6e:	930b      	str	r3, [sp, #44]	; 0x2c
 801de70:	6813      	ldr	r3, [r2, #0]
 801de72:	930e      	str	r3, [sp, #56]	; 0x38
 801de74:	1d23      	adds	r3, r4, #4
 801de76:	9309      	str	r3, [sp, #36]	; 0x24
 801de78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de7a:	43db      	mvns	r3, r3
 801de7c:	b2db      	uxtb	r3, r3
 801de7e:	930d      	str	r3, [sp, #52]	; 0x34
 801de80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801de82:	2b00      	cmp	r3, #0
 801de84:	dc03      	bgt.n	801de8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801de86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de88:	2b00      	cmp	r3, #0
 801de8a:	f340 823c 	ble.w	801e306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801de8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de90:	2b00      	cmp	r3, #0
 801de92:	f340 8115 	ble.w	801e0c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801de96:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801de98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801de9a:	1412      	asrs	r2, r2, #16
 801de9c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dea0:	d431      	bmi.n	801df06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801dea2:	1c51      	adds	r1, r2, #1
 801dea4:	428d      	cmp	r5, r1
 801dea6:	dd31      	ble.n	801df0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	db2f      	blt.n	801df0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801deac:	1c59      	adds	r1, r3, #1
 801deae:	980c      	ldr	r0, [sp, #48]	; 0x30
 801deb0:	4288      	cmp	r0, r1
 801deb2:	dd2b      	ble.n	801df0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801deb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801deb6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801deb8:	3b01      	subs	r3, #1
 801deba:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801debc:	fb02 1203 	mla	r2, r2, r3, r1
 801dec0:	1412      	asrs	r2, r2, #16
 801dec2:	d42d      	bmi.n	801df20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801dec4:	3201      	adds	r2, #1
 801dec6:	4295      	cmp	r5, r2
 801dec8:	dd2a      	ble.n	801df20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801deca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801decc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801dece:	fb02 1303 	mla	r3, r2, r3, r1
 801ded2:	141b      	asrs	r3, r3, #16
 801ded4:	d424      	bmi.n	801df20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801ded6:	3301      	adds	r3, #1
 801ded8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801deda:	429a      	cmp	r2, r3
 801dedc:	dd20      	ble.n	801df20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801dede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dee0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801dee4:	f103 0c03 	add.w	ip, r3, #3
 801dee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801deea:	9311      	str	r3, [sp, #68]	; 0x44
 801deec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801deee:	2b00      	cmp	r3, #0
 801def0:	f300 814f 	bgt.w	801e192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801def4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801def6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801def8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801defc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df00:	441a      	add	r2, r3
 801df02:	920b      	str	r2, [sp, #44]	; 0x2c
 801df04:	e0de      	b.n	801e0c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801df06:	1c51      	adds	r1, r2, #1
 801df08:	f040 80cb 	bne.w	801e0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801df0c:	42aa      	cmp	r2, r5
 801df0e:	f280 80c8 	bge.w	801e0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801df12:	1c5f      	adds	r7, r3, #1
 801df14:	f2c0 80c5 	blt.w	801e0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801df18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801df1a:	4293      	cmp	r3, r2
 801df1c:	f280 80c1 	bge.w	801e0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801df20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df22:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801df24:	9311      	str	r3, [sp, #68]	; 0x44
 801df26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df28:	2b00      	cmp	r3, #0
 801df2a:	dde3      	ble.n	801def4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801df2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df2e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801df30:	141a      	asrs	r2, r3, #16
 801df32:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801df34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801df36:	1400      	asrs	r0, r0, #16
 801df38:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801df3c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801df40:	f100 810e 	bmi.w	801e160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801df44:	1c46      	adds	r6, r0, #1
 801df46:	42b5      	cmp	r5, r6
 801df48:	f340 810c 	ble.w	801e164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801df4c:	2a00      	cmp	r2, #0
 801df4e:	f2c0 8109 	blt.w	801e164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801df52:	1c56      	adds	r6, r2, #1
 801df54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801df56:	42b4      	cmp	r4, r6
 801df58:	f340 8104 	ble.w	801e164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801df5c:	fb02 0005 	mla	r0, r2, r5, r0
 801df60:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801df62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801df64:	f814 e000 	ldrb.w	lr, [r4, r0]
 801df68:	4402      	add	r2, r0
 801df6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df6c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801df70:	eb00 080e 	add.w	r8, r0, lr
 801df74:	2b00      	cmp	r3, #0
 801df76:	f000 80e4 	beq.w	801e142 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801df7a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801df7e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801df82:	4484      	add	ip, r0
 801df84:	2900      	cmp	r1, #0
 801df86:	f000 80e5 	beq.w	801e154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801df8a:	1950      	adds	r0, r2, r5
 801df8c:	5d52      	ldrb	r2, [r2, r5]
 801df8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801df90:	7840      	ldrb	r0, [r0, #1]
 801df92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801df96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801df9a:	4422      	add	r2, r4
 801df9c:	4420      	add	r0, r4
 801df9e:	b29b      	uxth	r3, r3
 801dfa0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801dfa2:	b289      	uxth	r1, r1
 801dfa4:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801dfa8:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801dfac:	fb03 fa01 	mul.w	sl, r3, r1
 801dfb0:	011b      	lsls	r3, r3, #4
 801dfb2:	f89c e000 	ldrb.w	lr, [ip]
 801dfb6:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801dfba:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801dfbe:	eba3 030a 	sub.w	r3, r3, sl
 801dfc2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dfc4:	b289      	uxth	r1, r1
 801dfc6:	b29b      	uxth	r3, r3
 801dfc8:	eba9 0901 	sub.w	r9, r9, r1
 801dfcc:	fb03 fe0e 	mul.w	lr, r3, lr
 801dfd0:	fa1f f989 	uxth.w	r9, r9
 801dfd4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801dfd8:	f892 b000 	ldrb.w	fp, [r2]
 801dfdc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801dfe0:	f890 b000 	ldrb.w	fp, [r0]
 801dfe4:	fb0a ee0b 	mla	lr, sl, fp, lr
 801dfe8:	f897 b000 	ldrb.w	fp, [r7]
 801dfec:	fb1b fb04 	smulbb	fp, fp, r4
 801dff0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801dff4:	fb0e be06 	mla	lr, lr, r6, fp
 801dff8:	fa1f fe8e 	uxth.w	lr, lr
 801dffc:	f10e 0b01 	add.w	fp, lr, #1
 801e000:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801e004:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801e008:	f887 b000 	strb.w	fp, [r7]
 801e00c:	f89c e001 	ldrb.w	lr, [ip, #1]
 801e010:	f898 b001 	ldrb.w	fp, [r8, #1]
 801e014:	fb03 fe0e 	mul.w	lr, r3, lr
 801e018:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e01c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e020:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e024:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e028:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e02c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e030:	fb1b fb04 	smulbb	fp, fp, r4
 801e034:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e038:	fb0e be06 	mla	lr, lr, r6, fp
 801e03c:	fa1f fe8e 	uxth.w	lr, lr
 801e040:	f10e 0b01 	add.w	fp, lr, #1
 801e044:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e048:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e04c:	f887 e001 	strb.w	lr, [r7, #1]
 801e050:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e054:	f898 e002 	ldrb.w	lr, [r8, #2]
 801e058:	fb03 f30c 	mul.w	r3, r3, ip
 801e05c:	fb09 330e 	mla	r3, r9, lr, r3
 801e060:	f892 e002 	ldrb.w	lr, [r2, #2]
 801e064:	7882      	ldrb	r2, [r0, #2]
 801e066:	fb01 310e 	mla	r1, r1, lr, r3
 801e06a:	fb0a 1a02 	mla	sl, sl, r2, r1
 801e06e:	78b9      	ldrb	r1, [r7, #2]
 801e070:	fb11 f104 	smulbb	r1, r1, r4
 801e074:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e078:	fb0a 1606 	mla	r6, sl, r6, r1
 801e07c:	b2b6      	uxth	r6, r6
 801e07e:	1c73      	adds	r3, r6, #1
 801e080:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e084:	1236      	asrs	r6, r6, #8
 801e086:	70be      	strb	r6, [r7, #2]
 801e088:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e08a:	3703      	adds	r7, #3
 801e08c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e08e:	4413      	add	r3, r2
 801e090:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e092:	9327      	str	r3, [sp, #156]	; 0x9c
 801e094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e096:	4413      	add	r3, r2
 801e098:	9328      	str	r3, [sp, #160]	; 0xa0
 801e09a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e09c:	3b01      	subs	r3, #1
 801e09e:	9311      	str	r3, [sp, #68]	; 0x44
 801e0a0:	e741      	b.n	801df26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801e0a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e0a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e0a6:	4413      	add	r3, r2
 801e0a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e0aa:	9327      	str	r3, [sp, #156]	; 0x9c
 801e0ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e0ae:	4413      	add	r3, r2
 801e0b0:	9328      	str	r3, [sp, #160]	; 0xa0
 801e0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0b4:	3b01      	subs	r3, #1
 801e0b6:	930a      	str	r3, [sp, #40]	; 0x28
 801e0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0ba:	3303      	adds	r3, #3
 801e0bc:	930b      	str	r3, [sp, #44]	; 0x2c
 801e0be:	e6e6      	b.n	801de8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e0c0:	f47f aef8 	bne.w	801deb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e0c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	f340 811d 	ble.w	801e306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e0cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e0d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e0d2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e0d6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e0da:	eef0 6a48 	vmov.f32	s13, s16
 801e0de:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e0e2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e0e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0ea:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801e0ee:	eef0 6a68 	vmov.f32	s13, s17
 801e0f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0f6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801e0fa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e0fe:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e102:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e106:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e10a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e10e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e112:	ee18 2a10 	vmov	r2, s16
 801e116:	eeb0 8a47 	vmov.f32	s16, s14
 801e11a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e11e:	ee18 2a90 	vmov	r2, s17
 801e122:	9329      	str	r3, [sp, #164]	; 0xa4
 801e124:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e126:	eef0 8a67 	vmov.f32	s17, s15
 801e12a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e12e:	932a      	str	r3, [sp, #168]	; 0xa8
 801e130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e132:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e134:	3b01      	subs	r3, #1
 801e136:	930f      	str	r3, [sp, #60]	; 0x3c
 801e138:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e13a:	bf08      	it	eq
 801e13c:	4613      	moveq	r3, r2
 801e13e:	930a      	str	r3, [sp, #40]	; 0x28
 801e140:	e69e      	b.n	801de80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e142:	b151      	cbz	r1, 801e15a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801e144:	5d52      	ldrb	r2, [r2, r5]
 801e146:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e148:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e14c:	4402      	add	r2, r0
 801e14e:	4640      	mov	r0, r8
 801e150:	46c4      	mov	ip, r8
 801e152:	e724      	b.n	801df9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e154:	4640      	mov	r0, r8
 801e156:	4642      	mov	r2, r8
 801e158:	e721      	b.n	801df9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e15a:	4640      	mov	r0, r8
 801e15c:	4642      	mov	r2, r8
 801e15e:	e7f7      	b.n	801e150 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801e160:	1c46      	adds	r6, r0, #1
 801e162:	d191      	bne.n	801e088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e164:	4285      	cmp	r5, r0
 801e166:	dd8f      	ble.n	801e088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e168:	1c54      	adds	r4, r2, #1
 801e16a:	db8d      	blt.n	801e088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e16c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e16e:	4294      	cmp	r4, r2
 801e170:	dd8a      	ble.n	801e088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e172:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e174:	9002      	str	r0, [sp, #8]
 801e176:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e178:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801e17c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e17e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e180:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e184:	e9cd 5300 	strd	r5, r3, [sp]
 801e188:	4639      	mov	r1, r7
 801e18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e18c:	f7ff fd52 	bl	801dc34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801e190:	e77a      	b.n	801e088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e192:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801e194:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e196:	1410      	asrs	r0, r2, #16
 801e198:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e19c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e19e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e1a0:	1412      	asrs	r2, r2, #16
 801e1a2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e1a6:	fb05 2000 	mla	r0, r5, r0, r2
 801e1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1ac:	f814 8000 	ldrb.w	r8, [r4, r0]
 801e1b0:	4402      	add	r2, r0
 801e1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e1b4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e1b8:	eb00 0708 	add.w	r7, r0, r8
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	f000 8093 	beq.w	801e2e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801e1c2:	7856      	ldrb	r6, [r2, #1]
 801e1c4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e1c8:	4406      	add	r6, r0
 801e1ca:	2900      	cmp	r1, #0
 801e1cc:	f000 8095 	beq.w	801e2fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801e1d0:	1950      	adds	r0, r2, r5
 801e1d2:	5d52      	ldrb	r2, [r2, r5]
 801e1d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e1d6:	7840      	ldrb	r0, [r0, #1]
 801e1d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e1dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e1e0:	4422      	add	r2, r4
 801e1e2:	4420      	add	r0, r4
 801e1e4:	b29b      	uxth	r3, r3
 801e1e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e1e8:	b289      	uxth	r1, r1
 801e1ea:	f10c 0c03 	add.w	ip, ip, #3
 801e1ee:	f814 b008 	ldrb.w	fp, [r4, r8]
 801e1f2:	fb03 f901 	mul.w	r9, r3, r1
 801e1f6:	011b      	lsls	r3, r3, #4
 801e1f8:	f896 8000 	ldrb.w	r8, [r6]
 801e1fc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e200:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e204:	eba3 0309 	sub.w	r3, r3, r9
 801e208:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e20a:	b289      	uxth	r1, r1
 801e20c:	b29b      	uxth	r3, r3
 801e20e:	ebae 0e01 	sub.w	lr, lr, r1
 801e212:	fb03 f808 	mul.w	r8, r3, r8
 801e216:	fa1f fe8e 	uxth.w	lr, lr
 801e21a:	fb0e 880b 	mla	r8, lr, fp, r8
 801e21e:	f892 b000 	ldrb.w	fp, [r2]
 801e222:	fb01 880b 	mla	r8, r1, fp, r8
 801e226:	f890 b000 	ldrb.w	fp, [r0]
 801e22a:	fb09 880b 	mla	r8, r9, fp, r8
 801e22e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801e232:	fb1b fb04 	smulbb	fp, fp, r4
 801e236:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e23a:	fb08 b80a 	mla	r8, r8, sl, fp
 801e23e:	fa1f f888 	uxth.w	r8, r8
 801e242:	f108 0b01 	add.w	fp, r8, #1
 801e246:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e24a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e24e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801e252:	f896 8001 	ldrb.w	r8, [r6, #1]
 801e256:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e25a:	fb03 f808 	mul.w	r8, r3, r8
 801e25e:	fb0e 880b 	mla	r8, lr, fp, r8
 801e262:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e266:	fb01 880b 	mla	r8, r1, fp, r8
 801e26a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e26e:	fb09 880b 	mla	r8, r9, fp, r8
 801e272:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801e276:	fb1b fb04 	smulbb	fp, fp, r4
 801e27a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e27e:	fb08 b80a 	mla	r8, r8, sl, fp
 801e282:	fa1f f888 	uxth.w	r8, r8
 801e286:	f108 0b01 	add.w	fp, r8, #1
 801e28a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e28e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e292:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801e296:	78b6      	ldrb	r6, [r6, #2]
 801e298:	78bf      	ldrb	r7, [r7, #2]
 801e29a:	4373      	muls	r3, r6
 801e29c:	7896      	ldrb	r6, [r2, #2]
 801e29e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e2a0:	fb0e 3307 	mla	r3, lr, r7, r3
 801e2a4:	fb01 3306 	mla	r3, r1, r6, r3
 801e2a8:	7886      	ldrb	r6, [r0, #2]
 801e2aa:	fb09 3906 	mla	r9, r9, r6, r3
 801e2ae:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801e2b2:	fb13 f304 	smulbb	r3, r3, r4
 801e2b6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e2ba:	fb09 390a 	mla	r9, r9, sl, r3
 801e2be:	fa1f f989 	uxth.w	r9, r9
 801e2c2:	f109 0301 	add.w	r3, r9, #1
 801e2c6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e2ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e2cc:	4413      	add	r3, r2
 801e2ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e2d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e2d4:	9327      	str	r3, [sp, #156]	; 0x9c
 801e2d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e2d8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801e2dc:	4413      	add	r3, r2
 801e2de:	9328      	str	r3, [sp, #160]	; 0xa0
 801e2e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e2e2:	3b01      	subs	r3, #1
 801e2e4:	9311      	str	r3, [sp, #68]	; 0x44
 801e2e6:	e601      	b.n	801deec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e2e8:	b151      	cbz	r1, 801e300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801e2ea:	5d52      	ldrb	r2, [r2, r5]
 801e2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e2ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e2f2:	4402      	add	r2, r0
 801e2f4:	4638      	mov	r0, r7
 801e2f6:	463e      	mov	r6, r7
 801e2f8:	e774      	b.n	801e1e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801e2fa:	4638      	mov	r0, r7
 801e2fc:	463a      	mov	r2, r7
 801e2fe:	e771      	b.n	801e1e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801e300:	4638      	mov	r0, r7
 801e302:	463a      	mov	r2, r7
 801e304:	e7f7      	b.n	801e2f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801e306:	b015      	add	sp, #84	; 0x54
 801e308:	ecbd 8b08 	vpop	{d8-d11}
 801e30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e310 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801e310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e314:	780d      	ldrb	r5, [r1, #0]
 801e316:	f891 9002 	ldrb.w	r9, [r1, #2]
 801e31a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801e31e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e322:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801e326:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801e32a:	f891 9001 	ldrb.w	r9, [r1, #1]
 801e32e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801e332:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801e336:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801e33a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801e33e:	9501      	str	r5, [sp, #4]
 801e340:	fb06 470c 	mla	r7, r6, ip, r4
 801e344:	2e00      	cmp	r6, #0
 801e346:	eb02 0e07 	add.w	lr, r2, r7
 801e34a:	db46      	blt.n	801e3da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801e34c:	45b0      	cmp	r8, r6
 801e34e:	dd44      	ble.n	801e3da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801e350:	2c00      	cmp	r4, #0
 801e352:	db40      	blt.n	801e3d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801e354:	45a4      	cmp	ip, r4
 801e356:	dd3e      	ble.n	801e3d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801e358:	5dd7      	ldrb	r7, [r2, r7]
 801e35a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e35e:	441f      	add	r7, r3
 801e360:	1c62      	adds	r2, r4, #1
 801e362:	d43d      	bmi.n	801e3e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e364:	4594      	cmp	ip, r2
 801e366:	dd3b      	ble.n	801e3e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e368:	f1ba 0f00 	cmp.w	sl, #0
 801e36c:	d038      	beq.n	801e3e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e36e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801e372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e376:	441d      	add	r5, r3
 801e378:	3601      	adds	r6, #1
 801e37a:	d435      	bmi.n	801e3e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e37c:	45b0      	cmp	r8, r6
 801e37e:	dd33      	ble.n	801e3e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e380:	b390      	cbz	r0, 801e3e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e382:	2c00      	cmp	r4, #0
 801e384:	db2e      	blt.n	801e3e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801e386:	45a4      	cmp	ip, r4
 801e388:	dd2c      	ble.n	801e3e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801e38a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801e38e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e392:	441e      	add	r6, r3
 801e394:	1c62      	adds	r2, r4, #1
 801e396:	d42a      	bmi.n	801e3ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e398:	4594      	cmp	ip, r2
 801e39a:	dd28      	ble.n	801e3ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e39c:	f1ba 0f00 	cmp.w	sl, #0
 801e3a0:	d025      	beq.n	801e3ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e3a2:	44f4      	add	ip, lr
 801e3a4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e3a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e3ac:	4413      	add	r3, r2
 801e3ae:	f1ba 0f0f 	cmp.w	sl, #15
 801e3b2:	f897 8000 	ldrb.w	r8, [r7]
 801e3b6:	f895 9000 	ldrb.w	r9, [r5]
 801e3ba:	f896 e000 	ldrb.w	lr, [r6]
 801e3be:	f893 c000 	ldrb.w	ip, [r3]
 801e3c2:	d801      	bhi.n	801e3c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801e3c4:	280f      	cmp	r0, #15
 801e3c6:	d914      	bls.n	801e3f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801e3c8:	4b29      	ldr	r3, [pc, #164]	; (801e470 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801e3ca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e3ce:	4a29      	ldr	r2, [pc, #164]	; (801e474 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801e3d0:	4829      	ldr	r0, [pc, #164]	; (801e478 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801e3d2:	f005 ff39 	bl	8024248 <__assert_func>
 801e3d6:	af01      	add	r7, sp, #4
 801e3d8:	e7c2      	b.n	801e360 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801e3da:	ad01      	add	r5, sp, #4
 801e3dc:	462f      	mov	r7, r5
 801e3de:	e7cb      	b.n	801e378 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e3e0:	ad01      	add	r5, sp, #4
 801e3e2:	e7c9      	b.n	801e378 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e3e4:	ae01      	add	r6, sp, #4
 801e3e6:	e7d5      	b.n	801e394 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801e3e8:	ab01      	add	r3, sp, #4
 801e3ea:	461e      	mov	r6, r3
 801e3ec:	e7df      	b.n	801e3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e3ee:	ab01      	add	r3, sp, #4
 801e3f0:	e7dd      	b.n	801e3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e3f2:	fa1f f48a 	uxth.w	r4, sl
 801e3f6:	b280      	uxth	r0, r0
 801e3f8:	fb04 fa00 	mul.w	sl, r4, r0
 801e3fc:	0124      	lsls	r4, r4, #4
 801e3fe:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e402:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801e406:	b282      	uxth	r2, r0
 801e408:	eba4 000a 	sub.w	r0, r4, sl
 801e40c:	ebab 0b02 	sub.w	fp, fp, r2
 801e410:	b280      	uxth	r0, r0
 801e412:	fa1f fb8b 	uxth.w	fp, fp
 801e416:	fb00 f909 	mul.w	r9, r0, r9
 801e41a:	fb0b 9808 	mla	r8, fp, r8, r9
 801e41e:	fb02 8e0e 	mla	lr, r2, lr, r8
 801e422:	fb0a ec0c 	mla	ip, sl, ip, lr
 801e426:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e42a:	f881 c000 	strb.w	ip, [r1]
 801e42e:	786c      	ldrb	r4, [r5, #1]
 801e430:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e434:	4344      	muls	r4, r0
 801e436:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801e43a:	7874      	ldrb	r4, [r6, #1]
 801e43c:	fb02 cc04 	mla	ip, r2, r4, ip
 801e440:	785c      	ldrb	r4, [r3, #1]
 801e442:	fb0a c404 	mla	r4, sl, r4, ip
 801e446:	1224      	asrs	r4, r4, #8
 801e448:	704c      	strb	r4, [r1, #1]
 801e44a:	78ad      	ldrb	r5, [r5, #2]
 801e44c:	78bc      	ldrb	r4, [r7, #2]
 801e44e:	4368      	muls	r0, r5
 801e450:	fb0b 0b04 	mla	fp, fp, r4, r0
 801e454:	78b0      	ldrb	r0, [r6, #2]
 801e456:	fb02 b000 	mla	r0, r2, r0, fp
 801e45a:	789a      	ldrb	r2, [r3, #2]
 801e45c:	fb0a 0a02 	mla	sl, sl, r2, r0
 801e460:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e464:	f881 a002 	strb.w	sl, [r1, #2]
 801e468:	b003      	add	sp, #12
 801e46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e46e:	bf00      	nop
 801e470:	08028c47 	.word	0x08028c47
 801e474:	0802913e 	.word	0x0802913e
 801e478:	08028d10 	.word	0x08028d10

0801e47c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e480:	ed2d 8b0a 	vpush	{d8-d12}
 801e484:	b08f      	sub	sp, #60	; 0x3c
 801e486:	eeb0 aa40 	vmov.f32	s20, s0
 801e48a:	eef0 9a60 	vmov.f32	s19, s1
 801e48e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801e490:	eeb0 9a41 	vmov.f32	s18, s2
 801e494:	9307      	str	r3, [sp, #28]
 801e496:	eeb0 8a62 	vmov.f32	s16, s5
 801e49a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801e49e:	eef0 8a43 	vmov.f32	s17, s6
 801e4a2:	900d      	str	r0, [sp, #52]	; 0x34
 801e4a4:	eeb0 ca44 	vmov.f32	s24, s8
 801e4a8:	6860      	ldr	r0, [r4, #4]
 801e4aa:	eef0 ba64 	vmov.f32	s23, s9
 801e4ae:	9309      	str	r3, [sp, #36]	; 0x24
 801e4b0:	eeb0 ba45 	vmov.f32	s22, s10
 801e4b4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e4b8:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801e4bc:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801e4c0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e4c4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e4c6:	fb00 1303 	mla	r3, r0, r3, r1
 801e4ca:	6821      	ldr	r1, [r4, #0]
 801e4cc:	6854      	ldr	r4, [r2, #4]
 801e4ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4d2:	3404      	adds	r4, #4
 801e4d4:	18cb      	adds	r3, r1, r3
 801e4d6:	9308      	str	r3, [sp, #32]
 801e4d8:	6813      	ldr	r3, [r2, #0]
 801e4da:	930a      	str	r3, [sp, #40]	; 0x28
 801e4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	dc03      	bgt.n	801e4ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e4e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	f340 81d2 	ble.w	801e88e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801e4ea:	9b07      	ldr	r3, [sp, #28]
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	f340 80e3 	ble.w	801e6b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801e4f2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e4f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4f6:	1412      	asrs	r2, r2, #16
 801e4f8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e4fc:	d42f      	bmi.n	801e55e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801e4fe:	1c51      	adds	r1, r2, #1
 801e500:	428d      	cmp	r5, r1
 801e502:	dd2f      	ble.n	801e564 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e504:	2b00      	cmp	r3, #0
 801e506:	db2d      	blt.n	801e564 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e508:	1c59      	adds	r1, r3, #1
 801e50a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e50c:	4288      	cmp	r0, r1
 801e50e:	dd29      	ble.n	801e564 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e510:	9b07      	ldr	r3, [sp, #28]
 801e512:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e514:	3b01      	subs	r3, #1
 801e516:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e518:	fb02 1203 	mla	r2, r2, r3, r1
 801e51c:	1412      	asrs	r2, r2, #16
 801e51e:	d42b      	bmi.n	801e578 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e520:	3201      	adds	r2, #1
 801e522:	4295      	cmp	r5, r2
 801e524:	dd28      	ble.n	801e578 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e526:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e528:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e52a:	fb02 1303 	mla	r3, r2, r3, r1
 801e52e:	141b      	asrs	r3, r3, #16
 801e530:	d422      	bmi.n	801e578 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e532:	3301      	adds	r3, #1
 801e534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e536:	429a      	cmp	r2, r3
 801e538:	dd1e      	ble.n	801e578 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e53a:	9b08      	ldr	r3, [sp, #32]
 801e53c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e540:	f103 0803 	add.w	r8, r3, #3
 801e544:	f1ba 0f00 	cmp.w	sl, #0
 801e548:	f300 8119 	bgt.w	801e77e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801e54c:	9b07      	ldr	r3, [sp, #28]
 801e54e:	9a08      	ldr	r2, [sp, #32]
 801e550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e558:	441a      	add	r2, r3
 801e55a:	9208      	str	r2, [sp, #32]
 801e55c:	e0ae      	b.n	801e6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801e55e:	1c51      	adds	r1, r2, #1
 801e560:	f040 809b 	bne.w	801e69a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e564:	42aa      	cmp	r2, r5
 801e566:	f280 8098 	bge.w	801e69a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e56a:	1c5a      	adds	r2, r3, #1
 801e56c:	f2c0 8095 	blt.w	801e69a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e572:	4293      	cmp	r3, r2
 801e574:	f280 8091 	bge.w	801e69a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e578:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801e57c:	f1bb 0f00 	cmp.w	fp, #0
 801e580:	dde4      	ble.n	801e54c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e582:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e584:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e586:	141a      	asrs	r2, r3, #16
 801e588:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e58a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e58c:	1400      	asrs	r0, r0, #16
 801e58e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e592:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e596:	f100 80dc 	bmi.w	801e752 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801e59a:	1c47      	adds	r7, r0, #1
 801e59c:	42bd      	cmp	r5, r7
 801e59e:	f340 80da 	ble.w	801e756 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e5a2:	2a00      	cmp	r2, #0
 801e5a4:	f2c0 80d7 	blt.w	801e756 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e5a8:	f102 0c01 	add.w	ip, r2, #1
 801e5ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e5ae:	4567      	cmp	r7, ip
 801e5b0:	f340 80d1 	ble.w	801e756 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e5b4:	fb02 0005 	mla	r0, r2, r5, r0
 801e5b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e5ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e5bc:	f817 8000 	ldrb.w	r8, [r7, r0]
 801e5c0:	4402      	add	r2, r0
 801e5c2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e5c6:	eb04 0c08 	add.w	ip, r4, r8
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	f000 80b3 	beq.w	801e736 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801e5d0:	7857      	ldrb	r7, [r2, #1]
 801e5d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e5d6:	4427      	add	r7, r4
 801e5d8:	2900      	cmp	r1, #0
 801e5da:	f000 80b4 	beq.w	801e746 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801e5de:	1950      	adds	r0, r2, r5
 801e5e0:	5d52      	ldrb	r2, [r2, r5]
 801e5e2:	7840      	ldrb	r0, [r0, #1]
 801e5e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e5e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e5ec:	4422      	add	r2, r4
 801e5ee:	4420      	add	r0, r4
 801e5f0:	b29b      	uxth	r3, r3
 801e5f2:	f814 a008 	ldrb.w	sl, [r4, r8]
 801e5f6:	b289      	uxth	r1, r1
 801e5f8:	f897 8000 	ldrb.w	r8, [r7]
 801e5fc:	fb03 f901 	mul.w	r9, r3, r1
 801e600:	011b      	lsls	r3, r3, #4
 801e602:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e606:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e60a:	eba3 0309 	sub.w	r3, r3, r9
 801e60e:	b289      	uxth	r1, r1
 801e610:	b29b      	uxth	r3, r3
 801e612:	ebae 0e01 	sub.w	lr, lr, r1
 801e616:	fb03 f808 	mul.w	r8, r3, r8
 801e61a:	fa1f fe8e 	uxth.w	lr, lr
 801e61e:	fb0e 880a 	mla	r8, lr, sl, r8
 801e622:	f892 a000 	ldrb.w	sl, [r2]
 801e626:	fb01 880a 	mla	r8, r1, sl, r8
 801e62a:	f890 a000 	ldrb.w	sl, [r0]
 801e62e:	fb09 880a 	mla	r8, r9, sl, r8
 801e632:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e636:	f886 8000 	strb.w	r8, [r6]
 801e63a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e63e:	f89c a001 	ldrb.w	sl, [ip, #1]
 801e642:	fb03 f808 	mul.w	r8, r3, r8
 801e646:	fb0e 880a 	mla	r8, lr, sl, r8
 801e64a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e64e:	fb01 880a 	mla	r8, r1, sl, r8
 801e652:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e656:	fb09 880a 	mla	r8, r9, sl, r8
 801e65a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e65e:	f886 8001 	strb.w	r8, [r6, #1]
 801e662:	78bf      	ldrb	r7, [r7, #2]
 801e664:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e668:	437b      	muls	r3, r7
 801e66a:	7892      	ldrb	r2, [r2, #2]
 801e66c:	fb0e 330c 	mla	r3, lr, ip, r3
 801e670:	fb01 3102 	mla	r1, r1, r2, r3
 801e674:	7882      	ldrb	r2, [r0, #2]
 801e676:	fb09 1902 	mla	r9, r9, r2, r1
 801e67a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e67e:	f886 9002 	strb.w	r9, [r6, #2]
 801e682:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e684:	3603      	adds	r6, #3
 801e686:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e688:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e68c:	4413      	add	r3, r2
 801e68e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e690:	9323      	str	r3, [sp, #140]	; 0x8c
 801e692:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e694:	4413      	add	r3, r2
 801e696:	9324      	str	r3, [sp, #144]	; 0x90
 801e698:	e770      	b.n	801e57c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801e69a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e69c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e69e:	4413      	add	r3, r2
 801e6a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e6a2:	9323      	str	r3, [sp, #140]	; 0x8c
 801e6a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e6a6:	4413      	add	r3, r2
 801e6a8:	9324      	str	r3, [sp, #144]	; 0x90
 801e6aa:	9b07      	ldr	r3, [sp, #28]
 801e6ac:	3b01      	subs	r3, #1
 801e6ae:	9307      	str	r3, [sp, #28]
 801e6b0:	9b08      	ldr	r3, [sp, #32]
 801e6b2:	3303      	adds	r3, #3
 801e6b4:	9308      	str	r3, [sp, #32]
 801e6b6:	e718      	b.n	801e4ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e6b8:	f47f af2a 	bne.w	801e510 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801e6bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	f340 80e5 	ble.w	801e88e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801e6c4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801e6c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e6ca:	ee79 9aab 	vadd.f32	s19, s19, s23
 801e6ce:	eef0 6a48 	vmov.f32	s13, s16
 801e6d2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801e6d6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801e6da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6de:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801e6e2:	eef0 6a68 	vmov.f32	s13, s17
 801e6e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6ea:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801e6ee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e6f2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e6f6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e6fa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e6fe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e702:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e706:	ee18 2a10 	vmov	r2, s16
 801e70a:	eeb0 8a47 	vmov.f32	s16, s14
 801e70e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e712:	ee18 2a90 	vmov	r2, s17
 801e716:	9325      	str	r3, [sp, #148]	; 0x94
 801e718:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e71a:	eef0 8a67 	vmov.f32	s17, s15
 801e71e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e722:	9326      	str	r3, [sp, #152]	; 0x98
 801e724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e728:	3b01      	subs	r3, #1
 801e72a:	930b      	str	r3, [sp, #44]	; 0x2c
 801e72c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e72e:	bf08      	it	eq
 801e730:	4613      	moveq	r3, r2
 801e732:	9307      	str	r3, [sp, #28]
 801e734:	e6d2      	b.n	801e4dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e736:	b149      	cbz	r1, 801e74c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801e738:	5d52      	ldrb	r2, [r2, r5]
 801e73a:	4660      	mov	r0, ip
 801e73c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e740:	4422      	add	r2, r4
 801e742:	4667      	mov	r7, ip
 801e744:	e754      	b.n	801e5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801e746:	4660      	mov	r0, ip
 801e748:	4662      	mov	r2, ip
 801e74a:	e751      	b.n	801e5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801e74c:	4660      	mov	r0, ip
 801e74e:	4662      	mov	r2, ip
 801e750:	e7f7      	b.n	801e742 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801e752:	1c47      	adds	r7, r0, #1
 801e754:	d195      	bne.n	801e682 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e756:	4285      	cmp	r5, r0
 801e758:	dd93      	ble.n	801e682 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e75a:	1c57      	adds	r7, r2, #1
 801e75c:	db91      	blt.n	801e682 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e75e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e760:	4297      	cmp	r7, r2
 801e762:	dd8e      	ble.n	801e682 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e764:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801e768:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801e76c:	e9cd 5700 	strd	r5, r7, [sp]
 801e770:	4623      	mov	r3, r4
 801e772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e774:	4631      	mov	r1, r6
 801e776:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e778:	f7ff fdca 	bl	801e310 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801e77c:	e781      	b.n	801e682 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e77e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e780:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e782:	1410      	asrs	r0, r2, #16
 801e784:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e788:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e78a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e78c:	1412      	asrs	r2, r2, #16
 801e78e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e792:	fb05 2000 	mla	r0, r5, r0, r2
 801e796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e798:	f816 e000 	ldrb.w	lr, [r6, r0]
 801e79c:	4402      	add	r2, r0
 801e79e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e7a2:	eb04 070e 	add.w	r7, r4, lr
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d063      	beq.n	801e872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801e7aa:	7856      	ldrb	r6, [r2, #1]
 801e7ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e7b0:	4426      	add	r6, r4
 801e7b2:	2900      	cmp	r1, #0
 801e7b4:	d065      	beq.n	801e882 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801e7b6:	1950      	adds	r0, r2, r5
 801e7b8:	5d52      	ldrb	r2, [r2, r5]
 801e7ba:	7840      	ldrb	r0, [r0, #1]
 801e7bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e7c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e7c4:	4422      	add	r2, r4
 801e7c6:	4420      	add	r0, r4
 801e7c8:	b29b      	uxth	r3, r3
 801e7ca:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e7ce:	b289      	uxth	r1, r1
 801e7d0:	f896 e000 	ldrb.w	lr, [r6]
 801e7d4:	f108 0803 	add.w	r8, r8, #3
 801e7d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e7dc:	fb03 f901 	mul.w	r9, r3, r1
 801e7e0:	011b      	lsls	r3, r3, #4
 801e7e2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e7e6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e7ea:	eba3 0309 	sub.w	r3, r3, r9
 801e7ee:	b289      	uxth	r1, r1
 801e7f0:	b29b      	uxth	r3, r3
 801e7f2:	ebac 0c01 	sub.w	ip, ip, r1
 801e7f6:	fb03 fe0e 	mul.w	lr, r3, lr
 801e7fa:	fa1f fc8c 	uxth.w	ip, ip
 801e7fe:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e802:	f892 b000 	ldrb.w	fp, [r2]
 801e806:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e80a:	f890 b000 	ldrb.w	fp, [r0]
 801e80e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e812:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e816:	f808 ec06 	strb.w	lr, [r8, #-6]
 801e81a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801e81e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e822:	fb03 fe0e 	mul.w	lr, r3, lr
 801e826:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e82a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e82e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e832:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e836:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e83a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e83e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801e842:	78b6      	ldrb	r6, [r6, #2]
 801e844:	78bf      	ldrb	r7, [r7, #2]
 801e846:	4373      	muls	r3, r6
 801e848:	7896      	ldrb	r6, [r2, #2]
 801e84a:	7882      	ldrb	r2, [r0, #2]
 801e84c:	fb0c 3307 	mla	r3, ip, r7, r3
 801e850:	fb01 3306 	mla	r3, r1, r6, r3
 801e854:	fb09 3902 	mla	r9, r9, r2, r3
 801e858:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e85a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e85c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e860:	4413      	add	r3, r2
 801e862:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e864:	f808 9c04 	strb.w	r9, [r8, #-4]
 801e868:	9323      	str	r3, [sp, #140]	; 0x8c
 801e86a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e86c:	4413      	add	r3, r2
 801e86e:	9324      	str	r3, [sp, #144]	; 0x90
 801e870:	e668      	b.n	801e544 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e872:	b149      	cbz	r1, 801e888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801e874:	5d52      	ldrb	r2, [r2, r5]
 801e876:	4638      	mov	r0, r7
 801e878:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e87c:	4422      	add	r2, r4
 801e87e:	463e      	mov	r6, r7
 801e880:	e7a2      	b.n	801e7c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e882:	4638      	mov	r0, r7
 801e884:	463a      	mov	r2, r7
 801e886:	e79f      	b.n	801e7c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e888:	4638      	mov	r0, r7
 801e88a:	463a      	mov	r2, r7
 801e88c:	e7f7      	b.n	801e87e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801e88e:	b00f      	add	sp, #60	; 0x3c
 801e890:	ecbd 8b0a 	vpop	{d8-d12}
 801e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e89c:	b087      	sub	sp, #28
 801e89e:	7888      	ldrb	r0, [r1, #2]
 801e8a0:	9002      	str	r0, [sp, #8]
 801e8a2:	7848      	ldrb	r0, [r1, #1]
 801e8a4:	9e02      	ldr	r6, [sp, #8]
 801e8a6:	9003      	str	r0, [sp, #12]
 801e8a8:	7808      	ldrb	r0, [r1, #0]
 801e8aa:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e8ae:	9004      	str	r0, [sp, #16]
 801e8b0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e8b4:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801e8b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801e8bc:	9e03      	ldr	r6, [sp, #12]
 801e8be:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801e8c2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801e8c6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801e8ca:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801e8ce:	fb04 7508 	mla	r5, r4, r8, r7
 801e8d2:	2c00      	cmp	r4, #0
 801e8d4:	eb02 0905 	add.w	r9, r2, r5
 801e8d8:	db45      	blt.n	801e966 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801e8da:	45a2      	cmp	sl, r4
 801e8dc:	dd43      	ble.n	801e966 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801e8de:	2f00      	cmp	r7, #0
 801e8e0:	db3f      	blt.n	801e962 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801e8e2:	45b8      	cmp	r8, r7
 801e8e4:	dd3d      	ble.n	801e962 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801e8e6:	5d52      	ldrb	r2, [r2, r5]
 801e8e8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e8ec:	1c7a      	adds	r2, r7, #1
 801e8ee:	d43d      	bmi.n	801e96c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801e8f0:	4590      	cmp	r8, r2
 801e8f2:	dd3b      	ble.n	801e96c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801e8f4:	f1bc 0f00 	cmp.w	ip, #0
 801e8f8:	d038      	beq.n	801e96c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801e8fa:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e8fe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e902:	3401      	adds	r4, #1
 801e904:	d436      	bmi.n	801e974 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801e906:	45a2      	cmp	sl, r4
 801e908:	dd34      	ble.n	801e974 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801e90a:	f1be 0f00 	cmp.w	lr, #0
 801e90e:	d031      	beq.n	801e974 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801e910:	2f00      	cmp	r7, #0
 801e912:	db2d      	blt.n	801e970 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801e914:	45b8      	cmp	r8, r7
 801e916:	dd2b      	ble.n	801e970 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801e918:	f819 2008 	ldrb.w	r2, [r9, r8]
 801e91c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801e920:	3701      	adds	r7, #1
 801e922:	d409      	bmi.n	801e938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e924:	45b8      	cmp	r8, r7
 801e926:	dd07      	ble.n	801e938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e928:	f1bc 0f00 	cmp.w	ip, #0
 801e92c:	d004      	beq.n	801e938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e92e:	44c8      	add	r8, r9
 801e930:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e934:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e938:	f1bc 0f0f 	cmp.w	ip, #15
 801e93c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e940:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801e944:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e948:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801e94c:	d802      	bhi.n	801e954 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801e94e:	f1be 0f0f 	cmp.w	lr, #15
 801e952:	d911      	bls.n	801e978 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801e954:	4b77      	ldr	r3, [pc, #476]	; (801eb34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801e956:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e95a:	4a77      	ldr	r2, [pc, #476]	; (801eb38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801e95c:	4877      	ldr	r0, [pc, #476]	; (801eb3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801e95e:	f005 fc73 	bl	8024248 <__assert_func>
 801e962:	4606      	mov	r6, r0
 801e964:	e7c2      	b.n	801e8ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801e966:	4605      	mov	r5, r0
 801e968:	4606      	mov	r6, r0
 801e96a:	e7ca      	b.n	801e902 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801e96c:	4605      	mov	r5, r0
 801e96e:	e7c8      	b.n	801e902 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801e970:	4604      	mov	r4, r0
 801e972:	e7d5      	b.n	801e920 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801e974:	4604      	mov	r4, r0
 801e976:	e7df      	b.n	801e938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e978:	fa1f fc8c 	uxth.w	ip, ip
 801e97c:	fa1f f28e 	uxth.w	r2, lr
 801e980:	fb02 fe0c 	mul.w	lr, r2, ip
 801e984:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e988:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801e98c:	ebac 070e 	sub.w	r7, ip, lr
 801e990:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801e994:	b292      	uxth	r2, r2
 801e996:	b2bf      	uxth	r7, r7
 801e998:	1a9b      	subs	r3, r3, r2
 801e99a:	fb07 fc0a 	mul.w	ip, r7, sl
 801e99e:	b29b      	uxth	r3, r3
 801e9a0:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e9a4:	9301      	str	r3, [sp, #4]
 801e9a6:	fb02 cc09 	mla	ip, r2, r9, ip
 801e9aa:	fb0e cc08 	mla	ip, lr, r8, ip
 801e9ae:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e9b2:	9305      	str	r3, [sp, #20]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	f000 80b9 	beq.w	801eb2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801e9ba:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e9be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e9c2:	fb0b fc0c 	mul.w	ip, fp, ip
 801e9c6:	fb0b f606 	mul.w	r6, fp, r6
 801e9ca:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e9ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e9d2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801e9d6:	44dc      	add	ip, fp
 801e9d8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801e9dc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e9e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9e4:	fb0a fb0b 	mul.w	fp, sl, fp
 801e9e8:	fb0a fa05 	mul.w	sl, sl, r5
 801e9ec:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801e9f0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e9f4:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801e9f8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e9fc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ea00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea04:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801ea08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea0c:	0a36      	lsrs	r6, r6, #8
 801ea0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea12:	44dc      	add	ip, fp
 801ea14:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ea18:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ea1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea20:	fb09 fb0b 	mul.w	fp, r9, fp
 801ea24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea28:	fb09 f904 	mul.w	r9, r9, r4
 801ea2c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ea30:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801ea34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea38:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ea3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea40:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ea44:	fb0c fc07 	mul.w	ip, ip, r7
 801ea48:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ea4c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801ea50:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ea54:	445d      	add	r5, fp
 801ea56:	fb08 f404 	mul.w	r4, r8, r4
 801ea5a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ea5e:	fb08 f800 	mul.w	r8, r8, r0
 801ea62:	0a2d      	lsrs	r5, r5, #8
 801ea64:	0a20      	lsrs	r0, r4, #8
 801ea66:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801ea6a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ea6e:	fb07 f70a 	mul.w	r7, r7, sl
 801ea72:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ea76:	4404      	add	r4, r0
 801ea78:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801ea7c:	0a24      	lsrs	r4, r4, #8
 801ea7e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801ea82:	9801      	ldr	r0, [sp, #4]
 801ea84:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ea88:	fb03 cc00 	mla	ip, r3, r0, ip
 801ea8c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ea90:	fb00 7606 	mla	r6, r0, r6, r7
 801ea94:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801ea98:	fb04 cc0e 	mla	ip, r4, lr, ip
 801ea9c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801eaa0:	b280      	uxth	r0, r0
 801eaa2:	9c04      	ldr	r4, [sp, #16]
 801eaa4:	fb05 cc02 	mla	ip, r5, r2, ip
 801eaa8:	fb0e 6e08 	mla	lr, lr, r8, r6
 801eaac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eab0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801eab4:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801eab8:	fb02 ec0c 	mla	ip, r2, ip, lr
 801eabc:	9a05      	ldr	r2, [sp, #20]
 801eabe:	4342      	muls	r2, r0
 801eac0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eac4:	1c53      	adds	r3, r2, #1
 801eac6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eaca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eace:	ea45 0c0c 	orr.w	ip, r5, ip
 801ead2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ead6:	fa5f f28c 	uxtb.w	r2, ip
 801eada:	b2db      	uxtb	r3, r3
 801eadc:	fb14 f403 	smulbb	r4, r4, r3
 801eae0:	fb02 4200 	mla	r2, r2, r0, r4
 801eae4:	b292      	uxth	r2, r2
 801eae6:	1c54      	adds	r4, r2, #1
 801eae8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801eaec:	9c03      	ldr	r4, [sp, #12]
 801eaee:	fb14 f403 	smulbb	r4, r4, r3
 801eaf2:	1212      	asrs	r2, r2, #8
 801eaf4:	700a      	strb	r2, [r1, #0]
 801eaf6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801eafa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801eafe:	fb02 4200 	mla	r2, r2, r0, r4
 801eb02:	b292      	uxth	r2, r2
 801eb04:	1c54      	adds	r4, r2, #1
 801eb06:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801eb0a:	1212      	asrs	r2, r2, #8
 801eb0c:	704a      	strb	r2, [r1, #1]
 801eb0e:	9a02      	ldr	r2, [sp, #8]
 801eb10:	fb12 f303 	smulbb	r3, r2, r3
 801eb14:	fb0c 3c00 	mla	ip, ip, r0, r3
 801eb18:	fa1f fc8c 	uxth.w	ip, ip
 801eb1c:	f10c 0301 	add.w	r3, ip, #1
 801eb20:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eb24:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eb28:	f881 c002 	strb.w	ip, [r1, #2]
 801eb2c:	b007      	add	sp, #28
 801eb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb32:	bf00      	nop
 801eb34:	08028c47 	.word	0x08028c47
 801eb38:	0802913e 	.word	0x0802913e
 801eb3c:	08028d10 	.word	0x08028d10

0801eb40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb44:	ed2d 8b08 	vpush	{d8-d11}
 801eb48:	b09b      	sub	sp, #108	; 0x6c
 801eb4a:	eeb0 aa40 	vmov.f32	s20, s0
 801eb4e:	eef0 9a60 	vmov.f32	s19, s1
 801eb52:	930a      	str	r3, [sp, #40]	; 0x28
 801eb54:	eeb0 9a41 	vmov.f32	s18, s2
 801eb58:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801eb5c:	eeb0 8a62 	vmov.f32	s16, s5
 801eb60:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801eb62:	eef0 8a43 	vmov.f32	s17, s6
 801eb66:	9312      	str	r3, [sp, #72]	; 0x48
 801eb68:	eef0 ba44 	vmov.f32	s23, s8
 801eb6c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801eb70:	eeb0 ba64 	vmov.f32	s22, s9
 801eb74:	9019      	str	r0, [sp, #100]	; 0x64
 801eb76:	eef0 aa45 	vmov.f32	s21, s10
 801eb7a:	9114      	str	r1, [sp, #80]	; 0x50
 801eb7c:	9317      	str	r3, [sp, #92]	; 0x5c
 801eb7e:	6868      	ldr	r0, [r5, #4]
 801eb80:	9218      	str	r2, [sp, #96]	; 0x60
 801eb82:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801eb84:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801eb88:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801eb8c:	fb00 1303 	mla	r3, r0, r3, r1
 801eb90:	6829      	ldr	r1, [r5, #0]
 801eb92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb96:	18cb      	adds	r3, r1, r3
 801eb98:	930d      	str	r3, [sp, #52]	; 0x34
 801eb9a:	6813      	ldr	r3, [r2, #0]
 801eb9c:	9313      	str	r3, [sp, #76]	; 0x4c
 801eb9e:	6853      	ldr	r3, [r2, #4]
 801eba0:	3304      	adds	r3, #4
 801eba2:	9309      	str	r3, [sp, #36]	; 0x24
 801eba4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	dc03      	bgt.n	801ebb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ebaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	f340 8352 	ble.w	801f256 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801ebb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	f340 81a2 	ble.w	801eefe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801ebba:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ebbc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ebbe:	1412      	asrs	r2, r2, #16
 801ebc0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ebc4:	d431      	bmi.n	801ec2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801ebc6:	1c51      	adds	r1, r2, #1
 801ebc8:	428c      	cmp	r4, r1
 801ebca:	dd31      	ble.n	801ec30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	db2f      	blt.n	801ec30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ebd0:	1c59      	adds	r1, r3, #1
 801ebd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ebd4:	4288      	cmp	r0, r1
 801ebd6:	dd2b      	ble.n	801ec30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ebd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebda:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ebdc:	3b01      	subs	r3, #1
 801ebde:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ebe0:	fb02 1203 	mla	r2, r2, r3, r1
 801ebe4:	1412      	asrs	r2, r2, #16
 801ebe6:	d42d      	bmi.n	801ec44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ebe8:	3201      	adds	r2, #1
 801ebea:	4294      	cmp	r4, r2
 801ebec:	dd2a      	ble.n	801ec44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ebee:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ebf0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ebf2:	fb02 1303 	mla	r3, r2, r3, r1
 801ebf6:	141b      	asrs	r3, r3, #16
 801ebf8:	d424      	bmi.n	801ec44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ebfa:	3301      	adds	r3, #1
 801ebfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ebfe:	429a      	cmp	r2, r3
 801ec00:	dd20      	ble.n	801ec44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ec02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec04:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801ec08:	f103 0e03 	add.w	lr, r3, #3
 801ec0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec0e:	9315      	str	r3, [sp, #84]	; 0x54
 801ec10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	f300 81de 	bgt.w	801efd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801ec18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ec1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec24:	441a      	add	r2, r3
 801ec26:	920d      	str	r2, [sp, #52]	; 0x34
 801ec28:	e16b      	b.n	801ef02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801ec2a:	1c51      	adds	r1, r2, #1
 801ec2c:	f040 8158 	bne.w	801eee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ec30:	42a2      	cmp	r2, r4
 801ec32:	f280 8155 	bge.w	801eee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ec36:	1c5a      	adds	r2, r3, #1
 801ec38:	f2c0 8152 	blt.w	801eee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ec3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ec3e:	4293      	cmp	r3, r2
 801ec40:	f280 814e 	bge.w	801eee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ec44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec46:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801ec48:	9316      	str	r3, [sp, #88]	; 0x58
 801ec4a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801ec4e:	9315      	str	r3, [sp, #84]	; 0x54
 801ec50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	dde0      	ble.n	801ec18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ec56:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ec58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ec5a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801ec5e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801ec60:	141b      	asrs	r3, r3, #16
 801ec62:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ec66:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ec68:	1412      	asrs	r2, r2, #16
 801ec6a:	f100 819a 	bmi.w	801efa2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801ec6e:	1c55      	adds	r5, r2, #1
 801ec70:	42ac      	cmp	r4, r5
 801ec72:	f340 8198 	ble.w	801efa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	f2c0 8195 	blt.w	801efa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ec7c:	1c5d      	adds	r5, r3, #1
 801ec7e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801ec80:	42af      	cmp	r7, r5
 801ec82:	f340 8190 	ble.w	801efa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ec86:	fb03 2304 	mla	r3, r3, r4, r2
 801ec8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec8c:	18d5      	adds	r5, r2, r3
 801ec8e:	5cd3      	ldrb	r3, [r2, r3]
 801ec90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ec96:	0e1f      	lsrs	r7, r3, #24
 801ec98:	2800      	cmp	r0, #0
 801ec9a:	f000 8171 	beq.w	801ef80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801ec9e:	f895 c001 	ldrb.w	ip, [r5, #1]
 801eca2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801eca6:	920e      	str	r2, [sp, #56]	; 0x38
 801eca8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ecac:	2900      	cmp	r1, #0
 801ecae:	f000 8172 	beq.w	801ef96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801ecb2:	eb05 0c04 	add.w	ip, r5, r4
 801ecb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ecb8:	5d2d      	ldrb	r5, [r5, r4]
 801ecba:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801ecbe:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ecc2:	950b      	str	r5, [sp, #44]	; 0x2c
 801ecc4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ecc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ecca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ecce:	0e15      	lsrs	r5, r2, #24
 801ecd0:	920f      	str	r2, [sp, #60]	; 0x3c
 801ecd2:	b280      	uxth	r0, r0
 801ecd4:	b289      	uxth	r1, r1
 801ecd6:	fb00 fa01 	mul.w	sl, r0, r1
 801ecda:	0100      	lsls	r0, r0, #4
 801ecdc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801ece0:	eba0 080a 	sub.w	r8, r0, sl
 801ece4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801ece8:	b289      	uxth	r1, r1
 801ecea:	fa1f f888 	uxth.w	r8, r8
 801ecee:	1a52      	subs	r2, r2, r1
 801ecf0:	fb08 f00e 	mul.w	r0, r8, lr
 801ecf4:	b292      	uxth	r2, r2
 801ecf6:	fb02 0007 	mla	r0, r2, r7, r0
 801ecfa:	fb01 0009 	mla	r0, r1, r9, r0
 801ecfe:	fb0a 0005 	mla	r0, sl, r5, r0
 801ed02:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ed06:	2800      	cmp	r0, #0
 801ed08:	f000 80dd 	beq.w	801eec6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801ed0c:	2fff      	cmp	r7, #255	; 0xff
 801ed0e:	d01a      	beq.n	801ed46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ed10:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ed14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed18:	fb07 fc0c 	mul.w	ip, r7, ip
 801ed1c:	435f      	muls	r7, r3
 801ed1e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ed22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed26:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801ed2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed2e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801ed32:	4463      	add	r3, ip
 801ed34:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ed38:	0a1b      	lsrs	r3, r3, #8
 801ed3a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ed3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed42:	ea43 030b 	orr.w	r3, r3, fp
 801ed46:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ed4a:	d01e      	beq.n	801ed8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801ed4c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801ed4e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801ed52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ed56:	fb0e fb0b 	mul.w	fp, lr, fp
 801ed5a:	fb0e fe07 	mul.w	lr, lr, r7
 801ed5e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ed62:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ed66:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ed6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed6e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ed72:	44dc      	add	ip, fp
 801ed74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed7c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ed80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed84:	ea4c 070e 	orr.w	r7, ip, lr
 801ed88:	970e      	str	r7, [sp, #56]	; 0x38
 801ed8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ed8e:	d01e      	beq.n	801edce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801ed90:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ed92:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ed96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ed9a:	fb09 fe0e 	mul.w	lr, r9, lr
 801ed9e:	fb09 f907 	mul.w	r9, r9, r7
 801eda2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801eda6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801edaa:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801edae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edb2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801edb6:	44f4      	add	ip, lr
 801edb8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801edbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edc0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801edc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edc8:	ea4c 0709 	orr.w	r7, ip, r9
 801edcc:	970b      	str	r7, [sp, #44]	; 0x2c
 801edce:	2dff      	cmp	r5, #255	; 0xff
 801edd0:	d01c      	beq.n	801ee0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801edd2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801edd4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801edd8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801eddc:	fb05 fe0e 	mul.w	lr, r5, lr
 801ede0:	437d      	muls	r5, r7
 801ede2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ede6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801edea:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801edee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edf2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801edf6:	44f4      	add	ip, lr
 801edf8:	0a2d      	lsrs	r5, r5, #8
 801edfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edfe:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ee02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee06:	ea4c 0505 	orr.w	r5, ip, r5
 801ee0a:	950f      	str	r5, [sp, #60]	; 0x3c
 801ee0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ee0e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ee12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee16:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ee1a:	fb08 f505 	mul.w	r5, r8, r5
 801ee1e:	fb02 5507 	mla	r5, r2, r7, r5
 801ee22:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ee24:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ee28:	fb01 5507 	mla	r5, r1, r7, r5
 801ee2c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ee2e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ee32:	fb0a 5507 	mla	r5, sl, r7, r5
 801ee36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801ee38:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ee3c:	0a2d      	lsrs	r5, r5, #8
 801ee3e:	fb08 f807 	mul.w	r8, r8, r7
 801ee42:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ee46:	fb02 8303 	mla	r3, r2, r3, r8
 801ee4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ee4c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ee50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee52:	fb01 330c 	mla	r3, r1, ip, r3
 801ee56:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ee5a:	fb0a 3a01 	mla	sl, sl, r1, r3
 801ee5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ee60:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ee62:	4343      	muls	r3, r0
 801ee64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee68:	1c58      	adds	r0, r3, #1
 801ee6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee6e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ee72:	ea45 050a 	orr.w	r5, r5, sl
 801ee76:	7833      	ldrb	r3, [r6, #0]
 801ee78:	b2ea      	uxtb	r2, r5
 801ee7a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ee7e:	fb12 f201 	smulbb	r2, r2, r1
 801ee82:	b2c0      	uxtb	r0, r0
 801ee84:	fb03 2300 	mla	r3, r3, r0, r2
 801ee88:	b29b      	uxth	r3, r3
 801ee8a:	1c5a      	adds	r2, r3, #1
 801ee8c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ee90:	7872      	ldrb	r2, [r6, #1]
 801ee92:	fb12 f200 	smulbb	r2, r2, r0
 801ee96:	121b      	asrs	r3, r3, #8
 801ee98:	7033      	strb	r3, [r6, #0]
 801ee9a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ee9e:	0c2d      	lsrs	r5, r5, #16
 801eea0:	fb03 2301 	mla	r3, r3, r1, r2
 801eea4:	b29b      	uxth	r3, r3
 801eea6:	1c5a      	adds	r2, r3, #1
 801eea8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801eeac:	121b      	asrs	r3, r3, #8
 801eeae:	7073      	strb	r3, [r6, #1]
 801eeb0:	78b3      	ldrb	r3, [r6, #2]
 801eeb2:	fb13 f000 	smulbb	r0, r3, r0
 801eeb6:	fb05 0501 	mla	r5, r5, r1, r0
 801eeba:	b2ad      	uxth	r5, r5
 801eebc:	1c6b      	adds	r3, r5, #1
 801eebe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801eec2:	122d      	asrs	r5, r5, #8
 801eec4:	70b5      	strb	r5, [r6, #2]
 801eec6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801eec8:	3603      	adds	r6, #3
 801eeca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801eecc:	4413      	add	r3, r2
 801eece:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801eed0:	932d      	str	r3, [sp, #180]	; 0xb4
 801eed2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801eed4:	4413      	add	r3, r2
 801eed6:	932e      	str	r3, [sp, #184]	; 0xb8
 801eed8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801eeda:	3b01      	subs	r3, #1
 801eedc:	9316      	str	r3, [sp, #88]	; 0x58
 801eede:	e6b7      	b.n	801ec50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801eee0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801eee2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801eee4:	4413      	add	r3, r2
 801eee6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801eee8:	932d      	str	r3, [sp, #180]	; 0xb4
 801eeea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801eeec:	4413      	add	r3, r2
 801eeee:	932e      	str	r3, [sp, #184]	; 0xb8
 801eef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eef2:	3b01      	subs	r3, #1
 801eef4:	930a      	str	r3, [sp, #40]	; 0x28
 801eef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eef8:	3303      	adds	r3, #3
 801eefa:	930d      	str	r3, [sp, #52]	; 0x34
 801eefc:	e659      	b.n	801ebb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801eefe:	f47f ae6b 	bne.w	801ebd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801ef02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	f340 81a6 	ble.w	801f256 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801ef0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ef0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ef10:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ef14:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ef18:	eef0 6a48 	vmov.f32	s13, s16
 801ef1c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ef20:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ef24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef28:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801ef2c:	eef0 6a68 	vmov.f32	s13, s17
 801ef30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef34:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801ef38:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ef3c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ef40:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ef44:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ef48:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ef4c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ef50:	ee18 2a10 	vmov	r2, s16
 801ef54:	eeb0 8a47 	vmov.f32	s16, s14
 801ef58:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef5c:	ee18 2a90 	vmov	r2, s17
 801ef60:	932f      	str	r3, [sp, #188]	; 0xbc
 801ef62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ef64:	eef0 8a67 	vmov.f32	s17, s15
 801ef68:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef6c:	9330      	str	r3, [sp, #192]	; 0xc0
 801ef6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ef70:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ef72:	3b01      	subs	r3, #1
 801ef74:	9314      	str	r3, [sp, #80]	; 0x50
 801ef76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ef78:	bf08      	it	eq
 801ef7a:	4613      	moveq	r3, r2
 801ef7c:	930a      	str	r3, [sp, #40]	; 0x28
 801ef7e:	e611      	b.n	801eba4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ef80:	b161      	cbz	r1, 801ef9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801ef82:	5d2a      	ldrb	r2, [r5, r4]
 801ef84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ef86:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ef8a:	25ff      	movs	r5, #255	; 0xff
 801ef8c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801ef90:	920b      	str	r2, [sp, #44]	; 0x2c
 801ef92:	46ae      	mov	lr, r5
 801ef94:	e69d      	b.n	801ecd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801ef96:	25ff      	movs	r5, #255	; 0xff
 801ef98:	46a9      	mov	r9, r5
 801ef9a:	e69a      	b.n	801ecd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801ef9c:	25ff      	movs	r5, #255	; 0xff
 801ef9e:	46a9      	mov	r9, r5
 801efa0:	e7f7      	b.n	801ef92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801efa2:	1c57      	adds	r7, r2, #1
 801efa4:	d18f      	bne.n	801eec6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801efa6:	4294      	cmp	r4, r2
 801efa8:	dd8d      	ble.n	801eec6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801efaa:	1c5d      	adds	r5, r3, #1
 801efac:	db8b      	blt.n	801eec6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801efae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801efb0:	429d      	cmp	r5, r3
 801efb2:	dd88      	ble.n	801eec6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801efb4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801efb6:	9202      	str	r2, [sp, #8]
 801efb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efba:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801efbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801efc0:	9819      	ldr	r0, [sp, #100]	; 0x64
 801efc2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801efc6:	e9cd 4300 	strd	r4, r3, [sp]
 801efca:	4631      	mov	r1, r6
 801efcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efce:	f7ff fc63 	bl	801e898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801efd2:	e778      	b.n	801eec6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801efd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801efd6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801efd8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801efdc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801efde:	1412      	asrs	r2, r2, #16
 801efe0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801efe4:	141b      	asrs	r3, r3, #16
 801efe6:	fb04 2303 	mla	r3, r4, r3, r2
 801efea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efec:	18d5      	adds	r5, r2, r3
 801efee:	5cd3      	ldrb	r3, [r2, r3]
 801eff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801eff6:	0e1e      	lsrs	r6, r3, #24
 801eff8:	2900      	cmp	r1, #0
 801effa:	f000 811b 	beq.w	801f234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801effe:	786a      	ldrb	r2, [r5, #1]
 801f000:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f002:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f006:	9210      	str	r2, [sp, #64]	; 0x40
 801f008:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f00c:	2800      	cmp	r0, #0
 801f00e:	f000 811c 	beq.w	801f24a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801f012:	192a      	adds	r2, r5, r4
 801f014:	5d2d      	ldrb	r5, [r5, r4]
 801f016:	7852      	ldrb	r2, [r2, #1]
 801f018:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f01c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f020:	950c      	str	r5, [sp, #48]	; 0x30
 801f022:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f026:	0e15      	lsrs	r5, r2, #24
 801f028:	9211      	str	r2, [sp, #68]	; 0x44
 801f02a:	b289      	uxth	r1, r1
 801f02c:	b280      	uxth	r0, r0
 801f02e:	fb01 fa00 	mul.w	sl, r1, r0
 801f032:	0109      	lsls	r1, r1, #4
 801f034:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f038:	eba1 080a 	sub.w	r8, r1, sl
 801f03c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f040:	b280      	uxth	r0, r0
 801f042:	fa1f f888 	uxth.w	r8, r8
 801f046:	1a12      	subs	r2, r2, r0
 801f048:	fb08 f10c 	mul.w	r1, r8, ip
 801f04c:	b292      	uxth	r2, r2
 801f04e:	fb02 1106 	mla	r1, r2, r6, r1
 801f052:	fb00 1109 	mla	r1, r0, r9, r1
 801f056:	fb0a 1105 	mla	r1, sl, r5, r1
 801f05a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f05e:	2900      	cmp	r1, #0
 801f060:	f000 80da 	beq.w	801f218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801f064:	2eff      	cmp	r6, #255	; 0xff
 801f066:	d016      	beq.n	801f096 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801f068:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f06c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f070:	4377      	muls	r7, r6
 801f072:	435e      	muls	r6, r3
 801f074:	0a3b      	lsrs	r3, r7, #8
 801f076:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f07a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f07e:	443b      	add	r3, r7
 801f080:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801f084:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f088:	0a1b      	lsrs	r3, r3, #8
 801f08a:	0a3f      	lsrs	r7, r7, #8
 801f08c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f090:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f094:	433b      	orrs	r3, r7
 801f096:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f09a:	d01d      	beq.n	801f0d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801f09c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f09e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f0a0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f0a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f0a8:	fb0c f606 	mul.w	r6, ip, r6
 801f0ac:	fb0c fc07 	mul.w	ip, ip, r7
 801f0b0:	0a37      	lsrs	r7, r6, #8
 801f0b2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f0b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f0ba:	4437      	add	r7, r6
 801f0bc:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801f0c0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801f0c4:	0a3f      	lsrs	r7, r7, #8
 801f0c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f0ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f0d2:	ea47 060c 	orr.w	r6, r7, ip
 801f0d6:	9610      	str	r6, [sp, #64]	; 0x40
 801f0d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f0dc:	d01d      	beq.n	801f11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801f0de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f0e0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f0e4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f0e8:	fb09 fc0c 	mul.w	ip, r9, ip
 801f0ec:	fb09 f906 	mul.w	r9, r9, r6
 801f0f0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f0f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f0f8:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801f0fc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f100:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f104:	4467      	add	r7, ip
 801f106:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f10a:	0a3f      	lsrs	r7, r7, #8
 801f10c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f110:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f114:	ea47 0609 	orr.w	r6, r7, r9
 801f118:	960c      	str	r6, [sp, #48]	; 0x30
 801f11a:	2dff      	cmp	r5, #255	; 0xff
 801f11c:	d01a      	beq.n	801f154 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801f11e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f120:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f124:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f128:	fb05 fc0c 	mul.w	ip, r5, ip
 801f12c:	4375      	muls	r5, r6
 801f12e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f132:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f136:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f13a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f13e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f142:	4467      	add	r7, ip
 801f144:	0a2d      	lsrs	r5, r5, #8
 801f146:	0a3f      	lsrs	r7, r7, #8
 801f148:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f14c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f150:	433d      	orrs	r5, r7
 801f152:	9511      	str	r5, [sp, #68]	; 0x44
 801f154:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f156:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801f15a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f15e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f162:	fb08 f505 	mul.w	r5, r8, r5
 801f166:	fb02 5506 	mla	r5, r2, r6, r5
 801f16a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f16c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f170:	fb00 5506 	mla	r5, r0, r6, r5
 801f174:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f176:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f17a:	fb0a 5506 	mla	r5, sl, r6, r5
 801f17e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f180:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f184:	0a2d      	lsrs	r5, r5, #8
 801f186:	fb08 f806 	mul.w	r8, r8, r6
 801f18a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f18e:	fb02 8303 	mla	r3, r2, r3, r8
 801f192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f194:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f198:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f19a:	fb00 3307 	mla	r3, r0, r7, r3
 801f19e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f1a2:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801f1a6:	fb01 f30b 	mul.w	r3, r1, fp
 801f1aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1ae:	1c59      	adds	r1, r3, #1
 801f1b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f1b4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f1b8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f1bc:	ea45 050c 	orr.w	r5, r5, ip
 801f1c0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f1c4:	b2ea      	uxtb	r2, r5
 801f1c6:	b2c9      	uxtb	r1, r1
 801f1c8:	fb12 f20b 	smulbb	r2, r2, fp
 801f1cc:	fb03 2301 	mla	r3, r3, r1, r2
 801f1d0:	b29b      	uxth	r3, r3
 801f1d2:	1c5a      	adds	r2, r3, #1
 801f1d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f1d8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f1dc:	fb12 f201 	smulbb	r2, r2, r1
 801f1e0:	121b      	asrs	r3, r3, #8
 801f1e2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f1e6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f1ea:	0c2d      	lsrs	r5, r5, #16
 801f1ec:	fb03 230b 	mla	r3, r3, fp, r2
 801f1f0:	b29b      	uxth	r3, r3
 801f1f2:	1c5a      	adds	r2, r3, #1
 801f1f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f1f8:	121b      	asrs	r3, r3, #8
 801f1fa:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f1fe:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f202:	fb13 f101 	smulbb	r1, r3, r1
 801f206:	fb05 150b 	mla	r5, r5, fp, r1
 801f20a:	b2ad      	uxth	r5, r5
 801f20c:	1c69      	adds	r1, r5, #1
 801f20e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f212:	122d      	asrs	r5, r5, #8
 801f214:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f218:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f21a:	f10e 0e03 	add.w	lr, lr, #3
 801f21e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f220:	4413      	add	r3, r2
 801f222:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f224:	932d      	str	r3, [sp, #180]	; 0xb4
 801f226:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f228:	4413      	add	r3, r2
 801f22a:	932e      	str	r3, [sp, #184]	; 0xb8
 801f22c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f22e:	3b01      	subs	r3, #1
 801f230:	9315      	str	r3, [sp, #84]	; 0x54
 801f232:	e4ed      	b.n	801ec10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f234:	b160      	cbz	r0, 801f250 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801f236:	5d2a      	ldrb	r2, [r5, r4]
 801f238:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f23a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f23e:	25ff      	movs	r5, #255	; 0xff
 801f240:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f244:	920c      	str	r2, [sp, #48]	; 0x30
 801f246:	46ac      	mov	ip, r5
 801f248:	e6ef      	b.n	801f02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801f24a:	25ff      	movs	r5, #255	; 0xff
 801f24c:	46a9      	mov	r9, r5
 801f24e:	e6ec      	b.n	801f02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801f250:	25ff      	movs	r5, #255	; 0xff
 801f252:	46a9      	mov	r9, r5
 801f254:	e7f7      	b.n	801f246 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801f256:	b01b      	add	sp, #108	; 0x6c
 801f258:	ecbd 8b08 	vpop	{d8-d11}
 801f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f264:	b085      	sub	sp, #20
 801f266:	7888      	ldrb	r0, [r1, #2]
 801f268:	4692      	mov	sl, r2
 801f26a:	4698      	mov	r8, r3
 801f26c:	9000      	str	r0, [sp, #0]
 801f26e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f272:	7848      	ldrb	r0, [r1, #1]
 801f274:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f278:	9001      	str	r0, [sp, #4]
 801f27a:	7808      	ldrb	r0, [r1, #0]
 801f27c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f280:	9002      	str	r0, [sp, #8]
 801f282:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f286:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801f28a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801f28e:	fb04 560c 	mla	r6, r4, ip, r5
 801f292:	2c00      	cmp	r4, #0
 801f294:	eb02 0e06 	add.w	lr, r2, r6
 801f298:	9a00      	ldr	r2, [sp, #0]
 801f29a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f29e:	9a01      	ldr	r2, [sp, #4]
 801f2a0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f2a4:	db3e      	blt.n	801f324 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801f2a6:	45a1      	cmp	r9, r4
 801f2a8:	dd3c      	ble.n	801f324 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801f2aa:	2d00      	cmp	r5, #0
 801f2ac:	db38      	blt.n	801f320 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801f2ae:	45ac      	cmp	ip, r5
 801f2b0:	dd36      	ble.n	801f320 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801f2b2:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801f2b6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801f2ba:	1c6e      	adds	r6, r5, #1
 801f2bc:	d435      	bmi.n	801f32a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f2be:	45b4      	cmp	ip, r6
 801f2c0:	dd33      	ble.n	801f32a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f2c2:	b393      	cbz	r3, 801f32a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f2c4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801f2c8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801f2cc:	3401      	adds	r4, #1
 801f2ce:	d430      	bmi.n	801f332 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f2d0:	45a1      	cmp	r9, r4
 801f2d2:	dd2e      	ble.n	801f332 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f2d4:	b36f      	cbz	r7, 801f332 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f2d6:	2d00      	cmp	r5, #0
 801f2d8:	db29      	blt.n	801f32e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801f2da:	45ac      	cmp	ip, r5
 801f2dc:	dd27      	ble.n	801f32e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801f2de:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801f2e2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801f2e6:	3501      	adds	r5, #1
 801f2e8:	d407      	bmi.n	801f2fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f2ea:	45ac      	cmp	ip, r5
 801f2ec:	dd05      	ble.n	801f2fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f2ee:	b123      	cbz	r3, 801f2fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f2f0:	44f4      	add	ip, lr
 801f2f2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f2f6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801f2fa:	2b0f      	cmp	r3, #15
 801f2fc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f300:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f304:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f308:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f30c:	d801      	bhi.n	801f312 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801f30e:	2f0f      	cmp	r7, #15
 801f310:	d911      	bls.n	801f336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801f312:	4b76      	ldr	r3, [pc, #472]	; (801f4ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801f314:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f318:	4a75      	ldr	r2, [pc, #468]	; (801f4f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801f31a:	4876      	ldr	r0, [pc, #472]	; (801f4f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801f31c:	f004 ff94 	bl	8024248 <__assert_func>
 801f320:	4602      	mov	r2, r0
 801f322:	e7ca      	b.n	801f2ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801f324:	4606      	mov	r6, r0
 801f326:	4602      	mov	r2, r0
 801f328:	e7d0      	b.n	801f2cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801f32a:	4606      	mov	r6, r0
 801f32c:	e7ce      	b.n	801f2cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801f32e:	4604      	mov	r4, r0
 801f330:	e7d9      	b.n	801f2e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801f332:	4604      	mov	r4, r0
 801f334:	e7e1      	b.n	801f2fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f336:	b29b      	uxth	r3, r3
 801f338:	b2bf      	uxth	r7, r7
 801f33a:	fb07 fe03 	mul.w	lr, r7, r3
 801f33e:	011b      	lsls	r3, r3, #4
 801f340:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f344:	eba3 0c0e 	sub.w	ip, r3, lr
 801f348:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f34c:	b2bf      	uxth	r7, r7
 801f34e:	fa1f fc8c 	uxth.w	ip, ip
 801f352:	1bed      	subs	r5, r5, r7
 801f354:	fb0c f30a 	mul.w	r3, ip, sl
 801f358:	b2ad      	uxth	r5, r5
 801f35a:	fb05 330b 	mla	r3, r5, fp, r3
 801f35e:	fb07 3309 	mla	r3, r7, r9, r3
 801f362:	fb0e 3308 	mla	r3, lr, r8, r3
 801f366:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f36a:	9303      	str	r3, [sp, #12]
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	f000 80b9 	beq.w	801f4e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801f372:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f376:	d018      	beq.n	801f3aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801f378:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f37c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f380:	fb0b f303 	mul.w	r3, fp, r3
 801f384:	fb0b fb02 	mul.w	fp, fp, r2
 801f388:	0a1a      	lsrs	r2, r3, #8
 801f38a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f38e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f392:	441a      	add	r2, r3
 801f394:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f398:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f39c:	0a12      	lsrs	r2, r2, #8
 801f39e:	0a1b      	lsrs	r3, r3, #8
 801f3a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f3a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f3a8:	431a      	orrs	r2, r3
 801f3aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f3ae:	d019      	beq.n	801f3e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801f3b0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f3b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f3b8:	fb0a fb0b 	mul.w	fp, sl, fp
 801f3bc:	fb0a fa06 	mul.w	sl, sl, r6
 801f3c0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f3c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f3c8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f3cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f3d0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f3d4:	445e      	add	r6, fp
 801f3d6:	0a1b      	lsrs	r3, r3, #8
 801f3d8:	0a36      	lsrs	r6, r6, #8
 801f3da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f3de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f3e2:	431e      	orrs	r6, r3
 801f3e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f3e8:	d019      	beq.n	801f41e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801f3ea:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f3ee:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f3f2:	fb09 fa0a 	mul.w	sl, r9, sl
 801f3f6:	fb09 f904 	mul.w	r9, r9, r4
 801f3fa:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f3fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f402:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f406:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f40a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f40e:	4454      	add	r4, sl
 801f410:	0a1b      	lsrs	r3, r3, #8
 801f412:	0a24      	lsrs	r4, r4, #8
 801f414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f418:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f41c:	431c      	orrs	r4, r3
 801f41e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f422:	d019      	beq.n	801f458 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801f424:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f428:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f42c:	fb08 f909 	mul.w	r9, r8, r9
 801f430:	fb08 f800 	mul.w	r8, r8, r0
 801f434:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f438:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f43c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f440:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f444:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f448:	4448      	add	r0, r9
 801f44a:	0a1b      	lsrs	r3, r3, #8
 801f44c:	0a00      	lsrs	r0, r0, #8
 801f44e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f452:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f456:	4318      	orrs	r0, r3
 801f458:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f45c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f460:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f464:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f468:	fb0c f808 	mul.w	r8, ip, r8
 801f46c:	fb0c f606 	mul.w	r6, ip, r6
 801f470:	fb05 8803 	mla	r8, r5, r3, r8
 801f474:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f478:	fb05 6202 	mla	r2, r5, r2, r6
 801f47c:	fb07 8803 	mla	r8, r7, r3, r8
 801f480:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f484:	fb0e 8303 	mla	r3, lr, r3, r8
 801f488:	0a1b      	lsrs	r3, r3, #8
 801f48a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801f48e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801f492:	9c02      	ldr	r4, [sp, #8]
 801f494:	fb07 2703 	mla	r7, r7, r3, r2
 801f498:	9a03      	ldr	r2, [sp, #12]
 801f49a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801f49e:	43d2      	mvns	r2, r2
 801f4a0:	fb0e 7303 	mla	r3, lr, r3, r7
 801f4a4:	b2d2      	uxtb	r2, r2
 801f4a6:	0a1b      	lsrs	r3, r3, #8
 801f4a8:	4354      	muls	r4, r2
 801f4aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f4ae:	1c60      	adds	r0, r4, #1
 801f4b0:	ea48 0303 	orr.w	r3, r8, r3
 801f4b4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f4b8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f4bc:	7008      	strb	r0, [r1, #0]
 801f4be:	9801      	ldr	r0, [sp, #4]
 801f4c0:	4350      	muls	r0, r2
 801f4c2:	1c44      	adds	r4, r0, #1
 801f4c4:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801f4c8:	0a18      	lsrs	r0, r3, #8
 801f4ca:	0c1b      	lsrs	r3, r3, #16
 801f4cc:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f4d0:	7048      	strb	r0, [r1, #1]
 801f4d2:	9800      	ldr	r0, [sp, #0]
 801f4d4:	4350      	muls	r0, r2
 801f4d6:	4602      	mov	r2, r0
 801f4d8:	3001      	adds	r0, #1
 801f4da:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f4de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f4e2:	708b      	strb	r3, [r1, #2]
 801f4e4:	b005      	add	sp, #20
 801f4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ea:	bf00      	nop
 801f4ec:	08028c47 	.word	0x08028c47
 801f4f0:	0802913e 	.word	0x0802913e
 801f4f4:	08028d10 	.word	0x08028d10

0801f4f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4fc:	ed2d 8b08 	vpush	{d8-d11}
 801f500:	b097      	sub	sp, #92	; 0x5c
 801f502:	eeb0 aa40 	vmov.f32	s20, s0
 801f506:	eef0 9a60 	vmov.f32	s19, s1
 801f50a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801f50c:	eeb0 9a41 	vmov.f32	s18, s2
 801f510:	9308      	str	r3, [sp, #32]
 801f512:	eeb0 8a62 	vmov.f32	s16, s5
 801f516:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801f51a:	eef0 8a43 	vmov.f32	s17, s6
 801f51e:	9015      	str	r0, [sp, #84]	; 0x54
 801f520:	eef0 ba44 	vmov.f32	s23, s8
 801f524:	6868      	ldr	r0, [r5, #4]
 801f526:	eeb0 ba64 	vmov.f32	s22, s9
 801f52a:	9112      	str	r1, [sp, #72]	; 0x48
 801f52c:	eef0 aa45 	vmov.f32	s21, s10
 801f530:	9310      	str	r3, [sp, #64]	; 0x40
 801f532:	9214      	str	r2, [sp, #80]	; 0x50
 801f534:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801f536:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801f53a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f53e:	fb00 1303 	mla	r3, r0, r3, r1
 801f542:	6829      	ldr	r1, [r5, #0]
 801f544:	6855      	ldr	r5, [r2, #4]
 801f546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f54a:	3504      	adds	r5, #4
 801f54c:	18cb      	adds	r3, r1, r3
 801f54e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f550:	6813      	ldr	r3, [r2, #0]
 801f552:	9311      	str	r3, [sp, #68]	; 0x44
 801f554:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f556:	2b00      	cmp	r3, #0
 801f558:	dc03      	bgt.n	801f562 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f55a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	f340 8333 	ble.w	801fbc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801f562:	9b08      	ldr	r3, [sp, #32]
 801f564:	2b00      	cmp	r3, #0
 801f566:	f340 8190 	ble.w	801f88a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f56a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f56c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f56e:	1412      	asrs	r2, r2, #16
 801f570:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f574:	d42f      	bmi.n	801f5d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801f576:	1c51      	adds	r1, r2, #1
 801f578:	428c      	cmp	r4, r1
 801f57a:	dd2f      	ble.n	801f5dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	db2d      	blt.n	801f5dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f580:	1c59      	adds	r1, r3, #1
 801f582:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f584:	4288      	cmp	r0, r1
 801f586:	dd29      	ble.n	801f5dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f588:	9b08      	ldr	r3, [sp, #32]
 801f58a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f58c:	3b01      	subs	r3, #1
 801f58e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f590:	fb02 1203 	mla	r2, r2, r3, r1
 801f594:	1412      	asrs	r2, r2, #16
 801f596:	d42b      	bmi.n	801f5f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f598:	3201      	adds	r2, #1
 801f59a:	4294      	cmp	r4, r2
 801f59c:	dd28      	ble.n	801f5f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f59e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f5a0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f5a2:	fb02 1303 	mla	r3, r2, r3, r1
 801f5a6:	141b      	asrs	r3, r3, #16
 801f5a8:	d422      	bmi.n	801f5f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f5aa:	3301      	adds	r3, #1
 801f5ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5ae:	429a      	cmp	r2, r3
 801f5b0:	dd1e      	ble.n	801f5f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5b4:	f103 0803 	add.w	r8, r3, #3
 801f5b8:	9b08      	ldr	r3, [sp, #32]
 801f5ba:	9307      	str	r3, [sp, #28]
 801f5bc:	9b07      	ldr	r3, [sp, #28]
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	f300 81ca 	bgt.w	801f958 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801f5c4:	9b08      	ldr	r3, [sp, #32]
 801f5c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f5c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5d0:	441a      	add	r2, r3
 801f5d2:	920b      	str	r2, [sp, #44]	; 0x2c
 801f5d4:	e15b      	b.n	801f88e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f5d6:	1c51      	adds	r1, r2, #1
 801f5d8:	f040 8148 	bne.w	801f86c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f5dc:	42a2      	cmp	r2, r4
 801f5de:	f280 8145 	bge.w	801f86c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f5e2:	1c5a      	adds	r2, r3, #1
 801f5e4:	f2c0 8142 	blt.w	801f86c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f5e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5ea:	4293      	cmp	r3, r2
 801f5ec:	f280 813e 	bge.w	801f86c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f5f0:	9b08      	ldr	r3, [sp, #32]
 801f5f2:	9313      	str	r3, [sp, #76]	; 0x4c
 801f5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5f6:	9307      	str	r3, [sp, #28]
 801f5f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	dde2      	ble.n	801f5c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801f5fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f600:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f602:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f606:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f608:	141b      	asrs	r3, r3, #16
 801f60a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f60e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f610:	1412      	asrs	r2, r2, #16
 801f612:	f100 818b 	bmi.w	801f92c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801f616:	1c56      	adds	r6, r2, #1
 801f618:	42b4      	cmp	r4, r6
 801f61a:	f340 8189 	ble.w	801f930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f61e:	2b00      	cmp	r3, #0
 801f620:	f2c0 8186 	blt.w	801f930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f624:	1c5e      	adds	r6, r3, #1
 801f626:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f628:	42b7      	cmp	r7, r6
 801f62a:	f340 8181 	ble.w	801f930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f62e:	fb03 2304 	mla	r3, r3, r4, r2
 801f632:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f634:	18d6      	adds	r6, r2, r3
 801f636:	5cd3      	ldrb	r3, [r2, r3]
 801f638:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f63c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f640:	2900      	cmp	r1, #0
 801f642:	f000 8163 	beq.w	801f90c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801f646:	7872      	ldrb	r2, [r6, #1]
 801f648:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f64c:	920c      	str	r2, [sp, #48]	; 0x30
 801f64e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f652:	2800      	cmp	r0, #0
 801f654:	f000 8164 	beq.w	801f920 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801f658:	1932      	adds	r2, r6, r4
 801f65a:	5d36      	ldrb	r6, [r6, r4]
 801f65c:	7852      	ldrb	r2, [r2, #1]
 801f65e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801f662:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f666:	9609      	str	r6, [sp, #36]	; 0x24
 801f668:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f66c:	0e16      	lsrs	r6, r2, #24
 801f66e:	920d      	str	r2, [sp, #52]	; 0x34
 801f670:	b289      	uxth	r1, r1
 801f672:	b280      	uxth	r0, r0
 801f674:	fb01 fb00 	mul.w	fp, r1, r0
 801f678:	0109      	lsls	r1, r1, #4
 801f67a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801f67e:	eba1 090b 	sub.w	r9, r1, fp
 801f682:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f686:	b280      	uxth	r0, r0
 801f688:	fa1f f989 	uxth.w	r9, r9
 801f68c:	1a12      	subs	r2, r2, r0
 801f68e:	fb09 f108 	mul.w	r1, r9, r8
 801f692:	b292      	uxth	r2, r2
 801f694:	fb02 110c 	mla	r1, r2, ip, r1
 801f698:	fb00 110a 	mla	r1, r0, sl, r1
 801f69c:	fb0b 1106 	mla	r1, fp, r6, r1
 801f6a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f6a4:	2900      	cmp	r1, #0
 801f6a6:	f000 80d2 	beq.w	801f84e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f6aa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f6ae:	d01b      	beq.n	801f6e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801f6b0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f6b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6b8:	fb0c fe0e 	mul.w	lr, ip, lr
 801f6bc:	fb0c fc03 	mul.w	ip, ip, r3
 801f6c0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f6c4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f6c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f6cc:	4473      	add	r3, lr
 801f6ce:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801f6d2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f6d6:	0a1b      	lsrs	r3, r3, #8
 801f6d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f6e0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f6e4:	ea43 030e 	orr.w	r3, r3, lr
 801f6e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f6ec:	d01e      	beq.n	801f72c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801f6ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f6f0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f6f4:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801f6f8:	fb08 fc0c 	mul.w	ip, r8, ip
 801f6fc:	fb08 f80e 	mul.w	r8, r8, lr
 801f700:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f704:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f708:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f70c:	44e6      	add	lr, ip
 801f70e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801f712:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801f716:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f71a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f71e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f722:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f726:	ea4e 0708 	orr.w	r7, lr, r8
 801f72a:	970c      	str	r7, [sp, #48]	; 0x30
 801f72c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f730:	d01e      	beq.n	801f770 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801f732:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f734:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f738:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f73c:	fb0a f808 	mul.w	r8, sl, r8
 801f740:	fb0a fa0c 	mul.w	sl, sl, ip
 801f744:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f748:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f74c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f750:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f754:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f758:	44c6      	add	lr, r8
 801f75a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f75e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f762:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f766:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f76a:	ea4e 070a 	orr.w	r7, lr, sl
 801f76e:	9709      	str	r7, [sp, #36]	; 0x24
 801f770:	2eff      	cmp	r6, #255	; 0xff
 801f772:	d01d      	beq.n	801f7b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801f774:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f776:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f77a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f77e:	fb06 f808 	mul.w	r8, r6, r8
 801f782:	fb06 f60c 	mul.w	r6, r6, ip
 801f786:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f78a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f78e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f792:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f796:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f79a:	44c6      	add	lr, r8
 801f79c:	0a36      	lsrs	r6, r6, #8
 801f79e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7a2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f7a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f7aa:	ea4e 0606 	orr.w	r6, lr, r6
 801f7ae:	960d      	str	r6, [sp, #52]	; 0x34
 801f7b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f7b2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f7b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f7b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7bc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f7c0:	43c9      	mvns	r1, r1
 801f7c2:	fb09 f606 	mul.w	r6, r9, r6
 801f7c6:	b2c9      	uxtb	r1, r1
 801f7c8:	fb02 660c 	mla	r6, r2, ip, r6
 801f7cc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f7d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f7d2:	fb00 660c 	mla	r6, r0, ip, r6
 801f7d6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f7da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f7dc:	fb0b 660c 	mla	r6, fp, ip, r6
 801f7e0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f7e4:	fb09 f90c 	mul.w	r9, r9, ip
 801f7e8:	0a36      	lsrs	r6, r6, #8
 801f7ea:	fb02 9303 	mla	r3, r2, r3, r9
 801f7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f7f0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f7f4:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801f7f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f7fa:	fb00 330e 	mla	r3, r0, lr, r3
 801f7fe:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801f802:	fb0b 3b00 	mla	fp, fp, r0, r3
 801f806:	9b07      	ldr	r3, [sp, #28]
 801f808:	781b      	ldrb	r3, [r3, #0]
 801f80a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f80e:	fb03 f201 	mul.w	r2, r3, r1
 801f812:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f816:	1c53      	adds	r3, r2, #1
 801f818:	ea46 060b 	orr.w	r6, r6, fp
 801f81c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f820:	9a07      	ldr	r2, [sp, #28]
 801f822:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801f826:	7013      	strb	r3, [r2, #0]
 801f828:	7853      	ldrb	r3, [r2, #1]
 801f82a:	434b      	muls	r3, r1
 801f82c:	1c5a      	adds	r2, r3, #1
 801f82e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f832:	0a33      	lsrs	r3, r6, #8
 801f834:	0c36      	lsrs	r6, r6, #16
 801f836:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f83a:	9a07      	ldr	r2, [sp, #28]
 801f83c:	7053      	strb	r3, [r2, #1]
 801f83e:	7893      	ldrb	r3, [r2, #2]
 801f840:	4359      	muls	r1, r3
 801f842:	1c4b      	adds	r3, r1, #1
 801f844:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f848:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801f84c:	7096      	strb	r6, [r2, #2]
 801f84e:	9b07      	ldr	r3, [sp, #28]
 801f850:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f852:	3303      	adds	r3, #3
 801f854:	9307      	str	r3, [sp, #28]
 801f856:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f858:	4413      	add	r3, r2
 801f85a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f85c:	9329      	str	r3, [sp, #164]	; 0xa4
 801f85e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f860:	4413      	add	r3, r2
 801f862:	932a      	str	r3, [sp, #168]	; 0xa8
 801f864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f866:	3b01      	subs	r3, #1
 801f868:	9313      	str	r3, [sp, #76]	; 0x4c
 801f86a:	e6c5      	b.n	801f5f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f86c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f86e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f870:	4413      	add	r3, r2
 801f872:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f874:	9329      	str	r3, [sp, #164]	; 0xa4
 801f876:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f878:	4413      	add	r3, r2
 801f87a:	932a      	str	r3, [sp, #168]	; 0xa8
 801f87c:	9b08      	ldr	r3, [sp, #32]
 801f87e:	3b01      	subs	r3, #1
 801f880:	9308      	str	r3, [sp, #32]
 801f882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f884:	3303      	adds	r3, #3
 801f886:	930b      	str	r3, [sp, #44]	; 0x2c
 801f888:	e66b      	b.n	801f562 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f88a:	f47f ae7d 	bne.w	801f588 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801f88e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f890:	2b00      	cmp	r3, #0
 801f892:	f340 8199 	ble.w	801fbc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801f896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f89a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f89c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f8a0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f8a4:	eef0 6a48 	vmov.f32	s13, s16
 801f8a8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f8ac:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f8b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8b4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f8b8:	eef0 6a68 	vmov.f32	s13, s17
 801f8bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8c0:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801f8c4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f8c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f8cc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f8d0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f8d4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f8d8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f8dc:	ee18 2a10 	vmov	r2, s16
 801f8e0:	eeb0 8a47 	vmov.f32	s16, s14
 801f8e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8e8:	ee18 2a90 	vmov	r2, s17
 801f8ec:	932b      	str	r3, [sp, #172]	; 0xac
 801f8ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f8f0:	eef0 8a67 	vmov.f32	s17, s15
 801f8f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8f8:	932c      	str	r3, [sp, #176]	; 0xb0
 801f8fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f8fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f8fe:	3b01      	subs	r3, #1
 801f900:	9312      	str	r3, [sp, #72]	; 0x48
 801f902:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f904:	bf08      	it	eq
 801f906:	4613      	moveq	r3, r2
 801f908:	9308      	str	r3, [sp, #32]
 801f90a:	e623      	b.n	801f554 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f90c:	b158      	cbz	r0, 801f926 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801f90e:	5d32      	ldrb	r2, [r6, r4]
 801f910:	26ff      	movs	r6, #255	; 0xff
 801f912:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f916:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801f91a:	9209      	str	r2, [sp, #36]	; 0x24
 801f91c:	46b0      	mov	r8, r6
 801f91e:	e6a7      	b.n	801f670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801f920:	26ff      	movs	r6, #255	; 0xff
 801f922:	46b2      	mov	sl, r6
 801f924:	e6a4      	b.n	801f670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801f926:	26ff      	movs	r6, #255	; 0xff
 801f928:	46b2      	mov	sl, r6
 801f92a:	e7f7      	b.n	801f91c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801f92c:	1c57      	adds	r7, r2, #1
 801f92e:	d18e      	bne.n	801f84e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f930:	4294      	cmp	r4, r2
 801f932:	dd8c      	ble.n	801f84e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f934:	1c5e      	adds	r6, r3, #1
 801f936:	db8a      	blt.n	801f84e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f938:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f93a:	429e      	cmp	r6, r3
 801f93c:	dd87      	ble.n	801f84e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f93e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801f942:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f946:	e9cd 4600 	strd	r4, r6, [sp]
 801f94a:	462b      	mov	r3, r5
 801f94c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f94e:	9907      	ldr	r1, [sp, #28]
 801f950:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f952:	f7ff fc85 	bl	801f260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801f956:	e77a      	b.n	801f84e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f958:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f95a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f95c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f960:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f962:	1409      	asrs	r1, r1, #16
 801f964:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f968:	141b      	asrs	r3, r3, #16
 801f96a:	fb04 1303 	mla	r3, r4, r3, r1
 801f96e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f970:	18ce      	adds	r6, r1, r3
 801f972:	5ccb      	ldrb	r3, [r1, r3]
 801f974:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f978:	0e1f      	lsrs	r7, r3, #24
 801f97a:	2a00      	cmp	r2, #0
 801f97c:	f000 8114 	beq.w	801fba8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801f980:	7871      	ldrb	r1, [r6, #1]
 801f982:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f986:	910e      	str	r1, [sp, #56]	; 0x38
 801f988:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801f98c:	2800      	cmp	r0, #0
 801f98e:	f000 8115 	beq.w	801fbbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801f992:	1931      	adds	r1, r6, r4
 801f994:	5d36      	ldrb	r6, [r6, r4]
 801f996:	7849      	ldrb	r1, [r1, #1]
 801f998:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801f99c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f9a0:	960a      	str	r6, [sp, #40]	; 0x28
 801f9a2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f9a6:	0e0e      	lsrs	r6, r1, #24
 801f9a8:	910f      	str	r1, [sp, #60]	; 0x3c
 801f9aa:	b292      	uxth	r2, r2
 801f9ac:	b280      	uxth	r0, r0
 801f9ae:	fb02 fb00 	mul.w	fp, r2, r0
 801f9b2:	0112      	lsls	r2, r2, #4
 801f9b4:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801f9b8:	eba2 090b 	sub.w	r9, r2, fp
 801f9bc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801f9c0:	b280      	uxth	r0, r0
 801f9c2:	fa1f f989 	uxth.w	r9, r9
 801f9c6:	1a09      	subs	r1, r1, r0
 801f9c8:	fb09 f20e 	mul.w	r2, r9, lr
 801f9cc:	b289      	uxth	r1, r1
 801f9ce:	fb01 2207 	mla	r2, r1, r7, r2
 801f9d2:	fb00 220a 	mla	r2, r0, sl, r2
 801f9d6:	fb0b 2206 	mla	r2, fp, r6, r2
 801f9da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f9de:	9213      	str	r2, [sp, #76]	; 0x4c
 801f9e0:	2a00      	cmp	r2, #0
 801f9e2:	f000 80d4 	beq.w	801fb8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801f9e6:	2fff      	cmp	r7, #255	; 0xff
 801f9e8:	d01a      	beq.n	801fa20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801f9ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f9ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f9f2:	fb07 fc0c 	mul.w	ip, r7, ip
 801f9f6:	435f      	muls	r7, r3
 801f9f8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f9fc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fa00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa04:	4463      	add	r3, ip
 801fa06:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801fa0a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801fa0e:	0a1b      	lsrs	r3, r3, #8
 801fa10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa18:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fa1c:	ea43 030c 	orr.w	r3, r3, ip
 801fa20:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fa24:	d01f      	beq.n	801fa66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801fa26:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fa28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fa2a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fa2e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fa32:	fb0e f707 	mul.w	r7, lr, r7
 801fa36:	fb0e fe0c 	mul.w	lr, lr, ip
 801fa3a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa46:	44bc      	add	ip, r7
 801fa48:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801fa4c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801fa50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa5c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fa60:	ea4c 020e 	orr.w	r2, ip, lr
 801fa64:	920e      	str	r2, [sp, #56]	; 0x38
 801fa66:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fa6a:	d01e      	beq.n	801faaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801fa6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa6e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fa72:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fa76:	fb0a fe0e 	mul.w	lr, sl, lr
 801fa7a:	fb0a fa07 	mul.w	sl, sl, r7
 801fa7e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fa82:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fa8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa92:	44f4      	add	ip, lr
 801fa94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa9c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801faa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801faa4:	ea4c 020a 	orr.w	r2, ip, sl
 801faa8:	920a      	str	r2, [sp, #40]	; 0x28
 801faaa:	2eff      	cmp	r6, #255	; 0xff
 801faac:	d01c      	beq.n	801fae8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801faae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fab0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fab4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fab8:	fb06 fe0e 	mul.w	lr, r6, lr
 801fabc:	437e      	muls	r6, r7
 801fabe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fac2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fac6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801faca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801face:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801fad2:	44f4      	add	ip, lr
 801fad4:	0a36      	lsrs	r6, r6, #8
 801fad6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fada:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fade:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fae2:	ea4c 0206 	orr.w	r2, ip, r6
 801fae6:	920f      	str	r2, [sp, #60]	; 0x3c
 801fae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801faea:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801faee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801faf2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801faf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801faf8:	fb09 f606 	mul.w	r6, r9, r6
 801fafc:	fb01 6607 	mla	r6, r1, r7, r6
 801fb00:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801fb04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fb06:	fb00 6607 	mla	r6, r0, r7, r6
 801fb0a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801fb0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fb10:	fb0b 6607 	mla	r6, fp, r7, r6
 801fb14:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fb18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb1a:	fb09 f907 	mul.w	r9, r9, r7
 801fb1e:	0a36      	lsrs	r6, r6, #8
 801fb20:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fb24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fb26:	fb01 9303 	mla	r3, r1, r3, r9
 801fb2a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb2e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801fb32:	fb00 330c 	mla	r3, r0, ip, r3
 801fb36:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801fb3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fb3c:	43da      	mvns	r2, r3
 801fb3e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801fb42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb46:	b2d2      	uxtb	r2, r2
 801fb48:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fb4c:	fb03 f102 	mul.w	r1, r3, r2
 801fb50:	ea46 060e 	orr.w	r6, r6, lr
 801fb54:	1c4b      	adds	r3, r1, #1
 801fb56:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fb5a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801fb5e:	f808 3c03 	strb.w	r3, [r8, #-3]
 801fb62:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801fb66:	4353      	muls	r3, r2
 801fb68:	1c59      	adds	r1, r3, #1
 801fb6a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fb6e:	0a33      	lsrs	r3, r6, #8
 801fb70:	0c36      	lsrs	r6, r6, #16
 801fb72:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fb76:	f808 3c02 	strb.w	r3, [r8, #-2]
 801fb7a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801fb7e:	435a      	muls	r2, r3
 801fb80:	1c53      	adds	r3, r2, #1
 801fb82:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fb86:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801fb8a:	f808 6c01 	strb.w	r6, [r8, #-1]
 801fb8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fb90:	f108 0803 	add.w	r8, r8, #3
 801fb94:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fb96:	4413      	add	r3, r2
 801fb98:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fb9a:	9329      	str	r3, [sp, #164]	; 0xa4
 801fb9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fb9e:	4413      	add	r3, r2
 801fba0:	932a      	str	r3, [sp, #168]	; 0xa8
 801fba2:	9b07      	ldr	r3, [sp, #28]
 801fba4:	3b01      	subs	r3, #1
 801fba6:	e508      	b.n	801f5ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801fba8:	b158      	cbz	r0, 801fbc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801fbaa:	5d31      	ldrb	r1, [r6, r4]
 801fbac:	26ff      	movs	r6, #255	; 0xff
 801fbae:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801fbb2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801fbb6:	910a      	str	r1, [sp, #40]	; 0x28
 801fbb8:	46b6      	mov	lr, r6
 801fbba:	e6f6      	b.n	801f9aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801fbbc:	26ff      	movs	r6, #255	; 0xff
 801fbbe:	46b2      	mov	sl, r6
 801fbc0:	e6f3      	b.n	801f9aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801fbc2:	26ff      	movs	r6, #255	; 0xff
 801fbc4:	46b2      	mov	sl, r6
 801fbc6:	e7f7      	b.n	801fbb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801fbc8:	b017      	add	sp, #92	; 0x5c
 801fbca:	ecbd 8b08 	vpop	{d8-d11}
 801fbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fbd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801fbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbd8:	b08d      	sub	sp, #52	; 0x34
 801fbda:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801fbde:	9103      	str	r1, [sp, #12]
 801fbe0:	fb07 5803 	mla	r8, r7, r3, r5
 801fbe4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801fbe8:	9803      	ldr	r0, [sp, #12]
 801fbea:	2f00      	cmp	r7, #0
 801fbec:	910b      	str	r1, [sp, #44]	; 0x2c
 801fbee:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fbf2:	9903      	ldr	r1, [sp, #12]
 801fbf4:	9c03      	ldr	r4, [sp, #12]
 801fbf6:	eb02 0608 	add.w	r6, r2, r8
 801fbfa:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fbfe:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801fc02:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801fc06:	7809      	ldrb	r1, [r1, #0]
 801fc08:	7840      	ldrb	r0, [r0, #1]
 801fc0a:	78a4      	ldrb	r4, [r4, #2]
 801fc0c:	db51      	blt.n	801fcb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801fc0e:	45be      	cmp	lr, r7
 801fc10:	dd4f      	ble.n	801fcb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801fc12:	2d00      	cmp	r5, #0
 801fc14:	db49      	blt.n	801fcaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801fc16:	42ab      	cmp	r3, r5
 801fc18:	dd47      	ble.n	801fcaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801fc1a:	f812 2008 	ldrb.w	r2, [r2, r8]
 801fc1e:	9204      	str	r2, [sp, #16]
 801fc20:	7872      	ldrb	r2, [r6, #1]
 801fc22:	9205      	str	r2, [sp, #20]
 801fc24:	78b2      	ldrb	r2, [r6, #2]
 801fc26:	9206      	str	r2, [sp, #24]
 801fc28:	1c6a      	adds	r2, r5, #1
 801fc2a:	d449      	bmi.n	801fcc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801fc2c:	4293      	cmp	r3, r2
 801fc2e:	dd47      	ble.n	801fcc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801fc30:	f1bc 0f00 	cmp.w	ip, #0
 801fc34:	d044      	beq.n	801fcc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801fc36:	7972      	ldrb	r2, [r6, #5]
 801fc38:	f896 b003 	ldrb.w	fp, [r6, #3]
 801fc3c:	f896 a004 	ldrb.w	sl, [r6, #4]
 801fc40:	9201      	str	r2, [sp, #4]
 801fc42:	3701      	adds	r7, #1
 801fc44:	d444      	bmi.n	801fcd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801fc46:	45be      	cmp	lr, r7
 801fc48:	dd42      	ble.n	801fcd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801fc4a:	f1b9 0f00 	cmp.w	r9, #0
 801fc4e:	f000 80c1 	beq.w	801fdd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801fc52:	2d00      	cmp	r5, #0
 801fc54:	db38      	blt.n	801fcc8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801fc56:	42ab      	cmp	r3, r5
 801fc58:	dd36      	ble.n	801fcc8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801fc5a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801fc5e:	f816 8002 	ldrb.w	r8, [r6, r2]
 801fc62:	2203      	movs	r2, #3
 801fc64:	fb03 6702 	mla	r7, r3, r2, r6
 801fc68:	fb03 6202 	mla	r2, r3, r2, r6
 801fc6c:	787f      	ldrb	r7, [r7, #1]
 801fc6e:	f892 e002 	ldrb.w	lr, [r2, #2]
 801fc72:	9702      	str	r7, [sp, #8]
 801fc74:	3501      	adds	r5, #1
 801fc76:	d432      	bmi.n	801fcde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801fc78:	42ab      	cmp	r3, r5
 801fc7a:	dd30      	ble.n	801fcde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801fc7c:	f1bc 0f00 	cmp.w	ip, #0
 801fc80:	d031      	beq.n	801fce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801fc82:	2703      	movs	r7, #3
 801fc84:	fb13 7207 	smlabb	r2, r3, r7, r7
 801fc88:	5cb5      	ldrb	r5, [r6, r2]
 801fc8a:	fb03 6207 	mla	r2, r3, r7, r6
 801fc8e:	fb03 6307 	mla	r3, r3, r7, r6
 801fc92:	7912      	ldrb	r2, [r2, #4]
 801fc94:	795e      	ldrb	r6, [r3, #5]
 801fc96:	f1bc 0f0f 	cmp.w	ip, #15
 801fc9a:	d927      	bls.n	801fcec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801fc9c:	4b53      	ldr	r3, [pc, #332]	; (801fdec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801fc9e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fca2:	4a53      	ldr	r2, [pc, #332]	; (801fdf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801fca4:	4853      	ldr	r0, [pc, #332]	; (801fdf4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801fca6:	f004 facf 	bl	8024248 <__assert_func>
 801fcaa:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801fcae:	9104      	str	r1, [sp, #16]
 801fcb0:	e7ba      	b.n	801fc28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801fcb2:	9401      	str	r4, [sp, #4]
 801fcb4:	4682      	mov	sl, r0
 801fcb6:	468b      	mov	fp, r1
 801fcb8:	9104      	str	r1, [sp, #16]
 801fcba:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801fcbe:	e7c0      	b.n	801fc42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801fcc0:	9401      	str	r4, [sp, #4]
 801fcc2:	4682      	mov	sl, r0
 801fcc4:	468b      	mov	fp, r1
 801fcc6:	e7bc      	b.n	801fc42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801fcc8:	46a6      	mov	lr, r4
 801fcca:	9002      	str	r0, [sp, #8]
 801fccc:	4688      	mov	r8, r1
 801fcce:	e7d1      	b.n	801fc74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801fcd0:	4626      	mov	r6, r4
 801fcd2:	4602      	mov	r2, r0
 801fcd4:	460d      	mov	r5, r1
 801fcd6:	46a6      	mov	lr, r4
 801fcd8:	9002      	str	r0, [sp, #8]
 801fcda:	4688      	mov	r8, r1
 801fcdc:	e7db      	b.n	801fc96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801fcde:	4626      	mov	r6, r4
 801fce0:	4602      	mov	r2, r0
 801fce2:	460d      	mov	r5, r1
 801fce4:	e7d7      	b.n	801fc96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801fce6:	4626      	mov	r6, r4
 801fce8:	4602      	mov	r2, r0
 801fcea:	460d      	mov	r5, r1
 801fcec:	f1b9 0f0f 	cmp.w	r9, #15
 801fcf0:	d8d4      	bhi.n	801fc9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801fcf2:	fa1f f38c 	uxth.w	r3, ip
 801fcf6:	fa1f fc89 	uxth.w	ip, r9
 801fcfa:	fb03 f70c 	mul.w	r7, r3, ip
 801fcfe:	011b      	lsls	r3, r3, #4
 801fd00:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801fd04:	9707      	str	r7, [sp, #28]
 801fd06:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801fd0a:	fa1f fc8c 	uxth.w	ip, ip
 801fd0e:	eba7 070c 	sub.w	r7, r7, ip
 801fd12:	b2bf      	uxth	r7, r7
 801fd14:	9709      	str	r7, [sp, #36]	; 0x24
 801fd16:	9f07      	ldr	r7, [sp, #28]
 801fd18:	1bdb      	subs	r3, r3, r7
 801fd1a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801fd1e:	b29b      	uxth	r3, r3
 801fd20:	9708      	str	r7, [sp, #32]
 801fd22:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fd24:	930a      	str	r3, [sp, #40]	; 0x28
 801fd26:	ea6f 0907 	mvn.w	r9, r7
 801fd2a:	fb03 fb0b 	mul.w	fp, r3, fp
 801fd2e:	9f04      	ldr	r7, [sp, #16]
 801fd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd32:	fa5f f989 	uxtb.w	r9, r9
 801fd36:	fb03 bb07 	mla	fp, r3, r7, fp
 801fd3a:	9f07      	ldr	r7, [sp, #28]
 801fd3c:	fb11 f109 	smulbb	r1, r1, r9
 801fd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd42:	fb0c b808 	mla	r8, ip, r8, fp
 801fd46:	fb10 f009 	smulbb	r0, r0, r9
 801fd4a:	fb14 f409 	smulbb	r4, r4, r9
 801fd4e:	fb07 8805 	mla	r8, r7, r5, r8
 801fd52:	9d08      	ldr	r5, [sp, #32]
 801fd54:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fd56:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fd5a:	fb08 1805 	mla	r8, r8, r5, r1
 801fd5e:	9d05      	ldr	r5, [sp, #20]
 801fd60:	fa1f f888 	uxth.w	r8, r8
 801fd64:	f108 0101 	add.w	r1, r8, #1
 801fd68:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801fd6c:	9903      	ldr	r1, [sp, #12]
 801fd6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd72:	f881 8000 	strb.w	r8, [r1]
 801fd76:	fb03 f10a 	mul.w	r1, r3, sl
 801fd7a:	fb07 1105 	mla	r1, r7, r5, r1
 801fd7e:	9d02      	ldr	r5, [sp, #8]
 801fd80:	fb0c 1105 	mla	r1, ip, r5, r1
 801fd84:	9d07      	ldr	r5, [sp, #28]
 801fd86:	fb05 1102 	mla	r1, r5, r2, r1
 801fd8a:	9a08      	ldr	r2, [sp, #32]
 801fd8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fd90:	fb01 0102 	mla	r1, r1, r2, r0
 801fd94:	9a03      	ldr	r2, [sp, #12]
 801fd96:	b289      	uxth	r1, r1
 801fd98:	1c48      	adds	r0, r1, #1
 801fd9a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801fd9e:	1209      	asrs	r1, r1, #8
 801fda0:	7051      	strb	r1, [r2, #1]
 801fda2:	9a01      	ldr	r2, [sp, #4]
 801fda4:	4353      	muls	r3, r2
 801fda6:	9a06      	ldr	r2, [sp, #24]
 801fda8:	fb07 3702 	mla	r7, r7, r2, r3
 801fdac:	9b08      	ldr	r3, [sp, #32]
 801fdae:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801fdb2:	fb05 c606 	mla	r6, r5, r6, ip
 801fdb6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fdba:	fb06 4603 	mla	r6, r6, r3, r4
 801fdbe:	9b03      	ldr	r3, [sp, #12]
 801fdc0:	b2b6      	uxth	r6, r6
 801fdc2:	f106 0e01 	add.w	lr, r6, #1
 801fdc6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801fdca:	1236      	asrs	r6, r6, #8
 801fdcc:	709e      	strb	r6, [r3, #2]
 801fdce:	b00d      	add	sp, #52	; 0x34
 801fdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdd4:	f1bc 0f0f 	cmp.w	ip, #15
 801fdd8:	f63f af60 	bhi.w	801fc9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801fddc:	4626      	mov	r6, r4
 801fdde:	4602      	mov	r2, r0
 801fde0:	460d      	mov	r5, r1
 801fde2:	46a6      	mov	lr, r4
 801fde4:	9002      	str	r0, [sp, #8]
 801fde6:	4688      	mov	r8, r1
 801fde8:	e783      	b.n	801fcf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801fdea:	bf00      	nop
 801fdec:	08028c47 	.word	0x08028c47
 801fdf0:	0802913e 	.word	0x0802913e
 801fdf4:	08028d10 	.word	0x08028d10

0801fdf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdfc:	ed2d 8b08 	vpush	{d8-d11}
 801fe00:	b0a1      	sub	sp, #132	; 0x84
 801fe02:	eeb0 aa40 	vmov.f32	s20, s0
 801fe06:	eef0 9a60 	vmov.f32	s19, s1
 801fe0a:	9307      	str	r3, [sp, #28]
 801fe0c:	eeb0 9a41 	vmov.f32	s18, s2
 801fe10:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801fe14:	eeb0 8a62 	vmov.f32	s16, s5
 801fe18:	9210      	str	r2, [sp, #64]	; 0x40
 801fe1a:	eef0 8a43 	vmov.f32	s17, s6
 801fe1e:	9308      	str	r3, [sp, #32]
 801fe20:	eef0 ba44 	vmov.f32	s23, s8
 801fe24:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801fe28:	eeb0 ba64 	vmov.f32	s22, s9
 801fe2c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801fe2e:	eef0 aa45 	vmov.f32	s21, s10
 801fe32:	930a      	str	r3, [sp, #40]	; 0x28
 801fe34:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801fe38:	901f      	str	r0, [sp, #124]	; 0x7c
 801fe3a:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe3c:	6850      	ldr	r0, [r2, #4]
 801fe3e:	910e      	str	r1, [sp, #56]	; 0x38
 801fe40:	6812      	ldr	r2, [r2, #0]
 801fe42:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801fe46:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801fe4a:	fb00 1303 	mla	r3, r0, r3, r1
 801fe4e:	9908      	ldr	r1, [sp, #32]
 801fe50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe54:	18d3      	adds	r3, r2, r3
 801fe56:	2203      	movs	r2, #3
 801fe58:	9309      	str	r3, [sp, #36]	; 0x24
 801fe5a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801fe5c:	681b      	ldr	r3, [r3, #0]
 801fe5e:	930c      	str	r3, [sp, #48]	; 0x30
 801fe60:	f06f 0304 	mvn.w	r3, #4
 801fe64:	fb11 3302 	smlabb	r3, r1, r2, r3
 801fe68:	930d      	str	r3, [sp, #52]	; 0x34
 801fe6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe6c:	43db      	mvns	r3, r3
 801fe6e:	b2db      	uxtb	r3, r3
 801fe70:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	dc03      	bgt.n	801fe80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801fe78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	f340 81df 	ble.w	802023e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801fe80:	9b07      	ldr	r3, [sp, #28]
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	f340 80f2 	ble.w	802006c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801fe88:	ea5f 4228 	movs.w	r2, r8, asr #16
 801fe8c:	ea4f 432b 	mov.w	r3, fp, asr #16
 801fe90:	d430      	bmi.n	801fef4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fe92:	1c51      	adds	r1, r2, #1
 801fe94:	9808      	ldr	r0, [sp, #32]
 801fe96:	4281      	cmp	r1, r0
 801fe98:	da2f      	bge.n	801fefa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	db2d      	blt.n	801fefa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801fe9e:	1c59      	adds	r1, r3, #1
 801fea0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fea2:	4288      	cmp	r0, r1
 801fea4:	dd29      	ble.n	801fefa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801fea6:	9b07      	ldr	r3, [sp, #28]
 801fea8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801feaa:	3b01      	subs	r3, #1
 801feac:	fb02 8203 	mla	r2, r2, r3, r8
 801feb0:	1412      	asrs	r2, r2, #16
 801feb2:	d42d      	bmi.n	801ff10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801feb4:	3201      	adds	r2, #1
 801feb6:	9908      	ldr	r1, [sp, #32]
 801feb8:	4291      	cmp	r1, r2
 801feba:	dd29      	ble.n	801ff10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801febc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801febe:	fb02 b303 	mla	r3, r2, r3, fp
 801fec2:	141b      	asrs	r3, r3, #16
 801fec4:	d424      	bmi.n	801ff10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801fec6:	3301      	adds	r3, #1
 801fec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801feca:	429a      	cmp	r2, r3
 801fecc:	dd20      	ble.n	801ff10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801fece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fed0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801fed4:	1cde      	adds	r6, r3, #3
 801fed6:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801feda:	f1bc 0f00 	cmp.w	ip, #0
 801fede:	f300 811f 	bgt.w	8020120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801fee2:	9b07      	ldr	r3, [sp, #28]
 801fee4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801feee:	4423      	add	r3, r4
 801fef0:	9309      	str	r3, [sp, #36]	; 0x24
 801fef2:	e0bd      	b.n	8020070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fef4:	1c57      	adds	r7, r2, #1
 801fef6:	f040 80ae 	bne.w	8020056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801fefa:	9908      	ldr	r1, [sp, #32]
 801fefc:	428a      	cmp	r2, r1
 801fefe:	f280 80aa 	bge.w	8020056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801ff02:	1c5e      	adds	r6, r3, #1
 801ff04:	f2c0 80a7 	blt.w	8020056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801ff08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ff0a:	4293      	cmp	r3, r2
 801ff0c:	f280 80a3 	bge.w	8020056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801ff10:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ff14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ff16:	f1ba 0f00 	cmp.w	sl, #0
 801ff1a:	dde2      	ble.n	801fee2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801ff1c:	ea5f 4028 	movs.w	r0, r8, asr #16
 801ff20:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801ff24:	ea4f 412b 	mov.w	r1, fp, asr #16
 801ff28:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801ff2c:	f100 80df 	bmi.w	80200ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801ff30:	1c45      	adds	r5, r0, #1
 801ff32:	9f08      	ldr	r7, [sp, #32]
 801ff34:	42af      	cmp	r7, r5
 801ff36:	f340 80dc 	ble.w	80200f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ff3a:	2900      	cmp	r1, #0
 801ff3c:	f2c0 80d9 	blt.w	80200f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ff40:	1c4d      	adds	r5, r1, #1
 801ff42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ff44:	42af      	cmp	r7, r5
 801ff46:	f340 80d4 	ble.w	80200f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ff4a:	9d08      	ldr	r5, [sp, #32]
 801ff4c:	fb05 0101 	mla	r1, r5, r1, r0
 801ff50:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ff52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ff56:	1845      	adds	r5, r0, r1
 801ff58:	5c40      	ldrb	r0, [r0, r1]
 801ff5a:	792f      	ldrb	r7, [r5, #4]
 801ff5c:	7869      	ldrb	r1, [r5, #1]
 801ff5e:	9711      	str	r7, [sp, #68]	; 0x44
 801ff60:	796f      	ldrb	r7, [r5, #5]
 801ff62:	f895 e002 	ldrb.w	lr, [r5, #2]
 801ff66:	f895 9003 	ldrb.w	r9, [r5, #3]
 801ff6a:	9712      	str	r7, [sp, #72]	; 0x48
 801ff6c:	b17a      	cbz	r2, 801ff8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801ff6e:	3505      	adds	r5, #5
 801ff70:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ff74:	19ef      	adds	r7, r5, r7
 801ff76:	5d2d      	ldrb	r5, [r5, r4]
 801ff78:	787c      	ldrb	r4, [r7, #1]
 801ff7a:	9513      	str	r5, [sp, #76]	; 0x4c
 801ff7c:	9415      	str	r4, [sp, #84]	; 0x54
 801ff7e:	78bc      	ldrb	r4, [r7, #2]
 801ff80:	9417      	str	r4, [sp, #92]	; 0x5c
 801ff82:	78fc      	ldrb	r4, [r7, #3]
 801ff84:	9414      	str	r4, [sp, #80]	; 0x50
 801ff86:	793c      	ldrb	r4, [r7, #4]
 801ff88:	9416      	str	r4, [sp, #88]	; 0x58
 801ff8a:	797c      	ldrb	r4, [r7, #5]
 801ff8c:	9418      	str	r4, [sp, #96]	; 0x60
 801ff8e:	b29b      	uxth	r3, r3
 801ff90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ff92:	b292      	uxth	r2, r2
 801ff94:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801ff98:	fb03 f702 	mul.w	r7, r3, r2
 801ff9c:	011b      	lsls	r3, r3, #4
 801ff9e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801ffa2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ffa6:	1bdb      	subs	r3, r3, r7
 801ffa8:	b292      	uxth	r2, r2
 801ffaa:	b29b      	uxth	r3, r3
 801ffac:	ebac 0c02 	sub.w	ip, ip, r2
 801ffb0:	fb03 f909 	mul.w	r9, r3, r9
 801ffb4:	fa1f fc8c 	uxth.w	ip, ip
 801ffb8:	fb0c 9000 	mla	r0, ip, r0, r9
 801ffbc:	f896 9000 	ldrb.w	r9, [r6]
 801ffc0:	fb02 0004 	mla	r0, r2, r4, r0
 801ffc4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ffc6:	fb07 0004 	mla	r0, r7, r4, r0
 801ffca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ffcc:	fb19 f904 	smulbb	r9, r9, r4
 801ffd0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ffd4:	fb00 9005 	mla	r0, r0, r5, r9
 801ffd8:	b280      	uxth	r0, r0
 801ffda:	f100 0901 	add.w	r9, r0, #1
 801ffde:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801ffe2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ffe4:	4358      	muls	r0, r3
 801ffe6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ffea:	fb0c 0101 	mla	r1, ip, r1, r0
 801ffee:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fff0:	f886 9000 	strb.w	r9, [r6]
 801fff4:	fb02 1100 	mla	r1, r2, r0, r1
 801fff8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fffa:	fb07 1100 	mla	r1, r7, r0, r1
 801fffe:	7870      	ldrb	r0, [r6, #1]
 8020000:	fb10 f004 	smulbb	r0, r0, r4
 8020004:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020008:	fb01 0105 	mla	r1, r1, r5, r0
 802000c:	b289      	uxth	r1, r1
 802000e:	1c48      	adds	r0, r1, #1
 8020010:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020014:	1209      	asrs	r1, r1, #8
 8020016:	7071      	strb	r1, [r6, #1]
 8020018:	9912      	ldr	r1, [sp, #72]	; 0x48
 802001a:	434b      	muls	r3, r1
 802001c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802001e:	fb0c 330e 	mla	r3, ip, lr, r3
 8020022:	fb02 3201 	mla	r2, r2, r1, r3
 8020026:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020028:	fb07 2703 	mla	r7, r7, r3, r2
 802002c:	78b2      	ldrb	r2, [r6, #2]
 802002e:	fb12 f204 	smulbb	r2, r2, r4
 8020032:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020036:	fb07 2505 	mla	r5, r7, r5, r2
 802003a:	b2ad      	uxth	r5, r5
 802003c:	1c6f      	adds	r7, r5, #1
 802003e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020042:	122d      	asrs	r5, r5, #8
 8020044:	70b5      	strb	r5, [r6, #2]
 8020046:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020048:	3603      	adds	r6, #3
 802004a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802004e:	4498      	add	r8, r3
 8020050:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020052:	449b      	add	fp, r3
 8020054:	e75f      	b.n	801ff16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8020056:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020058:	4498      	add	r8, r3
 802005a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802005c:	449b      	add	fp, r3
 802005e:	9b07      	ldr	r3, [sp, #28]
 8020060:	3b01      	subs	r3, #1
 8020062:	9307      	str	r3, [sp, #28]
 8020064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020066:	3303      	adds	r3, #3
 8020068:	9309      	str	r3, [sp, #36]	; 0x24
 802006a:	e709      	b.n	801fe80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802006c:	f47f af1b 	bne.w	801fea6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020072:	2b00      	cmp	r3, #0
 8020074:	f340 80e3 	ble.w	802023e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802007c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802007e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020082:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020086:	eef0 6a48 	vmov.f32	s13, s16
 802008a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802008e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020092:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020096:	ee16 8a90 	vmov	r8, s13
 802009a:	eef0 6a68 	vmov.f32	s13, s17
 802009e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200a2:	ee16 ba90 	vmov	fp, s13
 80200a6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80200aa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80200ae:	ee37 8a48 	vsub.f32	s16, s14, s16
 80200b2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80200b6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80200ba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80200be:	ee18 2a10 	vmov	r2, s16
 80200c2:	eeb0 8a47 	vmov.f32	s16, s14
 80200c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80200ca:	ee18 2a90 	vmov	r2, s17
 80200ce:	9335      	str	r3, [sp, #212]	; 0xd4
 80200d0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80200d2:	eef0 8a67 	vmov.f32	s17, s15
 80200d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80200da:	9336      	str	r3, [sp, #216]	; 0xd8
 80200dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80200e0:	3b01      	subs	r3, #1
 80200e2:	930e      	str	r3, [sp, #56]	; 0x38
 80200e4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80200e6:	bf08      	it	eq
 80200e8:	4613      	moveq	r3, r2
 80200ea:	9307      	str	r3, [sp, #28]
 80200ec:	e6c1      	b.n	801fe72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80200ee:	1c45      	adds	r5, r0, #1
 80200f0:	d1a9      	bne.n	8020046 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80200f2:	9c08      	ldr	r4, [sp, #32]
 80200f4:	42a0      	cmp	r0, r4
 80200f6:	daa6      	bge.n	8020046 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80200f8:	1c4c      	adds	r4, r1, #1
 80200fa:	dba4      	blt.n	8020046 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80200fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80200fe:	428c      	cmp	r4, r1
 8020100:	dda1      	ble.n	8020046 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020102:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020104:	9001      	str	r0, [sp, #4]
 8020106:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020108:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802010c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802010e:	4631      	mov	r1, r6
 8020110:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8020114:	9300      	str	r3, [sp, #0]
 8020116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020118:	9b08      	ldr	r3, [sp, #32]
 802011a:	f7ff fd5b 	bl	801fbd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802011e:	e792      	b.n	8020046 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020120:	ea4f 4228 	mov.w	r2, r8, asr #16
 8020124:	9c08      	ldr	r4, [sp, #32]
 8020126:	ea4f 402b 	mov.w	r0, fp, asr #16
 802012a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 802012e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020132:	fb04 2000 	mla	r0, r4, r0, r2
 8020136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020138:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802013a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802013e:	4402      	add	r2, r0
 8020140:	5c25      	ldrb	r5, [r4, r0]
 8020142:	7894      	ldrb	r4, [r2, #2]
 8020144:	7850      	ldrb	r0, [r2, #1]
 8020146:	9411      	str	r4, [sp, #68]	; 0x44
 8020148:	7954      	ldrb	r4, [r2, #5]
 802014a:	f892 a003 	ldrb.w	sl, [r2, #3]
 802014e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8020152:	9412      	str	r4, [sp, #72]	; 0x48
 8020154:	b171      	cbz	r1, 8020174 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020156:	3205      	adds	r2, #5
 8020158:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802015a:	1917      	adds	r7, r2, r4
 802015c:	5d12      	ldrb	r2, [r2, r4]
 802015e:	9219      	str	r2, [sp, #100]	; 0x64
 8020160:	787a      	ldrb	r2, [r7, #1]
 8020162:	921b      	str	r2, [sp, #108]	; 0x6c
 8020164:	78ba      	ldrb	r2, [r7, #2]
 8020166:	921d      	str	r2, [sp, #116]	; 0x74
 8020168:	78fa      	ldrb	r2, [r7, #3]
 802016a:	921a      	str	r2, [sp, #104]	; 0x68
 802016c:	793a      	ldrb	r2, [r7, #4]
 802016e:	921c      	str	r2, [sp, #112]	; 0x70
 8020170:	797a      	ldrb	r2, [r7, #5]
 8020172:	921e      	str	r2, [sp, #120]	; 0x78
 8020174:	b29b      	uxth	r3, r3
 8020176:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8020178:	b289      	uxth	r1, r1
 802017a:	3603      	adds	r6, #3
 802017c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020180:	fb03 f201 	mul.w	r2, r3, r1
 8020184:	011b      	lsls	r3, r3, #4
 8020186:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802018a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802018e:	1a9b      	subs	r3, r3, r2
 8020190:	b289      	uxth	r1, r1
 8020192:	b29b      	uxth	r3, r3
 8020194:	1a7f      	subs	r7, r7, r1
 8020196:	fb03 fa0a 	mul.w	sl, r3, sl
 802019a:	b2bf      	uxth	r7, r7
 802019c:	fb03 f909 	mul.w	r9, r3, r9
 80201a0:	fb07 a505 	mla	r5, r7, r5, sl
 80201a4:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 80201a8:	fb07 9000 	mla	r0, r7, r0, r9
 80201ac:	fb01 5504 	mla	r5, r1, r4, r5
 80201b0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80201b2:	fb02 5504 	mla	r5, r2, r4, r5
 80201b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80201b8:	fb1a fa04 	smulbb	sl, sl, r4
 80201bc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80201c0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80201c2:	fb05 a50e 	mla	r5, r5, lr, sl
 80201c6:	fb01 0004 	mla	r0, r1, r4, r0
 80201ca:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80201cc:	b2ad      	uxth	r5, r5
 80201ce:	fb02 0004 	mla	r0, r2, r4, r0
 80201d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80201d4:	f105 0a01 	add.w	sl, r5, #1
 80201d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80201dc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80201e0:	122d      	asrs	r5, r5, #8
 80201e2:	f806 5c06 	strb.w	r5, [r6, #-6]
 80201e6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 80201ea:	fb15 f504 	smulbb	r5, r5, r4
 80201ee:	fb00 500e 	mla	r0, r0, lr, r5
 80201f2:	b280      	uxth	r0, r0
 80201f4:	1c45      	adds	r5, r0, #1
 80201f6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80201fa:	1200      	asrs	r0, r0, #8
 80201fc:	f806 0c05 	strb.w	r0, [r6, #-5]
 8020200:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020202:	4343      	muls	r3, r0
 8020204:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020206:	fb07 3300 	mla	r3, r7, r0, r3
 802020a:	981d      	ldr	r0, [sp, #116]	; 0x74
 802020c:	fb01 3100 	mla	r1, r1, r0, r3
 8020210:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020212:	fb02 1203 	mla	r2, r2, r3, r1
 8020216:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 802021a:	fb11 f104 	smulbb	r1, r1, r4
 802021e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020222:	fb02 120e 	mla	r2, r2, lr, r1
 8020226:	b292      	uxth	r2, r2
 8020228:	1c53      	adds	r3, r2, #1
 802022a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802022e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020230:	1212      	asrs	r2, r2, #8
 8020232:	4498      	add	r8, r3
 8020234:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020236:	f806 2c04 	strb.w	r2, [r6, #-4]
 802023a:	449b      	add	fp, r3
 802023c:	e64d      	b.n	801feda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802023e:	b021      	add	sp, #132	; 0x84
 8020240:	ecbd 8b08 	vpop	{d8-d11}
 8020244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020248 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802024c:	b085      	sub	sp, #20
 802024e:	784d      	ldrb	r5, [r1, #1]
 8020250:	788e      	ldrb	r6, [r1, #2]
 8020252:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020256:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 802025a:	9403      	str	r4, [sp, #12]
 802025c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020260:	780c      	ldrb	r4, [r1, #0]
 8020262:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020266:	fb07 ce03 	mla	lr, r7, r3, ip
 802026a:	2f00      	cmp	r7, #0
 802026c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020270:	eb02 0b0e 	add.w	fp, r2, lr
 8020274:	db56      	blt.n	8020324 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020276:	45b9      	cmp	r9, r7
 8020278:	dd54      	ble.n	8020324 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802027a:	f1bc 0f00 	cmp.w	ip, #0
 802027e:	db4d      	blt.n	802031c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020280:	4563      	cmp	r3, ip
 8020282:	dd4b      	ble.n	802031c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020284:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020288:	9200      	str	r2, [sp, #0]
 802028a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802028e:	9201      	str	r2, [sp, #4]
 8020290:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020294:	9202      	str	r2, [sp, #8]
 8020296:	f11c 0201 	adds.w	r2, ip, #1
 802029a:	d44a      	bmi.n	8020332 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802029c:	4293      	cmp	r3, r2
 802029e:	dd48      	ble.n	8020332 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80202a0:	2800      	cmp	r0, #0
 80202a2:	d046      	beq.n	8020332 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80202a4:	f89b e003 	ldrb.w	lr, [fp, #3]
 80202a8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80202ac:	f89b a005 	ldrb.w	sl, [fp, #5]
 80202b0:	3701      	adds	r7, #1
 80202b2:	d446      	bmi.n	8020342 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80202b4:	45b9      	cmp	r9, r7
 80202b6:	dd44      	ble.n	8020342 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80202b8:	9a03      	ldr	r2, [sp, #12]
 80202ba:	2a00      	cmp	r2, #0
 80202bc:	d045      	beq.n	802034a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80202be:	f1bc 0f00 	cmp.w	ip, #0
 80202c2:	db3a      	blt.n	802033a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80202c4:	4563      	cmp	r3, ip
 80202c6:	dd38      	ble.n	802033a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80202c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80202cc:	f04f 0903 	mov.w	r9, #3
 80202d0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80202d4:	fb03 b209 	mla	r2, r3, r9, fp
 80202d8:	fb03 b909 	mla	r9, r3, r9, fp
 80202dc:	7852      	ldrb	r2, [r2, #1]
 80202de:	f899 9002 	ldrb.w	r9, [r9, #2]
 80202e2:	f11c 0c01 	adds.w	ip, ip, #1
 80202e6:	d40d      	bmi.n	8020304 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80202e8:	4563      	cmp	r3, ip
 80202ea:	dd0b      	ble.n	8020304 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80202ec:	b160      	cbz	r0, 8020308 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80202ee:	2603      	movs	r6, #3
 80202f0:	fb13 6406 	smlabb	r4, r3, r6, r6
 80202f4:	fb03 b506 	mla	r5, r3, r6, fp
 80202f8:	fb03 b306 	mla	r3, r3, r6, fp
 80202fc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020300:	792d      	ldrb	r5, [r5, #4]
 8020302:	795e      	ldrb	r6, [r3, #5]
 8020304:	280f      	cmp	r0, #15
 8020306:	d802      	bhi.n	802030e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020308:	9b03      	ldr	r3, [sp, #12]
 802030a:	2b0f      	cmp	r3, #15
 802030c:	d922      	bls.n	8020354 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802030e:	4b2f      	ldr	r3, [pc, #188]	; (80203cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020310:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020314:	4a2e      	ldr	r2, [pc, #184]	; (80203d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020316:	482f      	ldr	r0, [pc, #188]	; (80203d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020318:	f003 ff96 	bl	8024248 <__assert_func>
 802031c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020320:	9400      	str	r4, [sp, #0]
 8020322:	e7b8      	b.n	8020296 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020324:	46b2      	mov	sl, r6
 8020326:	46a8      	mov	r8, r5
 8020328:	46a6      	mov	lr, r4
 802032a:	9400      	str	r4, [sp, #0]
 802032c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020330:	e7be      	b.n	80202b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020332:	46b2      	mov	sl, r6
 8020334:	46a8      	mov	r8, r5
 8020336:	46a6      	mov	lr, r4
 8020338:	e7ba      	b.n	80202b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802033a:	46b1      	mov	r9, r6
 802033c:	462a      	mov	r2, r5
 802033e:	4627      	mov	r7, r4
 8020340:	e7cf      	b.n	80202e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020342:	46b1      	mov	r9, r6
 8020344:	462a      	mov	r2, r5
 8020346:	4627      	mov	r7, r4
 8020348:	e7dc      	b.n	8020304 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802034a:	280f      	cmp	r0, #15
 802034c:	d8df      	bhi.n	802030e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802034e:	46b1      	mov	r9, r6
 8020350:	462a      	mov	r2, r5
 8020352:	4627      	mov	r7, r4
 8020354:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020358:	b280      	uxth	r0, r0
 802035a:	fb00 f30b 	mul.w	r3, r0, fp
 802035e:	0100      	lsls	r0, r0, #4
 8020360:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020364:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020368:	1ac0      	subs	r0, r0, r3
 802036a:	fa1f fb8b 	uxth.w	fp, fp
 802036e:	b280      	uxth	r0, r0
 8020370:	ebac 0c0b 	sub.w	ip, ip, fp
 8020374:	9003      	str	r0, [sp, #12]
 8020376:	fa1f fc8c 	uxth.w	ip, ip
 802037a:	fb00 fe0e 	mul.w	lr, r0, lr
 802037e:	9800      	ldr	r0, [sp, #0]
 8020380:	fb0c ee00 	mla	lr, ip, r0, lr
 8020384:	9803      	ldr	r0, [sp, #12]
 8020386:	fb00 f808 	mul.w	r8, r0, r8
 802038a:	9801      	ldr	r0, [sp, #4]
 802038c:	fb0b ee07 	mla	lr, fp, r7, lr
 8020390:	fb0c 8800 	mla	r8, ip, r0, r8
 8020394:	fb03 ee04 	mla	lr, r3, r4, lr
 8020398:	fb0b 8202 	mla	r2, fp, r2, r8
 802039c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80203a0:	fb03 2505 	mla	r5, r3, r5, r2
 80203a4:	9a03      	ldr	r2, [sp, #12]
 80203a6:	f881 e000 	strb.w	lr, [r1]
 80203aa:	fb02 f00a 	mul.w	r0, r2, sl
 80203ae:	9a02      	ldr	r2, [sp, #8]
 80203b0:	122d      	asrs	r5, r5, #8
 80203b2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80203b6:	704d      	strb	r5, [r1, #1]
 80203b8:	fb0b c909 	mla	r9, fp, r9, ip
 80203bc:	fb03 9606 	mla	r6, r3, r6, r9
 80203c0:	1236      	asrs	r6, r6, #8
 80203c2:	708e      	strb	r6, [r1, #2]
 80203c4:	b005      	add	sp, #20
 80203c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203ca:	bf00      	nop
 80203cc:	08028c47 	.word	0x08028c47
 80203d0:	0802913e 	.word	0x0802913e
 80203d4:	08028d10 	.word	0x08028d10

080203d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80203d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203dc:	ed2d 8b0a 	vpush	{d8-d12}
 80203e0:	b09d      	sub	sp, #116	; 0x74
 80203e2:	eeb0 aa40 	vmov.f32	s20, s0
 80203e6:	eef0 9a60 	vmov.f32	s19, s1
 80203ea:	9306      	str	r3, [sp, #24]
 80203ec:	eeb0 9a41 	vmov.f32	s18, s2
 80203f0:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80203f4:	eeb0 8a62 	vmov.f32	s16, s5
 80203f8:	901b      	str	r0, [sp, #108]	; 0x6c
 80203fa:	eef0 8a43 	vmov.f32	s17, s6
 80203fe:	9307      	str	r3, [sp, #28]
 8020400:	eeb0 ca44 	vmov.f32	s24, s8
 8020404:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8020408:	eef0 ba64 	vmov.f32	s23, s9
 802040c:	eeb0 ba45 	vmov.f32	s22, s10
 8020410:	9309      	str	r3, [sp, #36]	; 0x24
 8020412:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020416:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802041a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802041c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020420:	6850      	ldr	r0, [r2, #4]
 8020422:	6812      	ldr	r2, [r2, #0]
 8020424:	fb00 1303 	mla	r3, r0, r3, r1
 8020428:	9907      	ldr	r1, [sp, #28]
 802042a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802042e:	18d3      	adds	r3, r2, r3
 8020430:	2203      	movs	r2, #3
 8020432:	9308      	str	r3, [sp, #32]
 8020434:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	930a      	str	r3, [sp, #40]	; 0x28
 802043a:	f06f 0304 	mvn.w	r3, #4
 802043e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020442:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020446:	930b      	str	r3, [sp, #44]	; 0x2c
 8020448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802044a:	2b00      	cmp	r3, #0
 802044c:	dc03      	bgt.n	8020456 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802044e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020450:	2b00      	cmp	r3, #0
 8020452:	f340 8193 	ble.w	802077c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020456:	9b06      	ldr	r3, [sp, #24]
 8020458:	2b00      	cmp	r3, #0
 802045a:	f340 80d0 	ble.w	80205fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 802045e:	1432      	asrs	r2, r6, #16
 8020460:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020464:	d42f      	bmi.n	80204c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8020466:	1c51      	adds	r1, r2, #1
 8020468:	9807      	ldr	r0, [sp, #28]
 802046a:	4281      	cmp	r1, r0
 802046c:	da2e      	bge.n	80204cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802046e:	2b00      	cmp	r3, #0
 8020470:	db2c      	blt.n	80204cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020472:	1c59      	adds	r1, r3, #1
 8020474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020476:	4288      	cmp	r0, r1
 8020478:	dd28      	ble.n	80204cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802047a:	9b06      	ldr	r3, [sp, #24]
 802047c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802047e:	3b01      	subs	r3, #1
 8020480:	fb02 6203 	mla	r2, r2, r3, r6
 8020484:	1412      	asrs	r2, r2, #16
 8020486:	d42c      	bmi.n	80204e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020488:	3201      	adds	r2, #1
 802048a:	9907      	ldr	r1, [sp, #28]
 802048c:	4291      	cmp	r1, r2
 802048e:	dd28      	ble.n	80204e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020490:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020492:	fb02 5303 	mla	r3, r2, r3, r5
 8020496:	141b      	asrs	r3, r3, #16
 8020498:	d423      	bmi.n	80204e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802049a:	3301      	adds	r3, #1
 802049c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802049e:	429a      	cmp	r2, r3
 80204a0:	dd1f      	ble.n	80204e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80204a2:	9b08      	ldr	r3, [sp, #32]
 80204a4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80204a8:	f103 0c03 	add.w	ip, r3, #3
 80204ac:	f1be 0f00 	cmp.w	lr, #0
 80204b0:	f300 80fa 	bgt.w	80206a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80204b4:	9b06      	ldr	r3, [sp, #24]
 80204b6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80204ba:	9b08      	ldr	r3, [sp, #32]
 80204bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80204c0:	4423      	add	r3, r4
 80204c2:	9308      	str	r3, [sp, #32]
 80204c4:	e09d      	b.n	8020602 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80204c6:	1c51      	adds	r1, r2, #1
 80204c8:	f040 808e 	bne.w	80205e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80204cc:	9907      	ldr	r1, [sp, #28]
 80204ce:	428a      	cmp	r2, r1
 80204d0:	f280 808a 	bge.w	80205e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80204d4:	1c5f      	adds	r7, r3, #1
 80204d6:	f2c0 8087 	blt.w	80205e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80204da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80204dc:	4293      	cmp	r3, r2
 80204de:	f280 8083 	bge.w	80205e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80204e2:	9f06      	ldr	r7, [sp, #24]
 80204e4:	f8dd a020 	ldr.w	sl, [sp, #32]
 80204e8:	2f00      	cmp	r7, #0
 80204ea:	dde3      	ble.n	80204b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80204ec:	1432      	asrs	r2, r6, #16
 80204ee:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80204f2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80204f6:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80204fa:	f100 80bf 	bmi.w	802067c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80204fe:	1c50      	adds	r0, r2, #1
 8020500:	9c07      	ldr	r4, [sp, #28]
 8020502:	4284      	cmp	r4, r0
 8020504:	f340 80bc 	ble.w	8020680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020508:	2b00      	cmp	r3, #0
 802050a:	f2c0 80b9 	blt.w	8020680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802050e:	1c58      	adds	r0, r3, #1
 8020510:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020512:	4284      	cmp	r4, r0
 8020514:	f340 80b4 	ble.w	8020680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020518:	9807      	ldr	r0, [sp, #28]
 802051a:	fb00 2303 	mla	r3, r0, r3, r2
 802051e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020520:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020526:	441a      	add	r2, r3
 8020528:	f810 c003 	ldrb.w	ip, [r0, r3]
 802052c:	7953      	ldrb	r3, [r2, #5]
 802052e:	7850      	ldrb	r0, [r2, #1]
 8020530:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020534:	f892 9003 	ldrb.w	r9, [r2, #3]
 8020538:	f892 8004 	ldrb.w	r8, [r2, #4]
 802053c:	930e      	str	r3, [sp, #56]	; 0x38
 802053e:	f1bb 0f00 	cmp.w	fp, #0
 8020542:	d00f      	beq.n	8020564 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020544:	3205      	adds	r2, #5
 8020546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020548:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802054a:	18d3      	adds	r3, r2, r3
 802054c:	5d12      	ldrb	r2, [r2, r4]
 802054e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020550:	785a      	ldrb	r2, [r3, #1]
 8020552:	9211      	str	r2, [sp, #68]	; 0x44
 8020554:	789a      	ldrb	r2, [r3, #2]
 8020556:	9213      	str	r2, [sp, #76]	; 0x4c
 8020558:	78da      	ldrb	r2, [r3, #3]
 802055a:	9210      	str	r2, [sp, #64]	; 0x40
 802055c:	791a      	ldrb	r2, [r3, #4]
 802055e:	795b      	ldrb	r3, [r3, #5]
 8020560:	9212      	str	r2, [sp, #72]	; 0x48
 8020562:	9314      	str	r3, [sp, #80]	; 0x50
 8020564:	b28b      	uxth	r3, r1
 8020566:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020568:	fa1f f28b 	uxth.w	r2, fp
 802056c:	fb03 fb02 	mul.w	fp, r3, r2
 8020570:	011b      	lsls	r3, r3, #4
 8020572:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020576:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802057a:	eba3 030b 	sub.w	r3, r3, fp
 802057e:	b292      	uxth	r2, r2
 8020580:	b29b      	uxth	r3, r3
 8020582:	1a89      	subs	r1, r1, r2
 8020584:	fb03 f808 	mul.w	r8, r3, r8
 8020588:	b289      	uxth	r1, r1
 802058a:	fb03 f909 	mul.w	r9, r3, r9
 802058e:	fb01 8800 	mla	r8, r1, r0, r8
 8020592:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020594:	fb01 990c 	mla	r9, r1, ip, r9
 8020598:	fb02 8800 	mla	r8, r2, r0, r8
 802059c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802059e:	fb02 9904 	mla	r9, r2, r4, r9
 80205a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80205a4:	fb0b 8800 	mla	r8, fp, r0, r8
 80205a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80205aa:	fb0b 9904 	mla	r9, fp, r4, r9
 80205ae:	4343      	muls	r3, r0
 80205b0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80205b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205b8:	fb01 330e 	mla	r3, r1, lr, r3
 80205bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80205be:	f88a 9000 	strb.w	r9, [sl]
 80205c2:	fb02 3201 	mla	r2, r2, r1, r3
 80205c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80205c8:	f88a 8001 	strb.w	r8, [sl, #1]
 80205cc:	fb0b 2b03 	mla	fp, fp, r3, r2
 80205d0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80205d4:	f88a b002 	strb.w	fp, [sl, #2]
 80205d8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80205da:	f10a 0a03 	add.w	sl, sl, #3
 80205de:	3f01      	subs	r7, #1
 80205e0:	441e      	add	r6, r3
 80205e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80205e4:	441d      	add	r5, r3
 80205e6:	e77f      	b.n	80204e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80205e8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80205ea:	441e      	add	r6, r3
 80205ec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80205ee:	441d      	add	r5, r3
 80205f0:	9b06      	ldr	r3, [sp, #24]
 80205f2:	3b01      	subs	r3, #1
 80205f4:	9306      	str	r3, [sp, #24]
 80205f6:	9b08      	ldr	r3, [sp, #32]
 80205f8:	3303      	adds	r3, #3
 80205fa:	9308      	str	r3, [sp, #32]
 80205fc:	e72b      	b.n	8020456 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80205fe:	f47f af3c 	bne.w	802047a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8020602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020604:	2b00      	cmp	r3, #0
 8020606:	f340 80b9 	ble.w	802077c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802060a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802060e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020610:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020614:	eef0 6a48 	vmov.f32	s13, s16
 8020618:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802061c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020620:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020624:	ee16 6a90 	vmov	r6, s13
 8020628:	eef0 6a68 	vmov.f32	s13, s17
 802062c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020630:	ee16 5a90 	vmov	r5, s13
 8020634:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020638:	ee69 7a27 	vmul.f32	s15, s18, s15
 802063c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020640:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020644:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020648:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802064c:	ee18 2a10 	vmov	r2, s16
 8020650:	eeb0 8a47 	vmov.f32	s16, s14
 8020654:	fb92 f3f3 	sdiv	r3, r2, r3
 8020658:	ee18 2a90 	vmov	r2, s17
 802065c:	9333      	str	r3, [sp, #204]	; 0xcc
 802065e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020660:	eef0 8a67 	vmov.f32	s17, s15
 8020664:	fb92 f3f3 	sdiv	r3, r2, r3
 8020668:	9334      	str	r3, [sp, #208]	; 0xd0
 802066a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802066c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802066e:	3b01      	subs	r3, #1
 8020670:	930c      	str	r3, [sp, #48]	; 0x30
 8020672:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020674:	bf08      	it	eq
 8020676:	4613      	moveq	r3, r2
 8020678:	9306      	str	r3, [sp, #24]
 802067a:	e6e5      	b.n	8020448 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802067c:	1c54      	adds	r4, r2, #1
 802067e:	d1ab      	bne.n	80205d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020680:	9807      	ldr	r0, [sp, #28]
 8020682:	4282      	cmp	r2, r0
 8020684:	daa8      	bge.n	80205d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020686:	1c58      	adds	r0, r3, #1
 8020688:	dba6      	blt.n	80205d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802068a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802068c:	4298      	cmp	r0, r3
 802068e:	dda3      	ble.n	80205d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020690:	9000      	str	r0, [sp, #0]
 8020692:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020694:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8020698:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 802069c:	9b07      	ldr	r3, [sp, #28]
 802069e:	4651      	mov	r1, sl
 80206a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206a2:	f7ff fdd1 	bl	8020248 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80206a6:	e797      	b.n	80205d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80206a8:	1431      	asrs	r1, r6, #16
 80206aa:	9c07      	ldr	r4, [sp, #28]
 80206ac:	1428      	asrs	r0, r5, #16
 80206ae:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80206b2:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80206b6:	fb04 1000 	mla	r0, r4, r0, r1
 80206ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80206bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80206be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80206c2:	4401      	add	r1, r0
 80206c4:	5c20      	ldrb	r0, [r4, r0]
 80206c6:	f891 8002 	ldrb.w	r8, [r1, #2]
 80206ca:	900e      	str	r0, [sp, #56]	; 0x38
 80206cc:	f891 a003 	ldrb.w	sl, [r1, #3]
 80206d0:	7848      	ldrb	r0, [r1, #1]
 80206d2:	f891 9004 	ldrb.w	r9, [r1, #4]
 80206d6:	f891 b005 	ldrb.w	fp, [r1, #5]
 80206da:	b172      	cbz	r2, 80206fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 80206dc:	3105      	adds	r1, #5
 80206de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80206e0:	190f      	adds	r7, r1, r4
 80206e2:	5d09      	ldrb	r1, [r1, r4]
 80206e4:	9115      	str	r1, [sp, #84]	; 0x54
 80206e6:	7879      	ldrb	r1, [r7, #1]
 80206e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80206ea:	78b9      	ldrb	r1, [r7, #2]
 80206ec:	9119      	str	r1, [sp, #100]	; 0x64
 80206ee:	78f9      	ldrb	r1, [r7, #3]
 80206f0:	9116      	str	r1, [sp, #88]	; 0x58
 80206f2:	7939      	ldrb	r1, [r7, #4]
 80206f4:	9118      	str	r1, [sp, #96]	; 0x60
 80206f6:	7979      	ldrb	r1, [r7, #5]
 80206f8:	911a      	str	r1, [sp, #104]	; 0x68
 80206fa:	b29b      	uxth	r3, r3
 80206fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80206fe:	b292      	uxth	r2, r2
 8020700:	f10c 0c03 	add.w	ip, ip, #3
 8020704:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020708:	fb03 f102 	mul.w	r1, r3, r2
 802070c:	011b      	lsls	r3, r3, #4
 802070e:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8020712:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020716:	1a5b      	subs	r3, r3, r1
 8020718:	b292      	uxth	r2, r2
 802071a:	b29b      	uxth	r3, r3
 802071c:	1abf      	subs	r7, r7, r2
 802071e:	fb03 f909 	mul.w	r9, r3, r9
 8020722:	b2bf      	uxth	r7, r7
 8020724:	fb03 fa0a 	mul.w	sl, r3, sl
 8020728:	fb03 f30b 	mul.w	r3, r3, fp
 802072c:	fb07 9900 	mla	r9, r7, r0, r9
 8020730:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020732:	fb07 aa04 	mla	sl, r7, r4, sl
 8020736:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020738:	fb02 9900 	mla	r9, r2, r0, r9
 802073c:	9818      	ldr	r0, [sp, #96]	; 0x60
 802073e:	fb07 3308 	mla	r3, r7, r8, r3
 8020742:	fb01 9900 	mla	r9, r1, r0, r9
 8020746:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020748:	fb02 aa04 	mla	sl, r2, r4, sl
 802074c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802074e:	fb02 3200 	mla	r2, r2, r0, r3
 8020752:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020754:	fb01 aa04 	mla	sl, r1, r4, sl
 8020758:	ea4f 2929 	mov.w	r9, r9, asr #8
 802075c:	fb01 2103 	mla	r1, r1, r3, r2
 8020760:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020762:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020766:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802076a:	1209      	asrs	r1, r1, #8
 802076c:	441e      	add	r6, r3
 802076e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020770:	f80c ac06 	strb.w	sl, [ip, #-6]
 8020774:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8020778:	441d      	add	r5, r3
 802077a:	e697      	b.n	80204ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802077c:	b01d      	add	sp, #116	; 0x74
 802077e:	ecbd 8b0a 	vpop	{d8-d12}
 8020782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020788 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8020788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802078c:	b085      	sub	sp, #20
 802078e:	7888      	ldrb	r0, [r1, #2]
 8020790:	4691      	mov	r9, r2
 8020792:	9000      	str	r0, [sp, #0]
 8020794:	7848      	ldrb	r0, [r1, #1]
 8020796:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802079a:	9001      	str	r0, [sp, #4]
 802079c:	7808      	ldrb	r0, [r1, #0]
 802079e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80207a2:	9002      	str	r0, [sp, #8]
 80207a4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80207a8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80207ac:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80207b0:	fb04 c603 	mla	r6, r4, r3, ip
 80207b4:	2c00      	cmp	r4, #0
 80207b6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80207ba:	9a00      	ldr	r2, [sp, #0]
 80207bc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80207c0:	9a01      	ldr	r2, [sp, #4]
 80207c2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80207c6:	db3a      	blt.n	802083e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80207c8:	45a0      	cmp	r8, r4
 80207ca:	dd38      	ble.n	802083e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80207cc:	f1bc 0f00 	cmp.w	ip, #0
 80207d0:	db33      	blt.n	802083a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80207d2:	4563      	cmp	r3, ip
 80207d4:	dd31      	ble.n	802083a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80207d6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80207da:	f11c 0601 	adds.w	r6, ip, #1
 80207de:	d431      	bmi.n	8020844 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80207e0:	42b3      	cmp	r3, r6
 80207e2:	dd2f      	ble.n	8020844 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80207e4:	b375      	cbz	r5, 8020844 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80207e6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80207ea:	3401      	adds	r4, #1
 80207ec:	d42e      	bmi.n	802084c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80207ee:	45a0      	cmp	r8, r4
 80207f0:	dd2c      	ble.n	802084c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80207f2:	b35f      	cbz	r7, 802084c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80207f4:	f1bc 0f00 	cmp.w	ip, #0
 80207f8:	db26      	blt.n	8020848 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80207fa:	4563      	cmp	r3, ip
 80207fc:	dd24      	ble.n	8020848 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80207fe:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8020802:	f11c 0c01 	adds.w	ip, ip, #1
 8020806:	d405      	bmi.n	8020814 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020808:	4563      	cmp	r3, ip
 802080a:	dd03      	ble.n	8020814 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802080c:	b115      	cbz	r5, 8020814 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802080e:	3301      	adds	r3, #1
 8020810:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8020814:	2d0f      	cmp	r5, #15
 8020816:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802081a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802081e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020822:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020826:	d801      	bhi.n	802082c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8020828:	2f0f      	cmp	r7, #15
 802082a:	d911      	bls.n	8020850 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 802082c:	4b80      	ldr	r3, [pc, #512]	; (8020a30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802082e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020832:	4a80      	ldr	r2, [pc, #512]	; (8020a34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8020834:	4880      	ldr	r0, [pc, #512]	; (8020a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8020836:	f003 fd07 	bl	8024248 <__assert_func>
 802083a:	4602      	mov	r2, r0
 802083c:	e7cd      	b.n	80207da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 802083e:	4606      	mov	r6, r0
 8020840:	4602      	mov	r2, r0
 8020842:	e7d2      	b.n	80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020844:	4606      	mov	r6, r0
 8020846:	e7d0      	b.n	80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020848:	4604      	mov	r4, r0
 802084a:	e7da      	b.n	8020802 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 802084c:	4604      	mov	r4, r0
 802084e:	e7e1      	b.n	8020814 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020850:	b2ab      	uxth	r3, r5
 8020852:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020856:	b2bf      	uxth	r7, r7
 8020858:	fb03 fe07 	mul.w	lr, r3, r7
 802085c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8020860:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020864:	eba3 0c0e 	sub.w	ip, r3, lr
 8020868:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802086c:	b2bf      	uxth	r7, r7
 802086e:	fa1f fc8c 	uxth.w	ip, ip
 8020872:	eba5 0507 	sub.w	r5, r5, r7
 8020876:	fb0c f30a 	mul.w	r3, ip, sl
 802087a:	b2ad      	uxth	r5, r5
 802087c:	fb05 330b 	mla	r3, r5, fp, r3
 8020880:	fb07 3309 	mla	r3, r7, r9, r3
 8020884:	fb0e 3308 	mla	r3, lr, r8, r3
 8020888:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802088c:	9303      	str	r3, [sp, #12]
 802088e:	d018      	beq.n	80208c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8020890:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020894:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020898:	fb0b f303 	mul.w	r3, fp, r3
 802089c:	fb0b fb02 	mul.w	fp, fp, r2
 80208a0:	0a1a      	lsrs	r2, r3, #8
 80208a2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80208a6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80208aa:	441a      	add	r2, r3
 80208ac:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80208b0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80208b4:	0a12      	lsrs	r2, r2, #8
 80208b6:	0a1b      	lsrs	r3, r3, #8
 80208b8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80208bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208c0:	431a      	orrs	r2, r3
 80208c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80208c6:	d019      	beq.n	80208fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80208c8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80208cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80208d0:	fb0a fb0b 	mul.w	fp, sl, fp
 80208d4:	fb0a fa06 	mul.w	sl, sl, r6
 80208d8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80208dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80208e0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80208e4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80208e8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80208ec:	445e      	add	r6, fp
 80208ee:	0a1b      	lsrs	r3, r3, #8
 80208f0:	0a36      	lsrs	r6, r6, #8
 80208f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208f6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80208fa:	431e      	orrs	r6, r3
 80208fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020900:	d019      	beq.n	8020936 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8020902:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020906:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802090a:	fb09 fa0a 	mul.w	sl, r9, sl
 802090e:	fb09 f904 	mul.w	r9, r9, r4
 8020912:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020916:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802091a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802091e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020922:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020926:	4454      	add	r4, sl
 8020928:	0a1b      	lsrs	r3, r3, #8
 802092a:	0a24      	lsrs	r4, r4, #8
 802092c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020930:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020934:	431c      	orrs	r4, r3
 8020936:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802093a:	d019      	beq.n	8020970 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 802093c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020940:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020944:	fb08 f909 	mul.w	r9, r8, r9
 8020948:	fb08 f800 	mul.w	r8, r8, r0
 802094c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020950:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020954:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020958:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802095c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020960:	4448      	add	r0, r9
 8020962:	0a1b      	lsrs	r3, r3, #8
 8020964:	0a00      	lsrs	r0, r0, #8
 8020966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802096a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802096e:	4318      	orrs	r0, r3
 8020970:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020974:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020978:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802097c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020980:	fb0c f808 	mul.w	r8, ip, r8
 8020984:	fb0c f606 	mul.w	r6, ip, r6
 8020988:	fb05 8803 	mla	r8, r5, r3, r8
 802098c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020990:	fb05 6202 	mla	r2, r5, r2, r6
 8020994:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020998:	fb07 8803 	mla	r8, r7, r3, r8
 802099c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80209a0:	fb07 2704 	mla	r7, r7, r4, r2
 80209a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80209a8:	fb0e 8303 	mla	r3, lr, r3, r8
 80209ac:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80209b0:	fb0e 7e00 	mla	lr, lr, r0, r7
 80209b4:	9803      	ldr	r0, [sp, #12]
 80209b6:	b292      	uxth	r2, r2
 80209b8:	9c02      	ldr	r4, [sp, #8]
 80209ba:	0a1b      	lsrs	r3, r3, #8
 80209bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209c0:	4350      	muls	r0, r2
 80209c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80209c6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80209ca:	ea43 0e0e 	orr.w	lr, r3, lr
 80209ce:	1c43      	adds	r3, r0, #1
 80209d0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80209d4:	fa5f f08e 	uxtb.w	r0, lr
 80209d8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80209dc:	b2db      	uxtb	r3, r3
 80209de:	fb14 f403 	smulbb	r4, r4, r3
 80209e2:	fb00 4002 	mla	r0, r0, r2, r4
 80209e6:	b280      	uxth	r0, r0
 80209e8:	1c44      	adds	r4, r0, #1
 80209ea:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80209ee:	9c01      	ldr	r4, [sp, #4]
 80209f0:	fb14 f403 	smulbb	r4, r4, r3
 80209f4:	1200      	asrs	r0, r0, #8
 80209f6:	7008      	strb	r0, [r1, #0]
 80209f8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80209fc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020a00:	fb00 4002 	mla	r0, r0, r2, r4
 8020a04:	b280      	uxth	r0, r0
 8020a06:	1c44      	adds	r4, r0, #1
 8020a08:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020a0c:	1200      	asrs	r0, r0, #8
 8020a0e:	7048      	strb	r0, [r1, #1]
 8020a10:	9800      	ldr	r0, [sp, #0]
 8020a12:	fb10 f303 	smulbb	r3, r0, r3
 8020a16:	fb0e 3202 	mla	r2, lr, r2, r3
 8020a1a:	b292      	uxth	r2, r2
 8020a1c:	f102 0e01 	add.w	lr, r2, #1
 8020a20:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020a24:	1212      	asrs	r2, r2, #8
 8020a26:	708a      	strb	r2, [r1, #2]
 8020a28:	b005      	add	sp, #20
 8020a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a2e:	bf00      	nop
 8020a30:	08028c47 	.word	0x08028c47
 8020a34:	0802913e 	.word	0x0802913e
 8020a38:	08028d10 	.word	0x08028d10

08020a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a40:	ed2d 8b08 	vpush	{d8-d11}
 8020a44:	b099      	sub	sp, #100	; 0x64
 8020a46:	eeb0 aa40 	vmov.f32	s20, s0
 8020a4a:	eef0 9a60 	vmov.f32	s19, s1
 8020a4e:	9306      	str	r3, [sp, #24]
 8020a50:	eeb0 9a41 	vmov.f32	s18, s2
 8020a54:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8020a58:	eeb0 8a62 	vmov.f32	s16, s5
 8020a5c:	9216      	str	r2, [sp, #88]	; 0x58
 8020a5e:	eef0 8a43 	vmov.f32	s17, s6
 8020a62:	9307      	str	r3, [sp, #28]
 8020a64:	eef0 ba44 	vmov.f32	s23, s8
 8020a68:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8020a6c:	eeb0 ba64 	vmov.f32	s22, s9
 8020a70:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020a72:	eef0 aa45 	vmov.f32	s21, s10
 8020a76:	9310      	str	r3, [sp, #64]	; 0x40
 8020a78:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8020a7c:	9017      	str	r0, [sp, #92]	; 0x5c
 8020a7e:	9112      	str	r1, [sp, #72]	; 0x48
 8020a80:	6850      	ldr	r0, [r2, #4]
 8020a82:	9315      	str	r3, [sp, #84]	; 0x54
 8020a84:	6812      	ldr	r2, [r2, #0]
 8020a86:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8020a88:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8020a8c:	fb00 1303 	mla	r3, r0, r3, r1
 8020a90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a94:	18d3      	adds	r3, r2, r3
 8020a96:	930a      	str	r3, [sp, #40]	; 0x28
 8020a98:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	9311      	str	r3, [sp, #68]	; 0x44
 8020a9e:	9b07      	ldr	r3, [sp, #28]
 8020aa0:	009b      	lsls	r3, r3, #2
 8020aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8020aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	dc03      	bgt.n	8020ab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020aaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	f340 833b 	ble.w	8021128 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8020ab2:	9b06      	ldr	r3, [sp, #24]
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	f340 8197 	ble.w	8020de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8020aba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020abc:	1423      	asrs	r3, r4, #16
 8020abe:	1412      	asrs	r2, r2, #16
 8020ac0:	d432      	bmi.n	8020b28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8020ac2:	1c51      	adds	r1, r2, #1
 8020ac4:	9807      	ldr	r0, [sp, #28]
 8020ac6:	4288      	cmp	r0, r1
 8020ac8:	dd31      	ble.n	8020b2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	db2f      	blt.n	8020b2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020ace:	1c59      	adds	r1, r3, #1
 8020ad0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020ad2:	4288      	cmp	r0, r1
 8020ad4:	dd2b      	ble.n	8020b2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020ad6:	9b06      	ldr	r3, [sp, #24]
 8020ad8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020ada:	3b01      	subs	r3, #1
 8020adc:	992b      	ldr	r1, [sp, #172]	; 0xac
 8020ade:	fb02 1203 	mla	r2, r2, r3, r1
 8020ae2:	1412      	asrs	r2, r2, #16
 8020ae4:	d42e      	bmi.n	8020b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020ae6:	3201      	adds	r2, #1
 8020ae8:	9907      	ldr	r1, [sp, #28]
 8020aea:	4291      	cmp	r1, r2
 8020aec:	dd2a      	ble.n	8020b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020aee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020af0:	fb02 4303 	mla	r3, r2, r3, r4
 8020af4:	141b      	asrs	r3, r3, #16
 8020af6:	d425      	bmi.n	8020b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020af8:	3301      	adds	r3, #1
 8020afa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020afc:	429a      	cmp	r2, r3
 8020afe:	dd21      	ble.n	8020b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b02:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8020b06:	f103 0e03 	add.w	lr, r3, #3
 8020b0a:	9b06      	ldr	r3, [sp, #24]
 8020b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	f300 81d2 	bgt.w	8020eba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8020b16:	9b06      	ldr	r3, [sp, #24]
 8020b18:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020b22:	4423      	add	r3, r4
 8020b24:	930a      	str	r3, [sp, #40]	; 0x28
 8020b26:	e161      	b.n	8020dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8020b28:	1c51      	adds	r1, r2, #1
 8020b2a:	f040 8150 	bne.w	8020dce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020b2e:	9907      	ldr	r1, [sp, #28]
 8020b30:	428a      	cmp	r2, r1
 8020b32:	f280 814c 	bge.w	8020dce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020b36:	1c5a      	adds	r2, r3, #1
 8020b38:	f2c0 8149 	blt.w	8020dce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b3e:	4293      	cmp	r3, r2
 8020b40:	f280 8145 	bge.w	8020dce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020b44:	9b06      	ldr	r3, [sp, #24]
 8020b46:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020b48:	9314      	str	r3, [sp, #80]	; 0x50
 8020b4a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8020b4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	dddf      	ble.n	8020b16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8020b56:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020b58:	1423      	asrs	r3, r4, #16
 8020b5a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020b5e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020b62:	1412      	asrs	r2, r2, #16
 8020b64:	f100 8190 	bmi.w	8020e88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8020b68:	1c55      	adds	r5, r2, #1
 8020b6a:	9f07      	ldr	r7, [sp, #28]
 8020b6c:	42af      	cmp	r7, r5
 8020b6e:	f340 818d 	ble.w	8020e8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	f2c0 818a 	blt.w	8020e8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020b78:	1c5d      	adds	r5, r3, #1
 8020b7a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020b7c:	42af      	cmp	r7, r5
 8020b7e:	f340 8185 	ble.w	8020e8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020b82:	9d07      	ldr	r5, [sp, #28]
 8020b84:	fb03 2305 	mla	r3, r3, r5, r2
 8020b88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020b8a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020b92:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020b96:	2800      	cmp	r0, #0
 8020b98:	f000 8167 	beq.w	8020e6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020b9c:	686a      	ldr	r2, [r5, #4]
 8020b9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020ba0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020ba4:	2900      	cmp	r1, #0
 8020ba6:	f000 8169 	beq.w	8020e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020bac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020bae:	18aa      	adds	r2, r5, r2
 8020bb0:	59ed      	ldr	r5, [r5, r7]
 8020bb2:	6852      	ldr	r2, [r2, #4]
 8020bb4:	9508      	str	r5, [sp, #32]
 8020bb6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8020bba:	0e15      	lsrs	r5, r2, #24
 8020bbc:	920c      	str	r2, [sp, #48]	; 0x30
 8020bbe:	b280      	uxth	r0, r0
 8020bc0:	b289      	uxth	r1, r1
 8020bc2:	fb00 fb01 	mul.w	fp, r0, r1
 8020bc6:	0100      	lsls	r0, r0, #4
 8020bc8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8020bcc:	eba0 090b 	sub.w	r9, r0, fp
 8020bd0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8020bd4:	b289      	uxth	r1, r1
 8020bd6:	fa1f f989 	uxth.w	r9, r9
 8020bda:	1a52      	subs	r2, r2, r1
 8020bdc:	fb09 f008 	mul.w	r0, r9, r8
 8020be0:	b292      	uxth	r2, r2
 8020be2:	fb02 000c 	mla	r0, r2, ip, r0
 8020be6:	fb01 000a 	mla	r0, r1, sl, r0
 8020bea:	fb0b 0005 	mla	r0, fp, r5, r0
 8020bee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020bf2:	2800      	cmp	r0, #0
 8020bf4:	f000 80e0 	beq.w	8020db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020bf8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020bfc:	d01b      	beq.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8020bfe:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020c02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c06:	fb0c fe0e 	mul.w	lr, ip, lr
 8020c0a:	fb0c fc03 	mul.w	ip, ip, r3
 8020c0e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020c12:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c1a:	4473      	add	r3, lr
 8020c1c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020c20:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020c24:	0a1b      	lsrs	r3, r3, #8
 8020c26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c2e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020c32:	ea43 030e 	orr.w	r3, r3, lr
 8020c36:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020c3a:	d01e      	beq.n	8020c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8020c3c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020c3e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020c42:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020c46:	fb08 fc0c 	mul.w	ip, r8, ip
 8020c4a:	fb08 f80e 	mul.w	r8, r8, lr
 8020c4e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020c52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c5a:	44e6      	add	lr, ip
 8020c5c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020c60:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020c64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c68:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020c6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c70:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020c74:	ea4e 0708 	orr.w	r7, lr, r8
 8020c78:	970b      	str	r7, [sp, #44]	; 0x2c
 8020c7a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020c7e:	d01e      	beq.n	8020cbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020c80:	9f08      	ldr	r7, [sp, #32]
 8020c82:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020c86:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020c8a:	fb0a f808 	mul.w	r8, sl, r8
 8020c8e:	fb0a fa0c 	mul.w	sl, sl, ip
 8020c92:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020c96:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020c9a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020c9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ca2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020ca6:	44c6      	add	lr, r8
 8020ca8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020cb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cb8:	ea4e 070a 	orr.w	r7, lr, sl
 8020cbc:	9708      	str	r7, [sp, #32]
 8020cbe:	2dff      	cmp	r5, #255	; 0xff
 8020cc0:	d01d      	beq.n	8020cfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8020cc2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020cc4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020cc8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020ccc:	fb05 f808 	mul.w	r8, r5, r8
 8020cd0:	fb05 f50c 	mul.w	r5, r5, ip
 8020cd4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020cd8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020cdc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020ce0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ce4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020ce8:	44c6      	add	lr, r8
 8020cea:	0a2d      	lsrs	r5, r5, #8
 8020cec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cf0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020cf4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cf8:	ea4e 0505 	orr.w	r5, lr, r5
 8020cfc:	950c      	str	r5, [sp, #48]	; 0x30
 8020cfe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020d00:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020d04:	9f08      	ldr	r7, [sp, #32]
 8020d06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d0a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020d0e:	fb09 f505 	mul.w	r5, r9, r5
 8020d12:	fb02 550c 	mla	r5, r2, ip, r5
 8020d16:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020d1c:	fb01 550c 	mla	r5, r1, ip, r5
 8020d20:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020d26:	fb0b 550c 	mla	r5, fp, ip, r5
 8020d2a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020d2e:	fb09 f90c 	mul.w	r9, r9, ip
 8020d32:	0a2d      	lsrs	r5, r5, #8
 8020d34:	fb02 9303 	mla	r3, r2, r3, r9
 8020d38:	9a08      	ldr	r2, [sp, #32]
 8020d3a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020d3e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020d44:	fb01 330e 	mla	r3, r1, lr, r3
 8020d48:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020d4c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8020d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020d52:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020d54:	4343      	muls	r3, r0
 8020d56:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020d5a:	1c58      	adds	r0, r3, #1
 8020d5c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020d60:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020d64:	ea45 050b 	orr.w	r5, r5, fp
 8020d68:	7833      	ldrb	r3, [r6, #0]
 8020d6a:	b2ea      	uxtb	r2, r5
 8020d6c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020d70:	fb12 f201 	smulbb	r2, r2, r1
 8020d74:	b2c0      	uxtb	r0, r0
 8020d76:	fb03 2300 	mla	r3, r3, r0, r2
 8020d7a:	b29b      	uxth	r3, r3
 8020d7c:	1c5a      	adds	r2, r3, #1
 8020d7e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d82:	7872      	ldrb	r2, [r6, #1]
 8020d84:	fb12 f200 	smulbb	r2, r2, r0
 8020d88:	121b      	asrs	r3, r3, #8
 8020d8a:	7033      	strb	r3, [r6, #0]
 8020d8c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020d90:	0c2d      	lsrs	r5, r5, #16
 8020d92:	fb03 2301 	mla	r3, r3, r1, r2
 8020d96:	b29b      	uxth	r3, r3
 8020d98:	1c5a      	adds	r2, r3, #1
 8020d9a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d9e:	121b      	asrs	r3, r3, #8
 8020da0:	7073      	strb	r3, [r6, #1]
 8020da2:	78b3      	ldrb	r3, [r6, #2]
 8020da4:	fb13 f000 	smulbb	r0, r3, r0
 8020da8:	fb05 0501 	mla	r5, r5, r1, r0
 8020dac:	b2ad      	uxth	r5, r5
 8020dae:	1c6b      	adds	r3, r5, #1
 8020db0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020db4:	122d      	asrs	r5, r5, #8
 8020db6:	70b5      	strb	r5, [r6, #2]
 8020db8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020dba:	3603      	adds	r6, #3
 8020dbc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020dbe:	4413      	add	r3, r2
 8020dc0:	932b      	str	r3, [sp, #172]	; 0xac
 8020dc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020dc4:	441c      	add	r4, r3
 8020dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020dc8:	3b01      	subs	r3, #1
 8020dca:	9314      	str	r3, [sp, #80]	; 0x50
 8020dcc:	e6c0      	b.n	8020b50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8020dce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020dd0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020dd2:	4413      	add	r3, r2
 8020dd4:	932b      	str	r3, [sp, #172]	; 0xac
 8020dd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020dd8:	441c      	add	r4, r3
 8020dda:	9b06      	ldr	r3, [sp, #24]
 8020ddc:	3b01      	subs	r3, #1
 8020dde:	9306      	str	r3, [sp, #24]
 8020de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020de2:	3303      	adds	r3, #3
 8020de4:	930a      	str	r3, [sp, #40]	; 0x28
 8020de6:	e664      	b.n	8020ab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020de8:	f47f ae75 	bne.w	8020ad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8020dec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	f340 819a 	ble.w	8021128 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8020df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020df8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020dfa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020dfe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020e02:	eef0 6a48 	vmov.f32	s13, s16
 8020e06:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020e0a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020e0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e12:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8020e16:	eef0 6a68 	vmov.f32	s13, s17
 8020e1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e1e:	ee16 4a90 	vmov	r4, s13
 8020e22:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e26:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e2a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e2e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e32:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e36:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e3a:	ee18 2a10 	vmov	r2, s16
 8020e3e:	eeb0 8a47 	vmov.f32	s16, s14
 8020e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e46:	ee18 2a90 	vmov	r2, s17
 8020e4a:	932d      	str	r3, [sp, #180]	; 0xb4
 8020e4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e4e:	eef0 8a67 	vmov.f32	s17, s15
 8020e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e56:	932e      	str	r3, [sp, #184]	; 0xb8
 8020e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020e5c:	3b01      	subs	r3, #1
 8020e5e:	9312      	str	r3, [sp, #72]	; 0x48
 8020e60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e62:	bf08      	it	eq
 8020e64:	4613      	moveq	r3, r2
 8020e66:	9306      	str	r3, [sp, #24]
 8020e68:	e61c      	b.n	8020aa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8020e6a:	b151      	cbz	r1, 8020e82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e6e:	58aa      	ldr	r2, [r5, r2]
 8020e70:	25ff      	movs	r5, #255	; 0xff
 8020e72:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020e76:	9208      	str	r2, [sp, #32]
 8020e78:	46a8      	mov	r8, r5
 8020e7a:	e6a0      	b.n	8020bbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8020e7c:	25ff      	movs	r5, #255	; 0xff
 8020e7e:	46aa      	mov	sl, r5
 8020e80:	e69d      	b.n	8020bbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8020e82:	25ff      	movs	r5, #255	; 0xff
 8020e84:	46aa      	mov	sl, r5
 8020e86:	e7f7      	b.n	8020e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8020e88:	1c57      	adds	r7, r2, #1
 8020e8a:	d195      	bne.n	8020db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020e8c:	9d07      	ldr	r5, [sp, #28]
 8020e8e:	4295      	cmp	r5, r2
 8020e90:	dd92      	ble.n	8020db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020e92:	1c5d      	adds	r5, r3, #1
 8020e94:	db90      	blt.n	8020db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020e96:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020e98:	429d      	cmp	r5, r3
 8020e9a:	dd8d      	ble.n	8020db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020e9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020e9e:	9201      	str	r2, [sp, #4]
 8020ea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ea2:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8020ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ea8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020eaa:	9300      	str	r3, [sp, #0]
 8020eac:	9b07      	ldr	r3, [sp, #28]
 8020eae:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8020eb2:	4631      	mov	r1, r6
 8020eb4:	f7ff fc68 	bl	8020788 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8020eb8:	e77e      	b.n	8020db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020eba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020ebc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020ec0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020ec2:	9d07      	ldr	r5, [sp, #28]
 8020ec4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020ec8:	1412      	asrs	r2, r2, #16
 8020eca:	1423      	asrs	r3, r4, #16
 8020ecc:	fb05 2303 	mla	r3, r5, r3, r2
 8020ed0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ed2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020eda:	0e1e      	lsrs	r6, r3, #24
 8020edc:	2900      	cmp	r1, #0
 8020ede:	f000 8114 	beq.w	802110a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8020ee2:	686a      	ldr	r2, [r5, #4]
 8020ee4:	920d      	str	r2, [sp, #52]	; 0x34
 8020ee6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8020eea:	2800      	cmp	r0, #0
 8020eec:	f000 8116 	beq.w	802111c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8020ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ef2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020ef4:	18aa      	adds	r2, r5, r2
 8020ef6:	59ed      	ldr	r5, [r5, r7]
 8020ef8:	6852      	ldr	r2, [r2, #4]
 8020efa:	9509      	str	r5, [sp, #36]	; 0x24
 8020efc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020f00:	0e15      	lsrs	r5, r2, #24
 8020f02:	920f      	str	r2, [sp, #60]	; 0x3c
 8020f04:	b289      	uxth	r1, r1
 8020f06:	b280      	uxth	r0, r0
 8020f08:	fb01 fa00 	mul.w	sl, r1, r0
 8020f0c:	0109      	lsls	r1, r1, #4
 8020f0e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020f12:	eba1 080a 	sub.w	r8, r1, sl
 8020f16:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020f1a:	b280      	uxth	r0, r0
 8020f1c:	fa1f f888 	uxth.w	r8, r8
 8020f20:	1a12      	subs	r2, r2, r0
 8020f22:	fb08 f10c 	mul.w	r1, r8, ip
 8020f26:	b292      	uxth	r2, r2
 8020f28:	fb02 1106 	mla	r1, r2, r6, r1
 8020f2c:	fb00 1109 	mla	r1, r0, r9, r1
 8020f30:	fb0a 1105 	mla	r1, sl, r5, r1
 8020f34:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f38:	2900      	cmp	r1, #0
 8020f3a:	f000 80da 	beq.w	80210f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8020f3e:	2eff      	cmp	r6, #255	; 0xff
 8020f40:	d016      	beq.n	8020f70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8020f42:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020f46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f4a:	4377      	muls	r7, r6
 8020f4c:	435e      	muls	r6, r3
 8020f4e:	0a3b      	lsrs	r3, r7, #8
 8020f50:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f58:	443b      	add	r3, r7
 8020f5a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020f5e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8020f62:	0a1b      	lsrs	r3, r3, #8
 8020f64:	0a3f      	lsrs	r7, r7, #8
 8020f66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f6a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f6e:	433b      	orrs	r3, r7
 8020f70:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020f74:	d01d      	beq.n	8020fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8020f76:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020f78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020f7a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020f7e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f82:	fb0c f606 	mul.w	r6, ip, r6
 8020f86:	fb0c fc07 	mul.w	ip, ip, r7
 8020f8a:	0a37      	lsrs	r7, r6, #8
 8020f8c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020f90:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020f94:	4437      	add	r7, r6
 8020f96:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020f9a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020f9e:	0a3f      	lsrs	r7, r7, #8
 8020fa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fa4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fa8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020fac:	ea47 060c 	orr.w	r6, r7, ip
 8020fb0:	960d      	str	r6, [sp, #52]	; 0x34
 8020fb2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020fb6:	d01d      	beq.n	8020ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8020fb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020fba:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020fbe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020fc2:	fb09 fc0c 	mul.w	ip, r9, ip
 8020fc6:	fb09 f906 	mul.w	r9, r9, r6
 8020fca:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020fce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020fd2:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8020fd6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fda:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020fde:	4467      	add	r7, ip
 8020fe0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020fe4:	0a3f      	lsrs	r7, r7, #8
 8020fe6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020fea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fee:	ea47 0609 	orr.w	r6, r7, r9
 8020ff2:	9609      	str	r6, [sp, #36]	; 0x24
 8020ff4:	2dff      	cmp	r5, #255	; 0xff
 8020ff6:	d01a      	beq.n	802102e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8020ff8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020ffa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020ffe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021002:	fb05 fc0c 	mul.w	ip, r5, ip
 8021006:	4375      	muls	r5, r6
 8021008:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802100c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021010:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021014:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021018:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802101c:	4467      	add	r7, ip
 802101e:	0a2d      	lsrs	r5, r5, #8
 8021020:	0a3f      	lsrs	r7, r7, #8
 8021022:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021026:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802102a:	433d      	orrs	r5, r7
 802102c:	950f      	str	r5, [sp, #60]	; 0x3c
 802102e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021030:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021034:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021038:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802103c:	fb08 f505 	mul.w	r5, r8, r5
 8021040:	fb02 5506 	mla	r5, r2, r6, r5
 8021044:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021046:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802104a:	fb00 5506 	mla	r5, r0, r6, r5
 802104e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021050:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021054:	fb0a 5506 	mla	r5, sl, r6, r5
 8021058:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802105a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802105e:	0a2d      	lsrs	r5, r5, #8
 8021060:	fb08 f806 	mul.w	r8, r8, r6
 8021064:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021068:	fb02 8303 	mla	r3, r2, r3, r8
 802106c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802106e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021072:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021074:	fb00 3307 	mla	r3, r0, r7, r3
 8021078:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802107c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021080:	fb01 f30b 	mul.w	r3, r1, fp
 8021084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021088:	1c59      	adds	r1, r3, #1
 802108a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802108e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021092:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021096:	ea45 050c 	orr.w	r5, r5, ip
 802109a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802109e:	b2ea      	uxtb	r2, r5
 80210a0:	b2c9      	uxtb	r1, r1
 80210a2:	fb12 f20b 	smulbb	r2, r2, fp
 80210a6:	fb03 2301 	mla	r3, r3, r1, r2
 80210aa:	b29b      	uxth	r3, r3
 80210ac:	1c5a      	adds	r2, r3, #1
 80210ae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210b2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80210b6:	fb12 f201 	smulbb	r2, r2, r1
 80210ba:	121b      	asrs	r3, r3, #8
 80210bc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80210c0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80210c4:	0c2d      	lsrs	r5, r5, #16
 80210c6:	fb03 230b 	mla	r3, r3, fp, r2
 80210ca:	b29b      	uxth	r3, r3
 80210cc:	1c5a      	adds	r2, r3, #1
 80210ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210d2:	121b      	asrs	r3, r3, #8
 80210d4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80210d8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80210dc:	fb13 f101 	smulbb	r1, r3, r1
 80210e0:	fb05 150b 	mla	r5, r5, fp, r1
 80210e4:	b2ad      	uxth	r5, r5
 80210e6:	1c69      	adds	r1, r5, #1
 80210e8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80210ec:	122d      	asrs	r5, r5, #8
 80210ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80210f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80210f4:	f10e 0e03 	add.w	lr, lr, #3
 80210f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80210fa:	4413      	add	r3, r2
 80210fc:	932b      	str	r3, [sp, #172]	; 0xac
 80210fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021100:	441c      	add	r4, r3
 8021102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021104:	3b01      	subs	r3, #1
 8021106:	9313      	str	r3, [sp, #76]	; 0x4c
 8021108:	e501      	b.n	8020b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802110a:	b150      	cbz	r0, 8021122 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 802110c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802110e:	58aa      	ldr	r2, [r5, r2]
 8021110:	25ff      	movs	r5, #255	; 0xff
 8021112:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021116:	9209      	str	r2, [sp, #36]	; 0x24
 8021118:	46ac      	mov	ip, r5
 802111a:	e6f3      	b.n	8020f04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802111c:	25ff      	movs	r5, #255	; 0xff
 802111e:	46a9      	mov	r9, r5
 8021120:	e6f0      	b.n	8020f04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021122:	25ff      	movs	r5, #255	; 0xff
 8021124:	46a9      	mov	r9, r5
 8021126:	e7f7      	b.n	8021118 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8021128:	b019      	add	sp, #100	; 0x64
 802112a:	ecbd 8b08 	vpop	{d8-d11}
 802112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021134 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021138:	b085      	sub	sp, #20
 802113a:	7888      	ldrb	r0, [r1, #2]
 802113c:	4691      	mov	r9, r2
 802113e:	9000      	str	r0, [sp, #0]
 8021140:	7848      	ldrb	r0, [r1, #1]
 8021142:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021146:	9001      	str	r0, [sp, #4]
 8021148:	7808      	ldrb	r0, [r1, #0]
 802114a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802114e:	9002      	str	r0, [sp, #8]
 8021150:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021154:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021158:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802115c:	fb04 c603 	mla	r6, r4, r3, ip
 8021160:	2c00      	cmp	r4, #0
 8021162:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021166:	9a00      	ldr	r2, [sp, #0]
 8021168:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802116c:	9a01      	ldr	r2, [sp, #4]
 802116e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021172:	db3a      	blt.n	80211ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021174:	45a0      	cmp	r8, r4
 8021176:	dd38      	ble.n	80211ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021178:	f1bc 0f00 	cmp.w	ip, #0
 802117c:	db33      	blt.n	80211e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802117e:	4563      	cmp	r3, ip
 8021180:	dd31      	ble.n	80211e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021182:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021186:	f11c 0601 	adds.w	r6, ip, #1
 802118a:	d431      	bmi.n	80211f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802118c:	42b3      	cmp	r3, r6
 802118e:	dd2f      	ble.n	80211f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021190:	b375      	cbz	r5, 80211f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021192:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021196:	3401      	adds	r4, #1
 8021198:	d42e      	bmi.n	80211f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802119a:	45a0      	cmp	r8, r4
 802119c:	dd2c      	ble.n	80211f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802119e:	b35f      	cbz	r7, 80211f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80211a0:	f1bc 0f00 	cmp.w	ip, #0
 80211a4:	db26      	blt.n	80211f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80211a6:	4563      	cmp	r3, ip
 80211a8:	dd24      	ble.n	80211f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80211aa:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80211ae:	f11c 0c01 	adds.w	ip, ip, #1
 80211b2:	d405      	bmi.n	80211c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80211b4:	4563      	cmp	r3, ip
 80211b6:	dd03      	ble.n	80211c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80211b8:	b115      	cbz	r5, 80211c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80211ba:	3301      	adds	r3, #1
 80211bc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80211c0:	2d0f      	cmp	r5, #15
 80211c2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80211c6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80211ca:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80211ce:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80211d2:	d801      	bhi.n	80211d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 80211d4:	2f0f      	cmp	r7, #15
 80211d6:	d911      	bls.n	80211fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 80211d8:	4b77      	ldr	r3, [pc, #476]	; (80213b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 80211da:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80211de:	4a77      	ldr	r2, [pc, #476]	; (80213bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 80211e0:	4877      	ldr	r0, [pc, #476]	; (80213c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 80211e2:	f003 f831 	bl	8024248 <__assert_func>
 80211e6:	4602      	mov	r2, r0
 80211e8:	e7cd      	b.n	8021186 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80211ea:	4606      	mov	r6, r0
 80211ec:	4602      	mov	r2, r0
 80211ee:	e7d2      	b.n	8021196 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80211f0:	4606      	mov	r6, r0
 80211f2:	e7d0      	b.n	8021196 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80211f4:	4604      	mov	r4, r0
 80211f6:	e7da      	b.n	80211ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80211f8:	4604      	mov	r4, r0
 80211fa:	e7e1      	b.n	80211c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80211fc:	b2ab      	uxth	r3, r5
 80211fe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021202:	b2bf      	uxth	r7, r7
 8021204:	fb03 fe07 	mul.w	lr, r3, r7
 8021208:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802120c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021210:	eba3 0c0e 	sub.w	ip, r3, lr
 8021214:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021218:	b2bf      	uxth	r7, r7
 802121a:	fa1f fc8c 	uxth.w	ip, ip
 802121e:	eba5 0507 	sub.w	r5, r5, r7
 8021222:	fb0c f30a 	mul.w	r3, ip, sl
 8021226:	b2ad      	uxth	r5, r5
 8021228:	fb05 330b 	mla	r3, r5, fp, r3
 802122c:	fb07 3309 	mla	r3, r7, r9, r3
 8021230:	fb0e 3308 	mla	r3, lr, r8, r3
 8021234:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021238:	9303      	str	r3, [sp, #12]
 802123a:	d018      	beq.n	802126e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 802123c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021240:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021244:	fb0b f303 	mul.w	r3, fp, r3
 8021248:	fb0b fb02 	mul.w	fp, fp, r2
 802124c:	0a1a      	lsrs	r2, r3, #8
 802124e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021252:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021256:	441a      	add	r2, r3
 8021258:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802125c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021260:	0a12      	lsrs	r2, r2, #8
 8021262:	0a1b      	lsrs	r3, r3, #8
 8021264:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802126c:	431a      	orrs	r2, r3
 802126e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021272:	d019      	beq.n	80212a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021274:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021278:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802127c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021280:	fb0a fa06 	mul.w	sl, sl, r6
 8021284:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021288:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802128c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021290:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021294:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021298:	445e      	add	r6, fp
 802129a:	0a1b      	lsrs	r3, r3, #8
 802129c:	0a36      	lsrs	r6, r6, #8
 802129e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212a6:	431e      	orrs	r6, r3
 80212a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80212ac:	d019      	beq.n	80212e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 80212ae:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80212b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80212b6:	fb09 fa0a 	mul.w	sl, r9, sl
 80212ba:	fb09 f904 	mul.w	r9, r9, r4
 80212be:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80212c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212c6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80212ca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80212ce:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80212d2:	4454      	add	r4, sl
 80212d4:	0a1b      	lsrs	r3, r3, #8
 80212d6:	0a24      	lsrs	r4, r4, #8
 80212d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80212e0:	431c      	orrs	r4, r3
 80212e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80212e6:	d019      	beq.n	802131c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80212e8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80212ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80212f0:	fb08 f909 	mul.w	r9, r8, r9
 80212f4:	fb08 f800 	mul.w	r8, r8, r0
 80212f8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80212fc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021300:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021304:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021308:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802130c:	4448      	add	r0, r9
 802130e:	0a1b      	lsrs	r3, r3, #8
 8021310:	0a00      	lsrs	r0, r0, #8
 8021312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021316:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802131a:	4318      	orrs	r0, r3
 802131c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021320:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021324:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021328:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802132c:	fb0c f808 	mul.w	r8, ip, r8
 8021330:	fb0c f606 	mul.w	r6, ip, r6
 8021334:	fb05 8803 	mla	r8, r5, r3, r8
 8021338:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802133c:	fb05 6202 	mla	r2, r5, r2, r6
 8021340:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021344:	fb07 8803 	mla	r8, r7, r3, r8
 8021348:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802134c:	fb07 2704 	mla	r7, r7, r4, r2
 8021350:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021354:	fb0e 8303 	mla	r3, lr, r3, r8
 8021358:	fb0e 7e00 	mla	lr, lr, r0, r7
 802135c:	9802      	ldr	r0, [sp, #8]
 802135e:	0a1b      	lsrs	r3, r3, #8
 8021360:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021364:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021368:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802136c:	ea43 0e0e 	orr.w	lr, r3, lr
 8021370:	9b03      	ldr	r3, [sp, #12]
 8021372:	43db      	mvns	r3, r3
 8021374:	b2db      	uxtb	r3, r3
 8021376:	4358      	muls	r0, r3
 8021378:	1c42      	adds	r2, r0, #1
 802137a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802137e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021382:	700a      	strb	r2, [r1, #0]
 8021384:	9a01      	ldr	r2, [sp, #4]
 8021386:	435a      	muls	r2, r3
 8021388:	1c50      	adds	r0, r2, #1
 802138a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802138e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021392:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021396:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802139a:	704a      	strb	r2, [r1, #1]
 802139c:	9a00      	ldr	r2, [sp, #0]
 802139e:	435a      	muls	r2, r3
 80213a0:	4613      	mov	r3, r2
 80213a2:	3201      	adds	r2, #1
 80213a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80213a8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80213ac:	f881 e002 	strb.w	lr, [r1, #2]
 80213b0:	b005      	add	sp, #20
 80213b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213b6:	bf00      	nop
 80213b8:	08028c47 	.word	0x08028c47
 80213bc:	0802913e 	.word	0x0802913e
 80213c0:	08028d10 	.word	0x08028d10

080213c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80213c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213c8:	ed2d 8b08 	vpush	{d8-d11}
 80213cc:	b097      	sub	sp, #92	; 0x5c
 80213ce:	eeb0 aa40 	vmov.f32	s20, s0
 80213d2:	eef0 9a60 	vmov.f32	s19, s1
 80213d6:	9306      	str	r3, [sp, #24]
 80213d8:	eeb0 9a41 	vmov.f32	s18, s2
 80213dc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80213e0:	eeb0 8a62 	vmov.f32	s16, s5
 80213e4:	9214      	str	r2, [sp, #80]	; 0x50
 80213e6:	eef0 8a43 	vmov.f32	s17, s6
 80213ea:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80213ec:	eef0 ba44 	vmov.f32	s23, s8
 80213f0:	9307      	str	r3, [sp, #28]
 80213f2:	eeb0 ba64 	vmov.f32	s22, s9
 80213f6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80213fa:	eef0 aa45 	vmov.f32	s21, s10
 80213fe:	9015      	str	r0, [sp, #84]	; 0x54
 8021400:	9112      	str	r1, [sp, #72]	; 0x48
 8021402:	6850      	ldr	r0, [r2, #4]
 8021404:	9310      	str	r3, [sp, #64]	; 0x40
 8021406:	6812      	ldr	r2, [r2, #0]
 8021408:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802140a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802140e:	fb00 1303 	mla	r3, r0, r3, r1
 8021412:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021416:	18d3      	adds	r3, r2, r3
 8021418:	930a      	str	r3, [sp, #40]	; 0x28
 802141a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	9311      	str	r3, [sp, #68]	; 0x44
 8021420:	9b07      	ldr	r3, [sp, #28]
 8021422:	009b      	lsls	r3, r3, #2
 8021424:	930e      	str	r3, [sp, #56]	; 0x38
 8021426:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021428:	2b00      	cmp	r3, #0
 802142a:	dc03      	bgt.n	8021434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802142c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802142e:	2b00      	cmp	r3, #0
 8021430:	f340 832e 	ble.w	8021a90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021434:	9b06      	ldr	r3, [sp, #24]
 8021436:	2b00      	cmp	r3, #0
 8021438:	f340 8186 	ble.w	8021748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 802143c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802143e:	1423      	asrs	r3, r4, #16
 8021440:	1412      	asrs	r2, r2, #16
 8021442:	d42f      	bmi.n	80214a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021444:	1c51      	adds	r1, r2, #1
 8021446:	9807      	ldr	r0, [sp, #28]
 8021448:	4288      	cmp	r0, r1
 802144a:	dd2e      	ble.n	80214aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802144c:	2b00      	cmp	r3, #0
 802144e:	db2c      	blt.n	80214aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021450:	1c59      	adds	r1, r3, #1
 8021452:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021454:	4288      	cmp	r0, r1
 8021456:	dd28      	ble.n	80214aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021458:	9b06      	ldr	r3, [sp, #24]
 802145a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802145c:	3b01      	subs	r3, #1
 802145e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021460:	fb02 1203 	mla	r2, r2, r3, r1
 8021464:	1412      	asrs	r2, r2, #16
 8021466:	d42b      	bmi.n	80214c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021468:	3201      	adds	r2, #1
 802146a:	9907      	ldr	r1, [sp, #28]
 802146c:	4291      	cmp	r1, r2
 802146e:	dd27      	ble.n	80214c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021470:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021472:	fb02 4303 	mla	r3, r2, r3, r4
 8021476:	141b      	asrs	r3, r3, #16
 8021478:	d422      	bmi.n	80214c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802147a:	3301      	adds	r3, #1
 802147c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802147e:	429a      	cmp	r2, r3
 8021480:	dd1e      	ble.n	80214c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021484:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021488:	1cdd      	adds	r5, r3, #3
 802148a:	f1bb 0f00 	cmp.w	fp, #0
 802148e:	f300 81c4 	bgt.w	802181a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021492:	9b06      	ldr	r3, [sp, #24]
 8021494:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802149a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802149e:	4423      	add	r3, r4
 80214a0:	930a      	str	r3, [sp, #40]	; 0x28
 80214a2:	e153      	b.n	802174c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 80214a4:	1c51      	adds	r1, r2, #1
 80214a6:	f040 8142 	bne.w	802172e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80214aa:	9907      	ldr	r1, [sp, #28]
 80214ac:	428a      	cmp	r2, r1
 80214ae:	f280 813e 	bge.w	802172e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80214b2:	1c5a      	adds	r2, r3, #1
 80214b4:	f2c0 813b 	blt.w	802172e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80214b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214ba:	4293      	cmp	r3, r2
 80214bc:	f280 8137 	bge.w	802172e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80214c0:	9b06      	ldr	r3, [sp, #24]
 80214c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80214c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80214c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	dde2      	ble.n	8021492 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80214cc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80214ce:	1423      	asrs	r3, r4, #16
 80214d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80214d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80214d6:	1409      	asrs	r1, r1, #16
 80214d8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80214dc:	f100 8187 	bmi.w	80217ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80214e0:	1c4e      	adds	r6, r1, #1
 80214e2:	9f07      	ldr	r7, [sp, #28]
 80214e4:	42b7      	cmp	r7, r6
 80214e6:	f340 8184 	ble.w	80217f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80214ea:	2b00      	cmp	r3, #0
 80214ec:	f2c0 8181 	blt.w	80217f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80214f0:	1c5e      	adds	r6, r3, #1
 80214f2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80214f4:	42b7      	cmp	r7, r6
 80214f6:	f340 817c 	ble.w	80217f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80214fa:	9e07      	ldr	r6, [sp, #28]
 80214fc:	fb03 1306 	mla	r3, r3, r6, r1
 8021500:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021502:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802150a:	0e1f      	lsrs	r7, r3, #24
 802150c:	2a00      	cmp	r2, #0
 802150e:	f000 815c 	beq.w	80217ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021512:	6871      	ldr	r1, [r6, #4]
 8021514:	910b      	str	r1, [sp, #44]	; 0x2c
 8021516:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802151a:	2800      	cmp	r0, #0
 802151c:	f000 815e 	beq.w	80217dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8021520:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021522:	eb06 0c01 	add.w	ip, r6, r1
 8021526:	5876      	ldr	r6, [r6, r1]
 8021528:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802152c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021530:	9608      	str	r6, [sp, #32]
 8021532:	0e0e      	lsrs	r6, r1, #24
 8021534:	910c      	str	r1, [sp, #48]	; 0x30
 8021536:	b292      	uxth	r2, r2
 8021538:	b280      	uxth	r0, r0
 802153a:	fb02 fa00 	mul.w	sl, r2, r0
 802153e:	0112      	lsls	r2, r2, #4
 8021540:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021544:	eba2 080a 	sub.w	r8, r2, sl
 8021548:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802154c:	b280      	uxth	r0, r0
 802154e:	fa1f f888 	uxth.w	r8, r8
 8021552:	1a09      	subs	r1, r1, r0
 8021554:	fb08 f20e 	mul.w	r2, r8, lr
 8021558:	b289      	uxth	r1, r1
 802155a:	fb01 2207 	mla	r2, r1, r7, r2
 802155e:	fb00 2209 	mla	r2, r0, r9, r2
 8021562:	fb0a 2206 	mla	r2, sl, r6, r2
 8021566:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802156a:	2a00      	cmp	r2, #0
 802156c:	f000 80d4 	beq.w	8021718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021570:	2fff      	cmp	r7, #255	; 0xff
 8021572:	d01a      	beq.n	80215aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8021574:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021578:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802157c:	fb07 fc0c 	mul.w	ip, r7, ip
 8021580:	435f      	muls	r7, r3
 8021582:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021586:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802158a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802158e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021592:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8021596:	4463      	add	r3, ip
 8021598:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802159c:	0a1b      	lsrs	r3, r3, #8
 802159e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80215a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215a6:	ea43 030b 	orr.w	r3, r3, fp
 80215aa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80215ae:	d01e      	beq.n	80215ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80215b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80215b2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80215b6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80215ba:	fb0e fb0b 	mul.w	fp, lr, fp
 80215be:	fb0e fe07 	mul.w	lr, lr, r7
 80215c2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80215c6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80215ca:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80215ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215d2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80215d6:	44dc      	add	ip, fp
 80215d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215e0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80215e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215e8:	ea4c 070e 	orr.w	r7, ip, lr
 80215ec:	970b      	str	r7, [sp, #44]	; 0x2c
 80215ee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80215f2:	d01e      	beq.n	8021632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80215f4:	9f08      	ldr	r7, [sp, #32]
 80215f6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80215fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80215fe:	fb09 fe0e 	mul.w	lr, r9, lr
 8021602:	fb09 f907 	mul.w	r9, r9, r7
 8021606:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802160a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802160e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021612:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021616:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802161a:	44f4      	add	ip, lr
 802161c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021620:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021624:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021628:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802162c:	ea4c 0709 	orr.w	r7, ip, r9
 8021630:	9708      	str	r7, [sp, #32]
 8021632:	2eff      	cmp	r6, #255	; 0xff
 8021634:	d01c      	beq.n	8021670 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8021636:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021638:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802163c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021640:	fb06 fe0e 	mul.w	lr, r6, lr
 8021644:	437e      	muls	r6, r7
 8021646:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802164a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802164e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021652:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021656:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802165a:	44f4      	add	ip, lr
 802165c:	0a36      	lsrs	r6, r6, #8
 802165e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021662:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021666:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802166a:	ea4c 0606 	orr.w	r6, ip, r6
 802166e:	960c      	str	r6, [sp, #48]	; 0x30
 8021670:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021672:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021676:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802167a:	2aff      	cmp	r2, #255	; 0xff
 802167c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021680:	fb08 f606 	mul.w	r6, r8, r6
 8021684:	fb01 6607 	mla	r6, r1, r7, r6
 8021688:	9f08      	ldr	r7, [sp, #32]
 802168a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802168e:	fb00 6607 	mla	r6, r0, r7, r6
 8021692:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021694:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021698:	fb0a 6607 	mla	r6, sl, r7, r6
 802169c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802169e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80216a2:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80216a6:	fb08 f807 	mul.w	r8, r8, r7
 80216aa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80216ae:	fb01 8303 	mla	r3, r1, r3, r8
 80216b2:	9908      	ldr	r1, [sp, #32]
 80216b4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80216b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80216ba:	fb00 330c 	mla	r3, r0, ip, r3
 80216be:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80216c2:	fb0a 3a00 	mla	sl, sl, r0, r3
 80216c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80216ce:	ea46 060a 	orr.w	r6, r6, sl
 80216d2:	b2f0      	uxtb	r0, r6
 80216d4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80216d8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80216dc:	f000 8084 	beq.w	80217e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80216e0:	43d2      	mvns	r2, r2
 80216e2:	782b      	ldrb	r3, [r5, #0]
 80216e4:	b2d2      	uxtb	r2, r2
 80216e6:	fb03 f702 	mul.w	r7, r3, r2
 80216ea:	1c7b      	adds	r3, r7, #1
 80216ec:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80216f0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80216f4:	702b      	strb	r3, [r5, #0]
 80216f6:	786b      	ldrb	r3, [r5, #1]
 80216f8:	fb03 f002 	mul.w	r0, r3, r2
 80216fc:	1c43      	adds	r3, r0, #1
 80216fe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021702:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021706:	706b      	strb	r3, [r5, #1]
 8021708:	78ab      	ldrb	r3, [r5, #2]
 802170a:	4353      	muls	r3, r2
 802170c:	1c5a      	adds	r2, r3, #1
 802170e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021712:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021716:	70ae      	strb	r6, [r5, #2]
 8021718:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802171a:	3503      	adds	r5, #3
 802171c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802171e:	4413      	add	r3, r2
 8021720:	9329      	str	r3, [sp, #164]	; 0xa4
 8021722:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021724:	441c      	add	r4, r3
 8021726:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021728:	3b01      	subs	r3, #1
 802172a:	9313      	str	r3, [sp, #76]	; 0x4c
 802172c:	e6cb      	b.n	80214c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802172e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021730:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021732:	4413      	add	r3, r2
 8021734:	9329      	str	r3, [sp, #164]	; 0xa4
 8021736:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021738:	441c      	add	r4, r3
 802173a:	9b06      	ldr	r3, [sp, #24]
 802173c:	3b01      	subs	r3, #1
 802173e:	9306      	str	r3, [sp, #24]
 8021740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021742:	3303      	adds	r3, #3
 8021744:	930a      	str	r3, [sp, #40]	; 0x28
 8021746:	e675      	b.n	8021434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021748:	f47f ae86 	bne.w	8021458 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802174c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802174e:	2b00      	cmp	r3, #0
 8021750:	f340 819e 	ble.w	8021a90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021758:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802175a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802175e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021762:	eef0 6a48 	vmov.f32	s13, s16
 8021766:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802176a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802176e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021772:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021776:	eef0 6a68 	vmov.f32	s13, s17
 802177a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802177e:	ee16 4a90 	vmov	r4, s13
 8021782:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021786:	ee69 7a27 	vmul.f32	s15, s18, s15
 802178a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802178e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021792:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021796:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802179a:	ee18 2a10 	vmov	r2, s16
 802179e:	eeb0 8a47 	vmov.f32	s16, s14
 80217a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80217a6:	ee18 2a90 	vmov	r2, s17
 80217aa:	932b      	str	r3, [sp, #172]	; 0xac
 80217ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217ae:	eef0 8a67 	vmov.f32	s17, s15
 80217b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80217b6:	932c      	str	r3, [sp, #176]	; 0xb0
 80217b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80217bc:	3b01      	subs	r3, #1
 80217be:	9312      	str	r3, [sp, #72]	; 0x48
 80217c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217c2:	bf08      	it	eq
 80217c4:	4613      	moveq	r3, r2
 80217c6:	9306      	str	r3, [sp, #24]
 80217c8:	e62d      	b.n	8021426 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80217ca:	b150      	cbz	r0, 80217e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80217cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80217ce:	5871      	ldr	r1, [r6, r1]
 80217d0:	26ff      	movs	r6, #255	; 0xff
 80217d2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80217d6:	9108      	str	r1, [sp, #32]
 80217d8:	46b6      	mov	lr, r6
 80217da:	e6ac      	b.n	8021536 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80217dc:	26ff      	movs	r6, #255	; 0xff
 80217de:	46b1      	mov	r9, r6
 80217e0:	e6a9      	b.n	8021536 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80217e2:	26ff      	movs	r6, #255	; 0xff
 80217e4:	46b1      	mov	r9, r6
 80217e6:	e7f7      	b.n	80217d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80217e8:	7028      	strb	r0, [r5, #0]
 80217ea:	7069      	strb	r1, [r5, #1]
 80217ec:	e793      	b.n	8021716 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80217ee:	1c4f      	adds	r7, r1, #1
 80217f0:	d192      	bne.n	8021718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80217f2:	9e07      	ldr	r6, [sp, #28]
 80217f4:	428e      	cmp	r6, r1
 80217f6:	dd8f      	ble.n	8021718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80217f8:	1c5e      	adds	r6, r3, #1
 80217fa:	db8d      	blt.n	8021718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80217fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80217fe:	429e      	cmp	r6, r3
 8021800:	dd8a      	ble.n	8021718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021802:	9600      	str	r6, [sp, #0]
 8021804:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8021808:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802180c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802180e:	4629      	mov	r1, r5
 8021810:	9b07      	ldr	r3, [sp, #28]
 8021812:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021814:	f7ff fc8e 	bl	8021134 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8021818:	e77e      	b.n	8021718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802181a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802181c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021820:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021822:	9e07      	ldr	r6, [sp, #28]
 8021824:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021828:	1409      	asrs	r1, r1, #16
 802182a:	1423      	asrs	r3, r4, #16
 802182c:	fb06 1303 	mla	r3, r6, r3, r1
 8021830:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021832:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021836:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802183a:	0e1f      	lsrs	r7, r3, #24
 802183c:	2a00      	cmp	r2, #0
 802183e:	f000 8113 	beq.w	8021a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8021842:	6871      	ldr	r1, [r6, #4]
 8021844:	910d      	str	r1, [sp, #52]	; 0x34
 8021846:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802184a:	2800      	cmp	r0, #0
 802184c:	f000 8115 	beq.w	8021a7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8021850:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021852:	eb06 0c01 	add.w	ip, r6, r1
 8021856:	5876      	ldr	r6, [r6, r1]
 8021858:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802185c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021860:	9609      	str	r6, [sp, #36]	; 0x24
 8021862:	0e0e      	lsrs	r6, r1, #24
 8021864:	910f      	str	r1, [sp, #60]	; 0x3c
 8021866:	b292      	uxth	r2, r2
 8021868:	b280      	uxth	r0, r0
 802186a:	fb02 fa00 	mul.w	sl, r2, r0
 802186e:	0112      	lsls	r2, r2, #4
 8021870:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021874:	eba2 080a 	sub.w	r8, r2, sl
 8021878:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802187c:	b280      	uxth	r0, r0
 802187e:	fa1f f888 	uxth.w	r8, r8
 8021882:	1a09      	subs	r1, r1, r0
 8021884:	fb08 f20e 	mul.w	r2, r8, lr
 8021888:	b289      	uxth	r1, r1
 802188a:	fb01 2207 	mla	r2, r1, r7, r2
 802188e:	fb00 2209 	mla	r2, r0, r9, r2
 8021892:	fb0a 2206 	mla	r2, sl, r6, r2
 8021896:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802189a:	2a00      	cmp	r2, #0
 802189c:	f000 80da 	beq.w	8021a54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 80218a0:	2fff      	cmp	r7, #255	; 0xff
 80218a2:	d01a      	beq.n	80218da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 80218a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80218a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218ac:	fb07 fc0c 	mul.w	ip, r7, ip
 80218b0:	435f      	muls	r7, r3
 80218b2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80218b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80218ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218be:	4463      	add	r3, ip
 80218c0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80218c4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80218c8:	0a1b      	lsrs	r3, r3, #8
 80218ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218d2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80218d6:	ea43 030c 	orr.w	r3, r3, ip
 80218da:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80218de:	d021      	beq.n	8021924 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 80218e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80218e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80218e6:	fb0e f707 	mul.w	r7, lr, r7
 80218ea:	9713      	str	r7, [sp, #76]	; 0x4c
 80218ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80218ee:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80218f2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80218f4:	fb0e fe0c 	mul.w	lr, lr, ip
 80218f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021900:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021904:	44bc      	add	ip, r7
 8021906:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802190a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802190e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021912:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021916:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802191a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802191e:	ea4c 070e 	orr.w	r7, ip, lr
 8021922:	970d      	str	r7, [sp, #52]	; 0x34
 8021924:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021928:	d01e      	beq.n	8021968 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802192a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802192c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021930:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021934:	fb09 fe0e 	mul.w	lr, r9, lr
 8021938:	fb09 f907 	mul.w	r9, r9, r7
 802193c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021940:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021944:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021948:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802194c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021950:	44f4      	add	ip, lr
 8021952:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021956:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802195a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802195e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021962:	ea4c 0709 	orr.w	r7, ip, r9
 8021966:	9709      	str	r7, [sp, #36]	; 0x24
 8021968:	2eff      	cmp	r6, #255	; 0xff
 802196a:	d01c      	beq.n	80219a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 802196c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802196e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021972:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021976:	fb06 fe0e 	mul.w	lr, r6, lr
 802197a:	437e      	muls	r6, r7
 802197c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021980:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021984:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021988:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802198c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021990:	44f4      	add	ip, lr
 8021992:	0a36      	lsrs	r6, r6, #8
 8021994:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021998:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802199c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219a0:	ea4c 0606 	orr.w	r6, ip, r6
 80219a4:	960f      	str	r6, [sp, #60]	; 0x3c
 80219a6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80219a8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80219ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219b0:	2aff      	cmp	r2, #255	; 0xff
 80219b2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80219b6:	fb08 f606 	mul.w	r6, r8, r6
 80219ba:	fb01 6607 	mla	r6, r1, r7, r6
 80219be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80219c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219c4:	fb00 6607 	mla	r6, r0, r7, r6
 80219c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80219ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219ce:	fb0a 6607 	mla	r6, sl, r7, r6
 80219d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80219d4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80219d8:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80219dc:	fb08 f807 	mul.w	r8, r8, r7
 80219e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80219e4:	fb01 8303 	mla	r3, r1, r3, r8
 80219e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80219ea:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80219ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80219f0:	fb00 330c 	mla	r3, r0, ip, r3
 80219f4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80219f8:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80219fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021a00:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021a04:	ea46 060e 	orr.w	r6, r6, lr
 8021a08:	b2f0      	uxtb	r0, r6
 8021a0a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8021a0e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8021a12:	d038      	beq.n	8021a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8021a14:	43d2      	mvns	r2, r2
 8021a16:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8021a1a:	b2d2      	uxtb	r2, r2
 8021a1c:	4357      	muls	r7, r2
 8021a1e:	1c7b      	adds	r3, r7, #1
 8021a20:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021a24:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021a28:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8021a2c:	4350      	muls	r0, r2
 8021a2e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8021a32:	1c43      	adds	r3, r0, #1
 8021a34:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021a38:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021a3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021a40:	4353      	muls	r3, r2
 8021a42:	f805 1c02 	strb.w	r1, [r5, #-2]
 8021a46:	1c5a      	adds	r2, r3, #1
 8021a48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021a4c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021a50:	f805 6c01 	strb.w	r6, [r5, #-1]
 8021a54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021a56:	3503      	adds	r5, #3
 8021a58:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021a5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a5e:	4413      	add	r3, r2
 8021a60:	9329      	str	r3, [sp, #164]	; 0xa4
 8021a62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021a64:	441c      	add	r4, r3
 8021a66:	e510      	b.n	802148a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8021a68:	b150      	cbz	r0, 8021a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8021a6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021a6c:	5871      	ldr	r1, [r6, r1]
 8021a6e:	26ff      	movs	r6, #255	; 0xff
 8021a70:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8021a74:	9109      	str	r1, [sp, #36]	; 0x24
 8021a76:	46b6      	mov	lr, r6
 8021a78:	e6f5      	b.n	8021866 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8021a7a:	26ff      	movs	r6, #255	; 0xff
 8021a7c:	46b1      	mov	r9, r6
 8021a7e:	e6f2      	b.n	8021866 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8021a80:	26ff      	movs	r6, #255	; 0xff
 8021a82:	46b1      	mov	r9, r6
 8021a84:	e7f7      	b.n	8021a76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8021a86:	f805 0c03 	strb.w	r0, [r5, #-3]
 8021a8a:	f805 1c02 	strb.w	r1, [r5, #-2]
 8021a8e:	e7df      	b.n	8021a50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8021a90:	b017      	add	sp, #92	; 0x5c
 8021a92:	ecbd 8b08 	vpop	{d8-d11}
 8021a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021a9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8021a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021aa0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8021aa4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021aa8:	2800      	cmp	r0, #0
 8021aaa:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8021aae:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8021ab2:	fb0c 0e03 	mla	lr, ip, r3, r0
 8021ab6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8021aba:	db6b      	blt.n	8021b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021abc:	4580      	cmp	r8, r0
 8021abe:	dd69      	ble.n	8021b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021ac0:	f1bc 0f00 	cmp.w	ip, #0
 8021ac4:	db66      	blt.n	8021b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021ac6:	45e1      	cmp	r9, ip
 8021ac8:	dd64      	ble.n	8021b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021aca:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021ace:	f01e 0f01 	tst.w	lr, #1
 8021ad2:	5d16      	ldrb	r6, [r2, r4]
 8021ad4:	bf0c      	ite	eq
 8021ad6:	f006 060f 	andeq.w	r6, r6, #15
 8021ada:	1136      	asrne	r6, r6, #4
 8021adc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021ae0:	b2f6      	uxtb	r6, r6
 8021ae2:	f110 0a01 	adds.w	sl, r0, #1
 8021ae6:	d457      	bmi.n	8021b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021ae8:	45d0      	cmp	r8, sl
 8021aea:	dd55      	ble.n	8021b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021aec:	f1bc 0f00 	cmp.w	ip, #0
 8021af0:	db52      	blt.n	8021b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021af2:	45e1      	cmp	r9, ip
 8021af4:	dd50      	ble.n	8021b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021af6:	2f00      	cmp	r7, #0
 8021af8:	f000 80ac 	beq.w	8021c54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8021afc:	f10e 0b01 	add.w	fp, lr, #1
 8021b00:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8021b04:	f01b 0f01 	tst.w	fp, #1
 8021b08:	5d14      	ldrb	r4, [r2, r4]
 8021b0a:	bf0c      	ite	eq
 8021b0c:	f004 040f 	andeq.w	r4, r4, #15
 8021b10:	1124      	asrne	r4, r4, #4
 8021b12:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021b16:	b2e4      	uxtb	r4, r4
 8021b18:	2d00      	cmp	r5, #0
 8021b1a:	f000 8096 	beq.w	8021c4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8021b1e:	2800      	cmp	r0, #0
 8021b20:	f10c 0c01 	add.w	ip, ip, #1
 8021b24:	db3c      	blt.n	8021ba0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021b26:	4580      	cmp	r8, r0
 8021b28:	dd3a      	ble.n	8021ba0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021b2a:	f1bc 0f00 	cmp.w	ip, #0
 8021b2e:	db37      	blt.n	8021ba0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021b30:	45e1      	cmp	r9, ip
 8021b32:	dd35      	ble.n	8021ba0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021b34:	eb03 0b0e 	add.w	fp, r3, lr
 8021b38:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8021b3c:	f01b 0f01 	tst.w	fp, #1
 8021b40:	5c10      	ldrb	r0, [r2, r0]
 8021b42:	bf0c      	ite	eq
 8021b44:	f000 000f 	andeq.w	r0, r0, #15
 8021b48:	1100      	asrne	r0, r0, #4
 8021b4a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021b4e:	b2c0      	uxtb	r0, r0
 8021b50:	f1ba 0f00 	cmp.w	sl, #0
 8021b54:	db26      	blt.n	8021ba4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021b56:	45d0      	cmp	r8, sl
 8021b58:	dd24      	ble.n	8021ba4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021b5a:	f1bc 0f00 	cmp.w	ip, #0
 8021b5e:	db21      	blt.n	8021ba4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021b60:	45e1      	cmp	r9, ip
 8021b62:	dd1f      	ble.n	8021ba4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021b64:	b307      	cbz	r7, 8021ba8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8021b66:	3301      	adds	r3, #1
 8021b68:	449e      	add	lr, r3
 8021b6a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021b6e:	f01e 0f01 	tst.w	lr, #1
 8021b72:	5cd3      	ldrb	r3, [r2, r3]
 8021b74:	bf0c      	ite	eq
 8021b76:	f003 030f 	andeq.w	r3, r3, #15
 8021b7a:	111b      	asrne	r3, r3, #4
 8021b7c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021b80:	b2db      	uxtb	r3, r3
 8021b82:	2f0f      	cmp	r7, #15
 8021b84:	d911      	bls.n	8021baa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8021b86:	4b35      	ldr	r3, [pc, #212]	; (8021c5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8021b88:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021b8c:	4a34      	ldr	r2, [pc, #208]	; (8021c60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8021b8e:	4835      	ldr	r0, [pc, #212]	; (8021c64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8021b90:	f002 fb5a 	bl	8024248 <__assert_func>
 8021b94:	2600      	movs	r6, #0
 8021b96:	e7a4      	b.n	8021ae2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8021b98:	2400      	movs	r4, #0
 8021b9a:	e7bd      	b.n	8021b18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8021b9c:	463c      	mov	r4, r7
 8021b9e:	e7be      	b.n	8021b1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8021ba0:	2000      	movs	r0, #0
 8021ba2:	e7d5      	b.n	8021b50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8021ba4:	2300      	movs	r3, #0
 8021ba6:	e7ec      	b.n	8021b82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8021ba8:	463b      	mov	r3, r7
 8021baa:	2d0f      	cmp	r5, #15
 8021bac:	d8eb      	bhi.n	8021b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8021bae:	b2bf      	uxth	r7, r7
 8021bb0:	b2ad      	uxth	r5, r5
 8021bb2:	fb07 f205 	mul.w	r2, r7, r5
 8021bb6:	013f      	lsls	r7, r7, #4
 8021bb8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8021bbc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8021bc0:	1abf      	subs	r7, r7, r2
 8021bc2:	b2ad      	uxth	r5, r5
 8021bc4:	b2bf      	uxth	r7, r7
 8021bc6:	ebac 0c05 	sub.w	ip, ip, r5
 8021bca:	437c      	muls	r4, r7
 8021bcc:	fa1f fc8c 	uxth.w	ip, ip
 8021bd0:	fb06 440c 	mla	r4, r6, ip, r4
 8021bd4:	fb05 4400 	mla	r4, r5, r0, r4
 8021bd8:	fb02 4203 	mla	r2, r2, r3, r4
 8021bdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021be0:	b38a      	cbz	r2, 8021c46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8021be2:	4b21      	ldr	r3, [pc, #132]	; (8021c68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8021be4:	681c      	ldr	r4, [r3, #0]
 8021be6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8021bea:	b2e5      	uxtb	r5, r4
 8021bec:	4353      	muls	r3, r2
 8021bee:	1c5a      	adds	r2, r3, #1
 8021bf0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021bf4:	1212      	asrs	r2, r2, #8
 8021bf6:	b290      	uxth	r0, r2
 8021bf8:	43d2      	mvns	r2, r2
 8021bfa:	fb15 f500 	smulbb	r5, r5, r0
 8021bfe:	b2d3      	uxtb	r3, r2
 8021c00:	780a      	ldrb	r2, [r1, #0]
 8021c02:	fb02 5203 	mla	r2, r2, r3, r5
 8021c06:	b292      	uxth	r2, r2
 8021c08:	1c55      	adds	r5, r2, #1
 8021c0a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021c0e:	784d      	ldrb	r5, [r1, #1]
 8021c10:	fb15 f503 	smulbb	r5, r5, r3
 8021c14:	1212      	asrs	r2, r2, #8
 8021c16:	700a      	strb	r2, [r1, #0]
 8021c18:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8021c1c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021c20:	fb02 5200 	mla	r2, r2, r0, r5
 8021c24:	b292      	uxth	r2, r2
 8021c26:	1c55      	adds	r5, r2, #1
 8021c28:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021c2c:	1212      	asrs	r2, r2, #8
 8021c2e:	704a      	strb	r2, [r1, #1]
 8021c30:	788a      	ldrb	r2, [r1, #2]
 8021c32:	fb12 f303 	smulbb	r3, r2, r3
 8021c36:	fb04 3300 	mla	r3, r4, r0, r3
 8021c3a:	b29b      	uxth	r3, r3
 8021c3c:	1c5a      	adds	r2, r3, #1
 8021c3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021c42:	121b      	asrs	r3, r3, #8
 8021c44:	708b      	strb	r3, [r1, #2]
 8021c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c4a:	2f0f      	cmp	r7, #15
 8021c4c:	d89b      	bhi.n	8021b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8021c4e:	462b      	mov	r3, r5
 8021c50:	4628      	mov	r0, r5
 8021c52:	e7ac      	b.n	8021bae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8021c54:	2d00      	cmp	r5, #0
 8021c56:	d1a1      	bne.n	8021b9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8021c58:	462c      	mov	r4, r5
 8021c5a:	e7f8      	b.n	8021c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8021c5c:	08028c47 	.word	0x08028c47
 8021c60:	0802913e 	.word	0x0802913e
 8021c64:	08028d10 	.word	0x08028d10
 8021c68:	2000bca0 	.word	0x2000bca0

08021c6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c70:	ed2d 8b08 	vpush	{d8-d11}
 8021c74:	b097      	sub	sp, #92	; 0x5c
 8021c76:	eeb0 aa40 	vmov.f32	s20, s0
 8021c7a:	eef0 9a60 	vmov.f32	s19, s1
 8021c7e:	9308      	str	r3, [sp, #32]
 8021c80:	eeb0 9a41 	vmov.f32	s18, s2
 8021c84:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021c88:	eeb0 8a62 	vmov.f32	s16, s5
 8021c8c:	9214      	str	r2, [sp, #80]	; 0x50
 8021c8e:	eef0 8a43 	vmov.f32	s17, s6
 8021c92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021c94:	eef0 ba44 	vmov.f32	s23, s8
 8021c98:	9309      	str	r3, [sp, #36]	; 0x24
 8021c9a:	eeb0 ba64 	vmov.f32	s22, s9
 8021c9e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8021ca2:	eef0 aa45 	vmov.f32	s21, s10
 8021ca6:	9015      	str	r0, [sp, #84]	; 0x54
 8021ca8:	910c      	str	r1, [sp, #48]	; 0x30
 8021caa:	930e      	str	r3, [sp, #56]	; 0x38
 8021cac:	6850      	ldr	r0, [r2, #4]
 8021cae:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8021cb2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021cb6:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8021cba:	fb00 1803 	mla	r8, r0, r3, r1
 8021cbe:	6813      	ldr	r3, [r2, #0]
 8021cc0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021cc4:	4498      	add	r8, r3
 8021cc6:	f10b 0301 	add.w	r3, fp, #1
 8021cca:	f023 0301 	bic.w	r3, r3, #1
 8021cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8021cd0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021cd2:	681f      	ldr	r7, [r3, #0]
 8021cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	dc03      	bgt.n	8021ce2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	f340 8238 	ble.w	8022152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8021ce2:	9b08      	ldr	r3, [sp, #32]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	f340 810c 	ble.w	8021f02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8021cea:	142a      	asrs	r2, r5, #16
 8021cec:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021cf0:	d42c      	bmi.n	8021d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021cf2:	1c51      	adds	r1, r2, #1
 8021cf4:	458b      	cmp	fp, r1
 8021cf6:	dd2c      	ble.n	8021d52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021cf8:	2b00      	cmp	r3, #0
 8021cfa:	db2a      	blt.n	8021d52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021cfc:	1c59      	adds	r1, r3, #1
 8021cfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021d00:	4288      	cmp	r0, r1
 8021d02:	dd26      	ble.n	8021d52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021d04:	9b08      	ldr	r3, [sp, #32]
 8021d06:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021d08:	3b01      	subs	r3, #1
 8021d0a:	fb02 5203 	mla	r2, r2, r3, r5
 8021d0e:	1412      	asrs	r2, r2, #16
 8021d10:	d429      	bmi.n	8021d66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021d12:	3201      	adds	r2, #1
 8021d14:	4593      	cmp	fp, r2
 8021d16:	dd26      	ble.n	8021d66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021d18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021d1a:	fb02 6303 	mla	r3, r2, r3, r6
 8021d1e:	141b      	asrs	r3, r3, #16
 8021d20:	d421      	bmi.n	8021d66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021d22:	3301      	adds	r3, #1
 8021d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d26:	429a      	cmp	r2, r3
 8021d28:	dd1d      	ble.n	8021d66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021d2a:	f108 0e03 	add.w	lr, r8, #3
 8021d2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021d32:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8021d36:	f1b9 0f00 	cmp.w	r9, #0
 8021d3a:	f300 814f 	bgt.w	8021fdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8021d3e:	9b08      	ldr	r3, [sp, #32]
 8021d40:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021d44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021d48:	44a0      	add	r8, r4
 8021d4a:	e0dc      	b.n	8021f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8021d4c:	1c51      	adds	r1, r2, #1
 8021d4e:	f040 80ce 	bne.w	8021eee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021d52:	4593      	cmp	fp, r2
 8021d54:	f340 80cb 	ble.w	8021eee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021d58:	1c5a      	adds	r2, r3, #1
 8021d5a:	f2c0 80c8 	blt.w	8021eee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d60:	4293      	cmp	r3, r2
 8021d62:	f280 80c4 	bge.w	8021eee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021d66:	9b08      	ldr	r3, [sp, #32]
 8021d68:	46c1      	mov	r9, r8
 8021d6a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8021d6e:	930d      	str	r3, [sp, #52]	; 0x34
 8021d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	dde3      	ble.n	8021d3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021d76:	1428      	asrs	r0, r5, #16
 8021d78:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021d7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021d80:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021d84:	f100 8111 	bmi.w	8021faa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8021d88:	f100 0c01 	add.w	ip, r0, #1
 8021d8c:	45e3      	cmp	fp, ip
 8021d8e:	f340 810e 	ble.w	8021fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	f2c0 810b 	blt.w	8021fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8021d98:	f103 0c01 	add.w	ip, r3, #1
 8021d9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021d9e:	4564      	cmp	r4, ip
 8021da0:	f340 8105 	ble.w	8021fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8021da4:	fb03 030a 	mla	r3, r3, sl, r0
 8021da8:	0858      	lsrs	r0, r3, #1
 8021daa:	07dc      	lsls	r4, r3, #31
 8021dac:	5c38      	ldrb	r0, [r7, r0]
 8021dae:	bf54      	ite	pl
 8021db0:	f000 000f 	andpl.w	r0, r0, #15
 8021db4:	1100      	asrmi	r0, r0, #4
 8021db6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021dba:	b2c0      	uxtb	r0, r0
 8021dbc:	2a00      	cmp	r2, #0
 8021dbe:	f000 80e1 	beq.w	8021f84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8021dc2:	f103 0e01 	add.w	lr, r3, #1
 8021dc6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8021dca:	f01e 0f01 	tst.w	lr, #1
 8021dce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021dd2:	bf0c      	ite	eq
 8021dd4:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021dd8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021ddc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021de0:	fa5f f48c 	uxtb.w	r4, ip
 8021de4:	9410      	str	r4, [sp, #64]	; 0x40
 8021de6:	b1f9      	cbz	r1, 8021e28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8021de8:	4453      	add	r3, sl
 8021dea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021dee:	07dc      	lsls	r4, r3, #31
 8021df0:	f103 0301 	add.w	r3, r3, #1
 8021df4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021df8:	bf54      	ite	pl
 8021dfa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021dfe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021e02:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021e06:	fa5f f48c 	uxtb.w	r4, ip
 8021e0a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021e0e:	940a      	str	r4, [sp, #40]	; 0x28
 8021e10:	07dc      	lsls	r4, r3, #31
 8021e12:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021e16:	bf54      	ite	pl
 8021e18:	f00c 030f 	andpl.w	r3, ip, #15
 8021e1c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8021e20:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021e24:	b2db      	uxtb	r3, r3
 8021e26:	9311      	str	r3, [sp, #68]	; 0x44
 8021e28:	b292      	uxth	r2, r2
 8021e2a:	b289      	uxth	r1, r1
 8021e2c:	0113      	lsls	r3, r2, #4
 8021e2e:	fb02 fc01 	mul.w	ip, r2, r1
 8021e32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e34:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021e38:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8021e3c:	eba3 030c 	sub.w	r3, r3, ip
 8021e40:	b289      	uxth	r1, r1
 8021e42:	b29b      	uxth	r3, r3
 8021e44:	ebae 0e01 	sub.w	lr, lr, r1
 8021e48:	4353      	muls	r3, r2
 8021e4a:	fa1f fe8e 	uxth.w	lr, lr
 8021e4e:	fb00 320e 	mla	r2, r0, lr, r3
 8021e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e54:	fb01 2203 	mla	r2, r1, r3, r2
 8021e58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021e5a:	fb0c 2203 	mla	r2, ip, r3, r2
 8021e5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021e62:	2a00      	cmp	r2, #0
 8021e64:	d039      	beq.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021e66:	4bbd      	ldr	r3, [pc, #756]	; (802215c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8021e68:	6819      	ldr	r1, [r3, #0]
 8021e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e6c:	fa5f fc81 	uxtb.w	ip, r1
 8021e70:	435a      	muls	r2, r3
 8021e72:	1c53      	adds	r3, r2, #1
 8021e74:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021e78:	1212      	asrs	r2, r2, #8
 8021e7a:	b290      	uxth	r0, r2
 8021e7c:	43d2      	mvns	r2, r2
 8021e7e:	fb1c fc00 	smulbb	ip, ip, r0
 8021e82:	b2d3      	uxtb	r3, r2
 8021e84:	f899 2000 	ldrb.w	r2, [r9]
 8021e88:	fb02 c203 	mla	r2, r2, r3, ip
 8021e8c:	b292      	uxth	r2, r2
 8021e8e:	f102 0c01 	add.w	ip, r2, #1
 8021e92:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021e96:	f899 c001 	ldrb.w	ip, [r9, #1]
 8021e9a:	fb1c fc03 	smulbb	ip, ip, r3
 8021e9e:	1212      	asrs	r2, r2, #8
 8021ea0:	f889 2000 	strb.w	r2, [r9]
 8021ea4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8021ea8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8021eac:	fb02 c200 	mla	r2, r2, r0, ip
 8021eb0:	b292      	uxth	r2, r2
 8021eb2:	f102 0c01 	add.w	ip, r2, #1
 8021eb6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021eba:	1212      	asrs	r2, r2, #8
 8021ebc:	f889 2001 	strb.w	r2, [r9, #1]
 8021ec0:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021ec4:	fb12 f303 	smulbb	r3, r2, r3
 8021ec8:	fb01 3300 	mla	r3, r1, r0, r3
 8021ecc:	b29b      	uxth	r3, r3
 8021ece:	1c5a      	adds	r2, r3, #1
 8021ed0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ed4:	121b      	asrs	r3, r3, #8
 8021ed6:	f889 3002 	strb.w	r3, [r9, #2]
 8021eda:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021edc:	f109 0903 	add.w	r9, r9, #3
 8021ee0:	441d      	add	r5, r3
 8021ee2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ee4:	441e      	add	r6, r3
 8021ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ee8:	3b01      	subs	r3, #1
 8021eea:	930d      	str	r3, [sp, #52]	; 0x34
 8021eec:	e740      	b.n	8021d70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021eee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021ef0:	f108 0803 	add.w	r8, r8, #3
 8021ef4:	441d      	add	r5, r3
 8021ef6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ef8:	441e      	add	r6, r3
 8021efa:	9b08      	ldr	r3, [sp, #32]
 8021efc:	3b01      	subs	r3, #1
 8021efe:	9308      	str	r3, [sp, #32]
 8021f00:	e6ef      	b.n	8021ce2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021f02:	f47f aeff 	bne.w	8021d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8021f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	f340 8122 	ble.w	8022152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8021f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021f14:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021f18:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021f1c:	eef0 6a48 	vmov.f32	s13, s16
 8021f20:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021f24:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021f28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f2c:	ee16 5a90 	vmov	r5, s13
 8021f30:	eef0 6a68 	vmov.f32	s13, s17
 8021f34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f38:	ee16 6a90 	vmov	r6, s13
 8021f3c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021f40:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021f44:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021f48:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021f4c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021f50:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021f54:	ee18 2a10 	vmov	r2, s16
 8021f58:	eeb0 8a47 	vmov.f32	s16, s14
 8021f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f60:	ee18 2a90 	vmov	r2, s17
 8021f64:	932b      	str	r3, [sp, #172]	; 0xac
 8021f66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021f68:	eef0 8a67 	vmov.f32	s17, s15
 8021f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f70:	932c      	str	r3, [sp, #176]	; 0xb0
 8021f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021f74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f76:	3b01      	subs	r3, #1
 8021f78:	930c      	str	r3, [sp, #48]	; 0x30
 8021f7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021f7c:	bf08      	it	eq
 8021f7e:	4613      	moveq	r3, r2
 8021f80:	9308      	str	r3, [sp, #32]
 8021f82:	e6a7      	b.n	8021cd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021f84:	2900      	cmp	r1, #0
 8021f86:	f43f af4f 	beq.w	8021e28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8021f8a:	4453      	add	r3, sl
 8021f8c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021f90:	07db      	lsls	r3, r3, #31
 8021f92:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021f96:	bf54      	ite	pl
 8021f98:	f00c 030f 	andpl.w	r3, ip, #15
 8021f9c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8021fa0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021fa4:	b2db      	uxtb	r3, r3
 8021fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8021fa8:	e73e      	b.n	8021e28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8021faa:	1c44      	adds	r4, r0, #1
 8021fac:	d195      	bne.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021fae:	4583      	cmp	fp, r0
 8021fb0:	dd93      	ble.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021fb2:	1c5c      	adds	r4, r3, #1
 8021fb4:	db91      	blt.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021fb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021fb8:	429c      	cmp	r4, r3
 8021fba:	dd8e      	ble.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021fbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021fbe:	9002      	str	r0, [sp, #8]
 8021fc0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021fc2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8021fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fc8:	463a      	mov	r2, r7
 8021fca:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021fce:	e9cd b300 	strd	fp, r3, [sp]
 8021fd2:	4649      	mov	r1, r9
 8021fd4:	4653      	mov	r3, sl
 8021fd6:	f7ff fd61 	bl	8021a9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8021fda:	e77e      	b.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021fdc:	142a      	asrs	r2, r5, #16
 8021fde:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021fe2:	1433      	asrs	r3, r6, #16
 8021fe4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021fe8:	fb0a 2303 	mla	r3, sl, r3, r2
 8021fec:	085a      	lsrs	r2, r3, #1
 8021fee:	07dc      	lsls	r4, r3, #31
 8021ff0:	5cba      	ldrb	r2, [r7, r2]
 8021ff2:	bf54      	ite	pl
 8021ff4:	f002 020f 	andpl.w	r2, r2, #15
 8021ff8:	1112      	asrmi	r2, r2, #4
 8021ffa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021ffe:	b2d2      	uxtb	r2, r2
 8022000:	2900      	cmp	r1, #0
 8022002:	f000 8093 	beq.w	802212c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8022006:	1c5c      	adds	r4, r3, #1
 8022008:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 802200c:	07e4      	lsls	r4, r4, #31
 802200e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022012:	bf54      	ite	pl
 8022014:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022018:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802201c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022020:	fa5f f48c 	uxtb.w	r4, ip
 8022024:	9412      	str	r4, [sp, #72]	; 0x48
 8022026:	b300      	cbz	r0, 802206a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022028:	4453      	add	r3, sl
 802202a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802202e:	07dc      	lsls	r4, r3, #31
 8022030:	f103 0301 	add.w	r3, r3, #1
 8022034:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022038:	bf54      	ite	pl
 802203a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802203e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022042:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022046:	fa5f f48c 	uxtb.w	r4, ip
 802204a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802204e:	940b      	str	r4, [sp, #44]	; 0x2c
 8022050:	07dc      	lsls	r4, r3, #31
 8022052:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022056:	bf54      	ite	pl
 8022058:	f00c 0c0f 	andpl.w	ip, ip, #15
 802205c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022060:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022064:	fa5f f38c 	uxtb.w	r3, ip
 8022068:	9313      	str	r3, [sp, #76]	; 0x4c
 802206a:	b289      	uxth	r1, r1
 802206c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802206e:	b280      	uxth	r0, r0
 8022070:	fb01 f300 	mul.w	r3, r1, r0
 8022074:	0109      	lsls	r1, r1, #4
 8022076:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802207a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802207e:	1ac9      	subs	r1, r1, r3
 8022080:	b280      	uxth	r0, r0
 8022082:	b289      	uxth	r1, r1
 8022084:	ebac 0c00 	sub.w	ip, ip, r0
 8022088:	4361      	muls	r1, r4
 802208a:	fa1f fc8c 	uxth.w	ip, ip
 802208e:	fb02 120c 	mla	r2, r2, ip, r1
 8022092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022094:	fb00 2001 	mla	r0, r0, r1, r2
 8022098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802209a:	fb03 0302 	mla	r3, r3, r2, r0
 802209e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d039      	beq.n	802211a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80220a6:	4a2d      	ldr	r2, [pc, #180]	; (802215c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80220a8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80220ac:	6810      	ldr	r0, [r2, #0]
 80220ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80220b0:	fa5f fc80 	uxtb.w	ip, r0
 80220b4:	4353      	muls	r3, r2
 80220b6:	1c5a      	adds	r2, r3, #1
 80220b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80220bc:	121b      	asrs	r3, r3, #8
 80220be:	b29a      	uxth	r2, r3
 80220c0:	43db      	mvns	r3, r3
 80220c2:	fb1c fc02 	smulbb	ip, ip, r2
 80220c6:	b2db      	uxtb	r3, r3
 80220c8:	fb01 c103 	mla	r1, r1, r3, ip
 80220cc:	b289      	uxth	r1, r1
 80220ce:	f101 0c01 	add.w	ip, r1, #1
 80220d2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80220d6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80220da:	fb1c fc03 	smulbb	ip, ip, r3
 80220de:	1209      	asrs	r1, r1, #8
 80220e0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80220e4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80220e8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80220ec:	fb01 c102 	mla	r1, r1, r2, ip
 80220f0:	b289      	uxth	r1, r1
 80220f2:	f101 0c01 	add.w	ip, r1, #1
 80220f6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80220fa:	1209      	asrs	r1, r1, #8
 80220fc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022100:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022104:	fb11 f303 	smulbb	r3, r1, r3
 8022108:	fb00 3002 	mla	r0, r0, r2, r3
 802210c:	b280      	uxth	r0, r0
 802210e:	1c42      	adds	r2, r0, #1
 8022110:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022114:	1200      	asrs	r0, r0, #8
 8022116:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802211a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802211c:	f10e 0e03 	add.w	lr, lr, #3
 8022120:	f109 39ff 	add.w	r9, r9, #4294967295
 8022124:	441d      	add	r5, r3
 8022126:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022128:	441e      	add	r6, r3
 802212a:	e604      	b.n	8021d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 802212c:	2800      	cmp	r0, #0
 802212e:	d09c      	beq.n	802206a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022130:	4453      	add	r3, sl
 8022132:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022136:	07db      	lsls	r3, r3, #31
 8022138:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802213c:	bf54      	ite	pl
 802213e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022142:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022146:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802214a:	fa5f f38c 	uxtb.w	r3, ip
 802214e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022150:	e78b      	b.n	802206a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022152:	b017      	add	sp, #92	; 0x5c
 8022154:	ecbd 8b08 	vpop	{d8-d11}
 8022158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802215c:	2000bca0 	.word	0x2000bca0

08022160 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022164:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022168:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802216c:	2800      	cmp	r0, #0
 802216e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022172:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022176:	fb0c 0e03 	mla	lr, ip, r3, r0
 802217a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802217e:	db6b      	blt.n	8022258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022180:	4580      	cmp	r8, r0
 8022182:	dd69      	ble.n	8022258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022184:	f1bc 0f00 	cmp.w	ip, #0
 8022188:	db66      	blt.n	8022258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802218a:	45e1      	cmp	r9, ip
 802218c:	dd64      	ble.n	8022258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802218e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022192:	f01e 0f01 	tst.w	lr, #1
 8022196:	5d16      	ldrb	r6, [r2, r4]
 8022198:	bf0c      	ite	eq
 802219a:	f006 060f 	andeq.w	r6, r6, #15
 802219e:	1136      	asrne	r6, r6, #4
 80221a0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80221a4:	b2f6      	uxtb	r6, r6
 80221a6:	f110 0a01 	adds.w	sl, r0, #1
 80221aa:	d457      	bmi.n	802225c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80221ac:	45d0      	cmp	r8, sl
 80221ae:	dd55      	ble.n	802225c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80221b0:	f1bc 0f00 	cmp.w	ip, #0
 80221b4:	db52      	blt.n	802225c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80221b6:	45e1      	cmp	r9, ip
 80221b8:	dd50      	ble.n	802225c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80221ba:	2f00      	cmp	r7, #0
 80221bc:	f000 80a5 	beq.w	802230a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80221c0:	f10e 0b01 	add.w	fp, lr, #1
 80221c4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80221c8:	f01b 0f01 	tst.w	fp, #1
 80221cc:	5d14      	ldrb	r4, [r2, r4]
 80221ce:	bf0c      	ite	eq
 80221d0:	f004 040f 	andeq.w	r4, r4, #15
 80221d4:	1124      	asrne	r4, r4, #4
 80221d6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80221da:	b2e4      	uxtb	r4, r4
 80221dc:	2d00      	cmp	r5, #0
 80221de:	f000 808f 	beq.w	8022300 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80221e2:	2800      	cmp	r0, #0
 80221e4:	f10c 0c01 	add.w	ip, ip, #1
 80221e8:	db3c      	blt.n	8022264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80221ea:	4580      	cmp	r8, r0
 80221ec:	dd3a      	ble.n	8022264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80221ee:	f1bc 0f00 	cmp.w	ip, #0
 80221f2:	db37      	blt.n	8022264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80221f4:	45e1      	cmp	r9, ip
 80221f6:	dd35      	ble.n	8022264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80221f8:	eb03 0b0e 	add.w	fp, r3, lr
 80221fc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022200:	f01b 0f01 	tst.w	fp, #1
 8022204:	5c10      	ldrb	r0, [r2, r0]
 8022206:	bf0c      	ite	eq
 8022208:	f000 000f 	andeq.w	r0, r0, #15
 802220c:	1100      	asrne	r0, r0, #4
 802220e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022212:	b2c0      	uxtb	r0, r0
 8022214:	f1ba 0f00 	cmp.w	sl, #0
 8022218:	db26      	blt.n	8022268 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802221a:	45d0      	cmp	r8, sl
 802221c:	dd24      	ble.n	8022268 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802221e:	f1bc 0f00 	cmp.w	ip, #0
 8022222:	db21      	blt.n	8022268 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022224:	45e1      	cmp	r9, ip
 8022226:	dd1f      	ble.n	8022268 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022228:	b307      	cbz	r7, 802226c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 802222a:	3301      	adds	r3, #1
 802222c:	449e      	add	lr, r3
 802222e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022232:	f01e 0f01 	tst.w	lr, #1
 8022236:	5cd3      	ldrb	r3, [r2, r3]
 8022238:	bf0c      	ite	eq
 802223a:	f003 030f 	andeq.w	r3, r3, #15
 802223e:	111b      	asrne	r3, r3, #4
 8022240:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022244:	b2db      	uxtb	r3, r3
 8022246:	2f0f      	cmp	r7, #15
 8022248:	d911      	bls.n	802226e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 802224a:	4b32      	ldr	r3, [pc, #200]	; (8022314 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 802224c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022250:	4a31      	ldr	r2, [pc, #196]	; (8022318 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022252:	4832      	ldr	r0, [pc, #200]	; (802231c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022254:	f001 fff8 	bl	8024248 <__assert_func>
 8022258:	2600      	movs	r6, #0
 802225a:	e7a4      	b.n	80221a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 802225c:	2400      	movs	r4, #0
 802225e:	e7bd      	b.n	80221dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022260:	463c      	mov	r4, r7
 8022262:	e7be      	b.n	80221e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022264:	2000      	movs	r0, #0
 8022266:	e7d5      	b.n	8022214 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022268:	2300      	movs	r3, #0
 802226a:	e7ec      	b.n	8022246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 802226c:	463b      	mov	r3, r7
 802226e:	2d0f      	cmp	r5, #15
 8022270:	d8eb      	bhi.n	802224a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022272:	b2bf      	uxth	r7, r7
 8022274:	b2ad      	uxth	r5, r5
 8022276:	fb07 f205 	mul.w	r2, r7, r5
 802227a:	013f      	lsls	r7, r7, #4
 802227c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022280:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022284:	1abf      	subs	r7, r7, r2
 8022286:	b2ad      	uxth	r5, r5
 8022288:	b2bf      	uxth	r7, r7
 802228a:	ebac 0c05 	sub.w	ip, ip, r5
 802228e:	437c      	muls	r4, r7
 8022290:	fa1f fc8c 	uxth.w	ip, ip
 8022294:	fb06 440c 	mla	r4, r6, ip, r4
 8022298:	fb05 4400 	mla	r4, r5, r0, r4
 802229c:	fb02 4303 	mla	r3, r2, r3, r4
 80222a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80222a4:	b353      	cbz	r3, 80222fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80222a6:	4a1e      	ldr	r2, [pc, #120]	; (8022320 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80222a8:	7808      	ldrb	r0, [r1, #0]
 80222aa:	6814      	ldr	r4, [r2, #0]
 80222ac:	b29a      	uxth	r2, r3
 80222ae:	43db      	mvns	r3, r3
 80222b0:	b2e5      	uxtb	r5, r4
 80222b2:	b2db      	uxtb	r3, r3
 80222b4:	fb15 f502 	smulbb	r5, r5, r2
 80222b8:	fb00 5003 	mla	r0, r0, r3, r5
 80222bc:	b280      	uxth	r0, r0
 80222be:	1c45      	adds	r5, r0, #1
 80222c0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80222c4:	784d      	ldrb	r5, [r1, #1]
 80222c6:	fb15 f503 	smulbb	r5, r5, r3
 80222ca:	1200      	asrs	r0, r0, #8
 80222cc:	7008      	strb	r0, [r1, #0]
 80222ce:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80222d2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80222d6:	fb00 5002 	mla	r0, r0, r2, r5
 80222da:	b280      	uxth	r0, r0
 80222dc:	1c45      	adds	r5, r0, #1
 80222de:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80222e2:	1200      	asrs	r0, r0, #8
 80222e4:	7048      	strb	r0, [r1, #1]
 80222e6:	7888      	ldrb	r0, [r1, #2]
 80222e8:	fb10 f303 	smulbb	r3, r0, r3
 80222ec:	fb04 3202 	mla	r2, r4, r2, r3
 80222f0:	b292      	uxth	r2, r2
 80222f2:	1c53      	adds	r3, r2, #1
 80222f4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80222f8:	1212      	asrs	r2, r2, #8
 80222fa:	708a      	strb	r2, [r1, #2]
 80222fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022300:	2f0f      	cmp	r7, #15
 8022302:	d8a2      	bhi.n	802224a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022304:	462b      	mov	r3, r5
 8022306:	4628      	mov	r0, r5
 8022308:	e7b3      	b.n	8022272 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802230a:	2d00      	cmp	r5, #0
 802230c:	d1a8      	bne.n	8022260 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802230e:	462c      	mov	r4, r5
 8022310:	e7f8      	b.n	8022304 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022312:	bf00      	nop
 8022314:	08028c47 	.word	0x08028c47
 8022318:	0802913e 	.word	0x0802913e
 802231c:	08028d10 	.word	0x08028d10
 8022320:	2000bca0 	.word	0x2000bca0

08022324 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022328:	ed2d 8b08 	vpush	{d8-d11}
 802232c:	b095      	sub	sp, #84	; 0x54
 802232e:	461c      	mov	r4, r3
 8022330:	eeb0 aa40 	vmov.f32	s20, s0
 8022334:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022338:	eef0 9a60 	vmov.f32	s19, s1
 802233c:	920e      	str	r2, [sp, #56]	; 0x38
 802233e:	eeb0 9a41 	vmov.f32	s18, s2
 8022342:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022344:	eeb0 8a62 	vmov.f32	s16, s5
 8022348:	9307      	str	r3, [sp, #28]
 802234a:	eef0 8a43 	vmov.f32	s17, s6
 802234e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022352:	eef0 ba44 	vmov.f32	s23, s8
 8022356:	9013      	str	r0, [sp, #76]	; 0x4c
 8022358:	eeb0 ba64 	vmov.f32	s22, s9
 802235c:	9109      	str	r1, [sp, #36]	; 0x24
 802235e:	eef0 aa45 	vmov.f32	s21, s10
 8022362:	9308      	str	r3, [sp, #32]
 8022364:	6850      	ldr	r0, [r2, #4]
 8022366:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802236a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 802236e:	fb00 1803 	mla	r8, r0, r3, r1
 8022372:	6813      	ldr	r3, [r2, #0]
 8022374:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022378:	4498      	add	r8, r3
 802237a:	9b07      	ldr	r3, [sp, #28]
 802237c:	3301      	adds	r3, #1
 802237e:	f023 0301 	bic.w	r3, r3, #1
 8022382:	930b      	str	r3, [sp, #44]	; 0x2c
 8022384:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022386:	681f      	ldr	r7, [r3, #0]
 8022388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802238a:	2b00      	cmp	r3, #0
 802238c:	dc03      	bgt.n	8022396 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802238e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022390:	2b00      	cmp	r3, #0
 8022392:	f340 8238 	ble.w	8022806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022396:	2c00      	cmp	r4, #0
 8022398:	f340 8109 	ble.w	80225ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802239c:	142a      	asrs	r2, r5, #16
 802239e:	ea4f 4326 	mov.w	r3, r6, asr #16
 80223a2:	d42b      	bmi.n	80223fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80223a4:	1c51      	adds	r1, r2, #1
 80223a6:	9807      	ldr	r0, [sp, #28]
 80223a8:	4288      	cmp	r0, r1
 80223aa:	dd2a      	ble.n	8022402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	db28      	blt.n	8022402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80223b0:	1c59      	adds	r1, r3, #1
 80223b2:	9808      	ldr	r0, [sp, #32]
 80223b4:	4288      	cmp	r0, r1
 80223b6:	dd24      	ble.n	8022402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80223b8:	1e63      	subs	r3, r4, #1
 80223ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80223bc:	fb02 5203 	mla	r2, r2, r3, r5
 80223c0:	1412      	asrs	r2, r2, #16
 80223c2:	d429      	bmi.n	8022418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80223c4:	3201      	adds	r2, #1
 80223c6:	9907      	ldr	r1, [sp, #28]
 80223c8:	4291      	cmp	r1, r2
 80223ca:	dd25      	ble.n	8022418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80223cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80223ce:	fb02 6303 	mla	r3, r2, r3, r6
 80223d2:	141b      	asrs	r3, r3, #16
 80223d4:	d420      	bmi.n	8022418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80223d6:	3301      	adds	r3, #1
 80223d8:	9a08      	ldr	r2, [sp, #32]
 80223da:	429a      	cmp	r2, r3
 80223dc:	dd1c      	ble.n	8022418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80223de:	f108 0e03 	add.w	lr, r8, #3
 80223e2:	46a1      	mov	r9, r4
 80223e4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80223e8:	f1b9 0f00 	cmp.w	r9, #0
 80223ec:	f300 8155 	bgt.w	802269a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80223f0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80223f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80223f8:	44a0      	add	r8, r4
 80223fa:	e0da      	b.n	80225b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80223fc:	1c50      	adds	r0, r2, #1
 80223fe:	f040 80ce 	bne.w	802259e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022402:	9907      	ldr	r1, [sp, #28]
 8022404:	4291      	cmp	r1, r2
 8022406:	f340 80ca 	ble.w	802259e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802240a:	1c59      	adds	r1, r3, #1
 802240c:	f2c0 80c7 	blt.w	802259e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022410:	9a08      	ldr	r2, [sp, #32]
 8022412:	4293      	cmp	r3, r2
 8022414:	f280 80c3 	bge.w	802259e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022418:	46a3      	mov	fp, r4
 802241a:	46c1      	mov	r9, r8
 802241c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022420:	f1bb 0f00 	cmp.w	fp, #0
 8022424:	dde4      	ble.n	80223f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022426:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802242a:	1428      	asrs	r0, r5, #16
 802242c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022430:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022434:	920a      	str	r2, [sp, #40]	; 0x28
 8022436:	f100 8116 	bmi.w	8022666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802243a:	f100 0c01 	add.w	ip, r0, #1
 802243e:	9a07      	ldr	r2, [sp, #28]
 8022440:	4562      	cmp	r2, ip
 8022442:	f340 8112 	ble.w	802266a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022446:	2b00      	cmp	r3, #0
 8022448:	f2c0 810f 	blt.w	802266a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802244c:	f103 0c01 	add.w	ip, r3, #1
 8022450:	9a08      	ldr	r2, [sp, #32]
 8022452:	4562      	cmp	r2, ip
 8022454:	f340 8109 	ble.w	802266a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022458:	fb03 030a 	mla	r3, r3, sl, r0
 802245c:	0858      	lsrs	r0, r3, #1
 802245e:	07da      	lsls	r2, r3, #31
 8022460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022462:	5c38      	ldrb	r0, [r7, r0]
 8022464:	bf54      	ite	pl
 8022466:	f000 000f 	andpl.w	r0, r0, #15
 802246a:	1100      	asrmi	r0, r0, #4
 802246c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022470:	b2c0      	uxtb	r0, r0
 8022472:	2a00      	cmp	r2, #0
 8022474:	f000 80dd 	beq.w	8022632 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022478:	f103 0e01 	add.w	lr, r3, #1
 802247c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022480:	f01e 0f01 	tst.w	lr, #1
 8022484:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022488:	bf0c      	ite	eq
 802248a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802248e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022492:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022496:	fa5f fc8c 	uxtb.w	ip, ip
 802249a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802249e:	b301      	cbz	r1, 80224e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80224a0:	4453      	add	r3, sl
 80224a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80224a6:	07da      	lsls	r2, r3, #31
 80224a8:	f103 0301 	add.w	r3, r3, #1
 80224ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80224b0:	bf54      	ite	pl
 80224b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80224b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80224ba:	07da      	lsls	r2, r3, #31
 80224bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80224c0:	fa5f fc8c 	uxtb.w	ip, ip
 80224c4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80224c8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80224cc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80224d0:	bf54      	ite	pl
 80224d2:	f00c 030f 	andpl.w	r3, ip, #15
 80224d6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80224da:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80224de:	b2db      	uxtb	r3, r3
 80224e0:	9310      	str	r3, [sp, #64]	; 0x40
 80224e2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80224e6:	b289      	uxth	r1, r1
 80224e8:	fb02 f301 	mul.w	r3, r2, r1
 80224ec:	0112      	lsls	r2, r2, #4
 80224ee:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80224f2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80224f6:	1ad2      	subs	r2, r2, r3
 80224f8:	fa1f fe81 	uxth.w	lr, r1
 80224fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80224fe:	b292      	uxth	r2, r2
 8022500:	ebac 0c0e 	sub.w	ip, ip, lr
 8022504:	434a      	muls	r2, r1
 8022506:	fa1f fc8c 	uxth.w	ip, ip
 802250a:	fb00 200c 	mla	r0, r0, ip, r2
 802250e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022510:	fb0e 0002 	mla	r0, lr, r2, r0
 8022514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022516:	fb03 0002 	mla	r0, r3, r2, r0
 802251a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802251e:	b3a8      	cbz	r0, 802258c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022520:	4bbb      	ldr	r3, [pc, #748]	; (8022810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022522:	28ff      	cmp	r0, #255	; 0xff
 8022524:	681b      	ldr	r3, [r3, #0]
 8022526:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802252a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802252e:	b2db      	uxtb	r3, r3
 8022530:	f000 8092 	beq.w	8022658 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8022534:	b282      	uxth	r2, r0
 8022536:	43c0      	mvns	r0, r0
 8022538:	f899 e000 	ldrb.w	lr, [r9]
 802253c:	fb13 f302 	smulbb	r3, r3, r2
 8022540:	b2c0      	uxtb	r0, r0
 8022542:	fb11 f102 	smulbb	r1, r1, r2
 8022546:	fb0e 3300 	mla	r3, lr, r0, r3
 802254a:	fb1c f202 	smulbb	r2, ip, r2
 802254e:	b29b      	uxth	r3, r3
 8022550:	f103 0e01 	add.w	lr, r3, #1
 8022554:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022558:	121b      	asrs	r3, r3, #8
 802255a:	f889 3000 	strb.w	r3, [r9]
 802255e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022562:	fb03 1100 	mla	r1, r3, r0, r1
 8022566:	b289      	uxth	r1, r1
 8022568:	1c4b      	adds	r3, r1, #1
 802256a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802256e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8022572:	fb03 2000 	mla	r0, r3, r0, r2
 8022576:	1209      	asrs	r1, r1, #8
 8022578:	b280      	uxth	r0, r0
 802257a:	f889 1001 	strb.w	r1, [r9, #1]
 802257e:	f100 0c01 	add.w	ip, r0, #1
 8022582:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8022586:	1200      	asrs	r0, r0, #8
 8022588:	f889 0002 	strb.w	r0, [r9, #2]
 802258c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802258e:	f109 0903 	add.w	r9, r9, #3
 8022592:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022596:	441d      	add	r5, r3
 8022598:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802259a:	441e      	add	r6, r3
 802259c:	e740      	b.n	8022420 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802259e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80225a0:	3c01      	subs	r4, #1
 80225a2:	f108 0803 	add.w	r8, r8, #3
 80225a6:	441d      	add	r5, r3
 80225a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80225aa:	441e      	add	r6, r3
 80225ac:	e6f3      	b.n	8022396 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80225ae:	f47f af03 	bne.w	80223b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80225b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	f340 8126 	ble.w	8022806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80225ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80225be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80225c0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80225c4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80225c8:	eef0 6a48 	vmov.f32	s13, s16
 80225cc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80225d0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80225d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225d8:	ee16 5a90 	vmov	r5, s13
 80225dc:	eef0 6a68 	vmov.f32	s13, s17
 80225e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225e4:	ee16 6a90 	vmov	r6, s13
 80225e8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80225ec:	ee69 7a27 	vmul.f32	s15, s18, s15
 80225f0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80225f4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80225f8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80225fc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022600:	ee18 2a10 	vmov	r2, s16
 8022604:	eeb0 8a47 	vmov.f32	s16, s14
 8022608:	fb92 f3f3 	sdiv	r3, r2, r3
 802260c:	ee18 2a90 	vmov	r2, s17
 8022610:	9329      	str	r3, [sp, #164]	; 0xa4
 8022612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022614:	eef0 8a67 	vmov.f32	s17, s15
 8022618:	fb92 f3f3 	sdiv	r3, r2, r3
 802261c:	932a      	str	r3, [sp, #168]	; 0xa8
 802261e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022622:	3b01      	subs	r3, #1
 8022624:	9309      	str	r3, [sp, #36]	; 0x24
 8022626:	bf08      	it	eq
 8022628:	4614      	moveq	r4, r2
 802262a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802262c:	bf18      	it	ne
 802262e:	461c      	movne	r4, r3
 8022630:	e6aa      	b.n	8022388 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022632:	2900      	cmp	r1, #0
 8022634:	f43f af55 	beq.w	80224e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022638:	4453      	add	r3, sl
 802263a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802263e:	07db      	lsls	r3, r3, #31
 8022640:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022644:	bf54      	ite	pl
 8022646:	f00c 030f 	andpl.w	r3, ip, #15
 802264a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802264e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022652:	b2db      	uxtb	r3, r3
 8022654:	930c      	str	r3, [sp, #48]	; 0x30
 8022656:	e744      	b.n	80224e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022658:	f889 3000 	strb.w	r3, [r9]
 802265c:	f889 1001 	strb.w	r1, [r9, #1]
 8022660:	f889 c002 	strb.w	ip, [r9, #2]
 8022664:	e792      	b.n	802258c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022666:	1c42      	adds	r2, r0, #1
 8022668:	d190      	bne.n	802258c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802266a:	9a07      	ldr	r2, [sp, #28]
 802266c:	4282      	cmp	r2, r0
 802266e:	dd8d      	ble.n	802258c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022670:	1c5a      	adds	r2, r3, #1
 8022672:	db8b      	blt.n	802258c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022674:	9a08      	ldr	r2, [sp, #32]
 8022676:	429a      	cmp	r2, r3
 8022678:	dd88      	ble.n	802258c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802267a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802267c:	9105      	str	r1, [sp, #20]
 802267e:	4649      	mov	r1, r9
 8022680:	9002      	str	r0, [sp, #8]
 8022682:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022684:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022688:	9b08      	ldr	r3, [sp, #32]
 802268a:	463a      	mov	r2, r7
 802268c:	9301      	str	r3, [sp, #4]
 802268e:	9b07      	ldr	r3, [sp, #28]
 8022690:	9300      	str	r3, [sp, #0]
 8022692:	4653      	mov	r3, sl
 8022694:	f7ff fd64 	bl	8022160 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8022698:	e778      	b.n	802258c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802269a:	142a      	asrs	r2, r5, #16
 802269c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80226a0:	1433      	asrs	r3, r6, #16
 80226a2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80226a6:	fb0a 2303 	mla	r3, sl, r3, r2
 80226aa:	085a      	lsrs	r2, r3, #1
 80226ac:	07d9      	lsls	r1, r3, #31
 80226ae:	5cba      	ldrb	r2, [r7, r2]
 80226b0:	bf54      	ite	pl
 80226b2:	f002 020f 	andpl.w	r2, r2, #15
 80226b6:	1112      	asrmi	r2, r2, #4
 80226b8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80226bc:	b2d2      	uxtb	r2, r2
 80226be:	2800      	cmp	r0, #0
 80226c0:	f000 808a 	beq.w	80227d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80226c4:	f103 0b01 	add.w	fp, r3, #1
 80226c8:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80226cc:	f01b 0f01 	tst.w	fp, #1
 80226d0:	5c79      	ldrb	r1, [r7, r1]
 80226d2:	bf0c      	ite	eq
 80226d4:	f001 010f 	andeq.w	r1, r1, #15
 80226d8:	1109      	asrne	r1, r1, #4
 80226da:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80226de:	b2c9      	uxtb	r1, r1
 80226e0:	9111      	str	r1, [sp, #68]	; 0x44
 80226e2:	f1bc 0f00 	cmp.w	ip, #0
 80226e6:	d019      	beq.n	802271c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80226e8:	4453      	add	r3, sl
 80226ea:	0859      	lsrs	r1, r3, #1
 80226ec:	f013 0f01 	tst.w	r3, #1
 80226f0:	f103 0301 	add.w	r3, r3, #1
 80226f4:	5c79      	ldrb	r1, [r7, r1]
 80226f6:	bf0c      	ite	eq
 80226f8:	f001 010f 	andeq.w	r1, r1, #15
 80226fc:	1109      	asrne	r1, r1, #4
 80226fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022702:	b2c9      	uxtb	r1, r1
 8022704:	910d      	str	r1, [sp, #52]	; 0x34
 8022706:	0859      	lsrs	r1, r3, #1
 8022708:	07db      	lsls	r3, r3, #31
 802270a:	5c79      	ldrb	r1, [r7, r1]
 802270c:	bf54      	ite	pl
 802270e:	f001 010f 	andpl.w	r1, r1, #15
 8022712:	1109      	asrmi	r1, r1, #4
 8022714:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022718:	b2c9      	uxtb	r1, r1
 802271a:	9112      	str	r1, [sp, #72]	; 0x48
 802271c:	b280      	uxth	r0, r0
 802271e:	fa1f fc8c 	uxth.w	ip, ip
 8022722:	fb00 f30c 	mul.w	r3, r0, ip
 8022726:	0100      	lsls	r0, r0, #4
 8022728:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802272c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022730:	1ac0      	subs	r0, r0, r3
 8022732:	fa1f fc8c 	uxth.w	ip, ip
 8022736:	b280      	uxth	r0, r0
 8022738:	eba1 010c 	sub.w	r1, r1, ip
 802273c:	fa1f fb81 	uxth.w	fp, r1
 8022740:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022742:	4348      	muls	r0, r1
 8022744:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022746:	fb02 020b 	mla	r2, r2, fp, r0
 802274a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802274e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022750:	fb03 c302 	mla	r3, r3, r2, ip
 8022754:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022758:	b3ab      	cbz	r3, 80227c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802275a:	4a2d      	ldr	r2, [pc, #180]	; (8022810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802275c:	2bff      	cmp	r3, #255	; 0xff
 802275e:	6811      	ldr	r1, [r2, #0]
 8022760:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8022764:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8022768:	b2c9      	uxtb	r1, r1
 802276a:	d045      	beq.n	80227f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802276c:	b298      	uxth	r0, r3
 802276e:	43db      	mvns	r3, r3
 8022770:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8022774:	fb11 f100 	smulbb	r1, r1, r0
 8022778:	b2db      	uxtb	r3, r3
 802277a:	fb1c fc00 	smulbb	ip, ip, r0
 802277e:	fb02 1103 	mla	r1, r2, r3, r1
 8022782:	fb1b f000 	smulbb	r0, fp, r0
 8022786:	b289      	uxth	r1, r1
 8022788:	1c4a      	adds	r2, r1, #1
 802278a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802278e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022792:	fb02 cc03 	mla	ip, r2, r3, ip
 8022796:	1209      	asrs	r1, r1, #8
 8022798:	fa1f fc8c 	uxth.w	ip, ip
 802279c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80227a0:	f10c 0201 	add.w	r2, ip, #1
 80227a4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80227a8:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 80227ac:	fb02 0303 	mla	r3, r2, r3, r0
 80227b0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80227b4:	b29b      	uxth	r3, r3
 80227b6:	f80e cc02 	strb.w	ip, [lr, #-2]
 80227ba:	1c5a      	adds	r2, r3, #1
 80227bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80227c0:	121b      	asrs	r3, r3, #8
 80227c2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80227c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80227c8:	f10e 0e03 	add.w	lr, lr, #3
 80227cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80227d0:	441d      	add	r5, r3
 80227d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80227d4:	441e      	add	r6, r3
 80227d6:	e607      	b.n	80223e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80227d8:	f1bc 0f00 	cmp.w	ip, #0
 80227dc:	d09e      	beq.n	802271c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80227de:	4453      	add	r3, sl
 80227e0:	0859      	lsrs	r1, r3, #1
 80227e2:	07db      	lsls	r3, r3, #31
 80227e4:	5c79      	ldrb	r1, [r7, r1]
 80227e6:	bf54      	ite	pl
 80227e8:	f001 010f 	andpl.w	r1, r1, #15
 80227ec:	1109      	asrmi	r1, r1, #4
 80227ee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80227f2:	b2c9      	uxtb	r1, r1
 80227f4:	910d      	str	r1, [sp, #52]	; 0x34
 80227f6:	e791      	b.n	802271c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80227f8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80227fc:	f80e cc02 	strb.w	ip, [lr, #-2]
 8022800:	f80e bc01 	strb.w	fp, [lr, #-1]
 8022804:	e7df      	b.n	80227c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022806:	b015      	add	sp, #84	; 0x54
 8022808:	ecbd 8b08 	vpop	{d8-d11}
 802280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022810:	2000bca0 	.word	0x2000bca0

08022814 <CRC_Lock>:
 8022814:	4a1d      	ldr	r2, [pc, #116]	; (802288c <CRC_Lock+0x78>)
 8022816:	b530      	push	{r4, r5, lr}
 8022818:	6813      	ldr	r3, [r2, #0]
 802281a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802281e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022822:	f023 0301 	bic.w	r3, r3, #1
 8022826:	6013      	str	r3, [r2, #0]
 8022828:	4b19      	ldr	r3, [pc, #100]	; (8022890 <CRC_Lock+0x7c>)
 802282a:	681a      	ldr	r2, [r3, #0]
 802282c:	4022      	ands	r2, r4
 802282e:	42aa      	cmp	r2, r5
 8022830:	d005      	beq.n	802283e <CRC_Lock+0x2a>
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022838:	4023      	ands	r3, r4
 802283a:	4293      	cmp	r3, r2
 802283c:	d11d      	bne.n	802287a <CRC_Lock+0x66>
 802283e:	4b15      	ldr	r3, [pc, #84]	; (8022894 <CRC_Lock+0x80>)
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	b9d3      	cbnz	r3, 802287a <CRC_Lock+0x66>
 8022844:	4a14      	ldr	r2, [pc, #80]	; (8022898 <CRC_Lock+0x84>)
 8022846:	6813      	ldr	r3, [r2, #0]
 8022848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802284c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8022850:	d006      	beq.n	8022860 <CRC_Lock+0x4c>
 8022852:	6813      	ldr	r3, [r2, #0]
 8022854:	f240 4283 	movw	r2, #1155	; 0x483
 8022858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802285c:	4293      	cmp	r3, r2
 802285e:	d10c      	bne.n	802287a <CRC_Lock+0x66>
 8022860:	4b0e      	ldr	r3, [pc, #56]	; (802289c <CRC_Lock+0x88>)
 8022862:	2201      	movs	r2, #1
 8022864:	601a      	str	r2, [r3, #0]
 8022866:	681a      	ldr	r2, [r3, #0]
 8022868:	2a00      	cmp	r2, #0
 802286a:	d1fc      	bne.n	8022866 <CRC_Lock+0x52>
 802286c:	4b0c      	ldr	r3, [pc, #48]	; (80228a0 <CRC_Lock+0x8c>)
 802286e:	6018      	str	r0, [r3, #0]
 8022870:	6818      	ldr	r0, [r3, #0]
 8022872:	1a43      	subs	r3, r0, r1
 8022874:	4258      	negs	r0, r3
 8022876:	4158      	adcs	r0, r3
 8022878:	bd30      	pop	{r4, r5, pc}
 802287a:	4b0a      	ldr	r3, [pc, #40]	; (80228a4 <CRC_Lock+0x90>)
 802287c:	2201      	movs	r2, #1
 802287e:	601a      	str	r2, [r3, #0]
 8022880:	681a      	ldr	r2, [r3, #0]
 8022882:	2a00      	cmp	r2, #0
 8022884:	d1fc      	bne.n	8022880 <CRC_Lock+0x6c>
 8022886:	4b08      	ldr	r3, [pc, #32]	; (80228a8 <CRC_Lock+0x94>)
 8022888:	e7f1      	b.n	802286e <CRC_Lock+0x5a>
 802288a:	bf00      	nop
 802288c:	e0002000 	.word	0xe0002000
 8022890:	e000ed00 	.word	0xe000ed00
 8022894:	e0042000 	.word	0xe0042000
 8022898:	5c001000 	.word	0x5c001000
 802289c:	58024c08 	.word	0x58024c08
 80228a0:	58024c00 	.word	0x58024c00
 80228a4:	40023008 	.word	0x40023008
 80228a8:	40023000 	.word	0x40023000

080228ac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80228ac:	6101      	str	r1, [r0, #16]
 80228ae:	4770      	bx	lr

080228b0 <_ZN8touchgfx8Gestures4tickEv>:
 80228b0:	7b83      	ldrb	r3, [r0, #14]
 80228b2:	b14b      	cbz	r3, 80228c8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80228b4:	8903      	ldrh	r3, [r0, #8]
 80228b6:	3301      	adds	r3, #1
 80228b8:	b29b      	uxth	r3, r3
 80228ba:	2b07      	cmp	r3, #7
 80228bc:	8103      	strh	r3, [r0, #8]
 80228be:	bf81      	itttt	hi
 80228c0:	2300      	movhi	r3, #0
 80228c2:	8143      	strhhi	r3, [r0, #10]
 80228c4:	8183      	strhhi	r3, [r0, #12]
 80228c6:	7383      	strbhi	r3, [r0, #14]
 80228c8:	4770      	bx	lr
	...

080228cc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80228cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80228d0:	4604      	mov	r4, r0
 80228d2:	4698      	mov	r8, r3
 80228d4:	8880      	ldrh	r0, [r0, #4]
 80228d6:	4617      	mov	r7, r2
 80228d8:	4b1d      	ldr	r3, [pc, #116]	; (8022950 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80228da:	460e      	mov	r6, r1
 80228dc:	f8ad 0006 	strh.w	r0, [sp, #6]
 80228e0:	eba8 0000 	sub.w	r0, r8, r0
 80228e4:	9300      	str	r3, [sp, #0]
 80228e6:	2300      	movs	r3, #0
 80228e8:	b280      	uxth	r0, r0
 80228ea:	8aa2      	ldrh	r2, [r4, #20]
 80228ec:	f88d 3004 	strb.w	r3, [sp, #4]
 80228f0:	b203      	sxth	r3, r0
 80228f2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80228f6:	88e1      	ldrh	r1, [r4, #6]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	f8ad 800a 	strh.w	r8, [sp, #10]
 80228fe:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022902:	bfb8      	it	lt
 8022904:	4240      	neglt	r0, r0
 8022906:	f8ad 500c 	strh.w	r5, [sp, #12]
 802290a:	bfb8      	it	lt
 802290c:	b203      	sxthlt	r3, r0
 802290e:	4293      	cmp	r3, r2
 8022910:	dc08      	bgt.n	8022924 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8022912:	1a69      	subs	r1, r5, r1
 8022914:	b289      	uxth	r1, r1
 8022916:	b20b      	sxth	r3, r1
 8022918:	2b00      	cmp	r3, #0
 802291a:	bfbc      	itt	lt
 802291c:	4249      	neglt	r1, r1
 802291e:	b20b      	sxthlt	r3, r1
 8022920:	429a      	cmp	r2, r3
 8022922:	da13      	bge.n	802294c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8022924:	6920      	ldr	r0, [r4, #16]
 8022926:	4669      	mov	r1, sp
 8022928:	eba8 0606 	sub.w	r6, r8, r6
 802292c:	1bef      	subs	r7, r5, r7
 802292e:	6803      	ldr	r3, [r0, #0]
 8022930:	685b      	ldr	r3, [r3, #4]
 8022932:	4798      	blx	r3
 8022934:	2300      	movs	r3, #0
 8022936:	2001      	movs	r0, #1
 8022938:	8166      	strh	r6, [r4, #10]
 802293a:	8123      	strh	r3, [r4, #8]
 802293c:	81a7      	strh	r7, [r4, #12]
 802293e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022942:	80e5      	strh	r5, [r4, #6]
 8022944:	73a0      	strb	r0, [r4, #14]
 8022946:	b004      	add	sp, #16
 8022948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802294c:	2000      	movs	r0, #0
 802294e:	e7fa      	b.n	8022946 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8022950:	08027de4 	.word	0x08027de4

08022954 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022956:	461e      	mov	r6, r3
 8022958:	1e4b      	subs	r3, r1, #1
 802295a:	b085      	sub	sp, #20
 802295c:	4604      	mov	r4, r0
 802295e:	2b01      	cmp	r3, #1
 8022960:	460d      	mov	r5, r1
 8022962:	4617      	mov	r7, r2
 8022964:	d84b      	bhi.n	80229fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022966:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802296a:	1cd3      	adds	r3, r2, #3
 802296c:	b29b      	uxth	r3, r3
 802296e:	2b06      	cmp	r3, #6
 8022970:	d916      	bls.n	80229a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022972:	f8df c098 	ldr.w	ip, [pc, #152]	; 8022a0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8022976:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802297a:	f8cd c004 	str.w	ip, [sp, #4]
 802297e:	f04f 0c00 	mov.w	ip, #0
 8022982:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022986:	6900      	ldr	r0, [r0, #16]
 8022988:	f8ad 100c 	strh.w	r1, [sp, #12]
 802298c:	a901      	add	r1, sp, #4
 802298e:	f88d c008 	strb.w	ip, [sp, #8]
 8022992:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022996:	f8ad 300e 	strh.w	r3, [sp, #14]
 802299a:	6803      	ldr	r3, [r0, #0]
 802299c:	689b      	ldr	r3, [r3, #8]
 802299e:	4798      	blx	r3
 80229a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80229a4:	1cd3      	adds	r3, r2, #3
 80229a6:	b29b      	uxth	r3, r3
 80229a8:	2b06      	cmp	r3, #6
 80229aa:	d916      	bls.n	80229da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80229ac:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8022a0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80229b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80229b4:	f8cd c004 	str.w	ip, [sp, #4]
 80229b8:	f04f 0c01 	mov.w	ip, #1
 80229bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80229c0:	6920      	ldr	r0, [r4, #16]
 80229c2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80229c6:	a901      	add	r1, sp, #4
 80229c8:	f88d c008 	strb.w	ip, [sp, #8]
 80229cc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80229d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80229d4:	6803      	ldr	r3, [r0, #0]
 80229d6:	689b      	ldr	r3, [r3, #8]
 80229d8:	4798      	blx	r3
 80229da:	4b0b      	ldr	r3, [pc, #44]	; (8022a08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80229dc:	a901      	add	r1, sp, #4
 80229de:	6920      	ldr	r0, [r4, #16]
 80229e0:	9301      	str	r3, [sp, #4]
 80229e2:	2300      	movs	r3, #0
 80229e4:	f88d 5008 	strb.w	r5, [sp, #8]
 80229e8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80229ec:	f8ad 600c 	strh.w	r6, [sp, #12]
 80229f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80229f4:	6803      	ldr	r3, [r0, #0]
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	4798      	blx	r3
 80229fa:	b005      	add	sp, #20
 80229fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80229fe:	2900      	cmp	r1, #0
 8022a00:	d1eb      	bne.n	80229da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022a02:	80a2      	strh	r2, [r4, #4]
 8022a04:	80c6      	strh	r6, [r0, #6]
 8022a06:	e7e8      	b.n	80229da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022a08:	08027dd0 	.word	0x08027dd0
 8022a0c:	08027df8 	.word	0x08027df8

08022a10 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8022a10:	10c9      	asrs	r1, r1, #3
 8022a12:	2900      	cmp	r1, #0
 8022a14:	bfb8      	it	lt
 8022a16:	4249      	neglt	r1, r1
 8022a18:	2801      	cmp	r0, #1
 8022a1a:	d108      	bne.n	8022a2e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8022a1c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8022a20:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8022a24:	4601      	mov	r1, r0
 8022a26:	dd02      	ble.n	8022a2e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8022a28:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8022a2c:	4770      	bx	lr
 8022a2e:	29ff      	cmp	r1, #255	; 0xff
 8022a30:	bfa8      	it	ge
 8022a32:	21ff      	movge	r1, #255	; 0xff
 8022a34:	4608      	mov	r0, r1
 8022a36:	4770      	bx	lr

08022a38 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8022a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a3c:	688c      	ldr	r4, [r1, #8]
 8022a3e:	b087      	sub	sp, #28
 8022a40:	4607      	mov	r7, r0
 8022a42:	2c00      	cmp	r4, #0
 8022a44:	db2b      	blt.n	8022a9e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022a46:	6803      	ldr	r3, [r0, #0]
 8022a48:	68da      	ldr	r2, [r3, #12]
 8022a4a:	42a2      	cmp	r2, r4
 8022a4c:	dd27      	ble.n	8022a9e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022a4e:	681a      	ldr	r2, [r3, #0]
 8022a50:	691e      	ldr	r6, [r3, #16]
 8022a52:	68cd      	ldr	r5, [r1, #12]
 8022a54:	fb06 2604 	mla	r6, r6, r4, r2
 8022a58:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8022a5c:	698a      	ldr	r2, [r1, #24]
 8022a5e:	f893 a004 	ldrb.w	sl, [r3, #4]
 8022a62:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8022a66:	9205      	str	r2, [sp, #20]
 8022a68:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8022a6c:	9b05      	ldr	r3, [sp, #20]
 8022a6e:	6839      	ldr	r1, [r7, #0]
 8022a70:	eb03 0c02 	add.w	ip, r3, r2
 8022a74:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8022a78:	6889      	ldr	r1, [r1, #8]
 8022a7a:	1898      	adds	r0, r3, r2
 8022a7c:	4288      	cmp	r0, r1
 8022a7e:	db02      	blt.n	8022a86 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8022a80:	1a8b      	subs	r3, r1, r2
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	dd09      	ble.n	8022a9a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8022a86:	6878      	ldr	r0, [r7, #4]
 8022a88:	6801      	ldr	r1, [r0, #0]
 8022a8a:	9400      	str	r4, [sp, #0]
 8022a8c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8022a90:	4653      	mov	r3, sl
 8022a92:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8022a96:	4631      	mov	r1, r6
 8022a98:	47d8      	blx	fp
 8022a9a:	3d01      	subs	r5, #1
 8022a9c:	d1e4      	bne.n	8022a68 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8022a9e:	b007      	add	sp, #28
 8022aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022aa4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022aa4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8022aa8:	b90b      	cbnz	r3, 8022aae <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8022aaa:	f001 b974 	b.w	8023d96 <_ZN8touchgfx7Outline6lineToEii>
 8022aae:	4770      	bx	lr

08022ab0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8022ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ab4:	4604      	mov	r4, r0
 8022ab6:	2600      	movs	r6, #0
 8022ab8:	4b8e      	ldr	r3, [pc, #568]	; (8022cf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8022aba:	f100 0518 	add.w	r5, r0, #24
 8022abe:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8022ac2:	b086      	sub	sp, #24
 8022ac4:	4690      	mov	r8, r2
 8022ac6:	e9c0 3100 	strd	r3, r1, [r0]
 8022aca:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8022ace:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8022ad2:	4628      	mov	r0, r5
 8022ad4:	f001 fb75 	bl	80241c2 <_ZN8touchgfx15RenderingBufferC1Ev>
 8022ad8:	4638      	mov	r0, r7
 8022ada:	f000 fb45 	bl	8023168 <_ZN8touchgfx7OutlineC1Ev>
 8022ade:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8022ae2:	f001 fb23 	bl	802412c <_ZN8touchgfx8ScanlineC1Ev>
 8022ae6:	2301      	movs	r3, #1
 8022ae8:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8022aec:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8022af0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022af4:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8022af8:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8022afc:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8022b00:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8022b04:	f7f4 fbe6 	bl	80172d4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8022b08:	b928      	cbnz	r0, 8022b16 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8022b0a:	4b7b      	ldr	r3, [pc, #492]	; (8022cf8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8022b0c:	2118      	movs	r1, #24
 8022b0e:	4a7b      	ldr	r2, [pc, #492]	; (8022cfc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8022b10:	487b      	ldr	r0, [pc, #492]	; (8022d00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8022b12:	f001 fb99 	bl	8024248 <__assert_func>
 8022b16:	f9b8 2000 	ldrsh.w	r2, [r8]
 8022b1a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8022b1e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8022b22:	4410      	add	r0, r2
 8022b24:	9602      	str	r6, [sp, #8]
 8022b26:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8022b2a:	b280      	uxth	r0, r0
 8022b2c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8022b30:	fa0f fa80 	sxth.w	sl, r0
 8022b34:	f1ba 0f00 	cmp.w	sl, #0
 8022b38:	dd70      	ble.n	8022c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022b3a:	4591      	cmp	r9, r2
 8022b3c:	dd6e      	ble.n	8022c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022b3e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8022b42:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8022b46:	440b      	add	r3, r1
 8022b48:	b29b      	uxth	r3, r3
 8022b4a:	b21e      	sxth	r6, r3
 8022b4c:	2e00      	cmp	r6, #0
 8022b4e:	dd65      	ble.n	8022c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022b50:	458e      	cmp	lr, r1
 8022b52:	dd63      	ble.n	8022c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022b54:	45d1      	cmp	r9, sl
 8022b56:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8022b5a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8022b5e:	bfb8      	it	lt
 8022b60:	fa1f f089 	uxthlt.w	r0, r9
 8022b64:	45b6      	cmp	lr, r6
 8022b66:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022b6a:	bfb8      	it	lt
 8022b6c:	fa1f f38e 	uxthlt.w	r3, lr
 8022b70:	1a80      	subs	r0, r0, r2
 8022b72:	f8ad 100a 	strh.w	r1, [sp, #10]
 8022b76:	1a5b      	subs	r3, r3, r1
 8022b78:	f8ad 000c 	strh.w	r0, [sp, #12]
 8022b7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022b80:	f10d 0808 	add.w	r8, sp, #8
 8022b84:	ae04      	add	r6, sp, #16
 8022b86:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022b8a:	e886 0003 	stmia.w	r6, {r0, r1}
 8022b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8022b92:	4660      	mov	r0, ip
 8022b94:	4631      	mov	r1, r6
 8022b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b98:	4798      	blx	r3
 8022b9a:	6861      	ldr	r1, [r4, #4]
 8022b9c:	4640      	mov	r0, r8
 8022b9e:	3104      	adds	r1, #4
 8022ba0:	f7f5 fa06 	bl	8017fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ba4:	4630      	mov	r0, r6
 8022ba6:	f7f5 fa1b 	bl	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022baa:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8022bae:	f7f4 fb21 	bl	80171f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8022bb2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8022bb6:	4638      	mov	r0, r7
 8022bb8:	f000 fab2 	bl	8023120 <_ZN8touchgfx7Outline5resetEv>
 8022bbc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022bc0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022bc4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8022bc8:	015b      	lsls	r3, r3, #5
 8022bca:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8022bce:	0152      	lsls	r2, r2, #5
 8022bd0:	60e3      	str	r3, [r4, #12]
 8022bd2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022bd6:	60a2      	str	r2, [r4, #8]
 8022bd8:	015b      	lsls	r3, r3, #5
 8022bda:	6123      	str	r3, [r4, #16]
 8022bdc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8022be0:	015b      	lsls	r3, r3, #5
 8022be2:	6163      	str	r3, [r4, #20]
 8022be4:	4b47      	ldr	r3, [pc, #284]	; (8022d04 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8022be6:	6818      	ldr	r0, [r3, #0]
 8022be8:	6803      	ldr	r3, [r0, #0]
 8022bea:	6a1b      	ldr	r3, [r3, #32]
 8022bec:	4798      	blx	r3
 8022bee:	4606      	mov	r6, r0
 8022bf0:	f7ec fa4a 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8022bf4:	6803      	ldr	r3, [r0, #0]
 8022bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bf8:	4798      	blx	r3
 8022bfa:	4607      	mov	r7, r0
 8022bfc:	f7ec fa44 	bl	800f088 <_ZN8touchgfx3HAL3lcdEv>
 8022c00:	6803      	ldr	r3, [r0, #0]
 8022c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022c04:	4798      	blx	r3
 8022c06:	280c      	cmp	r0, #12
 8022c08:	d854      	bhi.n	8022cb4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8022c0a:	e8df f000 	tbb	[pc, r0]
 8022c0e:	554b      	.short	0x554b
 8022c10:	2b6e0a66 	.word	0x2b6e0a66
 8022c14:	5f5f5f3b 	.word	0x5f5f5f3b
 8022c18:	5f5f      	.short	0x5f5f
 8022c1a:	6e          	.byte	0x6e
 8022c1b:	00          	.byte	0x00
 8022c1c:	2300      	movs	r3, #0
 8022c1e:	9303      	str	r3, [sp, #12]
 8022c20:	e7ae      	b.n	8022b80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8022c22:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022c26:	2108      	movs	r1, #8
 8022c28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c2c:	fb92 f1f1 	sdiv	r1, r2, r1
 8022c30:	fb07 1303 	mla	r3, r7, r3, r1
 8022c34:	441e      	add	r6, r3
 8022c36:	4253      	negs	r3, r2
 8022c38:	f002 0207 	and.w	r2, r2, #7
 8022c3c:	f003 0307 	and.w	r3, r3, #7
 8022c40:	bf58      	it	pl
 8022c42:	425a      	negpl	r2, r3
 8022c44:	b2d2      	uxtb	r2, r2
 8022c46:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022c4a:	4628      	mov	r0, r5
 8022c4c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8022c50:	66e1      	str	r1, [r4, #108]	; 0x6c
 8022c52:	e9cd 1700 	strd	r1, r7, [sp]
 8022c56:	4631      	mov	r1, r6
 8022c58:	f001 fabb 	bl	80241d2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8022c5c:	4620      	mov	r0, r4
 8022c5e:	b006      	add	sp, #24
 8022c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c64:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022c68:	2104      	movs	r1, #4
 8022c6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c6e:	fb92 f1f1 	sdiv	r1, r2, r1
 8022c72:	fb07 1303 	mla	r3, r7, r3, r1
 8022c76:	441e      	add	r6, r3
 8022c78:	4253      	negs	r3, r2
 8022c7a:	f002 0203 	and.w	r2, r2, #3
 8022c7e:	f003 0303 	and.w	r3, r3, #3
 8022c82:	e7dd      	b.n	8022c40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8022c84:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022c88:	2102      	movs	r1, #2
 8022c8a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c8e:	2a00      	cmp	r2, #0
 8022c90:	fb92 f1f1 	sdiv	r1, r2, r1
 8022c94:	f002 0201 	and.w	r2, r2, #1
 8022c98:	fb07 1303 	mla	r3, r7, r3, r1
 8022c9c:	bfb8      	it	lt
 8022c9e:	4252      	neglt	r2, r2
 8022ca0:	441e      	add	r6, r3
 8022ca2:	e7cf      	b.n	8022c44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8022ca4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022ca8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022cac:	437b      	muls	r3, r7
 8022cae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8022cb2:	441e      	add	r6, r3
 8022cb4:	2200      	movs	r2, #0
 8022cb6:	e7c6      	b.n	8022c46 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8022cb8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022cbc:	2103      	movs	r1, #3
 8022cbe:	fb07 f203 	mul.w	r2, r7, r3
 8022cc2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8022cc6:	fb13 2301 	smlabb	r3, r3, r1, r2
 8022cca:	e7f2      	b.n	8022cb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8022ccc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022cd0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022cd4:	fb07 2303 	mla	r3, r7, r3, r2
 8022cd8:	e7eb      	b.n	8022cb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8022cda:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022cde:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022ce2:	437b      	muls	r3, r7
 8022ce4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022ce8:	e7e3      	b.n	8022cb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8022cea:	4b07      	ldr	r3, [pc, #28]	; (8022d08 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8022cec:	2156      	movs	r1, #86	; 0x56
 8022cee:	4a03      	ldr	r2, [pc, #12]	; (8022cfc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8022cf0:	e70e      	b.n	8022b10 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8022cf2:	bf00      	nop
 8022cf4:	08029464 	.word	0x08029464
 8022cf8:	080293ae 	.word	0x080293ae
 8022cfc:	0802946c 	.word	0x0802946c
 8022d00:	0802940a 	.word	0x0802940a
 8022d04:	2000bc78 	.word	0x2000bc78
 8022d08:	0802943e 	.word	0x0802943e

08022d0c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8022d0c:	6812      	ldr	r2, [r2, #0]
 8022d0e:	2a00      	cmp	r2, #0
 8022d10:	db0b      	blt.n	8022d2a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8022d12:	9800      	ldr	r0, [sp, #0]
 8022d14:	6800      	ldr	r0, [r0, #0]
 8022d16:	4290      	cmp	r0, r2
 8022d18:	bfd4      	ite	le
 8022d1a:	2002      	movle	r0, #2
 8022d1c:	2000      	movgt	r0, #0
 8022d1e:	680a      	ldr	r2, [r1, #0]
 8022d20:	2a00      	cmp	r2, #0
 8022d22:	da04      	bge.n	8022d2e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8022d24:	f040 0004 	orr.w	r0, r0, #4
 8022d28:	4770      	bx	lr
 8022d2a:	2001      	movs	r0, #1
 8022d2c:	e7f7      	b.n	8022d1e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8022d2e:	681b      	ldr	r3, [r3, #0]
 8022d30:	4293      	cmp	r3, r2
 8022d32:	bfd8      	it	le
 8022d34:	f040 0008 	orrle.w	r0, r0, #8
 8022d38:	4770      	bx	lr
	...

08022d3c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8022d3c:	4b07      	ldr	r3, [pc, #28]	; (8022d5c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8022d3e:	b510      	push	{r4, lr}
 8022d40:	781b      	ldrb	r3, [r3, #0]
 8022d42:	2b01      	cmp	r3, #1
 8022d44:	d108      	bne.n	8022d58 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8022d46:	6843      	ldr	r3, [r0, #4]
 8022d48:	6814      	ldr	r4, [r2, #0]
 8022d4a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8022d4e:	680b      	ldr	r3, [r1, #0]
 8022d50:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8022d54:	6013      	str	r3, [r2, #0]
 8022d56:	600c      	str	r4, [r1, #0]
 8022d58:	bd10      	pop	{r4, pc}
 8022d5a:	bf00      	nop
 8022d5c:	2000bc70 	.word	0x2000bc70

08022d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d62:	b085      	sub	sp, #20
 8022d64:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8022d68:	4604      	mov	r4, r0
 8022d6a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8022d6e:	b33b      	cbz	r3, 8022dc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8022d70:	aa02      	add	r2, sp, #8
 8022d72:	a903      	add	r1, sp, #12
 8022d74:	f7ff ffe2 	bl	8022d3c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022d78:	68a3      	ldr	r3, [r4, #8]
 8022d7a:	9e03      	ldr	r6, [sp, #12]
 8022d7c:	aa02      	add	r2, sp, #8
 8022d7e:	9f02      	ldr	r7, [sp, #8]
 8022d80:	a903      	add	r1, sp, #12
 8022d82:	1af6      	subs	r6, r6, r3
 8022d84:	68e3      	ldr	r3, [r4, #12]
 8022d86:	4620      	mov	r0, r4
 8022d88:	1aff      	subs	r7, r7, r3
 8022d8a:	f104 0314 	add.w	r3, r4, #20
 8022d8e:	9603      	str	r6, [sp, #12]
 8022d90:	9300      	str	r3, [sp, #0]
 8022d92:	f104 0310 	add.w	r3, r4, #16
 8022d96:	9702      	str	r7, [sp, #8]
 8022d98:	f7ff ffb8 	bl	8022d0c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8022d9c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8022da0:	4605      	mov	r5, r0
 8022da2:	b97b      	cbnz	r3, 8022dc4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8022da4:	463a      	mov	r2, r7
 8022da6:	4631      	mov	r1, r6
 8022da8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8022dac:	f7ff fe7a 	bl	8022aa4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022db0:	9b03      	ldr	r3, [sp, #12]
 8022db2:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8022db6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8022dba:	9b02      	ldr	r3, [sp, #8]
 8022dbc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8022dc0:	b005      	add	sp, #20
 8022dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022dc4:	b110      	cbz	r0, 8022dcc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8022dc6:	ea13 0200 	ands.w	r2, r3, r0
 8022dca:	d11c      	bne.n	8022e06 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8022dcc:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8022dd0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8022dd4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8022dd8:	b188      	cbz	r0, 8022dfe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8022dda:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8022dde:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8022de2:	b913      	cbnz	r3, 8022dea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8022de4:	4630      	mov	r0, r6
 8022de6:	f001 f806 	bl	8023df6 <_ZN8touchgfx7Outline6moveToEii>
 8022dea:	2300      	movs	r3, #0
 8022dec:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022df0:	2301      	movs	r3, #1
 8022df2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8022df6:	4630      	mov	r0, r6
 8022df8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8022dfc:	e7d6      	b.n	8022dac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8022dfe:	4630      	mov	r0, r6
 8022e00:	f7ff fe50 	bl	8022aa4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022e04:	e7f7      	b.n	8022df6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8022e06:	4615      	mov	r5, r2
 8022e08:	e7d2      	b.n	8022db0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08022e0a <_ZN8touchgfx6Canvas5closeEv>:
 8022e0a:	b538      	push	{r3, r4, r5, lr}
 8022e0c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8022e10:	4604      	mov	r4, r0
 8022e12:	b993      	cbnz	r3, 8022e3a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022e14:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8022e18:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8022e1c:	4213      	tst	r3, r2
 8022e1e:	d10c      	bne.n	8022e3a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022e20:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8022e24:	b123      	cbz	r3, 8022e30 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022e26:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8022e2a:	4628      	mov	r0, r5
 8022e2c:	f7ff fe3a 	bl	8022aa4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022e30:	4628      	mov	r0, r5
 8022e32:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8022e36:	f7ff fe35 	bl	8022aa4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022e3a:	2300      	movs	r3, #0
 8022e3c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022e40:	bd38      	pop	{r3, r4, r5, pc}

08022e42 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8022e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e44:	b085      	sub	sp, #20
 8022e46:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8022e4a:	4604      	mov	r4, r0
 8022e4c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8022e50:	b353      	cbz	r3, 8022ea8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8022e52:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8022e56:	b90b      	cbnz	r3, 8022e5c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8022e58:	f7ff ffd7 	bl	8022e0a <_ZN8touchgfx6Canvas5closeEv>
 8022e5c:	aa02      	add	r2, sp, #8
 8022e5e:	a903      	add	r1, sp, #12
 8022e60:	4620      	mov	r0, r4
 8022e62:	f7ff ff6b 	bl	8022d3c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022e66:	68a3      	ldr	r3, [r4, #8]
 8022e68:	9d03      	ldr	r5, [sp, #12]
 8022e6a:	aa02      	add	r2, sp, #8
 8022e6c:	9e02      	ldr	r6, [sp, #8]
 8022e6e:	a903      	add	r1, sp, #12
 8022e70:	1aed      	subs	r5, r5, r3
 8022e72:	68e3      	ldr	r3, [r4, #12]
 8022e74:	4620      	mov	r0, r4
 8022e76:	1af6      	subs	r6, r6, r3
 8022e78:	f104 0314 	add.w	r3, r4, #20
 8022e7c:	9503      	str	r5, [sp, #12]
 8022e7e:	9300      	str	r3, [sp, #0]
 8022e80:	f104 0310 	add.w	r3, r4, #16
 8022e84:	9602      	str	r6, [sp, #8]
 8022e86:	f7ff ff41 	bl	8022d0c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8022e8a:	4607      	mov	r7, r0
 8022e8c:	b170      	cbz	r0, 8022eac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8022e8e:	2301      	movs	r3, #1
 8022e90:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022e94:	9a03      	ldr	r2, [sp, #12]
 8022e96:	9b02      	ldr	r3, [sp, #8]
 8022e98:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8022e9c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8022ea0:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8022ea4:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8022ea8:	b005      	add	sp, #20
 8022eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022eac:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8022eb0:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8022eb4:	b92b      	cbnz	r3, 8022ec2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8022eb6:	4632      	mov	r2, r6
 8022eb8:	4629      	mov	r1, r5
 8022eba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8022ebe:	f000 ff9a 	bl	8023df6 <_ZN8touchgfx7Outline6moveToEii>
 8022ec2:	2300      	movs	r3, #0
 8022ec4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022ec8:	2301      	movs	r3, #1
 8022eca:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8022ece:	e7e1      	b.n	8022e94 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08022ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8022ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ed4:	4604      	mov	r4, r0
 8022ed6:	b087      	sub	sp, #28
 8022ed8:	9105      	str	r1, [sp, #20]
 8022eda:	f001 f8d0 	bl	802407e <_ZN8touchgfx7Outline8getCellsEv>
 8022ede:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8022ee2:	4605      	mov	r5, r0
 8022ee4:	f1b9 0f00 	cmp.w	r9, #0
 8022ee8:	d103      	bne.n	8022ef2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8022eea:	2001      	movs	r0, #1
 8022eec:	b007      	add	sp, #28
 8022eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ef2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8022ef6:	2e00      	cmp	r6, #0
 8022ef8:	d139      	bne.n	8022f6e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8022efa:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8022efe:	f105 0708 	add.w	r7, r5, #8
 8022f02:	4640      	mov	r0, r8
 8022f04:	f001 f8fd 	bl	8024102 <_ZN8touchgfx8Scanline5resetEv>
 8022f08:	f109 33ff 	add.w	r3, r9, #4294967295
 8022f0c:	9303      	str	r3, [sp, #12]
 8022f0e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8022f12:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8022f16:	46da      	mov	sl, fp
 8022f18:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8022f1c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8022f20:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8022f24:	9b03      	ldr	r3, [sp, #12]
 8022f26:	4416      	add	r6, r2
 8022f28:	9504      	str	r5, [sp, #16]
 8022f2a:	463d      	mov	r5, r7
 8022f2c:	3b01      	subs	r3, #1
 8022f2e:	9303      	str	r3, [sp, #12]
 8022f30:	3301      	adds	r3, #1
 8022f32:	d01e      	beq.n	8022f72 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8022f34:	3708      	adds	r7, #8
 8022f36:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8022f3a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8022f3e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8022f42:	4290      	cmp	r0, r2
 8022f44:	d11e      	bne.n	8022f84 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8022f46:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8022f4a:	4411      	add	r1, r2
 8022f4c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8022f50:	e7e8      	b.n	8022f24 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8022f52:	1c91      	adds	r1, r2, #2
 8022f54:	f04f 0301 	mov.w	r3, #1
 8022f58:	65e1      	str	r1, [r4, #92]	; 0x5c
 8022f5a:	8053      	strh	r3, [r2, #2]
 8022f5c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8022f5e:	1c91      	adds	r1, r2, #2
 8022f60:	65a1      	str	r1, [r4, #88]	; 0x58
 8022f62:	f8a2 b002 	strh.w	fp, [r2, #2]
 8022f66:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022f68:	3201      	adds	r2, #1
 8022f6a:	6562      	str	r2, [r4, #84]	; 0x54
 8022f6c:	e03a      	b.n	8022fe4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8022f6e:	2000      	movs	r0, #0
 8022f70:	e7bc      	b.n	8022eec <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8022f72:	b951      	cbnz	r1, 8022f8a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8022f74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022f76:	2b00      	cmp	r3, #0
 8022f78:	d0b7      	beq.n	8022eea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8022f7a:	4641      	mov	r1, r8
 8022f7c:	9805      	ldr	r0, [sp, #20]
 8022f7e:	f7ff fd5b 	bl	8022a38 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022f82:	e7b2      	b.n	8022eea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8022f84:	2900      	cmp	r1, #0
 8022f86:	d035      	beq.n	8022ff4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8022f88:	9504      	str	r5, [sp, #16]
 8022f8a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8022f8e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8022f92:	f7ff fd3d 	bl	8022a10 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8022f96:	4605      	mov	r5, r0
 8022f98:	b330      	cbz	r0, 8022fe8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022f9a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022f9c:	b182      	cbz	r2, 8022fc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8022f9e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8022fa0:	454a      	cmp	r2, r9
 8022fa2:	d00d      	beq.n	8022fc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8022fa4:	4641      	mov	r1, r8
 8022fa6:	9805      	ldr	r0, [sp, #20]
 8022fa8:	f7ff fd46 	bl	8022a38 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022fac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022fb0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8022fb2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8022fb6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8022fb8:	2300      	movs	r3, #0
 8022fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022fbc:	6563      	str	r3, [r4, #84]	; 0x54
 8022fbe:	65a2      	str	r2, [r4, #88]	; 0x58
 8022fc0:	f1bb 0f00 	cmp.w	fp, #0
 8022fc4:	db10      	blt.n	8022fe8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022fc6:	f7f4 f993 	bl	80172f0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022fca:	4583      	cmp	fp, r0
 8022fcc:	d20c      	bcs.n	8022fe8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022fce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8022fd0:	f802 500b 	strb.w	r5, [r2, fp]
 8022fd4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8022fd6:	3201      	adds	r2, #1
 8022fd8:	455a      	cmp	r2, fp
 8022fda:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8022fdc:	d1b9      	bne.n	8022f52 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8022fde:	8811      	ldrh	r1, [r2, #0]
 8022fe0:	3101      	adds	r1, #1
 8022fe2:	8011      	strh	r1, [r2, #0]
 8022fe4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8022fe8:	9b03      	ldr	r3, [sp, #12]
 8022fea:	3301      	adds	r3, #1
 8022fec:	d0c2      	beq.n	8022f74 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8022fee:	f10b 0a01 	add.w	sl, fp, #1
 8022ff2:	9d04      	ldr	r5, [sp, #16]
 8022ff4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8022ff8:	4553      	cmp	r3, sl
 8022ffa:	dd88      	ble.n	8022f0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8022ffc:	01b1      	lsls	r1, r6, #6
 8022ffe:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023002:	f7ff fd05 	bl	8022a10 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023006:	4683      	mov	fp, r0
 8023008:	2800      	cmp	r0, #0
 802300a:	d080      	beq.n	8022f0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802300c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802300e:	b183      	cbz	r3, 8023032 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023010:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023012:	454b      	cmp	r3, r9
 8023014:	d00d      	beq.n	8023032 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023016:	4641      	mov	r1, r8
 8023018:	9805      	ldr	r0, [sp, #20]
 802301a:	f7ff fd0d 	bl	8022a38 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802301e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023022:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023026:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023028:	65e3      	str	r3, [r4, #92]	; 0x5c
 802302a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802302c:	65a3      	str	r3, [r4, #88]	; 0x58
 802302e:	2300      	movs	r3, #0
 8023030:	6563      	str	r3, [r4, #84]	; 0x54
 8023032:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023036:	464a      	mov	r2, r9
 8023038:	f8cd b000 	str.w	fp, [sp]
 802303c:	4651      	mov	r1, sl
 802303e:	eba3 030a 	sub.w	r3, r3, sl
 8023042:	4640      	mov	r0, r8
 8023044:	f001 f884 	bl	8024150 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023048:	e761      	b.n	8022f0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802304a <_ZN8touchgfx6Canvas6renderEv>:
 802304a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802304c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023050:	4604      	mov	r4, r0
 8023052:	b913      	cbnz	r3, 802305a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8023054:	2001      	movs	r0, #1
 8023056:	b003      	add	sp, #12
 8023058:	bd30      	pop	{r4, r5, pc}
 802305a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 802305e:	2b00      	cmp	r3, #0
 8023060:	d131      	bne.n	80230c6 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8023062:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8023066:	2b00      	cmp	r3, #0
 8023068:	d0f4      	beq.n	8023054 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802306a:	6840      	ldr	r0, [r0, #4]
 802306c:	6803      	ldr	r3, [r0, #0]
 802306e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023070:	4798      	blx	r3
 8023072:	2800      	cmp	r0, #0
 8023074:	d0ee      	beq.n	8023054 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023076:	4620      	mov	r0, r4
 8023078:	f7ff fec7 	bl	8022e0a <_ZN8touchgfx6Canvas5closeEv>
 802307c:	6860      	ldr	r0, [r4, #4]
 802307e:	6803      	ldr	r3, [r0, #0]
 8023080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023082:	4798      	blx	r3
 8023084:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8023088:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 802308c:	f7f3 f8c9 	bl	8016222 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023090:	6860      	ldr	r0, [r4, #4]
 8023092:	6803      	ldr	r3, [r0, #0]
 8023094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023096:	4798      	blx	r3
 8023098:	4605      	mov	r5, r0
 802309a:	6860      	ldr	r0, [r4, #4]
 802309c:	6803      	ldr	r3, [r0, #0]
 802309e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80230a0:	4798      	blx	r3
 80230a2:	4601      	mov	r1, r0
 80230a4:	4628      	mov	r0, r5
 80230a6:	f7f3 f8bf 	bl	8016228 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 80230aa:	6860      	ldr	r0, [r4, #4]
 80230ac:	6803      	ldr	r3, [r0, #0]
 80230ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80230b0:	4798      	blx	r3
 80230b2:	f104 0318 	add.w	r3, r4, #24
 80230b6:	4669      	mov	r1, sp
 80230b8:	e9cd 3000 	strd	r3, r0, [sp]
 80230bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80230c0:	f7ff ff06 	bl	8022ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80230c4:	e7c7      	b.n	8023056 <_ZN8touchgfx6Canvas6renderEv+0xc>
 80230c6:	2000      	movs	r0, #0
 80230c8:	e7c5      	b.n	8023056 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

080230cc <_ZN8touchgfx6CanvasD1Ev>:
 80230cc:	b538      	push	{r3, r4, r5, lr}
 80230ce:	4605      	mov	r5, r0
 80230d0:	4b08      	ldr	r3, [pc, #32]	; (80230f4 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80230d2:	4604      	mov	r4, r0
 80230d4:	f845 3b2c 	str.w	r3, [r5], #44
 80230d8:	4b07      	ldr	r3, [pc, #28]	; (80230f8 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80230da:	6818      	ldr	r0, [r3, #0]
 80230dc:	6803      	ldr	r3, [r0, #0]
 80230de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80230e0:	4798      	blx	r3
 80230e2:	4628      	mov	r0, r5
 80230e4:	f000 f814 	bl	8023110 <_ZN8touchgfx7OutlineD1Ev>
 80230e8:	f104 0018 	add.w	r0, r4, #24
 80230ec:	f001 f870 	bl	80241d0 <_ZN8touchgfx15RenderingBufferD1Ev>
 80230f0:	4620      	mov	r0, r4
 80230f2:	bd38      	pop	{r3, r4, r5, pc}
 80230f4:	08029464 	.word	0x08029464
 80230f8:	2000bc78 	.word	0x2000bc78

080230fc <_ZN8touchgfx6CanvasD0Ev>:
 80230fc:	b510      	push	{r4, lr}
 80230fe:	4604      	mov	r4, r0
 8023100:	f7ff ffe4 	bl	80230cc <_ZN8touchgfx6CanvasD1Ev>
 8023104:	21b8      	movs	r1, #184	; 0xb8
 8023106:	4620      	mov	r0, r4
 8023108:	f001 f873 	bl	80241f2 <_ZdlPvj>
 802310c:	4620      	mov	r0, r4
 802310e:	bd10      	pop	{r4, pc}

08023110 <_ZN8touchgfx7OutlineD1Ev>:
 8023110:	4770      	bx	lr

08023112 <_ZN8touchgfx7OutlineD0Ev>:
 8023112:	b510      	push	{r4, lr}
 8023114:	4604      	mov	r4, r0
 8023116:	2148      	movs	r1, #72	; 0x48
 8023118:	f001 f86b 	bl	80241f2 <_ZdlPvj>
 802311c:	4620      	mov	r0, r4
 802311e:	bd10      	pop	{r4, pc}

08023120 <_ZN8touchgfx7Outline5resetEv>:
 8023120:	b510      	push	{r4, lr}
 8023122:	4604      	mov	r4, r0
 8023124:	f7f4 f8fc 	bl	8017320 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023128:	60e0      	str	r0, [r4, #12]
 802312a:	f7f4 f8ff 	bl	801732c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802312e:	68e3      	ldr	r3, [r4, #12]
 8023130:	2200      	movs	r2, #0
 8023132:	08c0      	lsrs	r0, r0, #3
 8023134:	6123      	str	r3, [r4, #16]
 8023136:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802313a:	6060      	str	r0, [r4, #4]
 802313c:	82a3      	strh	r3, [r4, #20]
 802313e:	82e3      	strh	r3, [r4, #22]
 8023140:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023142:	60a2      	str	r2, [r4, #8]
 8023144:	f023 0301 	bic.w	r3, r3, #1
 8023148:	8322      	strh	r2, [r4, #24]
 802314a:	8362      	strh	r2, [r4, #26]
 802314c:	f043 0302 	orr.w	r3, r3, #2
 8023150:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023154:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023156:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802315a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802315e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023162:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023166:	bd10      	pop	{r4, pc}

08023168 <_ZN8touchgfx7OutlineC1Ev>:
 8023168:	4b0f      	ldr	r3, [pc, #60]	; (80231a8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802316a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802316e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023172:	b510      	push	{r4, lr}
 8023174:	6003      	str	r3, [r0, #0]
 8023176:	2300      	movs	r3, #0
 8023178:	4604      	mov	r4, r0
 802317a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802317e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023182:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023186:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802318a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802318e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023192:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023196:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802319a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802319e:	f7ff ffbf 	bl	8023120 <_ZN8touchgfx7Outline5resetEv>
 80231a2:	4620      	mov	r0, r4
 80231a4:	bd10      	pop	{r4, pc}
 80231a6:	bf00      	nop
 80231a8:	080294c4 	.word	0x080294c4

080231ac <_ZN8touchgfx7Outline10renderLineEiiii>:
 80231ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b0:	b093      	sub	sp, #76	; 0x4c
 80231b2:	4604      	mov	r4, r0
 80231b4:	1156      	asrs	r6, r2, #5
 80231b6:	f002 0e1f 	and.w	lr, r2, #31
 80231ba:	981c      	ldr	r0, [sp, #112]	; 0x70
 80231bc:	9305      	str	r3, [sp, #20]
 80231be:	1143      	asrs	r3, r0, #5
 80231c0:	1145      	asrs	r5, r0, #5
 80231c2:	930c      	str	r3, [sp, #48]	; 0x30
 80231c4:	f000 031f 	and.w	r3, r0, #31
 80231c8:	9303      	str	r3, [sp, #12]
 80231ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80231cc:	42b3      	cmp	r3, r6
 80231ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80231d0:	bfc8      	it	gt
 80231d2:	6326      	strgt	r6, [r4, #48]	; 0x30
 80231d4:	42b3      	cmp	r3, r6
 80231d6:	bfdc      	itt	le
 80231d8:	1c73      	addle	r3, r6, #1
 80231da:	63a3      	strle	r3, [r4, #56]	; 0x38
 80231dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80231de:	42ab      	cmp	r3, r5
 80231e0:	bfc8      	it	gt
 80231e2:	462b      	movgt	r3, r5
 80231e4:	ea4f 1560 	mov.w	r5, r0, asr #5
 80231e8:	bfc8      	it	gt
 80231ea:	6323      	strgt	r3, [r4, #48]	; 0x30
 80231ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80231ee:	42ab      	cmp	r3, r5
 80231f0:	bfd8      	it	le
 80231f2:	462b      	movle	r3, r5
 80231f4:	ea4f 1561 	mov.w	r5, r1, asr #5
 80231f8:	bfdc      	itt	le
 80231fa:	3301      	addle	r3, #1
 80231fc:	63a3      	strle	r3, [r4, #56]	; 0x38
 80231fe:	9b05      	ldr	r3, [sp, #20]
 8023200:	eba3 0a01 	sub.w	sl, r3, r1
 8023204:	1143      	asrs	r3, r0, #5
 8023206:	429e      	cmp	r6, r3
 8023208:	f040 8119 	bne.w	802343e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 802320c:	9b05      	ldr	r3, [sp, #20]
 802320e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023212:	9b03      	ldr	r3, [sp, #12]
 8023214:	459e      	cmp	lr, r3
 8023216:	d12c      	bne.n	8023272 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8023218:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802321c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8023220:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023224:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023228:	4291      	cmp	r1, r2
 802322a:	d037      	beq.n	802329c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802322c:	8b61      	ldrh	r1, [r4, #26]
 802322e:	8b22      	ldrh	r2, [r4, #24]
 8023230:	430a      	orrs	r2, r1
 8023232:	d00b      	beq.n	802324c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023234:	2b00      	cmp	r3, #0
 8023236:	db09      	blt.n	802324c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023238:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802323a:	429a      	cmp	r2, r3
 802323c:	dd06      	ble.n	802324c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802323e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023242:	429a      	cmp	r2, r3
 8023244:	d308      	bcc.n	8023258 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8023246:	2301      	movs	r3, #1
 8023248:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802324c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023250:	82e6      	strh	r6, [r4, #22]
 8023252:	2300      	movs	r3, #0
 8023254:	8323      	strh	r3, [r4, #24]
 8023256:	e0c6      	b.n	80233e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023258:	f104 0314 	add.w	r3, r4, #20
 802325c:	6922      	ldr	r2, [r4, #16]
 802325e:	cb03      	ldmia	r3!, {r0, r1}
 8023260:	6010      	str	r0, [r2, #0]
 8023262:	6051      	str	r1, [r2, #4]
 8023264:	6923      	ldr	r3, [r4, #16]
 8023266:	3308      	adds	r3, #8
 8023268:	6123      	str	r3, [r4, #16]
 802326a:	68a3      	ldr	r3, [r4, #8]
 802326c:	3301      	adds	r3, #1
 802326e:	60a3      	str	r3, [r4, #8]
 8023270:	e7ec      	b.n	802324c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023272:	9b05      	ldr	r3, [sp, #20]
 8023274:	45ac      	cmp	ip, r5
 8023276:	f001 011f 	and.w	r1, r1, #31
 802327a:	8b20      	ldrh	r0, [r4, #24]
 802327c:	f003 031f 	and.w	r3, r3, #31
 8023280:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023284:	9304      	str	r3, [sp, #16]
 8023286:	9b03      	ldr	r3, [sp, #12]
 8023288:	eba3 020e 	sub.w	r2, r3, lr
 802328c:	d109      	bne.n	80232a2 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 802328e:	9b04      	ldr	r3, [sp, #16]
 8023290:	4410      	add	r0, r2
 8023292:	4419      	add	r1, r3
 8023294:	8320      	strh	r0, [r4, #24]
 8023296:	fb02 8201 	mla	r2, r2, r1, r8
 802329a:	8362      	strh	r2, [r4, #26]
 802329c:	b013      	add	sp, #76	; 0x4c
 802329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232a2:	f1ba 0f00 	cmp.w	sl, #0
 80232a6:	f2c0 80a0 	blt.w	80233ea <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 80232aa:	f1c1 0320 	rsb	r3, r1, #32
 80232ae:	f04f 0b20 	mov.w	fp, #32
 80232b2:	435a      	muls	r2, r3
 80232b4:	2301      	movs	r3, #1
 80232b6:	9302      	str	r3, [sp, #8]
 80232b8:	4459      	add	r1, fp
 80232ba:	fb92 f7fa 	sdiv	r7, r2, sl
 80232be:	fb0a 2217 	mls	r2, sl, r7, r2
 80232c2:	2a00      	cmp	r2, #0
 80232c4:	bfbc      	itt	lt
 80232c6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80232ca:	4452      	addlt	r2, sl
 80232cc:	fb07 8101 	mla	r1, r7, r1, r8
 80232d0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80232d4:	4438      	add	r0, r7
 80232d6:	b20b      	sxth	r3, r1
 80232d8:	9902      	ldr	r1, [sp, #8]
 80232da:	b200      	sxth	r0, r0
 80232dc:	9301      	str	r3, [sp, #4]
 80232de:	8363      	strh	r3, [r4, #26]
 80232e0:	186b      	adds	r3, r5, r1
 80232e2:	0435      	lsls	r5, r6, #16
 80232e4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80232e8:	8320      	strh	r0, [r4, #24]
 80232ea:	eb03 0905 	add.w	r9, r3, r5
 80232ee:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80232f2:	9300      	str	r3, [sp, #0]
 80232f4:	45c1      	cmp	r9, r8
 80232f6:	9505      	str	r5, [sp, #20]
 80232f8:	d014      	beq.n	8023324 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80232fa:	9b01      	ldr	r3, [sp, #4]
 80232fc:	4303      	orrs	r3, r0
 80232fe:	d00b      	beq.n	8023318 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023300:	2900      	cmp	r1, #0
 8023302:	db09      	blt.n	8023318 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023306:	428b      	cmp	r3, r1
 8023308:	dd06      	ble.n	8023318 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802330a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802330e:	4299      	cmp	r1, r3
 8023310:	d374      	bcc.n	80233fc <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8023312:	2301      	movs	r3, #1
 8023314:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023318:	9b00      	ldr	r3, [sp, #0]
 802331a:	82e6      	strh	r6, [r4, #22]
 802331c:	82a3      	strh	r3, [r4, #20]
 802331e:	2300      	movs	r3, #0
 8023320:	8323      	strh	r3, [r4, #24]
 8023322:	8363      	strh	r3, [r4, #26]
 8023324:	9900      	ldr	r1, [sp, #0]
 8023326:	eb0e 0307 	add.w	r3, lr, r7
 802332a:	458c      	cmp	ip, r1
 802332c:	d04e      	beq.n	80233cc <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802332e:	9903      	ldr	r1, [sp, #12]
 8023330:	eba2 020a 	sub.w	r2, r2, sl
 8023334:	1ac9      	subs	r1, r1, r3
 8023336:	9201      	str	r2, [sp, #4]
 8023338:	440f      	add	r7, r1
 802333a:	017f      	lsls	r7, r7, #5
 802333c:	fb97 fefa 	sdiv	lr, r7, sl
 8023340:	fb0a 771e 	mls	r7, sl, lr, r7
 8023344:	2f00      	cmp	r7, #0
 8023346:	bfbc      	itt	lt
 8023348:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802334c:	4457      	addlt	r7, sl
 802334e:	f10e 0101 	add.w	r1, lr, #1
 8023352:	9106      	str	r1, [sp, #24]
 8023354:	9a01      	ldr	r2, [sp, #4]
 8023356:	8b20      	ldrh	r0, [r4, #24]
 8023358:	19d2      	adds	r2, r2, r7
 802335a:	8b61      	ldrh	r1, [r4, #26]
 802335c:	9d02      	ldr	r5, [sp, #8]
 802335e:	9201      	str	r2, [sp, #4]
 8023360:	bf5b      	ittet	pl
 8023362:	eba2 020a 	subpl.w	r2, r2, sl
 8023366:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802336a:	46f0      	movmi	r8, lr
 802336c:	9201      	strpl	r2, [sp, #4]
 802336e:	9a00      	ldr	r2, [sp, #0]
 8023370:	4440      	add	r0, r8
 8023372:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023376:	4443      	add	r3, r8
 8023378:	442a      	add	r2, r5
 802337a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802337e:	9d05      	ldr	r5, [sp, #20]
 8023380:	b200      	sxth	r0, r0
 8023382:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023386:	b209      	sxth	r1, r1
 8023388:	4415      	add	r5, r2
 802338a:	8320      	strh	r0, [r4, #24]
 802338c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023390:	8361      	strh	r1, [r4, #26]
 8023392:	9200      	str	r2, [sp, #0]
 8023394:	454d      	cmp	r5, r9
 8023396:	d016      	beq.n	80233c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8023398:	4301      	orrs	r1, r0
 802339a:	d00d      	beq.n	80233b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802339c:	f1b8 0f00 	cmp.w	r8, #0
 80233a0:	db0a      	blt.n	80233b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80233a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80233a4:	4541      	cmp	r1, r8
 80233a6:	dd07      	ble.n	80233b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80233a8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80233ac:	4288      	cmp	r0, r1
 80233ae:	d335      	bcc.n	802341c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80233b0:	f04f 0101 	mov.w	r1, #1
 80233b4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80233b8:	9900      	ldr	r1, [sp, #0]
 80233ba:	82e6      	strh	r6, [r4, #22]
 80233bc:	82a1      	strh	r1, [r4, #20]
 80233be:	f04f 0100 	mov.w	r1, #0
 80233c2:	8321      	strh	r1, [r4, #24]
 80233c4:	8361      	strh	r1, [r4, #26]
 80233c6:	9a00      	ldr	r2, [sp, #0]
 80233c8:	4594      	cmp	ip, r2
 80233ca:	d1c3      	bne.n	8023354 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 80233cc:	9a03      	ldr	r2, [sp, #12]
 80233ce:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 80233d2:	1ad3      	subs	r3, r2, r3
 80233d4:	8b22      	ldrh	r2, [r4, #24]
 80233d6:	441a      	add	r2, r3
 80233d8:	8322      	strh	r2, [r4, #24]
 80233da:	9a04      	ldr	r2, [sp, #16]
 80233dc:	3220      	adds	r2, #32
 80233de:	eba2 020b 	sub.w	r2, r2, fp
 80233e2:	fb03 c302 	mla	r3, r3, r2, ip
 80233e6:	8363      	strh	r3, [r4, #26]
 80233e8:	e758      	b.n	802329c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80233ea:	f04f 33ff 	mov.w	r3, #4294967295
 80233ee:	434a      	muls	r2, r1
 80233f0:	f1ca 0a00 	rsb	sl, sl, #0
 80233f4:	f04f 0b00 	mov.w	fp, #0
 80233f8:	9302      	str	r3, [sp, #8]
 80233fa:	e75d      	b.n	80232b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80233fc:	f104 0314 	add.w	r3, r4, #20
 8023400:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023404:	cb03      	ldmia	r3!, {r0, r1}
 8023406:	f8c8 0000 	str.w	r0, [r8]
 802340a:	f8c8 1004 	str.w	r1, [r8, #4]
 802340e:	6923      	ldr	r3, [r4, #16]
 8023410:	3308      	adds	r3, #8
 8023412:	6123      	str	r3, [r4, #16]
 8023414:	68a3      	ldr	r3, [r4, #8]
 8023416:	3301      	adds	r3, #1
 8023418:	60a3      	str	r3, [r4, #8]
 802341a:	e77d      	b.n	8023318 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802341c:	f104 0814 	add.w	r8, r4, #20
 8023420:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023424:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023428:	f8c9 0000 	str.w	r0, [r9]
 802342c:	f8c9 1004 	str.w	r1, [r9, #4]
 8023430:	6921      	ldr	r1, [r4, #16]
 8023432:	3108      	adds	r1, #8
 8023434:	6121      	str	r1, [r4, #16]
 8023436:	68a1      	ldr	r1, [r4, #8]
 8023438:	3101      	adds	r1, #1
 802343a:	60a1      	str	r1, [r4, #8]
 802343c:	e7bc      	b.n	80233b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802343e:	1a83      	subs	r3, r0, r2
 8023440:	9301      	str	r3, [sp, #4]
 8023442:	f1ba 0f00 	cmp.w	sl, #0
 8023446:	f040 8094 	bne.w	8023572 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802344a:	9a01      	ldr	r2, [sp, #4]
 802344c:	0049      	lsls	r1, r1, #1
 802344e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023452:	2a00      	cmp	r2, #0
 8023454:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023458:	8b62      	ldrh	r2, [r4, #26]
 802345a:	bfaa      	itet	ge
 802345c:	f04f 0a20 	movge.w	sl, #32
 8023460:	f04f 38ff 	movlt.w	r8, #4294967295
 8023464:	f04f 0801 	movge.w	r8, #1
 8023468:	8b21      	ldrh	r1, [r4, #24]
 802346a:	ebaa 0e0e 	sub.w	lr, sl, lr
 802346e:	4471      	add	r1, lr
 8023470:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023474:	eb08 0206 	add.w	r2, r8, r6
 8023478:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802347c:	b209      	sxth	r1, r1
 802347e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8023482:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8023486:	8321      	strh	r1, [r4, #24]
 8023488:	fa0f fe8e 	sxth.w	lr, lr
 802348c:	42b7      	cmp	r7, r6
 802348e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023492:	d013      	beq.n	80234bc <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8023494:	ea51 010e 	orrs.w	r1, r1, lr
 8023498:	d00b      	beq.n	80234b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802349a:	2800      	cmp	r0, #0
 802349c:	db09      	blt.n	80234b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802349e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80234a0:	4281      	cmp	r1, r0
 80234a2:	dd06      	ble.n	80234b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80234a4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80234a8:	4288      	cmp	r0, r1
 80234aa:	d339      	bcc.n	8023520 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 80234ac:	2101      	movs	r1, #1
 80234ae:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80234b2:	2100      	movs	r1, #0
 80234b4:	82a5      	strh	r5, [r4, #20]
 80234b6:	82e2      	strh	r2, [r4, #22]
 80234b8:	8321      	strh	r1, [r4, #24]
 80234ba:	8361      	strh	r1, [r4, #26]
 80234bc:	f1aa 0610 	sub.w	r6, sl, #16
 80234c0:	f04f 0e00 	mov.w	lr, #0
 80234c4:	f04f 0b01 	mov.w	fp, #1
 80234c8:	0076      	lsls	r6, r6, #1
 80234ca:	fb06 f703 	mul.w	r7, r6, r3
 80234ce:	b236      	sxth	r6, r6
 80234d0:	b23f      	sxth	r7, r7
 80234d2:	ea46 0107 	orr.w	r1, r6, r7
 80234d6:	9100      	str	r1, [sp, #0]
 80234d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80234da:	428a      	cmp	r2, r1
 80234dc:	d03e      	beq.n	802355c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80234de:	4442      	add	r2, r8
 80234e0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80234e4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80234e8:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80234ec:	8326      	strh	r6, [r4, #24]
 80234ee:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80234f2:	8367      	strh	r7, [r4, #26]
 80234f4:	4584      	cmp	ip, r0
 80234f6:	d0ef      	beq.n	80234d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80234f8:	9800      	ldr	r0, [sp, #0]
 80234fa:	b150      	cbz	r0, 8023512 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80234fc:	2900      	cmp	r1, #0
 80234fe:	db08      	blt.n	8023512 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023500:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023502:	4288      	cmp	r0, r1
 8023504:	dd05      	ble.n	8023512 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023506:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802350a:	4288      	cmp	r0, r1
 802350c:	d315      	bcc.n	802353a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802350e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8023512:	82a5      	strh	r5, [r4, #20]
 8023514:	82e2      	strh	r2, [r4, #22]
 8023516:	f8a4 e018 	strh.w	lr, [r4, #24]
 802351a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802351e:	e7db      	b.n	80234d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023520:	f104 0614 	add.w	r6, r4, #20
 8023524:	6927      	ldr	r7, [r4, #16]
 8023526:	ce03      	ldmia	r6!, {r0, r1}
 8023528:	6038      	str	r0, [r7, #0]
 802352a:	6079      	str	r1, [r7, #4]
 802352c:	6921      	ldr	r1, [r4, #16]
 802352e:	3108      	adds	r1, #8
 8023530:	6121      	str	r1, [r4, #16]
 8023532:	68a1      	ldr	r1, [r4, #8]
 8023534:	3101      	adds	r1, #1
 8023536:	60a1      	str	r1, [r4, #8]
 8023538:	e7bb      	b.n	80234b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802353a:	f104 0c14 	add.w	ip, r4, #20
 802353e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023542:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8023546:	f8c9 0000 	str.w	r0, [r9]
 802354a:	f8c9 1004 	str.w	r1, [r9, #4]
 802354e:	6921      	ldr	r1, [r4, #16]
 8023550:	3108      	adds	r1, #8
 8023552:	6121      	str	r1, [r4, #16]
 8023554:	68a1      	ldr	r1, [r4, #8]
 8023556:	3101      	adds	r1, #1
 8023558:	60a1      	str	r1, [r4, #8]
 802355a:	e7da      	b.n	8023512 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802355c:	9a03      	ldr	r2, [sp, #12]
 802355e:	8b61      	ldrh	r1, [r4, #26]
 8023560:	f1a2 0c20 	sub.w	ip, r2, #32
 8023564:	8b22      	ldrh	r2, [r4, #24]
 8023566:	44d4      	add	ip, sl
 8023568:	4462      	add	r2, ip
 802356a:	fb0c 1303 	mla	r3, ip, r3, r1
 802356e:	8322      	strh	r2, [r4, #24]
 8023570:	e739      	b.n	80233e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023572:	9b01      	ldr	r3, [sp, #4]
 8023574:	2b00      	cmp	r3, #0
 8023576:	db3f      	blt.n	80235f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8023578:	2201      	movs	r2, #1
 802357a:	f1ce 0320 	rsb	r3, lr, #32
 802357e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023580:	2220      	movs	r2, #32
 8023582:	fb0a f303 	mul.w	r3, sl, r3
 8023586:	9202      	str	r2, [sp, #8]
 8023588:	9a01      	ldr	r2, [sp, #4]
 802358a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802358e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023592:	fb93 f7f2 	sdiv	r7, r3, r2
 8023596:	fb02 3317 	mls	r3, r2, r7, r3
 802359a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802359e:	2b00      	cmp	r3, #0
 80235a0:	9308      	str	r3, [sp, #32]
 80235a2:	bfbc      	itt	lt
 80235a4:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80235a8:	189b      	addlt	r3, r3, r2
 80235aa:	eb07 0b01 	add.w	fp, r7, r1
 80235ae:	bfb8      	it	lt
 80235b0:	9308      	strlt	r3, [sp, #32]
 80235b2:	ea4f 136b 	mov.w	r3, fp, asr #5
 80235b6:	9304      	str	r3, [sp, #16]
 80235b8:	9b02      	ldr	r3, [sp, #8]
 80235ba:	4573      	cmp	r3, lr
 80235bc:	d133      	bne.n	8023626 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80235be:	9b04      	ldr	r3, [sp, #16]
 80235c0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80235c4:	454b      	cmp	r3, r9
 80235c6:	d045      	beq.n	8023654 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80235c8:	8b62      	ldrh	r2, [r4, #26]
 80235ca:	8b23      	ldrh	r3, [r4, #24]
 80235cc:	4313      	orrs	r3, r2
 80235ce:	d00c      	beq.n	80235ea <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80235d0:	f1b8 0f00 	cmp.w	r8, #0
 80235d4:	db09      	blt.n	80235ea <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80235d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80235d8:	4543      	cmp	r3, r8
 80235da:	dd06      	ble.n	80235ea <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80235dc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80235e0:	429a      	cmp	r2, r3
 80235e2:	d313      	bcc.n	802360c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80235e4:	2301      	movs	r3, #1
 80235e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80235ea:	9b04      	ldr	r3, [sp, #16]
 80235ec:	82e6      	strh	r6, [r4, #22]
 80235ee:	82a3      	strh	r3, [r4, #20]
 80235f0:	2300      	movs	r3, #0
 80235f2:	8323      	strh	r3, [r4, #24]
 80235f4:	8363      	strh	r3, [r4, #26]
 80235f6:	e02d      	b.n	8023654 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80235f8:	9a01      	ldr	r2, [sp, #4]
 80235fa:	fb0a f30e 	mul.w	r3, sl, lr
 80235fe:	4252      	negs	r2, r2
 8023600:	9201      	str	r2, [sp, #4]
 8023602:	f04f 32ff 	mov.w	r2, #4294967295
 8023606:	920b      	str	r2, [sp, #44]	; 0x2c
 8023608:	2200      	movs	r2, #0
 802360a:	e7bc      	b.n	8023586 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 802360c:	f104 0314 	add.w	r3, r4, #20
 8023610:	6922      	ldr	r2, [r4, #16]
 8023612:	cb03      	ldmia	r3!, {r0, r1}
 8023614:	6010      	str	r0, [r2, #0]
 8023616:	6051      	str	r1, [r2, #4]
 8023618:	6923      	ldr	r3, [r4, #16]
 802361a:	3308      	adds	r3, #8
 802361c:	6123      	str	r3, [r4, #16]
 802361e:	68a3      	ldr	r3, [r4, #8]
 8023620:	3301      	adds	r3, #1
 8023622:	60a3      	str	r3, [r4, #8]
 8023624:	e7e1      	b.n	80235ea <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023626:	f00b 031f 	and.w	r3, fp, #31
 802362a:	f001 011f 	and.w	r1, r1, #31
 802362e:	8b20      	ldrh	r0, [r4, #24]
 8023630:	9309      	str	r3, [sp, #36]	; 0x24
 8023632:	9b02      	ldr	r3, [sp, #8]
 8023634:	eba3 020e 	sub.w	r2, r3, lr
 8023638:	8b63      	ldrh	r3, [r4, #26]
 802363a:	9300      	str	r3, [sp, #0]
 802363c:	9b04      	ldr	r3, [sp, #16]
 802363e:	42ab      	cmp	r3, r5
 8023640:	f040 80ef 	bne.w	8023822 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8023644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023646:	4410      	add	r0, r2
 8023648:	4419      	add	r1, r3
 802364a:	9b00      	ldr	r3, [sp, #0]
 802364c:	8320      	strh	r0, [r4, #24]
 802364e:	fb02 3101 	mla	r1, r2, r1, r3
 8023652:	8361      	strh	r1, [r4, #26]
 8023654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023656:	9904      	ldr	r1, [sp, #16]
 8023658:	4433      	add	r3, r6
 802365a:	9300      	str	r3, [sp, #0]
 802365c:	9a00      	ldr	r2, [sp, #0]
 802365e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023662:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8023666:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802366a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802366e:	4288      	cmp	r0, r1
 8023670:	d018      	beq.n	80236a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8023672:	8b60      	ldrh	r0, [r4, #26]
 8023674:	8b21      	ldrh	r1, [r4, #24]
 8023676:	ea50 0201 	orrs.w	r2, r0, r1
 802367a:	d00c      	beq.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802367c:	2b00      	cmp	r3, #0
 802367e:	db0a      	blt.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023680:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023682:	4299      	cmp	r1, r3
 8023684:	dd07      	ble.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023686:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802368a:	4299      	cmp	r1, r3
 802368c:	f0c0 818b 	bcc.w	80239a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8023690:	2301      	movs	r3, #1
 8023692:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023696:	9b04      	ldr	r3, [sp, #16]
 8023698:	82a3      	strh	r3, [r4, #20]
 802369a:	9b00      	ldr	r3, [sp, #0]
 802369c:	82e3      	strh	r3, [r4, #22]
 802369e:	2300      	movs	r3, #0
 80236a0:	8323      	strh	r3, [r4, #24]
 80236a2:	8363      	strh	r3, [r4, #26]
 80236a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80236a6:	9a00      	ldr	r2, [sp, #0]
 80236a8:	4293      	cmp	r3, r2
 80236aa:	f000 808d 	beq.w	80237c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 80236ae:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80236b2:	9901      	ldr	r1, [sp, #4]
 80236b4:	9801      	ldr	r0, [sp, #4]
 80236b6:	fb93 f1f1 	sdiv	r1, r3, r1
 80236ba:	fb00 3311 	mls	r3, r0, r1, r3
 80236be:	9106      	str	r1, [sp, #24]
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	9307      	str	r3, [sp, #28]
 80236c4:	da04      	bge.n	80236d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80236c6:	1e4b      	subs	r3, r1, #1
 80236c8:	9306      	str	r3, [sp, #24]
 80236ca:	9b07      	ldr	r3, [sp, #28]
 80236cc:	4403      	add	r3, r0
 80236ce:	9307      	str	r3, [sp, #28]
 80236d0:	9b08      	ldr	r3, [sp, #32]
 80236d2:	f04f 0c00 	mov.w	ip, #0
 80236d6:	9901      	ldr	r1, [sp, #4]
 80236d8:	1a5b      	subs	r3, r3, r1
 80236da:	4659      	mov	r1, fp
 80236dc:	9308      	str	r3, [sp, #32]
 80236de:	9b02      	ldr	r3, [sp, #8]
 80236e0:	f1c3 0320 	rsb	r3, r3, #32
 80236e4:	930a      	str	r3, [sp, #40]	; 0x28
 80236e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80236e8:	9b02      	ldr	r3, [sp, #8]
 80236ea:	1a1b      	subs	r3, r3, r0
 80236ec:	9309      	str	r3, [sp, #36]	; 0x24
 80236ee:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 80236f2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80236f6:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80236fa:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80236fe:	181b      	adds	r3, r3, r0
 8023700:	bf58      	it	pl
 8023702:	9801      	ldrpl	r0, [sp, #4]
 8023704:	9308      	str	r3, [sp, #32]
 8023706:	bf54      	ite	pl
 8023708:	1a1b      	subpl	r3, r3, r0
 802370a:	9d06      	ldrmi	r5, [sp, #24]
 802370c:	9802      	ldr	r0, [sp, #8]
 802370e:	bf5e      	ittt	pl
 8023710:	9308      	strpl	r3, [sp, #32]
 8023712:	9b06      	ldrpl	r3, [sp, #24]
 8023714:	1c5d      	addpl	r5, r3, #1
 8023716:	44ab      	add	fp, r5
 8023718:	ea4f 136b 	mov.w	r3, fp, asr #5
 802371c:	9304      	str	r3, [sp, #16]
 802371e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023720:	4283      	cmp	r3, r0
 8023722:	f040 815a 	bne.w	80239da <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8023726:	9b04      	ldr	r3, [sp, #16]
 8023728:	9a00      	ldr	r2, [sp, #0]
 802372a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802372e:	4543      	cmp	r3, r8
 8023730:	d01a      	beq.n	8023768 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023732:	8b61      	ldrh	r1, [r4, #26]
 8023734:	8b23      	ldrh	r3, [r4, #24]
 8023736:	430b      	orrs	r3, r1
 8023738:	d00e      	beq.n	8023758 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802373a:	f1be 0f00 	cmp.w	lr, #0
 802373e:	db0b      	blt.n	8023758 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023742:	4573      	cmp	r3, lr
 8023744:	dd08      	ble.n	8023758 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023746:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802374a:	4299      	cmp	r1, r3
 802374c:	f0c0 8138 	bcc.w	80239c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8023750:	f04f 0301 	mov.w	r3, #1
 8023754:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023758:	9b04      	ldr	r3, [sp, #16]
 802375a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802375e:	82a3      	strh	r3, [r4, #20]
 8023760:	9b00      	ldr	r3, [sp, #0]
 8023762:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023766:	82e3      	strh	r3, [r4, #22]
 8023768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802376a:	9a00      	ldr	r2, [sp, #0]
 802376c:	441a      	add	r2, r3
 802376e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023772:	9200      	str	r2, [sp, #0]
 8023774:	9900      	ldr	r1, [sp, #0]
 8023776:	9a04      	ldr	r2, [sp, #16]
 8023778:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802377c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023784:	4288      	cmp	r0, r1
 8023786:	d01a      	beq.n	80237be <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8023788:	8b60      	ldrh	r0, [r4, #26]
 802378a:	8b21      	ldrh	r1, [r4, #24]
 802378c:	ea50 0201 	orrs.w	r2, r0, r1
 8023790:	d00d      	beq.n	80237ae <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023792:	2b00      	cmp	r3, #0
 8023794:	db0b      	blt.n	80237ae <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023796:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023798:	4299      	cmp	r1, r3
 802379a:	dd08      	ble.n	80237ae <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802379c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80237a0:	4299      	cmp	r1, r3
 80237a2:	f0c0 81f9 	bcc.w	8023b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80237a6:	f04f 0301 	mov.w	r3, #1
 80237aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80237ae:	9b04      	ldr	r3, [sp, #16]
 80237b0:	f8a4 c018 	strh.w	ip, [r4, #24]
 80237b4:	82a3      	strh	r3, [r4, #20]
 80237b6:	9b00      	ldr	r3, [sp, #0]
 80237b8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80237bc:	82e3      	strh	r3, [r4, #22]
 80237be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80237c0:	4659      	mov	r1, fp
 80237c2:	9a00      	ldr	r2, [sp, #0]
 80237c4:	4293      	cmp	r3, r2
 80237c6:	d192      	bne.n	80236ee <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80237c8:	9b02      	ldr	r3, [sp, #8]
 80237ca:	f1c3 0c20 	rsb	ip, r3, #32
 80237ce:	9b05      	ldr	r3, [sp, #20]
 80237d0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80237d4:	9b03      	ldr	r3, [sp, #12]
 80237d6:	459c      	cmp	ip, r3
 80237d8:	f040 81f8 	bne.w	8023bcc <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80237dc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80237e0:	9a00      	ldr	r2, [sp, #0]
 80237e2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80237e6:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 80237ea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80237ee:	4288      	cmp	r0, r1
 80237f0:	f43f ad54 	beq.w	802329c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80237f4:	8b60      	ldrh	r0, [r4, #26]
 80237f6:	8b21      	ldrh	r1, [r4, #24]
 80237f8:	ea50 0201 	orrs.w	r2, r0, r1
 80237fc:	d00c      	beq.n	8023818 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80237fe:	2b00      	cmp	r3, #0
 8023800:	db0a      	blt.n	8023818 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023802:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023804:	4299      	cmp	r1, r3
 8023806:	dd07      	ble.n	8023818 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023808:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802380c:	4299      	cmp	r1, r3
 802380e:	f0c0 81d0 	bcc.w	8023bb2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8023812:	2301      	movs	r3, #1
 8023814:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023818:	9b00      	ldr	r3, [sp, #0]
 802381a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802381e:	82e3      	strh	r3, [r4, #22]
 8023820:	e517      	b.n	8023252 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8023822:	2f00      	cmp	r7, #0
 8023824:	f2c0 8097 	blt.w	8023956 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8023828:	2301      	movs	r3, #1
 802382a:	f1c1 0c20 	rsb	ip, r1, #32
 802382e:	9307      	str	r3, [sp, #28]
 8023830:	2320      	movs	r3, #32
 8023832:	fb02 f20c 	mul.w	r2, r2, ip
 8023836:	9306      	str	r3, [sp, #24]
 8023838:	9b06      	ldr	r3, [sp, #24]
 802383a:	fb92 fcf7 	sdiv	ip, r2, r7
 802383e:	fb07 221c 	mls	r2, r7, ip, r2
 8023842:	4419      	add	r1, r3
 8023844:	9b00      	ldr	r3, [sp, #0]
 8023846:	2a00      	cmp	r2, #0
 8023848:	bfbc      	itt	lt
 802384a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802384e:	19d2      	addlt	r2, r2, r7
 8023850:	fb0c 3101 	mla	r1, ip, r1, r3
 8023854:	9b07      	ldr	r3, [sp, #28]
 8023856:	4460      	add	r0, ip
 8023858:	441d      	add	r5, r3
 802385a:	0433      	lsls	r3, r6, #16
 802385c:	b200      	sxth	r0, r0
 802385e:	930a      	str	r3, [sp, #40]	; 0x28
 8023860:	18eb      	adds	r3, r5, r3
 8023862:	b209      	sxth	r1, r1
 8023864:	8320      	strh	r0, [r4, #24]
 8023866:	454b      	cmp	r3, r9
 8023868:	8361      	strh	r1, [r4, #26]
 802386a:	d014      	beq.n	8023896 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 802386c:	ea50 0301 	orrs.w	r3, r0, r1
 8023870:	d00c      	beq.n	802388c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023872:	f1b8 0f00 	cmp.w	r8, #0
 8023876:	db09      	blt.n	802388c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802387a:	4543      	cmp	r3, r8
 802387c:	dd06      	ble.n	802388c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802387e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023882:	4299      	cmp	r1, r3
 8023884:	d36e      	bcc.n	8023964 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8023886:	2301      	movs	r3, #1
 8023888:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802388c:	2300      	movs	r3, #0
 802388e:	82a5      	strh	r5, [r4, #20]
 8023890:	82e6      	strh	r6, [r4, #22]
 8023892:	8323      	strh	r3, [r4, #24]
 8023894:	8363      	strh	r3, [r4, #26]
 8023896:	9904      	ldr	r1, [sp, #16]
 8023898:	eb0e 030c 	add.w	r3, lr, ip
 802389c:	42a9      	cmp	r1, r5
 802389e:	d04d      	beq.n	802393c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 80238a0:	9902      	ldr	r1, [sp, #8]
 80238a2:	1bd2      	subs	r2, r2, r7
 80238a4:	1ac9      	subs	r1, r1, r3
 80238a6:	9200      	str	r2, [sp, #0]
 80238a8:	448c      	add	ip, r1
 80238aa:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80238ae:	fb9c fef7 	sdiv	lr, ip, r7
 80238b2:	fb07 cc1e 	mls	ip, r7, lr, ip
 80238b6:	f1bc 0f00 	cmp.w	ip, #0
 80238ba:	bfbc      	itt	lt
 80238bc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80238c0:	44bc      	addlt	ip, r7
 80238c2:	f10e 0101 	add.w	r1, lr, #1
 80238c6:	910d      	str	r1, [sp, #52]	; 0x34
 80238c8:	9a00      	ldr	r2, [sp, #0]
 80238ca:	8b20      	ldrh	r0, [r4, #24]
 80238cc:	eb12 020c 	adds.w	r2, r2, ip
 80238d0:	8b61      	ldrh	r1, [r4, #26]
 80238d2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80238d6:	9200      	str	r2, [sp, #0]
 80238d8:	bf5b      	ittet	pl
 80238da:	1bd2      	subpl	r2, r2, r7
 80238dc:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 80238e0:	46f0      	movmi	r8, lr
 80238e2:	9200      	strpl	r2, [sp, #0]
 80238e4:	9a07      	ldr	r2, [sp, #28]
 80238e6:	4440      	add	r0, r8
 80238e8:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80238ec:	4443      	add	r3, r8
 80238ee:	4415      	add	r5, r2
 80238f0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80238f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80238f6:	b200      	sxth	r0, r0
 80238f8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80238fc:	442a      	add	r2, r5
 80238fe:	b209      	sxth	r1, r1
 8023900:	8320      	strh	r0, [r4, #24]
 8023902:	454a      	cmp	r2, r9
 8023904:	8361      	strh	r1, [r4, #26]
 8023906:	d016      	beq.n	8023936 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8023908:	ea50 0201 	orrs.w	r2, r0, r1
 802390c:	d00d      	beq.n	802392a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802390e:	f1b8 0f00 	cmp.w	r8, #0
 8023912:	db0a      	blt.n	802392a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023914:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023916:	4541      	cmp	r1, r8
 8023918:	dd07      	ble.n	802392a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802391a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802391e:	4288      	cmp	r0, r1
 8023920:	d330      	bcc.n	8023984 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8023922:	f04f 0201 	mov.w	r2, #1
 8023926:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802392a:	f04f 0200 	mov.w	r2, #0
 802392e:	82a5      	strh	r5, [r4, #20]
 8023930:	82e6      	strh	r6, [r4, #22]
 8023932:	8322      	strh	r2, [r4, #24]
 8023934:	8362      	strh	r2, [r4, #26]
 8023936:	9904      	ldr	r1, [sp, #16]
 8023938:	42a9      	cmp	r1, r5
 802393a:	d1c5      	bne.n	80238c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 802393c:	9a02      	ldr	r2, [sp, #8]
 802393e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023940:	1ad3      	subs	r3, r2, r3
 8023942:	8b22      	ldrh	r2, [r4, #24]
 8023944:	3120      	adds	r1, #32
 8023946:	441a      	add	r2, r3
 8023948:	8322      	strh	r2, [r4, #24]
 802394a:	9a06      	ldr	r2, [sp, #24]
 802394c:	1a89      	subs	r1, r1, r2
 802394e:	8b62      	ldrh	r2, [r4, #26]
 8023950:	fb03 2301 	mla	r3, r3, r1, r2
 8023954:	e64e      	b.n	80235f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8023956:	f04f 33ff 	mov.w	r3, #4294967295
 802395a:	434a      	muls	r2, r1
 802395c:	427f      	negs	r7, r7
 802395e:	9307      	str	r3, [sp, #28]
 8023960:	2300      	movs	r3, #0
 8023962:	e768      	b.n	8023836 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8023964:	f104 0314 	add.w	r3, r4, #20
 8023968:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802396c:	cb03      	ldmia	r3!, {r0, r1}
 802396e:	f8c8 0000 	str.w	r0, [r8]
 8023972:	f8c8 1004 	str.w	r1, [r8, #4]
 8023976:	6923      	ldr	r3, [r4, #16]
 8023978:	3308      	adds	r3, #8
 802397a:	6123      	str	r3, [r4, #16]
 802397c:	68a3      	ldr	r3, [r4, #8]
 802397e:	3301      	adds	r3, #1
 8023980:	60a3      	str	r3, [r4, #8]
 8023982:	e783      	b.n	802388c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023984:	f104 0814 	add.w	r8, r4, #20
 8023988:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802398c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023990:	f8c9 0000 	str.w	r0, [r9]
 8023994:	f8c9 1004 	str.w	r1, [r9, #4]
 8023998:	6921      	ldr	r1, [r4, #16]
 802399a:	3108      	adds	r1, #8
 802399c:	6121      	str	r1, [r4, #16]
 802399e:	68a1      	ldr	r1, [r4, #8]
 80239a0:	3101      	adds	r1, #1
 80239a2:	60a1      	str	r1, [r4, #8]
 80239a4:	e7c1      	b.n	802392a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80239a6:	f104 0314 	add.w	r3, r4, #20
 80239aa:	6925      	ldr	r5, [r4, #16]
 80239ac:	cb03      	ldmia	r3!, {r0, r1}
 80239ae:	6028      	str	r0, [r5, #0]
 80239b0:	6069      	str	r1, [r5, #4]
 80239b2:	6923      	ldr	r3, [r4, #16]
 80239b4:	3308      	adds	r3, #8
 80239b6:	6123      	str	r3, [r4, #16]
 80239b8:	68a3      	ldr	r3, [r4, #8]
 80239ba:	3301      	adds	r3, #1
 80239bc:	60a3      	str	r3, [r4, #8]
 80239be:	e66a      	b.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80239c0:	f104 0314 	add.w	r3, r4, #20
 80239c4:	6925      	ldr	r5, [r4, #16]
 80239c6:	cb03      	ldmia	r3!, {r0, r1}
 80239c8:	6028      	str	r0, [r5, #0]
 80239ca:	6069      	str	r1, [r5, #4]
 80239cc:	6923      	ldr	r3, [r4, #16]
 80239ce:	3308      	adds	r3, #8
 80239d0:	6123      	str	r3, [r4, #16]
 80239d2:	68a3      	ldr	r3, [r4, #8]
 80239d4:	3301      	adds	r3, #1
 80239d6:	60a3      	str	r3, [r4, #8]
 80239d8:	e6be      	b.n	8023758 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80239da:	f00b 031f 	and.w	r3, fp, #31
 80239de:	114f      	asrs	r7, r1, #5
 80239e0:	8b20      	ldrh	r0, [r4, #24]
 80239e2:	f001 011f 	and.w	r1, r1, #31
 80239e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80239e8:	9b04      	ldr	r3, [sp, #16]
 80239ea:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80239ee:	429f      	cmp	r7, r3
 80239f0:	d10a      	bne.n	8023a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 80239f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239f4:	4418      	add	r0, r3
 80239f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80239f8:	4419      	add	r1, r3
 80239fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239fc:	8320      	strh	r0, [r4, #24]
 80239fe:	fb03 9901 	mla	r9, r3, r1, r9
 8023a02:	f8a4 901a 	strh.w	r9, [r4, #26]
 8023a06:	e6af      	b.n	8023768 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023a08:	2d00      	cmp	r5, #0
 8023a0a:	f2c0 809b 	blt.w	8023b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8023a0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023a10:	f1c1 0320 	rsb	r3, r1, #32
 8023a14:	4373      	muls	r3, r6
 8023a16:	2601      	movs	r6, #1
 8023a18:	960e      	str	r6, [sp, #56]	; 0x38
 8023a1a:	2620      	movs	r6, #32
 8023a1c:	960d      	str	r6, [sp, #52]	; 0x34
 8023a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023a20:	fb93 f6f5 	sdiv	r6, r3, r5
 8023a24:	4411      	add	r1, r2
 8023a26:	fb05 3316 	mls	r3, r5, r6, r3
 8023a2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	4417      	add	r7, r2
 8023a30:	9a00      	ldr	r2, [sp, #0]
 8023a32:	bfbc      	itt	lt
 8023a34:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023a38:	195b      	addlt	r3, r3, r5
 8023a3a:	0412      	lsls	r2, r2, #16
 8023a3c:	fb06 9101 	mla	r1, r6, r1, r9
 8023a40:	4430      	add	r0, r6
 8023a42:	eb07 0902 	add.w	r9, r7, r2
 8023a46:	9210      	str	r2, [sp, #64]	; 0x40
 8023a48:	b200      	sxth	r0, r0
 8023a4a:	b209      	sxth	r1, r1
 8023a4c:	45c1      	cmp	r9, r8
 8023a4e:	8320      	strh	r0, [r4, #24]
 8023a50:	8361      	strh	r1, [r4, #26]
 8023a52:	d017      	beq.n	8023a84 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8023a54:	ea50 0201 	orrs.w	r2, r0, r1
 8023a58:	d00d      	beq.n	8023a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023a5a:	f1be 0f00 	cmp.w	lr, #0
 8023a5e:	db0a      	blt.n	8023a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023a60:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023a62:	4571      	cmp	r1, lr
 8023a64:	dd07      	ble.n	8023a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023a66:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023a6a:	4288      	cmp	r0, r1
 8023a6c:	d372      	bcc.n	8023b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8023a6e:	f04f 0201 	mov.w	r2, #1
 8023a72:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023a76:	9a00      	ldr	r2, [sp, #0]
 8023a78:	82a7      	strh	r7, [r4, #20]
 8023a7a:	82e2      	strh	r2, [r4, #22]
 8023a7c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023a80:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a86:	eb02 0e06 	add.w	lr, r2, r6
 8023a8a:	9a04      	ldr	r2, [sp, #16]
 8023a8c:	42ba      	cmp	r2, r7
 8023a8e:	d049      	beq.n	8023b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8023a90:	9a02      	ldr	r2, [sp, #8]
 8023a92:	1b5b      	subs	r3, r3, r5
 8023a94:	eba2 010e 	sub.w	r1, r2, lr
 8023a98:	440e      	add	r6, r1
 8023a9a:	0176      	lsls	r6, r6, #5
 8023a9c:	fb96 f8f5 	sdiv	r8, r6, r5
 8023aa0:	fb05 6618 	mls	r6, r5, r8, r6
 8023aa4:	2e00      	cmp	r6, #0
 8023aa6:	bfbc      	itt	lt
 8023aa8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8023aac:	1976      	addlt	r6, r6, r5
 8023aae:	f108 0201 	add.w	r2, r8, #1
 8023ab2:	9211      	str	r2, [sp, #68]	; 0x44
 8023ab4:	199b      	adds	r3, r3, r6
 8023ab6:	8b20      	ldrh	r0, [r4, #24]
 8023ab8:	8b61      	ldrh	r1, [r4, #26]
 8023aba:	bf54      	ite	pl
 8023abc:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8023ac0:	46c1      	movmi	r9, r8
 8023ac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ac4:	bf58      	it	pl
 8023ac6:	1b5b      	subpl	r3, r3, r5
 8023ac8:	4448      	add	r0, r9
 8023aca:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8023ace:	4417      	add	r7, r2
 8023ad0:	44ce      	add	lr, r9
 8023ad2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023ad4:	b200      	sxth	r0, r0
 8023ad6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8023ada:	b209      	sxth	r1, r1
 8023adc:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023ae0:	443a      	add	r2, r7
 8023ae2:	8320      	strh	r0, [r4, #24]
 8023ae4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023ae8:	8361      	strh	r1, [r4, #26]
 8023aea:	4552      	cmp	r2, sl
 8023aec:	d017      	beq.n	8023b1e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8023aee:	ea50 0201 	orrs.w	r2, r0, r1
 8023af2:	d00d      	beq.n	8023b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023af4:	f1b9 0f00 	cmp.w	r9, #0
 8023af8:	db0a      	blt.n	8023b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023afa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023afc:	4549      	cmp	r1, r9
 8023afe:	dd07      	ble.n	8023b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023b00:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023b04:	4288      	cmp	r0, r1
 8023b06:	d336      	bcc.n	8023b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8023b08:	f04f 0201 	mov.w	r2, #1
 8023b0c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023b10:	9a00      	ldr	r2, [sp, #0]
 8023b12:	82a7      	strh	r7, [r4, #20]
 8023b14:	82e2      	strh	r2, [r4, #22]
 8023b16:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023b1a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023b1e:	9a04      	ldr	r2, [sp, #16]
 8023b20:	42ba      	cmp	r2, r7
 8023b22:	d1c7      	bne.n	8023ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8023b24:	9b02      	ldr	r3, [sp, #8]
 8023b26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023b28:	eba3 0e0e 	sub.w	lr, r3, lr
 8023b2c:	8b23      	ldrh	r3, [r4, #24]
 8023b2e:	3120      	adds	r1, #32
 8023b30:	4473      	add	r3, lr
 8023b32:	8323      	strh	r3, [r4, #24]
 8023b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023b36:	1ac9      	subs	r1, r1, r3
 8023b38:	8b63      	ldrh	r3, [r4, #26]
 8023b3a:	fb0e 3e01 	mla	lr, lr, r1, r3
 8023b3e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023b42:	e611      	b.n	8023768 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023b44:	f04f 36ff 	mov.w	r6, #4294967295
 8023b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b4a:	426d      	negs	r5, r5
 8023b4c:	960e      	str	r6, [sp, #56]	; 0x38
 8023b4e:	2600      	movs	r6, #0
 8023b50:	434b      	muls	r3, r1
 8023b52:	e763      	b.n	8023a1c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8023b54:	f104 0e14 	add.w	lr, r4, #20
 8023b58:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023b5c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023b60:	f8c8 0000 	str.w	r0, [r8]
 8023b64:	f8c8 1004 	str.w	r1, [r8, #4]
 8023b68:	6921      	ldr	r1, [r4, #16]
 8023b6a:	3108      	adds	r1, #8
 8023b6c:	6121      	str	r1, [r4, #16]
 8023b6e:	68a1      	ldr	r1, [r4, #8]
 8023b70:	3101      	adds	r1, #1
 8023b72:	60a1      	str	r1, [r4, #8]
 8023b74:	e77f      	b.n	8023a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023b76:	f104 0914 	add.w	r9, r4, #20
 8023b7a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023b7e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8023b82:	f8ca 0000 	str.w	r0, [sl]
 8023b86:	f8ca 1004 	str.w	r1, [sl, #4]
 8023b8a:	6921      	ldr	r1, [r4, #16]
 8023b8c:	3108      	adds	r1, #8
 8023b8e:	6121      	str	r1, [r4, #16]
 8023b90:	68a1      	ldr	r1, [r4, #8]
 8023b92:	3101      	adds	r1, #1
 8023b94:	60a1      	str	r1, [r4, #8]
 8023b96:	e7bb      	b.n	8023b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023b98:	f104 0314 	add.w	r3, r4, #20
 8023b9c:	6925      	ldr	r5, [r4, #16]
 8023b9e:	cb03      	ldmia	r3!, {r0, r1}
 8023ba0:	6028      	str	r0, [r5, #0]
 8023ba2:	6069      	str	r1, [r5, #4]
 8023ba4:	6923      	ldr	r3, [r4, #16]
 8023ba6:	3308      	adds	r3, #8
 8023ba8:	6123      	str	r3, [r4, #16]
 8023baa:	68a3      	ldr	r3, [r4, #8]
 8023bac:	3301      	adds	r3, #1
 8023bae:	60a3      	str	r3, [r4, #8]
 8023bb0:	e5fd      	b.n	80237ae <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023bb2:	f104 0314 	add.w	r3, r4, #20
 8023bb6:	6925      	ldr	r5, [r4, #16]
 8023bb8:	cb03      	ldmia	r3!, {r0, r1}
 8023bba:	6028      	str	r0, [r5, #0]
 8023bbc:	6069      	str	r1, [r5, #4]
 8023bbe:	6923      	ldr	r3, [r4, #16]
 8023bc0:	3308      	adds	r3, #8
 8023bc2:	6123      	str	r3, [r4, #16]
 8023bc4:	68a3      	ldr	r3, [r4, #8]
 8023bc6:	3301      	adds	r3, #1
 8023bc8:	60a3      	str	r3, [r4, #8]
 8023bca:	e625      	b.n	8023818 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023bcc:	9b05      	ldr	r3, [sp, #20]
 8023bce:	ea4f 176b 	mov.w	r7, fp, asr #5
 8023bd2:	f00b 081f 	and.w	r8, fp, #31
 8023bd6:	8b20      	ldrh	r0, [r4, #24]
 8023bd8:	f003 031f 	and.w	r3, r3, #31
 8023bdc:	4577      	cmp	r7, lr
 8023bde:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8023be2:	9302      	str	r3, [sp, #8]
 8023be4:	9b03      	ldr	r3, [sp, #12]
 8023be6:	eba3 050c 	sub.w	r5, r3, ip
 8023bea:	d108      	bne.n	8023bfe <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8023bec:	9b02      	ldr	r3, [sp, #8]
 8023bee:	4428      	add	r0, r5
 8023bf0:	4498      	add	r8, r3
 8023bf2:	8320      	strh	r0, [r4, #24]
 8023bf4:	fb05 9508 	mla	r5, r5, r8, r9
 8023bf8:	8365      	strh	r5, [r4, #26]
 8023bfa:	f7ff bb4f 	b.w	802329c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023bfe:	9b05      	ldr	r3, [sp, #20]
 8023c00:	ebb3 030b 	subs.w	r3, r3, fp
 8023c04:	f100 809c 	bmi.w	8023d40 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8023c08:	f1c8 0120 	rsb	r1, r8, #32
 8023c0c:	2201      	movs	r2, #1
 8023c0e:	f04f 0b20 	mov.w	fp, #32
 8023c12:	434d      	muls	r5, r1
 8023c14:	9201      	str	r2, [sp, #4]
 8023c16:	9a01      	ldr	r2, [sp, #4]
 8023c18:	44d8      	add	r8, fp
 8023c1a:	fb95 f6f3 	sdiv	r6, r5, r3
 8023c1e:	fb03 5516 	mls	r5, r3, r6, r5
 8023c22:	4417      	add	r7, r2
 8023c24:	9a00      	ldr	r2, [sp, #0]
 8023c26:	2d00      	cmp	r5, #0
 8023c28:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8023c2c:	bfbc      	itt	lt
 8023c2e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023c32:	18ed      	addlt	r5, r5, r3
 8023c34:	eb07 0a02 	add.w	sl, r7, r2
 8023c38:	9204      	str	r2, [sp, #16]
 8023c3a:	fb06 9808 	mla	r8, r6, r8, r9
 8023c3e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023c42:	4430      	add	r0, r6
 8023c44:	fa0f f188 	sxth.w	r1, r8
 8023c48:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023c4c:	b200      	sxth	r0, r0
 8023c4e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023c52:	8361      	strh	r1, [r4, #26]
 8023c54:	8320      	strh	r0, [r4, #24]
 8023c56:	45ca      	cmp	sl, r9
 8023c58:	d015      	beq.n	8023c86 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8023c5a:	ea50 0201 	orrs.w	r2, r0, r1
 8023c5e:	d00c      	beq.n	8023c7a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8023c60:	f1b8 0f00 	cmp.w	r8, #0
 8023c64:	db09      	blt.n	8023c7a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8023c66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023c68:	4541      	cmp	r1, r8
 8023c6a:	dd06      	ble.n	8023c7a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8023c6c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023c70:	4288      	cmp	r0, r1
 8023c72:	d36e      	bcc.n	8023d52 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8023c74:	2101      	movs	r1, #1
 8023c76:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023c7a:	2100      	movs	r1, #0
 8023c7c:	9a00      	ldr	r2, [sp, #0]
 8023c7e:	82a7      	strh	r7, [r4, #20]
 8023c80:	82e2      	strh	r2, [r4, #22]
 8023c82:	8321      	strh	r1, [r4, #24]
 8023c84:	8361      	strh	r1, [r4, #26]
 8023c86:	45be      	cmp	lr, r7
 8023c88:	44b4      	add	ip, r6
 8023c8a:	d048      	beq.n	8023d1e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8023c8c:	9a03      	ldr	r2, [sp, #12]
 8023c8e:	1aed      	subs	r5, r5, r3
 8023c90:	eba2 010c 	sub.w	r1, r2, ip
 8023c94:	440e      	add	r6, r1
 8023c96:	0176      	lsls	r6, r6, #5
 8023c98:	fb96 f8f3 	sdiv	r8, r6, r3
 8023c9c:	fb03 6618 	mls	r6, r3, r8, r6
 8023ca0:	2e00      	cmp	r6, #0
 8023ca2:	bfbc      	itt	lt
 8023ca4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8023ca8:	18f6      	addlt	r6, r6, r3
 8023caa:	f108 0201 	add.w	r2, r8, #1
 8023cae:	9205      	str	r2, [sp, #20]
 8023cb0:	19ad      	adds	r5, r5, r6
 8023cb2:	8b20      	ldrh	r0, [r4, #24]
 8023cb4:	8b61      	ldrh	r1, [r4, #26]
 8023cb6:	bf54      	ite	pl
 8023cb8:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8023cbc:	46c1      	movmi	r9, r8
 8023cbe:	9a01      	ldr	r2, [sp, #4]
 8023cc0:	bf58      	it	pl
 8023cc2:	1aed      	subpl	r5, r5, r3
 8023cc4:	4448      	add	r0, r9
 8023cc6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8023cca:	4417      	add	r7, r2
 8023ccc:	44cc      	add	ip, r9
 8023cce:	9a04      	ldr	r2, [sp, #16]
 8023cd0:	b200      	sxth	r0, r0
 8023cd2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8023cd6:	b209      	sxth	r1, r1
 8023cd8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023cdc:	443a      	add	r2, r7
 8023cde:	8320      	strh	r0, [r4, #24]
 8023ce0:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023ce4:	8361      	strh	r1, [r4, #26]
 8023ce6:	4552      	cmp	r2, sl
 8023ce8:	d017      	beq.n	8023d1a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8023cea:	ea50 0201 	orrs.w	r2, r0, r1
 8023cee:	d00d      	beq.n	8023d0c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8023cf0:	f1b9 0f00 	cmp.w	r9, #0
 8023cf4:	db0a      	blt.n	8023d0c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8023cf6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023cf8:	4549      	cmp	r1, r9
 8023cfa:	dd07      	ble.n	8023d0c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8023cfc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023d00:	4288      	cmp	r0, r1
 8023d02:	d337      	bcc.n	8023d74 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8023d04:	f04f 0201 	mov.w	r2, #1
 8023d08:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023d0c:	9a00      	ldr	r2, [sp, #0]
 8023d0e:	82a7      	strh	r7, [r4, #20]
 8023d10:	82e2      	strh	r2, [r4, #22]
 8023d12:	f04f 0200 	mov.w	r2, #0
 8023d16:	8322      	strh	r2, [r4, #24]
 8023d18:	8362      	strh	r2, [r4, #26]
 8023d1a:	45be      	cmp	lr, r7
 8023d1c:	d1c8      	bne.n	8023cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8023d1e:	9b03      	ldr	r3, [sp, #12]
 8023d20:	8b62      	ldrh	r2, [r4, #26]
 8023d22:	eba3 0c0c 	sub.w	ip, r3, ip
 8023d26:	8b23      	ldrh	r3, [r4, #24]
 8023d28:	4463      	add	r3, ip
 8023d2a:	8323      	strh	r3, [r4, #24]
 8023d2c:	9b02      	ldr	r3, [sp, #8]
 8023d2e:	3320      	adds	r3, #32
 8023d30:	eba3 030b 	sub.w	r3, r3, fp
 8023d34:	fb0c 2c03 	mla	ip, ip, r3, r2
 8023d38:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023d3c:	f7ff baae 	b.w	802329c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023d40:	f04f 32ff 	mov.w	r2, #4294967295
 8023d44:	fb05 f508 	mul.w	r5, r5, r8
 8023d48:	425b      	negs	r3, r3
 8023d4a:	f04f 0b00 	mov.w	fp, #0
 8023d4e:	9201      	str	r2, [sp, #4]
 8023d50:	e761      	b.n	8023c16 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8023d52:	f104 0814 	add.w	r8, r4, #20
 8023d56:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023d5a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023d5e:	f8c9 0000 	str.w	r0, [r9]
 8023d62:	f8c9 1004 	str.w	r1, [r9, #4]
 8023d66:	6921      	ldr	r1, [r4, #16]
 8023d68:	3108      	adds	r1, #8
 8023d6a:	6121      	str	r1, [r4, #16]
 8023d6c:	68a1      	ldr	r1, [r4, #8]
 8023d6e:	3101      	adds	r1, #1
 8023d70:	60a1      	str	r1, [r4, #8]
 8023d72:	e782      	b.n	8023c7a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8023d74:	f104 0914 	add.w	r9, r4, #20
 8023d78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023d7c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8023d80:	f8ca 0000 	str.w	r0, [sl]
 8023d84:	f8ca 1004 	str.w	r1, [sl, #4]
 8023d88:	6921      	ldr	r1, [r4, #16]
 8023d8a:	3108      	adds	r1, #8
 8023d8c:	6121      	str	r1, [r4, #16]
 8023d8e:	68a1      	ldr	r1, [r4, #8]
 8023d90:	3101      	adds	r1, #1
 8023d92:	60a1      	str	r1, [r4, #8]
 8023d94:	e7ba      	b.n	8023d0c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08023d96 <_ZN8touchgfx7Outline6lineToEii>:
 8023d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023d98:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8023d9a:	4604      	mov	r4, r0
 8023d9c:	460d      	mov	r5, r1
 8023d9e:	4616      	mov	r6, r2
 8023da0:	079b      	lsls	r3, r3, #30
 8023da2:	d526      	bpl.n	8023df2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8023da4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8023da8:	ea85 0001 	eor.w	r0, r5, r1
 8023dac:	ea86 0302 	eor.w	r3, r6, r2
 8023db0:	4303      	orrs	r3, r0
 8023db2:	d01e      	beq.n	8023df2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8023db4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8023db6:	114b      	asrs	r3, r1, #5
 8023db8:	9600      	str	r6, [sp, #0]
 8023dba:	4283      	cmp	r3, r0
 8023dbc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023dbe:	bfb8      	it	lt
 8023dc0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8023dc2:	3301      	adds	r3, #1
 8023dc4:	4283      	cmp	r3, r0
 8023dc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8023dc8:	bfc8      	it	gt
 8023dca:	6363      	strgt	r3, [r4, #52]	; 0x34
 8023dcc:	116b      	asrs	r3, r5, #5
 8023dce:	4283      	cmp	r3, r0
 8023dd0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023dd2:	bfb8      	it	lt
 8023dd4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8023dd6:	3301      	adds	r3, #1
 8023dd8:	4283      	cmp	r3, r0
 8023dda:	4620      	mov	r0, r4
 8023ddc:	bfc8      	it	gt
 8023dde:	6363      	strgt	r3, [r4, #52]	; 0x34
 8023de0:	462b      	mov	r3, r5
 8023de2:	f7ff f9e3 	bl	80231ac <_ZN8touchgfx7Outline10renderLineEiiii>
 8023de6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023de8:	f043 0301 	orr.w	r3, r3, #1
 8023dec:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8023df0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023df2:	b002      	add	sp, #8
 8023df4:	bd70      	pop	{r4, r5, r6, pc}

08023df6 <_ZN8touchgfx7Outline6moveToEii>:
 8023df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023df8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8023dfa:	4615      	mov	r5, r2
 8023dfc:	4604      	mov	r4, r0
 8023dfe:	460e      	mov	r6, r1
 8023e00:	079a      	lsls	r2, r3, #30
 8023e02:	d401      	bmi.n	8023e08 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8023e04:	f7ff f98c 	bl	8023120 <_ZN8touchgfx7Outline5resetEv>
 8023e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023e0a:	07db      	lsls	r3, r3, #31
 8023e0c:	d504      	bpl.n	8023e18 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8023e0e:	4620      	mov	r0, r4
 8023e10:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8023e14:	f7ff ffbf 	bl	8023d96 <_ZN8touchgfx7Outline6lineToEii>
 8023e18:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8023e1c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023e20:	116f      	asrs	r7, r5, #5
 8023e22:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023e26:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8023e2a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023e2e:	4291      	cmp	r1, r2
 8023e30:	d015      	beq.n	8023e5e <_ZN8touchgfx7Outline6moveToEii+0x68>
 8023e32:	8b61      	ldrh	r1, [r4, #26]
 8023e34:	8b22      	ldrh	r2, [r4, #24]
 8023e36:	430a      	orrs	r2, r1
 8023e38:	d00b      	beq.n	8023e52 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8023e3a:	2b00      	cmp	r3, #0
 8023e3c:	db09      	blt.n	8023e52 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8023e3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023e40:	429a      	cmp	r2, r3
 8023e42:	dd06      	ble.n	8023e52 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8023e44:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023e48:	429a      	cmp	r2, r3
 8023e4a:	d30d      	bcc.n	8023e68 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8023e4c:	2301      	movs	r3, #1
 8023e4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023e52:	2300      	movs	r3, #0
 8023e54:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023e58:	82e7      	strh	r7, [r4, #22]
 8023e5a:	8323      	strh	r3, [r4, #24]
 8023e5c:	8363      	strh	r3, [r4, #26]
 8023e5e:	61e6      	str	r6, [r4, #28]
 8023e60:	62a5      	str	r5, [r4, #40]	; 0x28
 8023e62:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8023e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023e68:	f104 0314 	add.w	r3, r4, #20
 8023e6c:	6922      	ldr	r2, [r4, #16]
 8023e6e:	cb03      	ldmia	r3!, {r0, r1}
 8023e70:	6010      	str	r0, [r2, #0]
 8023e72:	6051      	str	r1, [r2, #4]
 8023e74:	6923      	ldr	r3, [r4, #16]
 8023e76:	3308      	adds	r3, #8
 8023e78:	6123      	str	r3, [r4, #16]
 8023e7a:	68a3      	ldr	r3, [r4, #8]
 8023e7c:	3301      	adds	r3, #1
 8023e7e:	60a3      	str	r3, [r4, #8]
 8023e80:	e7e7      	b.n	8023e52 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08023e82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8023e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e86:	b0d1      	sub	sp, #324	; 0x144
 8023e88:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8023e8c:	466c      	mov	r4, sp
 8023e8e:	1a0d      	subs	r5, r1, r0
 8023e90:	f100 0208 	add.w	r2, r0, #8
 8023e94:	2d48      	cmp	r5, #72	; 0x48
 8023e96:	f340 80ba 	ble.w	802400e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8023e9a:	112d      	asrs	r5, r5, #4
 8023e9c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8023ea0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8023ea4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8023ea8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8023eac:	f9b0 8000 	ldrsh.w	r8, [r0]
 8023eb0:	681e      	ldr	r6, [r3, #0]
 8023eb2:	6006      	str	r6, [r0, #0]
 8023eb4:	685e      	ldr	r6, [r3, #4]
 8023eb6:	6046      	str	r6, [r0, #4]
 8023eb8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8023ebc:	f8a3 c004 	strh.w	ip, [r3, #4]
 8023ec0:	f8a3 e002 	strh.w	lr, [r3, #2]
 8023ec4:	80df      	strh	r7, [r3, #6]
 8023ec6:	f1a1 0308 	sub.w	r3, r1, #8
 8023eca:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8023ece:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8023ed2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8023ed6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8023eda:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8023ede:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8023ee2:	45ac      	cmp	ip, r5
 8023ee4:	dd0f      	ble.n	8023f06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8023ee6:	681d      	ldr	r5, [r3, #0]
 8023ee8:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8023eec:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8023ef0:	6015      	str	r5, [r2, #0]
 8023ef2:	685d      	ldr	r5, [r3, #4]
 8023ef4:	6055      	str	r5, [r2, #4]
 8023ef6:	f821 7c08 	strh.w	r7, [r1, #-8]
 8023efa:	f821 6c06 	strh.w	r6, [r1, #-6]
 8023efe:	f821 ec04 	strh.w	lr, [r1, #-4]
 8023f02:	f821 cc02 	strh.w	ip, [r1, #-2]
 8023f06:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8023f0a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023f0e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8023f12:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8023f16:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8023f1a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8023f1e:	4565      	cmp	r5, ip
 8023f20:	dd0d      	ble.n	8023f3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8023f22:	6815      	ldr	r5, [r2, #0]
 8023f24:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8023f28:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8023f2c:	6005      	str	r5, [r0, #0]
 8023f2e:	6855      	ldr	r5, [r2, #4]
 8023f30:	8107      	strh	r7, [r0, #8]
 8023f32:	6045      	str	r5, [r0, #4]
 8023f34:	8146      	strh	r6, [r0, #10]
 8023f36:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8023f3a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8023f3e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023f42:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8023f46:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8023f4a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8023f4e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8023f52:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8023f56:	45ac      	cmp	ip, r5
 8023f58:	dd0f      	ble.n	8023f7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8023f5a:	681d      	ldr	r5, [r3, #0]
 8023f5c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8023f60:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8023f64:	6005      	str	r5, [r0, #0]
 8023f66:	685d      	ldr	r5, [r3, #4]
 8023f68:	6045      	str	r5, [r0, #4]
 8023f6a:	f821 7c08 	strh.w	r7, [r1, #-8]
 8023f6e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8023f72:	f821 ec04 	strh.w	lr, [r1, #-4]
 8023f76:	f821 cc02 	strh.w	ip, [r1, #-2]
 8023f7a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8023f7e:	f102 0508 	add.w	r5, r2, #8
 8023f82:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8023f86:	f9b0 e000 	ldrsh.w	lr, [r0]
 8023f8a:	462f      	mov	r7, r5
 8023f8c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8023f90:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8023f94:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8023f98:	45b2      	cmp	sl, r6
 8023f9a:	dc18      	bgt.n	8023fce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8023f9c:	3b08      	subs	r3, #8
 8023f9e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8023fa2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8023fa6:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8023faa:	45b2      	cmp	sl, r6
 8023fac:	dbf6      	blt.n	8023f9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8023fae:	42ab      	cmp	r3, r5
 8023fb0:	681e      	ldr	r6, [r3, #0]
 8023fb2:	d30e      	bcc.n	8023fd2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8023fb4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8023fb8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8023fbc:	602e      	str	r6, [r5, #0]
 8023fbe:	685e      	ldr	r6, [r3, #4]
 8023fc0:	606e      	str	r6, [r5, #4]
 8023fc2:	f8a3 9000 	strh.w	r9, [r3]
 8023fc6:	f8a3 8002 	strh.w	r8, [r3, #2]
 8023fca:	809f      	strh	r7, [r3, #4]
 8023fcc:	80da      	strh	r2, [r3, #6]
 8023fce:	462a      	mov	r2, r5
 8023fd0:	e7d3      	b.n	8023f7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8023fd2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8023fd6:	6006      	str	r6, [r0, #0]
 8023fd8:	685e      	ldr	r6, [r3, #4]
 8023fda:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8023fde:	6046      	str	r6, [r0, #4]
 8023fe0:	1a1e      	subs	r6, r3, r0
 8023fe2:	80da      	strh	r2, [r3, #6]
 8023fe4:	1b4a      	subs	r2, r1, r5
 8023fe6:	f8a3 e000 	strh.w	lr, [r3]
 8023fea:	10d2      	asrs	r2, r2, #3
 8023fec:	f8a3 c002 	strh.w	ip, [r3, #2]
 8023ff0:	f8a3 8004 	strh.w	r8, [r3, #4]
 8023ff4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8023ff8:	bfb5      	itete	lt
 8023ffa:	e9c4 0300 	strdlt	r0, r3, [r4]
 8023ffe:	4607      	movge	r7, r0
 8024000:	460b      	movlt	r3, r1
 8024002:	e9c4 5100 	strdge	r5, r1, [r4]
 8024006:	4638      	mov	r0, r7
 8024008:	3408      	adds	r4, #8
 802400a:	4619      	mov	r1, r3
 802400c:	e73f      	b.n	8023e8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802400e:	4291      	cmp	r1, r2
 8024010:	d925      	bls.n	802405e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024012:	f1a2 0310 	sub.w	r3, r2, #16
 8024016:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802401a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802401e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024022:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024026:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802402a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802402e:	42b5      	cmp	r5, r6
 8024030:	dd13      	ble.n	802405a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024032:	461d      	mov	r5, r3
 8024034:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024038:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802403c:	3b08      	subs	r3, #8
 802403e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024042:	619e      	str	r6, [r3, #24]
 8024044:	42a8      	cmp	r0, r5
 8024046:	686e      	ldr	r6, [r5, #4]
 8024048:	f8a3 c010 	strh.w	ip, [r3, #16]
 802404c:	61de      	str	r6, [r3, #28]
 802404e:	825f      	strh	r7, [r3, #18]
 8024050:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024054:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024058:	d1dd      	bne.n	8024016 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802405a:	3208      	adds	r2, #8
 802405c:	e7d7      	b.n	802400e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802405e:	466b      	mov	r3, sp
 8024060:	429c      	cmp	r4, r3
 8024062:	d903      	bls.n	802406c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024064:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024068:	3c08      	subs	r4, #8
 802406a:	e710      	b.n	8023e8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802406c:	b051      	add	sp, #324	; 0x144
 802406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024072 <_ZN8touchgfx7Outline9sortCellsEv>:
 8024072:	6881      	ldr	r1, [r0, #8]
 8024074:	b111      	cbz	r1, 802407c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024076:	68c0      	ldr	r0, [r0, #12]
 8024078:	f7ff bf03 	b.w	8023e82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802407c:	4770      	bx	lr

0802407e <_ZN8touchgfx7Outline8getCellsEv>:
 802407e:	b510      	push	{r4, lr}
 8024080:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024082:	4604      	mov	r4, r0
 8024084:	07da      	lsls	r2, r3, #31
 8024086:	d507      	bpl.n	8024098 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024088:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802408c:	f7ff fe83 	bl	8023d96 <_ZN8touchgfx7Outline6lineToEii>
 8024090:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024092:	f023 0301 	bic.w	r3, r3, #1
 8024096:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802409a:	079b      	lsls	r3, r3, #30
 802409c:	d51a      	bpl.n	80240d4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802409e:	8b62      	ldrh	r2, [r4, #26]
 80240a0:	8b23      	ldrh	r3, [r4, #24]
 80240a2:	4313      	orrs	r3, r2
 80240a4:	d00d      	beq.n	80240c2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80240a6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	db09      	blt.n	80240c2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80240ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80240b0:	4293      	cmp	r3, r2
 80240b2:	da06      	bge.n	80240c2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80240b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80240b8:	429a      	cmp	r2, r3
 80240ba:	d80d      	bhi.n	80240d8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 80240bc:	2301      	movs	r3, #1
 80240be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80240c2:	68a0      	ldr	r0, [r4, #8]
 80240c4:	b138      	cbz	r0, 80240d6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 80240c6:	4620      	mov	r0, r4
 80240c8:	f7ff ffd3 	bl	8024072 <_ZN8touchgfx7Outline9sortCellsEv>
 80240cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80240ce:	f023 0302 	bic.w	r3, r3, #2
 80240d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80240d4:	68e0      	ldr	r0, [r4, #12]
 80240d6:	bd10      	pop	{r4, pc}
 80240d8:	f104 0314 	add.w	r3, r4, #20
 80240dc:	6922      	ldr	r2, [r4, #16]
 80240de:	cb03      	ldmia	r3!, {r0, r1}
 80240e0:	6010      	str	r0, [r2, #0]
 80240e2:	6051      	str	r1, [r2, #4]
 80240e4:	6923      	ldr	r3, [r4, #16]
 80240e6:	3308      	adds	r3, #8
 80240e8:	6123      	str	r3, [r4, #16]
 80240ea:	68a3      	ldr	r3, [r4, #8]
 80240ec:	3301      	adds	r3, #1
 80240ee:	60a3      	str	r3, [r4, #8]
 80240f0:	e7e7      	b.n	80240c2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

080240f2 <_ZN8touchgfx8ScanlineD1Ev>:
 80240f2:	4770      	bx	lr

080240f4 <_ZN8touchgfx8ScanlineD0Ev>:
 80240f4:	b510      	push	{r4, lr}
 80240f6:	4604      	mov	r4, r0
 80240f8:	2124      	movs	r1, #36	; 0x24
 80240fa:	f000 f87a 	bl	80241f2 <_ZdlPvj>
 80240fe:	4620      	mov	r0, r4
 8024100:	bd10      	pop	{r4, pc}

08024102 <_ZN8touchgfx8Scanline5resetEv>:
 8024102:	b510      	push	{r4, lr}
 8024104:	4604      	mov	r4, r0
 8024106:	f7f3 f8f9 	bl	80172fc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802410a:	61a0      	str	r0, [r4, #24]
 802410c:	f7f3 f8fc 	bl	8017308 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024110:	61e0      	str	r0, [r4, #28]
 8024112:	f7f3 f8ff 	bl	8017314 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024116:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802411a:	6220      	str	r0, [r4, #32]
 802411c:	6160      	str	r0, [r4, #20]
 802411e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024122:	69e3      	ldr	r3, [r4, #28]
 8024124:	6123      	str	r3, [r4, #16]
 8024126:	2300      	movs	r3, #0
 8024128:	60e3      	str	r3, [r4, #12]
 802412a:	bd10      	pop	{r4, pc}

0802412c <_ZN8touchgfx8ScanlineC1Ev>:
 802412c:	4b07      	ldr	r3, [pc, #28]	; (802414c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802412e:	b510      	push	{r4, lr}
 8024130:	6003      	str	r3, [r0, #0]
 8024132:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024136:	4604      	mov	r4, r0
 8024138:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802413c:	2300      	movs	r3, #0
 802413e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024142:	6143      	str	r3, [r0, #20]
 8024144:	f7ff ffdd 	bl	8024102 <_ZN8touchgfx8Scanline5resetEv>
 8024148:	4620      	mov	r0, r4
 802414a:	bd10      	pop	{r4, pc}
 802414c:	080294d4 	.word	0x080294d4

08024150 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024154:	1e0c      	subs	r4, r1, #0
 8024156:	4605      	mov	r5, r0
 8024158:	4617      	mov	r7, r2
 802415a:	461e      	mov	r6, r3
 802415c:	da03      	bge.n	8024166 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802415e:	4426      	add	r6, r4
 8024160:	2e01      	cmp	r6, #1
 8024162:	d421      	bmi.n	80241a8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024164:	2400      	movs	r4, #0
 8024166:	f7f3 f8c3 	bl	80172f0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802416a:	42a0      	cmp	r0, r4
 802416c:	d91c      	bls.n	80241a8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802416e:	eb04 0806 	add.w	r8, r4, r6
 8024172:	f7f3 f8bd 	bl	80172f0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024176:	4580      	cmp	r8, r0
 8024178:	d902      	bls.n	8024180 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802417a:	f7f3 f8b9 	bl	80172f0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802417e:	1b06      	subs	r6, r0, r4
 8024180:	69a8      	ldr	r0, [r5, #24]
 8024182:	4632      	mov	r2, r6
 8024184:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024188:	4420      	add	r0, r4
 802418a:	f7f4 fdb0 	bl	8018cee <_ZN8touchgfx6memsetEPvhm>
 802418e:	686b      	ldr	r3, [r5, #4]
 8024190:	b2b2      	uxth	r2, r6
 8024192:	3301      	adds	r3, #1
 8024194:	42a3      	cmp	r3, r4
 8024196:	696b      	ldr	r3, [r5, #20]
 8024198:	d108      	bne.n	80241ac <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802419a:	8819      	ldrh	r1, [r3, #0]
 802419c:	440a      	add	r2, r1
 802419e:	801a      	strh	r2, [r3, #0]
 80241a0:	3c01      	subs	r4, #1
 80241a2:	4434      	add	r4, r6
 80241a4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80241a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241ac:	1c99      	adds	r1, r3, #2
 80241ae:	6169      	str	r1, [r5, #20]
 80241b0:	805a      	strh	r2, [r3, #2]
 80241b2:	692b      	ldr	r3, [r5, #16]
 80241b4:	1c9a      	adds	r2, r3, #2
 80241b6:	612a      	str	r2, [r5, #16]
 80241b8:	805c      	strh	r4, [r3, #2]
 80241ba:	68eb      	ldr	r3, [r5, #12]
 80241bc:	3301      	adds	r3, #1
 80241be:	60eb      	str	r3, [r5, #12]
 80241c0:	e7ee      	b.n	80241a0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

080241c2 <_ZN8touchgfx15RenderingBufferC1Ev>:
 80241c2:	2200      	movs	r2, #0
 80241c4:	6002      	str	r2, [r0, #0]
 80241c6:	7102      	strb	r2, [r0, #4]
 80241c8:	6102      	str	r2, [r0, #16]
 80241ca:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80241ce:	4770      	bx	lr

080241d0 <_ZN8touchgfx15RenderingBufferD1Ev>:
 80241d0:	4770      	bx	lr

080241d2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 80241d2:	6083      	str	r3, [r0, #8]
 80241d4:	9b00      	ldr	r3, [sp, #0]
 80241d6:	6001      	str	r1, [r0, #0]
 80241d8:	60c3      	str	r3, [r0, #12]
 80241da:	9b01      	ldr	r3, [sp, #4]
 80241dc:	7102      	strb	r2, [r0, #4]
 80241de:	6103      	str	r3, [r0, #16]
 80241e0:	4770      	bx	lr

080241e2 <__aeabi_atexit>:
 80241e2:	460b      	mov	r3, r1
 80241e4:	4601      	mov	r1, r0
 80241e6:	4618      	mov	r0, r3
 80241e8:	f000 b852 	b.w	8024290 <__cxa_atexit>

080241ec <__cxa_pure_virtual>:
 80241ec:	b508      	push	{r3, lr}
 80241ee:	f000 f81f 	bl	8024230 <_ZSt9terminatev>

080241f2 <_ZdlPvj>:
 80241f2:	f000 b80f 	b.w	8024214 <_ZdlPv>

080241f6 <__cxa_guard_acquire>:
 80241f6:	6803      	ldr	r3, [r0, #0]
 80241f8:	07db      	lsls	r3, r3, #31
 80241fa:	d406      	bmi.n	802420a <__cxa_guard_acquire+0x14>
 80241fc:	7843      	ldrb	r3, [r0, #1]
 80241fe:	b103      	cbz	r3, 8024202 <__cxa_guard_acquire+0xc>
 8024200:	deff      	udf	#255	; 0xff
 8024202:	2301      	movs	r3, #1
 8024204:	7043      	strb	r3, [r0, #1]
 8024206:	4618      	mov	r0, r3
 8024208:	4770      	bx	lr
 802420a:	2000      	movs	r0, #0
 802420c:	4770      	bx	lr

0802420e <__cxa_guard_release>:
 802420e:	2301      	movs	r3, #1
 8024210:	6003      	str	r3, [r0, #0]
 8024212:	4770      	bx	lr

08024214 <_ZdlPv>:
 8024214:	f000 b88e 	b.w	8024334 <free>

08024218 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024218:	b508      	push	{r3, lr}
 802421a:	4780      	blx	r0
 802421c:	f000 f80d 	bl	802423a <abort>

08024220 <_ZSt13get_terminatev>:
 8024220:	4b02      	ldr	r3, [pc, #8]	; (802422c <_ZSt13get_terminatev+0xc>)
 8024222:	6818      	ldr	r0, [r3, #0]
 8024224:	f3bf 8f5b 	dmb	ish
 8024228:	4770      	bx	lr
 802422a:	bf00      	nop
 802422c:	20000098 	.word	0x20000098

08024230 <_ZSt9terminatev>:
 8024230:	b508      	push	{r3, lr}
 8024232:	f7ff fff5 	bl	8024220 <_ZSt13get_terminatev>
 8024236:	f7ff ffef 	bl	8024218 <_ZN10__cxxabiv111__terminateEPFvvE>

0802423a <abort>:
 802423a:	b508      	push	{r3, lr}
 802423c:	2006      	movs	r0, #6
 802423e:	f000 fc3d 	bl	8024abc <raise>
 8024242:	2001      	movs	r0, #1
 8024244:	f7de fe60 	bl	8002f08 <_exit>

08024248 <__assert_func>:
 8024248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802424a:	461c      	mov	r4, r3
 802424c:	4b09      	ldr	r3, [pc, #36]	; (8024274 <__assert_func+0x2c>)
 802424e:	681b      	ldr	r3, [r3, #0]
 8024250:	4605      	mov	r5, r0
 8024252:	68d8      	ldr	r0, [r3, #12]
 8024254:	b152      	cbz	r2, 802426c <__assert_func+0x24>
 8024256:	4b08      	ldr	r3, [pc, #32]	; (8024278 <__assert_func+0x30>)
 8024258:	9100      	str	r1, [sp, #0]
 802425a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802425e:	4907      	ldr	r1, [pc, #28]	; (802427c <__assert_func+0x34>)
 8024260:	462b      	mov	r3, r5
 8024262:	4622      	mov	r2, r4
 8024264:	f000 f828 	bl	80242b8 <fiprintf>
 8024268:	f7ff ffe7 	bl	802423a <abort>
 802426c:	4b04      	ldr	r3, [pc, #16]	; (8024280 <__assert_func+0x38>)
 802426e:	461a      	mov	r2, r3
 8024270:	e7f2      	b.n	8024258 <__assert_func+0x10>
 8024272:	bf00      	nop
 8024274:	2000009c 	.word	0x2000009c
 8024278:	080294dc 	.word	0x080294dc
 802427c:	080294e9 	.word	0x080294e9
 8024280:	08029517 	.word	0x08029517

08024284 <atexit>:
 8024284:	2300      	movs	r3, #0
 8024286:	4601      	mov	r1, r0
 8024288:	461a      	mov	r2, r3
 802428a:	4618      	mov	r0, r3
 802428c:	f000 bcf2 	b.w	8024c74 <__register_exitproc>

08024290 <__cxa_atexit>:
 8024290:	b510      	push	{r4, lr}
 8024292:	4c05      	ldr	r4, [pc, #20]	; (80242a8 <__cxa_atexit+0x18>)
 8024294:	4613      	mov	r3, r2
 8024296:	b12c      	cbz	r4, 80242a4 <__cxa_atexit+0x14>
 8024298:	460a      	mov	r2, r1
 802429a:	4601      	mov	r1, r0
 802429c:	2002      	movs	r0, #2
 802429e:	f000 fce9 	bl	8024c74 <__register_exitproc>
 80242a2:	bd10      	pop	{r4, pc}
 80242a4:	4620      	mov	r0, r4
 80242a6:	e7fc      	b.n	80242a2 <__cxa_atexit+0x12>
 80242a8:	08024c75 	.word	0x08024c75

080242ac <__errno>:
 80242ac:	4b01      	ldr	r3, [pc, #4]	; (80242b4 <__errno+0x8>)
 80242ae:	6818      	ldr	r0, [r3, #0]
 80242b0:	4770      	bx	lr
 80242b2:	bf00      	nop
 80242b4:	2000009c 	.word	0x2000009c

080242b8 <fiprintf>:
 80242b8:	b40e      	push	{r1, r2, r3}
 80242ba:	b503      	push	{r0, r1, lr}
 80242bc:	4601      	mov	r1, r0
 80242be:	ab03      	add	r3, sp, #12
 80242c0:	4805      	ldr	r0, [pc, #20]	; (80242d8 <fiprintf+0x20>)
 80242c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80242c6:	6800      	ldr	r0, [r0, #0]
 80242c8:	9301      	str	r3, [sp, #4]
 80242ca:	f000 f921 	bl	8024510 <_vfiprintf_r>
 80242ce:	b002      	add	sp, #8
 80242d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80242d4:	b003      	add	sp, #12
 80242d6:	4770      	bx	lr
 80242d8:	2000009c 	.word	0x2000009c

080242dc <__libc_init_array>:
 80242dc:	b570      	push	{r4, r5, r6, lr}
 80242de:	4e0d      	ldr	r6, [pc, #52]	; (8024314 <__libc_init_array+0x38>)
 80242e0:	4c0d      	ldr	r4, [pc, #52]	; (8024318 <__libc_init_array+0x3c>)
 80242e2:	1ba4      	subs	r4, r4, r6
 80242e4:	10a4      	asrs	r4, r4, #2
 80242e6:	2500      	movs	r5, #0
 80242e8:	42a5      	cmp	r5, r4
 80242ea:	d109      	bne.n	8024300 <__libc_init_array+0x24>
 80242ec:	4e0b      	ldr	r6, [pc, #44]	; (802431c <__libc_init_array+0x40>)
 80242ee:	4c0c      	ldr	r4, [pc, #48]	; (8024320 <__libc_init_array+0x44>)
 80242f0:	f000 ffb0 	bl	8025254 <_init>
 80242f4:	1ba4      	subs	r4, r4, r6
 80242f6:	10a4      	asrs	r4, r4, #2
 80242f8:	2500      	movs	r5, #0
 80242fa:	42a5      	cmp	r5, r4
 80242fc:	d105      	bne.n	802430a <__libc_init_array+0x2e>
 80242fe:	bd70      	pop	{r4, r5, r6, pc}
 8024300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024304:	4798      	blx	r3
 8024306:	3501      	adds	r5, #1
 8024308:	e7ee      	b.n	80242e8 <__libc_init_array+0xc>
 802430a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802430e:	4798      	blx	r3
 8024310:	3501      	adds	r5, #1
 8024312:	e7f2      	b.n	80242fa <__libc_init_array+0x1e>
 8024314:	0807d4e0 	.word	0x0807d4e0
 8024318:	0807d4e0 	.word	0x0807d4e0
 802431c:	0807d4e0 	.word	0x0807d4e0
 8024320:	0807d4f4 	.word	0x0807d4f4

08024324 <malloc>:
 8024324:	4b02      	ldr	r3, [pc, #8]	; (8024330 <malloc+0xc>)
 8024326:	4601      	mov	r1, r0
 8024328:	6818      	ldr	r0, [r3, #0]
 802432a:	f000 b86d 	b.w	8024408 <_malloc_r>
 802432e:	bf00      	nop
 8024330:	2000009c 	.word	0x2000009c

08024334 <free>:
 8024334:	4b02      	ldr	r3, [pc, #8]	; (8024340 <free+0xc>)
 8024336:	4601      	mov	r1, r0
 8024338:	6818      	ldr	r0, [r3, #0]
 802433a:	f000 b817 	b.w	802436c <_free_r>
 802433e:	bf00      	nop
 8024340:	2000009c 	.word	0x2000009c

08024344 <memcpy>:
 8024344:	b510      	push	{r4, lr}
 8024346:	1e43      	subs	r3, r0, #1
 8024348:	440a      	add	r2, r1
 802434a:	4291      	cmp	r1, r2
 802434c:	d100      	bne.n	8024350 <memcpy+0xc>
 802434e:	bd10      	pop	{r4, pc}
 8024350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024358:	e7f7      	b.n	802434a <memcpy+0x6>

0802435a <memset>:
 802435a:	4402      	add	r2, r0
 802435c:	4603      	mov	r3, r0
 802435e:	4293      	cmp	r3, r2
 8024360:	d100      	bne.n	8024364 <memset+0xa>
 8024362:	4770      	bx	lr
 8024364:	f803 1b01 	strb.w	r1, [r3], #1
 8024368:	e7f9      	b.n	802435e <memset+0x4>
	...

0802436c <_free_r>:
 802436c:	b538      	push	{r3, r4, r5, lr}
 802436e:	4605      	mov	r5, r0
 8024370:	2900      	cmp	r1, #0
 8024372:	d045      	beq.n	8024400 <_free_r+0x94>
 8024374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024378:	1f0c      	subs	r4, r1, #4
 802437a:	2b00      	cmp	r3, #0
 802437c:	bfb8      	it	lt
 802437e:	18e4      	addlt	r4, r4, r3
 8024380:	f000 feba 	bl	80250f8 <__malloc_lock>
 8024384:	4a1f      	ldr	r2, [pc, #124]	; (8024404 <_free_r+0x98>)
 8024386:	6813      	ldr	r3, [r2, #0]
 8024388:	4610      	mov	r0, r2
 802438a:	b933      	cbnz	r3, 802439a <_free_r+0x2e>
 802438c:	6063      	str	r3, [r4, #4]
 802438e:	6014      	str	r4, [r2, #0]
 8024390:	4628      	mov	r0, r5
 8024392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024396:	f000 beb0 	b.w	80250fa <__malloc_unlock>
 802439a:	42a3      	cmp	r3, r4
 802439c:	d90c      	bls.n	80243b8 <_free_r+0x4c>
 802439e:	6821      	ldr	r1, [r4, #0]
 80243a0:	1862      	adds	r2, r4, r1
 80243a2:	4293      	cmp	r3, r2
 80243a4:	bf04      	itt	eq
 80243a6:	681a      	ldreq	r2, [r3, #0]
 80243a8:	685b      	ldreq	r3, [r3, #4]
 80243aa:	6063      	str	r3, [r4, #4]
 80243ac:	bf04      	itt	eq
 80243ae:	1852      	addeq	r2, r2, r1
 80243b0:	6022      	streq	r2, [r4, #0]
 80243b2:	6004      	str	r4, [r0, #0]
 80243b4:	e7ec      	b.n	8024390 <_free_r+0x24>
 80243b6:	4613      	mov	r3, r2
 80243b8:	685a      	ldr	r2, [r3, #4]
 80243ba:	b10a      	cbz	r2, 80243c0 <_free_r+0x54>
 80243bc:	42a2      	cmp	r2, r4
 80243be:	d9fa      	bls.n	80243b6 <_free_r+0x4a>
 80243c0:	6819      	ldr	r1, [r3, #0]
 80243c2:	1858      	adds	r0, r3, r1
 80243c4:	42a0      	cmp	r0, r4
 80243c6:	d10b      	bne.n	80243e0 <_free_r+0x74>
 80243c8:	6820      	ldr	r0, [r4, #0]
 80243ca:	4401      	add	r1, r0
 80243cc:	1858      	adds	r0, r3, r1
 80243ce:	4282      	cmp	r2, r0
 80243d0:	6019      	str	r1, [r3, #0]
 80243d2:	d1dd      	bne.n	8024390 <_free_r+0x24>
 80243d4:	6810      	ldr	r0, [r2, #0]
 80243d6:	6852      	ldr	r2, [r2, #4]
 80243d8:	605a      	str	r2, [r3, #4]
 80243da:	4401      	add	r1, r0
 80243dc:	6019      	str	r1, [r3, #0]
 80243de:	e7d7      	b.n	8024390 <_free_r+0x24>
 80243e0:	d902      	bls.n	80243e8 <_free_r+0x7c>
 80243e2:	230c      	movs	r3, #12
 80243e4:	602b      	str	r3, [r5, #0]
 80243e6:	e7d3      	b.n	8024390 <_free_r+0x24>
 80243e8:	6820      	ldr	r0, [r4, #0]
 80243ea:	1821      	adds	r1, r4, r0
 80243ec:	428a      	cmp	r2, r1
 80243ee:	bf04      	itt	eq
 80243f0:	6811      	ldreq	r1, [r2, #0]
 80243f2:	6852      	ldreq	r2, [r2, #4]
 80243f4:	6062      	str	r2, [r4, #4]
 80243f6:	bf04      	itt	eq
 80243f8:	1809      	addeq	r1, r1, r0
 80243fa:	6021      	streq	r1, [r4, #0]
 80243fc:	605c      	str	r4, [r3, #4]
 80243fe:	e7c7      	b.n	8024390 <_free_r+0x24>
 8024400:	bd38      	pop	{r3, r4, r5, pc}
 8024402:	bf00      	nop
 8024404:	2000bd94 	.word	0x2000bd94

08024408 <_malloc_r>:
 8024408:	b570      	push	{r4, r5, r6, lr}
 802440a:	1ccd      	adds	r5, r1, #3
 802440c:	f025 0503 	bic.w	r5, r5, #3
 8024410:	3508      	adds	r5, #8
 8024412:	2d0c      	cmp	r5, #12
 8024414:	bf38      	it	cc
 8024416:	250c      	movcc	r5, #12
 8024418:	2d00      	cmp	r5, #0
 802441a:	4606      	mov	r6, r0
 802441c:	db01      	blt.n	8024422 <_malloc_r+0x1a>
 802441e:	42a9      	cmp	r1, r5
 8024420:	d903      	bls.n	802442a <_malloc_r+0x22>
 8024422:	230c      	movs	r3, #12
 8024424:	6033      	str	r3, [r6, #0]
 8024426:	2000      	movs	r0, #0
 8024428:	bd70      	pop	{r4, r5, r6, pc}
 802442a:	f000 fe65 	bl	80250f8 <__malloc_lock>
 802442e:	4a21      	ldr	r2, [pc, #132]	; (80244b4 <_malloc_r+0xac>)
 8024430:	6814      	ldr	r4, [r2, #0]
 8024432:	4621      	mov	r1, r4
 8024434:	b991      	cbnz	r1, 802445c <_malloc_r+0x54>
 8024436:	4c20      	ldr	r4, [pc, #128]	; (80244b8 <_malloc_r+0xb0>)
 8024438:	6823      	ldr	r3, [r4, #0]
 802443a:	b91b      	cbnz	r3, 8024444 <_malloc_r+0x3c>
 802443c:	4630      	mov	r0, r6
 802443e:	f000 fb05 	bl	8024a4c <_sbrk_r>
 8024442:	6020      	str	r0, [r4, #0]
 8024444:	4629      	mov	r1, r5
 8024446:	4630      	mov	r0, r6
 8024448:	f000 fb00 	bl	8024a4c <_sbrk_r>
 802444c:	1c43      	adds	r3, r0, #1
 802444e:	d124      	bne.n	802449a <_malloc_r+0x92>
 8024450:	230c      	movs	r3, #12
 8024452:	6033      	str	r3, [r6, #0]
 8024454:	4630      	mov	r0, r6
 8024456:	f000 fe50 	bl	80250fa <__malloc_unlock>
 802445a:	e7e4      	b.n	8024426 <_malloc_r+0x1e>
 802445c:	680b      	ldr	r3, [r1, #0]
 802445e:	1b5b      	subs	r3, r3, r5
 8024460:	d418      	bmi.n	8024494 <_malloc_r+0x8c>
 8024462:	2b0b      	cmp	r3, #11
 8024464:	d90f      	bls.n	8024486 <_malloc_r+0x7e>
 8024466:	600b      	str	r3, [r1, #0]
 8024468:	50cd      	str	r5, [r1, r3]
 802446a:	18cc      	adds	r4, r1, r3
 802446c:	4630      	mov	r0, r6
 802446e:	f000 fe44 	bl	80250fa <__malloc_unlock>
 8024472:	f104 000b 	add.w	r0, r4, #11
 8024476:	1d23      	adds	r3, r4, #4
 8024478:	f020 0007 	bic.w	r0, r0, #7
 802447c:	1ac3      	subs	r3, r0, r3
 802447e:	d0d3      	beq.n	8024428 <_malloc_r+0x20>
 8024480:	425a      	negs	r2, r3
 8024482:	50e2      	str	r2, [r4, r3]
 8024484:	e7d0      	b.n	8024428 <_malloc_r+0x20>
 8024486:	428c      	cmp	r4, r1
 8024488:	684b      	ldr	r3, [r1, #4]
 802448a:	bf16      	itet	ne
 802448c:	6063      	strne	r3, [r4, #4]
 802448e:	6013      	streq	r3, [r2, #0]
 8024490:	460c      	movne	r4, r1
 8024492:	e7eb      	b.n	802446c <_malloc_r+0x64>
 8024494:	460c      	mov	r4, r1
 8024496:	6849      	ldr	r1, [r1, #4]
 8024498:	e7cc      	b.n	8024434 <_malloc_r+0x2c>
 802449a:	1cc4      	adds	r4, r0, #3
 802449c:	f024 0403 	bic.w	r4, r4, #3
 80244a0:	42a0      	cmp	r0, r4
 80244a2:	d005      	beq.n	80244b0 <_malloc_r+0xa8>
 80244a4:	1a21      	subs	r1, r4, r0
 80244a6:	4630      	mov	r0, r6
 80244a8:	f000 fad0 	bl	8024a4c <_sbrk_r>
 80244ac:	3001      	adds	r0, #1
 80244ae:	d0cf      	beq.n	8024450 <_malloc_r+0x48>
 80244b0:	6025      	str	r5, [r4, #0]
 80244b2:	e7db      	b.n	802446c <_malloc_r+0x64>
 80244b4:	2000bd94 	.word	0x2000bd94
 80244b8:	2000bd98 	.word	0x2000bd98

080244bc <__sfputc_r>:
 80244bc:	6893      	ldr	r3, [r2, #8]
 80244be:	3b01      	subs	r3, #1
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	b410      	push	{r4}
 80244c4:	6093      	str	r3, [r2, #8]
 80244c6:	da08      	bge.n	80244da <__sfputc_r+0x1e>
 80244c8:	6994      	ldr	r4, [r2, #24]
 80244ca:	42a3      	cmp	r3, r4
 80244cc:	db01      	blt.n	80244d2 <__sfputc_r+0x16>
 80244ce:	290a      	cmp	r1, #10
 80244d0:	d103      	bne.n	80244da <__sfputc_r+0x1e>
 80244d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80244d6:	f000 bb0d 	b.w	8024af4 <__swbuf_r>
 80244da:	6813      	ldr	r3, [r2, #0]
 80244dc:	1c58      	adds	r0, r3, #1
 80244de:	6010      	str	r0, [r2, #0]
 80244e0:	7019      	strb	r1, [r3, #0]
 80244e2:	4608      	mov	r0, r1
 80244e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80244e8:	4770      	bx	lr

080244ea <__sfputs_r>:
 80244ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244ec:	4606      	mov	r6, r0
 80244ee:	460f      	mov	r7, r1
 80244f0:	4614      	mov	r4, r2
 80244f2:	18d5      	adds	r5, r2, r3
 80244f4:	42ac      	cmp	r4, r5
 80244f6:	d101      	bne.n	80244fc <__sfputs_r+0x12>
 80244f8:	2000      	movs	r0, #0
 80244fa:	e007      	b.n	802450c <__sfputs_r+0x22>
 80244fc:	463a      	mov	r2, r7
 80244fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024502:	4630      	mov	r0, r6
 8024504:	f7ff ffda 	bl	80244bc <__sfputc_r>
 8024508:	1c43      	adds	r3, r0, #1
 802450a:	d1f3      	bne.n	80244f4 <__sfputs_r+0xa>
 802450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024510 <_vfiprintf_r>:
 8024510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024514:	460c      	mov	r4, r1
 8024516:	b09d      	sub	sp, #116	; 0x74
 8024518:	4617      	mov	r7, r2
 802451a:	461d      	mov	r5, r3
 802451c:	4606      	mov	r6, r0
 802451e:	b118      	cbz	r0, 8024528 <_vfiprintf_r+0x18>
 8024520:	6983      	ldr	r3, [r0, #24]
 8024522:	b90b      	cbnz	r3, 8024528 <_vfiprintf_r+0x18>
 8024524:	f000 fcfa 	bl	8024f1c <__sinit>
 8024528:	4b7c      	ldr	r3, [pc, #496]	; (802471c <_vfiprintf_r+0x20c>)
 802452a:	429c      	cmp	r4, r3
 802452c:	d158      	bne.n	80245e0 <_vfiprintf_r+0xd0>
 802452e:	6874      	ldr	r4, [r6, #4]
 8024530:	89a3      	ldrh	r3, [r4, #12]
 8024532:	0718      	lsls	r0, r3, #28
 8024534:	d55e      	bpl.n	80245f4 <_vfiprintf_r+0xe4>
 8024536:	6923      	ldr	r3, [r4, #16]
 8024538:	2b00      	cmp	r3, #0
 802453a:	d05b      	beq.n	80245f4 <_vfiprintf_r+0xe4>
 802453c:	2300      	movs	r3, #0
 802453e:	9309      	str	r3, [sp, #36]	; 0x24
 8024540:	2320      	movs	r3, #32
 8024542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024546:	2330      	movs	r3, #48	; 0x30
 8024548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802454c:	9503      	str	r5, [sp, #12]
 802454e:	f04f 0b01 	mov.w	fp, #1
 8024552:	46b8      	mov	r8, r7
 8024554:	4645      	mov	r5, r8
 8024556:	f815 3b01 	ldrb.w	r3, [r5], #1
 802455a:	b10b      	cbz	r3, 8024560 <_vfiprintf_r+0x50>
 802455c:	2b25      	cmp	r3, #37	; 0x25
 802455e:	d154      	bne.n	802460a <_vfiprintf_r+0xfa>
 8024560:	ebb8 0a07 	subs.w	sl, r8, r7
 8024564:	d00b      	beq.n	802457e <_vfiprintf_r+0x6e>
 8024566:	4653      	mov	r3, sl
 8024568:	463a      	mov	r2, r7
 802456a:	4621      	mov	r1, r4
 802456c:	4630      	mov	r0, r6
 802456e:	f7ff ffbc 	bl	80244ea <__sfputs_r>
 8024572:	3001      	adds	r0, #1
 8024574:	f000 80c2 	beq.w	80246fc <_vfiprintf_r+0x1ec>
 8024578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802457a:	4453      	add	r3, sl
 802457c:	9309      	str	r3, [sp, #36]	; 0x24
 802457e:	f898 3000 	ldrb.w	r3, [r8]
 8024582:	2b00      	cmp	r3, #0
 8024584:	f000 80ba 	beq.w	80246fc <_vfiprintf_r+0x1ec>
 8024588:	2300      	movs	r3, #0
 802458a:	f04f 32ff 	mov.w	r2, #4294967295
 802458e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024592:	9304      	str	r3, [sp, #16]
 8024594:	9307      	str	r3, [sp, #28]
 8024596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802459a:	931a      	str	r3, [sp, #104]	; 0x68
 802459c:	46a8      	mov	r8, r5
 802459e:	2205      	movs	r2, #5
 80245a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80245a4:	485e      	ldr	r0, [pc, #376]	; (8024720 <_vfiprintf_r+0x210>)
 80245a6:	f7db fe33 	bl	8000210 <memchr>
 80245aa:	9b04      	ldr	r3, [sp, #16]
 80245ac:	bb78      	cbnz	r0, 802460e <_vfiprintf_r+0xfe>
 80245ae:	06d9      	lsls	r1, r3, #27
 80245b0:	bf44      	itt	mi
 80245b2:	2220      	movmi	r2, #32
 80245b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80245b8:	071a      	lsls	r2, r3, #28
 80245ba:	bf44      	itt	mi
 80245bc:	222b      	movmi	r2, #43	; 0x2b
 80245be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80245c2:	782a      	ldrb	r2, [r5, #0]
 80245c4:	2a2a      	cmp	r2, #42	; 0x2a
 80245c6:	d02a      	beq.n	802461e <_vfiprintf_r+0x10e>
 80245c8:	9a07      	ldr	r2, [sp, #28]
 80245ca:	46a8      	mov	r8, r5
 80245cc:	2000      	movs	r0, #0
 80245ce:	250a      	movs	r5, #10
 80245d0:	4641      	mov	r1, r8
 80245d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80245d6:	3b30      	subs	r3, #48	; 0x30
 80245d8:	2b09      	cmp	r3, #9
 80245da:	d969      	bls.n	80246b0 <_vfiprintf_r+0x1a0>
 80245dc:	b360      	cbz	r0, 8024638 <_vfiprintf_r+0x128>
 80245de:	e024      	b.n	802462a <_vfiprintf_r+0x11a>
 80245e0:	4b50      	ldr	r3, [pc, #320]	; (8024724 <_vfiprintf_r+0x214>)
 80245e2:	429c      	cmp	r4, r3
 80245e4:	d101      	bne.n	80245ea <_vfiprintf_r+0xda>
 80245e6:	68b4      	ldr	r4, [r6, #8]
 80245e8:	e7a2      	b.n	8024530 <_vfiprintf_r+0x20>
 80245ea:	4b4f      	ldr	r3, [pc, #316]	; (8024728 <_vfiprintf_r+0x218>)
 80245ec:	429c      	cmp	r4, r3
 80245ee:	bf08      	it	eq
 80245f0:	68f4      	ldreq	r4, [r6, #12]
 80245f2:	e79d      	b.n	8024530 <_vfiprintf_r+0x20>
 80245f4:	4621      	mov	r1, r4
 80245f6:	4630      	mov	r0, r6
 80245f8:	f000 face 	bl	8024b98 <__swsetup_r>
 80245fc:	2800      	cmp	r0, #0
 80245fe:	d09d      	beq.n	802453c <_vfiprintf_r+0x2c>
 8024600:	f04f 30ff 	mov.w	r0, #4294967295
 8024604:	b01d      	add	sp, #116	; 0x74
 8024606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802460a:	46a8      	mov	r8, r5
 802460c:	e7a2      	b.n	8024554 <_vfiprintf_r+0x44>
 802460e:	4a44      	ldr	r2, [pc, #272]	; (8024720 <_vfiprintf_r+0x210>)
 8024610:	1a80      	subs	r0, r0, r2
 8024612:	fa0b f000 	lsl.w	r0, fp, r0
 8024616:	4318      	orrs	r0, r3
 8024618:	9004      	str	r0, [sp, #16]
 802461a:	4645      	mov	r5, r8
 802461c:	e7be      	b.n	802459c <_vfiprintf_r+0x8c>
 802461e:	9a03      	ldr	r2, [sp, #12]
 8024620:	1d11      	adds	r1, r2, #4
 8024622:	6812      	ldr	r2, [r2, #0]
 8024624:	9103      	str	r1, [sp, #12]
 8024626:	2a00      	cmp	r2, #0
 8024628:	db01      	blt.n	802462e <_vfiprintf_r+0x11e>
 802462a:	9207      	str	r2, [sp, #28]
 802462c:	e004      	b.n	8024638 <_vfiprintf_r+0x128>
 802462e:	4252      	negs	r2, r2
 8024630:	f043 0302 	orr.w	r3, r3, #2
 8024634:	9207      	str	r2, [sp, #28]
 8024636:	9304      	str	r3, [sp, #16]
 8024638:	f898 3000 	ldrb.w	r3, [r8]
 802463c:	2b2e      	cmp	r3, #46	; 0x2e
 802463e:	d10e      	bne.n	802465e <_vfiprintf_r+0x14e>
 8024640:	f898 3001 	ldrb.w	r3, [r8, #1]
 8024644:	2b2a      	cmp	r3, #42	; 0x2a
 8024646:	d138      	bne.n	80246ba <_vfiprintf_r+0x1aa>
 8024648:	9b03      	ldr	r3, [sp, #12]
 802464a:	1d1a      	adds	r2, r3, #4
 802464c:	681b      	ldr	r3, [r3, #0]
 802464e:	9203      	str	r2, [sp, #12]
 8024650:	2b00      	cmp	r3, #0
 8024652:	bfb8      	it	lt
 8024654:	f04f 33ff 	movlt.w	r3, #4294967295
 8024658:	f108 0802 	add.w	r8, r8, #2
 802465c:	9305      	str	r3, [sp, #20]
 802465e:	4d33      	ldr	r5, [pc, #204]	; (802472c <_vfiprintf_r+0x21c>)
 8024660:	f898 1000 	ldrb.w	r1, [r8]
 8024664:	2203      	movs	r2, #3
 8024666:	4628      	mov	r0, r5
 8024668:	f7db fdd2 	bl	8000210 <memchr>
 802466c:	b140      	cbz	r0, 8024680 <_vfiprintf_r+0x170>
 802466e:	2340      	movs	r3, #64	; 0x40
 8024670:	1b40      	subs	r0, r0, r5
 8024672:	fa03 f000 	lsl.w	r0, r3, r0
 8024676:	9b04      	ldr	r3, [sp, #16]
 8024678:	4303      	orrs	r3, r0
 802467a:	f108 0801 	add.w	r8, r8, #1
 802467e:	9304      	str	r3, [sp, #16]
 8024680:	f898 1000 	ldrb.w	r1, [r8]
 8024684:	482a      	ldr	r0, [pc, #168]	; (8024730 <_vfiprintf_r+0x220>)
 8024686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802468a:	2206      	movs	r2, #6
 802468c:	f108 0701 	add.w	r7, r8, #1
 8024690:	f7db fdbe 	bl	8000210 <memchr>
 8024694:	2800      	cmp	r0, #0
 8024696:	d037      	beq.n	8024708 <_vfiprintf_r+0x1f8>
 8024698:	4b26      	ldr	r3, [pc, #152]	; (8024734 <_vfiprintf_r+0x224>)
 802469a:	bb1b      	cbnz	r3, 80246e4 <_vfiprintf_r+0x1d4>
 802469c:	9b03      	ldr	r3, [sp, #12]
 802469e:	3307      	adds	r3, #7
 80246a0:	f023 0307 	bic.w	r3, r3, #7
 80246a4:	3308      	adds	r3, #8
 80246a6:	9303      	str	r3, [sp, #12]
 80246a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246aa:	444b      	add	r3, r9
 80246ac:	9309      	str	r3, [sp, #36]	; 0x24
 80246ae:	e750      	b.n	8024552 <_vfiprintf_r+0x42>
 80246b0:	fb05 3202 	mla	r2, r5, r2, r3
 80246b4:	2001      	movs	r0, #1
 80246b6:	4688      	mov	r8, r1
 80246b8:	e78a      	b.n	80245d0 <_vfiprintf_r+0xc0>
 80246ba:	2300      	movs	r3, #0
 80246bc:	f108 0801 	add.w	r8, r8, #1
 80246c0:	9305      	str	r3, [sp, #20]
 80246c2:	4619      	mov	r1, r3
 80246c4:	250a      	movs	r5, #10
 80246c6:	4640      	mov	r0, r8
 80246c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80246cc:	3a30      	subs	r2, #48	; 0x30
 80246ce:	2a09      	cmp	r2, #9
 80246d0:	d903      	bls.n	80246da <_vfiprintf_r+0x1ca>
 80246d2:	2b00      	cmp	r3, #0
 80246d4:	d0c3      	beq.n	802465e <_vfiprintf_r+0x14e>
 80246d6:	9105      	str	r1, [sp, #20]
 80246d8:	e7c1      	b.n	802465e <_vfiprintf_r+0x14e>
 80246da:	fb05 2101 	mla	r1, r5, r1, r2
 80246de:	2301      	movs	r3, #1
 80246e0:	4680      	mov	r8, r0
 80246e2:	e7f0      	b.n	80246c6 <_vfiprintf_r+0x1b6>
 80246e4:	ab03      	add	r3, sp, #12
 80246e6:	9300      	str	r3, [sp, #0]
 80246e8:	4622      	mov	r2, r4
 80246ea:	4b13      	ldr	r3, [pc, #76]	; (8024738 <_vfiprintf_r+0x228>)
 80246ec:	a904      	add	r1, sp, #16
 80246ee:	4630      	mov	r0, r6
 80246f0:	f3af 8000 	nop.w
 80246f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80246f8:	4681      	mov	r9, r0
 80246fa:	d1d5      	bne.n	80246a8 <_vfiprintf_r+0x198>
 80246fc:	89a3      	ldrh	r3, [r4, #12]
 80246fe:	065b      	lsls	r3, r3, #25
 8024700:	f53f af7e 	bmi.w	8024600 <_vfiprintf_r+0xf0>
 8024704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024706:	e77d      	b.n	8024604 <_vfiprintf_r+0xf4>
 8024708:	ab03      	add	r3, sp, #12
 802470a:	9300      	str	r3, [sp, #0]
 802470c:	4622      	mov	r2, r4
 802470e:	4b0a      	ldr	r3, [pc, #40]	; (8024738 <_vfiprintf_r+0x228>)
 8024710:	a904      	add	r1, sp, #16
 8024712:	4630      	mov	r0, r6
 8024714:	f000 f888 	bl	8024828 <_printf_i>
 8024718:	e7ec      	b.n	80246f4 <_vfiprintf_r+0x1e4>
 802471a:	bf00      	nop
 802471c:	08029574 	.word	0x08029574
 8024720:	0802951c 	.word	0x0802951c
 8024724:	08029594 	.word	0x08029594
 8024728:	08029554 	.word	0x08029554
 802472c:	08029522 	.word	0x08029522
 8024730:	08029526 	.word	0x08029526
 8024734:	00000000 	.word	0x00000000
 8024738:	080244eb 	.word	0x080244eb

0802473c <_printf_common>:
 802473c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024740:	4691      	mov	r9, r2
 8024742:	461f      	mov	r7, r3
 8024744:	688a      	ldr	r2, [r1, #8]
 8024746:	690b      	ldr	r3, [r1, #16]
 8024748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802474c:	4293      	cmp	r3, r2
 802474e:	bfb8      	it	lt
 8024750:	4613      	movlt	r3, r2
 8024752:	f8c9 3000 	str.w	r3, [r9]
 8024756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802475a:	4606      	mov	r6, r0
 802475c:	460c      	mov	r4, r1
 802475e:	b112      	cbz	r2, 8024766 <_printf_common+0x2a>
 8024760:	3301      	adds	r3, #1
 8024762:	f8c9 3000 	str.w	r3, [r9]
 8024766:	6823      	ldr	r3, [r4, #0]
 8024768:	0699      	lsls	r1, r3, #26
 802476a:	bf42      	ittt	mi
 802476c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8024770:	3302      	addmi	r3, #2
 8024772:	f8c9 3000 	strmi.w	r3, [r9]
 8024776:	6825      	ldr	r5, [r4, #0]
 8024778:	f015 0506 	ands.w	r5, r5, #6
 802477c:	d107      	bne.n	802478e <_printf_common+0x52>
 802477e:	f104 0a19 	add.w	sl, r4, #25
 8024782:	68e3      	ldr	r3, [r4, #12]
 8024784:	f8d9 2000 	ldr.w	r2, [r9]
 8024788:	1a9b      	subs	r3, r3, r2
 802478a:	42ab      	cmp	r3, r5
 802478c:	dc28      	bgt.n	80247e0 <_printf_common+0xa4>
 802478e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8024792:	6822      	ldr	r2, [r4, #0]
 8024794:	3300      	adds	r3, #0
 8024796:	bf18      	it	ne
 8024798:	2301      	movne	r3, #1
 802479a:	0692      	lsls	r2, r2, #26
 802479c:	d42d      	bmi.n	80247fa <_printf_common+0xbe>
 802479e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80247a2:	4639      	mov	r1, r7
 80247a4:	4630      	mov	r0, r6
 80247a6:	47c0      	blx	r8
 80247a8:	3001      	adds	r0, #1
 80247aa:	d020      	beq.n	80247ee <_printf_common+0xb2>
 80247ac:	6823      	ldr	r3, [r4, #0]
 80247ae:	68e5      	ldr	r5, [r4, #12]
 80247b0:	f8d9 2000 	ldr.w	r2, [r9]
 80247b4:	f003 0306 	and.w	r3, r3, #6
 80247b8:	2b04      	cmp	r3, #4
 80247ba:	bf08      	it	eq
 80247bc:	1aad      	subeq	r5, r5, r2
 80247be:	68a3      	ldr	r3, [r4, #8]
 80247c0:	6922      	ldr	r2, [r4, #16]
 80247c2:	bf0c      	ite	eq
 80247c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80247c8:	2500      	movne	r5, #0
 80247ca:	4293      	cmp	r3, r2
 80247cc:	bfc4      	itt	gt
 80247ce:	1a9b      	subgt	r3, r3, r2
 80247d0:	18ed      	addgt	r5, r5, r3
 80247d2:	f04f 0900 	mov.w	r9, #0
 80247d6:	341a      	adds	r4, #26
 80247d8:	454d      	cmp	r5, r9
 80247da:	d11a      	bne.n	8024812 <_printf_common+0xd6>
 80247dc:	2000      	movs	r0, #0
 80247de:	e008      	b.n	80247f2 <_printf_common+0xb6>
 80247e0:	2301      	movs	r3, #1
 80247e2:	4652      	mov	r2, sl
 80247e4:	4639      	mov	r1, r7
 80247e6:	4630      	mov	r0, r6
 80247e8:	47c0      	blx	r8
 80247ea:	3001      	adds	r0, #1
 80247ec:	d103      	bne.n	80247f6 <_printf_common+0xba>
 80247ee:	f04f 30ff 	mov.w	r0, #4294967295
 80247f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80247f6:	3501      	adds	r5, #1
 80247f8:	e7c3      	b.n	8024782 <_printf_common+0x46>
 80247fa:	18e1      	adds	r1, r4, r3
 80247fc:	1c5a      	adds	r2, r3, #1
 80247fe:	2030      	movs	r0, #48	; 0x30
 8024800:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024804:	4422      	add	r2, r4
 8024806:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802480a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802480e:	3302      	adds	r3, #2
 8024810:	e7c5      	b.n	802479e <_printf_common+0x62>
 8024812:	2301      	movs	r3, #1
 8024814:	4622      	mov	r2, r4
 8024816:	4639      	mov	r1, r7
 8024818:	4630      	mov	r0, r6
 802481a:	47c0      	blx	r8
 802481c:	3001      	adds	r0, #1
 802481e:	d0e6      	beq.n	80247ee <_printf_common+0xb2>
 8024820:	f109 0901 	add.w	r9, r9, #1
 8024824:	e7d8      	b.n	80247d8 <_printf_common+0x9c>
	...

08024828 <_printf_i>:
 8024828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802482c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8024830:	460c      	mov	r4, r1
 8024832:	7e09      	ldrb	r1, [r1, #24]
 8024834:	b085      	sub	sp, #20
 8024836:	296e      	cmp	r1, #110	; 0x6e
 8024838:	4617      	mov	r7, r2
 802483a:	4606      	mov	r6, r0
 802483c:	4698      	mov	r8, r3
 802483e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024840:	f000 80b3 	beq.w	80249aa <_printf_i+0x182>
 8024844:	d822      	bhi.n	802488c <_printf_i+0x64>
 8024846:	2963      	cmp	r1, #99	; 0x63
 8024848:	d036      	beq.n	80248b8 <_printf_i+0x90>
 802484a:	d80a      	bhi.n	8024862 <_printf_i+0x3a>
 802484c:	2900      	cmp	r1, #0
 802484e:	f000 80b9 	beq.w	80249c4 <_printf_i+0x19c>
 8024852:	2958      	cmp	r1, #88	; 0x58
 8024854:	f000 8083 	beq.w	802495e <_printf_i+0x136>
 8024858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802485c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8024860:	e032      	b.n	80248c8 <_printf_i+0xa0>
 8024862:	2964      	cmp	r1, #100	; 0x64
 8024864:	d001      	beq.n	802486a <_printf_i+0x42>
 8024866:	2969      	cmp	r1, #105	; 0x69
 8024868:	d1f6      	bne.n	8024858 <_printf_i+0x30>
 802486a:	6820      	ldr	r0, [r4, #0]
 802486c:	6813      	ldr	r3, [r2, #0]
 802486e:	0605      	lsls	r5, r0, #24
 8024870:	f103 0104 	add.w	r1, r3, #4
 8024874:	d52a      	bpl.n	80248cc <_printf_i+0xa4>
 8024876:	681b      	ldr	r3, [r3, #0]
 8024878:	6011      	str	r1, [r2, #0]
 802487a:	2b00      	cmp	r3, #0
 802487c:	da03      	bge.n	8024886 <_printf_i+0x5e>
 802487e:	222d      	movs	r2, #45	; 0x2d
 8024880:	425b      	negs	r3, r3
 8024882:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8024886:	486f      	ldr	r0, [pc, #444]	; (8024a44 <_printf_i+0x21c>)
 8024888:	220a      	movs	r2, #10
 802488a:	e039      	b.n	8024900 <_printf_i+0xd8>
 802488c:	2973      	cmp	r1, #115	; 0x73
 802488e:	f000 809d 	beq.w	80249cc <_printf_i+0x1a4>
 8024892:	d808      	bhi.n	80248a6 <_printf_i+0x7e>
 8024894:	296f      	cmp	r1, #111	; 0x6f
 8024896:	d020      	beq.n	80248da <_printf_i+0xb2>
 8024898:	2970      	cmp	r1, #112	; 0x70
 802489a:	d1dd      	bne.n	8024858 <_printf_i+0x30>
 802489c:	6823      	ldr	r3, [r4, #0]
 802489e:	f043 0320 	orr.w	r3, r3, #32
 80248a2:	6023      	str	r3, [r4, #0]
 80248a4:	e003      	b.n	80248ae <_printf_i+0x86>
 80248a6:	2975      	cmp	r1, #117	; 0x75
 80248a8:	d017      	beq.n	80248da <_printf_i+0xb2>
 80248aa:	2978      	cmp	r1, #120	; 0x78
 80248ac:	d1d4      	bne.n	8024858 <_printf_i+0x30>
 80248ae:	2378      	movs	r3, #120	; 0x78
 80248b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80248b4:	4864      	ldr	r0, [pc, #400]	; (8024a48 <_printf_i+0x220>)
 80248b6:	e055      	b.n	8024964 <_printf_i+0x13c>
 80248b8:	6813      	ldr	r3, [r2, #0]
 80248ba:	1d19      	adds	r1, r3, #4
 80248bc:	681b      	ldr	r3, [r3, #0]
 80248be:	6011      	str	r1, [r2, #0]
 80248c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80248c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80248c8:	2301      	movs	r3, #1
 80248ca:	e08c      	b.n	80249e6 <_printf_i+0x1be>
 80248cc:	681b      	ldr	r3, [r3, #0]
 80248ce:	6011      	str	r1, [r2, #0]
 80248d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80248d4:	bf18      	it	ne
 80248d6:	b21b      	sxthne	r3, r3
 80248d8:	e7cf      	b.n	802487a <_printf_i+0x52>
 80248da:	6813      	ldr	r3, [r2, #0]
 80248dc:	6825      	ldr	r5, [r4, #0]
 80248de:	1d18      	adds	r0, r3, #4
 80248e0:	6010      	str	r0, [r2, #0]
 80248e2:	0628      	lsls	r0, r5, #24
 80248e4:	d501      	bpl.n	80248ea <_printf_i+0xc2>
 80248e6:	681b      	ldr	r3, [r3, #0]
 80248e8:	e002      	b.n	80248f0 <_printf_i+0xc8>
 80248ea:	0668      	lsls	r0, r5, #25
 80248ec:	d5fb      	bpl.n	80248e6 <_printf_i+0xbe>
 80248ee:	881b      	ldrh	r3, [r3, #0]
 80248f0:	4854      	ldr	r0, [pc, #336]	; (8024a44 <_printf_i+0x21c>)
 80248f2:	296f      	cmp	r1, #111	; 0x6f
 80248f4:	bf14      	ite	ne
 80248f6:	220a      	movne	r2, #10
 80248f8:	2208      	moveq	r2, #8
 80248fa:	2100      	movs	r1, #0
 80248fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024900:	6865      	ldr	r5, [r4, #4]
 8024902:	60a5      	str	r5, [r4, #8]
 8024904:	2d00      	cmp	r5, #0
 8024906:	f2c0 8095 	blt.w	8024a34 <_printf_i+0x20c>
 802490a:	6821      	ldr	r1, [r4, #0]
 802490c:	f021 0104 	bic.w	r1, r1, #4
 8024910:	6021      	str	r1, [r4, #0]
 8024912:	2b00      	cmp	r3, #0
 8024914:	d13d      	bne.n	8024992 <_printf_i+0x16a>
 8024916:	2d00      	cmp	r5, #0
 8024918:	f040 808e 	bne.w	8024a38 <_printf_i+0x210>
 802491c:	4665      	mov	r5, ip
 802491e:	2a08      	cmp	r2, #8
 8024920:	d10b      	bne.n	802493a <_printf_i+0x112>
 8024922:	6823      	ldr	r3, [r4, #0]
 8024924:	07db      	lsls	r3, r3, #31
 8024926:	d508      	bpl.n	802493a <_printf_i+0x112>
 8024928:	6923      	ldr	r3, [r4, #16]
 802492a:	6862      	ldr	r2, [r4, #4]
 802492c:	429a      	cmp	r2, r3
 802492e:	bfde      	ittt	le
 8024930:	2330      	movle	r3, #48	; 0x30
 8024932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024936:	f105 35ff 	addle.w	r5, r5, #4294967295
 802493a:	ebac 0305 	sub.w	r3, ip, r5
 802493e:	6123      	str	r3, [r4, #16]
 8024940:	f8cd 8000 	str.w	r8, [sp]
 8024944:	463b      	mov	r3, r7
 8024946:	aa03      	add	r2, sp, #12
 8024948:	4621      	mov	r1, r4
 802494a:	4630      	mov	r0, r6
 802494c:	f7ff fef6 	bl	802473c <_printf_common>
 8024950:	3001      	adds	r0, #1
 8024952:	d14d      	bne.n	80249f0 <_printf_i+0x1c8>
 8024954:	f04f 30ff 	mov.w	r0, #4294967295
 8024958:	b005      	add	sp, #20
 802495a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802495e:	4839      	ldr	r0, [pc, #228]	; (8024a44 <_printf_i+0x21c>)
 8024960:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8024964:	6813      	ldr	r3, [r2, #0]
 8024966:	6821      	ldr	r1, [r4, #0]
 8024968:	1d1d      	adds	r5, r3, #4
 802496a:	681b      	ldr	r3, [r3, #0]
 802496c:	6015      	str	r5, [r2, #0]
 802496e:	060a      	lsls	r2, r1, #24
 8024970:	d50b      	bpl.n	802498a <_printf_i+0x162>
 8024972:	07ca      	lsls	r2, r1, #31
 8024974:	bf44      	itt	mi
 8024976:	f041 0120 	orrmi.w	r1, r1, #32
 802497a:	6021      	strmi	r1, [r4, #0]
 802497c:	b91b      	cbnz	r3, 8024986 <_printf_i+0x15e>
 802497e:	6822      	ldr	r2, [r4, #0]
 8024980:	f022 0220 	bic.w	r2, r2, #32
 8024984:	6022      	str	r2, [r4, #0]
 8024986:	2210      	movs	r2, #16
 8024988:	e7b7      	b.n	80248fa <_printf_i+0xd2>
 802498a:	064d      	lsls	r5, r1, #25
 802498c:	bf48      	it	mi
 802498e:	b29b      	uxthmi	r3, r3
 8024990:	e7ef      	b.n	8024972 <_printf_i+0x14a>
 8024992:	4665      	mov	r5, ip
 8024994:	fbb3 f1f2 	udiv	r1, r3, r2
 8024998:	fb02 3311 	mls	r3, r2, r1, r3
 802499c:	5cc3      	ldrb	r3, [r0, r3]
 802499e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80249a2:	460b      	mov	r3, r1
 80249a4:	2900      	cmp	r1, #0
 80249a6:	d1f5      	bne.n	8024994 <_printf_i+0x16c>
 80249a8:	e7b9      	b.n	802491e <_printf_i+0xf6>
 80249aa:	6813      	ldr	r3, [r2, #0]
 80249ac:	6825      	ldr	r5, [r4, #0]
 80249ae:	6961      	ldr	r1, [r4, #20]
 80249b0:	1d18      	adds	r0, r3, #4
 80249b2:	6010      	str	r0, [r2, #0]
 80249b4:	0628      	lsls	r0, r5, #24
 80249b6:	681b      	ldr	r3, [r3, #0]
 80249b8:	d501      	bpl.n	80249be <_printf_i+0x196>
 80249ba:	6019      	str	r1, [r3, #0]
 80249bc:	e002      	b.n	80249c4 <_printf_i+0x19c>
 80249be:	066a      	lsls	r2, r5, #25
 80249c0:	d5fb      	bpl.n	80249ba <_printf_i+0x192>
 80249c2:	8019      	strh	r1, [r3, #0]
 80249c4:	2300      	movs	r3, #0
 80249c6:	6123      	str	r3, [r4, #16]
 80249c8:	4665      	mov	r5, ip
 80249ca:	e7b9      	b.n	8024940 <_printf_i+0x118>
 80249cc:	6813      	ldr	r3, [r2, #0]
 80249ce:	1d19      	adds	r1, r3, #4
 80249d0:	6011      	str	r1, [r2, #0]
 80249d2:	681d      	ldr	r5, [r3, #0]
 80249d4:	6862      	ldr	r2, [r4, #4]
 80249d6:	2100      	movs	r1, #0
 80249d8:	4628      	mov	r0, r5
 80249da:	f7db fc19 	bl	8000210 <memchr>
 80249de:	b108      	cbz	r0, 80249e4 <_printf_i+0x1bc>
 80249e0:	1b40      	subs	r0, r0, r5
 80249e2:	6060      	str	r0, [r4, #4]
 80249e4:	6863      	ldr	r3, [r4, #4]
 80249e6:	6123      	str	r3, [r4, #16]
 80249e8:	2300      	movs	r3, #0
 80249ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80249ee:	e7a7      	b.n	8024940 <_printf_i+0x118>
 80249f0:	6923      	ldr	r3, [r4, #16]
 80249f2:	462a      	mov	r2, r5
 80249f4:	4639      	mov	r1, r7
 80249f6:	4630      	mov	r0, r6
 80249f8:	47c0      	blx	r8
 80249fa:	3001      	adds	r0, #1
 80249fc:	d0aa      	beq.n	8024954 <_printf_i+0x12c>
 80249fe:	6823      	ldr	r3, [r4, #0]
 8024a00:	079b      	lsls	r3, r3, #30
 8024a02:	d413      	bmi.n	8024a2c <_printf_i+0x204>
 8024a04:	68e0      	ldr	r0, [r4, #12]
 8024a06:	9b03      	ldr	r3, [sp, #12]
 8024a08:	4298      	cmp	r0, r3
 8024a0a:	bfb8      	it	lt
 8024a0c:	4618      	movlt	r0, r3
 8024a0e:	e7a3      	b.n	8024958 <_printf_i+0x130>
 8024a10:	2301      	movs	r3, #1
 8024a12:	464a      	mov	r2, r9
 8024a14:	4639      	mov	r1, r7
 8024a16:	4630      	mov	r0, r6
 8024a18:	47c0      	blx	r8
 8024a1a:	3001      	adds	r0, #1
 8024a1c:	d09a      	beq.n	8024954 <_printf_i+0x12c>
 8024a1e:	3501      	adds	r5, #1
 8024a20:	68e3      	ldr	r3, [r4, #12]
 8024a22:	9a03      	ldr	r2, [sp, #12]
 8024a24:	1a9b      	subs	r3, r3, r2
 8024a26:	42ab      	cmp	r3, r5
 8024a28:	dcf2      	bgt.n	8024a10 <_printf_i+0x1e8>
 8024a2a:	e7eb      	b.n	8024a04 <_printf_i+0x1dc>
 8024a2c:	2500      	movs	r5, #0
 8024a2e:	f104 0919 	add.w	r9, r4, #25
 8024a32:	e7f5      	b.n	8024a20 <_printf_i+0x1f8>
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	d1ac      	bne.n	8024992 <_printf_i+0x16a>
 8024a38:	7803      	ldrb	r3, [r0, #0]
 8024a3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024a3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024a42:	e76c      	b.n	802491e <_printf_i+0xf6>
 8024a44:	0802952d 	.word	0x0802952d
 8024a48:	0802953e 	.word	0x0802953e

08024a4c <_sbrk_r>:
 8024a4c:	b538      	push	{r3, r4, r5, lr}
 8024a4e:	4c06      	ldr	r4, [pc, #24]	; (8024a68 <_sbrk_r+0x1c>)
 8024a50:	2300      	movs	r3, #0
 8024a52:	4605      	mov	r5, r0
 8024a54:	4608      	mov	r0, r1
 8024a56:	6023      	str	r3, [r4, #0]
 8024a58:	f7de face 	bl	8002ff8 <_sbrk>
 8024a5c:	1c43      	adds	r3, r0, #1
 8024a5e:	d102      	bne.n	8024a66 <_sbrk_r+0x1a>
 8024a60:	6823      	ldr	r3, [r4, #0]
 8024a62:	b103      	cbz	r3, 8024a66 <_sbrk_r+0x1a>
 8024a64:	602b      	str	r3, [r5, #0]
 8024a66:	bd38      	pop	{r3, r4, r5, pc}
 8024a68:	2000cb38 	.word	0x2000cb38

08024a6c <_raise_r>:
 8024a6c:	291f      	cmp	r1, #31
 8024a6e:	b538      	push	{r3, r4, r5, lr}
 8024a70:	4604      	mov	r4, r0
 8024a72:	460d      	mov	r5, r1
 8024a74:	d904      	bls.n	8024a80 <_raise_r+0x14>
 8024a76:	2316      	movs	r3, #22
 8024a78:	6003      	str	r3, [r0, #0]
 8024a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8024a7e:	bd38      	pop	{r3, r4, r5, pc}
 8024a80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024a82:	b112      	cbz	r2, 8024a8a <_raise_r+0x1e>
 8024a84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024a88:	b94b      	cbnz	r3, 8024a9e <_raise_r+0x32>
 8024a8a:	4620      	mov	r0, r4
 8024a8c:	f000 f830 	bl	8024af0 <_getpid_r>
 8024a90:	462a      	mov	r2, r5
 8024a92:	4601      	mov	r1, r0
 8024a94:	4620      	mov	r0, r4
 8024a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024a9a:	f000 b817 	b.w	8024acc <_kill_r>
 8024a9e:	2b01      	cmp	r3, #1
 8024aa0:	d00a      	beq.n	8024ab8 <_raise_r+0x4c>
 8024aa2:	1c59      	adds	r1, r3, #1
 8024aa4:	d103      	bne.n	8024aae <_raise_r+0x42>
 8024aa6:	2316      	movs	r3, #22
 8024aa8:	6003      	str	r3, [r0, #0]
 8024aaa:	2001      	movs	r0, #1
 8024aac:	e7e7      	b.n	8024a7e <_raise_r+0x12>
 8024aae:	2400      	movs	r4, #0
 8024ab0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024ab4:	4628      	mov	r0, r5
 8024ab6:	4798      	blx	r3
 8024ab8:	2000      	movs	r0, #0
 8024aba:	e7e0      	b.n	8024a7e <_raise_r+0x12>

08024abc <raise>:
 8024abc:	4b02      	ldr	r3, [pc, #8]	; (8024ac8 <raise+0xc>)
 8024abe:	4601      	mov	r1, r0
 8024ac0:	6818      	ldr	r0, [r3, #0]
 8024ac2:	f7ff bfd3 	b.w	8024a6c <_raise_r>
 8024ac6:	bf00      	nop
 8024ac8:	2000009c 	.word	0x2000009c

08024acc <_kill_r>:
 8024acc:	b538      	push	{r3, r4, r5, lr}
 8024ace:	4c07      	ldr	r4, [pc, #28]	; (8024aec <_kill_r+0x20>)
 8024ad0:	2300      	movs	r3, #0
 8024ad2:	4605      	mov	r5, r0
 8024ad4:	4608      	mov	r0, r1
 8024ad6:	4611      	mov	r1, r2
 8024ad8:	6023      	str	r3, [r4, #0]
 8024ada:	f7de fa05 	bl	8002ee8 <_kill>
 8024ade:	1c43      	adds	r3, r0, #1
 8024ae0:	d102      	bne.n	8024ae8 <_kill_r+0x1c>
 8024ae2:	6823      	ldr	r3, [r4, #0]
 8024ae4:	b103      	cbz	r3, 8024ae8 <_kill_r+0x1c>
 8024ae6:	602b      	str	r3, [r5, #0]
 8024ae8:	bd38      	pop	{r3, r4, r5, pc}
 8024aea:	bf00      	nop
 8024aec:	2000cb38 	.word	0x2000cb38

08024af0 <_getpid_r>:
 8024af0:	f7de b9f2 	b.w	8002ed8 <_getpid>

08024af4 <__swbuf_r>:
 8024af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024af6:	460e      	mov	r6, r1
 8024af8:	4614      	mov	r4, r2
 8024afa:	4605      	mov	r5, r0
 8024afc:	b118      	cbz	r0, 8024b06 <__swbuf_r+0x12>
 8024afe:	6983      	ldr	r3, [r0, #24]
 8024b00:	b90b      	cbnz	r3, 8024b06 <__swbuf_r+0x12>
 8024b02:	f000 fa0b 	bl	8024f1c <__sinit>
 8024b06:	4b21      	ldr	r3, [pc, #132]	; (8024b8c <__swbuf_r+0x98>)
 8024b08:	429c      	cmp	r4, r3
 8024b0a:	d12a      	bne.n	8024b62 <__swbuf_r+0x6e>
 8024b0c:	686c      	ldr	r4, [r5, #4]
 8024b0e:	69a3      	ldr	r3, [r4, #24]
 8024b10:	60a3      	str	r3, [r4, #8]
 8024b12:	89a3      	ldrh	r3, [r4, #12]
 8024b14:	071a      	lsls	r2, r3, #28
 8024b16:	d52e      	bpl.n	8024b76 <__swbuf_r+0x82>
 8024b18:	6923      	ldr	r3, [r4, #16]
 8024b1a:	b363      	cbz	r3, 8024b76 <__swbuf_r+0x82>
 8024b1c:	6923      	ldr	r3, [r4, #16]
 8024b1e:	6820      	ldr	r0, [r4, #0]
 8024b20:	1ac0      	subs	r0, r0, r3
 8024b22:	6963      	ldr	r3, [r4, #20]
 8024b24:	b2f6      	uxtb	r6, r6
 8024b26:	4283      	cmp	r3, r0
 8024b28:	4637      	mov	r7, r6
 8024b2a:	dc04      	bgt.n	8024b36 <__swbuf_r+0x42>
 8024b2c:	4621      	mov	r1, r4
 8024b2e:	4628      	mov	r0, r5
 8024b30:	f000 f98a 	bl	8024e48 <_fflush_r>
 8024b34:	bb28      	cbnz	r0, 8024b82 <__swbuf_r+0x8e>
 8024b36:	68a3      	ldr	r3, [r4, #8]
 8024b38:	3b01      	subs	r3, #1
 8024b3a:	60a3      	str	r3, [r4, #8]
 8024b3c:	6823      	ldr	r3, [r4, #0]
 8024b3e:	1c5a      	adds	r2, r3, #1
 8024b40:	6022      	str	r2, [r4, #0]
 8024b42:	701e      	strb	r6, [r3, #0]
 8024b44:	6963      	ldr	r3, [r4, #20]
 8024b46:	3001      	adds	r0, #1
 8024b48:	4283      	cmp	r3, r0
 8024b4a:	d004      	beq.n	8024b56 <__swbuf_r+0x62>
 8024b4c:	89a3      	ldrh	r3, [r4, #12]
 8024b4e:	07db      	lsls	r3, r3, #31
 8024b50:	d519      	bpl.n	8024b86 <__swbuf_r+0x92>
 8024b52:	2e0a      	cmp	r6, #10
 8024b54:	d117      	bne.n	8024b86 <__swbuf_r+0x92>
 8024b56:	4621      	mov	r1, r4
 8024b58:	4628      	mov	r0, r5
 8024b5a:	f000 f975 	bl	8024e48 <_fflush_r>
 8024b5e:	b190      	cbz	r0, 8024b86 <__swbuf_r+0x92>
 8024b60:	e00f      	b.n	8024b82 <__swbuf_r+0x8e>
 8024b62:	4b0b      	ldr	r3, [pc, #44]	; (8024b90 <__swbuf_r+0x9c>)
 8024b64:	429c      	cmp	r4, r3
 8024b66:	d101      	bne.n	8024b6c <__swbuf_r+0x78>
 8024b68:	68ac      	ldr	r4, [r5, #8]
 8024b6a:	e7d0      	b.n	8024b0e <__swbuf_r+0x1a>
 8024b6c:	4b09      	ldr	r3, [pc, #36]	; (8024b94 <__swbuf_r+0xa0>)
 8024b6e:	429c      	cmp	r4, r3
 8024b70:	bf08      	it	eq
 8024b72:	68ec      	ldreq	r4, [r5, #12]
 8024b74:	e7cb      	b.n	8024b0e <__swbuf_r+0x1a>
 8024b76:	4621      	mov	r1, r4
 8024b78:	4628      	mov	r0, r5
 8024b7a:	f000 f80d 	bl	8024b98 <__swsetup_r>
 8024b7e:	2800      	cmp	r0, #0
 8024b80:	d0cc      	beq.n	8024b1c <__swbuf_r+0x28>
 8024b82:	f04f 37ff 	mov.w	r7, #4294967295
 8024b86:	4638      	mov	r0, r7
 8024b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024b8a:	bf00      	nop
 8024b8c:	08029574 	.word	0x08029574
 8024b90:	08029594 	.word	0x08029594
 8024b94:	08029554 	.word	0x08029554

08024b98 <__swsetup_r>:
 8024b98:	4b32      	ldr	r3, [pc, #200]	; (8024c64 <__swsetup_r+0xcc>)
 8024b9a:	b570      	push	{r4, r5, r6, lr}
 8024b9c:	681d      	ldr	r5, [r3, #0]
 8024b9e:	4606      	mov	r6, r0
 8024ba0:	460c      	mov	r4, r1
 8024ba2:	b125      	cbz	r5, 8024bae <__swsetup_r+0x16>
 8024ba4:	69ab      	ldr	r3, [r5, #24]
 8024ba6:	b913      	cbnz	r3, 8024bae <__swsetup_r+0x16>
 8024ba8:	4628      	mov	r0, r5
 8024baa:	f000 f9b7 	bl	8024f1c <__sinit>
 8024bae:	4b2e      	ldr	r3, [pc, #184]	; (8024c68 <__swsetup_r+0xd0>)
 8024bb0:	429c      	cmp	r4, r3
 8024bb2:	d10f      	bne.n	8024bd4 <__swsetup_r+0x3c>
 8024bb4:	686c      	ldr	r4, [r5, #4]
 8024bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024bba:	b29a      	uxth	r2, r3
 8024bbc:	0715      	lsls	r5, r2, #28
 8024bbe:	d42c      	bmi.n	8024c1a <__swsetup_r+0x82>
 8024bc0:	06d0      	lsls	r0, r2, #27
 8024bc2:	d411      	bmi.n	8024be8 <__swsetup_r+0x50>
 8024bc4:	2209      	movs	r2, #9
 8024bc6:	6032      	str	r2, [r6, #0]
 8024bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024bcc:	81a3      	strh	r3, [r4, #12]
 8024bce:	f04f 30ff 	mov.w	r0, #4294967295
 8024bd2:	e03e      	b.n	8024c52 <__swsetup_r+0xba>
 8024bd4:	4b25      	ldr	r3, [pc, #148]	; (8024c6c <__swsetup_r+0xd4>)
 8024bd6:	429c      	cmp	r4, r3
 8024bd8:	d101      	bne.n	8024bde <__swsetup_r+0x46>
 8024bda:	68ac      	ldr	r4, [r5, #8]
 8024bdc:	e7eb      	b.n	8024bb6 <__swsetup_r+0x1e>
 8024bde:	4b24      	ldr	r3, [pc, #144]	; (8024c70 <__swsetup_r+0xd8>)
 8024be0:	429c      	cmp	r4, r3
 8024be2:	bf08      	it	eq
 8024be4:	68ec      	ldreq	r4, [r5, #12]
 8024be6:	e7e6      	b.n	8024bb6 <__swsetup_r+0x1e>
 8024be8:	0751      	lsls	r1, r2, #29
 8024bea:	d512      	bpl.n	8024c12 <__swsetup_r+0x7a>
 8024bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024bee:	b141      	cbz	r1, 8024c02 <__swsetup_r+0x6a>
 8024bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024bf4:	4299      	cmp	r1, r3
 8024bf6:	d002      	beq.n	8024bfe <__swsetup_r+0x66>
 8024bf8:	4630      	mov	r0, r6
 8024bfa:	f7ff fbb7 	bl	802436c <_free_r>
 8024bfe:	2300      	movs	r3, #0
 8024c00:	6363      	str	r3, [r4, #52]	; 0x34
 8024c02:	89a3      	ldrh	r3, [r4, #12]
 8024c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024c08:	81a3      	strh	r3, [r4, #12]
 8024c0a:	2300      	movs	r3, #0
 8024c0c:	6063      	str	r3, [r4, #4]
 8024c0e:	6923      	ldr	r3, [r4, #16]
 8024c10:	6023      	str	r3, [r4, #0]
 8024c12:	89a3      	ldrh	r3, [r4, #12]
 8024c14:	f043 0308 	orr.w	r3, r3, #8
 8024c18:	81a3      	strh	r3, [r4, #12]
 8024c1a:	6923      	ldr	r3, [r4, #16]
 8024c1c:	b94b      	cbnz	r3, 8024c32 <__swsetup_r+0x9a>
 8024c1e:	89a3      	ldrh	r3, [r4, #12]
 8024c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024c28:	d003      	beq.n	8024c32 <__swsetup_r+0x9a>
 8024c2a:	4621      	mov	r1, r4
 8024c2c:	4630      	mov	r0, r6
 8024c2e:	f000 fa23 	bl	8025078 <__smakebuf_r>
 8024c32:	89a2      	ldrh	r2, [r4, #12]
 8024c34:	f012 0301 	ands.w	r3, r2, #1
 8024c38:	d00c      	beq.n	8024c54 <__swsetup_r+0xbc>
 8024c3a:	2300      	movs	r3, #0
 8024c3c:	60a3      	str	r3, [r4, #8]
 8024c3e:	6963      	ldr	r3, [r4, #20]
 8024c40:	425b      	negs	r3, r3
 8024c42:	61a3      	str	r3, [r4, #24]
 8024c44:	6923      	ldr	r3, [r4, #16]
 8024c46:	b953      	cbnz	r3, 8024c5e <__swsetup_r+0xc6>
 8024c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024c4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8024c50:	d1ba      	bne.n	8024bc8 <__swsetup_r+0x30>
 8024c52:	bd70      	pop	{r4, r5, r6, pc}
 8024c54:	0792      	lsls	r2, r2, #30
 8024c56:	bf58      	it	pl
 8024c58:	6963      	ldrpl	r3, [r4, #20]
 8024c5a:	60a3      	str	r3, [r4, #8]
 8024c5c:	e7f2      	b.n	8024c44 <__swsetup_r+0xac>
 8024c5e:	2000      	movs	r0, #0
 8024c60:	e7f7      	b.n	8024c52 <__swsetup_r+0xba>
 8024c62:	bf00      	nop
 8024c64:	2000009c 	.word	0x2000009c
 8024c68:	08029574 	.word	0x08029574
 8024c6c:	08029594 	.word	0x08029594
 8024c70:	08029554 	.word	0x08029554

08024c74 <__register_exitproc>:
 8024c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024c78:	4d2c      	ldr	r5, [pc, #176]	; (8024d2c <__register_exitproc+0xb8>)
 8024c7a:	682c      	ldr	r4, [r5, #0]
 8024c7c:	4607      	mov	r7, r0
 8024c7e:	460e      	mov	r6, r1
 8024c80:	4691      	mov	r9, r2
 8024c82:	4698      	mov	r8, r3
 8024c84:	b934      	cbnz	r4, 8024c94 <__register_exitproc+0x20>
 8024c86:	4b2a      	ldr	r3, [pc, #168]	; (8024d30 <__register_exitproc+0xbc>)
 8024c88:	4c2a      	ldr	r4, [pc, #168]	; (8024d34 <__register_exitproc+0xc0>)
 8024c8a:	602c      	str	r4, [r5, #0]
 8024c8c:	b113      	cbz	r3, 8024c94 <__register_exitproc+0x20>
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024c94:	6863      	ldr	r3, [r4, #4]
 8024c96:	2b1f      	cmp	r3, #31
 8024c98:	dd3d      	ble.n	8024d16 <__register_exitproc+0xa2>
 8024c9a:	4b27      	ldr	r3, [pc, #156]	; (8024d38 <__register_exitproc+0xc4>)
 8024c9c:	b91b      	cbnz	r3, 8024ca6 <__register_exitproc+0x32>
 8024c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8024ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024ca6:	208c      	movs	r0, #140	; 0x8c
 8024ca8:	f7ff fb3c 	bl	8024324 <malloc>
 8024cac:	4604      	mov	r4, r0
 8024cae:	2800      	cmp	r0, #0
 8024cb0:	d0f5      	beq.n	8024c9e <__register_exitproc+0x2a>
 8024cb2:	2300      	movs	r3, #0
 8024cb4:	682a      	ldr	r2, [r5, #0]
 8024cb6:	6002      	str	r2, [r0, #0]
 8024cb8:	6043      	str	r3, [r0, #4]
 8024cba:	6028      	str	r0, [r5, #0]
 8024cbc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8024cc0:	b30f      	cbz	r7, 8024d06 <__register_exitproc+0x92>
 8024cc2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024cc6:	f7ff fb2d 	bl	8024324 <malloc>
 8024cca:	2800      	cmp	r0, #0
 8024ccc:	d0e7      	beq.n	8024c9e <__register_exitproc+0x2a>
 8024cce:	2300      	movs	r3, #0
 8024cd0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8024cd4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8024cd8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024cdc:	6862      	ldr	r2, [r4, #4]
 8024cde:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8024ce2:	2301      	movs	r3, #1
 8024ce4:	4093      	lsls	r3, r2
 8024ce6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8024cea:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8024cee:	431a      	orrs	r2, r3
 8024cf0:	2f02      	cmp	r7, #2
 8024cf2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8024cf6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8024cfa:	bf02      	ittt	eq
 8024cfc:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8024d00:	4313      	orreq	r3, r2
 8024d02:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8024d06:	6863      	ldr	r3, [r4, #4]
 8024d08:	1c5a      	adds	r2, r3, #1
 8024d0a:	3302      	adds	r3, #2
 8024d0c:	6062      	str	r2, [r4, #4]
 8024d0e:	2000      	movs	r0, #0
 8024d10:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8024d14:	e7c5      	b.n	8024ca2 <__register_exitproc+0x2e>
 8024d16:	2f00      	cmp	r7, #0
 8024d18:	d0f5      	beq.n	8024d06 <__register_exitproc+0x92>
 8024d1a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024d1e:	2800      	cmp	r0, #0
 8024d20:	d1dc      	bne.n	8024cdc <__register_exitproc+0x68>
 8024d22:	4b05      	ldr	r3, [pc, #20]	; (8024d38 <__register_exitproc+0xc4>)
 8024d24:	2b00      	cmp	r3, #0
 8024d26:	d0ba      	beq.n	8024c9e <__register_exitproc+0x2a>
 8024d28:	e7cb      	b.n	8024cc2 <__register_exitproc+0x4e>
 8024d2a:	bf00      	nop
 8024d2c:	2000bf30 	.word	0x2000bf30
 8024d30:	08029550 	.word	0x08029550
 8024d34:	2000bea4 	.word	0x2000bea4
 8024d38:	08024325 	.word	0x08024325

08024d3c <__sflush_r>:
 8024d3c:	898a      	ldrh	r2, [r1, #12]
 8024d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d42:	4605      	mov	r5, r0
 8024d44:	0710      	lsls	r0, r2, #28
 8024d46:	460c      	mov	r4, r1
 8024d48:	d458      	bmi.n	8024dfc <__sflush_r+0xc0>
 8024d4a:	684b      	ldr	r3, [r1, #4]
 8024d4c:	2b00      	cmp	r3, #0
 8024d4e:	dc05      	bgt.n	8024d5c <__sflush_r+0x20>
 8024d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024d52:	2b00      	cmp	r3, #0
 8024d54:	dc02      	bgt.n	8024d5c <__sflush_r+0x20>
 8024d56:	2000      	movs	r0, #0
 8024d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024d5e:	2e00      	cmp	r6, #0
 8024d60:	d0f9      	beq.n	8024d56 <__sflush_r+0x1a>
 8024d62:	2300      	movs	r3, #0
 8024d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024d68:	682f      	ldr	r7, [r5, #0]
 8024d6a:	6a21      	ldr	r1, [r4, #32]
 8024d6c:	602b      	str	r3, [r5, #0]
 8024d6e:	d032      	beq.n	8024dd6 <__sflush_r+0x9a>
 8024d70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024d72:	89a3      	ldrh	r3, [r4, #12]
 8024d74:	075a      	lsls	r2, r3, #29
 8024d76:	d505      	bpl.n	8024d84 <__sflush_r+0x48>
 8024d78:	6863      	ldr	r3, [r4, #4]
 8024d7a:	1ac0      	subs	r0, r0, r3
 8024d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024d7e:	b10b      	cbz	r3, 8024d84 <__sflush_r+0x48>
 8024d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024d82:	1ac0      	subs	r0, r0, r3
 8024d84:	2300      	movs	r3, #0
 8024d86:	4602      	mov	r2, r0
 8024d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024d8a:	6a21      	ldr	r1, [r4, #32]
 8024d8c:	4628      	mov	r0, r5
 8024d8e:	47b0      	blx	r6
 8024d90:	1c43      	adds	r3, r0, #1
 8024d92:	89a3      	ldrh	r3, [r4, #12]
 8024d94:	d106      	bne.n	8024da4 <__sflush_r+0x68>
 8024d96:	6829      	ldr	r1, [r5, #0]
 8024d98:	291d      	cmp	r1, #29
 8024d9a:	d848      	bhi.n	8024e2e <__sflush_r+0xf2>
 8024d9c:	4a29      	ldr	r2, [pc, #164]	; (8024e44 <__sflush_r+0x108>)
 8024d9e:	40ca      	lsrs	r2, r1
 8024da0:	07d6      	lsls	r6, r2, #31
 8024da2:	d544      	bpl.n	8024e2e <__sflush_r+0xf2>
 8024da4:	2200      	movs	r2, #0
 8024da6:	6062      	str	r2, [r4, #4]
 8024da8:	04d9      	lsls	r1, r3, #19
 8024daa:	6922      	ldr	r2, [r4, #16]
 8024dac:	6022      	str	r2, [r4, #0]
 8024dae:	d504      	bpl.n	8024dba <__sflush_r+0x7e>
 8024db0:	1c42      	adds	r2, r0, #1
 8024db2:	d101      	bne.n	8024db8 <__sflush_r+0x7c>
 8024db4:	682b      	ldr	r3, [r5, #0]
 8024db6:	b903      	cbnz	r3, 8024dba <__sflush_r+0x7e>
 8024db8:	6560      	str	r0, [r4, #84]	; 0x54
 8024dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024dbc:	602f      	str	r7, [r5, #0]
 8024dbe:	2900      	cmp	r1, #0
 8024dc0:	d0c9      	beq.n	8024d56 <__sflush_r+0x1a>
 8024dc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024dc6:	4299      	cmp	r1, r3
 8024dc8:	d002      	beq.n	8024dd0 <__sflush_r+0x94>
 8024dca:	4628      	mov	r0, r5
 8024dcc:	f7ff face 	bl	802436c <_free_r>
 8024dd0:	2000      	movs	r0, #0
 8024dd2:	6360      	str	r0, [r4, #52]	; 0x34
 8024dd4:	e7c0      	b.n	8024d58 <__sflush_r+0x1c>
 8024dd6:	2301      	movs	r3, #1
 8024dd8:	4628      	mov	r0, r5
 8024dda:	47b0      	blx	r6
 8024ddc:	1c41      	adds	r1, r0, #1
 8024dde:	d1c8      	bne.n	8024d72 <__sflush_r+0x36>
 8024de0:	682b      	ldr	r3, [r5, #0]
 8024de2:	2b00      	cmp	r3, #0
 8024de4:	d0c5      	beq.n	8024d72 <__sflush_r+0x36>
 8024de6:	2b1d      	cmp	r3, #29
 8024de8:	d001      	beq.n	8024dee <__sflush_r+0xb2>
 8024dea:	2b16      	cmp	r3, #22
 8024dec:	d101      	bne.n	8024df2 <__sflush_r+0xb6>
 8024dee:	602f      	str	r7, [r5, #0]
 8024df0:	e7b1      	b.n	8024d56 <__sflush_r+0x1a>
 8024df2:	89a3      	ldrh	r3, [r4, #12]
 8024df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024df8:	81a3      	strh	r3, [r4, #12]
 8024dfa:	e7ad      	b.n	8024d58 <__sflush_r+0x1c>
 8024dfc:	690f      	ldr	r7, [r1, #16]
 8024dfe:	2f00      	cmp	r7, #0
 8024e00:	d0a9      	beq.n	8024d56 <__sflush_r+0x1a>
 8024e02:	0793      	lsls	r3, r2, #30
 8024e04:	680e      	ldr	r6, [r1, #0]
 8024e06:	bf08      	it	eq
 8024e08:	694b      	ldreq	r3, [r1, #20]
 8024e0a:	600f      	str	r7, [r1, #0]
 8024e0c:	bf18      	it	ne
 8024e0e:	2300      	movne	r3, #0
 8024e10:	eba6 0807 	sub.w	r8, r6, r7
 8024e14:	608b      	str	r3, [r1, #8]
 8024e16:	f1b8 0f00 	cmp.w	r8, #0
 8024e1a:	dd9c      	ble.n	8024d56 <__sflush_r+0x1a>
 8024e1c:	4643      	mov	r3, r8
 8024e1e:	463a      	mov	r2, r7
 8024e20:	6a21      	ldr	r1, [r4, #32]
 8024e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024e24:	4628      	mov	r0, r5
 8024e26:	47b0      	blx	r6
 8024e28:	2800      	cmp	r0, #0
 8024e2a:	dc06      	bgt.n	8024e3a <__sflush_r+0xfe>
 8024e2c:	89a3      	ldrh	r3, [r4, #12]
 8024e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024e32:	81a3      	strh	r3, [r4, #12]
 8024e34:	f04f 30ff 	mov.w	r0, #4294967295
 8024e38:	e78e      	b.n	8024d58 <__sflush_r+0x1c>
 8024e3a:	4407      	add	r7, r0
 8024e3c:	eba8 0800 	sub.w	r8, r8, r0
 8024e40:	e7e9      	b.n	8024e16 <__sflush_r+0xda>
 8024e42:	bf00      	nop
 8024e44:	20400001 	.word	0x20400001

08024e48 <_fflush_r>:
 8024e48:	b538      	push	{r3, r4, r5, lr}
 8024e4a:	690b      	ldr	r3, [r1, #16]
 8024e4c:	4605      	mov	r5, r0
 8024e4e:	460c      	mov	r4, r1
 8024e50:	b1db      	cbz	r3, 8024e8a <_fflush_r+0x42>
 8024e52:	b118      	cbz	r0, 8024e5c <_fflush_r+0x14>
 8024e54:	6983      	ldr	r3, [r0, #24]
 8024e56:	b90b      	cbnz	r3, 8024e5c <_fflush_r+0x14>
 8024e58:	f000 f860 	bl	8024f1c <__sinit>
 8024e5c:	4b0c      	ldr	r3, [pc, #48]	; (8024e90 <_fflush_r+0x48>)
 8024e5e:	429c      	cmp	r4, r3
 8024e60:	d109      	bne.n	8024e76 <_fflush_r+0x2e>
 8024e62:	686c      	ldr	r4, [r5, #4]
 8024e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e68:	b17b      	cbz	r3, 8024e8a <_fflush_r+0x42>
 8024e6a:	4621      	mov	r1, r4
 8024e6c:	4628      	mov	r0, r5
 8024e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e72:	f7ff bf63 	b.w	8024d3c <__sflush_r>
 8024e76:	4b07      	ldr	r3, [pc, #28]	; (8024e94 <_fflush_r+0x4c>)
 8024e78:	429c      	cmp	r4, r3
 8024e7a:	d101      	bne.n	8024e80 <_fflush_r+0x38>
 8024e7c:	68ac      	ldr	r4, [r5, #8]
 8024e7e:	e7f1      	b.n	8024e64 <_fflush_r+0x1c>
 8024e80:	4b05      	ldr	r3, [pc, #20]	; (8024e98 <_fflush_r+0x50>)
 8024e82:	429c      	cmp	r4, r3
 8024e84:	bf08      	it	eq
 8024e86:	68ec      	ldreq	r4, [r5, #12]
 8024e88:	e7ec      	b.n	8024e64 <_fflush_r+0x1c>
 8024e8a:	2000      	movs	r0, #0
 8024e8c:	bd38      	pop	{r3, r4, r5, pc}
 8024e8e:	bf00      	nop
 8024e90:	08029574 	.word	0x08029574
 8024e94:	08029594 	.word	0x08029594
 8024e98:	08029554 	.word	0x08029554

08024e9c <std>:
 8024e9c:	2300      	movs	r3, #0
 8024e9e:	b510      	push	{r4, lr}
 8024ea0:	4604      	mov	r4, r0
 8024ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8024ea6:	6083      	str	r3, [r0, #8]
 8024ea8:	8181      	strh	r1, [r0, #12]
 8024eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8024eac:	81c2      	strh	r2, [r0, #14]
 8024eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024eb2:	6183      	str	r3, [r0, #24]
 8024eb4:	4619      	mov	r1, r3
 8024eb6:	2208      	movs	r2, #8
 8024eb8:	305c      	adds	r0, #92	; 0x5c
 8024eba:	f7ff fa4e 	bl	802435a <memset>
 8024ebe:	4b05      	ldr	r3, [pc, #20]	; (8024ed4 <std+0x38>)
 8024ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8024ec2:	4b05      	ldr	r3, [pc, #20]	; (8024ed8 <std+0x3c>)
 8024ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8024ec6:	4b05      	ldr	r3, [pc, #20]	; (8024edc <std+0x40>)
 8024ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024eca:	4b05      	ldr	r3, [pc, #20]	; (8024ee0 <std+0x44>)
 8024ecc:	6224      	str	r4, [r4, #32]
 8024ece:	6323      	str	r3, [r4, #48]	; 0x30
 8024ed0:	bd10      	pop	{r4, pc}
 8024ed2:	bf00      	nop
 8024ed4:	080250fd 	.word	0x080250fd
 8024ed8:	0802511f 	.word	0x0802511f
 8024edc:	08025157 	.word	0x08025157
 8024ee0:	0802517b 	.word	0x0802517b

08024ee4 <_cleanup_r>:
 8024ee4:	4901      	ldr	r1, [pc, #4]	; (8024eec <_cleanup_r+0x8>)
 8024ee6:	f000 b885 	b.w	8024ff4 <_fwalk_reent>
 8024eea:	bf00      	nop
 8024eec:	08024e49 	.word	0x08024e49

08024ef0 <__sfmoreglue>:
 8024ef0:	b570      	push	{r4, r5, r6, lr}
 8024ef2:	1e4a      	subs	r2, r1, #1
 8024ef4:	2568      	movs	r5, #104	; 0x68
 8024ef6:	4355      	muls	r5, r2
 8024ef8:	460e      	mov	r6, r1
 8024efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024efe:	f7ff fa83 	bl	8024408 <_malloc_r>
 8024f02:	4604      	mov	r4, r0
 8024f04:	b140      	cbz	r0, 8024f18 <__sfmoreglue+0x28>
 8024f06:	2100      	movs	r1, #0
 8024f08:	e9c0 1600 	strd	r1, r6, [r0]
 8024f0c:	300c      	adds	r0, #12
 8024f0e:	60a0      	str	r0, [r4, #8]
 8024f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024f14:	f7ff fa21 	bl	802435a <memset>
 8024f18:	4620      	mov	r0, r4
 8024f1a:	bd70      	pop	{r4, r5, r6, pc}

08024f1c <__sinit>:
 8024f1c:	6983      	ldr	r3, [r0, #24]
 8024f1e:	b510      	push	{r4, lr}
 8024f20:	4604      	mov	r4, r0
 8024f22:	bb33      	cbnz	r3, 8024f72 <__sinit+0x56>
 8024f24:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8024f28:	6503      	str	r3, [r0, #80]	; 0x50
 8024f2a:	4b12      	ldr	r3, [pc, #72]	; (8024f74 <__sinit+0x58>)
 8024f2c:	4a12      	ldr	r2, [pc, #72]	; (8024f78 <__sinit+0x5c>)
 8024f2e:	681b      	ldr	r3, [r3, #0]
 8024f30:	6282      	str	r2, [r0, #40]	; 0x28
 8024f32:	4298      	cmp	r0, r3
 8024f34:	bf04      	itt	eq
 8024f36:	2301      	moveq	r3, #1
 8024f38:	6183      	streq	r3, [r0, #24]
 8024f3a:	f000 f81f 	bl	8024f7c <__sfp>
 8024f3e:	6060      	str	r0, [r4, #4]
 8024f40:	4620      	mov	r0, r4
 8024f42:	f000 f81b 	bl	8024f7c <__sfp>
 8024f46:	60a0      	str	r0, [r4, #8]
 8024f48:	4620      	mov	r0, r4
 8024f4a:	f000 f817 	bl	8024f7c <__sfp>
 8024f4e:	2200      	movs	r2, #0
 8024f50:	60e0      	str	r0, [r4, #12]
 8024f52:	2104      	movs	r1, #4
 8024f54:	6860      	ldr	r0, [r4, #4]
 8024f56:	f7ff ffa1 	bl	8024e9c <std>
 8024f5a:	2201      	movs	r2, #1
 8024f5c:	2109      	movs	r1, #9
 8024f5e:	68a0      	ldr	r0, [r4, #8]
 8024f60:	f7ff ff9c 	bl	8024e9c <std>
 8024f64:	2202      	movs	r2, #2
 8024f66:	2112      	movs	r1, #18
 8024f68:	68e0      	ldr	r0, [r4, #12]
 8024f6a:	f7ff ff97 	bl	8024e9c <std>
 8024f6e:	2301      	movs	r3, #1
 8024f70:	61a3      	str	r3, [r4, #24]
 8024f72:	bd10      	pop	{r4, pc}
 8024f74:	08029518 	.word	0x08029518
 8024f78:	08024ee5 	.word	0x08024ee5

08024f7c <__sfp>:
 8024f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f7e:	4b1b      	ldr	r3, [pc, #108]	; (8024fec <__sfp+0x70>)
 8024f80:	681e      	ldr	r6, [r3, #0]
 8024f82:	69b3      	ldr	r3, [r6, #24]
 8024f84:	4607      	mov	r7, r0
 8024f86:	b913      	cbnz	r3, 8024f8e <__sfp+0x12>
 8024f88:	4630      	mov	r0, r6
 8024f8a:	f7ff ffc7 	bl	8024f1c <__sinit>
 8024f8e:	3648      	adds	r6, #72	; 0x48
 8024f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024f94:	3b01      	subs	r3, #1
 8024f96:	d503      	bpl.n	8024fa0 <__sfp+0x24>
 8024f98:	6833      	ldr	r3, [r6, #0]
 8024f9a:	b133      	cbz	r3, 8024faa <__sfp+0x2e>
 8024f9c:	6836      	ldr	r6, [r6, #0]
 8024f9e:	e7f7      	b.n	8024f90 <__sfp+0x14>
 8024fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024fa4:	b16d      	cbz	r5, 8024fc2 <__sfp+0x46>
 8024fa6:	3468      	adds	r4, #104	; 0x68
 8024fa8:	e7f4      	b.n	8024f94 <__sfp+0x18>
 8024faa:	2104      	movs	r1, #4
 8024fac:	4638      	mov	r0, r7
 8024fae:	f7ff ff9f 	bl	8024ef0 <__sfmoreglue>
 8024fb2:	6030      	str	r0, [r6, #0]
 8024fb4:	2800      	cmp	r0, #0
 8024fb6:	d1f1      	bne.n	8024f9c <__sfp+0x20>
 8024fb8:	230c      	movs	r3, #12
 8024fba:	603b      	str	r3, [r7, #0]
 8024fbc:	4604      	mov	r4, r0
 8024fbe:	4620      	mov	r0, r4
 8024fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024fc2:	4b0b      	ldr	r3, [pc, #44]	; (8024ff0 <__sfp+0x74>)
 8024fc4:	6665      	str	r5, [r4, #100]	; 0x64
 8024fc6:	e9c4 5500 	strd	r5, r5, [r4]
 8024fca:	60a5      	str	r5, [r4, #8]
 8024fcc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8024fd0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8024fd4:	2208      	movs	r2, #8
 8024fd6:	4629      	mov	r1, r5
 8024fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024fdc:	f7ff f9bd 	bl	802435a <memset>
 8024fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024fe8:	e7e9      	b.n	8024fbe <__sfp+0x42>
 8024fea:	bf00      	nop
 8024fec:	08029518 	.word	0x08029518
 8024ff0:	ffff0001 	.word	0xffff0001

08024ff4 <_fwalk_reent>:
 8024ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024ff8:	4680      	mov	r8, r0
 8024ffa:	4689      	mov	r9, r1
 8024ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025000:	2600      	movs	r6, #0
 8025002:	b914      	cbnz	r4, 802500a <_fwalk_reent+0x16>
 8025004:	4630      	mov	r0, r6
 8025006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802500a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802500e:	3f01      	subs	r7, #1
 8025010:	d501      	bpl.n	8025016 <_fwalk_reent+0x22>
 8025012:	6824      	ldr	r4, [r4, #0]
 8025014:	e7f5      	b.n	8025002 <_fwalk_reent+0xe>
 8025016:	89ab      	ldrh	r3, [r5, #12]
 8025018:	2b01      	cmp	r3, #1
 802501a:	d907      	bls.n	802502c <_fwalk_reent+0x38>
 802501c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025020:	3301      	adds	r3, #1
 8025022:	d003      	beq.n	802502c <_fwalk_reent+0x38>
 8025024:	4629      	mov	r1, r5
 8025026:	4640      	mov	r0, r8
 8025028:	47c8      	blx	r9
 802502a:	4306      	orrs	r6, r0
 802502c:	3568      	adds	r5, #104	; 0x68
 802502e:	e7ee      	b.n	802500e <_fwalk_reent+0x1a>

08025030 <__swhatbuf_r>:
 8025030:	b570      	push	{r4, r5, r6, lr}
 8025032:	460e      	mov	r6, r1
 8025034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025038:	2900      	cmp	r1, #0
 802503a:	b096      	sub	sp, #88	; 0x58
 802503c:	4614      	mov	r4, r2
 802503e:	461d      	mov	r5, r3
 8025040:	da07      	bge.n	8025052 <__swhatbuf_r+0x22>
 8025042:	2300      	movs	r3, #0
 8025044:	602b      	str	r3, [r5, #0]
 8025046:	89b3      	ldrh	r3, [r6, #12]
 8025048:	061a      	lsls	r2, r3, #24
 802504a:	d410      	bmi.n	802506e <__swhatbuf_r+0x3e>
 802504c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025050:	e00e      	b.n	8025070 <__swhatbuf_r+0x40>
 8025052:	466a      	mov	r2, sp
 8025054:	f000 f8b8 	bl	80251c8 <_fstat_r>
 8025058:	2800      	cmp	r0, #0
 802505a:	dbf2      	blt.n	8025042 <__swhatbuf_r+0x12>
 802505c:	9a01      	ldr	r2, [sp, #4]
 802505e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025062:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025066:	425a      	negs	r2, r3
 8025068:	415a      	adcs	r2, r3
 802506a:	602a      	str	r2, [r5, #0]
 802506c:	e7ee      	b.n	802504c <__swhatbuf_r+0x1c>
 802506e:	2340      	movs	r3, #64	; 0x40
 8025070:	2000      	movs	r0, #0
 8025072:	6023      	str	r3, [r4, #0]
 8025074:	b016      	add	sp, #88	; 0x58
 8025076:	bd70      	pop	{r4, r5, r6, pc}

08025078 <__smakebuf_r>:
 8025078:	898b      	ldrh	r3, [r1, #12]
 802507a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802507c:	079d      	lsls	r5, r3, #30
 802507e:	4606      	mov	r6, r0
 8025080:	460c      	mov	r4, r1
 8025082:	d507      	bpl.n	8025094 <__smakebuf_r+0x1c>
 8025084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025088:	6023      	str	r3, [r4, #0]
 802508a:	6123      	str	r3, [r4, #16]
 802508c:	2301      	movs	r3, #1
 802508e:	6163      	str	r3, [r4, #20]
 8025090:	b002      	add	sp, #8
 8025092:	bd70      	pop	{r4, r5, r6, pc}
 8025094:	ab01      	add	r3, sp, #4
 8025096:	466a      	mov	r2, sp
 8025098:	f7ff ffca 	bl	8025030 <__swhatbuf_r>
 802509c:	9900      	ldr	r1, [sp, #0]
 802509e:	4605      	mov	r5, r0
 80250a0:	4630      	mov	r0, r6
 80250a2:	f7ff f9b1 	bl	8024408 <_malloc_r>
 80250a6:	b948      	cbnz	r0, 80250bc <__smakebuf_r+0x44>
 80250a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80250ac:	059a      	lsls	r2, r3, #22
 80250ae:	d4ef      	bmi.n	8025090 <__smakebuf_r+0x18>
 80250b0:	f023 0303 	bic.w	r3, r3, #3
 80250b4:	f043 0302 	orr.w	r3, r3, #2
 80250b8:	81a3      	strh	r3, [r4, #12]
 80250ba:	e7e3      	b.n	8025084 <__smakebuf_r+0xc>
 80250bc:	4b0d      	ldr	r3, [pc, #52]	; (80250f4 <__smakebuf_r+0x7c>)
 80250be:	62b3      	str	r3, [r6, #40]	; 0x28
 80250c0:	89a3      	ldrh	r3, [r4, #12]
 80250c2:	6020      	str	r0, [r4, #0]
 80250c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80250c8:	81a3      	strh	r3, [r4, #12]
 80250ca:	9b00      	ldr	r3, [sp, #0]
 80250cc:	6163      	str	r3, [r4, #20]
 80250ce:	9b01      	ldr	r3, [sp, #4]
 80250d0:	6120      	str	r0, [r4, #16]
 80250d2:	b15b      	cbz	r3, 80250ec <__smakebuf_r+0x74>
 80250d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80250d8:	4630      	mov	r0, r6
 80250da:	f000 f887 	bl	80251ec <_isatty_r>
 80250de:	b128      	cbz	r0, 80250ec <__smakebuf_r+0x74>
 80250e0:	89a3      	ldrh	r3, [r4, #12]
 80250e2:	f023 0303 	bic.w	r3, r3, #3
 80250e6:	f043 0301 	orr.w	r3, r3, #1
 80250ea:	81a3      	strh	r3, [r4, #12]
 80250ec:	89a3      	ldrh	r3, [r4, #12]
 80250ee:	431d      	orrs	r5, r3
 80250f0:	81a5      	strh	r5, [r4, #12]
 80250f2:	e7cd      	b.n	8025090 <__smakebuf_r+0x18>
 80250f4:	08024ee5 	.word	0x08024ee5

080250f8 <__malloc_lock>:
 80250f8:	4770      	bx	lr

080250fa <__malloc_unlock>:
 80250fa:	4770      	bx	lr

080250fc <__sread>:
 80250fc:	b510      	push	{r4, lr}
 80250fe:	460c      	mov	r4, r1
 8025100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025104:	f000 f894 	bl	8025230 <_read_r>
 8025108:	2800      	cmp	r0, #0
 802510a:	bfab      	itete	ge
 802510c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802510e:	89a3      	ldrhlt	r3, [r4, #12]
 8025110:	181b      	addge	r3, r3, r0
 8025112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025116:	bfac      	ite	ge
 8025118:	6563      	strge	r3, [r4, #84]	; 0x54
 802511a:	81a3      	strhlt	r3, [r4, #12]
 802511c:	bd10      	pop	{r4, pc}

0802511e <__swrite>:
 802511e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025122:	461f      	mov	r7, r3
 8025124:	898b      	ldrh	r3, [r1, #12]
 8025126:	05db      	lsls	r3, r3, #23
 8025128:	4605      	mov	r5, r0
 802512a:	460c      	mov	r4, r1
 802512c:	4616      	mov	r6, r2
 802512e:	d505      	bpl.n	802513c <__swrite+0x1e>
 8025130:	2302      	movs	r3, #2
 8025132:	2200      	movs	r2, #0
 8025134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025138:	f000 f868 	bl	802520c <_lseek_r>
 802513c:	89a3      	ldrh	r3, [r4, #12]
 802513e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025146:	81a3      	strh	r3, [r4, #12]
 8025148:	4632      	mov	r2, r6
 802514a:	463b      	mov	r3, r7
 802514c:	4628      	mov	r0, r5
 802514e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025152:	f000 b817 	b.w	8025184 <_write_r>

08025156 <__sseek>:
 8025156:	b510      	push	{r4, lr}
 8025158:	460c      	mov	r4, r1
 802515a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802515e:	f000 f855 	bl	802520c <_lseek_r>
 8025162:	1c43      	adds	r3, r0, #1
 8025164:	89a3      	ldrh	r3, [r4, #12]
 8025166:	bf15      	itete	ne
 8025168:	6560      	strne	r0, [r4, #84]	; 0x54
 802516a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802516e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025172:	81a3      	strheq	r3, [r4, #12]
 8025174:	bf18      	it	ne
 8025176:	81a3      	strhne	r3, [r4, #12]
 8025178:	bd10      	pop	{r4, pc}

0802517a <__sclose>:
 802517a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802517e:	f000 b813 	b.w	80251a8 <_close_r>
	...

08025184 <_write_r>:
 8025184:	b538      	push	{r3, r4, r5, lr}
 8025186:	4c07      	ldr	r4, [pc, #28]	; (80251a4 <_write_r+0x20>)
 8025188:	4605      	mov	r5, r0
 802518a:	4608      	mov	r0, r1
 802518c:	4611      	mov	r1, r2
 802518e:	2200      	movs	r2, #0
 8025190:	6022      	str	r2, [r4, #0]
 8025192:	461a      	mov	r2, r3
 8025194:	f7dd fedf 	bl	8002f56 <_write>
 8025198:	1c43      	adds	r3, r0, #1
 802519a:	d102      	bne.n	80251a2 <_write_r+0x1e>
 802519c:	6823      	ldr	r3, [r4, #0]
 802519e:	b103      	cbz	r3, 80251a2 <_write_r+0x1e>
 80251a0:	602b      	str	r3, [r5, #0]
 80251a2:	bd38      	pop	{r3, r4, r5, pc}
 80251a4:	2000cb38 	.word	0x2000cb38

080251a8 <_close_r>:
 80251a8:	b538      	push	{r3, r4, r5, lr}
 80251aa:	4c06      	ldr	r4, [pc, #24]	; (80251c4 <_close_r+0x1c>)
 80251ac:	2300      	movs	r3, #0
 80251ae:	4605      	mov	r5, r0
 80251b0:	4608      	mov	r0, r1
 80251b2:	6023      	str	r3, [r4, #0]
 80251b4:	f7dd feeb 	bl	8002f8e <_close>
 80251b8:	1c43      	adds	r3, r0, #1
 80251ba:	d102      	bne.n	80251c2 <_close_r+0x1a>
 80251bc:	6823      	ldr	r3, [r4, #0]
 80251be:	b103      	cbz	r3, 80251c2 <_close_r+0x1a>
 80251c0:	602b      	str	r3, [r5, #0]
 80251c2:	bd38      	pop	{r3, r4, r5, pc}
 80251c4:	2000cb38 	.word	0x2000cb38

080251c8 <_fstat_r>:
 80251c8:	b538      	push	{r3, r4, r5, lr}
 80251ca:	4c07      	ldr	r4, [pc, #28]	; (80251e8 <_fstat_r+0x20>)
 80251cc:	2300      	movs	r3, #0
 80251ce:	4605      	mov	r5, r0
 80251d0:	4608      	mov	r0, r1
 80251d2:	4611      	mov	r1, r2
 80251d4:	6023      	str	r3, [r4, #0]
 80251d6:	f7dd fee6 	bl	8002fa6 <_fstat>
 80251da:	1c43      	adds	r3, r0, #1
 80251dc:	d102      	bne.n	80251e4 <_fstat_r+0x1c>
 80251de:	6823      	ldr	r3, [r4, #0]
 80251e0:	b103      	cbz	r3, 80251e4 <_fstat_r+0x1c>
 80251e2:	602b      	str	r3, [r5, #0]
 80251e4:	bd38      	pop	{r3, r4, r5, pc}
 80251e6:	bf00      	nop
 80251e8:	2000cb38 	.word	0x2000cb38

080251ec <_isatty_r>:
 80251ec:	b538      	push	{r3, r4, r5, lr}
 80251ee:	4c06      	ldr	r4, [pc, #24]	; (8025208 <_isatty_r+0x1c>)
 80251f0:	2300      	movs	r3, #0
 80251f2:	4605      	mov	r5, r0
 80251f4:	4608      	mov	r0, r1
 80251f6:	6023      	str	r3, [r4, #0]
 80251f8:	f7dd fee5 	bl	8002fc6 <_isatty>
 80251fc:	1c43      	adds	r3, r0, #1
 80251fe:	d102      	bne.n	8025206 <_isatty_r+0x1a>
 8025200:	6823      	ldr	r3, [r4, #0]
 8025202:	b103      	cbz	r3, 8025206 <_isatty_r+0x1a>
 8025204:	602b      	str	r3, [r5, #0]
 8025206:	bd38      	pop	{r3, r4, r5, pc}
 8025208:	2000cb38 	.word	0x2000cb38

0802520c <_lseek_r>:
 802520c:	b538      	push	{r3, r4, r5, lr}
 802520e:	4c07      	ldr	r4, [pc, #28]	; (802522c <_lseek_r+0x20>)
 8025210:	4605      	mov	r5, r0
 8025212:	4608      	mov	r0, r1
 8025214:	4611      	mov	r1, r2
 8025216:	2200      	movs	r2, #0
 8025218:	6022      	str	r2, [r4, #0]
 802521a:	461a      	mov	r2, r3
 802521c:	f7dd fede 	bl	8002fdc <_lseek>
 8025220:	1c43      	adds	r3, r0, #1
 8025222:	d102      	bne.n	802522a <_lseek_r+0x1e>
 8025224:	6823      	ldr	r3, [r4, #0]
 8025226:	b103      	cbz	r3, 802522a <_lseek_r+0x1e>
 8025228:	602b      	str	r3, [r5, #0]
 802522a:	bd38      	pop	{r3, r4, r5, pc}
 802522c:	2000cb38 	.word	0x2000cb38

08025230 <_read_r>:
 8025230:	b538      	push	{r3, r4, r5, lr}
 8025232:	4c07      	ldr	r4, [pc, #28]	; (8025250 <_read_r+0x20>)
 8025234:	4605      	mov	r5, r0
 8025236:	4608      	mov	r0, r1
 8025238:	4611      	mov	r1, r2
 802523a:	2200      	movs	r2, #0
 802523c:	6022      	str	r2, [r4, #0]
 802523e:	461a      	mov	r2, r3
 8025240:	f7dd fe6c 	bl	8002f1c <_read>
 8025244:	1c43      	adds	r3, r0, #1
 8025246:	d102      	bne.n	802524e <_read_r+0x1e>
 8025248:	6823      	ldr	r3, [r4, #0]
 802524a:	b103      	cbz	r3, 802524e <_read_r+0x1e>
 802524c:	602b      	str	r3, [r5, #0]
 802524e:	bd38      	pop	{r3, r4, r5, pc}
 8025250:	2000cb38 	.word	0x2000cb38

08025254 <_init>:
 8025254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025256:	bf00      	nop
 8025258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802525a:	bc08      	pop	{r3}
 802525c:	469e      	mov	lr, r3
 802525e:	4770      	bx	lr

08025260 <_fini>:
 8025260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025262:	bf00      	nop
 8025264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025266:	bc08      	pop	{r3}
 8025268:	469e      	mov	lr, r3
 802526a:	4770      	bx	lr
